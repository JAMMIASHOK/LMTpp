



/*!
\tutorial Comment resoudre un probleme element fini de façon générale

    = Creation d'un fichier "problem.h.py"

        Ce fichier sert a la fois a la definition du maillage (type d'element, dimension + variables stockees) et des formulations retenues

        Exemple de fichier

        \code Python
            from LMT.formal_lf import *
            import string
   
            write_pb(
                name = 'pb_elast',
                incpaths=['FORMULATIONS','LMT/formulations'],
                formulations = ['elasticity_isotropy','elasticity_orthotropy'],
                elements = ['Triangle','Tetra'],
                dim = 3
                additional_fields = {
                    "qtrans" : Variable(unit='mm',nb_dim=['DIM']),
                    #"qtrans" : Variable(unit='mm',T='Vec<double,DIM>'),
                    "typmat" : Variable(interpolation='elementary',unit='',default_value='0'),
                }
                options = {
                    "behavior_simplification" : 'plane stress'   
                }
            )

    = Detail des champs
        name : pb_elast : nom donne au probleme
        Pour declarer ensuite un maillage il faudra faire Mesh<Meshcarac_pb_elast<type, dimension> >  ou type est le type des variables et dim la dimension de l'espace
   incpaths : (optionnel ) chemins dans lesquels les fichiers de formulations doivent etre recherches
   formulations : nom des formulations sur lesquelles on veut travailler
      Dans les repertoires indiques dans incpaths, doivent se trouver des fichiers python du type formulation_elasticity_isortropy.py 
      Ces fichiers contiennent les variables utilisees pour la formulation (modules materiau, contrainte,deplacement,deformation, energie..)
      C'est a l'interieur de ce fichier que l'on ecrit directement la formulation sous forme variationnelle (cf detail)
   
   elements : type d'elements a utiliser dans le maillage parmi : Bar, Triangle, Quad, Tetra, Wedge, Cube
   dim (optionnel) : dimension pour tous les elements precedemment decrits
      par defaut dim = 'nvi' c'est a dire que tous les elements sont regroupes selon leur nombre de variables d'interpolation 
      (2 pour les quad et triangle, 3 pour tetra, cube, wedge, 1 pour les bar), il est possible d'imposer a dim n'importe quelle formule basee sur nvi
   additional_fields : champs additionnel a placer dans les maillages
      "nom du champs" : Variable (interpolation, unit,default_value,T,nb_dim)
         interpolation : correspond au type d'interpolation de la variable, choix parmi : nodal, elementary, global, der_nodal (derivable d'un champ nodal, vecteur contenant n points de gauss eux meme contenant de qu'on veut),bubble
         unit : unite du champs
         default_value : valeur par defaut
         T='type' type special souhaite pour le champs, pour obtenir un champ fonction de la dimension du problem utiliser DIM
         nb_dim : dimension si le champs est un vecteur
   options : exemple "behavior_simplification" possibilite de choisir entre 'plane stress', 'axysymmetric', 'plane strain'  ...

    = Creation d'un fichier de formulation "formulation_elasticity.py"
   
        Exemple de fichier
   
   f_vol = Variable( interpolation='global', nb_dim=[dim], default_value='0.0,'*(dim-1)+'0.0', unit='N/m^3' )
   elastic_modulus = Variable( interpolation='global', default_value='15e3', unit='N/mm^2' )
   poisson_ratio = Variable( interpolation='global', default_value='0.3', unit='1' )
   density = Variable( interpolation='global', default_value='1', unit='kg/mm^3' )
   
   
   dep = Variable( unknown=True, nb_dim=[dim], default_value='0.0', unit='mm' )
   
   sigma = Variable( interpolation='der_nodal', default_value='0', nb_dim=[dim*(dim+1)/2], unit='N/mm^2' )
   epsilon = Variable( interpolation='der_nodal', default_value='0', nb_dim=[dim*(dim+1)/2], unit='' )
   ener = Variable( interpolation='elementary', default_value='0', unit='N*mm' )
   
   
   def formulation():
      epsilon = grad_sym_col(dep.expr)
      epstest = grad_sym_col(dep.test)
      behavior_simplification=options["behavior_simplification"]
      sigma = mul( hooke_matrix(elastic_modulus.expr,poisson_ratio.expr,dim,behavior_simplification) ,epsilon )
   
      res = density.expr * dot( dep.expr.diff(time).diff(time) - f_vol.expr, dep.test )
      for i in range(dim): res += sigma[i] * epstest[i]
      for i in range(dim,epsilon.size()): res += 2 * sigma[i] * epstest[i]
            
      return res * dV

   def apply_on_elements_after_solve(unk_subs): # return a string
     H = hooke_matrix(elastic_modulus.expr,poisson_ratio.expr,dim,'plane stress')
     epsilon = grad_sym_col(dep.expr)
     sigma = mul( H, epsilon )
     #my_subs = unk_subs
     #my_subs[ time ] = time_steps[0]
     #for vi in e.var_inter: my_subs[vi] = number(0.5)
     #sigma = sigma.subs(EM(my_subs))
     #epsilon = epsilon.subs(EM(my_subs))
    
     cw = Write_code('T')
     for i in range(dim*(dim+1)/2):
       cw.add( epsilon[i], 'elem.epsilon[0]['+str(i)+']', Write_code.Set )
       cw.add( sigma[i], 'elem.sigma[0]['+str(i)+']', Write_code.Set )
     return cw.to_string()

      
Premiere etape : definition des variables accessibles au niveau du maillage
   
   nom_variable = Variable(meme syntaxe que pour additional_fields dans le fichier problem.py)
   unknown champs special indiquant que la variable est une inconnue du probleme (obtenue par resolution d'un systeme)
   
Deuxieme etape : definition de la formulation , on ecrit ici la formulation sous forme variationnelle
   
   pour acceder aux champs definis dans la premiere etape, utiliser champs.expr
   plusieurs fonctions sont deja determinees dans le fichier "element.py" (grad_sym_col, green_lagrange ...)
   pour definir une variable de type symbole : E = symbol('m.elastic_modulus')
   pour definir un vecteur : vect = vector([...])
   pour definir une matrice : mat = matrice([ [...] , [...] ])
   pour multiplier une matrice par un vecteur : mul(mat,vect)
   pour inverser une matrice mat.inverse()
   
   les matrices de hooke sont definies dans material_help.py
   
   On doit renvoyer l'expression variationnelle complete sans s'oocuper de savoir si on obtient une matrice ou un vecteur en sortie
   dV, dS ... correspond a l'integration souhaitee
   
Troisieme etape : definition de fonctions pour calculer des valeurs apres resolution
   possibilite d'ecrire jusqu'a 3 fonctions (apply_on_elements_after_solve, apply_on_elements_after_solve_2, apply_on_elements_after_solve_3)
   
   Pour ecrire le code genere, on utilise 
      cw.Write_code(type,nombre d'espace dans le code genere)
   pour ajouter un champ cw.add(valeur, 'expression en cpp', Write_code.Set)  (ou Write_code.Add )
   pour ecrire le code : return cw.to_string()
   
   Attention il n'est possible d'ecrire des variables que composante par composante
   
 
   
Utilisation en c++ des maillages et formulations

Definition d'un maillage base sur les definitions precedentes (problem.h.py, formulation_elasticity.py)

Definition d'un maillage
        typedef Mesh<Mesh_carac_pb_elas<double,2 > > TM;
        TM m;

Pour acceder aux champs definis au maillage :
        champs globaux : m.elastic_modulus
        champs nodaux : m.node_list[i].dep  
        champs aux elements : 
            creer une structure pour realiser l'operation escomptee (exemple, affichage d'un champ particulier)
            
            struct affich_sigma{
               template<class TE> void operator()(TE &e) const{
                  cout<< e.sigma[0] << endl;  // affichage de la contrainte au point de gauss 0
                  }
               }

    = Definition d'une formulation
        \code C/C++
            typedef Formulation<TM,elasticity> TF;
            TF f(m);

            f.m fait reference au maillage defini ci dessus

*/ 