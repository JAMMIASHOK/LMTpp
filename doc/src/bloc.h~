#ifndef BLOC_H
#define BLOC_H

#include<iostream>
#include<cstdlib>
#include<fstream>
#include<vector>

using namespace std ;

#include "visitorbloc.h"
//struct VisitorBloc ;
//struct Parameter ;
//struct TemplateParameter ;
#include "parameter.h"
#include "templateparameter.h"
#include "names.h"
#include "target.h"
#include "listparameter.h"

typedef std::vector<TemplateParameter*> ListTemplateParameter ;
//typedef std::vector<Parameter*> ListParameter ;

struct Bloc : public TagComment, public Target  {
    Bloc( ) { }
    virtual ~Bloc() ;
    virtual void display( std::ostream &os ) ;
    friend std::ostream &operator<<( std::ostream &os, Bloc &b ) ;
    virtual void execute_function( VisitorBloc *v ) { v->function_at_Bloc( this ) ;  }
    //void apply_on_related_to( const std::string &s, Op *op ) ;
    //void generateHTML( string& name ) ;
    //string findKeyword( int*t,int* posistion,int* positionAfter, string& s) ; 
    //int type ;

    public : // struct -> class

    //Names name ;
    string _namespace ;
    string portee ;
    //std::vector<string> listFixedTemplateParameter ;
    ListTemplateParameter listTemplateParameter ;
    std::vector<Bloc*> list_subType_function ;
    ListParameter listTypedef ; // avec dans l'ordre le nom du type puis le synonyme
    ListParameter listMember ;
} ;

#endif

