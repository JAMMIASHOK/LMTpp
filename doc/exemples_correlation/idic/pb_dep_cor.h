#ifndef PROBLEM_pb_dep_cor
#define PROBLEM_pb_dep_cor

#include "formulation/formulation.h"

#ifndef Mesh_carac_pb_dep_cor_HEADER
#define Mesh_carac_pb_dep_cor_HEADER
#include "mesh/displayparaview.h"
#include "mesh/triangle.h"
#include "mesh/quad.h"
#include "mesh/tetra.h"
#include "mesh/hexa.h"
namespace LMT {

template<class TP,unsigned dim> struct Mesh_carac_pb_dep_cor {};
#ifndef IFNDEF_p_DM
#define IFNDEF_p_DM
    struct p_DM { static std::string name() { return "p"; } };
#endif // IFNDEF_p_DM

#ifndef IFNDEF_dep_sv_DM
#define IFNDEF_dep_sv_DM
    struct dep_sv_DM { static std::string name() { return "dep_sv"; } };
#endif // IFNDEF_dep_sv_DM

#ifndef IFNDEF_pos_DM
#define IFNDEF_pos_DM
    struct pos_DM { static std::string name() { return "pos"; } };
#endif // IFNDEF_pos_DM

#ifndef IFNDEF_dep_imp_coef_0_DM
#define IFNDEF_dep_imp_coef_0_DM
    struct dep_imp_coef_0_DM { static std::string name() { return "dep_imp_coef_0"; } };
#endif // IFNDEF_dep_imp_coef_0_DM

#ifndef IFNDEF_f_nodal_DM
#define IFNDEF_f_nodal_DM
    struct f_nodal_DM { static std::string name() { return "f_nodal"; } };
#endif // IFNDEF_f_nodal_DM

#ifndef IFNDEF_proute_DM
#define IFNDEF_proute_DM
    struct proute_DM { static std::string name() { return "proute"; } };
#endif // IFNDEF_proute_DM

#ifndef IFNDEF_f_vol_DM
#define IFNDEF_f_vol_DM
    struct f_vol_DM { static std::string name() { return "f_vol"; } };
#endif // IFNDEF_f_vol_DM

#ifndef IFNDEF_temperature_DM
#define IFNDEF_temperature_DM
    struct temperature_DM { static std::string name() { return "temperature"; } };
#endif // IFNDEF_temperature_DM

#ifndef IFNDEF_tr_epsilon_DM
#define IFNDEF_tr_epsilon_DM
    struct tr_epsilon_DM { static std::string name() { return "tr_epsilon"; } };
#endif // IFNDEF_tr_epsilon_DM

#ifndef IFNDEF_dep_imp_val_0_0_DM
#define IFNDEF_dep_imp_val_0_0_DM
    struct dep_imp_val_0_0_DM { static std::string name() { return "dep_imp_val_0_0"; } };
#endif // IFNDEF_dep_imp_val_0_0_DM

#ifndef IFNDEF_lum_DM
#define IFNDEF_lum_DM
    struct lum_DM { static std::string name() { return "lum"; } };
#endif // IFNDEF_lum_DM

#ifndef IFNDEF_dep_imp_val_0_1_DM
#define IFNDEF_dep_imp_val_0_1_DM
    struct dep_imp_val_0_1_DM { static std::string name() { return "dep_imp_val_0_1"; } };
#endif // IFNDEF_dep_imp_val_0_1_DM

#ifndef IFNDEF_normal_DM
#define IFNDEF_normal_DM
    struct normal_DM { static std::string name() { return "normal"; } };
#endif // IFNDEF_normal_DM

#ifndef IFNDEF_epsilon_DM
#define IFNDEF_epsilon_DM
    struct epsilon_DM { static std::string name() { return "epsilon"; } };
#endif // IFNDEF_epsilon_DM

#ifndef IFNDEF_lim_cond_0_DM
#define IFNDEF_lim_cond_0_DM
    struct lim_cond_0_DM { static std::string name() { return "lim_cond_0"; } };
#endif // IFNDEF_lim_cond_0_DM

#ifndef IFNDEF_lim_cond_1_DM
#define IFNDEF_lim_cond_1_DM
    struct lim_cond_1_DM { static std::string name() { return "lim_cond_1"; } };
#endif // IFNDEF_lim_cond_1_DM

#ifndef IFNDEF_poisson_ratio_DM
#define IFNDEF_poisson_ratio_DM
    struct poisson_ratio_DM { static std::string name() { return "poisson_ratio"; } };
#endif // IFNDEF_poisson_ratio_DM

#ifndef IFNDEF_eps_11_DM
#define IFNDEF_eps_11_DM
    struct eps_11_DM { static std::string name() { return "eps_11"; } };
#endif // IFNDEF_eps_11_DM

#ifndef IFNDEF_elastic_modulus_DM
#define IFNDEF_elastic_modulus_DM
    struct elastic_modulus_DM { static std::string name() { return "elastic_modulus"; } };
#endif // IFNDEF_elastic_modulus_DM

#ifndef IFNDEF_pouet_DM
#define IFNDEF_pouet_DM
    struct pouet_DM { static std::string name() { return "pouet"; } };
#endif // IFNDEF_pouet_DM

#ifndef IFNDEF_density_DM
#define IFNDEF_density_DM
    struct density_DM { static std::string name() { return "density"; } };
#endif // IFNDEF_density_DM

#ifndef IFNDEF_dep_DM
#define IFNDEF_dep_DM
    struct dep_DM { static std::string name() { return "dep"; } };
#endif // IFNDEF_dep_DM

#ifndef IFNDEF_is_on_skin_DM
#define IFNDEF_is_on_skin_DM
    struct is_on_skin_DM { static std::string name() { return "is_on_skin"; } };
#endif // IFNDEF_is_on_skin_DM

#ifndef IFNDEF_f_surf_DM
#define IFNDEF_f_surf_DM
    struct f_surf_DM { static std::string name() { return "f_surf"; } };
#endif // IFNDEF_f_surf_DM

#ifndef IFNDEF_sigma_DM
#define IFNDEF_sigma_DM
    struct sigma_DM { static std::string name() { return "sigma"; } };
#endif // IFNDEF_sigma_DM

template<class TP>
struct Mesh_carac_pb_dep_cor<TP,2> {
    typedef TP Tpos;
    static const unsigned dim = 2;
    typedef Vec<TP,2> Pvec;
    struct NodalStaticData {
        typedef Tpos T1;
        typedef Vec<Tpos,2> T0;
        NodalStaticData():dep_sv(0.0),dep_imp_coef_0(0),f_nodal(0.0,0.0),temperature(0.0),dep_imp_val_0_0(0),lum(1.0),dep_imp_val_0_1(0),normal(0.0),dep(0.0),is_on_skin(0) {}
        CARACDMEXTNAME( 0, T0, dep_sv, "m" );
        CARACDMEXTNAME( 1, T0, pos, "m" );
        CARACDMEXTNAME( 2, T1, dep_imp_coef_0, "1" );
        CARACDMEXTNAME( 3, T0, f_nodal, "N" );
        CARACDMEXTNAME( 4, T1, temperature, "K" );
        CARACDMEXTNAME( 5, T0, dep_imp_val_0_0, "1" );
        CARACDMEXTNAME( 6, T1, lum, "1" );
        CARACDMEXTNAME( 7, T0, dep_imp_val_0_1, "1" );
        CARACDMEXTNAME( 8, T0, normal, "1" );
        CARACDMEXTNAME( 9, T0, dep, "m" );
        CARACDMEXTNAME( 10, T1, is_on_skin, "" );
        static const unsigned nb_params = 11;
        void dm_data_set_field( const std::string field_name, Tpos value ) {
            if ( field_name == "dep_sv" ) { dep_sv = value; return; }
            if ( field_name == "pos" ) { pos = value; return; }
            if ( field_name == "dep_imp_coef_0" ) { dep_imp_coef_0 = value; return; }
            if ( field_name == "f_nodal" ) { f_nodal = value; return; }
            if ( field_name == "temperature" ) { temperature = value; return; }
            if ( field_name == "dep_imp_val_0_0" ) { dep_imp_val_0_0 = value; return; }
            if ( field_name == "lum" ) { lum = value; return; }
            if ( field_name == "dep_imp_val_0_1" ) { dep_imp_val_0_1 = value; return; }
            if ( field_name == "normal" ) { normal = value; return; }
            if ( field_name == "dep" ) { dep = value; return; }
            if ( field_name == "is_on_skin" ) { is_on_skin = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
            if ( field_name == "dep_sv" ) { dep_sv = value; return; }
            if ( field_name == "pos" ) { pos = value; return; }
            if ( field_name == "f_nodal" ) { f_nodal = value; return; }
            if ( field_name == "dep_imp_val_0_0" ) { dep_imp_val_0_0 = value; return; }
            if ( field_name == "dep_imp_val_0_1" ) { dep_imp_val_0_1 = value; return; }
            if ( field_name == "normal" ) { normal = value; return; }
            if ( field_name == "dep" ) { dep = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
            if ( field_name == "dep_imp_coef_0" ) { return dep_imp_coef_0; }
            if ( field_name == "temperature" ) { return temperature; }
            if ( field_name == "lum" ) { return lum; }
            if ( field_name == "is_on_skin" ) { return is_on_skin; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Tpos(0);
        }
        Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,1>();
        }
        Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
            if ( field_name == "dep_sv" ) { return dep_sv; }
            if ( field_name == "pos" ) { return pos; }
            if ( field_name == "f_nodal" ) { return f_nodal; }
            if ( field_name == "dep_imp_val_0_0" ) { return dep_imp_val_0_0; }
            if ( field_name == "dep_imp_val_0_1" ) { return dep_imp_val_0_1; }
            if ( field_name == "normal" ) { return normal; }
            if ( field_name == "dep" ) { return dep; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,2>();
        }
        Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,3>();
        }
        Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,4>();
        }
        Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,5>();
        }
        Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,6>();
        }
        Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<1,1> >();
        }
        Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<2,2> >();
        }
        Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<3,3> >();
        }
        Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<4,4> >();
        }
        Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<5,5> >();
        }
        Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<6,6> >();
        }
        Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<1> >();
        }
        Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<2> >();
        }
        Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<3> >();
        }
    };
    struct GlobalStaticData {
        typedef Tpos T1;
        typedef Vec<Tpos,2> T0;
        GlobalStaticData():f_vol(0.0,0.0),lim_cond_0(1),lim_cond_1(0),poisson_ratio(0.33),elastic_modulus(1),density(7800) {}
        CARACDMEXTNAME( 0, T0, f_vol, "N/m^3" );
        CARACDMEXTNAME( 1, T1, lim_cond_0, "1" );
        CARACDMEXTNAME( 2, T1, lim_cond_1, "1" );
        CARACDMEXTNAME( 3, T1, poisson_ratio, "1" );
        CARACDMEXTNAME( 4, T1, elastic_modulus, "N/m^2" );
        CARACDMEXTNAME( 5, T1, density, "kg/m^3" );
        static const unsigned nb_params = 6;
        void dm_data_set_field( const std::string field_name, Tpos value ) {
            if ( field_name == "f_vol" ) { f_vol = value; return; }
            if ( field_name == "lim_cond_0" ) { lim_cond_0 = value; return; }
            if ( field_name == "lim_cond_1" ) { lim_cond_1 = value; return; }
            if ( field_name == "poisson_ratio" ) { poisson_ratio = value; return; }
            if ( field_name == "elastic_modulus" ) { elastic_modulus = value; return; }
            if ( field_name == "density" ) { density = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
            if ( field_name == "f_vol" ) { f_vol = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
            if ( field_name == "lim_cond_0" ) { return lim_cond_0; }
            if ( field_name == "lim_cond_1" ) { return lim_cond_1; }
            if ( field_name == "poisson_ratio" ) { return poisson_ratio; }
            if ( field_name == "elastic_modulus" ) { return elastic_modulus; }
            if ( field_name == "density" ) { return density; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Tpos(0);
        }
        Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,1>();
        }
        Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
            if ( field_name == "f_vol" ) { return f_vol; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,2>();
        }
        Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,3>();
        }
        Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,4>();
        }
        Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,5>();
        }
        Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,6>();
        }
        Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<1,1> >();
        }
        Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<2,2> >();
        }
        Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<3,3> >();
        }
        Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<4,4> >();
        }
        Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<5,5> >();
        }
        Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<6,6> >();
        }
        Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<1> >();
        }
        Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<2> >();
        }
        Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<3> >();
        }
    };
    typedef Node<dim,Tpos,NodalStaticData> TNode;
    typedef ElementAncestor<TNode> EA;
    template<unsigned nvi_to_subs,unsigned skin,unsigned num_sub_element,unsigned inner=0> struct ElementChoice { typedef void NE; typedef DefaultBehavior BE; typedef VoidDMSet TData; };
    template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,0,inner> { typedef Triangle NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Vec<Tpos,1> T1;
            typedef Vec<Vec<Tpos,3>,1> T2;
            typedef Tpos T3;
            typedef Vec<Mat<Tpos,Gen<3,3> >,2> T0;
            TData():proute(0),tr_epsilon(0),epsilon(0),eps_11(0),pouet(0),sigma(0) {}
            CARACDMEXTNAME( 0, T0, proute, "K" );
            CARACDMEXTNAME( 1, T1, tr_epsilon, "1" );
            CARACDMEXTNAME( 2, T2, epsilon, "1" );
            CARACDMEXTNAME( 3, T1, eps_11, "1" );
            CARACDMEXTNAME( 4, T3, pouet, "1" );
            CARACDMEXTNAME( 5, T2, sigma, "N/m^2" );
            static const unsigned nb_params = 6;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "tr_epsilon" ) { tr_epsilon[0] = value; } // hum
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "eps_11" ) { eps_11[0] = value; } // hum
                if ( field_name == "pouet" ) { pouet = value; return; }
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                if ( field_name == "proute" ) { proute[0] = value; } // hum
                if ( field_name == "proute" ) { proute[1] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "tr_epsilon" ) { return tr_epsilon[0]; } // hum
                if ( field_name == "eps_11" ) { return eps_11[0]; } // hum
                if ( field_name == "pouet" ) { return pouet; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                if ( field_name == "epsilon" ) { return epsilon[0]; } // hum
                if ( field_name == "sigma" ) { return sigma[0]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                if ( field_name == "proute" ) { return proute[0]; } // hum
                if ( field_name == "proute" ) { return proute[1]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,1,inner> { typedef Quad NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Vec<Vec<Tpos,3>,1> T2;
            typedef Vec<Tpos,1> T1;
            typedef Vec<Mat<Tpos,Gen<3,3> >,4> T0;
            typedef Tpos T3;
            TData():proute(0),tr_epsilon(0),epsilon(0),eps_11(0),pouet(0),sigma(0) {}
            CARACDMEXTNAME( 0, T0, proute, "K" );
            CARACDMEXTNAME( 1, T1, tr_epsilon, "1" );
            CARACDMEXTNAME( 2, T2, epsilon, "1" );
            CARACDMEXTNAME( 3, T1, eps_11, "1" );
            CARACDMEXTNAME( 4, T3, pouet, "1" );
            CARACDMEXTNAME( 5, T2, sigma, "N/m^2" );
            static const unsigned nb_params = 6;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "tr_epsilon" ) { tr_epsilon[0] = value; } // hum
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "eps_11" ) { eps_11[0] = value; } // hum
                if ( field_name == "pouet" ) { pouet = value; return; }
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                if ( field_name == "proute" ) { proute[0] = value; } // hum
                if ( field_name == "proute" ) { proute[1] = value; } // hum
                if ( field_name == "proute" ) { proute[2] = value; } // hum
                if ( field_name == "proute" ) { proute[3] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "tr_epsilon" ) { return tr_epsilon[0]; } // hum
                if ( field_name == "eps_11" ) { return eps_11[0]; } // hum
                if ( field_name == "pouet" ) { return pouet; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                if ( field_name == "epsilon" ) { return epsilon[0]; } // hum
                if ( field_name == "sigma" ) { return sigma[0]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                if ( field_name == "proute" ) { return proute[0]; } // hum
                if ( field_name == "proute" ) { return proute[1]; } // hum
                if ( field_name == "proute" ) { return proute[2]; } // hum
                if ( field_name == "proute" ) { return proute[3]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<1,skin,0,inner> { typedef Bar NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Tpos T0;
            typedef Vec<Tpos,2> T1;
            TData():p(0.0),f_surf(0.0,0.0) {}
            CARACDMEXTNAME( 0, T0, p, "N/m^2" );
            CARACDMEXTNAME( 1, T1, f_surf, "N/m^2" );
            static const unsigned nb_params = 2;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "p" ) { p = value; return; }
                if ( field_name == "f_surf" ) { f_surf = value; return; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                if ( field_name == "f_surf" ) { f_surf = value; return; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "p" ) { return p; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                if ( field_name == "f_surf" ) { return f_surf; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<2,skin,0,inner> { typedef NodalElement NE; typedef DefaultBehavior BE; typedef VoidDMSet TData;    };
};
#ifndef IFNDEF_p_DM
#define IFNDEF_p_DM
    struct p_DM { static std::string name() { return "p"; } };
#endif // IFNDEF_p_DM

#ifndef IFNDEF_dep_sv_DM
#define IFNDEF_dep_sv_DM
    struct dep_sv_DM { static std::string name() { return "dep_sv"; } };
#endif // IFNDEF_dep_sv_DM

#ifndef IFNDEF_pos_DM
#define IFNDEF_pos_DM
    struct pos_DM { static std::string name() { return "pos"; } };
#endif // IFNDEF_pos_DM

#ifndef IFNDEF_dep_imp_coef_0_DM
#define IFNDEF_dep_imp_coef_0_DM
    struct dep_imp_coef_0_DM { static std::string name() { return "dep_imp_coef_0"; } };
#endif // IFNDEF_dep_imp_coef_0_DM

#ifndef IFNDEF_f_nodal_DM
#define IFNDEF_f_nodal_DM
    struct f_nodal_DM { static std::string name() { return "f_nodal"; } };
#endif // IFNDEF_f_nodal_DM

#ifndef IFNDEF_proute_DM
#define IFNDEF_proute_DM
    struct proute_DM { static std::string name() { return "proute"; } };
#endif // IFNDEF_proute_DM

#ifndef IFNDEF_f_vol_DM
#define IFNDEF_f_vol_DM
    struct f_vol_DM { static std::string name() { return "f_vol"; } };
#endif // IFNDEF_f_vol_DM

#ifndef IFNDEF_temperature_DM
#define IFNDEF_temperature_DM
    struct temperature_DM { static std::string name() { return "temperature"; } };
#endif // IFNDEF_temperature_DM

#ifndef IFNDEF_tr_epsilon_DM
#define IFNDEF_tr_epsilon_DM
    struct tr_epsilon_DM { static std::string name() { return "tr_epsilon"; } };
#endif // IFNDEF_tr_epsilon_DM

#ifndef IFNDEF_dep_imp_val_0_0_DM
#define IFNDEF_dep_imp_val_0_0_DM
    struct dep_imp_val_0_0_DM { static std::string name() { return "dep_imp_val_0_0"; } };
#endif // IFNDEF_dep_imp_val_0_0_DM

#ifndef IFNDEF_lum_DM
#define IFNDEF_lum_DM
    struct lum_DM { static std::string name() { return "lum"; } };
#endif // IFNDEF_lum_DM

#ifndef IFNDEF_dep_imp_val_0_1_DM
#define IFNDEF_dep_imp_val_0_1_DM
    struct dep_imp_val_0_1_DM { static std::string name() { return "dep_imp_val_0_1"; } };
#endif // IFNDEF_dep_imp_val_0_1_DM

#ifndef IFNDEF_normal_DM
#define IFNDEF_normal_DM
    struct normal_DM { static std::string name() { return "normal"; } };
#endif // IFNDEF_normal_DM

#ifndef IFNDEF_epsilon_DM
#define IFNDEF_epsilon_DM
    struct epsilon_DM { static std::string name() { return "epsilon"; } };
#endif // IFNDEF_epsilon_DM

#ifndef IFNDEF_lim_cond_0_DM
#define IFNDEF_lim_cond_0_DM
    struct lim_cond_0_DM { static std::string name() { return "lim_cond_0"; } };
#endif // IFNDEF_lim_cond_0_DM

#ifndef IFNDEF_lim_cond_1_DM
#define IFNDEF_lim_cond_1_DM
    struct lim_cond_1_DM { static std::string name() { return "lim_cond_1"; } };
#endif // IFNDEF_lim_cond_1_DM

#ifndef IFNDEF_poisson_ratio_DM
#define IFNDEF_poisson_ratio_DM
    struct poisson_ratio_DM { static std::string name() { return "poisson_ratio"; } };
#endif // IFNDEF_poisson_ratio_DM

#ifndef IFNDEF_eps_11_DM
#define IFNDEF_eps_11_DM
    struct eps_11_DM { static std::string name() { return "eps_11"; } };
#endif // IFNDEF_eps_11_DM

#ifndef IFNDEF_elastic_modulus_DM
#define IFNDEF_elastic_modulus_DM
    struct elastic_modulus_DM { static std::string name() { return "elastic_modulus"; } };
#endif // IFNDEF_elastic_modulus_DM

#ifndef IFNDEF_pouet_DM
#define IFNDEF_pouet_DM
    struct pouet_DM { static std::string name() { return "pouet"; } };
#endif // IFNDEF_pouet_DM

#ifndef IFNDEF_density_DM
#define IFNDEF_density_DM
    struct density_DM { static std::string name() { return "density"; } };
#endif // IFNDEF_density_DM

#ifndef IFNDEF_dep_DM
#define IFNDEF_dep_DM
    struct dep_DM { static std::string name() { return "dep"; } };
#endif // IFNDEF_dep_DM

#ifndef IFNDEF_is_on_skin_DM
#define IFNDEF_is_on_skin_DM
    struct is_on_skin_DM { static std::string name() { return "is_on_skin"; } };
#endif // IFNDEF_is_on_skin_DM

#ifndef IFNDEF_f_surf_DM
#define IFNDEF_f_surf_DM
    struct f_surf_DM { static std::string name() { return "f_surf"; } };
#endif // IFNDEF_f_surf_DM

#ifndef IFNDEF_sigma_DM
#define IFNDEF_sigma_DM
    struct sigma_DM { static std::string name() { return "sigma"; } };
#endif // IFNDEF_sigma_DM

template<class TP>
struct Mesh_carac_pb_dep_cor<TP,3> {
    typedef TP Tpos;
    static const unsigned dim = 3;
    typedef Vec<TP,3> Pvec;
    struct NodalStaticData {
        typedef Vec<Tpos,3> T0;
        typedef Tpos T1;
        NodalStaticData():dep_sv(0.0),dep_imp_coef_0(0),f_nodal(0.0,0.0,0.0),temperature(0.0),dep_imp_val_0_0(0),lum(1.0),dep_imp_val_0_1(0),normal(0.0),dep(0.0),is_on_skin(0) {}
        CARACDMEXTNAME( 0, T0, dep_sv, "m" );
        CARACDMEXTNAME( 1, T0, pos, "m" );
        CARACDMEXTNAME( 2, T1, dep_imp_coef_0, "1" );
        CARACDMEXTNAME( 3, T0, f_nodal, "N" );
        CARACDMEXTNAME( 4, T1, temperature, "K" );
        CARACDMEXTNAME( 5, T0, dep_imp_val_0_0, "1" );
        CARACDMEXTNAME( 6, T1, lum, "1" );
        CARACDMEXTNAME( 7, T0, dep_imp_val_0_1, "1" );
        CARACDMEXTNAME( 8, T0, normal, "1" );
        CARACDMEXTNAME( 9, T0, dep, "m" );
        CARACDMEXTNAME( 10, T1, is_on_skin, "" );
        static const unsigned nb_params = 11;
        void dm_data_set_field( const std::string field_name, Tpos value ) {
            if ( field_name == "dep_sv" ) { dep_sv = value; return; }
            if ( field_name == "pos" ) { pos = value; return; }
            if ( field_name == "dep_imp_coef_0" ) { dep_imp_coef_0 = value; return; }
            if ( field_name == "f_nodal" ) { f_nodal = value; return; }
            if ( field_name == "temperature" ) { temperature = value; return; }
            if ( field_name == "dep_imp_val_0_0" ) { dep_imp_val_0_0 = value; return; }
            if ( field_name == "lum" ) { lum = value; return; }
            if ( field_name == "dep_imp_val_0_1" ) { dep_imp_val_0_1 = value; return; }
            if ( field_name == "normal" ) { normal = value; return; }
            if ( field_name == "dep" ) { dep = value; return; }
            if ( field_name == "is_on_skin" ) { is_on_skin = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
            if ( field_name == "dep_sv" ) { dep_sv = value; return; }
            if ( field_name == "pos" ) { pos = value; return; }
            if ( field_name == "f_nodal" ) { f_nodal = value; return; }
            if ( field_name == "dep_imp_val_0_0" ) { dep_imp_val_0_0 = value; return; }
            if ( field_name == "dep_imp_val_0_1" ) { dep_imp_val_0_1 = value; return; }
            if ( field_name == "normal" ) { normal = value; return; }
            if ( field_name == "dep" ) { dep = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
            if ( field_name == "dep_imp_coef_0" ) { return dep_imp_coef_0; }
            if ( field_name == "temperature" ) { return temperature; }
            if ( field_name == "lum" ) { return lum; }
            if ( field_name == "is_on_skin" ) { return is_on_skin; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Tpos(0);
        }
        Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,1>();
        }
        Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,2>();
        }
        Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
            if ( field_name == "dep_sv" ) { return dep_sv; }
            if ( field_name == "pos" ) { return pos; }
            if ( field_name == "f_nodal" ) { return f_nodal; }
            if ( field_name == "dep_imp_val_0_0" ) { return dep_imp_val_0_0; }
            if ( field_name == "dep_imp_val_0_1" ) { return dep_imp_val_0_1; }
            if ( field_name == "normal" ) { return normal; }
            if ( field_name == "dep" ) { return dep; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,3>();
        }
        Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,4>();
        }
        Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,5>();
        }
        Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,6>();
        }
        Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<1,1> >();
        }
        Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<2,2> >();
        }
        Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<3,3> >();
        }
        Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<4,4> >();
        }
        Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<5,5> >();
        }
        Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<6,6> >();
        }
        Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<1> >();
        }
        Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<2> >();
        }
        Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<3> >();
        }
    };
    struct GlobalStaticData {
        typedef Vec<Tpos,3> T0;
        typedef Tpos T1;
        GlobalStaticData():f_vol(0.0,0.0,0.0),lim_cond_0(1),lim_cond_1(0),poisson_ratio(0.33),elastic_modulus(1),density(7800) {}
        CARACDMEXTNAME( 0, T0, f_vol, "N/m^3" );
        CARACDMEXTNAME( 1, T1, lim_cond_0, "1" );
        CARACDMEXTNAME( 2, T1, lim_cond_1, "1" );
        CARACDMEXTNAME( 3, T1, poisson_ratio, "1" );
        CARACDMEXTNAME( 4, T1, elastic_modulus, "N/m^2" );
        CARACDMEXTNAME( 5, T1, density, "kg/m^3" );
        static const unsigned nb_params = 6;
        void dm_data_set_field( const std::string field_name, Tpos value ) {
            if ( field_name == "f_vol" ) { f_vol = value; return; }
            if ( field_name == "lim_cond_0" ) { lim_cond_0 = value; return; }
            if ( field_name == "lim_cond_1" ) { lim_cond_1 = value; return; }
            if ( field_name == "poisson_ratio" ) { poisson_ratio = value; return; }
            if ( field_name == "elastic_modulus" ) { elastic_modulus = value; return; }
            if ( field_name == "density" ) { density = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
            if ( field_name == "f_vol" ) { f_vol = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
            if ( field_name == "lim_cond_0" ) { return lim_cond_0; }
            if ( field_name == "lim_cond_1" ) { return lim_cond_1; }
            if ( field_name == "poisson_ratio" ) { return poisson_ratio; }
            if ( field_name == "elastic_modulus" ) { return elastic_modulus; }
            if ( field_name == "density" ) { return density; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Tpos(0);
        }
        Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,1>();
        }
        Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,2>();
        }
        Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
            if ( field_name == "f_vol" ) { return f_vol; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,3>();
        }
        Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,4>();
        }
        Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,5>();
        }
        Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,6>();
        }
        Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<1,1> >();
        }
        Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<2,2> >();
        }
        Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<3,3> >();
        }
        Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<4,4> >();
        }
        Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<5,5> >();
        }
        Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<6,6> >();
        }
        Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<1> >();
        }
        Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<2> >();
        }
        Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<3> >();
        }
    };
    typedef Node<dim,Tpos,NodalStaticData> TNode;
    typedef ElementAncestor<TNode> EA;
    template<unsigned nvi_to_subs,unsigned skin,unsigned num_sub_element,unsigned inner=0> struct ElementChoice { typedef void NE; typedef DefaultBehavior BE; typedef VoidDMSet TData; };
    template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,0,inner> { typedef Tetra NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Vec<Vec<Tpos,6>,1> T2;
            typedef Vec<Tpos,1> T1;
            typedef Tpos T3;
            typedef Vec<Mat<Tpos,Gen<3,3> >,5> T0;
            TData():proute(0),tr_epsilon(0),epsilon(0),eps_11(0),pouet(0),sigma(0) {}
            CARACDMEXTNAME( 0, T0, proute, "K" );
            CARACDMEXTNAME( 1, T1, tr_epsilon, "1" );
            CARACDMEXTNAME( 2, T2, epsilon, "1" );
            CARACDMEXTNAME( 3, T1, eps_11, "1" );
            CARACDMEXTNAME( 4, T3, pouet, "1" );
            CARACDMEXTNAME( 5, T2, sigma, "N/m^2" );
            static const unsigned nb_params = 6;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "tr_epsilon" ) { tr_epsilon[0] = value; } // hum
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "eps_11" ) { eps_11[0] = value; } // hum
                if ( field_name == "pouet" ) { pouet = value; return; }
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                if ( field_name == "proute" ) { proute[0] = value; } // hum
                if ( field_name == "proute" ) { proute[1] = value; } // hum
                if ( field_name == "proute" ) { proute[2] = value; } // hum
                if ( field_name == "proute" ) { proute[3] = value; } // hum
                if ( field_name == "proute" ) { proute[4] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "tr_epsilon" ) { return tr_epsilon[0]; } // hum
                if ( field_name == "eps_11" ) { return eps_11[0]; } // hum
                if ( field_name == "pouet" ) { return pouet; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                if ( field_name == "epsilon" ) { return epsilon[0]; } // hum
                if ( field_name == "sigma" ) { return sigma[0]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                if ( field_name == "proute" ) { return proute[0]; } // hum
                if ( field_name == "proute" ) { return proute[1]; } // hum
                if ( field_name == "proute" ) { return proute[2]; } // hum
                if ( field_name == "proute" ) { return proute[3]; } // hum
                if ( field_name == "proute" ) { return proute[4]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,1,inner> { typedef Hexa NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Vec<Mat<Tpos,Gen<3,3> >,8> T0;
            typedef Vec<Vec<Tpos,6>,1> T2;
            typedef Vec<Tpos,1> T1;
            typedef Tpos T3;
            TData():proute(0),tr_epsilon(0),epsilon(0),eps_11(0),pouet(0),sigma(0) {}
            CARACDMEXTNAME( 0, T0, proute, "K" );
            CARACDMEXTNAME( 1, T1, tr_epsilon, "1" );
            CARACDMEXTNAME( 2, T2, epsilon, "1" );
            CARACDMEXTNAME( 3, T1, eps_11, "1" );
            CARACDMEXTNAME( 4, T3, pouet, "1" );
            CARACDMEXTNAME( 5, T2, sigma, "N/m^2" );
            static const unsigned nb_params = 6;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "tr_epsilon" ) { tr_epsilon[0] = value; } // hum
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "eps_11" ) { eps_11[0] = value; } // hum
                if ( field_name == "pouet" ) { pouet = value; return; }
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                if ( field_name == "proute" ) { proute[0] = value; } // hum
                if ( field_name == "proute" ) { proute[1] = value; } // hum
                if ( field_name == "proute" ) { proute[2] = value; } // hum
                if ( field_name == "proute" ) { proute[3] = value; } // hum
                if ( field_name == "proute" ) { proute[4] = value; } // hum
                if ( field_name == "proute" ) { proute[5] = value; } // hum
                if ( field_name == "proute" ) { proute[6] = value; } // hum
                if ( field_name == "proute" ) { proute[7] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "tr_epsilon" ) { return tr_epsilon[0]; } // hum
                if ( field_name == "eps_11" ) { return eps_11[0]; } // hum
                if ( field_name == "pouet" ) { return pouet; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                if ( field_name == "epsilon" ) { return epsilon[0]; } // hum
                if ( field_name == "sigma" ) { return sigma[0]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                if ( field_name == "proute" ) { return proute[0]; } // hum
                if ( field_name == "proute" ) { return proute[1]; } // hum
                if ( field_name == "proute" ) { return proute[2]; } // hum
                if ( field_name == "proute" ) { return proute[3]; } // hum
                if ( field_name == "proute" ) { return proute[4]; } // hum
                if ( field_name == "proute" ) { return proute[5]; } // hum
                if ( field_name == "proute" ) { return proute[6]; } // hum
                if ( field_name == "proute" ) { return proute[7]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<1,skin,0,inner> { typedef Triangle NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Vec<Tpos,3> T1;
            typedef Tpos T0;
            TData():p(0.0),f_surf(0.0,0.0,0.0) {}
            CARACDMEXTNAME( 0, T0, p, "N/m^2" );
            CARACDMEXTNAME( 1, T1, f_surf, "N/m^2" );
            static const unsigned nb_params = 2;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "p" ) { p = value; return; }
                if ( field_name == "f_surf" ) { f_surf = value; return; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                if ( field_name == "f_surf" ) { f_surf = value; return; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "p" ) { return p; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                if ( field_name == "f_surf" ) { return f_surf; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<1,skin,1,inner> { typedef Quad NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Vec<Tpos,3> T1;
            typedef Tpos T0;
            TData():p(0.0),f_surf(0.0,0.0,0.0) {}
            CARACDMEXTNAME( 0, T0, p, "N/m^2" );
            CARACDMEXTNAME( 1, T1, f_surf, "N/m^2" );
            static const unsigned nb_params = 2;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "p" ) { p = value; return; }
                if ( field_name == "f_surf" ) { f_surf = value; return; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                if ( field_name == "f_surf" ) { f_surf = value; return; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "p" ) { return p; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                if ( field_name == "f_surf" ) { return f_surf; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<2,skin,0,inner> { typedef Bar NE; typedef DefaultBehavior BE; typedef VoidDMSet TData;    };
    template<unsigned skin,unsigned inner> struct ElementChoice<3,skin,0,inner> { typedef NodalElement NE; typedef DefaultBehavior BE; typedef VoidDMSet TData;    };
};
} // namespace LMT
#endif // Mesh_carac_pb_dep_cor_HEADER


#include "formulation/formulation.h"
namespace LMT {
#ifndef ELASTICITY_DEP_2_NUM_0_CARAC_H
#define ELASTICITY_DEP_2_NUM_0_CARAC_H
#ifndef STRUCT_ELASTICITY_DEP
#define STRUCT_ELASTICITY_DEP
struct elasticity_dep {
  static const char *name() { return "elasticity_dep"; }
};
#endif // ELASTICITY_DEP

template<class P_T>
class CaracFormulation<elasticity_dep,2,P_T>  {
public:
  typedef P_T T;
  static const char *name() { return "elasticity_dep"; }
  static const bool matrix_will_be_definite_positive=true;
  static const bool has_nodal_matrix = true;
  static const bool has_IS_contact_matrix=false;
  static const bool need_skin_assembly=false;
  typedef Norm1_is_inf Name_convergence_criterium;
  static const unsigned nb_vectors = 4;
  static const unsigned nb_matrices = 1;
  static const unsigned auto_contact = false;
  static const bool friction_coeff_is_a_nodal_variable = 0;
  static const unsigned offset_of_pos_unknown=3;
  static const unsigned pos_is_an_unknown = false;
  static const unsigned nb_der_var = 1;
  template<class TF> static void add_to_der_vars( TF &f, const Vec<T> &v ) {
      (*f.m).poisson_ratio += v[ 0 ];
  }
  static bool is_unknown(const std::string &s) { return (s=="dep"); }
  static unsigned num_in_vec_unknown(const std::string &s) { if ( s=="dep" )return 0; return 0;  }
  template<unsigned num_mat,unsigned inner=0> struct NodalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  template<unsigned num_mat,unsigned inner=0> struct GlobalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  
  static const unsigned nb_nodal_unknowns = 2;
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
    node.dep[1]=vecs[0][indice+1]; node.dep[0]=vecs[0][indice+0];
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
    node.dep[1]=vecs[0][indice+1]; node.dep[0]=vecs[0][indice+0];
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
    vecs[0][indice+0]=node.dep[0]; vecs[1][indice+0]=node.dep[0]; vecs[2][indice+0]=node.dep[0]; vecs[3][indice+0]=node.dep[0]; vecs[4][indice+0]=node.dep[0];
    vecs[0][indice+1]=node.dep[1]; vecs[1][indice+1]=node.dep[1]; vecs[2][indice+1]=node.dep[1]; vecs[3][indice+1]=node.dep[1]; vecs[4][indice+1]=node.dep[1];
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    T reg0=vecs[1][indice+0]-vecs[0][indice+0]; T reg1=vecs[1][indice+1]-vecs[0][indice+1]; reg0=abs(reg0); reg1=abs(reg1); return max(reg1,reg0);
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
    old_vec[indice+1]=vecs[1][indice+1]; old_vec[indice+0]=vecs[1][indice+0];
  }
  
  static const unsigned nb_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_nodal_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};
#endif // ELASTICITY_DEP_2_NUM_0_CARAC_H
extern "C" void apply_on_elements_after_solve_0_elasticity_dep_Triangle_0( double * );
extern "C" void apply_on_elements_after_solve_1_elasticity_dep_Triangle_1( double * );
extern "C" void apply_on_elements_after_solve_2_elasticity_dep_Triangle_2( double * );
extern "C" void apply_on_elements_after_solve_3_elasticity_dep_Triangle_3( double * );
extern "C" void apply_on_elements_after_solve_4_elasticity_dep_Triangle_4( double * );
extern "C" void apply_on_elements_after_solve_5_elasticity_dep_Triangle_5( double * );
class Triangle;
template<unsigned A,class B,class C> class Node;
template<class A,class B,class C,class D,unsigned E> class Element;

// Carac for ...
template<class P_T_pos,class P_ND,class TED,unsigned nim,class TM,class T>
class CaracFormulationForElement<elasticity_dep,Element<Triangle,DefaultBehavior,Node<2,P_T_pos,P_ND>,TED,nim>,TM,T> {
public:
    template<unsigned num_mat,unsigned inner=0> struct ElemMatricesCarac {
        static const bool symm = true;
        static const bool herm = false;
        static const bool diag = false;
        static const bool linear = true;
    };
    static const unsigned order_integration = 0;
    static const bool has_elementary_matrix = true;
    static const bool has_skin_elementary_matrix = true;
    template<class TE,class TF, class TVEVE> static void after_solve(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(0)[1]; T reg1=elem.pos(2)[0]-elem.pos(0)[0]; T reg2=elem.pos(1)[1]-elem.pos(0)[1]; T reg3=elem.pos(1)[0]-elem.pos(0)[0]; T reg4=1+(*f.m).poisson_ratio;
    T reg5=reg2*reg1; T reg6=reg3*reg0; T reg7=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg8=1.0/(*f.m).elastic_modulus; reg4=reg4/(*f.m).elastic_modulus;
    reg5=reg6-reg5; reg6=vectors[0][indices[1]+1]-vectors[0][indices[0]+1]; T reg9=reg7*reg4; T reg10=vectors[0][indices[2]+1]-vectors[0][indices[0]+1]; T reg11=reg8*reg4;
    T reg12=vectors[0][indices[1]+0]-vectors[0][indices[0]+0]; reg2=reg2/reg5; reg1=reg1/reg5; reg0=reg0/reg5; reg5=reg3/reg5;
    reg3=vectors[0][indices[2]+0]-vectors[0][indices[0]+0]; T reg13=reg5*reg3; T reg14=reg1*reg12; T reg15=reg0*reg6; T reg16=reg2*reg10;
    T reg17=reg7*reg9; T reg18=reg8*reg11; reg17=reg18-reg17; reg18=pow(reg8,2); reg3=reg2*reg3;
    reg12=reg0*reg12; reg10=reg5*reg10; reg6=reg1*reg6; reg16=reg15-reg16; reg15=pow(reg7,2);
    reg14=reg13-reg14; reg3=reg12-reg3; elem.epsilon[0][0]=reg3; reg16=reg14+reg16; reg9=reg9/reg17;
    reg11=reg11/reg17; reg6=reg10-reg6; elem.epsilon[0][1]=reg6; reg15=reg18-reg15; reg17=reg15/reg17;
    reg10=reg9*reg3; reg12=reg11*reg6; reg16=0.5*reg16; elem.epsilon[0][2]=reg16; reg13=reg9*reg6;
    reg14=reg11*reg3; elem.sigma[0][1]=reg12+reg10; elem.sigma[0][2]=reg17*reg16; elem.tr_epsilon=reg6+reg3; elem.sigma[0][0]=reg13+reg14;
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_2(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_3(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_4(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_5(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_6(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
  
  static const unsigned nb_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};

// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; T reg1=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg0=reg0/(*f.m).elastic_modulus; T reg2=1.0/(*f.m).elastic_modulus; T reg3=elem.pos(1)[0]-elem.pos(0)[0];
    T reg4=elem.pos(1)[1]-elem.pos(0)[1]; T reg5=elem.pos(2)[0]-elem.pos(0)[0]; T reg6=elem.pos(2)[1]-elem.pos(0)[1]; T reg7=reg4*reg5; T reg8=reg3*reg6;
    T reg9=reg2*reg0; T reg10=reg1*reg0; T reg11=pow(reg1,2); T reg12=reg2*reg9; T reg13=reg1*reg10;
    T reg14=pow(reg2,2); reg7=reg8-reg7; reg8=reg4/reg7; reg13=reg12-reg13; reg11=reg14-reg11;
    reg5=reg5/reg7; reg6=reg6/reg7; reg12=reg3/reg7; reg14=0.5*reg8; T reg15=0.5*reg5;
    T reg16=0.5*reg6; reg11=reg11/reg13; T reg17=0.5*reg12; T reg18=reg5-reg12; T reg19=reg8-reg6;
    T reg20=0.5*reg19; T reg21=reg11*reg15; T reg22=reg11*reg16; T reg23=0.5*reg18; reg9=reg9/reg13;
    T reg24=reg11*reg14; reg13=reg10/reg13; reg10=reg11*reg17; T reg25=reg12*reg13; T reg26=reg11*reg20;
    T reg27=reg6*reg9; T reg28=2*reg21; T reg29=reg5*reg13; reg10=2*reg10; reg22=2*reg22;
    T reg30=reg8*reg9; T reg31=2*reg24; T reg32=reg6*reg13; T reg33=reg12*reg9; T reg34=reg8*reg13;
    T reg35=reg5*reg9; T reg36=reg11*reg23; T reg37=1-var_inter[0]; T reg38=elem.proute[0](1,1)+elem.proute[1](1,1); T reg39=reg5*reg33;
    T reg40=reg38+(*f.m).f_vol[1]; reg38=reg38+(*f.m).f_vol[0]; T reg41=reg16*reg31; T reg42=reg12*reg34; T reg43=reg10*reg14;
    T reg44=reg5*reg32; T reg45=reg28*reg16; T reg46=reg13*reg19; T reg47=reg9*reg18; T reg48=reg15*reg10;
    T reg49=reg6*reg30; T reg50=reg15*reg22; T reg51=reg6*reg29; T reg52=reg37-var_inter[1]; T reg53=reg17*reg31;
    reg26=2*reg26; T reg54=reg13*reg18; T reg55=reg8*reg27; T reg56=reg28*reg17; T reg57=reg22*reg14;
    reg36=2*reg36; T reg58=reg8*reg25; T reg59=reg9*reg19; T reg60=reg12*reg35; T reg61=reg8*reg29;
    reg48=reg49+reg48; T reg62=reg12*reg33; T reg63=reg14*reg31; T reg64=reg6*reg25; T reg65=reg15*reg31;
    reg50=reg51+reg50; T reg66=reg22*reg17; T reg67=reg17*reg10; T reg68=reg8*reg30; T reg69=reg15*reg28;
    T reg70=reg6*reg27; T reg71=reg26*reg15; T reg72=reg6*reg54; T reg73=reg28*reg14; T reg74=reg36*reg15;
    T reg75=reg6*reg59; T reg76=var_inter[0]*reg38; T reg77=reg20*reg31; reg33=reg18*reg33; T reg78=reg36*reg17;
    T reg79=var_inter[1]*reg38; reg39=reg41+reg39; T reg80=reg12*reg47; T reg81=reg26*reg17; T reg82=reg26*reg14;
    T reg83=reg36*reg14; T reg84=reg8*reg54; T reg85=reg5*reg34; T reg86=reg16*reg10; reg55=reg56+reg55;
    reg57=reg60+reg57; T reg87=reg12*reg32; T reg88=reg5*reg35; T reg89=reg16*reg22; reg43=reg42+reg43;
    reg44=reg45+reg44; T reg90=reg12*reg46; T reg91=var_inter[1]*reg40; reg58=reg53+reg58; T reg92=reg5*reg47;
    T reg93=reg26*reg16; T reg94=reg5*reg46; T reg95=reg36*reg16; T reg96=var_inter[0]*reg40; T reg97=reg18*reg35;
    T reg98=reg20*reg28; reg32=reg18*reg32; T reg99=reg20*reg26; reg47=reg18*reg47; T reg100=reg36*reg20;
    reg46=reg18*reg46; T reg101=reg52*reg40; T reg102=reg23*reg31; reg25=reg19*reg25; T reg103=reg23*reg10;
    T reg104=reg19*reg30; T reg105=reg23*reg22; T reg106=reg19*reg29; T reg107=reg23*reg28; reg27=reg19*reg27;
    reg26=reg23*reg26; reg54=reg19*reg54; reg36=reg23*reg36; T reg108=reg19*reg59; T reg109=reg52*reg38;
    reg59=reg8*reg59; reg10=reg20*reg10; T reg110=reg18*reg34; reg22=reg20*reg22; reg27=reg27-reg107;
    T reg111=reg7*reg57; reg84=reg81-reg84; reg59=reg78-reg59; reg105=reg105-reg106; reg79=(*f.m).density*reg79;
    reg78=reg7*reg39; reg74=reg75-reg74; reg103=reg103-reg104; reg86=reg86+reg85; reg89=reg89+reg88;
    reg25=reg25-reg102; reg75=reg7*reg44; reg81=reg7*reg55; reg76=(*f.m).density*reg76; reg10=reg10-reg110;
    reg66=reg66+reg61; reg26=reg54+reg26; reg67=reg67+reg68; reg54=reg7*reg58; reg36=reg108+reg36;
    reg91=(*f.m).density*reg91; reg33=reg33-reg77; reg83=reg90-reg83; reg109=(*f.m).density*reg109; reg82=reg80-reg82;
    reg87=reg87+reg73; reg64=reg64+reg65; reg22=reg22-reg97; reg99=reg47+reg99; reg96=(*f.m).density*reg96;
    reg100=reg46+reg100; reg94=reg95-reg94; reg46=reg7*reg48; reg71=reg72-reg71; reg70=reg70+reg69;
    reg92=reg93-reg92; reg62=reg62+reg63; reg47=reg7*reg50; reg101=(*f.m).density*reg101; reg32=reg32-reg98;
    reg72=reg7*reg43; reg80=ponderation*reg81; reg62=reg7*reg62; reg70=reg7*reg70; reg90=reg7*reg91;
    reg82=reg7*reg82; reg66=reg7*reg66; reg26=reg7*reg26; reg93=ponderation*reg46; reg32=reg7*reg32;
    reg95=reg7*reg109; reg67=reg7*reg67; reg33=reg7*reg33; reg36=reg7*reg36; reg99=reg7*reg99;
    reg108=ponderation*reg54; T reg112=reg7*reg76; reg87=reg7*reg87; reg83=reg7*reg83; T reg113=ponderation*reg47;
    reg10=reg7*reg10; reg22=reg7*reg22; T reg114=reg7*reg96; T reg115=ponderation*reg75; reg25=reg7*reg25;
    T reg116=reg7*reg101; reg92=reg7*reg92; reg89=reg7*reg89; reg103=reg7*reg103; reg86=reg7*reg86;
    reg74=reg7*reg74; reg71=reg7*reg71; T reg117=reg7*reg79; T reg118=ponderation*reg72; reg64=reg7*reg64;
    T reg119=ponderation*reg78; reg27=reg7*reg27; reg105=reg7*reg105; reg94=reg7*reg94; reg59=reg7*reg59;
    T reg120=ponderation*reg111; reg100=reg7*reg100; reg84=reg7*reg84; T reg121=ponderation*reg116; sollicitation[indices[0]+1]+=reg121;
    T reg122=ponderation*reg117; sollicitation[indices[2]+0]+=reg122; matrix(indices[2]+1,indices[2]+0)+=-reg118; reg118=ponderation*reg95; sollicitation[indices[0]+0]+=reg118;
    T reg123=ponderation*reg112; sollicitation[indices[1]+0]+=reg123; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg62; reg62=ponderation*reg114; sollicitation[indices[1]+1]+=reg62;
    matrix(indices[2]+1,indices[1]+0)+=ponderation*reg87; matrix(indices[2]+1,indices[1]+1)+=-reg120; reg87=ponderation*reg90; sollicitation[indices[2]+1]+=reg87; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg36;
    matrix(indices[0]+0,indices[0]+1)+=ponderation*reg26; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg27; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg105; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg103; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg25;
    matrix(indices[0]+1,indices[0]+0)+=ponderation*reg100; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg99; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg32; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg22; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg10;
    matrix(indices[0]+1,indices[2]+1)+=ponderation*reg33; matrix(indices[1]+0,indices[0]+0)+=ponderation*reg74; matrix(indices[1]+0,indices[0]+1)+=ponderation*reg71; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg70; matrix(indices[1]+0,indices[1]+1)+=-reg113;
    matrix(indices[1]+0,indices[2]+0)+=-reg93; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg64; matrix(indices[1]+1,indices[0]+0)+=ponderation*reg94; matrix(indices[1]+1,indices[0]+1)+=ponderation*reg92; matrix(indices[1]+1,indices[1]+0)+=-reg115;
    matrix(indices[1]+1,indices[1]+1)+=ponderation*reg89; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg86; matrix(indices[1]+1,indices[2]+1)+=-reg119; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg59; matrix(indices[2]+0,indices[0]+1)+=ponderation*reg84;
    matrix(indices[2]+0,indices[1]+0)+=-reg80; matrix(indices[2]+0,indices[1]+1)+=ponderation*reg66; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg67; matrix(indices[2]+0,indices[2]+1)+=-reg108; matrix(indices[2]+1,indices[0]+0)+=ponderation*reg83;
    matrix(indices[2]+1,indices[0]+1)+=ponderation*reg82;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; T reg1=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg0=reg0/(*f.m).elastic_modulus; T reg2=1.0/(*f.m).elastic_modulus; T reg3=elem.pos(1)[0]-elem.pos(0)[0];
    T reg4=elem.pos(1)[1]-elem.pos(0)[1]; T reg5=elem.pos(2)[0]-elem.pos(0)[0]; T reg6=elem.pos(2)[1]-elem.pos(0)[1]; T reg7=reg4*reg5; T reg8=reg3*reg6;
    T reg9=reg2*reg0; T reg10=reg1*reg0; T reg11=pow(reg1,2); T reg12=reg2*reg9; T reg13=reg1*reg10;
    T reg14=pow(reg2,2); reg7=reg8-reg7; reg8=reg4/reg7; reg13=reg12-reg13; reg11=reg14-reg11;
    reg5=reg5/reg7; reg6=reg6/reg7; reg12=reg3/reg7; reg14=0.5*reg12; T reg15=0.5*reg6;
    reg11=reg11/reg13; T reg16=reg5-reg12; T reg17=reg8-reg6; T reg18=0.5*reg8; T reg19=0.5*reg17;
    T reg20=0.5*reg5; T reg21=reg11*reg15; T reg22=0.5*reg16; T reg23=reg11*reg18; reg9=reg9/reg13;
    reg13=reg10/reg13; reg10=reg11*reg14; T reg24=2*reg23; T reg25=reg12*reg9; T reg26=reg12*reg13;
    reg21=2*reg21; T reg27=reg8*reg9; T reg28=reg5*reg13; T reg29=reg11*reg20; reg10=2*reg10;
    T reg30=reg11*reg19; T reg31=1-var_inter[0]; T reg32=reg11*reg22; T reg33=elem.proute[0](1,1)+elem.proute[1](1,1); T reg34=reg9*reg17;
    T reg35=reg5*reg9; T reg36=reg8*reg26; T reg37=reg33+(*f.m).f_vol[1]; T reg38=reg6*reg28; T reg39=reg15*reg24;
    reg33=reg33+(*f.m).f_vol[0]; T reg40=reg6*reg13; T reg41=reg20*reg21; T reg42=reg9*reg16; T reg43=reg31-var_inter[1];
    T reg44=reg20*reg10; T reg45=reg6*reg27; T reg46=reg5*reg25; T reg47=reg14*reg24; T reg48=reg8*reg13;
    T reg49=2*reg29; T reg50=reg13*reg16; T reg51=reg6*reg9; reg30=2*reg30; reg32=2*reg32;
    T reg52=var_inter[0]*reg33; T reg53=var_inter[1]*reg33; T reg54=reg43*reg37; T reg55=reg6*reg51; T reg56=reg19*reg24;
    reg46=reg39+reg46; T reg57=reg16*reg25; T reg58=reg16*reg42; T reg59=reg19*reg30; reg41=reg38+reg41;
    T reg60=reg14*reg10; T reg61=reg8*reg27; T reg62=reg20*reg49; T reg63=reg16*reg40; T reg64=reg19*reg10;
    T reg65=reg19*reg49; T reg66=reg16*reg48; reg36=reg47+reg36; T reg67=reg19*reg21; T reg68=reg16*reg35;
    T reg69=reg15*reg10; T reg70=reg5*reg35; T reg71=reg17*reg50; T reg72=reg22*reg32; T reg73=reg22*reg30;
    T reg74=reg15*reg21; T reg75=var_inter[0]*reg37; T reg76=reg17*reg51; T reg77=reg17*reg34; T reg78=reg22*reg49;
    T reg79=reg5*reg48; T reg80=reg17*reg28; T reg81=reg20*reg24; T reg82=var_inter[1]*reg37; T reg83=reg22*reg24;
    T reg84=reg17*reg26; reg25=reg12*reg25; T reg85=reg18*reg24; reg44=reg45+reg44; T reg86=reg22*reg10;
    T reg87=reg17*reg27; reg26=reg6*reg26; T reg88=reg22*reg21; T reg89=reg43*reg33; reg55=reg55+reg62;
    T reg90=reg7*reg46; T reg91=reg7*reg41; reg75=(*f.m).density*reg75; T reg92=reg7*reg44; reg69=reg69+reg79;
    reg26=reg26+reg81; reg52=(*f.m).density*reg52; reg74=reg74+reg70; reg72=reg77+reg72; reg73=reg71+reg73;
    reg76=reg76-reg78; reg89=(*f.m).density*reg89; reg88=reg88-reg80; reg25=reg25+reg85; reg86=reg86-reg87;
    reg84=reg84-reg83; reg82=(*f.m).density*reg82; reg54=(*f.m).density*reg54; reg53=(*f.m).density*reg53; reg57=reg57-reg56;
    reg64=reg64-reg66; reg60=reg60+reg61; reg67=reg67-reg68; reg63=reg63-reg65; reg71=reg7*reg36;
    reg59=reg58+reg59; reg60=reg7*reg60; reg25=reg7*reg25; reg69=reg7*reg69; reg58=ponderation*reg90;
    reg77=reg7*reg89; T reg93=reg7*reg54; T reg94=reg7*reg52; T reg95=reg7*reg75; T reg96=ponderation*reg71;
    T reg97=reg7*reg53; T reg98=reg7*reg82; reg86=reg7*reg86; reg84=reg7*reg84; reg88=reg7*reg88;
    reg59=reg7*reg59; reg63=reg7*reg63; reg67=reg7*reg67; reg76=reg7*reg76; reg64=reg7*reg64;
    reg57=reg7*reg57; reg55=reg7*reg55; reg73=reg7*reg73; reg74=reg7*reg74; T reg99=ponderation*reg91;
    reg72=reg7*reg72; T reg100=ponderation*reg92; reg26=reg7*reg26; T reg101=ponderation*reg98; sollicitation[indices[2]+1]+=reg101;
    matrix(indices[0]+0,indices[1]+1)+=ponderation*reg88; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg25; reg25=ponderation*reg97; sollicitation[indices[2]+0]+=reg25; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg76;
    reg76=ponderation*reg77; sollicitation[indices[0]+0]+=reg76; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg72; reg72=ponderation*reg95; sollicitation[indices[1]+1]+=reg72;
    reg88=ponderation*reg93; sollicitation[indices[0]+1]+=reg88; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg73; reg73=ponderation*reg94; sollicitation[indices[1]+0]+=reg73;
    matrix(indices[0]+0,indices[2]+0)+=ponderation*reg86; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg84; matrix(indices[2]+0,indices[2]+1)+=-reg96; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg59; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg63;
    matrix(indices[2]+0,indices[2]+0)+=ponderation*reg60; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg67; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg64; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg57; matrix(indices[1]+1,indices[2]+1)+=-reg58;
    matrix(indices[1]+0,indices[1]+0)+=ponderation*reg55; matrix(indices[1]+0,indices[1]+1)+=-reg99; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg69; matrix(indices[1]+0,indices[2]+0)+=-reg100; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg26;
    matrix(indices[1]+1,indices[1]+1)+=ponderation*reg74;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; T reg1=elem.pos(2)[1]-elem.pos(0)[1]; T reg2=elem.pos(2)[0]-elem.pos(0)[0]; T reg3=elem.pos(1)[1]-elem.pos(0)[1]; T reg4=elem.pos(1)[0]-elem.pos(0)[0];
    T reg5=1.0/(*f.m).elastic_modulus; T reg6=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg0=reg0/(*f.m).elastic_modulus; T reg7=reg6*reg0; T reg8=reg5*reg0;
    T reg9=reg4*reg1; T reg10=reg3*reg2; T reg11=reg6*reg7; reg10=reg9-reg10; reg9=reg5*reg8;
    T reg12=pow(reg5,2); T reg13=pow(reg6,2); reg11=reg9-reg11; reg13=reg12-reg13; reg9=reg3/reg10;
    reg2=reg2/reg10; reg1=reg1/reg10; reg12=reg4/reg10; reg13=reg13/reg11; T reg14=0.5*reg1;
    T reg15=0.5*reg12; T reg16=reg9-reg1; T reg17=reg2-reg12; T reg18=0.5*reg9; T reg19=0.5*reg2;
    T reg20=0.5*reg16; T reg21=reg13*reg18; T reg22=reg13*reg19; T reg23=reg13*reg15; T reg24=reg13*reg14;
    reg7=reg7/reg11; reg11=reg8/reg11; reg8=0.5*reg17; reg24=2*reg24; T reg25=reg2*reg7;
    T reg26=reg9*reg11; T reg27=reg2*reg11; T reg28=2*reg22; T reg29=reg9*reg7; reg23=2*reg23;
    T reg30=reg1*reg11; T reg31=reg12*reg7; T reg32=reg13*reg8; T reg33=2*reg21; T reg34=reg13*reg20;
    T reg35=reg1*reg7; T reg36=reg12*reg11; T reg37=reg14*reg33; T reg38=reg9*reg30; T reg39=reg28*reg15;
    T reg40=reg15*reg33; T reg41=reg2*reg36; T reg42=reg7*reg16; T reg43=reg1*reg25; T reg44=reg11*reg17;
    T reg45=reg9*reg31; T reg46=reg19*reg24; T reg47=reg11*reg16; reg32=2*reg32; T reg48=reg7*reg17;
    T reg49=reg28*reg14; reg34=2*reg34; T reg50=reg2*reg35; T reg51=reg23*reg18; T reg52=reg12*reg29;
    T reg53=reg12*reg27; T reg54=reg19*reg23; T reg55=reg1*reg26; T reg56=reg24*reg18; T reg57=reg1*reg31;
    T reg58=reg20*reg33; T reg59=reg17*reg36; T reg60=reg19*reg33; T reg61=reg9*reg47; T reg62=reg2*reg44;
    T reg63=reg34*reg14; reg46=reg43+reg46; T reg64=reg32*reg14; T reg65=reg20*reg23; T reg66=reg17*reg29;
    T reg67=reg2*reg42; reg38=reg39+reg38; T reg68=reg24*reg15; T reg69=reg9*reg48; T reg70=reg34*reg15;
    T reg71=reg1*reg47; T reg72=reg32*reg19; T reg73=reg32*reg15; T reg74=reg2*reg27; reg41=reg37+reg41;
    T reg75=reg1*reg48; T reg76=reg34*reg19; T reg77=reg14*reg24; reg50=reg49+reg50; reg54=reg55+reg54;
    T reg78=reg1*reg30; T reg79=reg19*reg28; T reg80=reg2*reg29; T reg81=reg14*reg23; T reg82=reg17*reg42;
    T reg83=reg16*reg25; T reg84=reg32*reg18; reg48=reg16*reg48; T reg85=reg12*reg44; T reg86=reg8*reg33;
    reg31=reg16*reg31; T reg87=reg8*reg34; T reg88=reg34*reg18; reg51=reg52+reg51; T reg89=reg12*reg35;
    T reg90=reg8*reg23; reg30=reg16*reg30; T reg91=reg16*reg26; T reg92=reg28*reg18; T reg93=reg8*reg28;
    T reg94=reg8*reg24; reg24=reg20*reg24; T reg95=reg17*reg27; T reg96=reg9*reg25; reg47=reg16*reg47;
    reg23=reg15*reg23; T reg97=reg20*reg28; reg35=reg17*reg35; T reg98=reg8*reg32; T reg99=reg9*reg26;
    T reg100=reg18*reg33; reg34=reg20*reg34; reg44=reg17*reg44; reg45=reg40+reg45; reg56=reg53+reg56;
    reg36=reg12*reg36; reg42=reg12*reg42; reg32=reg32*reg20; T reg101=reg10*reg56; T reg102=reg10*reg51;
    reg62=reg63-reg62; reg36=reg36+reg100; reg63=reg10*reg50; reg89=reg89+reg92; reg77=reg77+reg74;
    reg88=reg85-reg88; reg81=reg81+reg80; reg84=reg42-reg84; reg42=reg10*reg41; reg61=reg73-reg61;
    reg73=reg10*reg45; reg23=reg23+reg99; reg69=reg70-reg69; reg68=reg68+reg96; reg70=reg10*reg38;
    reg31=reg31-reg86; reg32=reg82+reg32; reg34=reg44+reg34; reg90=reg90-reg91; reg35=reg35-reg97;
    reg24=reg24-reg95; reg94=reg94-reg83; reg65=reg65-reg66; reg59=reg59-reg58; reg30=reg30-reg93;
    reg72=reg71-reg72; reg76=reg75-reg76; reg87=reg48+reg87; reg78=reg78+reg79; reg44=reg10*reg46;
    reg67=reg64-reg67; reg57=reg57+reg60; reg98=reg47+reg98; reg47=reg10*reg54; reg62=reg10*reg62;
    reg24=reg10*reg24; reg48=ponderation*reg70; reg64=ponderation*reg102; reg89=reg10*reg89; reg35=reg10*reg35;
    reg68=reg10*reg68; reg94=reg10*reg94; reg57=reg10*reg57; reg34=reg10*reg34; reg23=reg10*reg23;
    reg36=reg10*reg36; reg32=reg10*reg32; reg71=ponderation*reg73; reg88=reg10*reg88; reg67=reg10*reg67;
    reg90=reg10*reg90; reg31=reg10*reg31; reg84=reg10*reg84; reg75=ponderation*reg44; reg72=reg10*reg72;
    reg98=reg10*reg98; reg76=reg10*reg76; reg82=ponderation*reg42; reg87=reg10*reg87; reg78=reg10*reg78;
    reg81=reg10*reg81; reg85=ponderation*reg101; reg61=reg10*reg61; T reg103=ponderation*reg47; reg59=reg10*reg59;
    T reg104=ponderation*reg63; reg30=reg10*reg30; reg69=reg10*reg69; reg65=reg10*reg65; reg77=reg10*reg77;
    matrix(indices[0]+0,indices[2]+0)+=ponderation*reg90; matrix(indices[2]+1,indices[2]+0)+=-reg64; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg87; matrix(indices[2]+1,indices[0]+1)+=ponderation*reg88; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg36;
    matrix(indices[2]+1,indices[1]+1)+=-reg85; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg94; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg98; matrix(indices[2]+1,indices[1]+0)+=ponderation*reg89; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg30;
    matrix(indices[1]+1,indices[0]+0)+=ponderation*reg67; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg57; matrix(indices[1]+1,indices[0]+1)+=ponderation*reg62; matrix(indices[1]+0,indices[2]+0)+=-reg103; matrix(indices[1]+0,indices[1]+1)+=-reg75;
    matrix(indices[1]+1,indices[1]+0)+=-reg104; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg78; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg77; matrix(indices[1]+0,indices[0]+1)+=ponderation*reg76; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg81;
    matrix(indices[1]+0,indices[0]+0)+=ponderation*reg72; matrix(indices[1]+1,indices[2]+1)+=-reg82; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg59; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg61; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg65;
    matrix(indices[2]+0,indices[0]+1)+=ponderation*reg69; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg24; matrix(indices[2]+0,indices[1]+0)+=-reg48; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg35; matrix(indices[2]+0,indices[1]+1)+=ponderation*reg68;
    matrix(indices[0]+1,indices[0]+1)+=ponderation*reg34; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg23; matrix(indices[0]+1,indices[0]+0)+=ponderation*reg32; matrix(indices[2]+0,indices[2]+1)+=-reg71; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg31;
    matrix(indices[2]+1,indices[0]+0)+=ponderation*reg84;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; T reg1=elem.pos(2)[1]-elem.pos(0)[1]; T reg2=elem.pos(2)[0]-elem.pos(0)[0]; T reg3=elem.pos(1)[1]-elem.pos(0)[1]; T reg4=elem.pos(1)[0]-elem.pos(0)[0];
    T reg5=1.0/(*f.m).elastic_modulus; T reg6=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg0=reg0/(*f.m).elastic_modulus; T reg7=reg6*reg0; T reg8=reg5*reg0;
    T reg9=reg4*reg1; T reg10=reg3*reg2; T reg11=reg6*reg7; reg10=reg9-reg10; reg9=reg5*reg8;
    T reg12=pow(reg5,2); T reg13=pow(reg6,2); reg11=reg9-reg11; reg13=reg12-reg13; reg9=reg3/reg10;
    reg2=reg2/reg10; reg1=reg1/reg10; reg12=reg4/reg10; T reg14=0.5*reg9; reg13=reg13/reg11;
    T reg15=reg9-reg1; T reg16=reg2-reg12; T reg17=0.5*reg12; T reg18=0.5*reg1; T reg19=reg13*reg17;
    T reg20=reg13*reg14; T reg21=reg13*reg18; T reg22=0.5*reg2; T reg23=0.5*reg15; T reg24=0.5*reg16;
    reg8=reg8/reg11; reg11=reg7/reg11; reg7=reg2*reg11; T reg25=reg13*reg22; T reg26=reg13*reg24;
    T reg27=reg12*reg11; reg21=2*reg21; T reg28=reg13*reg23; T reg29=reg12*reg8; reg19=2*reg19;
    T reg30=reg9*reg8; T reg31=2*reg20; T reg32=reg22*reg21; T reg33=reg2*reg8; T reg34=reg1*reg11;
    T reg35=reg8*reg15; T reg36=reg1*reg30; T reg37=reg22*reg19; T reg38=reg1*reg7; T reg39=reg17*reg31;
    T reg40=reg9*reg11; T reg41=2*reg25; T reg42=reg1*reg8; T reg43=reg18*reg31; T reg44=reg9*reg27;
    reg28=2*reg28; reg26=2*reg26; T reg45=reg11*reg16; T reg46=reg2*reg29; T reg47=reg8*reg16;
    T reg48=reg23*reg28; T reg49=reg16*reg47; reg37=reg36+reg37; T reg50=reg16*reg34; T reg51=reg23*reg41;
    reg32=reg38+reg32; T reg52=reg16*reg33; T reg53=reg23*reg21; reg44=reg39+reg44; T reg54=reg16*reg40;
    T reg55=reg23*reg19; T reg56=reg22*reg41; T reg57=reg16*reg29; T reg58=reg23*reg31; T reg59=reg1*reg42;
    T reg60=reg24*reg26; reg46=reg43+reg46; T reg61=reg15*reg45; T reg62=reg24*reg28; T reg63=reg2*reg40;
    T reg64=reg15*reg42; T reg65=reg24*reg41; T reg66=reg18*reg19; T reg67=reg2*reg33; T reg68=reg15*reg7;
    T reg69=reg15*reg35; T reg70=reg24*reg21; T reg71=reg18*reg21; T reg72=reg9*reg30; T reg73=reg24*reg31;
    T reg74=reg1*reg27; reg27=reg15*reg27; reg29=reg12*reg29; T reg75=reg22*reg31; T reg76=reg24*reg19;
    T reg77=reg15*reg30; T reg78=reg14*reg31; T reg79=reg17*reg19; reg71=reg71+reg67; reg74=reg74+reg75;
    reg79=reg79+reg72; reg59=reg59+reg56; reg66=reg66+reg63; T reg80=reg10*reg32; T reg81=reg10*reg37;
    T reg82=reg10*reg46; reg60=reg69+reg60; reg62=reg61+reg62; reg64=reg64-reg65; reg29=reg29+reg78;
    reg70=reg70-reg68; reg76=reg76-reg77; reg27=reg27-reg73; reg48=reg49+reg48; reg50=reg50-reg51;
    reg49=reg10*reg44; reg53=reg53-reg52; reg57=reg57-reg58; reg55=reg55-reg54; reg57=reg10*reg57;
    reg60=reg10*reg60; reg61=ponderation*reg82; reg66=reg10*reg66; reg62=reg10*reg62; reg29=reg10*reg29;
    reg71=reg10*reg71; reg64=reg10*reg64; reg55=reg10*reg55; reg70=reg10*reg70; reg74=reg10*reg74;
    reg59=reg10*reg59; reg76=reg10*reg76; reg79=reg10*reg79; reg53=reg10*reg53; reg69=ponderation*reg81;
    reg27=reg10*reg27; reg48=reg10*reg48; T reg83=ponderation*reg49; T reg84=ponderation*reg80; reg50=reg10*reg50;
    matrix(indices[1]+1,indices[2]+1)+=-reg61; matrix(indices[2]+0,indices[2]+1)+=-reg83; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg79; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg29; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg60;
    matrix(indices[0]+0,indices[0]+1)+=ponderation*reg62; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg64; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg70; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg76; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg27;
    matrix(indices[0]+1,indices[0]+1)+=ponderation*reg48; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg50; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg53; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg55; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg57;
    matrix(indices[1]+0,indices[1]+0)+=ponderation*reg59; matrix(indices[1]+0,indices[1]+1)+=-reg84; matrix(indices[1]+0,indices[2]+0)+=-reg69; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg74; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg71;
    matrix(indices[1]+1,indices[2]+0)+=ponderation*reg66;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=elem.proute[0](1,1)+elem.proute[1](1,1); T reg1=1-var_inter[0]; T reg2=elem.pos(2)[1]-elem.pos(0)[1]; T reg3=reg0+(*f.m).f_vol[0]; reg0=reg0+(*f.m).f_vol[1];
    T reg4=elem.pos(2)[0]-elem.pos(0)[0]; T reg5=elem.pos(1)[1]-elem.pos(0)[1]; T reg6=elem.pos(1)[0]-elem.pos(0)[0]; T reg7=reg1-var_inter[1]; T reg8=var_inter[1]*reg0;
    T reg9=var_inter[1]*reg3; T reg10=var_inter[0]*reg0; T reg11=var_inter[0]*reg3; T reg12=reg7*reg0; T reg13=reg7*reg3;
    T reg14=reg6*reg2; T reg15=reg5*reg4; reg13=(*f.m).density*reg13; reg12=(*f.m).density*reg12; reg15=reg14-reg15;
    reg11=(*f.m).density*reg11; reg10=(*f.m).density*reg10; reg9=(*f.m).density*reg9; reg8=(*f.m).density*reg8; reg14=reg15*reg8;
    T reg16=reg15*reg9; T reg17=reg15*reg10; T reg18=reg15*reg11; T reg19=reg15*reg12; T reg20=reg15*reg13;
    T reg21=ponderation*reg19; sollicitation[indices[0]+1]+=reg21; T reg22=ponderation*reg18; sollicitation[indices[1]+0]+=reg22; T reg23=ponderation*reg20;
    sollicitation[indices[0]+0]+=reg23; T reg24=ponderation*reg17; sollicitation[indices[1]+1]+=reg24; T reg25=ponderation*reg16; sollicitation[indices[2]+0]+=reg25;
    T reg26=ponderation*reg14; sollicitation[indices[2]+1]+=reg26;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[1]; T reg1=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg2=PNODE(0).dep_imp_val_0_1[0]*(*f.m).lim_cond_1; T reg3=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg4=reg3+reg2;
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; T reg5=reg1+reg0; T reg6=PNODE(0).dep_imp_coef_0*reg4; T reg7=PNODE(0).dep_imp_coef_0*reg5;
    T reg8=PNODE(0).f_nodal[0]+reg6; sollicitation[indices[0]+0]+=reg8; T reg9=PNODE(0).f_nodal[1]+reg7; sollicitation[indices[0]+1]+=reg9;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[1]; T reg1=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg2=PNODE(0).dep_imp_val_0_1[0]*(*f.m).lim_cond_1; T reg3=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg4=reg3+reg2;
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; T reg5=reg1+reg0; T reg6=PNODE(0).dep_imp_coef_0*reg4; T reg7=PNODE(0).dep_imp_coef_0*reg5;
    T reg8=PNODE(0).f_nodal[0]+reg6; sollicitation[indices[0]+0]+=reg8; T reg9=PNODE(0).f_nodal[1]+reg7; sollicitation[indices[0]+1]+=reg9;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[1]; T reg1=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg2=PNODE(0).dep_imp_val_0_1[0]*(*f.m).lim_cond_1; T reg3=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg4=reg3+reg2;
    T reg5=reg1+reg0; T reg6=PNODE(0).dep_imp_coef_0*reg4; T reg7=PNODE(0).dep_imp_coef_0*reg5; T reg8=PNODE(0).f_nodal[0]+reg6; sollicitation[indices[0]+0]+=reg8;
    T reg9=PNODE(0).f_nodal[1]+reg7; sollicitation[indices[0]+1]+=reg9;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
  #undef PNODE
}
#endif
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[0]-elem.pos(0)[0]; T reg1=elem.pos(1)[1]-elem.pos(0)[1]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*skin_elem.f_surf[1]; T reg8=0.5*reg4; reg2=reg1*reg2; reg3=reg0*reg3;
    T reg9=0.5*skin_elem.f_surf[0]; reg2=reg3+reg2; reg3=reg9-reg8; reg6=reg7+reg6; reg3=reg2*reg3;
    sollicitation[indices[0]+0]+=reg3; sollicitation[indices[1]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[1]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[0]-elem.pos(0)[0]; T reg1=elem.pos(1)[1]-elem.pos(0)[1]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*skin_elem.f_surf[1]; T reg8=0.5*reg4; reg2=reg1*reg2; reg3=reg0*reg3;
    T reg9=0.5*skin_elem.f_surf[0]; reg2=reg3+reg2; reg3=reg9-reg8; reg6=reg7+reg6; reg3=reg2*reg3;
    sollicitation[indices[0]+0]+=reg3; sollicitation[indices[1]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[1]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[0]-elem.pos(0)[0]; T reg1=elem.pos(1)[1]-elem.pos(0)[1]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*skin_elem.f_surf[1]; T reg8=0.5*reg4; reg2=reg1*reg2; reg3=reg0*reg3;
    T reg9=0.5*skin_elem.f_surf[0]; reg2=reg3+reg2; reg3=reg9-reg8; reg6=reg7+reg6; reg3=reg2*reg3;
    sollicitation[indices[0]+0]+=reg3; sollicitation[indices[1]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[1]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(1)[1]; T reg1=elem.pos(2)[0]-elem.pos(1)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*reg4; reg2=reg0*reg2; reg3=reg1*reg3; reg0=0.5*skin_elem.f_surf[0];
    reg1=0.5*skin_elem.f_surf[1]; reg2=reg3+reg2; reg3=reg0-reg7; reg6=reg1+reg6; reg3=reg2*reg3;
    sollicitation[indices[1]+0]+=reg3; sollicitation[indices[2]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[1]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(1)[1]; T reg1=elem.pos(2)[0]-elem.pos(1)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*reg4; reg2=reg0*reg2; reg3=reg1*reg3; reg0=0.5*skin_elem.f_surf[0];
    reg1=0.5*skin_elem.f_surf[1]; reg2=reg3+reg2; reg3=reg0-reg7; reg6=reg1+reg6; reg3=reg2*reg3;
    sollicitation[indices[1]+0]+=reg3; sollicitation[indices[2]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[1]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(1)[1]; T reg1=elem.pos(2)[0]-elem.pos(1)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*reg4; reg2=reg0*reg2; reg3=reg1*reg3; reg0=0.5*skin_elem.f_surf[0];
    reg1=0.5*skin_elem.f_surf[1]; reg2=reg3+reg2; reg3=reg0-reg7; reg6=reg1+reg6; reg3=reg2*reg3;
    sollicitation[indices[1]+0]+=reg3; sollicitation[indices[2]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[1]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(0)[1]-elem.pos(2)[1]; T reg1=elem.pos(0)[0]-elem.pos(2)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*reg4; reg2=reg0*reg2; reg3=reg1*reg3; reg0=0.5*skin_elem.f_surf[0];
    reg1=0.5*skin_elem.f_surf[1]; reg2=reg3+reg2; reg3=reg0-reg7; reg6=reg1+reg6; reg3=reg2*reg3;
    sollicitation[indices[0]+0]+=reg3; sollicitation[indices[2]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(0)[1]-elem.pos(2)[1]; T reg1=elem.pos(0)[0]-elem.pos(2)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*reg4; reg2=reg0*reg2; reg3=reg1*reg3; reg0=0.5*skin_elem.f_surf[0];
    reg1=0.5*skin_elem.f_surf[1]; reg2=reg3+reg2; reg3=reg0-reg7; reg6=reg1+reg6; reg3=reg2*reg3;
    sollicitation[indices[0]+0]+=reg3; sollicitation[indices[2]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(0)[1]-elem.pos(2)[1]; T reg1=elem.pos(0)[0]-elem.pos(2)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*reg4; reg2=reg0*reg2; reg3=reg1*reg3; reg0=0.5*skin_elem.f_surf[0];
    reg1=0.5*skin_elem.f_surf[1]; reg2=reg3+reg2; reg3=reg0-reg7; reg6=reg1+reg6; reg3=reg2*reg3;
    sollicitation[indices[0]+0]+=reg3; sollicitation[indices[2]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_vector_der_var(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */    T reg0=1+(*f.m).poisson_ratio; T reg1=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg2=1.0/(*f.m).elastic_modulus; reg0=reg0/(*f.m).elastic_modulus; T reg3=reg2*reg0;
    T reg4=reg2*reg1; T reg5=reg1*reg0; reg4=reg4+reg3; T reg6=elem.pos(2)[1]-elem.pos(0)[1]; T reg7=elem.pos(2)[0]-elem.pos(0)[0];
    T reg8=elem.pos(1)[1]-elem.pos(0)[1]; T reg9=elem.pos(1)[0]-elem.pos(0)[0]; T reg10=pow(reg2,2); T reg11=reg2*reg5; T reg12=reg1*reg4;
    T reg13=reg2*reg3; T reg14=reg1*reg5; T reg15=pow(reg1,2); reg11=reg12+reg11; reg12=reg2*reg10;
    T reg16=reg9*reg6; T reg17=reg8*reg7; reg11=reg12-reg11; reg17=reg16-reg17; reg12=2*reg2;
    reg14=reg13-reg14; reg15=reg10-reg15; reg13=pow(reg14,2); reg12=reg1*reg12; reg16=reg15*reg11;
    T reg18=reg8/reg17; reg7=reg7/reg17; reg6=reg6/reg17; T reg19=reg9/reg17; T reg20=reg5*reg11;
    reg11=reg3*reg11; T reg21=reg12/reg14; T reg22=reg7-reg19; T reg23=reg18-reg6; reg16=reg16/reg13;
    T reg24=0.5*reg23; reg20=reg20/reg13; reg4=reg4/reg14; T reg25=0.5*reg22; reg10=reg10/reg14;
    reg13=reg11/reg13; reg21=reg16+reg21; reg13=reg10-reg13; reg10=reg25*reg21; reg20=reg4-reg20;
    reg4=reg24*reg21; reg11=0.5*reg7; reg16=reg23*reg20; T reg26=reg11*reg21; T reg27=0.5*reg18;
    T reg28=reg23*reg13; T reg29=2*reg4; T reg30=0.5*reg19; T reg31=0.5*reg6; T reg32=reg22*reg20;
    T reg33=reg22*reg13; T reg34=2*reg10; T reg35=reg30*reg34; T reg36=reg18*reg28; T reg37=reg30*reg29;
    T reg38=reg18*reg32; T reg39=reg31*reg21; T reg40=2*reg26; T reg41=reg6*reg13; T reg42=reg7*reg33;
    T reg43=reg24*reg34; T reg44=reg7*reg16; T reg45=reg31*reg34; T reg46=reg22*reg33; T reg47=reg24*reg29;
    T reg48=reg6*reg20; T reg49=reg11*reg29; T reg50=reg6*reg32; T reg51=reg11*reg34; T reg52=reg6*reg28;
    T reg53=reg31*reg29; reg33=reg19*reg33; reg28=reg23*reg28; T reg54=reg27*reg29; T reg55=reg25*reg34;
    T reg56=reg22*reg16; reg32=reg23*reg32; reg16=reg19*reg16; T reg57=reg27*reg34; T reg58=reg25*reg29;
    reg42=reg53+reg42; T reg59=reg27*reg40; reg44=reg45+reg44; reg16=reg16+reg57; reg56=reg56-reg43;
    reg28=reg28-reg55; T reg60=reg19*reg48; reg33=reg33+reg54; reg46=reg46-reg47; reg32=reg32-reg58;
    T reg61=reg22*reg48; T reg62=reg24*reg40; T reg63=reg6*reg41; reg50=reg50+reg49; T reg64=reg23*reg41;
    T reg65=reg7*reg13; T reg66=reg11*reg40; reg52=reg52+reg51; T reg67=reg30*reg21; reg38=reg37+reg38;
    T reg68=reg30*reg40; reg36=reg35+reg36; T reg69=reg25*reg40; T reg70=reg7*reg20; reg41=reg18*reg41;
    T reg71=2*reg39; reg48=reg7*reg48; T reg72=reg31*reg40; reg52=reg17*reg52; T reg73=reg27*reg71;
    reg41=reg41-reg68; reg50=reg17*reg50; T reg74=reg17*reg38; T reg75=reg18*reg70; T reg76=reg30*reg71;
    T reg77=reg6*reg70; T reg78=reg11*reg71; T reg79=reg19*reg65; T reg80=reg17*reg36; reg33=reg17*reg33;
    reg60=reg60-reg59; T reg81=reg7*reg65; reg16=reg17*reg16; T reg82=reg31*reg71; reg48=reg48-reg72;
    T reg83=reg17*reg44; T reg84=reg17*reg42; reg63=reg63-reg66; reg28=reg17*reg28; reg32=reg17*reg32;
    reg64=reg64+reg69; T reg85=reg25*reg71; reg70=reg23*reg70; T reg86=2*reg67; T reg87=reg18*reg13;
    T reg88=reg27*reg21; reg56=reg17*reg56; reg46=reg17*reg46; reg61=reg61+reg62; T reg89=reg24*reg71;
    reg65=reg22*reg65; T reg90=reg18*reg20; T reg91=2*reg88; T reg92=ponderation*reg84; reg20=reg19*reg20;
    reg48=reg17*reg48; reg81=reg81-reg82; T reg93=reg31*reg86; T reg94=reg7*reg90; T reg95=reg23*reg87;
    T reg96=reg25*reg86; T reg97=ponderation*reg80; reg70=reg85+reg70; T reg98=ponderation*reg74; reg13=reg19*reg13;
    reg41=reg17*reg41; reg64=reg17*reg64; reg75=reg75-reg76; T reg99=reg30*reg86; T reg100=reg18*reg87;
    reg32=ponderation*reg32; reg28=ponderation*reg28; reg16=ponderation*reg16; T reg101=reg22*reg90; reg33=ponderation*reg33;
    reg60=reg17*reg60; reg79=reg79-reg73; reg90=reg19*reg90; T reg102=reg27*reg86; reg63=reg17*reg63;
    reg50=ponderation*reg50; reg61=reg17*reg61; reg46=ponderation*reg46; T reg103=reg24*reg86; reg56=ponderation*reg56;
    reg77=reg77-reg78; reg65=reg89+reg65; reg52=ponderation*reg52; reg87=reg6*reg87; T reg104=ponderation*reg83;
    T reg105=reg11*reg86; T reg106=reg18*reg20; T reg107=reg30*reg91; reg100=reg100-reg99; reg77=reg17*reg77;
    reg75=reg17*reg75; reg101=reg103+reg101; T reg108=vectors[0][indices[0]+0]*reg97; reg63=ponderation*reg63; T reg109=vectors[0][indices[0]+1]*reg92;
    reg41=ponderation*reg41; reg60=ponderation*reg60; T reg110=vectors[0][indices[0]+0]*reg104; reg61=ponderation*reg61; T reg111=reg17*reg65;
    reg79=reg17*reg79; reg90=reg90-reg102; T reg112=reg19*reg13; T reg113=reg27*reg91; reg28=vectors[0][indices[0]+0]*reg28;
    reg32=vectors[0][indices[0]+1]*reg32; reg50=vectors[0][indices[0]+1]*reg50; reg52=vectors[0][indices[0]+0]*reg52; reg56=vectors[0][indices[0]+0]*reg56; reg46=vectors[0][indices[0]+1]*reg46;
    T reg114=reg25*reg91; T reg115=reg23*reg20; reg48=ponderation*reg48; reg33=vectors[0][indices[0]+1]*reg33; reg81=reg17*reg81;
    reg16=vectors[0][indices[0]+0]*reg16; reg94=reg94-reg93; T reg116=reg31*reg91; T reg117=reg7*reg13; reg95=reg96+reg95;
    T reg118=vectors[0][indices[0]+1]*reg98; T reg119=reg11*reg91; reg87=reg87-reg105; reg64=ponderation*reg64; reg13=reg22*reg13;
    reg20=reg6*reg20; T reg120=reg17*reg70; T reg121=reg24*reg91; reg79=ponderation*reg79; reg109=reg110+reg109;
    reg110=reg17*reg95; reg90=reg17*reg90; reg33=reg16+reg33; reg87=reg17*reg87; reg112=reg112-reg113;
    reg63=vectors[0][indices[1]+0]*reg63; reg60=vectors[0][indices[1]+0]*reg60; reg32=reg28+reg32; reg64=vectors[0][indices[1]+0]*reg64; reg50=reg52+reg50;
    reg106=reg106-reg107; reg61=vectors[0][indices[1]+0]*reg61; reg46=reg56+reg46; reg115=reg115+reg114; reg16=reg17*reg101;
    reg20=reg20-reg119; reg13=reg13+reg121; reg100=reg17*reg100; reg28=vectors[0][indices[1]+0]*reg41; reg118=reg108+reg118;
    reg117=reg117-reg116; reg52=ponderation*reg111; reg56=ponderation*reg120; reg108=vectors[0][indices[1]+0]*reg48; reg94=reg17*reg94;
    reg77=ponderation*reg77; reg75=ponderation*reg75; reg81=ponderation*reg81; reg63=reg50+reg63; reg50=vectors[0][indices[1]+1]*reg77;
    reg60=reg33+reg60; reg118=reg28+reg118; reg81=vectors[0][indices[1]+1]*reg81; reg28=vectors[0][indices[1]+1]*reg79; reg33=vectors[0][indices[1]+1]*reg52;
    reg61=reg46+reg61; reg109=reg108+reg109; reg75=vectors[0][indices[1]+1]*reg75; reg106=reg17*reg106; reg100=ponderation*reg100;
    reg46=ponderation*reg16; reg87=ponderation*reg87; reg20=reg17*reg20; reg90=ponderation*reg90; reg112=reg17*reg112;
    reg64=reg32+reg64; reg32=vectors[0][indices[1]+1]*reg56; reg117=reg17*reg117; reg94=ponderation*reg94; reg13=reg17*reg13;
    reg108=ponderation*reg110; reg115=reg17*reg115; reg118=reg75-reg118; reg117=ponderation*reg117; reg100=vectors[0][indices[2]+0]*reg100;
    reg20=ponderation*reg20; reg75=vectors[0][indices[2]+0]*reg90; reg13=ponderation*reg13; reg94=vectors[0][indices[2]+0]*reg94; reg115=ponderation*reg115;
    reg109=reg81-reg109; reg32=reg64-reg32; reg64=vectors[0][indices[2]+0]*reg46; reg33=reg61-reg33; reg61=vectors[0][indices[2]+0]*reg108;
    reg112=ponderation*reg112; reg81=vectors[0][indices[2]+0]*reg87; reg50=reg63-reg50; reg28=reg60-reg28; reg106=ponderation*reg106;
    reg20=vectors[0][indices[2]+1]*reg20; reg81=reg50-reg81; reg50=vectors[0][indices[2]+1]*reg117; reg94=reg109+reg94; reg112=vectors[0][indices[2]+1]*reg112;
    reg75=reg28-reg75; reg64=reg33-reg64; reg13=vectors[0][indices[2]+1]*reg13; reg100=reg118+reg100; reg28=vectors[0][indices[2]+1]*reg106;
    reg115=vectors[0][indices[2]+1]*reg115; reg61=reg32-reg61; reg75=reg112+reg75; reg28=reg100-reg28; reg50=reg94-reg50;
    reg81=reg20+reg81; reg64=reg13+reg64; reg61=reg115+reg61; sollicitation[indices[0]+0]+=-reg61; sollicitation[indices[0]+1]+=-reg64;
    sollicitation[indices[1]+0]+=-reg81; sollicitation[indices[1]+1]+=-reg50; sollicitation[indices[2]+0]+=-reg28; sollicitation[indices[2]+1]+=-reg75;
  #undef PNODE
}
// 
#ifndef ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
#define ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz>
void add_nodal_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const typename TM::TNode &node,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) node
  /* (*f.m).poisson_ratio */  #undef PNODE
}
#endif
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}

#ifndef elasticity_dep_read_material_to_mesh
#define elasticity_dep_read_material_to_mesh
template<class TM, class T, bool wont_add_nz>
void read_material_to_mesh_(const XmlNode &n, Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f){ 
    if(n.has_attribute("f_vol"))  
        n.get_attribute("f_vol", f.m->f_vol ); 
    else  
        std::cerr << "Warning using default value of f_vol : " << f.m->f_vol << std::endl; 

    if(n.has_attribute("lim_cond_0"))  
        n.get_attribute("lim_cond_0", f.m->lim_cond_0 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_0 : " << f.m->lim_cond_0 << std::endl; 

    if(n.has_attribute("lim_cond_1"))  
        n.get_attribute("lim_cond_1", f.m->lim_cond_1 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_1 : " << f.m->lim_cond_1 << std::endl; 

    if(n.has_attribute("poisson_ratio"))  
        n.get_attribute("poisson_ratio", f.m->poisson_ratio ); 
    else  
        std::cerr << "Warning using default value of poisson_ratio : " << f.m->poisson_ratio << std::endl; 

    if(n.has_attribute("elastic_modulus"))  
        n.get_attribute("elastic_modulus", f.m->elastic_modulus ); 
    else  
        std::cerr << "Warning using default value of elastic_modulus : " << f.m->elastic_modulus << std::endl; 

    if(n.has_attribute("density"))  
        n.get_attribute("density", f.m->density ); 
    else  
        std::cerr << "Warning using default value of density : " << f.m->density << std::endl; 

  };
#endif // elasticity_dep_read_material_to_mesh
} // namespace LMT


#include "formulation/formulation.h"
namespace LMT {
#ifndef ELASTICITY_DEP_2_NUM_0_CARAC_H
#define ELASTICITY_DEP_2_NUM_0_CARAC_H
#ifndef STRUCT_ELASTICITY_DEP
#define STRUCT_ELASTICITY_DEP
struct elasticity_dep {
  static const char *name() { return "elasticity_dep"; }
};
#endif // ELASTICITY_DEP

template<class P_T>
class CaracFormulation<elasticity_dep,2,P_T>  {
public:
  typedef P_T T;
  static const char *name() { return "elasticity_dep"; }
  static const bool matrix_will_be_definite_positive=true;
  static const bool has_nodal_matrix = true;
  static const bool has_IS_contact_matrix=false;
  static const bool need_skin_assembly=false;
  typedef Norm1_is_inf Name_convergence_criterium;
  static const unsigned nb_vectors = 4;
  static const unsigned nb_matrices = 1;
  static const unsigned auto_contact = false;
  static const bool friction_coeff_is_a_nodal_variable = 0;
  static const unsigned offset_of_pos_unknown=3;
  static const unsigned pos_is_an_unknown = false;
  static const unsigned nb_der_var = 1;
  template<class TF> static void add_to_der_vars( TF &f, const Vec<T> &v ) {
      (*f.m).poisson_ratio += v[ 0 ];
  }
  static bool is_unknown(const std::string &s) { return (s=="dep"); }
  static unsigned num_in_vec_unknown(const std::string &s) { if ( s=="dep" )return 0; return 0;  }
  template<unsigned num_mat,unsigned inner=0> struct NodalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  template<unsigned num_mat,unsigned inner=0> struct GlobalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  
  static const unsigned nb_nodal_unknowns = 2;
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
    node.dep[0]=vecs[0][indice+0]; node.dep[1]=vecs[0][indice+1];
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
    node.dep[0]=vecs[0][indice+0]; node.dep[1]=vecs[0][indice+1];
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
    vecs[0][indice+0]=node.dep[0]; vecs[1][indice+0]=node.dep[0]; vecs[2][indice+0]=node.dep[0]; vecs[3][indice+0]=node.dep[0]; vecs[4][indice+0]=node.dep[0];
    vecs[0][indice+1]=node.dep[1]; vecs[1][indice+1]=node.dep[1]; vecs[2][indice+1]=node.dep[1]; vecs[3][indice+1]=node.dep[1]; vecs[4][indice+1]=node.dep[1];
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    T reg0=vecs[1][indice+0]-vecs[0][indice+0]; T reg1=vecs[1][indice+1]-vecs[0][indice+1]; reg0=abs(reg0); reg1=abs(reg1); return max(reg1,reg0);
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
    old_vec[indice+0]=vecs[1][indice+0]; old_vec[indice+1]=vecs[1][indice+1];
  }
  
  static const unsigned nb_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_nodal_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};
#endif // ELASTICITY_DEP_2_NUM_0_CARAC_H
extern "C" void apply_on_elements_after_solve_0_elasticity_dep_Quad_0( double * );
extern "C" void apply_on_elements_after_solve_1_elasticity_dep_Quad_1( double * );
extern "C" void apply_on_elements_after_solve_2_elasticity_dep_Quad_2( double * );
extern "C" void apply_on_elements_after_solve_3_elasticity_dep_Quad_3( double * );
extern "C" void apply_on_elements_after_solve_4_elasticity_dep_Quad_4( double * );
extern "C" void apply_on_elements_after_solve_5_elasticity_dep_Quad_5( double * );
class Quad;
template<unsigned A,class B,class C> class Node;
template<class A,class B,class C,class D,unsigned E> class Element;

// Carac for ...
template<class P_T_pos,class P_ND,class TED,unsigned nim,class TM,class T>
class CaracFormulationForElement<elasticity_dep,Element<Quad,DefaultBehavior,Node<2,P_T_pos,P_ND>,TED,nim>,TM,T> {
public:
    template<unsigned num_mat,unsigned inner=0> struct ElemMatricesCarac {
        static const bool symm = true;
        static const bool herm = false;
        static const bool diag = false;
        static const bool linear = true;
    };
    static const unsigned order_integration = 2;
    static const bool has_elementary_matrix = true;
    static const bool has_skin_elementary_matrix = true;
    template<class TE,class TF, class TVEVE> static void after_solve(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
    T reg0=0.5*elem.pos(0)[0]; T reg1=0.5*elem.pos(1)[0]; T reg2=0.5*elem.pos(0)[1]; T reg3=0.5*elem.pos(1)[1]; T reg4=reg1-reg0;
    T reg5=0.5*elem.pos(2)[0]; T reg6=reg2+reg3; reg2=reg3-reg2; reg3=0.5*elem.pos(2)[1]; reg1=reg0+reg1;
    reg4=reg4+reg5; reg2=reg3+reg2; reg1=reg5-reg1; reg0=0.5*elem.pos(3)[0]; reg6=reg3-reg6;
    reg3=0.5*elem.pos(3)[1]; reg5=0.5*vectors[0][indices[1]+1]; T reg7=0.5*vectors[0][indices[0]+1]; reg1=reg1+reg0; reg0=reg4-reg0;
    reg2=reg2-reg3; reg4=0.5*vectors[0][indices[0]+0]; reg3=reg6+reg3; reg6=0.5*vectors[0][indices[1]+0]; T reg8=reg0*reg3;
    T reg9=1+(*f.m).poisson_ratio; T reg10=reg7+reg5; reg7=reg5-reg7; reg5=0.5*vectors[0][indices[2]+1]; T reg11=reg2*reg1;
    T reg12=0.5*vectors[0][indices[2]+0]; T reg13=reg6-reg4; reg4=reg6+reg4; reg9=reg9/(*f.m).elastic_modulus; reg6=0.5*vectors[0][indices[3]+0];
    T reg14=1.0/(*f.m).elastic_modulus; reg4=reg12-reg4; T reg15=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg12=reg13+reg12; reg13=0.5*vectors[0][indices[3]+1];
    reg10=reg5-reg10; reg7=reg5+reg7; reg11=reg8-reg11; reg1=reg1/reg11; reg3=reg3/reg11;
    reg7=reg7-reg13; reg13=reg10+reg13; reg5=reg9*reg14; reg8=reg9*reg15; reg0=reg0/reg11;
    reg4=reg6+reg4; reg11=reg2/reg11; reg6=reg12-reg6; reg2=reg7*reg3; reg10=reg1*reg6;
    reg12=reg0*reg4; T reg16=reg13*reg11; T reg17=reg15*reg8; T reg18=reg14*reg5; reg10=reg12-reg10;
    reg16=reg2-reg16; reg4=reg11*reg4; reg2=pow(reg14,2); reg17=reg18-reg17; reg11=pow(reg15,2);
    reg6=reg3*reg6; reg13=reg0*reg13; reg7=reg1*reg7; reg8=reg8/reg17; reg16=reg10+reg16;
    reg4=reg6-reg4; elem.epsilon[0][0]=reg4; reg11=reg2-reg11; reg7=reg13-reg7; elem.epsilon[0][1]=reg7;
    reg5=reg5/reg17; reg16=0.5*reg16; elem.epsilon[0][2]=reg16; reg0=reg8*reg4; reg1=reg5*reg7;
    reg2=reg5*reg4; reg17=reg11/reg17; reg3=reg8*reg7; elem.sigma[0][2]=reg17*reg16; elem.tr_epsilon=reg7+reg4;
    elem.sigma[0][1]=reg1+reg0; elem.sigma[0][0]=reg3+reg2;
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_2(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_3(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_4(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_5(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_6(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
  
  static const unsigned nb_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};

// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=elem.pos(1)[0]*reg1; T reg3=reg1*elem.pos(0)[0]; T reg4=elem.pos(1)[1]*var_inter[0];
    T reg5=elem.pos(0)[1]*reg1; T reg6=elem.pos(1)[1]*reg1; T reg7=reg0*elem.pos(0)[0]; T reg8=elem.pos(1)[0]*var_inter[0]; T reg9=elem.pos(0)[1]*reg0;
    reg2=reg2-reg3; T reg10=reg9+reg4; T reg11=elem.pos(2)[1]*var_inter[0]; T reg12=elem.pos(2)[0]*var_inter[1]; reg6=reg6-reg5;
    T reg13=elem.pos(2)[1]*var_inter[1]; T reg14=reg7+reg8; T reg15=elem.pos(2)[0]*var_inter[0]; reg13=reg6+reg13; reg6=var_inter[1]*elem.pos(3)[1];
    reg12=reg2+reg12; reg2=var_inter[1]*elem.pos(3)[0]; T reg16=reg0*elem.pos(3)[1]; reg11=reg11-reg10; T reg17=reg0*elem.pos(3)[0];
    reg15=reg15-reg14; reg12=reg12-reg2; reg16=reg11+reg16; reg13=reg13-reg6; reg17=reg15+reg17;
    reg11=reg12*reg16; reg15=reg13*reg17; T reg18=1+(*f.m).poisson_ratio; reg15=reg11-reg15; reg11=1.0/(*f.m).elastic_modulus;
    T reg19=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg18=reg18/(*f.m).elastic_modulus; reg16=reg16/reg15; reg12=reg12/reg15; reg17=reg17/reg15;
    reg13=reg13/reg15; T reg20=reg18*reg11; T reg21=reg18*reg19; T reg22=var_inter[1]*reg17; T reg23=pow(reg19,2);
    T reg24=var_inter[0]*reg13; T reg25=reg1*reg16; T reg26=var_inter[0]*reg12; T reg27=pow(reg11,2); T reg28=reg19*reg21;
    T reg29=reg0*reg13; T reg30=var_inter[1]*reg16; T reg31=reg0*reg12; T reg32=reg11*reg20; T reg33=reg1*reg17;
    reg23=reg27-reg23; reg28=reg32-reg28; reg27=reg29+reg30; reg32=reg33+reg26; T reg34=reg25+reg24;
    T reg35=reg31+reg22; T reg36=reg33-reg31; T reg37=0.5*reg32; T reg38=reg29-reg25; T reg39=0.5*reg27;
    T reg40=0.5*reg35; reg23=reg23/reg28; T reg41=reg26-reg22; T reg42=0.5*reg34; T reg43=elem.proute[0](1,1)+elem.proute[1](1,1);
    T reg44=reg30-reg24; T reg45=reg23*reg40; T reg46=0.5*reg41; reg43=elem.proute[2](1,1)+reg43; T reg47=0.5*reg38;
    T reg48=reg23*reg39; T reg49=reg23*reg37; T reg50=0.5*reg36; T reg51=reg23*reg42; T reg52=0.5*reg44;
    reg20=reg20/reg28; reg28=reg21/reg28; reg21=reg23*reg46; T reg53=2*reg49; T reg54=reg20*reg27;
    T reg55=reg20*reg34; reg51=2*reg51; T reg56=reg23*reg52; T reg57=reg28*reg32; reg43=elem.proute[3](1,1)+reg43;
    T reg58=reg20*reg35; T reg59=reg28*reg27; T reg60=reg23*reg50; T reg61=reg20*reg32; reg45=2*reg45;
    T reg62=reg28*reg35; T reg63=reg23*reg47; T reg64=2*reg48; T reg65=reg28*reg34; T reg66=reg20*reg36;
    T reg67=reg28*reg44; T reg68=reg32*reg65; T reg69=reg53*reg42; T reg70=reg37*reg45; reg21=2*reg21;
    T reg71=reg55*reg27; T reg72=reg53*reg40; T reg73=reg34*reg54; T reg74=reg37*reg51; T reg75=reg34*reg57;
    T reg76=reg28*reg41; T reg77=reg32*reg58; T reg78=reg28*reg38; T reg79=reg20*reg41; reg56=2*reg56;
    T reg80=reg42*reg64; T reg81=var_inter[1]*reg0; T reg82=var_inter[0]*var_inter[1]; T reg83=reg45*reg39; T reg84=reg20*reg38;
    T reg85=reg35*reg61; T reg86=reg51*reg39; T reg87=reg43+(*f.m).f_vol[1]; T reg88=reg35*reg59; T reg89=var_inter[0]*reg1;
    T reg90=reg27*reg62; T reg91=reg0*reg1; T reg92=reg40*reg64; reg63=2*reg63; reg60=2*reg60;
    T reg93=reg28*reg36; T reg94=reg20*reg44; reg43=reg43+(*f.m).f_vol[0]; T reg95=reg32*reg59; reg83=reg88+reg83;
    T reg96=reg53*reg39; T reg97=reg35*reg65; T reg98=reg32*reg79; reg77=reg80+reg77; T reg99=reg82*reg43;
    T reg100=reg84*reg44; T reg101=reg60*reg46; T reg102=reg93*reg44; T reg103=reg63*reg46; T reg104=reg55*reg44;
    T reg105=reg53*reg46; T reg106=reg57*reg44; T reg107=reg51*reg46; T reg108=reg44*reg94; T reg109=reg39*reg64;
    T reg110=reg35*reg58; reg74=reg75+reg74; T reg111=reg34*reg94; T reg112=reg37*reg21; T reg113=reg34*reg76;
    T reg114=reg37*reg56; reg70=reg73+reg70; T reg115=reg34*reg62; T reg116=reg37*reg64; T reg117=reg89*reg87;
    T reg118=reg60*reg42; T reg119=reg32*reg78; T reg120=reg63*reg42; T reg121=reg27*reg54; reg68=reg69+reg68;
    T reg122=reg42*reg51; T reg123=reg32*reg61; T reg124=reg42*reg21; T reg125=reg32*reg67; T reg126=reg42*reg56;
    T reg127=reg52*reg56; T reg128=reg41*reg58; T reg129=reg41*reg59; T reg130=reg52*reg45; T reg131=reg52*reg64;
    T reg132=reg63*reg39; T reg133=reg35*reg66; T reg134=reg81*reg43; T reg135=reg60*reg39; T reg136=reg35*reg78;
    T reg137=reg60*reg40; T reg138=reg84*reg27; T reg139=reg63*reg40; T reg140=reg93*reg27; T reg141=reg81*reg87;
    reg90=reg92+reg90; T reg142=reg51*reg40; T reg143=reg40*reg45; T reg144=reg76*reg27; reg71=reg72+reg71;
    T reg145=reg57*reg27; T reg146=reg56*reg40; T reg147=reg94*reg27; T reg148=reg21*reg40; T reg149=reg46*reg21;
    T reg150=reg44*reg76; T reg151=reg46*reg56; T reg152=reg56*reg39; T reg153=reg44*reg54; T reg154=reg46*reg45;
    T reg155=reg44*reg62; T reg156=reg46*reg64; T reg157=reg82*reg87; T reg158=reg35*reg79; T reg159=reg41*reg78;
    T reg160=reg60*reg52; T reg161=reg41*reg66; T reg162=reg63*reg52; T reg163=reg41*reg65; T reg164=reg21*reg39;
    T reg165=reg53*reg52; T reg166=reg41*reg61; T reg167=reg51*reg52; T reg168=reg41*reg67; T reg169=reg21*reg52;
    T reg170=reg41*reg79; T reg171=reg35*reg67; reg86=reg85+reg86; T reg172=reg50*reg60; T reg173=reg47*reg63;
    reg65=reg36*reg65; T reg174=reg47*reg53; T reg175=reg38*reg84; T reg176=reg91*reg43; T reg177=reg32*reg66;
    T reg178=reg36*reg61; T reg179=reg47*reg51; reg67=reg36*reg67; T reg180=reg47*reg21; reg79=reg36*reg79;
    T reg181=reg47*reg56; T reg182=reg36*reg59; T reg183=reg47*reg45; reg58=reg36*reg58; T reg184=reg47*reg64;
    T reg185=reg38*reg55; T reg186=reg50*reg53; T reg187=reg38*reg57; reg51=reg50*reg51; reg94=reg38*reg94;
    reg21=reg50*reg21; reg76=reg38*reg76; reg56=reg50*reg56; T reg188=reg38*reg54; T reg189=reg50*reg63;
    T reg190=reg50*reg45; T reg191=reg38*reg93; reg62=reg38*reg62; T reg192=reg50*reg64; T reg193=reg91*reg87;
    reg78=reg36*reg78; T reg194=reg60*reg47; reg66=reg36*reg66; T reg195=reg89*reg43; reg63=reg63*reg37;
    reg93=reg93*reg34; reg45=reg42*reg45; reg55=reg34*reg55; reg60=reg60*reg37; T reg196=reg37*reg53;
    reg84=reg84*reg34; reg169=reg168+reg169; reg62=reg62-reg192; reg167=reg167-reg166; reg164=reg171-reg164;
    reg163=reg163-reg165; reg168=reg15*reg70; reg193=(*f.m).density*reg193; reg107=reg107-reg106; reg162=reg161+reg162;
    reg194=reg78+reg194; reg176=(*f.m).density*reg176; reg160=reg159+reg160; reg172=reg175+reg172; reg157=(*f.m).density*reg157;
    reg114=reg113-reg114; reg155=reg155-reg156; reg173=reg66+reg173; reg152=reg158-reg152; reg154=reg154-reg153;
    reg151=reg150+reg151; reg60=reg84-reg60; reg65=reg65-reg174; reg149=reg108+reg149; reg55=reg55+reg196;
    reg141=(*f.m).density*reg141; reg185=reg185-reg186; reg135=reg136-reg135; reg66=reg15*reg90; reg144=reg146-reg144;
    reg51=reg51-reg187; reg147=reg148-reg147; reg132=reg133-reg132; reg142=reg142+reg145; reg78=reg15*reg71;
    reg21=reg94+reg21; reg97=reg97+reg96; reg140=reg139-reg140; reg84=reg15*reg74; reg56=reg76+reg56;
    reg138=reg137-reg138; reg189=reg191+reg189; reg134=(*f.m).density*reg134; reg128=reg128-reg131; reg63=reg93-reg63;
    reg130=reg130-reg129; reg190=reg190-reg188; reg76=reg15*reg86; reg127=reg170+reg127; reg112=reg111-reg112;
    reg119=reg118-reg119; reg101=reg100+reg101; reg195=(*f.m).density*reg195; reg99=(*f.m).density*reg99; reg115=reg115+reg116;
    reg93=reg15*reg68; reg94=reg15*reg77; reg180=reg67+reg180; reg110=reg110+reg109; reg183=reg183-reg182;
    reg122=reg122+reg123; reg117=(*f.m).density*reg117; reg125=reg124-reg125; reg45=reg45+reg95; reg181=reg79+reg181;
    reg98=reg126-reg98; reg177=reg120-reg177; reg143=reg121+reg143; reg58=reg58-reg184; reg103=reg102+reg103;
    reg179=reg179-reg178; reg104=reg104-reg105; reg67=reg15*reg83; reg125=reg15*reg125; reg128=reg15*reg128;
    reg79=ponderation*reg84; reg100=reg15*reg117; reg102=reg15*reg176; reg119=reg15*reg119; reg130=reg15*reg130;
    reg58=reg15*reg58; reg56=reg15*reg56; reg108=reg15*reg193; reg138=reg15*reg138; reg122=reg15*reg122;
    reg181=reg15*reg181; reg111=ponderation*reg66; reg190=reg15*reg190; reg51=reg15*reg51; reg189=reg15*reg189;
    reg147=reg15*reg147; reg177=reg15*reg177; reg144=reg15*reg144; reg113=reg15*reg195; reg143=reg15*reg143;
    reg132=reg15*reg132; reg142=reg15*reg142; reg55=reg15*reg55; reg135=reg15*reg135; reg118=reg15*reg141;
    reg120=ponderation*reg78; reg124=ponderation*reg93; reg21=reg15*reg21; reg183=reg15*reg183; reg185=reg15*reg185;
    reg63=reg15*reg63; reg97=reg15*reg97; reg140=reg15*reg140; reg126=ponderation*reg94; reg160=reg15*reg160;
    reg115=reg15*reg115; reg194=reg15*reg194; reg114=reg15*reg114; reg155=reg15*reg155; reg133=reg15*reg157;
    reg101=reg15*reg101; reg154=reg15*reg154; reg173=reg15*reg173; reg152=reg15*reg152; reg151=reg15*reg151;
    reg179=reg15*reg179; reg60=reg15*reg60; reg149=reg15*reg149; reg103=reg15*reg103; reg136=ponderation*reg67;
    reg65=reg15*reg65; reg107=reg15*reg107; reg104=reg15*reg104; reg137=ponderation*reg168; reg98=reg15*reg98;
    reg139=ponderation*reg76; reg127=reg15*reg127; reg112=reg15*reg112; reg169=reg15*reg169; reg146=reg15*reg99;
    reg62=reg15*reg62; reg167=reg15*reg167; reg45=reg15*reg45; reg172=reg15*reg172; reg162=reg15*reg162;
    reg164=reg15*reg164; reg180=reg15*reg180; reg163=reg15*reg163; reg110=reg15*reg110; reg148=reg15*reg134;
    matrix(indices[3]+1,indices[1]+0)+=ponderation*reg97; reg97=ponderation*reg133; sollicitation[indices[2]+1]+=reg97; reg150=ponderation*reg146; sollicitation[indices[2]+0]+=reg150;
    matrix(indices[3]+1,indices[3]+1)+=ponderation*reg110; reg110=ponderation*reg108; sollicitation[indices[0]+1]+=reg110; reg158=ponderation*reg102; sollicitation[indices[0]+0]+=reg158;
    matrix(indices[3]+1,indices[1]+1)+=-reg139; matrix(indices[3]+1,indices[2]+0)+=ponderation*reg164; reg139=ponderation*reg148; sollicitation[indices[3]+0]+=reg139; matrix(indices[3]+1,indices[0]+0)+=ponderation*reg135;
    reg135=ponderation*reg100; sollicitation[indices[1]+1]+=reg135; reg159=ponderation*reg118; sollicitation[indices[3]+1]+=reg159; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg189;
    matrix(indices[3]+1,indices[2]+1)+=ponderation*reg152; matrix(indices[3]+1,indices[0]+1)+=ponderation*reg132; reg132=ponderation*reg113; sollicitation[indices[1]+0]+=reg132; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg172;
    matrix(indices[3]+1,indices[3]+0)+=-reg136; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg149; matrix(indices[2]+0,indices[1]+1)+=ponderation*reg107; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg65; matrix(indices[2]+0,indices[1]+0)+=ponderation*reg104;
    matrix(indices[2]+0,indices[0]+1)+=ponderation*reg103; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg101; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg179; matrix(indices[1]+1,indices[3]+1)+=-reg126; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg180;
    matrix(indices[1]+1,indices[3]+0)+=ponderation*reg45; matrix(indices[1]+1,indices[2]+1)+=ponderation*reg98; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg181; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg125; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg122;
    matrix(indices[1]+1,indices[1]+0)+=-reg124; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg183; matrix(indices[1]+1,indices[0]+1)+=ponderation*reg177; matrix(indices[1]+1,indices[0]+0)+=ponderation*reg119; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg58;
    matrix(indices[1]+0,indices[3]+1)+=ponderation*reg115; matrix(indices[1]+0,indices[3]+0)+=-reg137; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg114; matrix(indices[1]+0,indices[0]+0)+=ponderation*reg60; matrix(indices[1]+0,indices[2]+0)+=ponderation*reg112;
    matrix(indices[1]+0,indices[1]+1)+=-reg79; matrix(indices[1]+0,indices[0]+1)+=ponderation*reg63; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg55; matrix(indices[3]+0,indices[3]+1)+=-reg111; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg185;
    matrix(indices[3]+0,indices[3]+0)+=ponderation*reg143; matrix(indices[3]+0,indices[2]+1)+=ponderation*reg144; matrix(indices[3]+0,indices[2]+0)+=ponderation*reg147; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg51; matrix(indices[3]+0,indices[1]+1)+=ponderation*reg142;
    matrix(indices[3]+0,indices[1]+0)+=-reg120; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg21; matrix(indices[3]+0,indices[0]+1)+=ponderation*reg140; matrix(indices[3]+0,indices[0]+0)+=ponderation*reg138; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg56;
    matrix(indices[2]+1,indices[3]+1)+=ponderation*reg128; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg130; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg190; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg127; matrix(indices[2]+1,indices[2]+0)+=ponderation*reg169;
    matrix(indices[2]+1,indices[1]+1)+=ponderation*reg167; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg62; matrix(indices[2]+1,indices[1]+0)+=ponderation*reg163; matrix(indices[2]+1,indices[0]+1)+=ponderation*reg162; matrix(indices[2]+1,indices[0]+0)+=ponderation*reg160;
    matrix(indices[0]+1,indices[0]+0)+=ponderation*reg194; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg155; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg154; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg173; matrix(indices[2]+0,indices[2]+1)+=ponderation*reg151;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=elem.pos(1)[0]*reg1; T reg3=reg1*elem.pos(0)[0]; T reg4=elem.pos(1)[1]*var_inter[0];
    T reg5=elem.pos(0)[1]*reg1; T reg6=elem.pos(1)[1]*reg1; T reg7=reg0*elem.pos(0)[0]; T reg8=elem.pos(1)[0]*var_inter[0]; T reg9=elem.pos(0)[1]*reg0;
    reg2=reg2-reg3; T reg10=reg9+reg4; T reg11=elem.pos(2)[1]*var_inter[0]; T reg12=elem.pos(2)[0]*var_inter[1]; reg6=reg6-reg5;
    T reg13=elem.pos(2)[1]*var_inter[1]; T reg14=reg7+reg8; T reg15=elem.pos(2)[0]*var_inter[0]; reg13=reg6+reg13; reg6=var_inter[1]*elem.pos(3)[1];
    reg12=reg2+reg12; reg2=var_inter[1]*elem.pos(3)[0]; T reg16=reg0*elem.pos(3)[1]; reg11=reg11-reg10; T reg17=reg0*elem.pos(3)[0];
    reg15=reg15-reg14; reg12=reg12-reg2; reg16=reg11+reg16; reg13=reg13-reg6; reg17=reg15+reg17;
    reg11=reg12*reg16; reg15=reg13*reg17; T reg18=1+(*f.m).poisson_ratio; reg15=reg11-reg15; reg11=1.0/(*f.m).elastic_modulus;
    T reg19=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg18=reg18/(*f.m).elastic_modulus; reg16=reg16/reg15; reg12=reg12/reg15; reg17=reg17/reg15;
    reg13=reg13/reg15; T reg20=reg18*reg11; T reg21=reg18*reg19; T reg22=reg11*reg20; T reg23=reg19*reg21;
    T reg24=pow(reg11,2); T reg25=var_inter[1]*reg17; T reg26=pow(reg19,2); T reg27=reg1*reg16; T reg28=reg0*reg13;
    T reg29=reg0*reg12; T reg30=var_inter[0]*reg13; T reg31=var_inter[1]*reg16; T reg32=reg1*reg17; reg26=reg24-reg26;
    reg24=var_inter[0]*reg12; T reg33=reg27+reg30; reg23=reg22-reg23; reg22=reg29+reg25; T reg34=reg28+reg31;
    T reg35=reg31-reg30; T reg36=0.5*reg22; T reg37=0.5*reg34; T reg38=elem.proute[0](1,1)+elem.proute[1](1,1); T reg39=reg32+reg24;
    T reg40=reg32-reg29; T reg41=reg28-reg27; reg26=reg26/reg23; T reg42=0.5*reg33; T reg43=reg24-reg25;
    T reg44=0.5*reg41; T reg45=reg26*reg36; T reg46=0.5*reg35; reg38=elem.proute[2](1,1)+reg38; reg20=reg20/reg23;
    T reg47=0.5*reg43; T reg48=reg26*reg37; T reg49=0.5*reg39; T reg50=0.5*reg40; reg23=reg21/reg23;
    reg21=reg26*reg42; T reg51=reg23*reg39; T reg52=reg26*reg46; T reg53=reg26*reg47; reg21=2*reg21;
    T reg54=reg26*reg49; reg38=elem.proute[3](1,1)+reg38; T reg55=reg20*reg22; T reg56=2*reg48; T reg57=reg26*reg50;
    T reg58=reg20*reg34; T reg59=reg26*reg44; T reg60=reg23*reg22; reg45=2*reg45; T reg61=reg20*reg35;
    reg52=2*reg52; T reg62=reg23*reg33; T reg63=reg20*reg39; T reg64=reg23*reg34; T reg65=reg20*reg43;
    T reg66=reg23*reg35; T reg67=reg33*reg51; reg53=2*reg53; T reg68=reg39*reg55; T reg69=reg49*reg21;
    T reg70=reg20*reg40; T reg71=reg33*reg58; T reg72=reg42*reg56; T reg73=reg23*reg43; T reg74=reg49*reg45;
    T reg75=reg38+(*f.m).f_vol[0]; reg38=reg38+(*f.m).f_vol[1]; T reg76=var_inter[1]*reg0; T reg77=reg20*reg33; reg59=2*reg59;
    T reg78=2*reg54; T reg79=var_inter[0]*var_inter[1]; T reg80=reg23*reg40; T reg81=var_inter[0]*reg1; T reg82=reg0*reg1;
    T reg83=reg20*reg41; T reg84=reg34*reg60; reg57=2*reg57; T reg85=reg36*reg56; T reg86=reg49*reg52;
    T reg87=reg33*reg73; T reg88=reg49*reg53; reg84=reg85+reg84; T reg89=reg33*reg61; reg69=reg67+reg69;
    T reg90=reg76*reg38; T reg91=reg49*reg78; T reg92=reg33*reg77; T reg93=reg81*reg75; T reg94=reg42*reg45;
    T reg95=reg44*reg56; T reg96=reg40*reg55; T reg97=reg44*reg45; T reg98=reg40*reg64; T reg99=reg44*reg52;
    T reg100=reg40*reg65; T reg101=reg22*reg55; T reg102=reg37*reg56; T reg103=reg44*reg53; T reg104=reg79*reg75;
    T reg105=reg35*reg61; T reg106=reg47*reg53; T reg107=reg35*reg73; reg68=reg72+reg68; T reg108=reg47*reg52;
    T reg109=reg35*reg58; T reg110=reg47*reg45; T reg111=reg35*reg60; T reg112=reg47*reg56; T reg113=reg79*reg38;
    T reg114=reg39*reg64; T reg115=reg39*reg65; T reg116=reg42*reg52; T reg117=reg43*reg65; T reg118=reg46*reg52;
    reg55=reg43*reg55; T reg119=reg39*reg66; T reg120=reg42*reg53; T reg121=reg39*reg63; T reg122=reg42*reg21;
    T reg123=reg43*reg64; T reg124=reg34*reg58; T reg125=reg46*reg45; T reg126=reg46*reg56; T reg127=reg76*reg75;
    T reg128=reg81*reg38; T reg129=reg49*reg56; T reg130=reg33*reg60; reg74=reg71+reg74; T reg131=reg36*reg45;
    T reg132=reg44*reg78; T reg133=reg40*reg62; T reg134=reg41*reg51; T reg135=reg50*reg21; T reg136=reg82*reg75;
    T reg137=reg44*reg59; T reg138=reg40*reg70; T reg139=reg41*reg61; T reg140=reg50*reg53; T reg141=reg82*reg38;
    T reg142=reg41*reg73; T reg143=reg50*reg52; T reg144=reg50*reg56; reg60=reg41*reg60; T reg145=reg41*reg58;
    T reg146=reg50*reg45; T reg147=reg40*reg66; T reg148=reg50*reg78; T reg149=reg50*reg59; T reg150=reg50*reg57;
    T reg151=reg41*reg83; T reg152=reg41*reg77; T reg153=reg41*reg80; T reg154=reg44*reg21; T reg155=reg40*reg63;
    reg94=reg94+reg114; reg115=reg116-reg115; reg101=reg101+reg102; reg119=reg120-reg119; reg125=reg125-reg123;
    reg150=reg151+reg150; reg55=reg55-reg126; reg143=reg142+reg143; reg122=reg122+reg121; reg131=reg124+reg131;
    reg127=(*f.m).density*reg127; reg128=(*f.m).density*reg128; reg140=reg139+reg140; reg149=reg153+reg149; reg118=reg117+reg118;
    reg116=reg15*reg68; reg90=(*f.m).density*reg90; reg113=(*f.m).density*reg113; reg104=(*f.m).density*reg104; reg135=reg135-reg134;
    reg106=reg105+reg106; reg108=reg107+reg108; reg111=reg111-reg112; reg105=reg15*reg84; reg110=reg110-reg109;
    reg136=(*f.m).density*reg136; reg152=reg152-reg148; reg103=reg147+reg103; reg154=reg154-reg155; reg99=reg100+reg99;
    reg97=reg97-reg98; reg133=reg133-reg132; reg96=reg96-reg95; reg93=(*f.m).density*reg93; reg137=reg138+reg137;
    reg92=reg92+reg91; reg141=(*f.m).density*reg141; reg100=reg15*reg69; reg88=reg89-reg88; reg60=reg60-reg144;
    reg86=reg87-reg86; reg130=reg130+reg129; reg87=reg15*reg74; reg146=reg146-reg145; reg108=reg15*reg108;
    reg89=ponderation*reg105; reg107=reg15*reg113; reg152=reg15*reg152; reg96=reg15*reg96; reg110=reg15*reg110;
    reg117=reg15*reg141; reg146=reg15*reg146; reg133=reg15*reg133; reg111=reg15*reg111; reg97=reg15*reg97;
    reg120=reg15*reg127; reg149=reg15*reg149; reg99=reg15*reg99; reg118=reg15*reg118; reg130=reg15*reg130;
    reg154=reg15*reg154; reg138=reg15*reg90; reg125=reg15*reg125; reg131=reg15*reg131; reg103=reg15*reg103;
    reg55=reg15*reg55; reg150=reg15*reg150; reg86=reg15*reg86; reg119=reg15*reg119; reg101=reg15*reg101;
    reg139=reg15*reg93; reg60=reg15*reg60; reg115=reg15*reg115; reg140=reg15*reg140; reg88=reg15*reg88;
    reg94=reg15*reg94; reg142=reg15*reg128; reg147=ponderation*reg100; reg122=reg15*reg122; reg151=ponderation*reg87;
    reg137=reg15*reg137; reg106=reg15*reg106; reg153=reg15*reg136; reg143=reg15*reg143; reg135=reg15*reg135;
    reg92=reg15*reg92; T reg156=reg15*reg104; T reg157=ponderation*reg116; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg101; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg131;
    reg101=ponderation*reg153; sollicitation[indices[0]+0]+=reg101; reg131=ponderation*reg120; sollicitation[indices[3]+0]+=reg131; T reg158=ponderation*reg139;
    sollicitation[indices[1]+0]+=reg158; T reg159=ponderation*reg142; sollicitation[indices[1]+1]+=reg159; T reg160=ponderation*reg117; sollicitation[indices[0]+1]+=reg160;
    T reg161=ponderation*reg138; sollicitation[indices[3]+1]+=reg161; matrix(indices[3]+0,indices[3]+1)+=-reg89; reg89=ponderation*reg156; sollicitation[indices[2]+0]+=reg89;
    T reg162=ponderation*reg107; sollicitation[indices[2]+1]+=reg162; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg103; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg154; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg99;
    matrix(indices[0]+1,indices[1]+0)+=ponderation*reg133; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg97; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg96; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg137; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg92;
    matrix(indices[1]+0,indices[1]+1)+=-reg147; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg60; matrix(indices[1]+0,indices[2]+0)+=ponderation*reg88; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg86; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg146;
    matrix(indices[1]+0,indices[3]+0)+=-reg151; matrix(indices[1]+0,indices[3]+1)+=ponderation*reg130; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg143; matrix(indices[2]+1,indices[3]+1)+=ponderation*reg55; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg150;
    matrix(indices[2]+1,indices[3]+0)+=ponderation*reg125; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg118; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg149; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg111; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg110;
    matrix(indices[0]+0,indices[1]+0)+=ponderation*reg152; matrix(indices[2]+0,indices[2]+1)+=ponderation*reg108; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg106; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg135; matrix(indices[1]+1,indices[3]+1)+=-reg157;
    matrix(indices[1]+1,indices[3]+0)+=ponderation*reg94; matrix(indices[1]+1,indices[2]+1)+=ponderation*reg115; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg140; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg119; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg122;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=elem.pos(1)[1]*var_inter[0]; T reg3=elem.pos(0)[1]*reg0; T reg4=reg1*elem.pos(0)[0];
    T reg5=elem.pos(1)[0]*reg1; T reg6=elem.pos(0)[1]*reg1; T reg7=elem.pos(1)[1]*reg1; T reg8=reg0*elem.pos(0)[0]; T reg9=elem.pos(1)[0]*var_inter[0];
    T reg10=elem.pos(2)[0]*var_inter[0]; T reg11=elem.pos(2)[1]*var_inter[1]; reg7=reg7-reg6; T reg12=elem.pos(2)[0]*var_inter[1]; reg5=reg5-reg4;
    T reg13=reg3+reg2; T reg14=reg8+reg9; T reg15=elem.pos(2)[1]*var_inter[0]; reg12=reg5+reg12; reg5=var_inter[1]*elem.pos(3)[0];
    T reg16=reg0*elem.pos(3)[0]; reg15=reg15-reg13; reg11=reg7+reg11; reg7=var_inter[1]*elem.pos(3)[1]; reg10=reg10-reg14;
    T reg17=reg0*elem.pos(3)[1]; reg16=reg10+reg16; reg17=reg15+reg17; reg11=reg11-reg7; reg12=reg12-reg5;
    reg10=reg12*reg17; reg15=1+(*f.m).poisson_ratio; T reg18=reg11*reg16; T reg19=1.0/(*f.m).elastic_modulus; T reg20=(*f.m).poisson_ratio/(*f.m).elastic_modulus;
    reg18=reg10-reg18; reg15=reg15/(*f.m).elastic_modulus; reg11=reg11/reg18; reg10=reg15*reg19; T reg21=reg15*reg20;
    reg16=reg16/reg18; reg12=reg12/reg18; reg17=reg17/reg18; T reg22=var_inter[0]*reg11; T reg23=var_inter[0]*reg12;
    T reg24=var_inter[1]*reg17; T reg25=var_inter[1]*reg16; T reg26=reg1*reg16; T reg27=reg0*reg12; T reg28=reg0*reg11;
    T reg29=reg1*reg17; T reg30=pow(reg20,2); T reg31=reg19*reg10; T reg32=pow(reg19,2); T reg33=reg20*reg21;
    T reg34=reg29+reg22; T reg35=reg26+reg23; T reg36=reg28+reg24; reg30=reg32-reg30; reg32=reg27+reg25;
    reg33=reg31-reg33; reg30=reg30/reg33; reg31=0.5*reg35; T reg37=0.5*reg34; T reg38=0.5*reg36;
    T reg39=reg24-reg22; T reg40=reg28-reg29; T reg41=reg23-reg25; T reg42=0.5*reg32; T reg43=reg26-reg27;
    T reg44=reg30*reg38; T reg45=reg30*reg37; T reg46=reg30*reg31; T reg47=0.5*reg41; T reg48=reg30*reg42;
    T reg49=0.5*reg39; reg10=reg10/reg33; T reg50=0.5*reg43; T reg51=0.5*reg40; reg33=reg21/reg33;
    reg21=reg33*reg32; reg48=2*reg48; T reg52=reg30*reg50; T reg53=2*reg44; reg45=2*reg45;
    T reg54=reg30*reg47; T reg55=reg33*reg35; T reg56=reg33*reg34; T reg57=reg10*reg36; T reg58=reg10*reg35;
    T reg59=2*reg46; T reg60=reg30*reg51; T reg61=reg30*reg49; T reg62=reg10*reg34; T reg63=reg10*reg32;
    T reg64=reg33*reg36; T reg65=reg37*reg53; reg61=2*reg61; T reg66=reg59*reg42; T reg67=reg62*reg36;
    T reg68=reg35*reg63; T reg69=reg35*reg56; T reg70=reg59*reg37; T reg71=reg31*reg48; T reg72=reg34*reg57;
    T reg73=reg33*reg40; T reg74=reg31*reg45; T reg75=reg34*reg55; T reg76=reg10*reg43; T reg77=reg45*reg38;
    T reg78=reg32*reg58; T reg79=reg42*reg53; T reg80=reg36*reg21; T reg81=reg33*reg39; T reg82=reg10*reg41;
    T reg83=reg10*reg40; reg60=2*reg60; T reg84=reg48*reg38; T reg85=reg10*reg39; reg52=2*reg52;
    T reg86=reg33*reg43; reg54=2*reg54; T reg87=reg32*reg64; T reg88=reg33*reg41; T reg89=reg59*reg47;
    T reg90=reg31*reg54; T reg91=reg34*reg85; T reg92=reg88*reg36; T reg93=reg42*reg48; T reg94=reg49*reg48;
    reg74=reg75+reg74; T reg95=reg34*reg88; T reg96=reg31*reg61; T reg97=reg62*reg39; T reg98=reg40*reg86;
    T reg99=reg61*reg42; T reg100=reg55*reg39; T reg101=reg49*reg53; T reg102=reg45*reg47; T reg103=reg31*reg59;
    T reg104=reg34*reg62; T reg105=reg50*reg60; reg80=reg79+reg80; T reg106=reg60*reg31; T reg107=reg86*reg34;
    T reg108=reg41*reg64; T reg109=reg41*reg63; T reg110=reg39*reg85; T reg111=reg52*reg31; T reg112=reg83*reg34;
    T reg113=reg37*reg48; T reg114=reg32*reg73; T reg115=reg52*reg38; T reg116=reg47*reg54; T reg117=reg86*reg36;
    T reg118=reg60*reg42; T reg119=reg35*reg82; T reg120=reg37*reg61; T reg121=reg32*reg56; T reg122=reg59*reg38;
    T reg123=reg35*reg64; T reg124=reg35*reg81; T reg125=reg37*reg54; T reg126=reg45*reg42; T reg127=reg40*reg83;
    T reg128=reg35*reg58; T reg129=reg37*reg45; reg67=reg66+reg67; reg69=reg70+reg69; T reg130=reg50*reg52;
    T reg131=reg60*reg47; reg71=reg72+reg71; reg86=reg86*reg39; T reg132=reg85*reg36; T reg133=reg34*reg21;
    T reg134=reg31*reg53; T reg135=reg54*reg42; T reg136=reg52*reg47; T reg137=reg52*reg37; T reg138=reg35*reg73;
    T reg139=reg83*reg39; T reg140=reg52*reg42; T reg141=reg55*reg36; T reg142=reg60*reg37; T reg143=reg36*reg57;
    reg83=reg83*reg36; reg68=reg65+reg68; T reg144=reg51*reg59; T reg145=reg43*reg56; T reg146=reg54*reg49;
    reg77=reg78+reg77; T reg147=reg41*reg81; T reg148=reg41*reg73; T reg149=reg51*reg60; T reg150=reg43*reg76;
    T reg151=reg40*reg55; T reg152=reg52*reg49; T reg153=reg32*reg81; reg52=reg52*reg51; reg73=reg43*reg73;
    T reg154=reg50*reg45; T reg155=reg54*reg38; T reg156=reg41*reg76; T reg157=reg50*reg53; T reg158=reg60*reg49;
    reg84=reg87+reg84; T reg159=reg40*reg21; T reg160=reg32*reg82; T reg161=reg45*reg49; T reg162=reg50*reg48;
    reg85=reg40*reg85; T reg163=reg50*reg54; T reg164=reg41*reg58; T reg165=reg40*reg57; reg56=reg41*reg56;
    T reg166=reg61*reg38; T reg167=reg59*reg49; T reg168=reg50*reg61; T reg169=reg40*reg88; reg81=reg43*reg81;
    reg54=reg51*reg54; T reg170=reg39*reg57; T reg171=reg41*reg82; T reg172=reg49*reg61; T reg173=reg32*reg63;
    reg82=reg43*reg82; T reg174=reg51*reg61; reg60=reg60*reg38; T reg175=reg32*reg76; T reg176=reg38*reg53;
    T reg177=reg43*reg64; T reg178=reg51*reg48; reg61=reg47*reg61; reg88=reg39*reg88; reg63=reg43*reg63;
    T reg179=reg51*reg53; T reg180=reg47*reg53; reg62=reg40*reg62; reg48=reg47*reg48; reg21=reg39*reg21;
    T reg181=reg50*reg59; reg45=reg51*reg45; reg76=reg35*reg76; T reg182=reg43*reg58; reg21=reg21-reg180;
    reg56=reg56-reg167; reg116=reg110+reg116; reg172=reg171+reg172; reg131=reg86+reg131; reg109=reg109-reg101;
    reg113=reg113+reg123; reg97=reg97-reg89; reg102=reg102-reg100; reg158=reg156+reg158; reg61=reg88+reg61;
    reg83=reg140-reg83; reg146=reg147+reg146; reg136=reg139+reg136; reg94=reg94-reg108; reg86=reg18*reg68;
    reg161=reg161-reg164; reg48=reg48-reg170; reg152=reg148+reg152; reg88=reg18*reg74; reg104=reg104+reg103;
    reg106=reg107-reg106; reg107=reg18*reg80; reg111=reg112-reg111; reg63=reg63-reg179; reg105=reg98+reg105;
    reg115=reg114-reg115; reg178=reg178-reg177; reg174=reg82+reg174; reg60=reg175-reg60; reg54=reg81+reg54;
    reg121=reg121+reg122; reg45=reg45-reg182; reg62=reg62-reg181; reg145=reg145-reg144; reg81=reg18*reg84;
    reg82=reg18*reg77; reg149=reg150+reg149; reg52=reg73+reg52; reg155=reg153-reg155; reg159=reg159-reg157;
    reg154=reg154-reg151; reg162=reg162-reg165; reg163=reg85+reg163; reg166=reg160-reg166; reg168=reg169+reg168;
    reg76=reg142-reg76; reg93=reg143+reg93; reg126=reg126+reg141; reg138=reg137-reg138; reg73=reg18*reg67;
    reg130=reg127+reg130; reg133=reg133+reg134; reg85=reg18*reg69; reg132=reg135-reg132; reg98=reg18*reg71;
    reg129=reg129+reg128; reg173=reg173+reg176; reg124=reg125-reg124; reg96=reg95-reg96; reg92=reg99-reg92;
    reg90=reg91-reg90; reg117=reg118-reg117; reg119=reg120-reg119; reg83=reg18*reg83; reg155=reg18*reg155;
    reg161=reg18*reg161; reg117=reg18*reg117; reg166=reg18*reg166; reg91=ponderation*reg82; reg95=ponderation*reg73;
    reg99=ponderation*reg81; reg146=reg18*reg146; reg121=reg18*reg121; reg126=reg18*reg126; reg60=reg18*reg60;
    reg109=reg18*reg109; reg115=reg18*reg115; reg173=reg18*reg173; reg172=reg18*reg172; reg132=reg18*reg132;
    reg94=reg18*reg94; reg110=ponderation*reg107; reg93=reg18*reg93; reg92=reg18*reg92; reg119=reg18*reg119;
    reg124=reg18*reg124; reg129=reg18*reg129; reg112=ponderation*reg85; reg76=reg18*reg76; reg138=reg18*reg138;
    reg133=reg18*reg133; reg114=ponderation*reg98; reg96=reg18*reg96; reg90=reg18*reg90; reg118=ponderation*reg88;
    reg104=reg18*reg104; reg106=reg18*reg106; reg111=reg18*reg111; reg63=reg18*reg63; reg178=reg18*reg178;
    reg174=reg18*reg174; reg54=reg18*reg54; reg45=reg18*reg45; reg145=reg18*reg145; reg149=reg18*reg149;
    reg52=reg18*reg52; reg159=reg18*reg159; reg162=reg18*reg162; reg168=reg18*reg168; reg163=reg18*reg163;
    reg154=reg18*reg154; reg62=reg18*reg62; reg105=reg18*reg105; reg130=reg18*reg130; reg56=reg18*reg56;
    reg158=reg18*reg158; reg152=reg18*reg152; reg21=reg18*reg21; reg48=reg18*reg48; reg61=reg18*reg61;
    reg116=reg18*reg116; reg102=reg18*reg102; reg97=reg18*reg97; reg131=reg18*reg131; reg136=reg18*reg136;
    reg120=ponderation*reg86; reg113=reg18*reg113; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg162; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg21; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg159;
    matrix(indices[1]+1,indices[3]+0)+=ponderation*reg113; matrix(indices[3]+1,indices[1]+1)+=-reg91; matrix(indices[0]+1,indices[0]+0)+=ponderation*reg52; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg48; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg149;
    matrix(indices[1]+1,indices[2]+0)+=ponderation*reg124; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg145; matrix(indices[3]+1,indices[1]+0)+=ponderation*reg121; matrix(indices[2]+1,indices[2]+0)+=ponderation*reg146; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg45;
    matrix(indices[3]+1,indices[0]+1)+=ponderation*reg60; matrix(indices[2]+0,indices[2]+1)+=ponderation*reg61; matrix(indices[3]+1,indices[2]+0)+=ponderation*reg155; matrix(indices[2]+1,indices[1]+1)+=ponderation*reg161; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg168;
    matrix(indices[1]+1,indices[2]+1)+=ponderation*reg119; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg163; matrix(indices[3]+1,indices[2]+1)+=ponderation*reg166; matrix(indices[2]+1,indices[0]+0)+=ponderation*reg152; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg154;
    matrix(indices[3]+0,indices[0]+0)+=ponderation*reg83; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg62; matrix(indices[2]+1,indices[0]+1)+=ponderation*reg158; matrix(indices[3]+1,indices[3]+0)+=-reg99; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg105;
    matrix(indices[2]+1,indices[1]+0)+=ponderation*reg56; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg130; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg173; matrix(indices[1]+1,indices[0]+1)+=ponderation*reg76; matrix(indices[2]+1,indices[3]+1)+=ponderation*reg109;
    matrix(indices[3]+0,indices[1]+0)+=-reg95; matrix(indices[1]+1,indices[0]+0)+=ponderation*reg138; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg136; matrix(indices[1]+0,indices[3]+1)+=ponderation*reg133; matrix(indices[3]+0,indices[1]+1)+=ponderation*reg126;
    matrix(indices[1]+1,indices[1]+0)+=-reg112; matrix(indices[1]+0,indices[3]+0)+=-reg114; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg94; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg96; matrix(indices[3]+0,indices[2]+0)+=ponderation*reg132;
    matrix(indices[2]+0,indices[0]+1)+=ponderation*reg131; matrix(indices[1]+0,indices[2]+0)+=ponderation*reg90; matrix(indices[1]+1,indices[3]+1)+=-reg120; matrix(indices[1]+0,indices[1]+1)+=-reg118; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg54;
    matrix(indices[0]+1,indices[2]+1)+=ponderation*reg174; matrix(indices[3]+1,indices[0]+0)+=ponderation*reg115; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg116; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg178; matrix(indices[3]+0,indices[0]+1)+=ponderation*reg117;
    matrix(indices[0]+1,indices[3]+1)+=ponderation*reg63; matrix(indices[3]+0,indices[3]+1)+=-reg110; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg172; matrix(indices[1]+0,indices[0]+0)+=ponderation*reg111; matrix(indices[2]+0,indices[1]+1)+=ponderation*reg102;
    matrix(indices[1]+0,indices[0]+1)+=ponderation*reg106; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg129; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg93; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg104; matrix(indices[2]+0,indices[1]+0)+=ponderation*reg97;
    matrix(indices[3]+0,indices[2]+1)+=ponderation*reg92;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=elem.pos(1)[1]*var_inter[0]; T reg3=elem.pos(0)[1]*reg0; T reg4=reg1*elem.pos(0)[0];
    T reg5=elem.pos(1)[0]*reg1; T reg6=elem.pos(0)[1]*reg1; T reg7=elem.pos(1)[1]*reg1; T reg8=reg0*elem.pos(0)[0]; T reg9=elem.pos(1)[0]*var_inter[0];
    T reg10=elem.pos(2)[0]*var_inter[0]; T reg11=elem.pos(2)[1]*var_inter[1]; reg7=reg7-reg6; T reg12=elem.pos(2)[0]*var_inter[1]; reg5=reg5-reg4;
    T reg13=reg3+reg2; T reg14=reg8+reg9; T reg15=elem.pos(2)[1]*var_inter[0]; reg12=reg5+reg12; reg5=var_inter[1]*elem.pos(3)[0];
    T reg16=reg0*elem.pos(3)[0]; reg15=reg15-reg13; reg11=reg7+reg11; reg7=var_inter[1]*elem.pos(3)[1]; reg10=reg10-reg14;
    T reg17=reg0*elem.pos(3)[1]; reg16=reg10+reg16; reg17=reg15+reg17; reg11=reg11-reg7; reg12=reg12-reg5;
    reg10=reg12*reg17; reg15=1+(*f.m).poisson_ratio; T reg18=reg11*reg16; T reg19=1.0/(*f.m).elastic_modulus; T reg20=(*f.m).poisson_ratio/(*f.m).elastic_modulus;
    reg18=reg10-reg18; reg15=reg15/(*f.m).elastic_modulus; reg11=reg11/reg18; reg10=reg15*reg19; T reg21=reg15*reg20;
    reg16=reg16/reg18; reg12=reg12/reg18; reg17=reg17/reg18; T reg22=var_inter[0]*reg11; T reg23=var_inter[1]*reg17;
    T reg24=var_inter[1]*reg16; T reg25=reg0*reg12; T reg26=reg0*reg11; T reg27=reg1*reg17; T reg28=pow(reg20,2);
    T reg29=reg19*reg10; T reg30=pow(reg19,2); T reg31=reg20*reg21; T reg32=reg27+reg22; T reg33=var_inter[0]*reg12;
    T reg34=reg1*reg16; reg28=reg30-reg28; reg30=reg26+reg23; reg31=reg29-reg31; reg29=reg25+reg24;
    T reg35=0.5*reg29; T reg36=reg33-reg24; T reg37=reg23-reg22; T reg38=0.5*reg30; T reg39=0.5*reg32;
    T reg40=reg34+reg33; T reg41=reg34-reg25; T reg42=reg26-reg27; reg28=reg28/reg31; T reg43=0.5*reg40;
    reg21=reg21/reg31; reg31=reg10/reg31; reg10=reg28*reg35; T reg44=0.5*reg37; T reg45=reg28*reg39;
    T reg46=reg28*reg38; T reg47=0.5*reg42; T reg48=0.5*reg36; T reg49=0.5*reg41; reg45=2*reg45;
    T reg50=reg21*reg40; T reg51=reg28*reg44; T reg52=reg31*reg29; T reg53=reg28*reg48; T reg54=reg31*reg30;
    T reg55=reg28*reg43; T reg56=reg28*reg49; reg10=2*reg10; T reg57=reg21*reg29; T reg58=reg28*reg47;
    T reg59=2*reg46; T reg60=reg21*reg32; T reg61=reg31*reg40; T reg62=reg31*reg41; T reg63=reg40*reg52;
    reg53=2*reg53; T reg64=reg39*reg59; T reg65=reg21*reg37; T reg66=reg21*reg36; T reg67=reg31*reg36;
    reg51=2*reg51; T reg68=reg21*reg30; T reg69=reg30*reg57; T reg70=reg32*reg50; T reg71=reg35*reg59;
    reg58=2*reg58; T reg72=reg32*reg54; T reg73=reg43*reg45; T reg74=2*reg55; T reg75=reg21*reg41;
    reg56=2*reg56; T reg76=reg31*reg32; T reg77=reg31*reg42; T reg78=reg31*reg37; T reg79=reg43*reg10;
    T reg80=reg47*reg53; T reg81=reg40*reg68; T reg82=reg40*reg67; T reg83=reg41*reg65; T reg84=reg32*reg78;
    T reg85=reg43*reg53; T reg86=reg47*reg45; T reg87=reg41*reg61; T reg88=reg43*reg51; reg63=reg64+reg63;
    T reg89=reg37*reg78; T reg90=reg47*reg74; T reg91=reg41*reg60; T reg92=reg32*reg66; T reg93=reg41*reg52;
    T reg94=reg47*reg59; T reg95=reg39*reg45; T reg96=reg30*reg54; T reg97=reg39*reg10; T reg98=reg40*reg61;
    T reg99=reg39*reg53; T reg100=reg47*reg10; T reg101=reg32*reg76; T reg102=reg41*reg68; T reg103=reg43*reg74;
    T reg104=reg43*reg59; T reg105=reg32*reg57; T reg106=reg40*reg65; T reg107=reg39*reg51; T reg108=reg47*reg51;
    T reg109=reg41*reg67; reg73=reg70+reg73; reg79=reg72+reg79; T reg110=reg36*reg67; T reg111=reg49*reg51;
    T reg112=reg42*reg66; T reg113=reg44*reg51; T reg114=reg36*reg52; T reg115=reg49*reg53; T reg116=reg42*reg78;
    T reg117=reg36*reg68; T reg118=reg44*reg10; T reg119=reg49*reg45; T reg120=reg42*reg77; T reg121=reg42*reg50;
    T reg122=reg44*reg59; T reg123=reg35*reg10; T reg124=reg49*reg74; T reg125=reg42*reg76; T reg126=reg49*reg56;
    T reg127=reg38*reg59; reg69=reg71+reg69; T reg128=reg49*reg58; T reg129=reg42*reg75; reg52=reg29*reg52;
    T reg130=reg37*reg54; T reg131=reg49*reg59; T reg132=reg48*reg51; T reg133=reg42*reg57; T reg134=reg41*reg62;
    T reg135=reg47*reg58; T reg136=reg48*reg10; T reg137=reg37*reg66; reg57=reg37*reg57; T reg138=reg49*reg10;
    T reg139=reg42*reg54; T reg140=reg48*reg59; T reg141=reg48*reg53; T reg142=reg18*reg63; reg141=reg89+reg141;
    reg88=reg92-reg88; reg89=reg18*reg79; reg132=reg137+reg132; reg92=reg18*reg69; reg114=reg114-reg122;
    reg105=reg105+reg104; reg97=reg97+reg81; reg52=reg52+reg127; reg118=reg118-reg117; reg123=reg96+reg123;
    reg136=reg136-reg130; reg82=reg107-reg82; reg95=reg95+reg98; reg113=reg110+reg113; reg57=reg57-reg140;
    reg106=reg99-reg106; reg108=reg109+reg108; reg91=reg91-reg90; reg93=reg93-reg94; reg119=reg119-reg121;
    reg133=reg133-reg131; reg128=reg129+reg128; reg100=reg100-reg102; reg101=reg101+reg103; reg135=reg134+reg135;
    reg138=reg138-reg139; reg126=reg120+reg126; reg115=reg116+reg115; reg99=reg18*reg73; reg80=reg83+reg80;
    reg85=reg84-reg85; reg125=reg125-reg124; reg111=reg112+reg111; reg86=reg86-reg87; reg135=reg18*reg135;
    reg125=reg18*reg125; reg83=ponderation*reg142; reg91=reg18*reg91; reg114=reg18*reg114; reg86=reg18*reg86;
    reg141=reg18*reg141; reg118=reg18*reg118; reg133=reg18*reg133; reg132=reg18*reg132; reg119=reg18*reg119;
    reg138=reg18*reg138; reg136=reg18*reg136; reg111=reg18*reg111; reg57=reg18*reg57; reg113=reg18*reg113;
    reg115=reg18*reg115; reg126=reg18*reg126; reg101=reg18*reg101; reg105=reg18*reg105; reg84=ponderation*reg89;
    reg107=ponderation*reg92; reg93=reg18*reg93; reg109=ponderation*reg99; reg100=reg18*reg100; reg95=reg18*reg95;
    reg128=reg18*reg128; reg52=reg18*reg52; reg108=reg18*reg108; reg106=reg18*reg106; reg88=reg18*reg88;
    reg85=reg18*reg85; reg80=reg18*reg80; reg82=reg18*reg82; reg123=reg18*reg123; reg97=reg18*reg97;
    matrix(indices[2]+1,indices[2]+1)+=ponderation*reg113; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg52; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg119; matrix(indices[3]+0,indices[3]+1)+=-reg107; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg126;
    matrix(indices[2]+1,indices[3]+0)+=ponderation*reg118; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg125; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg128; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg123; matrix(indices[2]+1,indices[3]+1)+=ponderation*reg114;
    matrix(indices[1]+0,indices[2]+0)+=ponderation*reg85; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg88; matrix(indices[1]+0,indices[1]+1)+=-reg109; matrix(indices[1]+0,indices[3]+0)+=-reg84; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg101;
    matrix(indices[1]+0,indices[3]+1)+=ponderation*reg105; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg93; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg100; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg95; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg108;
    matrix(indices[1]+1,indices[2]+0)+=ponderation*reg106; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg80; matrix(indices[1]+1,indices[2]+1)+=ponderation*reg82; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg86; matrix(indices[1]+1,indices[3]+0)+=ponderation*reg97;
    matrix(indices[0]+1,indices[1]+0)+=ponderation*reg91; matrix(indices[1]+1,indices[3]+1)+=-reg83; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg135; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg141; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg133;
    matrix(indices[2]+0,indices[2]+1)+=ponderation*reg132; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg138; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg136; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg111; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg57;
    matrix(indices[0]+0,indices[2]+0)+=ponderation*reg115;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[1]; T reg1=1-var_inter[0]; T reg2=elem.pos(1)[0]*reg0; T reg3=elem.pos(0)[1]*reg0; T reg4=elem.pos(1)[1]*reg0;
    T reg5=elem.proute[0](1,1)+elem.proute[1](1,1); T reg6=reg0*elem.pos(0)[0]; T reg7=reg1*elem.pos(0)[0]; T reg8=elem.pos(1)[0]*var_inter[0]; T reg9=elem.pos(0)[1]*reg1;
    T reg10=elem.pos(1)[1]*var_inter[0]; T reg11=elem.pos(2)[1]*var_inter[1]; T reg12=reg7+reg8; T reg13=elem.pos(2)[0]*var_inter[0]; reg4=reg4-reg3;
    T reg14=elem.pos(2)[1]*var_inter[0]; T reg15=elem.pos(2)[0]*var_inter[1]; reg2=reg2-reg6; T reg16=reg9+reg10; reg5=elem.proute[2](1,1)+reg5;
    T reg17=reg1*elem.pos(3)[0]; reg13=reg13-reg12; reg14=reg14-reg16; T reg18=reg1*elem.pos(3)[1]; T reg19=var_inter[1]*elem.pos(3)[1];
    reg11=reg4+reg11; reg5=elem.proute[3](1,1)+reg5; reg4=var_inter[1]*elem.pos(3)[0]; reg15=reg2+reg15; reg2=reg5+(*f.m).f_vol[0];
    reg18=reg14+reg18; reg5=reg5+(*f.m).f_vol[1]; reg17=reg13+reg17; reg13=reg1*reg0; reg14=var_inter[0]*reg0;
    T reg20=var_inter[0]*var_inter[1]; reg11=reg11-reg19; T reg21=var_inter[1]*reg1; reg15=reg15-reg4; T reg22=reg14*reg2;
    T reg23=reg13*reg5; T reg24=reg14*reg5; T reg25=reg20*reg2; T reg26=reg20*reg5; T reg27=reg21*reg2;
    T reg28=reg21*reg5; T reg29=reg13*reg2; T reg30=reg15*reg18; T reg31=reg11*reg17; reg28=(*f.m).density*reg28;
    reg27=(*f.m).density*reg27; reg26=(*f.m).density*reg26; reg25=(*f.m).density*reg25; reg24=(*f.m).density*reg24; reg31=reg30-reg31;
    reg22=(*f.m).density*reg22; reg23=(*f.m).density*reg23; reg29=(*f.m).density*reg29; reg30=reg31*reg26; T reg32=reg31*reg25;
    T reg33=reg31*reg27; T reg34=reg31*reg24; T reg35=reg31*reg22; T reg36=reg31*reg28; T reg37=reg31*reg23;
    T reg38=reg31*reg29; T reg39=ponderation*reg33; sollicitation[indices[3]+0]+=reg39; T reg40=ponderation*reg36; sollicitation[indices[3]+1]+=reg40;
    T reg41=ponderation*reg30; sollicitation[indices[2]+1]+=reg41; T reg42=ponderation*reg32; sollicitation[indices[2]+0]+=reg42; T reg43=ponderation*reg34;
    sollicitation[indices[1]+1]+=reg43; T reg44=ponderation*reg35; sollicitation[indices[1]+0]+=reg44; T reg45=ponderation*reg37; sollicitation[indices[0]+1]+=reg45;
    T reg46=ponderation*reg38; sollicitation[indices[0]+0]+=reg46;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_1[0]*(*f.m).lim_cond_1; T reg1=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[0]; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg3=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[1]; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0;
    matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; T reg4=reg1+reg0; T reg5=reg3+reg2; T reg6=PNODE(0).dep_imp_coef_0*reg4; T reg7=PNODE(0).dep_imp_coef_0*reg5;
    T reg8=PNODE(0).f_nodal[0]+reg6; sollicitation[indices[0]+0]+=reg8; T reg9=PNODE(0).f_nodal[1]+reg7; sollicitation[indices[0]+1]+=reg9;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_1[0]*(*f.m).lim_cond_1; T reg1=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[0]; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg3=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[1]; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0;
    matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; T reg4=reg1+reg0; T reg5=reg3+reg2; T reg6=PNODE(0).dep_imp_coef_0*reg4; T reg7=PNODE(0).dep_imp_coef_0*reg5;
    T reg8=PNODE(0).f_nodal[0]+reg6; sollicitation[indices[0]+0]+=reg8; T reg9=PNODE(0).f_nodal[1]+reg7; sollicitation[indices[0]+1]+=reg9;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_1[0]*(*f.m).lim_cond_1; T reg1=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[0]; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg3=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[1]; T reg4=reg1+reg0;
    T reg5=reg3+reg2; T reg6=PNODE(0).dep_imp_coef_0*reg4; T reg7=PNODE(0).dep_imp_coef_0*reg5; T reg8=PNODE(0).f_nodal[0]+reg6; sollicitation[indices[0]+0]+=reg8;
    T reg9=PNODE(0).f_nodal[1]+reg7; sollicitation[indices[0]+1]+=reg9;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
  #undef PNODE
}
#endif
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.21132486540518713447*reg4; T reg7=0.21132486540518713447*skin_elem.f_surf[0]; T reg8=0.21132486540518713447*skin_elem.f_surf[1]; T reg9=0.21132486540518713447*reg5; T reg10=0.78867513459481286553*reg5;
    T reg11=0.78867513459481286553*reg4; reg3=reg0*reg3; reg2=reg1*reg2; reg0=0.78867513459481286553*skin_elem.f_surf[0]; reg1=0.78867513459481286553*skin_elem.f_surf[1];
    reg9=reg8+reg9; reg10=reg1+reg10; T reg12=reg7-reg6; T reg13=reg0-reg11; reg3=reg2+reg3;
    reg12=reg3*reg12; reg10=reg3*reg10; reg13=reg3*reg13; reg9=reg3*reg9; reg12=0.5*reg12;
    reg13=0.5*reg13; reg10=0.5*reg10; reg9=0.5*reg9; reg12=reg13+reg12; sollicitation[indices[0]+0]+=reg12;
    sollicitation[indices[1]+0]+=reg12; reg9=reg10+reg9; sollicitation[indices[0]+1]+=reg9; sollicitation[indices[1]+1]+=reg9;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.21132486540518713447*reg4; T reg7=0.21132486540518713447*skin_elem.f_surf[0]; T reg8=0.21132486540518713447*skin_elem.f_surf[1]; T reg9=0.21132486540518713447*reg5; T reg10=0.78867513459481286553*reg5;
    T reg11=0.78867513459481286553*reg4; reg3=reg0*reg3; reg2=reg1*reg2; reg0=0.78867513459481286553*skin_elem.f_surf[0]; reg1=0.78867513459481286553*skin_elem.f_surf[1];
    reg9=reg8+reg9; reg10=reg1+reg10; T reg12=reg7-reg6; T reg13=reg0-reg11; reg3=reg2+reg3;
    reg12=reg3*reg12; reg10=reg3*reg10; reg13=reg3*reg13; reg9=reg3*reg9; reg12=0.5*reg12;
    reg13=0.5*reg13; reg10=0.5*reg10; reg9=0.5*reg9; reg12=reg13+reg12; sollicitation[indices[0]+0]+=reg12;
    sollicitation[indices[1]+0]+=reg12; reg9=reg10+reg9; sollicitation[indices[0]+1]+=reg9; sollicitation[indices[1]+1]+=reg9;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.21132486540518713447*reg4; T reg7=0.21132486540518713447*skin_elem.f_surf[0]; T reg8=0.21132486540518713447*skin_elem.f_surf[1]; T reg9=0.21132486540518713447*reg5; T reg10=0.78867513459481286553*reg5;
    T reg11=0.78867513459481286553*reg4; reg3=reg0*reg3; reg2=reg1*reg2; reg0=0.78867513459481286553*skin_elem.f_surf[0]; reg1=0.78867513459481286553*skin_elem.f_surf[1];
    reg9=reg8+reg9; reg10=reg1+reg10; T reg12=reg7-reg6; T reg13=reg0-reg11; reg3=reg2+reg3;
    reg12=reg3*reg12; reg10=reg3*reg10; reg13=reg3*reg13; reg9=reg3*reg9; reg12=0.5*reg12;
    reg13=0.5*reg13; reg10=0.5*reg10; reg9=0.5*reg9; reg12=reg13+reg12; sollicitation[indices[0]+0]+=reg12;
    sollicitation[indices[1]+0]+=reg12; reg9=reg10+reg9; sollicitation[indices[0]+1]+=reg9; sollicitation[indices[1]+1]+=reg9;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[0]-elem.pos(1)[0]; T reg1=elem.pos(2)[1]-elem.pos(1)[1]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.78867513459481286553*reg5; T reg7=0.21132486540518713447*reg5; reg3=reg1*reg3; reg2=reg0*reg2; reg0=0.21132486540518713447*reg4;
    reg1=0.21132486540518713447*skin_elem.f_surf[1]; T reg8=0.21132486540518713447*skin_elem.f_surf[0]; T reg9=0.78867513459481286553*skin_elem.f_surf[0]; T reg10=0.78867513459481286553*skin_elem.f_surf[1]; T reg11=0.78867513459481286553*reg4;
    T reg12=reg8-reg0; reg3=reg2+reg3; reg2=reg9-reg11; reg6=reg10+reg6; reg7=reg1+reg7;
    reg12=reg12*reg3; reg2=reg3*reg2; reg6=reg3*reg6; reg7=reg3*reg7; reg6=0.5*reg6;
    reg7=0.5*reg7; reg2=0.5*reg2; reg12=0.5*reg12; reg2=reg12+reg2; sollicitation[indices[1]+0]+=reg2;
    sollicitation[indices[2]+0]+=reg2; reg6=reg7+reg6; sollicitation[indices[1]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[0]-elem.pos(1)[0]; T reg1=elem.pos(2)[1]-elem.pos(1)[1]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.78867513459481286553*reg5; T reg7=0.21132486540518713447*reg5; reg3=reg1*reg3; reg2=reg0*reg2; reg0=0.21132486540518713447*reg4;
    reg1=0.21132486540518713447*skin_elem.f_surf[1]; T reg8=0.21132486540518713447*skin_elem.f_surf[0]; T reg9=0.78867513459481286553*skin_elem.f_surf[0]; T reg10=0.78867513459481286553*skin_elem.f_surf[1]; T reg11=0.78867513459481286553*reg4;
    T reg12=reg8-reg0; reg3=reg2+reg3; reg2=reg9-reg11; reg6=reg10+reg6; reg7=reg1+reg7;
    reg12=reg12*reg3; reg2=reg3*reg2; reg6=reg3*reg6; reg7=reg3*reg7; reg6=0.5*reg6;
    reg7=0.5*reg7; reg2=0.5*reg2; reg12=0.5*reg12; reg2=reg12+reg2; sollicitation[indices[1]+0]+=reg2;
    sollicitation[indices[2]+0]+=reg2; reg6=reg7+reg6; sollicitation[indices[1]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[0]-elem.pos(1)[0]; T reg1=elem.pos(2)[1]-elem.pos(1)[1]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.78867513459481286553*reg5; T reg7=0.21132486540518713447*reg5; reg3=reg1*reg3; reg2=reg0*reg2; reg0=0.21132486540518713447*reg4;
    reg1=0.21132486540518713447*skin_elem.f_surf[1]; T reg8=0.21132486540518713447*skin_elem.f_surf[0]; T reg9=0.78867513459481286553*skin_elem.f_surf[0]; T reg10=0.78867513459481286553*skin_elem.f_surf[1]; T reg11=0.78867513459481286553*reg4;
    T reg12=reg8-reg0; reg3=reg2+reg3; reg2=reg9-reg11; reg6=reg10+reg6; reg7=reg1+reg7;
    reg12=reg12*reg3; reg2=reg3*reg2; reg6=reg3*reg6; reg7=reg3*reg7; reg6=0.5*reg6;
    reg7=0.5*reg7; reg2=0.5*reg2; reg12=0.5*reg12; reg2=reg12+reg2; sollicitation[indices[1]+0]+=reg2;
    sollicitation[indices[2]+0]+=reg2; reg6=reg7+reg6; sollicitation[indices[1]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(3)[1]-elem.pos(2)[1]; T reg1=elem.pos(3)[0]-elem.pos(2)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.21132486540518713447*reg4; T reg7=0.78867513459481286553*reg5; T reg8=0.21132486540518713447*reg5; reg3=reg0*reg3; reg2=reg1*reg2;
    reg0=0.78867513459481286553*reg4; reg1=0.21132486540518713447*skin_elem.f_surf[1]; T reg9=0.21132486540518713447*skin_elem.f_surf[0]; T reg10=0.78867513459481286553*skin_elem.f_surf[0]; T reg11=0.78867513459481286553*skin_elem.f_surf[1];
    reg3=reg2+reg3; reg2=reg10-reg0; T reg12=reg9-reg6; reg8=reg1+reg8; reg7=reg11+reg7;
    reg2=reg3*reg2; reg12=reg3*reg12; reg8=reg3*reg8; reg7=reg3*reg7; reg8=0.5*reg8;
    reg7=0.5*reg7; reg12=0.5*reg12; reg2=0.5*reg2; reg12=reg2+reg12; sollicitation[indices[2]+0]+=reg12;
    sollicitation[indices[3]+0]+=reg12; reg8=reg7+reg8; sollicitation[indices[2]+1]+=reg8; sollicitation[indices[3]+1]+=reg8;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(3)[1]-elem.pos(2)[1]; T reg1=elem.pos(3)[0]-elem.pos(2)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.21132486540518713447*reg4; T reg7=0.78867513459481286553*reg5; T reg8=0.21132486540518713447*reg5; reg3=reg0*reg3; reg2=reg1*reg2;
    reg0=0.78867513459481286553*reg4; reg1=0.21132486540518713447*skin_elem.f_surf[1]; T reg9=0.21132486540518713447*skin_elem.f_surf[0]; T reg10=0.78867513459481286553*skin_elem.f_surf[0]; T reg11=0.78867513459481286553*skin_elem.f_surf[1];
    reg3=reg2+reg3; reg2=reg10-reg0; T reg12=reg9-reg6; reg8=reg1+reg8; reg7=reg11+reg7;
    reg2=reg3*reg2; reg12=reg3*reg12; reg8=reg3*reg8; reg7=reg3*reg7; reg8=0.5*reg8;
    reg7=0.5*reg7; reg12=0.5*reg12; reg2=0.5*reg2; reg12=reg2+reg12; sollicitation[indices[2]+0]+=reg12;
    sollicitation[indices[3]+0]+=reg12; reg8=reg7+reg8; sollicitation[indices[2]+1]+=reg8; sollicitation[indices[3]+1]+=reg8;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(3)[1]-elem.pos(2)[1]; T reg1=elem.pos(3)[0]-elem.pos(2)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.21132486540518713447*reg4; T reg7=0.78867513459481286553*reg5; T reg8=0.21132486540518713447*reg5; reg3=reg0*reg3; reg2=reg1*reg2;
    reg0=0.78867513459481286553*reg4; reg1=0.21132486540518713447*skin_elem.f_surf[1]; T reg9=0.21132486540518713447*skin_elem.f_surf[0]; T reg10=0.78867513459481286553*skin_elem.f_surf[0]; T reg11=0.78867513459481286553*skin_elem.f_surf[1];
    reg3=reg2+reg3; reg2=reg10-reg0; T reg12=reg9-reg6; reg8=reg1+reg8; reg7=reg11+reg7;
    reg2=reg3*reg2; reg12=reg3*reg12; reg8=reg3*reg8; reg7=reg3*reg7; reg8=0.5*reg8;
    reg7=0.5*reg7; reg12=0.5*reg12; reg2=0.5*reg2; reg12=reg2+reg12; sollicitation[indices[2]+0]+=reg12;
    sollicitation[indices[3]+0]+=reg12; reg8=reg7+reg8; sollicitation[indices[2]+1]+=reg8; sollicitation[indices[3]+1]+=reg8;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(0)[1]-elem.pos(3)[1]; T reg1=elem.pos(0)[0]-elem.pos(3)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.78867513459481286553*reg5; T reg7=0.21132486540518713447*reg5; T reg8=0.78867513459481286553*reg4; reg3=reg0*reg3; reg2=reg1*reg2;
    reg0=0.78867513459481286553*skin_elem.f_surf[1]; reg1=0.21132486540518713447*reg4; T reg9=0.21132486540518713447*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*skin_elem.f_surf[0]; T reg11=0.78867513459481286553*skin_elem.f_surf[0];
    reg3=reg2+reg3; reg2=reg10-reg1; T reg12=reg11-reg8; reg6=reg0+reg6; reg7=reg9+reg7;
    reg2=reg2*reg3; reg12=reg3*reg12; reg6=reg3*reg6; reg7=reg3*reg7; reg6=0.5*reg6;
    reg7=0.5*reg7; reg12=0.5*reg12; reg2=0.5*reg2; reg12=reg2+reg12; sollicitation[indices[0]+0]+=reg12;
    sollicitation[indices[3]+0]+=reg12; reg6=reg7+reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[3]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(0)[1]-elem.pos(3)[1]; T reg1=elem.pos(0)[0]-elem.pos(3)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.78867513459481286553*reg5; T reg7=0.21132486540518713447*reg5; T reg8=0.78867513459481286553*reg4; reg3=reg0*reg3; reg2=reg1*reg2;
    reg0=0.78867513459481286553*skin_elem.f_surf[1]; reg1=0.21132486540518713447*reg4; T reg9=0.21132486540518713447*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*skin_elem.f_surf[0]; T reg11=0.78867513459481286553*skin_elem.f_surf[0];
    reg3=reg2+reg3; reg2=reg10-reg1; T reg12=reg11-reg8; reg6=reg0+reg6; reg7=reg9+reg7;
    reg2=reg2*reg3; reg12=reg3*reg12; reg6=reg3*reg6; reg7=reg3*reg7; reg6=0.5*reg6;
    reg7=0.5*reg7; reg12=0.5*reg12; reg2=0.5*reg2; reg12=reg2+reg12; sollicitation[indices[0]+0]+=reg12;
    sollicitation[indices[3]+0]+=reg12; reg6=reg7+reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[3]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(0)[1]-elem.pos(3)[1]; T reg1=elem.pos(0)[0]-elem.pos(3)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.78867513459481286553*reg5; T reg7=0.21132486540518713447*reg5; T reg8=0.78867513459481286553*reg4; reg3=reg0*reg3; reg2=reg1*reg2;
    reg0=0.78867513459481286553*skin_elem.f_surf[1]; reg1=0.21132486540518713447*reg4; T reg9=0.21132486540518713447*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*skin_elem.f_surf[0]; T reg11=0.78867513459481286553*skin_elem.f_surf[0];
    reg3=reg2+reg3; reg2=reg10-reg1; T reg12=reg11-reg8; reg6=reg0+reg6; reg7=reg9+reg7;
    reg2=reg2*reg3; reg12=reg3*reg12; reg6=reg3*reg6; reg7=reg3*reg7; reg6=0.5*reg6;
    reg7=0.5*reg7; reg12=0.5*reg12; reg2=0.5*reg2; reg12=reg2+reg12; sollicitation[indices[0]+0]+=reg12;
    sollicitation[indices[3]+0]+=reg12; reg6=reg7+reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[3]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_vector_der_var(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */    T reg0=1-var_inter[1]; T reg1=1-var_inter[0]; T reg2=elem.pos(0)[1]*reg1; T reg3=elem.pos(0)[1]*reg0; T reg4=elem.pos(1)[1]*var_inter[0];
    T reg5=elem.pos(1)[1]*reg0; T reg6=1+(*f.m).poisson_ratio; T reg7=reg0*elem.pos(0)[0]; T reg8=elem.pos(1)[0]*reg0; T reg9=elem.pos(1)[0]*var_inter[0];
    T reg10=reg1*elem.pos(0)[0]; T reg11=elem.pos(2)[0]*var_inter[1]; reg8=reg8-reg7; reg6=reg6/(*f.m).elastic_modulus; T reg12=reg2+reg4;
    T reg13=elem.pos(2)[0]*var_inter[0]; T reg14=reg10+reg9; T reg15=elem.pos(2)[1]*var_inter[0]; reg5=reg5-reg3; T reg16=elem.pos(2)[1]*var_inter[1];
    T reg17=1.0/(*f.m).elastic_modulus; T reg18=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg19=var_inter[1]*elem.pos(3)[0]; reg16=reg5+reg16; reg5=var_inter[1]*elem.pos(3)[1];
    reg11=reg8+reg11; reg13=reg13-reg14; reg8=reg1*elem.pos(3)[0]; reg15=reg15-reg12; T reg20=reg1*elem.pos(3)[1];
    T reg21=reg17*reg18; T reg22=reg6*reg17; reg8=reg13+reg8; reg20=reg15+reg20; reg13=reg6*reg18;
    reg21=reg21+reg22; reg16=reg16-reg5; reg11=reg11-reg19; reg15=pow(reg17,2); T reg23=reg16*reg8;
    T reg24=reg11*reg20; T reg25=reg18*reg21; T reg26=reg17*reg13; T reg27=reg18*reg13; T reg28=reg17*reg22;
    T reg29=pow(reg18,2); reg23=reg24-reg23; reg24=reg17*reg15; reg26=reg25+reg26; reg20=reg20/reg23;
    reg11=reg11/reg23; reg8=reg8/reg23; reg16=reg16/reg23; reg25=2*reg17; reg29=reg15-reg29;
    reg27=reg28-reg27; reg26=reg24-reg26; reg24=pow(reg27,2); reg28=reg1*reg11; T reg30=reg0*reg8;
    T reg31=reg0*reg20; T reg32=reg1*reg16; T reg33=reg29*reg26; reg25=reg18*reg25; T reg34=reg13*reg26;
    reg26=reg22*reg26; T reg35=var_inter[0]*reg11; T reg36=reg25/reg27; reg33=reg33/reg24; T reg37=reg30-reg28;
    T reg38=reg32-reg31; reg36=reg33+reg36; reg33=var_inter[1]*reg8; T reg39=0.5*reg37; T reg40=0.5*reg38;
    T reg41=var_inter[0]*reg16; T reg42=var_inter[1]*reg20; T reg43=reg30+reg35; reg21=reg21/reg27; reg15=reg15/reg27;
    reg26=reg26/reg24; reg24=reg34/reg24; reg34=reg28+reg33; T reg44=reg32+reg42; T reg45=reg35-reg33;
    T reg46=reg42-reg41; T reg47=0.5*reg43; T reg48=reg40*reg36; T reg49=reg31+reg41; reg24=reg21-reg24;
    reg26=reg15-reg26; reg15=reg39*reg36; reg21=reg24*reg38; T reg50=reg26*reg37; T reg51=reg26*reg38;
    T reg52=reg24*reg37; T reg53=0.5*reg44; T reg54=2*reg15; T reg55=0.5*reg34; T reg56=0.5*reg46;
    T reg57=0.5*reg45; T reg58=reg47*reg36; T reg59=0.5*reg49; T reg60=2*reg48; T reg61=reg57*reg54;
    T reg62=reg49*reg52; T reg63=2*reg58; T reg64=reg45*reg21; T reg65=reg59*reg36; T reg66=reg55*reg54;
    T reg67=reg51*reg44; T reg68=reg55*reg60; T reg69=reg46*reg52; T reg70=reg57*reg60; T reg71=reg34*reg50;
    T reg72=reg44*reg52; T reg73=reg51*reg46; T reg74=reg47*reg60; T reg75=reg37*reg21; T reg76=reg40*reg54;
    T reg77=reg37*reg50; T reg78=reg40*reg60; T reg79=reg24*reg49; T reg80=reg53*reg60; T reg81=reg47*reg54;
    T reg82=reg51*reg49; T reg83=reg53*reg54; T reg84=reg34*reg21; T reg85=reg59*reg54; reg21=reg43*reg21;
    T reg86=reg59*reg60; T reg87=reg43*reg50; T reg88=reg39*reg60; reg52=reg38*reg52; T reg89=reg56*reg60;
    reg50=reg45*reg50; reg51=reg51*reg38; T reg90=reg39*reg54; T reg91=reg56*reg54; T reg92=reg26*reg49;
    T reg93=reg55*reg63; T reg94=reg44*reg92; reg51=reg51-reg90; reg75=reg75-reg76; reg77=reg77-reg78;
    reg73=reg73-reg61; T reg95=reg37*reg79; T reg96=reg40*reg63; reg64=reg64-reg91; reg69=reg69-reg70;
    T reg97=reg26*reg43; T reg98=reg43*reg79; T reg99=reg59*reg63; reg87=reg86+reg87; reg50=reg50-reg89;
    reg21=reg85+reg21; T reg100=reg45*reg79; T reg101=reg56*reg63; reg84=reg84+reg83; reg82=reg82+reg81;
    reg62=reg62+reg74; T reg102=reg49*reg92; T reg103=reg47*reg63; reg71=reg71+reg80; reg79=reg34*reg79;
    T reg104=reg53*reg63; T reg105=reg38*reg92; T reg106=reg39*reg63; reg92=reg46*reg92; T reg107=reg57*reg63;
    T reg108=reg57*reg36; reg52=reg52-reg88; T reg109=reg24*reg43; T reg110=2*reg65; reg72=reg68+reg72;
    reg67=reg66+reg67; T reg111=reg38*reg109; reg100=reg100+reg101; reg52=reg23*reg52; T reg112=reg23*reg21;
    reg50=reg23*reg50; T reg113=reg26*reg46; T reg114=reg23*reg67; T reg115=reg23*reg87; T reg116=2*reg108;
    reg98=reg98-reg99; T reg117=reg59*reg110; reg84=reg23*reg84; T reg118=reg53*reg110; T reg119=reg34*reg97;
    T reg120=reg56*reg110; reg82=reg23*reg82; T reg121=reg45*reg97; T reg122=reg39*reg110; reg62=reg23*reg62;
    reg102=reg102-reg103; reg105=reg105+reg106; reg71=reg23*reg71; T reg123=reg49*reg109; T reg124=reg47*reg110;
    reg79=reg79-reg104; T reg125=reg44*reg109; T reg126=reg56*reg36; reg77=reg23*reg77; reg109=reg46*reg109;
    T reg127=reg57*reg110; T reg128=reg23*reg72; T reg129=reg55*reg110; reg95=reg95+reg96; reg92=reg92+reg107;
    reg73=reg23*reg73; T reg130=reg40*reg110; reg64=reg23*reg64; T reg131=reg37*reg97; reg94=reg94-reg93;
    reg51=reg23*reg51; reg75=reg23*reg75; reg69=reg23*reg69; T reg132=reg24*reg46; reg97=reg43*reg97;
    T reg133=reg45*reg132; reg121=reg120+reg121; T reg134=reg56*reg116; reg92=reg23*reg92; T reg135=ponderation*reg128;
    reg73=ponderation*reg73; reg71=ponderation*reg71; reg69=ponderation*reg69; reg79=reg23*reg79; reg98=reg23*reg98;
    reg97=reg97-reg117; T reg136=reg59*reg116; T reg137=reg43*reg132; T reg138=ponderation*reg115; T reg139=ponderation*reg114;
    T reg140=reg44*reg113; T reg141=ponderation*reg112; reg125=reg125-reg129; reg50=ponderation*reg50; T reg142=reg57*reg116;
    T reg143=reg46*reg113; reg94=reg23*reg94; reg84=ponderation*reg84; reg64=ponderation*reg64; reg100=reg23*reg100;
    reg109=reg127+reg109; T reg144=reg39*reg116; reg105=reg23*reg105; reg52=ponderation*reg52; T reg145=reg24*reg45;
    T reg146=2*reg126; T reg147=reg26*reg45; T reg148=reg40*reg116; T reg149=reg37*reg132; reg51=ponderation*reg51;
    T reg150=reg55*reg36; reg131=reg130+reg131; T reg151=reg55*reg116; reg95=reg23*reg95; reg77=ponderation*reg77;
    reg75=ponderation*reg75; reg111=reg122+reg111; reg123=reg123-reg124; reg102=reg23*reg102; reg62=ponderation*reg62;
    reg82=ponderation*reg82; reg119=reg119-reg118; T reg152=reg49*reg113; reg113=reg38*reg113; reg132=reg34*reg132;
    T reg153=reg53*reg116; T reg154=reg47*reg116; reg50=vectors[0][indices[0]+1]*reg50; T reg155=reg26*reg44; T reg156=vectors[0][indices[0]+1]*reg138;
    T reg157=reg45*reg147; T reg158=vectors[0][indices[0]+0]*reg141; reg62=vectors[0][indices[0]+1]*reg62; reg82=vectors[0][indices[0]+0]*reg82; T reg159=reg53*reg36;
    T reg160=reg56*reg146; reg75=vectors[0][indices[0]+0]*reg75; T reg161=vectors[0][indices[0]+0]*reg139; reg77=vectors[0][indices[0]+1]*reg77; T reg162=2*reg150;
    reg133=reg133-reg134; reg105=ponderation*reg105; reg92=ponderation*reg92; T reg163=reg23*reg111; reg73=vectors[0][indices[0]+0]*reg73;
    reg69=vectors[0][indices[0]+1]*reg69; T reg164=reg39*reg146; T reg165=reg23*reg109; T reg166=reg38*reg145; reg64=vectors[0][indices[0]+0]*reg64;
    reg143=reg143-reg142; T reg167=reg46*reg145; T reg168=reg57*reg146; reg113=reg113-reg144; reg149=reg149-reg148;
    reg52=vectors[0][indices[0]+1]*reg52; reg51=vectors[0][indices[0]+0]*reg51; T reg169=reg37*reg147; T reg170=reg40*reg146; reg100=ponderation*reg100;
    reg71=vectors[0][indices[0]+1]*reg71; T reg171=reg53*reg146; T reg172=reg24*reg44; T reg173=reg34*reg147; reg132=reg132+reg153;
    T reg174=reg23*reg121; reg119=reg23*reg119; reg102=ponderation*reg102; reg123=reg23*reg123; reg79=ponderation*reg79;
    T reg175=reg47*reg146; T reg176=reg49*reg145; reg152=reg152+reg154; T reg177=vectors[0][indices[0]+1]*reg135; reg94=ponderation*reg94;
    reg125=reg23*reg125; reg95=ponderation*reg95; reg140=reg151+reg140; T reg178=reg55*reg146; reg147=reg43*reg147;
    T reg179=reg59*reg146; reg145=reg44*reg145; reg84=vectors[0][indices[0]+0]*reg84; reg137=reg136+reg137; T reg180=reg23*reg131;
    reg97=reg23*reg97; reg98=ponderation*reg98; reg50=reg64+reg50; reg71=reg84+reg71; reg100=vectors[0][indices[1]+0]*reg100;
    reg79=vectors[0][indices[1]+0]*reg79; reg177=reg161+reg177; reg64=vectors[0][indices[1]+0]*reg94; reg119=ponderation*reg119; reg84=reg55*reg162;
    reg132=reg23*reg132; reg173=reg173+reg171; reg161=reg34*reg172; T reg181=reg53*reg162; reg52=reg51+reg52;
    reg51=reg44*reg155; reg145=reg178+reg145; T reg182=reg23*reg140; reg125=ponderation*reg125; reg105=vectors[0][indices[1]+0]*reg105;
    reg77=reg75+reg77; reg95=vectors[0][indices[1]+0]*reg95; reg62=reg82+reg62; reg102=vectors[0][indices[1]+0]*reg102; reg75=vectors[0][indices[1]+0]*reg98;
    reg156=reg158+reg156; reg69=reg73+reg69; reg92=vectors[0][indices[1]+0]*reg92; reg73=reg56*reg162; reg157=reg157-reg160;
    reg133=reg23*reg133; reg167=reg167-reg168; reg82=ponderation*reg163; reg143=reg23*reg143; reg158=ponderation*reg165;
    T reg183=reg45*reg172; T reg184=ponderation*reg180; reg149=reg23*reg149; T reg185=reg43*reg172; T reg186=reg59*reg162;
    reg147=reg179+reg147; T reg187=reg23*reg137; reg169=reg169-reg170; reg97=ponderation*reg97; T reg188=reg40*reg162;
    reg172=reg37*reg172; reg26=reg26*reg34; reg123=ponderation*reg123; reg152=reg23*reg152; reg176=reg176+reg175;
    T reg189=reg49*reg155; T reg190=reg47*reg162; reg24=reg24*reg34; reg166=reg166-reg164; reg113=reg23*reg113;
    T reg191=reg39*reg162; T reg192=reg38*reg155; T reg193=ponderation*reg174; reg155=reg46*reg155; T reg194=2*reg159;
    T reg195=reg57*reg162; reg169=reg23*reg169; reg173=reg23*reg173; reg102=reg62+reg102; reg62=vectors[0][indices[1]+1]*reg123;
    reg132=ponderation*reg132; reg172=reg188+reg172; reg156=reg75+reg156; reg75=reg37*reg26; T reg196=reg40*reg194;
    reg125=vectors[0][indices[1]+1]*reg125; reg192=reg191+reg192; reg152=ponderation*reg152; reg97=vectors[0][indices[1]+1]*reg97; reg176=reg23*reg176;
    T reg197=reg39*reg194; reg95=reg77+reg95; reg183=reg183+reg73; reg77=vectors[0][indices[1]+1]*reg184; T reg198=vectors[0][indices[1]+1]*reg82;
    reg105=reg52+reg105; reg100=reg50+reg100; reg50=vectors[0][indices[1]+1]*reg158; reg92=reg69+reg92; reg113=ponderation*reg113;
    reg149=ponderation*reg149; reg52=vectors[0][indices[1]+1]*reg193; reg69=reg53*reg194; T reg199=reg34*reg26; reg166=reg23*reg166;
    reg161=reg161-reg181; T reg200=reg38*reg24; reg177=reg64+reg177; reg157=reg23*reg157; reg51=reg51-reg84;
    reg64=reg45*reg26; T reg201=reg23*reg145; T reg202=reg56*reg194; T reg203=ponderation*reg187; T reg204=ponderation*reg182;
    T reg205=vectors[0][indices[1]+1]*reg119; T reg206=reg23*reg147; reg185=reg185-reg186; reg79=reg71+reg79; reg155=reg195+reg155;
    reg71=reg59*reg194; reg26=reg43*reg26; reg167=reg23*reg167; reg143=ponderation*reg143; reg189=reg189-reg190;
    reg133=ponderation*reg133; T reg207=reg49*reg24; T reg208=reg47*reg194; T reg209=reg57*reg194; T reg210=reg46*reg24;
    T reg211=reg55*reg194; reg24=reg44*reg24; reg50=reg92-reg50; reg143=vectors[0][indices[2]+0]*reg143; reg200=reg200+reg197;
    reg210=reg210+reg209; reg167=ponderation*reg167; reg166=ponderation*reg166; reg157=ponderation*reg157; reg92=reg23*reg192;
    reg156=reg97-reg156; reg149=vectors[0][indices[2]+0]*reg149; reg97=reg23*reg155; reg77=reg95-reg77; reg95=vectors[0][indices[2]+0]*reg203;
    reg62=reg102-reg62; reg132=vectors[0][indices[2]+0]*reg132; reg64=reg64+reg202; reg152=vectors[0][indices[2]+0]*reg152; reg205=reg79-reg205;
    reg75=reg75+reg196; reg177=reg125-reg177; reg24=reg24-reg211; reg79=reg23*reg172; reg207=reg207-reg208;
    reg51=reg23*reg51; reg169=ponderation*reg169; reg173=ponderation*reg173; reg102=vectors[0][indices[2]+0]*reg204; reg125=ponderation*reg201;
    reg161=reg23*reg161; reg52=reg100-reg52; reg199=reg199-reg69; reg133=vectors[0][indices[2]+0]*reg133; reg100=ponderation*reg206;
    reg185=reg23*reg185; reg189=reg23*reg189; reg113=vectors[0][indices[2]+0]*reg113; reg198=reg105-reg198; reg26=reg26-reg71;
    reg176=ponderation*reg176; reg105=reg23*reg183; reg205=reg132+reg205; reg173=vectors[0][indices[2]+1]*reg173; reg157=vectors[0][indices[2]+1]*reg157;
    reg52=reg133+reg52; reg132=vectors[0][indices[2]+1]*reg100; reg95=reg156-reg95; reg133=vectors[0][indices[2]+1]*reg125; reg102=reg177-reg102;
    reg50=reg143+reg50; reg167=vectors[0][indices[2]+1]*reg167; reg75=reg23*reg75; reg189=ponderation*reg189; reg200=reg23*reg200;
    reg77=reg149+reg77; reg169=vectors[0][indices[2]+1]*reg169; reg207=reg23*reg207; reg143=ponderation*reg79; reg24=reg23*reg24;
    reg51=ponderation*reg51; reg161=ponderation*reg161; reg185=ponderation*reg185; reg26=reg23*reg26; reg199=reg23*reg199;
    reg166=vectors[0][indices[2]+1]*reg166; reg198=reg113+reg198; reg113=ponderation*reg92; reg62=reg152+reg62; reg176=vectors[0][indices[2]+1]*reg176;
    reg210=reg23*reg210; reg149=ponderation*reg97; reg152=ponderation*reg105; reg64=reg23*reg64; reg156=vectors[0][indices[3]+0]*reg152;
    reg157=reg52+reg157; reg199=ponderation*reg199; reg210=ponderation*reg210; reg75=ponderation*reg75; reg24=ponderation*reg24;
    reg207=ponderation*reg207; reg51=vectors[0][indices[3]+0]*reg51; reg133=reg102-reg133; reg26=ponderation*reg26; reg64=ponderation*reg64;
    reg132=reg95-reg132; reg185=vectors[0][indices[3]+0]*reg185; reg52=vectors[0][indices[3]+0]*reg143; reg169=reg77+reg169; reg77=vectors[0][indices[3]+0]*reg161;
    reg167=reg50+reg167; reg176=reg62+reg176; reg50=vectors[0][indices[3]+0]*reg189; reg62=vectors[0][indices[3]+0]*reg149; reg173=reg205+reg173;
    reg95=vectors[0][indices[3]+0]*reg113; reg166=reg198+reg166; reg200=ponderation*reg200; reg207=vectors[0][indices[3]+1]*reg207; reg77=reg173-reg77;
    reg102=vectors[0][indices[3]+1]*reg24; reg50=reg176-reg50; reg133=reg51+reg133; reg132=reg185+reg132; reg51=vectors[0][indices[3]+1]*reg26;
    reg52=reg169-reg52; reg199=vectors[0][indices[3]+1]*reg199; reg75=vectors[0][indices[3]+1]*reg75; reg95=reg166-reg95; reg200=vectors[0][indices[3]+1]*reg200;
    reg156=reg157-reg156; reg64=vectors[0][indices[3]+1]*reg64; reg210=vectors[0][indices[3]+1]*reg210; reg62=reg167-reg62; reg77=reg199+reg77;
    reg102=reg133-reg102; reg156=reg64+reg156; reg62=reg210+reg62; reg95=reg200+reg95; reg51=reg132-reg51;
    reg52=reg75+reg52; reg50=reg207+reg50; sollicitation[indices[0]+0]+=-reg95; sollicitation[indices[0]+1]+=-reg52; sollicitation[indices[1]+0]+=-reg50;
    sollicitation[indices[1]+1]+=-reg51; sollicitation[indices[2]+0]+=-reg62; sollicitation[indices[2]+1]+=-reg156; sollicitation[indices[3]+0]+=-reg102; sollicitation[indices[3]+1]+=-reg77;
  #undef PNODE
}
// 
#ifndef ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
#define ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz>
void add_nodal_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const typename TM::TNode &node,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) node
  /* (*f.m).poisson_ratio */  #undef PNODE
}
#endif
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}

#ifndef elasticity_dep_read_material_to_mesh
#define elasticity_dep_read_material_to_mesh
template<class TM, class T, bool wont_add_nz>
void read_material_to_mesh_(const XmlNode &n, Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f){ 
    if(n.has_attribute("f_vol"))  
        n.get_attribute("f_vol", f.m->f_vol ); 
    else  
        std::cerr << "Warning using default value of f_vol : " << f.m->f_vol << std::endl; 

    if(n.has_attribute("lim_cond_0"))  
        n.get_attribute("lim_cond_0", f.m->lim_cond_0 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_0 : " << f.m->lim_cond_0 << std::endl; 

    if(n.has_attribute("lim_cond_1"))  
        n.get_attribute("lim_cond_1", f.m->lim_cond_1 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_1 : " << f.m->lim_cond_1 << std::endl; 

    if(n.has_attribute("poisson_ratio"))  
        n.get_attribute("poisson_ratio", f.m->poisson_ratio ); 
    else  
        std::cerr << "Warning using default value of poisson_ratio : " << f.m->poisson_ratio << std::endl; 

    if(n.has_attribute("elastic_modulus"))  
        n.get_attribute("elastic_modulus", f.m->elastic_modulus ); 
    else  
        std::cerr << "Warning using default value of elastic_modulus : " << f.m->elastic_modulus << std::endl; 

    if(n.has_attribute("density"))  
        n.get_attribute("density", f.m->density ); 
    else  
        std::cerr << "Warning using default value of density : " << f.m->density << std::endl; 

  };
#endif // elasticity_dep_read_material_to_mesh
} // namespace LMT


#include "formulation/formulation.h"
namespace LMT {
#ifndef ELASTICITY_DEP_3_NUM_0_CARAC_H
#define ELASTICITY_DEP_3_NUM_0_CARAC_H
#ifndef STRUCT_ELASTICITY_DEP
#define STRUCT_ELASTICITY_DEP
struct elasticity_dep {
  static const char *name() { return "elasticity_dep"; }
};
#endif // ELASTICITY_DEP

template<class P_T>
class CaracFormulation<elasticity_dep,3,P_T>  {
public:
  typedef P_T T;
  static const char *name() { return "elasticity_dep"; }
  static const bool matrix_will_be_definite_positive=true;
  static const bool has_nodal_matrix = true;
  static const bool has_IS_contact_matrix=false;
  static const bool need_skin_assembly=false;
  typedef Norm1_is_inf Name_convergence_criterium;
  static const unsigned nb_vectors = 4;
  static const unsigned nb_matrices = 1;
  static const unsigned auto_contact = false;
  static const bool friction_coeff_is_a_nodal_variable = 0;
  static const unsigned offset_of_pos_unknown=3;
  static const unsigned pos_is_an_unknown = false;
  static const unsigned nb_der_var = 1;
  template<class TF> static void add_to_der_vars( TF &f, const Vec<T> &v ) {
      (*f.m).poisson_ratio += v[ 0 ];
  }
  static bool is_unknown(const std::string &s) { return (s=="dep"); }
  static unsigned num_in_vec_unknown(const std::string &s) { if ( s=="dep" )return 0; return 0;  }
  template<unsigned num_mat,unsigned inner=0> struct NodalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  template<unsigned num_mat,unsigned inner=0> struct GlobalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  
  static const unsigned nb_nodal_unknowns = 3;
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
    node.dep[1]=vecs[0][indice+1]; node.dep[0]=vecs[0][indice+0]; node.dep[2]=vecs[0][indice+2];
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
    node.dep[2]=vecs[0][indice+2]; node.dep[0]=vecs[0][indice+0]; node.dep[1]=vecs[0][indice+1];
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
    vecs[0][indice+2]=node.dep[2]; vecs[1][indice+2]=node.dep[2]; vecs[2][indice+2]=node.dep[2]; vecs[3][indice+2]=node.dep[2]; vecs[4][indice+2]=node.dep[2];
    vecs[0][indice+1]=node.dep[1]; vecs[1][indice+1]=node.dep[1]; vecs[2][indice+1]=node.dep[1]; vecs[3][indice+1]=node.dep[1]; vecs[4][indice+1]=node.dep[1];
    vecs[0][indice+0]=node.dep[0]; vecs[1][indice+0]=node.dep[0]; vecs[2][indice+0]=node.dep[0]; vecs[3][indice+0]=node.dep[0]; vecs[4][indice+0]=node.dep[0];
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    T reg0=vecs[1][indice+1]-vecs[0][indice+1]; T reg1=vecs[1][indice+0]-vecs[0][indice+0]; reg0=abs(reg0); reg1=abs(reg1); T reg2=vecs[1][indice+2]-vecs[0][indice+2];
    reg2=abs(reg2); reg1=max(reg0,reg1); return max(reg2,reg1);
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
    old_vec[indice+1]=vecs[1][indice+1]; old_vec[indice+2]=vecs[1][indice+2]; old_vec[indice+0]=vecs[1][indice+0];
  }
  
  static const unsigned nb_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_nodal_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};
#endif // ELASTICITY_DEP_3_NUM_0_CARAC_H
extern "C" void apply_on_elements_after_solve_0_elasticity_dep_Tetra_0( double * );
extern "C" void apply_on_elements_after_solve_1_elasticity_dep_Tetra_1( double * );
extern "C" void apply_on_elements_after_solve_2_elasticity_dep_Tetra_2( double * );
extern "C" void apply_on_elements_after_solve_3_elasticity_dep_Tetra_3( double * );
extern "C" void apply_on_elements_after_solve_4_elasticity_dep_Tetra_4( double * );
extern "C" void apply_on_elements_after_solve_5_elasticity_dep_Tetra_5( double * );
class Tetra;
template<unsigned A,class B,class C> class Node;
template<class A,class B,class C,class D,unsigned E> class Element;

// Carac for ...
template<class P_T_pos,class P_ND,class TED,unsigned nim,class TM,class T>
class CaracFormulationForElement<elasticity_dep,Element<Tetra,DefaultBehavior,Node<3,P_T_pos,P_ND>,TED,nim>,TM,T> {
public:
    template<unsigned num_mat,unsigned inner=0> struct ElemMatricesCarac {
        static const bool symm = true;
        static const bool herm = false;
        static const bool diag = false;
        static const bool linear = true;
    };
    static const unsigned order_integration = 0;
    static const bool has_elementary_matrix = true;
    static const bool has_skin_elementary_matrix = true;
    template<class TE,class TF, class TVEVE> static void after_solve(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; T reg1=elem.pos(1)[2]-elem.pos(0)[2]; T reg2=elem.pos(2)[1]-elem.pos(0)[1]; T reg3=elem.pos(1)[1]-elem.pos(0)[1]; T reg4=elem.pos(2)[2]-elem.pos(0)[2];
    reg0=reg0/(*f.m).elastic_modulus; T reg5=elem.pos(3)[1]-elem.pos(0)[1]; T reg6=elem.pos(3)[2]-elem.pos(0)[2]; T reg7=reg2*reg6; T reg8=reg3*reg6;
    T reg9=reg4*reg5; T reg10=reg1*reg5; T reg11=pow(reg0,2); T reg12=elem.pos(1)[0]-elem.pos(0)[0]; T reg13=(*f.m).poisson_ratio/(*f.m).elastic_modulus;
    T reg14=1.0/(*f.m).elastic_modulus; T reg15=reg1*reg2; T reg16=elem.pos(2)[0]-elem.pos(0)[0]; T reg17=reg3*reg4; reg10=reg8-reg10;
    reg0=reg0*reg11; reg9=reg7-reg9; reg7=reg14*reg0; reg8=elem.pos(3)[0]-elem.pos(0)[0]; T reg18=reg12*reg9;
    T reg19=reg16*reg10; reg15=reg17-reg15; reg0=reg13*reg0; reg17=reg1*reg8; T reg20=reg12*reg6;
    T reg21=reg13*reg7; T reg22=reg13*reg0; reg7=reg14*reg7; T reg23=reg3*reg8; reg19=reg18-reg19;
    reg18=reg8*reg15; T reg24=reg2*reg8; reg6=reg16*reg6; T reg25=reg12*reg5; reg8=reg4*reg8;
    reg5=reg16*reg5; reg17=reg20-reg17; reg3=reg3*reg16; reg23=reg25-reg23; reg4=reg12*reg4;
    reg2=reg12*reg2; reg16=reg1*reg16; reg8=reg6-reg8; reg18=reg19+reg18; reg1=reg14*reg11;
    reg11=reg13*reg11; reg0=reg14*reg0; reg21=reg22+reg21; reg7=reg7-reg22; reg24=reg5-reg24;
    reg17=reg17/reg18; reg23=reg23/reg18; reg24=reg24/reg18; reg10=reg10/reg18; reg9=reg9/reg18;
    reg8=reg8/reg18; reg5=vectors[0][indices[1]+0]-vectors[0][indices[0]+0]; reg6=vectors[0][indices[2]+0]-vectors[0][indices[0]+0]; reg12=reg13*reg1; reg19=vectors[0][indices[2]+1]-vectors[0][indices[0]+1];
    reg20=vectors[0][indices[1]+1]-vectors[0][indices[0]+1]; reg25=reg13*reg11; reg1=reg14*reg1; T reg26=vectors[0][indices[1]+2]-vectors[0][indices[0]+2]; reg0=reg22+reg0;
    reg22=vectors[0][indices[2]+2]-vectors[0][indices[0]+2]; T reg27=reg14*reg7; T reg28=reg13*reg21; reg16=reg4-reg16; reg3=reg2-reg3;
    reg16=reg16/reg18; reg2=reg22*reg10; reg4=reg26*reg9; reg15=reg15/reg18; T reg29=reg5*reg9;
    T reg30=reg6*reg10; reg12=reg25+reg12; T reg31=vectors[0][indices[3]+0]-vectors[0][indices[0]+0]; reg1=reg1-reg25; T reg32=reg20*reg24;
    T reg33=reg19*reg23; T reg34=reg19*reg17; T reg35=reg6*reg23; T reg36=reg20*reg8; reg20=reg20*reg9;
    T reg37=reg5*reg8; reg6=reg6*reg17; reg19=reg19*reg10; T reg38=reg13*reg0; reg28=reg27-reg28;
    reg18=reg3/reg18; reg3=reg26*reg8; reg27=vectors[0][indices[3]+2]-vectors[0][indices[0]+2]; T reg39=reg22*reg17; reg5=reg5*reg24;
    T reg40=vectors[0][indices[3]+1]-vectors[0][indices[0]+1]; reg11=reg14*reg11; reg12=reg13*reg12; reg38=reg28-reg38; reg1=reg14*reg1;
    reg14=reg25+reg11; reg28=reg40*reg15; reg19=reg20-reg19; reg20=reg31*reg16; T reg41=reg31*reg15;
    reg31=reg31*reg18; reg35=reg5-reg35; reg37=reg6-reg37; reg2=reg4-reg2; reg4=reg27*reg15;
    reg36=reg34-reg36; reg5=reg40*reg16; reg30=reg29-reg30; reg40=reg40*reg18; reg33=reg32-reg33;
    reg3=reg39-reg3; reg6=reg27*reg16; reg22=reg22*reg23; reg26=reg26*reg24; reg5=reg36-reg5;
    elem.epsilon[0][1]=reg5; reg27=reg27*reg18; reg21=reg21/reg38; reg7=reg7/reg38; reg22=reg26-reg22;
    reg20=reg37-reg20; reg0=reg0/reg38; reg28=reg19+reg28; reg41=reg30+reg41; elem.epsilon[0][0]=reg41;
    reg35=reg31+reg35; reg4=reg2+reg4; reg14=reg13*reg14; reg12=reg1-reg12; reg6=reg3-reg6;
    reg33=reg40+reg33; reg14=reg12-reg14; reg6=reg33+reg6; reg22=reg27+reg22; elem.epsilon[0][2]=reg22;
    reg1=reg41*reg21; reg2=reg5*reg7; reg3=reg5*reg21; reg12=reg5*reg0; reg4=reg35+reg4;
    reg13=reg41*reg7; reg28=reg20+reg28; reg3=reg13+reg3; reg38=reg14/reg38; reg13=reg22*reg0;
    reg2=reg1+reg2; reg12=reg1+reg12; reg1=reg22*reg7; reg28=0.5*reg28; elem.epsilon[0][3]=reg28;
    reg4=0.5*reg4; elem.epsilon[0][4]=reg4; reg6=0.5*reg6; elem.epsilon[0][5]=reg6; reg5=reg41+reg5;
    elem.sigma[0][0]=reg3+reg13; elem.sigma[0][1]=reg13+reg2; elem.sigma[0][2]=reg12+reg1; elem.sigma[0][3]=reg28*reg38; elem.sigma[0][4]=reg4*reg38;
    elem.sigma[0][5]=reg6*reg38; elem.tr_epsilon=reg22+reg5;
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_2(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_3(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_4(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_5(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_6(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
  
  static const unsigned nb_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};

// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=var_inter[0]-0.5; T reg1=var_inter[0]-0.16666666666666665741; T reg2=var_inter[0]-0.25; T reg3=1+(*f.m).poisson_ratio; T reg4=reg1*reg0;
    reg0=reg2*reg0; reg3=reg3/(*f.m).elastic_modulus; T reg5=elem.pos(1)[1]-elem.pos(0)[1]; T reg6=elem.pos(1)[2]-elem.pos(0)[2]; T reg7=elem.pos(2)[1]-elem.pos(0)[1];
    T reg8=elem.pos(2)[2]-elem.pos(0)[2]; T reg9=elem.pos(3)[1]-elem.pos(0)[1]; T reg10=elem.pos(3)[2]-elem.pos(0)[2]; T reg11=var_inter[1]-0.16666666666666665741; reg4=reg4/0.020833333333333335646;
    T reg12=var_inter[1]-0.25; reg0=reg0/0.027777777777777783175; reg1=reg2*reg1; reg2=pow(reg3,2); T reg13=(*f.m).poisson_ratio/(*f.m).elastic_modulus;
    reg1=reg1/0.083333333333333342585; reg3=reg3*reg2; T reg14=reg7*reg10; T reg15=reg5*reg10; T reg16=reg8*reg9;
    reg0=reg0*reg12; T reg17=reg6*reg9; reg4=reg4*reg11; T reg18=var_inter[1]-0.5; T reg19=1.0/(*f.m).elastic_modulus;
    T reg20=reg6*reg7; T reg21=reg19*reg2; T reg22=elem.pos(1)[0]-elem.pos(0)[0]; T reg23=elem.pos(2)[0]-elem.pos(0)[0]; T reg24=reg5*reg8;
    T reg25=reg13*reg3; reg2=reg13*reg2; reg3=reg19*reg3; reg17=reg15-reg17; reg16=reg14-reg16;
    reg1=reg12*reg1; reg12=reg18*reg0; reg4=reg18*reg4; reg14=reg13*reg21; reg1=reg18*reg1;
    reg21=reg19*reg21; reg15=elem.pos(3)[0]-elem.pos(0)[0]; reg18=var_inter[2]-0.25; reg12=reg12/0.027777777777777783175; T reg26=reg19*reg3;
    T reg27=reg13*reg25; T reg28=reg22*reg16; reg3=reg13*reg3; T reg29=var_inter[2]-0.16666666666666665741; T reg30=reg23*reg17;
    T reg31=reg13*reg2; reg20=reg24-reg20; reg4=reg4/0.020833333333333335646; reg30=reg28-reg30; reg12=reg12*reg18;
    reg24=reg23*reg10; reg1=reg1/0.027777777777777783175; reg28=reg8*reg15; T reg32=reg15*reg20; reg25=reg19*reg25;
    reg3=reg27+reg3; T reg33=reg5*reg15; reg0=reg11*reg0; reg11=reg6*reg15; T reg34=reg22*reg9;
    reg26=reg26-reg27; T reg35=reg4*reg29; T reg36=var_inter[2]-0.5; T reg37=reg7*reg15; T reg38=reg22*reg10;
    reg14=reg31+reg14; T reg39=reg23*reg9; reg21=reg21-reg31; reg2=reg19*reg2; T reg40=reg22*reg8;
    T reg41=reg6*reg23; reg37=reg39-reg37; reg33=reg34-reg33; reg28=reg24-reg28; reg24=reg22*reg7;
    reg11=reg38-reg11; reg25=reg27+reg25; reg0=reg0/0.083333333333333342585; reg21=reg19*reg21; reg19=reg19*reg26;
    reg35=reg35*reg36; reg27=reg31+reg2; reg34=reg13*reg3; reg14=reg13*reg14; reg1=reg18*reg1;
    reg38=reg5*reg23; reg39=reg36*reg12; reg32=reg30+reg32; reg35=reg35/0.020833333333333335646; reg38=reg24-reg38;
    reg24=reg13*reg25; reg34=reg19-reg34; reg41=reg40-reg41; reg33=reg33/reg32; reg11=reg11/reg32;
    reg0=reg18*reg0; reg17=reg17/reg32; reg37=reg37/reg32; reg28=reg28/reg32; reg16=reg16/reg32;
    reg39=reg39/0.027777777777777783175; reg1=reg36*reg1; reg27=reg13*reg27; reg14=reg21-reg14; reg13=reg35*elem.proute[0](1,1);
    reg18=reg39*elem.proute[1](1,1); reg19=reg28-reg11; reg21=reg33-reg37; reg24=reg34-reg24; reg0=reg36*reg0;
    reg30=reg17-reg16; reg27=reg14-reg27; reg1=reg1/0.027777777777777783175; reg38=reg38/reg32; reg41=reg41/reg32;
    reg20=reg20/reg32; reg30=reg30-reg20; reg14=0.5*reg41; reg27=reg27/reg24; reg19=reg41+reg19;
    reg34=0.5*reg17; reg36=0.5*reg11; reg21=reg21-reg38; reg40=0.5*reg16; T reg42=0.5*reg28;
    T reg43=0.5*reg20; reg12=reg29*reg12; reg0=reg0/0.027777777777777783175; reg13=reg18-reg13; reg18=reg1*elem.proute[2](1,1);
    reg29=0.5*reg21; reg12=reg12/0.083333333333333342585; T reg44=0.5*reg19; T reg45=reg27*reg40; T reg46=reg27*reg43;
    reg18=reg13+reg18; reg13=reg0*elem.proute[3](1,1); T reg47=reg27*reg34; T reg48=reg27*reg36; T reg49=0.5*reg30;
    T reg50=0.5*reg38; T reg51=reg27*reg42; T reg52=reg27*reg14; T reg53=0.5*reg33; T reg54=0.5*reg37;
    reg26=reg26/reg24; T reg55=1-var_inter[0]; T reg56=reg27*reg54; T reg57=reg27*reg49; reg46=2*reg46;
    T reg58=2*reg51; T reg59=reg27*reg50; T reg60=2*reg52; T reg61=reg20*reg26; T reg62=reg16*reg26;
    T reg63=2*reg47; reg25=reg25/reg24; reg24=reg3/reg24; reg3=reg17*reg26; T reg64=reg37*reg26;
    T reg65=reg41*reg26; T reg66=reg33*reg26; T reg67=reg12*elem.proute[4](1,1); reg13=reg18+reg13; reg45=2*reg45;
    reg18=reg38*reg26; T reg68=reg11*reg26; reg48=2*reg48; T reg69=reg27*reg44; T reg70=reg27*reg53;
    T reg71=reg28*reg26; T reg72=reg27*reg29; reg55=reg55-var_inter[1]; T reg73=reg48*reg14; T reg74=reg11*reg24;
    T reg75=reg58*reg36; T reg76=reg17*reg62; T reg77=reg20*reg3; T reg78=2*reg70; T reg79=reg26*reg21;
    T reg80=reg28*reg25; T reg81=reg11*reg25; T reg82=reg20*reg24; T reg83=reg41*reg25; T reg84=reg17*reg24;
    T reg85=reg16*reg3; T reg86=reg42*reg48; T reg87=reg41*reg68; T reg88=reg63*reg43; T reg89=reg16*reg24;
    T reg90=reg38*reg66; T reg91=reg26*reg19; T reg92=reg40*reg63; T reg93=reg28*reg68; T reg94=reg24*reg30;
    T reg95=reg38*reg25; T reg96=reg41*reg24; reg59=2*reg59; T reg97=reg37*reg66; T reg98=reg33*reg25;
    T reg99=reg11*reg65; T reg100=reg33*reg18; T reg101=reg34*reg46; reg72=2*reg72; reg57=2*reg57;
    reg69=2*reg69; T reg102=reg25*reg21; T reg103=reg26*reg30; T reg104=reg45*reg34; T reg105=reg11*reg71;
    reg56=2*reg56; reg67=reg13+reg67; reg13=reg37*reg25; T reg106=reg33*reg64; T reg107=reg36*reg60;
    T reg108=reg17*reg61; T reg109=reg28*reg24; reg87=reg88+reg87; T reg110=reg38*reg79; T reg111=reg16*reg61;
    T reg112=reg42*reg60; T reg113=reg33*reg94; T reg114=reg99+reg101; T reg115=reg16*reg96; T reg116=reg42*reg46;
    T reg117=reg21*reg79; T reg118=reg57*reg40; T reg119=reg28*reg91; T reg120=reg58*reg50; T reg121=reg41*reg13;
    T reg122=reg56*reg34; T reg123=reg25*reg19; T reg124=reg58*reg40; T reg125=reg20*reg62; T reg126=reg58*reg14;
    T reg127=reg41*reg71; T reg128=reg40*reg45; T reg129=reg28*reg71; T reg130=reg45*reg43; T reg131=reg28*reg13;
    T reg132=reg38*reg80; T reg133=reg58*reg54; T reg134=reg21*reg66; T reg135=reg33*reg89; T reg136=reg21*reg84;
    T reg137=reg60*reg50; T reg138=reg33*reg79; T reg139=reg21*reg18; T reg140=reg41*reg95; T reg141=reg16*reg103;
    T reg142=reg69*reg42; T reg143=reg41*reg65; T reg144=reg43*reg46; T reg145=reg21*reg64; T reg146=reg16*reg109;
    T reg147=reg33*reg82; T reg148=reg16*reg62; T reg149=reg42*reg58; T reg150=reg41*reg82; T reg151=reg42*reg45;
    T reg152=reg49*reg78; T reg153=reg60*reg43; T reg154=reg34*reg59; T reg155=reg72*reg34; T reg156=reg85+reg86;
    T reg157=reg54*reg78; T reg158=reg33*reg66; T reg159=reg16*reg98; T reg160=reg54*reg63; T reg161=reg92+reg97;
    T reg162=reg14*reg60; T reg163=reg20*reg61; T reg164=reg37*reg83; T reg165=reg42*reg59; T reg166=reg63*reg50;
    T reg167=reg37*reg18; T reg168=reg20*reg98; T reg169=reg69*reg36; T reg170=reg17*reg103; T reg171=reg17*reg102;
    T reg172=reg57*reg34; T reg173=reg11*reg91; T reg174=reg53*reg46; T reg175=reg57*reg53; T reg176=reg17*reg95;
    T reg177=reg20*reg109; reg76=reg75+reg76; T reg178=reg56*reg53; T reg179=reg53*reg59; reg108=reg107+reg108;
    T reg180=reg78*reg50; T reg181=reg77+reg73; reg106=reg104+reg106; T reg182=reg45*reg14; T reg183=reg17*reg74;
    T reg184=reg36*reg63; T reg185=reg17*reg13; T reg186=reg45*reg53; T reg187=reg36*reg48; T reg188=reg17*reg3;
    T reg189=reg41*reg89; T reg190=reg58*reg43; reg100=reg101+reg100; reg93=reg92+reg93; reg101=reg40*reg60;
    T reg191=reg48*reg53; T reg192=reg28*reg82; T reg193=reg40*reg46; T reg194=reg28*reg65; T reg195=reg41*reg91;
    T reg196=reg28*reg95; T reg197=reg11*reg98; T reg198=reg54*reg60; T reg199=reg57*reg43; reg79=reg37*reg79;
    T reg200=reg37*reg80; T reg201=reg34*reg63; T reg202=reg36*reg78; T reg203=reg42*reg56; T reg204=reg11*reg68;
    T reg205=reg37*reg64; T reg206=reg14*reg46; T reg207=reg20*reg96; T reg208=reg37*reg84; T reg209=reg20*reg103;
    T reg210=reg48*reg34; T reg211=reg40*reg78; T reg212=reg11*reg84; T reg213=reg69*reg14; reg104=reg105+reg104;
    T reg214=reg33*reg81; T reg215=reg19*reg65; T reg216=reg28*reg89; T reg217=reg24*reg19; reg64=reg38*reg64;
    reg62=reg30*reg62; T reg218=reg44*reg58; T reg219=reg30*reg3; T reg220=reg49*reg63; T reg221=reg44*reg48;
    reg68=reg19*reg68; T reg222=reg38*reg84; T reg223=reg78*reg43; reg18=reg38*reg18; T reg224=reg30*reg98;
    T reg225=reg29*reg63; reg61=reg30*reg61; T reg226=reg44*reg60; T reg227=reg14*reg59; T reg228=reg49*reg45;
    T reg229=reg19*reg71; T reg230=reg38*reg83; reg91=reg19*reg91; T reg231=reg88+reg90; T reg232=reg49*reg57;
    T reg233=reg67+(*f.m).f_vol[1]; T reg234=reg67+(*f.m).f_vol[0]; T reg235=reg49*reg46; T reg236=reg55-var_inter[2]; reg67=reg67+(*f.m).f_vol[2];
    T reg237=reg44*reg69; reg103=reg30*reg103; T reg238=reg56*reg14; T reg239=reg44*reg46; reg163=reg163+reg162;
    T reg240=reg50*reg59; T reg241=reg42*reg78; T reg242=reg37*reg81; T reg243=reg208+reg211; reg61=reg61-reg226;
    T reg244=reg29*reg59; T reg245=reg30*reg96; reg227=reg230+reg227; reg205=reg128+reg205; reg206=reg207+reg206;
    reg203=reg200+reg203; reg106=reg75+reg106; T reg246=reg17*reg217; T reg247=reg44*reg63; T reg248=reg57*reg36;
    T reg249=reg63*reg14; T reg250=reg72*reg53; reg170=reg169-reg170; T reg251=var_inter[1]*reg234; reg18=reg144+reg18;
    T reg252=reg201+reg158; reg167=reg193+reg167; T reg253=reg56*reg36; T reg254=reg33*reg80; T reg255=reg168+reg166;
    reg165=reg164+reg165; T reg256=reg224+reg225; T reg257=reg40*reg59; T reg258=reg37*reg82; reg86=reg86+reg161;
    reg192=reg101+reg192; T reg259=reg59*reg43; T reg260=reg19*reg94; T reg261=reg41*reg102; T reg262=reg69*reg50;
    T reg263=reg54*reg48; T reg264=reg28*reg98; T reg265=reg157+reg93; T reg266=reg69*reg49; T reg267=reg38*reg82;
    T reg268=reg78*reg34; T reg269=reg28*reg84; T reg270=reg40*reg48; reg189=reg190+reg189; T reg271=reg131+reg133;
    reg91=reg91+reg232; reg128=reg128+reg129; T reg272=reg20*reg95; reg214=reg202+reg214; T reg273=reg56*reg40;
    T reg274=reg37*reg89; T reg275=reg50*reg46; reg79=reg118+reg79; T reg276=reg69*reg43; T reg277=reg72*reg42;
    T reg278=reg37*reg123; T reg279=reg41*reg94; T reg280=var_inter[2]*reg233; T reg281=var_inter[0]*reg67; T reg282=reg37*reg94;
    T reg283=reg33*reg84; T reg284=reg196+reg198; T reg285=reg30*reg95; T reg286=reg29*reg46; reg195=reg199-reg195;
    reg193=reg193+reg194; T reg287=reg29*reg57; reg209=reg209-reg213; T reg288=reg58*reg53; T reg289=reg11*reg13;
    T reg290=reg72*reg50; T reg291=reg178+reg104; T reg292=reg58*reg34; T reg293=reg11*reg89; T reg294=reg20*reg217;
    T reg295=reg69*reg53; T reg296=reg11*reg102; T reg297=reg57*reg14; reg173=reg173-reg172; T reg298=reg72*reg36;
    T reg299=reg33*reg123; T reg300=reg20*reg102; T reg301=reg69*reg34; T reg302=var_inter[1]*reg233; T reg303=var_inter[1]*reg67;
    T reg304=reg33*reg83; T reg305=reg53*reg60; T reg306=reg11*reg95; T reg307=reg179+reg114; reg103=reg103+reg237;
    T reg308=reg29*reg72; T reg309=reg34*reg60; T reg310=reg11*reg82; reg100=reg107+reg100; reg155=reg113+reg155;
    reg191=reg197+reg191; reg154=reg147+reg154; reg113=reg30*reg217; reg147=var_inter[2]*reg234; reg204=reg204+reg201;
    T reg311=reg44*reg57; reg210=reg212+reg210; T reg312=reg30*reg102; T reg313=reg187+reg188; T reg314=reg30*reg13;
    T reg315=reg29*reg45; reg186=reg185+reg186; T reg316=reg236*reg234; T reg317=reg17*reg109; T reg318=reg45*reg36;
    reg138=reg172+reg138; reg172=reg36*reg59; T reg319=reg221-reg219; reg178=reg76+reg178; T reg320=reg236*reg233;
    T reg321=reg29*reg78; T reg322=reg181+reg180; reg122=reg135+reg122; reg175=reg171+reg175; reg135=reg30*reg74;
    T reg323=reg20*reg74; T reg324=reg11*reg94; T reg325=reg57*reg50; reg125=reg125+reg126; reg174=reg176+reg174;
    reg62=reg62-reg218; T reg326=reg29*reg56; T reg327=reg56*reg50; T reg328=reg17*reg96; T reg329=reg36*reg46;
    reg179=reg108+reg179; T reg330=reg30*reg109; T reg331=reg44*reg45; reg182=reg177+reg182; T reg332=reg53*reg63;
    T reg333=reg17*reg98; reg183=reg184+reg183; T reg334=reg20*reg13; T reg335=reg45*reg50; T reg336=reg53*reg78;
    reg150=reg153+reg150; T reg337=reg54*reg56; reg148=reg148+reg149; T reg338=reg57*reg54; T reg339=reg16*reg102;
    reg68=reg68-reg220; reg57=reg57*reg42; reg217=reg16*reg217; reg144=reg144+reg143; T reg340=reg72*reg54;
    reg141=reg141-reg142; T reg341=var_inter[0]*reg234; reg139=reg235+reg139; T reg342=reg29*reg48; T reg343=reg19*reg98;
    T reg344=reg140+reg137; T reg345=reg44*reg59; reg111=reg111+reg112; T reg346=reg228-reg229; T reg347=reg38*reg81;
    T reg348=reg159+reg160; T reg349=reg29*reg58; T reg350=reg180+reg87; T reg351=reg42*reg63; reg74=reg16*reg74;
    T reg352=reg41*reg98; T reg353=reg156+reg157; T reg354=reg19*reg13; T reg355=reg222+reg223; T reg356=reg48*reg50;
    reg45=reg54*reg45; reg13=reg16*reg13; T reg357=reg19*reg84; reg151=reg146+reg151; T reg358=reg49*reg48;
    T reg359=reg21*reg80; reg216=reg216+reg124; T reg360=reg49*reg56; T reg361=reg21*reg89; reg110=reg199+reg110;
    reg117=reg232+reg117; reg235=reg235-reg215; reg199=reg38*reg89; reg232=reg44*reg72; T reg362=reg21*reg123;
    T reg363=reg56*reg43; T reg364=reg72*reg49; T reg365=reg21*reg94; T reg366=reg236*reg67; reg238=reg132+reg238;
    T reg367=reg19*reg95; T reg368=reg29*reg60; T reg369=reg21*reg83; reg64=reg130+reg64; T reg370=reg49*reg59;
    T reg371=reg21*reg82; T reg372=var_inter[2]*reg67; T reg373=reg220+reg134; reg82=reg19*reg82; T reg374=reg38*reg94;
    T reg375=reg72*reg43; T reg376=reg44*reg78; reg81=reg21*reg81; T reg377=reg49*reg60; T reg378=reg72*reg40;
    T reg379=reg136+reg152; reg123=reg38*reg123; reg145=reg228+reg145; reg72=reg72*reg14; reg56=reg44*reg56;
    reg116=reg115+reg116; reg228=reg41*reg84; reg95=reg16*reg95; reg46=reg54*reg46; reg48=reg48*reg43;
    T reg380=var_inter[0]*reg233; T reg381=reg69*reg40; reg94=reg28*reg94; T reg382=reg121+reg120; reg119=reg118-reg119;
    reg118=reg49*reg58; reg89=reg19*reg89; T reg383=reg28*reg102; T reg384=reg69*reg54; reg102=reg19*reg102;
    reg130=reg130+reg127; reg69=reg29*reg69; reg73=reg73+reg231; reg59=reg54*reg59; T reg385=reg78*reg14;
    reg293=reg293+reg292; reg325=reg300+reg325; reg287=reg312+reg287; reg119=reg340+reg119; reg300=reg32*reg291;
    reg209=reg209+reg290; reg312=reg32*reg348; reg262=reg262-reg261; reg289=reg289+reg288; reg375=reg374+reg375;
    reg374=reg32*reg379; T reg386=reg32*reg265; reg82=reg82-reg377; T reg387=reg32*reg210; reg147=(*f.m).density*reg147;
    reg311=reg113+reg311; reg204=reg336+reg204; reg273=reg274+reg273; reg145=reg145-reg218; reg346=reg326+reg346;
    reg113=reg32*reg238; reg329=reg329+reg328; reg125=reg125+reg327; reg342=reg342-reg343; reg286=reg285+reg286;
    reg345=reg345-reg369; reg259=reg267+reg259; reg267=reg32*reg174; reg195=reg290+reg195; reg274=reg32*reg344;
    reg302=(*f.m).density*reg302; reg370=reg371+reg370; reg301=reg324-reg301; reg285=reg32*reg192; reg290=reg32*reg382;
    reg372=(*f.m).density*reg372; reg173=reg173-reg250; reg297=reg294-reg297; reg221=reg221-reg373; reg89=reg89-reg118;
    reg295=reg296-reg295; reg205=reg149+reg205; reg263=reg264+reg263; reg81=reg81-reg376; reg316=(*f.m).density*reg316;
    reg294=reg32*reg271; reg320=(*f.m).density*reg320; reg232=reg362+reg232; reg138=reg169-reg138; reg169=reg32*reg203;
    reg296=reg32*reg216; reg235=reg244+reg235; reg111=reg111+reg59; reg324=reg32*reg122; reg187=reg187+reg252;
    reg363=reg199+reg363; reg364=reg365+reg364; reg253=reg253+reg254; reg91=reg308+reg91; reg366=(*f.m).density*reg366;
    reg128=reg337+reg128; reg199=reg32*reg106; reg362=reg32*reg214; reg367=reg367-reg368; reg365=reg32*reg73;
    reg371=reg283+reg268; T reg388=reg32*reg191; T reg389=reg32*reg100; reg266=reg260+reg266; reg72=reg123-reg72;
    reg56=reg56-reg359; reg310=reg310+reg309; reg308=reg103+reg308; reg103=reg32*reg206; reg384=reg384-reg383;
    reg123=reg32*reg307; reg172=reg172+reg304; reg360=reg361+reg360; reg306=reg306+reg305; reg270=reg270+reg269;
    reg303=(*f.m).density*reg303; reg130=reg327+reg130; reg213=reg110-reg213; reg117=reg237+reg117; reg110=reg32*reg155;
    reg237=reg32*reg154; reg102=reg69+reg102; reg69=reg32*reg189; reg299=reg298-reg299; reg135=reg135-reg247;
    reg260=reg32*reg151; reg250=reg170-reg250; reg323=reg323+reg249; reg279=reg276-reg279; reg282=reg378+reg282;
    reg358=reg358-reg357; reg280=(*f.m).density*reg280; reg246=reg248-reg246; reg337=reg148+reg337; reg148=reg32*reg243;
    reg281=(*f.m).density*reg281; reg170=reg32*reg175; reg248=reg32*reg322; reg276=reg32*reg150; reg18=reg162+reg18;
    reg319=reg319-reg321; reg338=reg339+reg338; reg298=reg32*reg178; reg46=reg95+reg46; reg347=reg347+reg385;
    reg57=reg217-reg57; reg74=reg74+reg351; reg242=reg242+reg241; reg275=reg272+reg275; reg142=reg79-reg142;
    reg79=reg32*reg350; reg95=reg32*reg353; reg217=reg32*reg86; reg272=reg32*reg227; reg327=reg32*reg256;
    reg339=reg32*reg116; reg257=reg258+reg257; reg258=reg32*reg255; reg354=reg354-reg349; reg361=reg32*reg355;
    reg378=reg32*reg165; reg277=reg278-reg277; reg48=reg48+reg228; reg356=reg352+reg356; reg45=reg13+reg45;
    reg167=reg112+reg167; reg163=reg163+reg240; reg239=reg239-reg245; reg251=(*f.m).density*reg251; reg144=reg240+reg144;
    reg340=reg141+reg340; reg313=reg313+reg336; reg380=(*f.m).density*reg380; reg68=reg68-reg321; reg13=reg32*reg183;
    reg141=reg32*reg182; reg341=(*f.m).density*reg341; reg240=reg333+reg332; reg331=reg331-reg330; reg64=reg126+reg64;
    reg139=reg139-reg226; reg244=reg61+reg244; reg61=reg32*reg179; reg326=reg62+reg326; reg193=reg59+reg193;
    reg94=reg381-reg94; reg318=reg318+reg317; reg315=reg314+reg315; reg59=reg32*reg284; reg62=reg32*reg186;
    reg335=reg334+reg335; reg262=reg32*reg262; reg297=reg32*reg297; reg278=ponderation*reg361; reg375=reg32*reg375;
    reg187=reg32*reg187; reg144=reg32*reg144; reg314=ponderation*reg113; reg334=ponderation*reg274; reg381=ponderation*reg258;
    T reg390=reg32*reg320; reg195=reg32*reg195; reg275=reg32*reg275; T reg391=ponderation*reg69; T reg392=reg32*reg316;
    T reg393=ponderation*reg272; T reg394=ponderation*reg362; T reg395=reg32*reg380; T reg396=reg32*reg281; reg363=reg32*reg363;
    T reg397=reg32*reg147; reg279=reg32*reg279; T reg398=ponderation*reg103; T reg399=ponderation*reg79; T reg400=ponderation*reg290;
    reg125=reg32*reg125; T reg401=reg32*reg303; T reg402=reg32*reg280; T reg403=reg32*reg372; T reg404=ponderation*reg248;
    reg209=reg32*reg209; T reg405=ponderation*reg365; T reg406=reg32*reg251; reg259=reg32*reg259; reg172=reg32*reg172;
    reg18=reg32*reg18; reg72=reg32*reg72; T reg407=reg32*reg302; reg325=reg32*reg325; T reg408=ponderation*reg276;
    T reg409=ponderation*reg237; reg130=reg32*reg130; T reg410=reg32*reg366; T reg411=reg32*reg341; reg163=reg32*reg163;
    reg347=reg32*reg347; reg64=reg32*reg64; reg356=reg32*reg356; T reg412=ponderation*reg389; reg323=reg32*reg323;
    reg213=reg32*reg213; T reg413=ponderation*reg141; reg335=reg32*reg335; reg48=reg32*reg48; T reg414=ponderation*reg386;
    reg263=reg32*reg263; reg235=reg32*reg235; T reg415=ponderation*reg285; reg82=reg32*reg82; reg193=reg32*reg193;
    T reg416=ponderation*reg59; reg342=reg32*reg342; reg282=reg32*reg282; reg277=reg32*reg277; reg68=reg32*reg68;
    reg142=reg32*reg142; reg273=reg32*reg273; reg358=reg32*reg358; T reg417=ponderation*reg169; reg354=reg32*reg354;
    reg205=reg32*reg205; T reg418=ponderation*reg148; reg346=reg32*reg346; reg242=reg32*reg242; T reg419=ponderation*reg217;
    reg89=reg32*reg89; reg257=reg32*reg257; T reg420=ponderation*reg378; reg167=reg32*reg167; reg102=reg32*reg102;
    reg250=reg32*reg250; reg91=reg32*reg91; reg246=reg32*reg246; T reg421=ponderation*reg170; reg266=reg32*reg266;
    T reg422=ponderation*reg298; reg139=reg32*reg139; reg340=reg32*reg340; reg345=reg32*reg345; reg57=reg32*reg57;
    reg370=reg32*reg370; reg338=reg32*reg338; reg337=reg32*reg337; T reg423=ponderation*reg260; reg221=reg32*reg221;
    reg45=reg32*reg45; reg81=reg32*reg81; T reg424=ponderation*reg95; T reg425=ponderation*reg374; reg74=reg32*reg74;
    T reg426=ponderation*reg312; reg145=reg32*reg145; reg111=reg32*reg111; reg56=reg32*reg56; T reg427=ponderation*reg339;
    reg46=reg32*reg46; reg360=reg32*reg360; reg94=reg32*reg94; reg119=reg32*reg119; reg117=reg32*reg117;
    reg384=reg32*reg384; T reg428=ponderation*reg296; reg232=reg32*reg232; reg128=reg32*reg128; reg364=reg32*reg364;
    T reg429=ponderation*reg294; reg270=reg32*reg270; reg367=reg32*reg367; T reg430=ponderation*reg327; T reg431=ponderation*reg324;
    reg329=reg32*reg329; T reg432=ponderation*reg387; reg311=reg32*reg311; T reg433=ponderation*reg267; reg135=reg32*reg135;
    reg138=reg32*reg138; reg301=reg32*reg301; T reg434=ponderation*reg123; reg289=reg32*reg289; reg319=reg32*reg319;
    reg299=reg32*reg299; reg173=reg32*reg173; reg295=reg32*reg295; T reg435=ponderation*reg110; reg287=reg32*reg287;
    T reg436=ponderation*reg300; reg293=reg32*reg293; reg315=reg32*reg315; reg306=reg32*reg306; reg318=reg32*reg318;
    reg286=reg32*reg286; T reg437=ponderation*reg388; T reg438=ponderation*reg62; T reg439=reg32*reg371; reg308=reg32*reg308;
    T reg440=ponderation*reg199; reg313=reg32*reg313; reg239=reg32*reg239; reg310=reg32*reg310; T reg441=ponderation*reg13;
    reg326=reg32*reg326; reg244=reg32*reg244; reg204=reg32*reg204; reg240=reg32*reg240; reg253=reg32*reg253;
    reg331=reg32*reg331; T reg442=ponderation*reg61; matrix(indices[0]+2,indices[0]+1)+=ponderation*reg232; matrix(indices[3]+2,indices[0]+1)+=ponderation*reg72; matrix(indices[0]+0,indices[0]+2)+=ponderation*reg287;
    reg72=ponderation*reg396; sollicitation[indices[1]+2]+=reg72; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg360; reg232=ponderation*reg395; sollicitation[indices[1]+1]+=reg232;
    matrix(indices[0]+2,indices[0]+2)+=ponderation*reg117; reg117=ponderation*reg406; sollicitation[indices[2]+0]+=reg117; matrix(indices[0]+2,indices[1]+1)+=ponderation*reg56; reg56=ponderation*reg407;
    sollicitation[indices[2]+1]+=reg56; matrix(indices[3]+2,indices[0]+0)+=ponderation*reg375; matrix(indices[0]+2,indices[1]+2)+=ponderation*reg145; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg311; reg145=ponderation*reg401;
    sollicitation[indices[2]+2]+=reg145; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg81; reg81=ponderation*reg397; sollicitation[indices[3]+0]+=reg81; matrix(indices[0]+2,indices[2]+2)+=ponderation*reg221;
    matrix(indices[3]+1,indices[3]+2)+=-reg334; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg308; reg221=ponderation*reg402; sollicitation[indices[3]+1]+=reg221; matrix(indices[0]+2,indices[3]+0)+=ponderation*reg370;
    matrix(indices[0]+2,indices[3]+1)+=ponderation*reg345; reg287=ponderation*reg403; sollicitation[indices[3]+2]+=reg287; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg319; matrix(indices[0]+1,indices[1]+2)+=ponderation*reg354;
    matrix(indices[0]+0,indices[2]+1)+=ponderation*reg135; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg346; matrix(indices[3]+2,indices[2]+0)+=-reg278; matrix(indices[3]+2,indices[3]+1)+=-reg393; matrix(indices[0]+2,indices[2]+0)+=-reg425;
    matrix(indices[0]+1,indices[1]+0)+=ponderation*reg89; matrix(indices[0]+0,indices[2]+2)+=-reg430; matrix(indices[3]+2,indices[2]+1)+=ponderation*reg347; matrix(indices[0]+1,indices[0]+2)+=ponderation*reg102; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg244;
    matrix(indices[0]+1,indices[0]+1)+=ponderation*reg91; matrix(indices[3]+2,indices[3]+0)+=ponderation*reg259; matrix(indices[0]+1,indices[0]+0)+=ponderation*reg266; matrix(indices[3]+2,indices[2]+2)+=-reg405; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg239;
    matrix(indices[0]+0,indices[3]+2)+=ponderation*reg286; matrix(indices[3]+2,indices[0]+2)+=ponderation*reg213; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg326; reg89=ponderation*reg411; sollicitation[indices[1]+0]+=reg89;
    matrix(indices[0]+2,indices[0]+0)+=ponderation*reg364; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg367; matrix(indices[3]+2,indices[1]+0)+=ponderation*reg363; reg91=ponderation*reg410; sollicitation[indices[0]+2]+=reg91;
    matrix(indices[0]+1,indices[3]+1)+=ponderation*reg235; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg331; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg82; reg82=ponderation*reg390; sollicitation[indices[0]+1]+=reg82;
    matrix(indices[3]+2,indices[1]+1)+=-reg314; reg102=ponderation*reg392; sollicitation[indices[0]+0]+=reg102; matrix(indices[0]+1,indices[2]+2)+=ponderation*reg342; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg315;
    matrix(indices[0]+1,indices[2]+1)+=ponderation*reg68; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg18; matrix(indices[3]+2,indices[1]+2)+=ponderation*reg64; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg358; matrix(indices[2]+1,indices[0]+1)+=ponderation*reg173;
    matrix(indices[2]+1,indices[0]+0)+=ponderation*reg301; matrix(indices[3]+0,indices[0]+1)+=ponderation*reg297; matrix(indices[2]+0,indices[3]+2)+=-reg433; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg329; matrix(indices[2]+0,indices[3]+0)+=-reg442;
    matrix(indices[3]+0,indices[1]+0)+=ponderation*reg125; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg240; matrix(indices[2]+0,indices[2]+1)+=-reg441; matrix(indices[3]+0,indices[1]+1)+=-reg413; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg313;
    matrix(indices[2]+0,indices[1]+2)+=-reg438; matrix(indices[3]+0,indices[1]+2)+=ponderation*reg335; matrix(indices[2]+0,indices[1]+1)+=ponderation*reg318; matrix(indices[2]+0,indices[1]+0)+=-reg422; matrix(indices[2]+0,indices[0]+2)+=-reg421;
    matrix(indices[2]+0,indices[0]+1)+=ponderation*reg246; matrix(indices[3]+0,indices[2]+0)+=-reg404; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg250; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg167; matrix(indices[3]+0,indices[2]+1)+=ponderation*reg323;
    matrix(indices[1]+2,indices[3]+1)+=-reg420; matrix(indices[1]+2,indices[3]+0)+=ponderation*reg257; matrix(indices[3]+0,indices[2]+2)+=-reg381; matrix(indices[2]+2,indices[2]+0)+=ponderation*reg439; matrix(indices[2]+2,indices[1]+2)+=-reg440;
    matrix(indices[2]+2,indices[1]+1)+=ponderation*reg253; matrix(indices[2]+2,indices[2]+1)+=-reg394; matrix(indices[2]+2,indices[1]+0)+=-reg431; matrix(indices[2]+2,indices[0]+2)+=ponderation*reg138; matrix(indices[2]+2,indices[2]+2)+=ponderation*reg187;
    matrix(indices[2]+2,indices[0]+1)+=ponderation*reg299; matrix(indices[2]+2,indices[0]+0)+=-reg435; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg306; matrix(indices[2]+2,indices[3]+0)+=-reg409; matrix(indices[2]+1,indices[3]+1)+=-reg434;
    matrix(indices[2]+2,indices[3]+1)+=ponderation*reg172; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg310; matrix(indices[2]+1,indices[2]+2)+=-reg437; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg204; matrix(indices[2]+2,indices[3]+2)+=-reg412;
    matrix(indices[2]+1,indices[2]+0)+=-reg432; matrix(indices[2]+1,indices[1]+2)+=ponderation*reg289; matrix(indices[2]+1,indices[1]+1)+=-reg436; matrix(indices[2]+1,indices[1]+0)+=ponderation*reg293; matrix(indices[3]+0,indices[0]+0)+=ponderation*reg209;
    matrix(indices[2]+1,indices[0]+2)+=ponderation*reg295; matrix(indices[3]+0,indices[0]+2)+=ponderation*reg325; matrix(indices[1]+1,indices[1]+0)+=-reg428; matrix(indices[1]+1,indices[0]+2)+=ponderation*reg384; matrix(indices[3]+1,indices[1]+1)+=ponderation*reg130;
    matrix(indices[1]+1,indices[0]+1)+=ponderation*reg119; matrix(indices[1]+1,indices[0]+0)+=ponderation*reg94; matrix(indices[1]+0,indices[3]+2)+=ponderation*reg46; matrix(indices[3]+1,indices[1]+2)+=-reg400; matrix(indices[1]+0,indices[3]+1)+=-reg427;
    matrix(indices[1]+0,indices[3]+0)+=ponderation*reg111; matrix(indices[3]+1,indices[2]+0)+=ponderation*reg48; matrix(indices[1]+0,indices[2]+2)+=-reg426; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg74; matrix(indices[1]+0,indices[2]+0)+=-reg424;
    matrix(indices[3]+1,indices[2]+1)+=-reg399; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg45; matrix(indices[1]+0,indices[1]+1)+=-reg423; matrix(indices[3]+1,indices[2]+2)+=ponderation*reg356; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg337;
    matrix(indices[1]+0,indices[0]+2)+=ponderation*reg338; matrix(indices[3]+1,indices[3]+0)+=-reg408; matrix(indices[1]+0,indices[0]+1)+=ponderation*reg57; matrix(indices[1]+0,indices[0]+0)+=ponderation*reg340; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg139;
    matrix(indices[3]+1,indices[3]+1)+=ponderation*reg144; matrix(indices[1]+2,indices[2]+2)+=-reg419; matrix(indices[1]+2,indices[2]+1)+=ponderation*reg242; matrix(indices[1]+2,indices[2]+0)+=-reg418; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg163;
    matrix(indices[1]+2,indices[1]+2)+=ponderation*reg205; matrix(indices[1]+2,indices[1]+1)+=-reg417; matrix(indices[1]+2,indices[1]+0)+=ponderation*reg273; matrix(indices[3]+0,indices[3]+1)+=-reg398; matrix(indices[1]+2,indices[0]+2)+=ponderation*reg142;
    matrix(indices[1]+2,indices[0]+1)+=ponderation*reg277; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg275; matrix(indices[1]+2,indices[0]+0)+=ponderation*reg282; matrix(indices[1]+1,indices[3]+2)+=-reg416; matrix(indices[3]+1,indices[0]+0)+=ponderation*reg279;
    matrix(indices[1]+1,indices[3]+1)+=ponderation*reg193; matrix(indices[1]+1,indices[3]+0)+=-reg415; matrix(indices[3]+1,indices[0]+1)+=ponderation*reg195; matrix(indices[1]+1,indices[2]+2)+=ponderation*reg263; matrix(indices[1]+1,indices[2]+1)+=-reg414;
    matrix(indices[3]+1,indices[0]+2)+=ponderation*reg262; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg270; matrix(indices[1]+1,indices[1]+2)+=-reg429; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg128; matrix(indices[3]+1,indices[1]+0)+=-reg391;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=var_inter[0]-0.16666666666666665741; T reg1=var_inter[0]-0.5; T reg2=var_inter[0]-0.25; T reg3=1+(*f.m).poisson_ratio; T reg4=reg0*reg1;
    reg3=reg3/(*f.m).elastic_modulus; reg1=reg2*reg1; T reg5=var_inter[1]-0.16666666666666665741; T reg6=elem.pos(2)[1]-elem.pos(0)[1]; T reg7=elem.pos(2)[2]-elem.pos(0)[2];
    T reg8=elem.pos(3)[1]-elem.pos(0)[1]; T reg9=elem.pos(3)[2]-elem.pos(0)[2]; T reg10=elem.pos(1)[1]-elem.pos(0)[1]; T reg11=elem.pos(1)[2]-elem.pos(0)[2]; reg0=reg2*reg0;
    reg1=reg1/0.027777777777777783175; reg2=var_inter[1]-0.25; reg4=reg4/0.020833333333333335646; T reg12=pow(reg3,2); T reg13=reg10*reg9;
    T reg14=reg7*reg8; reg0=reg0/0.083333333333333342585; T reg15=reg11*reg8; T reg16=reg6*reg9; reg1=reg1*reg2;
    T reg17=1.0/(*f.m).elastic_modulus; reg4=reg4*reg5; T reg18=var_inter[1]-0.5; reg3=reg3*reg12; T reg19=(*f.m).poisson_ratio/(*f.m).elastic_modulus;
    T reg20=elem.pos(2)[0]-elem.pos(0)[0]; T reg21=elem.pos(1)[0]-elem.pos(0)[0]; T reg22=reg19*reg12; reg12=reg17*reg12; T reg23=reg19*reg3;
    reg3=reg17*reg3; reg4=reg18*reg4; T reg24=reg18*reg1; T reg25=reg11*reg6; T reg26=reg10*reg7;
    reg15=reg13-reg15; reg0=reg2*reg0; reg14=reg16-reg14; reg2=elem.pos(3)[0]-elem.pos(0)[0]; reg25=reg26-reg25;
    reg13=reg20*reg15; reg16=reg21*reg14; reg26=reg17*reg3; T reg27=reg19*reg23; reg3=reg19*reg3;
    T reg28=reg17*reg12; T reg29=reg19*reg22; T reg30=var_inter[2]-0.16666666666666665741; reg4=reg4/0.020833333333333335646; T reg31=var_inter[2]-0.25;
    reg12=reg19*reg12; reg24=reg24/0.027777777777777783175; reg0=reg18*reg0; reg1=reg5*reg1; reg5=reg20*reg9;
    reg18=reg7*reg2; reg28=reg28-reg29; reg12=reg29+reg12; T reg32=reg2*reg25; T reg33=reg21*reg9;
    reg0=reg0/0.027777777777777783175; reg3=reg27+reg3; T reg34=var_inter[2]-0.5; T reg35=reg4*reg30; reg23=reg17*reg23;
    reg13=reg16-reg13; reg22=reg17*reg22; reg16=reg11*reg2; reg26=reg26-reg27; reg24=reg24*reg31;
    T reg36=reg11*reg20; T reg37=reg20*reg8; reg18=reg5-reg18; reg5=reg6*reg2; T reg38=reg21*reg7;
    T reg39=reg10*reg2; T reg40=reg21*reg8; reg16=reg33-reg16; reg28=reg17*reg28; reg33=reg29+reg22;
    reg23=reg27+reg23; reg17=reg17*reg26; reg35=reg35*reg34; reg27=reg19*reg3; reg12=reg19*reg12;
    reg1=reg1/0.083333333333333342585; reg0=reg31*reg0; reg32=reg13+reg32; reg13=reg34*reg24; T reg41=reg21*reg6;
    reg12=reg28-reg12; reg28=reg19*reg23; reg33=reg19*reg33; reg35=reg35/0.020833333333333335646; reg19=reg10*reg20;
    reg39=reg40-reg39; reg36=reg38-reg36; reg27=reg17-reg27; reg1=reg31*reg1; reg0=reg34*reg0;
    reg13=reg13/0.027777777777777783175; reg14=reg14/reg32; reg18=reg18/reg32; reg5=reg37-reg5; reg16=reg16/reg32;
    reg15=reg15/reg32; reg17=reg35*elem.proute[0](1,1); reg31=reg13*elem.proute[1](1,1); reg33=reg12-reg33; reg28=reg27-reg28;
    reg12=reg15-reg14; reg27=reg18-reg16; reg39=reg39/reg32; reg1=reg34*reg1; reg25=reg25/reg32;
    reg19=reg41-reg19; reg0=reg0/0.027777777777777783175; reg5=reg5/reg32; reg36=reg36/reg32; reg12=reg12-reg25;
    reg33=reg33/reg28; reg34=0.5*reg25; reg37=0.5*reg36; reg1=reg1/0.027777777777777783175; reg24=reg30*reg24;
    reg30=0.5*reg15; reg17=reg31-reg17; reg31=reg0*elem.proute[2](1,1); reg38=0.5*reg16; reg40=reg39-reg5;
    reg27=reg36+reg27; reg19=reg19/reg32; reg41=reg33*reg38; T reg42=0.5*reg39; T reg43=0.5*reg14;
    T reg44=0.5*reg18; T reg45=0.5*reg12; reg40=reg40-reg19; T reg46=reg33*reg30; T reg47=0.5*reg27;
    T reg48=reg33*reg37; T reg49=0.5*reg19; T reg50=reg33*reg34; reg26=reg26/reg28; reg24=reg24/0.083333333333333342585;
    reg31=reg17+reg31; reg17=reg1*elem.proute[3](1,1); T reg51=reg33*reg45; T reg52=reg33*reg44; T reg53=0.5*reg5;
    T reg54=reg36*reg26; T reg55=reg24*elem.proute[4](1,1); T reg56=reg33*reg43; T reg57=reg16*reg26; T reg58=reg15*reg26;
    reg17=reg31+reg17; reg41=2*reg41; reg31=reg33*reg42; T reg59=2*reg46; T reg60=reg25*reg26;
    T reg61=2*reg48; T reg62=1-var_inter[0]; T reg63=reg33*reg49; reg50=2*reg50; T reg64=0.5*reg40;
    T reg65=reg19*reg26; T reg66=reg33*reg47; reg3=reg3/reg28; T reg67=reg39*reg26; reg28=reg23/reg28;
    reg23=reg18*reg57; T reg68=reg43*reg59; T reg69=reg5*reg28; reg56=2*reg56; reg66=2*reg66;
    T reg70=reg30*reg50; T reg71=reg16*reg54; T reg72=reg26*reg12; T reg73=reg15*reg3; T reg74=reg18*reg3;
    T reg75=2*reg31; T reg76=reg16*reg3; T reg77=reg18*reg26; T reg78=reg39*reg28; T reg79=reg5*reg67;
    T reg80=reg36*reg28; reg62=reg62-var_inter[1]; T reg81=reg26*reg27; reg63=2*reg63; T reg82=reg19*reg28;
    T reg83=reg15*reg60; T reg84=reg38*reg61; T reg85=reg36*reg3; T reg86=reg5*reg26; T reg87=reg14*reg58;
    T reg88=reg44*reg41; reg51=2*reg51; T reg89=reg26*reg40; T reg90=reg14*reg26; reg55=reg17+reg55;
    reg17=2*reg52; T reg91=reg39*reg65; T reg92=reg25*reg3; T reg93=reg33*reg53; T reg94=reg33*reg64;
    T reg95=reg43*reg75; T reg96=reg18*reg77; T reg97=reg40*reg89; T reg98=reg14*reg3; T reg99=reg68+reg79;
    T reg100=reg5*reg80; T reg101=reg44*reg63; T reg102=reg5*reg65; T reg103=reg14*reg78; T reg104=reg45*reg51;
    T reg105=reg27*reg81; T reg106=reg53*reg75; T reg107=reg87+reg88; T reg108=reg14*reg90; T reg109=reg38*reg41;
    T reg110=reg40*reg86; T reg111=reg40*reg67; T reg112=reg14*reg74; T reg113=reg15*reg58; T reg114=reg17*reg53;
    T reg115=reg18*reg69; T reg116=reg18*reg28; T reg117=reg44*reg56; T reg118=reg38*reg59; T reg119=reg15*reg76;
    T reg120=reg45*reg59; T reg121=reg43*reg61; T reg122=reg27*reg54; reg23=reg68+reg23; T reg123=reg40*reg73;
    T reg124=reg18*reg92; T reg125=reg44*reg17; T reg126=reg45*reg75; T reg127=reg40*reg65; T reg128=reg43*reg50;
    T reg129=reg27*reg57; T reg130=reg45*reg50; T reg131=reg43*reg56; T reg132=reg44*reg50; T reg133=reg18*reg54;
    T reg134=reg18*reg82; T reg135=reg53*reg61; T reg136=reg5*reg86; T reg137=reg14*reg85; T reg138=reg45*reg56;
    T reg139=reg44*reg61; T reg140=reg14*reg60; T reg141=reg16*reg28; T reg142=reg27*reg77; T reg143=reg53*reg59;
    T reg144=reg5*reg73; T reg145=reg12*reg78; reg94=2*reg94; T reg146=reg36*reg54; T reg147=reg34*reg50;
    T reg148=reg16*reg57; T reg149=reg30*reg59; T reg150=reg16*reg78; T reg151=reg41*reg42; T reg152=reg3*reg27;
    T reg153=reg37*reg50; T reg154=reg47*reg41; T reg155=reg25*reg85; T reg156=reg12*reg58; T reg157=reg71+reg70;
    T reg158=reg28*reg40; T reg159=reg37*reg61; T reg160=reg39*reg67; T reg161=reg25*reg60; T reg162=reg39*reg92;
    T reg163=reg30*reg63; reg91=reg70+reg91; reg93=2*reg93; reg70=reg47*reg17; T reg164=reg12*reg90;
    reg65=reg19*reg65; reg83=reg84+reg83; T reg165=reg55+(*f.m).f_vol[2]; T reg166=reg42*reg63; T reg167=reg55+(*f.m).f_vol[1];
    T reg168=reg47*reg61; T reg169=reg62-var_inter[2]; reg60=reg12*reg60; reg55=reg55+(*f.m).f_vol[0]; T reg170=reg61*reg49;
    T reg171=reg47*reg66; T reg172=reg42*reg50; T reg173=reg15*reg82; T reg174=reg12*reg72; T reg175=reg64*reg59;
    T reg176=reg36*reg82; reg132=reg137+reg132; T reg177=reg40*reg92; reg91=reg84+reg91; T reg178=reg45*reg63;
    T reg179=reg14*reg82; T reg180=reg147+reg146; T reg181=reg53*reg63; T reg182=reg176+reg170; reg140=reg140+reg139;
    T reg183=var_inter[2]*reg55; T reg184=var_inter[2]*reg165; T reg185=reg103+reg143; T reg186=reg40*reg80; T reg187=reg47*reg63;
    reg161=reg161+reg159; T reg188=reg49*reg63; T reg189=reg44*reg59; T reg190=reg14*reg76; T reg191=reg107+reg106;
    reg108=reg108+reg125; T reg192=var_inter[0]*reg55; T reg193=reg53*reg93; reg153=reg155+reg153; T reg194=reg49*reg50;
    T reg195=reg53*reg56; reg127=reg130+reg127; T reg196=reg25*reg82; T reg197=reg14*reg69; reg117=reg112+reg117;
    T reg198=var_inter[2]*reg167; reg136=reg131+reg136; reg148=reg148+reg149; T reg199=var_inter[1]*reg167; reg172=reg173+reg172;
    T reg200=reg144+reg95; T reg201=reg5*reg141; T reg202=reg44*reg75; reg88=reg88+reg99; T reg203=reg5*reg92;
    T reg204=reg43*reg63; T reg205=reg15*reg85; reg101=reg100+reg101; T reg206=reg38*reg50; reg102=reg128+reg102;
    T reg207=var_inter[1]*reg55; T reg208=reg83+reg166; T reg209=reg109+reg113; T reg210=reg42*reg75; T reg211=reg42*reg59;
    reg119=reg118+reg119; T reg212=reg15*reg78; reg65=reg147+reg65; reg147=reg53*reg50; T reg213=var_inter[0]*reg167;
    T reg214=reg39*reg80; reg163=reg162+reg163; reg131=reg131+reg96; reg162=reg38*reg63; T reg215=reg115+reg114;
    T reg216=reg43*reg41; T reg217=reg18*reg73; T reg218=reg149+reg160; T reg219=var_inter[1]*reg165; T reg220=reg106+reg23;
    T reg221=reg18*reg78; T reg222=reg42*reg61; T reg223=reg16*reg82; reg166=reg166+reg157; T reg224=reg53*reg41;
    reg124=reg121+reg124; T reg225=reg30*reg61; T reg226=reg16*reg92; reg128=reg128+reg133; reg151=reg150+reg151;
    T reg227=reg134+reg135; T reg228=var_inter[0]*reg165; T reg229=reg64*reg66; T reg230=reg27*reg158; reg174=reg174+reg171;
    T reg231=reg27*reg98; T reg232=reg45*reg17; T reg233=reg169*reg55; T reg234=reg138-reg142; T reg235=reg64*reg17;
    T reg236=reg27*reg69; T reg237=reg169*reg167; T reg238=reg27*reg73; T reg239=reg45*reg41; reg129=reg129-reg120;
    T reg240=reg64*reg41; T reg241=reg27*reg78; T reg242=reg27*reg92; T reg243=reg45*reg61; reg130=reg130-reg122;
    T reg244=reg64*reg61; T reg245=reg27*reg82; T reg246=reg169*reg165; reg97=reg104+reg97; reg164=reg164-reg70;
    T reg247=reg64*reg93; T reg248=reg12*reg74; T reg249=reg47*reg56; T reg250=reg12*reg69; T reg251=reg64*reg56;
    T reg252=reg64*reg51; T reg253=reg12*reg158; T reg254=reg154-reg156; T reg255=reg64*reg75; T reg256=reg12*reg76;
    T reg257=reg47*reg59; T reg258=reg145+reg175; T reg259=reg47*reg51; T reg260=reg12*reg152; reg60=reg60-reg168;
    T reg261=reg64*reg63; T reg262=reg12*reg85; T reg263=reg47*reg50; reg82=reg12*reg82; reg50=reg64*reg50;
    reg104=reg105+reg104; reg105=reg64*reg94; T reg264=reg120+reg111; T reg265=reg47*reg75; T reg266=reg40*reg141;
    T reg267=reg123+reg126; reg110=reg138+reg110; reg138=reg47*reg93; T reg268=reg40*reg116; T reg269=reg45*reg93;
    T reg270=reg40*reg98; reg127=reg127-reg168; T reg271=reg32*reg119; reg263=reg263-reg262; reg209=reg209+reg210;
    reg50=reg82+reg50; reg207=(*f.m).density*reg207; reg194=reg196+reg194; reg102=reg139+reg102; reg104=reg105+reg104;
    reg82=reg32*reg101; reg105=reg174+reg105; reg192=(*f.m).density*reg192; reg204=reg203+reg204; reg110=reg110-reg70;
    reg230=reg229+reg230; reg97=reg171+reg97; reg171=reg32*reg88; reg180=reg188+reg180; reg201=reg201+reg202;
    reg231=reg231-reg232; reg174=reg32*reg200; reg233=(*f.m).density*reg233; reg108=reg108+reg193; reg237=(*f.m).density*reg237;
    reg136=reg125+reg136; reg234=reg247+reg234; reg198=(*f.m).density*reg198; reg228=(*f.m).density*reg228; reg196=reg32*reg182;
    reg203=reg32*reg227; reg138=reg138-reg268; reg236=reg236-reg235; reg229=reg32*reg191; reg162=reg162+reg214;
    reg154=reg154-reg264; T reg272=reg32*reg163; reg247=reg164+reg247; reg164=reg32*reg91; reg109=reg109+reg218;
    reg249=reg249-reg248; reg219=(*f.m).density*reg219; reg223=reg223+reg222; reg252=reg253+reg252; reg183=(*f.m).density*reg183;
    reg253=reg32*reg166; reg251=reg250+reg251; reg178=reg177+reg178; reg226=reg226+reg225; reg177=reg212+reg211;
    reg250=reg32*reg153; reg60=reg60+reg261; T reg273=reg32*reg267; T reg274=reg32*reg208; reg206=reg206+reg205;
    reg259=reg260+reg259; reg260=reg32*reg258; reg187=reg187-reg186; T reg275=reg32*reg172; reg199=(*f.m).density*reg199;
    reg256=reg256-reg257; reg148=reg210+reg148; reg188=reg161+reg188; reg254=reg254-reg255; reg161=reg32*reg151;
    reg266=reg266-reg265; reg130=reg261+reg130; reg261=reg32*reg132; reg147=reg179+reg147; reg129=reg129-reg255;
    reg216=reg216+reg217; reg179=reg32*reg220; reg195=reg197+reg195; reg65=reg159+reg65; reg240=reg240-reg241;
    reg269=reg270+reg269; reg140=reg140+reg181; reg224=reg221+reg224; reg213=(*f.m).density*reg213; reg245=reg245-reg244;
    reg242=reg242-reg243; reg246=(*f.m).density*reg246; reg128=reg181+reg128; reg181=reg32*reg185; reg131=reg193+reg131;
    reg190=reg190+reg189; reg193=reg32*reg117; reg184=(*f.m).density*reg184; reg239=reg239-reg238; reg197=reg32*reg215;
    reg270=reg32*reg124; reg259=reg32*reg259; reg269=reg32*reg269; reg148=reg32*reg148; T reg276=reg32*reg237;
    reg206=reg32*reg206; T reg277=ponderation*reg229; reg131=reg32*reg131; T reg278=ponderation*reg273; T reg279=ponderation*reg260;
    reg147=reg32*reg147; reg242=reg32*reg242; T reg280=ponderation*reg274; T reg281=reg32*reg246; reg256=reg32*reg256;
    reg188=reg32*reg188; reg187=reg32*reg187; T reg282=reg32*reg198; T reg283=ponderation*reg275; reg162=reg32*reg162;
    T reg284=reg32*reg207; reg252=reg32*reg252; T reg285=ponderation*reg272; T reg286=ponderation*reg181; reg247=reg32*reg247;
    T reg287=reg32*reg213; reg154=reg32*reg154; T reg288=ponderation*reg164; reg109=reg32*reg109; reg245=reg32*reg245;
    T reg289=reg32*reg228; reg249=reg32*reg249; reg223=reg32*reg223; reg140=reg32*reg140; T reg290=reg32*reg184;
    T reg291=ponderation*reg253; reg266=reg32*reg266; T reg292=reg32*reg192; reg251=reg32*reg251; reg130=reg32*reg130;
    reg178=reg32*reg178; reg226=reg32*reg226; T reg293=ponderation*reg261; T reg294=ponderation*reg161; reg254=reg32*reg254;
    T reg295=ponderation*reg82; T reg296=reg32*reg199; reg104=reg32*reg104; reg65=reg32*reg65; reg129=reg32*reg129;
    reg204=reg32*reg204; reg110=reg32*reg110; T reg297=ponderation*reg179; T reg298=ponderation*reg171; reg190=reg32*reg190;
    reg230=reg32*reg230; reg180=reg32*reg180; reg201=reg32*reg201; reg138=reg32*reg138; reg224=reg32*reg224;
    T reg299=ponderation*reg174; reg231=reg32*reg231; reg239=reg32*reg239; T reg300=ponderation*reg193; reg136=reg32*reg136;
    reg108=reg32*reg108; T reg301=ponderation*reg270; reg234=reg32*reg234; T reg302=ponderation*reg196; T reg303=ponderation*reg203;
    reg236=reg32*reg236; T reg304=reg32*reg219; reg128=reg32*reg128; reg263=reg32*reg263; T reg305=ponderation*reg197;
    reg105=reg32*reg105; T reg306=ponderation*reg271; reg209=reg32*reg209; reg240=reg32*reg240; reg97=reg32*reg97;
    T reg307=reg32*reg233; reg127=reg32*reg127; reg50=reg32*reg50; reg177=reg32*reg177; reg194=reg32*reg194;
    reg102=reg32*reg102; reg216=reg32*reg216; T reg308=ponderation*reg250; T reg309=reg32*reg183; reg195=reg32*reg195;
    reg60=reg32*reg60; T reg310=ponderation*reg307; sollicitation[indices[0]+0]+=reg310; T reg311=ponderation*reg287; sollicitation[indices[1]+1]+=reg311;
    matrix(indices[3]+0,indices[3]+1)+=-reg308; reg308=ponderation*reg284; sollicitation[indices[2]+0]+=reg308; matrix(indices[0]+0,indices[0]+2)+=ponderation*reg252; matrix(indices[3]+1,indices[3]+2)+=-reg302;
    reg252=ponderation*reg290; sollicitation[indices[3]+2]+=reg252; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg105; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg180; matrix(indices[2]+2,indices[3]+2)+=-reg288;
    matrix(indices[3]+0,indices[3]+0)+=ponderation*reg188; reg105=ponderation*reg276; sollicitation[indices[0]+1]+=reg105; reg180=ponderation*reg304; sollicitation[indices[2]+2]+=reg180;
    reg188=ponderation*reg292; sollicitation[indices[1]+0]+=reg188; reg288=ponderation*reg296; sollicitation[indices[2]+1]+=reg288; reg302=ponderation*reg309;
    sollicitation[indices[3]+0]+=reg302; T reg312=ponderation*reg289; sollicitation[indices[1]+2]+=reg312; T reg313=ponderation*reg282; sollicitation[indices[3]+1]+=reg313;
    matrix(indices[0]+0,indices[0]+1)+=ponderation*reg259; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg65; reg65=ponderation*reg281; sollicitation[indices[0]+2]+=reg65; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg194;
    matrix(indices[0]+1,indices[3]+1)+=ponderation*reg130; matrix(indices[1]+0,indices[3]+1)+=-reg293; matrix(indices[1]+0,indices[3]+2)+=ponderation*reg147; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg242; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg131;
    matrix(indices[0]+1,indices[2]+2)+=ponderation*reg240; matrix(indices[1]+1,indices[1]+2)+=-reg305; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg216; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg129; matrix(indices[1]+1,indices[2]+1)+=-reg297;
    matrix(indices[0]+1,indices[2]+0)+=ponderation*reg239; matrix(indices[1]+1,indices[2]+2)+=ponderation*reg224; matrix(indices[1]+1,indices[3]+0)+=-reg301; matrix(indices[0]+1,indices[1]+2)+=ponderation*reg236; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg128;
    matrix(indices[1]+1,indices[3]+2)+=-reg303; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg234; matrix(indices[0]+2,indices[2]+2)+=ponderation*reg154; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg266; matrix(indices[0]+2,indices[3]+0)+=ponderation*reg178;
    matrix(indices[0]+2,indices[3]+1)+=ponderation*reg187; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg127; matrix(indices[0]+2,indices[1]+2)+=ponderation*reg110; matrix(indices[0]+2,indices[1]+1)+=ponderation*reg138; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg108;
    matrix(indices[1]+0,indices[1]+1)+=-reg300; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg269; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg195; matrix(indices[0]+2,indices[0]+2)+=ponderation*reg97; matrix(indices[1]+0,indices[2]+0)+=-reg277;
    matrix(indices[1]+0,indices[2]+1)+=ponderation*reg190; matrix(indices[1]+0,indices[2]+2)+=-reg286; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg245; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg140; matrix(indices[2]+0,indices[3]+0)+=-reg280;
    matrix(indices[0]+0,indices[2]+2)+=-reg279; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg206; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg256; matrix(indices[2]+0,indices[3]+2)+=-reg283; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg148;
    matrix(indices[0]+0,indices[2]+0)+=ponderation*reg254; matrix(indices[2]+1,indices[2]+2)+=-reg294; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg226; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg251; matrix(indices[2]+1,indices[3]+1)+=-reg291;
    matrix(indices[0]+0,indices[1]+1)+=ponderation*reg249; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg223; matrix(indices[2]+2,indices[2]+2)+=ponderation*reg109; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg247; matrix(indices[2]+2,indices[3]+0)+=-reg285;
    matrix(indices[2]+2,indices[3]+1)+=ponderation*reg162; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg136; matrix(indices[0]+2,indices[2]+0)+=-reg278; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg231; matrix(indices[1]+2,indices[2]+0)+=-reg299;
    matrix(indices[1]+2,indices[2]+1)+=ponderation*reg201; matrix(indices[0]+1,indices[0]+2)+=ponderation*reg230; matrix(indices[1]+2,indices[2]+2)+=-reg298; matrix(indices[1]+2,indices[3]+0)+=ponderation*reg204; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg104;
    matrix(indices[1]+2,indices[3]+1)+=-reg295; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg102; matrix(indices[0]+0,indices[3]+2)+=ponderation*reg50; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg209; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg263;
    matrix(indices[2]+0,indices[2]+1)+=-reg306; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg177; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg60;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; reg0=reg0/(*f.m).elastic_modulus; T reg1=elem.pos(2)[2]-elem.pos(0)[2]; T reg2=elem.pos(2)[1]-elem.pos(0)[1]; T reg3=elem.pos(3)[1]-elem.pos(0)[1];
    T reg4=elem.pos(3)[2]-elem.pos(0)[2]; T reg5=elem.pos(1)[2]-elem.pos(0)[2]; T reg6=elem.pos(1)[1]-elem.pos(0)[1]; T reg7=pow(reg0,2); T reg8=reg5*reg3;
    T reg9=reg1*reg3; T reg10=1.0/(*f.m).elastic_modulus; T reg11=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg12=reg6*reg4; reg0=reg0*reg7;
    T reg13=reg2*reg4; T reg14=reg10*reg7; reg7=reg11*reg7; T reg15=reg11*reg0; reg0=reg10*reg0;
    T reg16=reg5*reg2; reg8=reg12-reg8; reg12=reg6*reg1; T reg17=elem.pos(1)[0]-elem.pos(0)[0]; T reg18=elem.pos(2)[0]-elem.pos(0)[0];
    reg9=reg13-reg9; reg16=reg12-reg16; reg12=reg11*reg14; reg13=reg18*reg8; T reg19=elem.pos(3)[0]-elem.pos(0)[0];
    T reg20=reg11*reg7; reg14=reg10*reg14; T reg21=reg10*reg0; reg0=reg11*reg0; T reg22=reg17*reg9;
    T reg23=reg11*reg15; reg21=reg21-reg23; reg0=reg23+reg0; reg15=reg10*reg15; reg7=reg10*reg7;
    reg14=reg14-reg20; reg12=reg20+reg12; T reg24=reg19*reg16; T reg25=reg18*reg4; T reg26=reg1*reg19;
    T reg27=reg18*reg3; T reg28=reg17*reg4; reg13=reg22-reg13; reg22=reg6*reg19; T reg29=reg2*reg19;
    T reg30=reg17*reg3; T reg31=reg5*reg19; reg14=reg10*reg14; reg26=reg25-reg26; reg15=reg23+reg15;
    reg12=reg11*reg12; reg29=reg27-reg29; reg10=reg10*reg21; reg23=reg20+reg7; reg31=reg28-reg31;
    reg25=reg11*reg0; reg22=reg30-reg22; reg27=reg17*reg1; reg28=reg17*reg2; reg30=reg5*reg18;
    T reg32=reg6*reg18; reg24=reg13+reg24; reg9=reg9/reg24; reg26=reg26/reg24; reg30=reg27-reg30;
    reg12=reg14-reg12; reg32=reg28-reg32; reg23=reg11*reg23; reg25=reg10-reg25; reg11=reg11*reg15;
    reg29=reg29/reg24; reg8=reg8/reg24; reg22=reg22/reg24; reg31=reg31/reg24; reg10=reg8-reg9;
    reg13=reg26-reg31; reg23=reg12-reg23; reg12=reg22-reg29; reg11=reg25-reg11; reg32=reg32/reg24;
    reg30=reg30/reg24; reg16=reg16/reg24; reg14=0.5*reg8; reg25=0.5*reg31; reg27=0.5*reg9;
    reg28=0.5*reg26; T reg33=0.5*reg30; reg12=reg12-reg32; reg13=reg30+reg13; reg10=reg10-reg16;
    T reg34=0.5*reg16; reg23=reg23/reg11; T reg35=0.5*reg10; T reg36=reg23*reg27; T reg37=0.5*reg22;
    T reg38=reg23*reg34; T reg39=reg23*reg14; T reg40=reg23*reg25; T reg41=0.5*reg29; reg21=reg21/reg11;
    T reg42=reg23*reg33; T reg43=reg23*reg28; T reg44=0.5*reg32; T reg45=0.5*reg12; T reg46=0.5*reg13;
    T reg47=reg22*reg21; reg36=2*reg36; T reg48=reg23*reg41; T reg49=2*reg43; reg38=2*reg38;
    T reg50=reg31*reg21; T reg51=reg8*reg21; reg40=2*reg40; T reg52=reg32*reg21; T reg53=reg23*reg37;
    T reg54=2*reg39; T reg55=reg26*reg21; T reg56=reg16*reg21; T reg57=2*reg42; T reg58=reg23*reg44;
    T reg59=reg30*reg21; T reg60=reg9*reg21; T reg61=reg23*reg46; T reg62=reg23*reg35; T reg63=reg29*reg21;
    reg15=reg15/reg11; reg11=reg0/reg11; reg0=reg23*reg45; T reg64=reg30*reg15; reg62=2*reg62;
    T reg65=reg9*reg51; T reg66=reg8*reg11; T reg67=reg22*reg63; T reg68=reg8*reg56; T reg69=reg25*reg57;
    T reg70=2*reg53; T reg71=reg28*reg40; T reg72=reg40*reg33; T reg73=reg31*reg11; T reg74=reg31*reg59;
    T reg75=reg21*reg12; reg0=2*reg0; T reg76=reg14*reg38; T reg77=reg9*reg11; T reg78=reg16*reg51;
    T reg79=reg22*reg15; T reg80=reg30*reg11; T reg81=reg27*reg54; T reg82=reg21*reg13; T reg83=reg26*reg50;
    T reg84=reg11*reg10; T reg85=reg16*reg11; reg48=2*reg48; T reg86=reg31*reg15; T reg87=reg54*reg34;
    reg61=2*reg61; T reg88=reg26*reg11; T reg89=reg29*reg47; T reg90=reg26*reg15; T reg91=reg15*reg12;
    T reg92=reg49*reg25; T reg93=reg31*reg55; T reg94=reg32*reg47; T reg95=reg36*reg14; T reg96=reg8*reg60;
    T reg97=reg29*reg15; T reg98=reg22*reg52; T reg99=reg30*reg50; T reg100=reg21*reg10; reg58=2*reg58;
    T reg101=reg32*reg15; T reg102=reg65+reg71; T reg103=reg36*reg34; T reg104=reg41*reg70; T reg105=reg30*reg55;
    T reg106=reg61*reg33; T reg107=reg16*reg100; T reg108=reg9*reg79; T reg109=reg41*reg54; reg98=reg76+reg98;
    T reg110=reg9*reg56; T reg111=reg28*reg57; T reg112=reg9*reg80; T reg113=reg28*reg38; T reg114=reg14*reg58;
    T reg115=reg16*reg80; T reg116=reg33*reg38; T reg117=reg12*reg63; T reg118=reg12*reg66; T reg119=reg35*reg70;
    T reg120=reg33*reg57; T reg121=reg16*reg56; T reg122=reg62*reg34; T reg123=reg12*reg47; T reg124=reg54*reg44;
    T reg125=reg16*reg79; T reg126=reg30*reg82; T reg127=reg12*reg75; T reg128=reg12*reg52; T reg129=reg70*reg44;
    T reg130=reg78+reg72; T reg131=reg15*reg13; T reg132=reg9*reg100; T reg133=reg61*reg28; T reg134=reg36*reg33;
    T reg135=reg9*reg88; T reg136=reg16*reg88; T reg137=reg9*reg60; T reg138=reg28*reg49; T reg139=reg49*reg34;
    T reg140=reg28*reg36; T reg141=reg30*reg77; T reg142=reg31*reg50; T reg143=reg29*reg90; T reg144=reg28*reg48;
    T reg145=reg40*reg14; T reg146=reg31*reg66; T reg147=reg29*reg63; T reg148=reg29*reg66; T reg149=reg27*reg70;
    T reg150=reg93+reg95; T reg151=reg81+reg89; T reg152=reg29*reg64; T reg153=reg28*reg58; T reg154=reg62*reg14;
    T reg155=reg31*reg82; T reg156=reg29*reg52; T reg157=reg61*reg25; T reg158=reg8*reg100; T reg159=reg37*reg38;
    T reg160=reg8*reg91; T reg161=reg8*reg101; T reg162=reg62*reg37; reg96=reg92+reg96; T reg163=reg48*reg37;
    T reg164=reg37*reg58; reg68=reg69+reg68; T reg165=reg8*reg97; T reg166=reg36*reg37; T reg167=reg25*reg40;
    T reg168=reg8*reg51; T reg169=reg8*reg73; T reg170=reg25*reg54; T reg171=reg22*reg85; T reg172=reg22*reg47;
    T reg173=reg22*reg86; T reg174=reg62*reg27; T reg175=reg26*reg82; T reg176=reg25*reg70; T reg177=reg49*reg27;
    T reg178=reg16*reg60; T reg179=reg49*reg33; reg67=reg95+reg67; reg95=reg27*reg36; T reg180=reg26*reg55;
    T reg181=reg26*reg97; T reg182=reg49*reg41; T reg183=reg48*reg14; T reg184=reg22*reg77; T reg185=reg22*reg75;
    reg83=reg81+reg83; T reg186=reg0*reg14; T reg187=reg27*reg57; T reg188=reg26*reg85; T reg189=reg22*reg84;
    T reg190=reg27*reg38; T reg191=reg26*reg59; T reg192=reg26*reg101; T reg193=reg41*reg57; reg76=reg74+reg76;
    T reg194=reg29*reg75; T reg195=reg40*reg37; T reg196=reg31*reg79; T reg197=reg14*reg54; reg60=reg10*reg60;
    T reg198=reg46*reg49; T reg199=reg35*reg54; reg50=reg13*reg50; reg99=reg87+reg99; T reg200=reg87+reg94;
    T reg201=reg10*reg51; T reg202=reg46*reg40; T reg203=reg57*reg34; T reg204=reg30*reg85; T reg205=reg70*reg34;
    T reg206=reg32*reg66; T reg207=reg35*reg36; T reg208=reg13*reg55; reg63=reg32*reg63; T reg209=reg34*reg38;
    T reg210=reg10*reg79; T reg211=reg45*reg54; T reg212=reg48*reg33; T reg213=reg30*reg59; T reg214=reg32*reg90;
    reg56=reg10*reg56; T reg215=reg46*reg57; T reg216=reg30*reg101; T reg217=reg57*reg44; T reg218=reg35*reg62;
    reg82=reg13*reg82; reg75=reg32*reg75; T reg219=reg46*reg61; T reg220=reg49*reg44; T reg221=reg33*reg58;
    T reg222=reg32*reg64; T reg223=reg13*reg59; T reg224=reg30*reg97; T reg225=reg35*reg38; reg100=reg10*reg100;
    T reg226=reg26*reg77; reg52=reg32*reg52; T reg227=reg11*reg13; T reg228=reg104+reg83; T reg229=reg22*reg131;
    T reg230=reg14*reg57; T reg231=reg0*reg25; T reg232=reg26*reg79; T reg233=reg41*reg40; reg186=reg189+reg186;
    reg189=reg29*reg84; T reg234=reg10*reg73; T reg235=reg46*reg54; T reg236=reg8*reg79; reg166=reg165+reg166;
    reg212=reg214+reg212; reg188=reg187+reg188; T reg237=reg210+reg211; T reg238=reg37*reg57; reg63=reg103+reg63;
    T reg239=reg45*reg0; reg52=reg209+reg52; T reg240=reg192+reg193; T reg241=reg190+reg191; T reg242=reg31*reg101;
    T reg243=reg37*reg54; T reg244=reg164+reg76; T reg245=reg13*reg84; T reg246=reg32*reg131; reg175=reg174-reg175;
    T reg247=reg0*reg33; T reg248=reg70*reg14; T reg249=reg26*reg91; T reg250=reg61*reg41; T reg251=reg22*reg66;
    reg67=reg92+reg67; T reg252=reg45*reg38; T reg253=reg10*reg101; reg75=reg122+reg75; T reg254=reg37*reg70;
    T reg255=reg46*reg38; T reg256=reg95+reg180; T reg257=reg22*reg90; T reg258=reg48*reg25; T reg259=reg10*reg80;
    T reg260=reg32*reg77; T reg261=reg181+reg182; reg183=reg184+reg183; reg184=reg48*reg34; T reg262=reg167+reg168;
    T reg263=reg27*reg40; T reg264=reg26*reg66; reg185=reg154+reg185; T reg265=reg45*reg58; reg56=reg56-reg215;
    reg100=reg100+reg219; reg169=reg170+reg169; T reg266=reg10*reg88; reg71=reg71+reg151; T reg267=reg49*reg14;
    T reg268=reg31*reg77; reg221=reg222+reg221; reg72=reg72+reg200; T reg269=reg29*reg85; T reg270=reg27*reg58;
    T reg271=reg61*reg37; T reg272=reg31*reg91; reg153=reg152+reg153; reg154=reg155-reg154; reg155=reg45*reg48;
    reg60=reg60-reg198; reg164=reg68+reg164; reg156=reg190+reg156; reg190=reg61*reg14; T reg273=reg31*reg84;
    T reg274=reg25*reg38; T reg275=reg32*reg85; reg158=reg157-reg158; T reg276=reg0*reg37; reg159=reg161+reg159;
    T reg277=reg58*reg34; T reg278=reg62*reg25; T reg279=reg8*reg227; T reg280=reg45*reg62; T reg281=reg8*reg80;
    T reg282=reg10*reg91; reg162=reg160+reg162; T reg283=reg8*reg88; T reg284=reg31*reg85; T reg285=reg29*reg131;
    T reg286=reg0*reg28; reg195=reg196+reg195; T reg287=reg36*reg25; reg194=reg174+reg194; reg142=reg142+reg197;
    reg174=reg29*reg77; T reg288=reg48*reg27; T reg289=reg10*reg227; T reg290=reg45*reg70; T reg291=reg202-reg201;
    T reg292=reg96+reg163; T reg293=reg46*reg62; reg144=reg143+reg144; reg145=reg146+reg145; T reg294=reg206+reg205;
    T reg295=reg32*reg86; reg147=reg95+reg147; reg95=reg49*reg37; T reg296=reg31*reg97; T reg297=reg45*reg36;
    T reg298=reg10*reg97; T reg299=reg148+reg149; reg163=reg163+reg150; T reg300=reg70*reg33; T reg301=reg29*reg86;
    T reg302=reg28*reg70; T reg303=reg46*reg36; T reg304=reg0*reg27; reg86=reg12*reg86; T reg305=reg46*reg70;
    reg121=reg121+reg120; reg50=reg50-reg199; T reg306=reg199+reg123; T reg307=reg125+reg124; T reg308=reg129+reg99;
    T reg309=reg12*reg85; T reg310=reg35*reg58; T reg311=reg35*reg40; T reg312=reg54*reg33; T reg313=reg13*reg66;
    T reg314=reg12*reg64; T reg315=reg46*reg58; T reg316=reg16*reg73; T reg317=reg130+reg129; T reg318=reg30*reg79;
    reg128=reg225+reg128; T reg319=reg40*reg44; T reg320=reg13*reg97; T reg321=reg45*reg49; reg132=reg132-reg133;
    T reg322=reg0*reg41; T reg323=reg36*reg44; T reg324=reg9*reg227; T reg325=reg62*reg28; T reg326=reg16*reg97;
    reg134=reg136+reg134; T reg327=reg9*reg91; T reg328=reg62*reg41; T reg329=reg207-reg208; reg103=reg103+reg105;
    reg225=reg225-reg223; T reg330=reg45*reg57; T reg331=reg13*reg101; reg141=reg139+reg141; T reg332=reg12*reg84;
    T reg333=reg0*reg35; reg226=reg226+reg177; T reg334=reg61*reg44; reg131=reg12*reg131; T reg335=reg46*reg0;
    T reg336=reg30*reg91; reg126=reg122-reg126; reg127=reg218+reg127; reg122=reg35*reg57; T reg337=reg12*reg77;
    T reg338=reg44*reg58; T reg339=reg118+reg119; T reg340=reg30*reg66; T reg341=reg45*reg40; T reg342=reg13*reg79;
    reg40=reg40*reg34; reg116=reg115+reg116; reg117=reg207+reg117; reg207=reg224+reg220; T reg343=reg16*reg101;
    T reg344=reg44*reg38; T reg345=reg46*reg48; T reg346=reg12*reg90; reg85=reg13*reg85; T reg347=reg61*reg34;
    T reg348=reg30*reg84; T reg349=reg35*reg48; reg36=reg41*reg36; reg101=reg9*reg101; reg227=reg16*reg227;
    T reg350=reg35*reg49; reg77=reg13*reg77; T reg351=reg25*reg58; T reg352=reg0*reg34; reg209=reg209+reg213;
    T reg353=reg102+reg104; T reg354=reg32*reg84; reg0=reg0*reg44; reg107=reg107-reg106; reg113=reg112+reg113;
    reg73=reg9*reg73; T reg355=reg28*reg54; reg98=reg69+reg98; reg114=reg171+reg114; reg171=reg13*reg91;
    T reg356=reg22*reg64; T reg357=reg45*reg61; T reg358=reg108+reg109; reg58=reg41*reg58; T reg359=reg216+reg217;
    reg218=reg82+reg218; reg110=reg110+reg111; reg204=reg203+reg204; reg82=reg61*reg35; reg173=reg176+reg173;
    reg137=reg137+reg138; T reg360=reg41*reg48; reg84=reg26*reg84; reg48=reg48*reg44; reg178=reg178+reg179;
    reg61=reg61*reg27; T reg361=reg62*reg44; reg140=reg135+reg140; reg91=reg16*reg91; reg38=reg41*reg38;
    reg97=reg9*reg97; reg62=reg62*reg33; T reg362=reg197+reg172; reg52=reg120+reg52; T reg363=reg24*reg159;
    T reg364=reg24*reg116; T reg365=reg24*reg67; T reg366=reg24*reg183; T reg367=reg236+reg243; T reg368=reg24*reg173;
    reg348=reg347-reg348; reg277=reg275+reg277; reg275=reg24*reg221; reg126=reg0+reg126; reg347=reg24*reg114;
    reg274=reg274+reg281; reg247=reg246-reg247; reg246=reg24*reg141; reg344=reg343+reg344; reg334=reg334-reg336;
    reg103=reg48+reg103; reg106=reg75-reg106; reg258=reg258+reg257; reg75=reg24*reg164; reg343=reg24*reg169;
    reg167=reg167+reg362; T reg369=reg251+reg248; reg352=reg354+reg352; reg0=reg107+reg0; reg361=reg91+reg361;
    reg91=reg24*reg317; reg296=reg296+reg95; reg107=reg24*reg308; reg354=reg24*reg294; reg242=reg242+reg238;
    reg62=reg227-reg62; reg319=reg318+reg319; reg227=reg24*reg145; reg323=reg326+reg323; reg326=reg24*reg244;
    reg142=reg254+reg142; T reg370=reg24*reg212; T reg371=reg24*reg134; T reg372=reg24*reg195; reg63=reg179+reg63;
    T reg373=reg24*reg204; reg48=reg178+reg48; reg284=reg284+reg230; reg178=reg24*reg207; T reg374=reg24*reg359;
    reg351=reg351+reg356; reg190=reg273-reg190; reg184=reg260+reg184; reg121=reg121+reg338; reg185=reg157-reg185;
    reg157=reg24*reg72; reg154=reg154-reg276; reg40=reg40+reg340; reg260=reg24*reg98; reg271=reg272-reg271;
    reg209=reg338+reg209; reg272=reg24*reg307; reg229=reg231-reg229; reg268=reg268+reg267; reg295=reg295+reg300;
    reg316=reg316+reg312; reg231=reg24*reg186; reg273=reg24*reg163; reg338=reg24*reg358; reg82=reg245+reg82;
    reg110=reg110+reg58; reg245=reg24*reg113; reg38=reg101+reg38; reg252=reg253+reg252; reg84=reg61-reg84;
    reg175=reg322+reg175; reg250=reg250-reg249; reg255=reg255-reg259; reg61=reg24*reg226; reg256=reg360+reg256;
    reg56=reg56+reg265; reg101=reg24*reg261; reg263=reg263+reg264; reg253=reg24*reg228; T reg375=reg24*reg237;
    reg233=reg232+reg233; T reg376=reg24*reg188; reg241=reg58+reg241; reg234=reg234-reg235; reg58=reg24*reg240;
    reg189=reg304+reg189; reg291=reg291-reg290; reg286=reg285-reg286; reg133=reg194-reg133; reg288=reg174+reg288;
    reg297=reg298+reg297; reg174=reg24*reg144; reg147=reg138+reg147; reg85=reg85-reg122; reg225=reg265+reg225;
    reg331=reg331-reg330; reg341=reg341-reg342; reg333=reg332+reg333; reg335=reg131+reg335; reg127=reg219+reg127;
    reg50=reg50-reg290; reg349=reg337+reg349; reg311=reg311-reg313; reg345=reg345-reg346; reg117=reg117-reg198;
    reg131=reg24*reg339; reg86=reg86-reg305; reg320=reg320-reg321; reg202=reg202-reg306; reg310=reg309+reg310;
    reg315=reg315-reg314; reg329=reg155+reg329; reg128=reg128-reg215; reg322=reg132+reg322; reg325=reg324-reg325;
    reg77=reg77-reg350; reg328=reg327+reg328; reg360=reg137+reg360; reg132=reg24*reg140; reg171=reg357+reg171;
    reg36=reg97+reg36; reg218=reg239+reg218; reg97=reg24*reg353; reg73=reg73+reg355; reg279=reg278-reg279;
    reg239=reg100+reg239; reg100=reg24*reg153; reg301=reg301+reg302; reg137=reg24*reg166; reg287=reg287+reg283;
    reg303=reg303-reg266; reg293=reg289+reg293; reg194=reg24*reg71; reg219=reg24*reg299; reg276=reg158-reg276;
    reg280=reg282+reg280; reg158=reg24*reg292; reg155=reg60+reg155; reg262=reg262+reg254; reg60=reg24*reg162;
    reg270=reg269+reg270; reg156=reg111+reg156; reg328=reg24*reg328; reg274=reg24*reg274; reg279=reg24*reg279;
    reg325=reg24*reg325; reg265=ponderation*reg371; reg269=ponderation*reg75; reg278=ponderation*reg91; reg315=reg24*reg315;
    reg128=reg24*reg128; reg77=reg24*reg77; reg282=ponderation*reg373; reg322=reg24*reg322; reg323=reg24*reg323;
    reg351=reg24*reg351; reg82=reg24*reg82; reg285=ponderation*reg338; reg277=reg24*reg277; reg73=reg24*reg73;
    reg289=ponderation*reg260; reg298=ponderation*reg374; reg304=ponderation*reg97; reg309=ponderation*reg363; reg0=reg24*reg0;
    reg218=reg24*reg218; reg36=reg24*reg36; reg361=reg24*reg361; reg276=reg24*reg276; reg324=ponderation*reg132;
    reg62=reg24*reg62; reg209=reg24*reg209; reg360=reg24*reg360; reg293=reg24*reg293; reg171=reg24*reg171;
    reg48=reg24*reg48; reg311=reg24*reg311; reg349=reg24*reg349; reg348=reg24*reg348; reg127=reg24*reg127;
    reg335=reg24*reg335; reg126=reg24*reg126; reg40=reg24*reg40; reg327=ponderation*reg343; reg50=reg24*reg50;
    reg333=reg24*reg333; reg334=reg24*reg334; reg332=ponderation*reg137; reg52=reg24*reg52; reg331=reg24*reg331;
    reg337=ponderation*reg246; reg357=ponderation*reg178; reg225=reg24*reg225; reg262=reg24*reg262; reg341=reg24*reg341;
    reg103=reg24*reg103; reg85=reg24*reg85; T reg377=ponderation*reg60; reg329=reg24*reg329; reg310=reg24*reg310;
    reg316=reg24*reg316; T reg378=ponderation*reg275; reg319=reg24*reg319; reg202=reg24*reg202; T reg379=ponderation*reg272;
    T reg380=ponderation*reg158; reg86=reg24*reg86; T reg381=ponderation*reg131; reg121=reg24*reg121; reg320=reg24*reg320;
    reg117=reg24*reg117; reg239=reg24*reg239; T reg382=ponderation*reg107; T reg383=ponderation*reg364; reg345=reg24*reg345;
    reg367=reg24*reg367; reg287=reg24*reg287; reg344=reg24*reg344; reg229=reg24*reg229; T reg384=ponderation*reg375;
    T reg385=ponderation*reg219; reg286=reg24*reg286; reg263=reg24*reg263; reg271=reg24*reg271; reg185=reg24*reg185;
    reg184=reg24*reg184; T reg386=ponderation*reg101; reg297=reg24*reg297; reg142=reg24*reg142; T reg387=ponderation*reg157;
    reg133=reg24*reg133; T reg388=ponderation*reg366; reg56=reg24*reg56; reg256=reg24*reg256; reg270=reg24*reg270;
    T reg389=ponderation*reg354; T reg390=ponderation*reg58; reg301=reg24*reg301; reg63=reg24*reg63; reg241=reg24*reg241;
    T reg391=ponderation*reg326; reg268=reg24*reg268; reg234=reg24*reg234; T reg392=ponderation*reg376; reg284=reg24*reg284;
    reg242=reg24*reg242; reg189=reg24*reg189; reg155=reg24*reg155; T reg393=ponderation*reg370; reg291=reg24*reg291;
    reg233=reg24*reg233; T reg394=ponderation*reg231; T reg395=ponderation*reg372; T reg396=ponderation*reg194; T reg397=ponderation*reg253;
    T reg398=ponderation*reg174; reg84=reg24*reg84; T reg399=ponderation*reg100; T reg400=ponderation*reg368; reg247=reg24*reg247;
    reg280=reg24*reg280; reg38=reg24*reg38; reg167=reg24*reg167; reg252=reg24*reg252; reg303=reg24*reg303;
    reg296=reg24*reg296; T reg401=ponderation*reg245; reg190=reg24*reg190; reg147=reg24*reg147; reg110=reg24*reg110;
    T reg402=ponderation*reg347; reg352=reg24*reg352; reg156=reg24*reg156; reg288=reg24*reg288; reg106=reg24*reg106;
    reg250=reg24*reg250; T reg403=ponderation*reg365; reg154=reg24*reg154; T reg404=ponderation*reg227; reg255=reg24*reg255;
    reg175=reg24*reg175; T reg405=reg24*reg369; T reg406=ponderation*reg61; T reg407=ponderation*reg273; reg258=reg24*reg258;
    reg295=reg24*reg295; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg52; matrix(indices[3]+2,indices[1]+2)+=ponderation*reg63; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg311; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg50;
    matrix(indices[0]+1,indices[2]+2)+=ponderation*reg341; matrix(indices[3]+2,indices[2]+0)+=-reg389; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg297; matrix(indices[3]+1,indices[2]+0)+=ponderation*reg40; matrix(indices[3]+2,indices[2]+1)+=ponderation*reg295;
    matrix(indices[0]+0,indices[1]+1)+=ponderation*reg303; matrix(indices[3]+1,indices[1]+2)+=-reg357; matrix(indices[3]+2,indices[0]+0)+=ponderation*reg352; matrix(indices[0]+1,indices[0]+0)+=ponderation*reg82; matrix(indices[3]+1,indices[3]+2)+=-reg298;
    matrix(indices[3]+2,indices[3]+0)+=ponderation*reg277; matrix(indices[0]+0,indices[3]+2)+=ponderation*reg252; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg218; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg293; matrix(indices[3]+2,indices[0]+1)+=ponderation*reg247;
    matrix(indices[0]+0,indices[3]+1)+=ponderation*reg255; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg209; matrix(indices[0]+0,indices[0]+2)+=ponderation*reg280; matrix(indices[0]+1,indices[0]+2)+=ponderation*reg171; matrix(indices[3]+2,indices[2]+2)+=-reg387;
    matrix(indices[3]+2,indices[0]+2)+=ponderation*reg106; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg56; matrix(indices[3]+1,indices[3]+0)+=-reg282; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg77; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg239;
    matrix(indices[0]+2,indices[2]+0)+=-reg381; matrix(indices[3]+2,indices[1]+0)+=ponderation*reg184; matrix(indices[0]+0,indices[2]+2)+=-reg384; matrix(indices[3]+1,indices[2]+2)+=ponderation*reg319; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg234;
    matrix(indices[0]+1,indices[1]+1)+=ponderation*reg329; matrix(indices[3]+2,indices[3]+1)+=-reg378; matrix(indices[3]+2,indices[1]+1)+=-reg393; matrix(indices[3]+1,indices[2]+1)+=-reg382; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg155;
    matrix(indices[0]+1,indices[1]+2)+=ponderation*reg320; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg291; matrix(indices[1]+2,indices[1]+0)+=ponderation*reg288; matrix(indices[2]+1,indices[2]+0)+=-reg404; matrix(indices[1]+2,indices[0]+2)+=ponderation*reg133;
    matrix(indices[2]+1,indices[2]+1)+=ponderation*reg142; matrix(indices[1]+2,indices[0]+1)+=ponderation*reg286; matrix(indices[2]+1,indices[2]+2)+=-reg395; matrix(indices[1]+2,indices[0]+0)+=ponderation*reg189; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg284;
    matrix(indices[1]+1,indices[3]+2)+=-reg390; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg241; matrix(indices[2]+1,indices[3]+1)+=-reg391; matrix(indices[1]+1,indices[3]+0)+=-reg392; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg242;
    matrix(indices[1]+1,indices[2]+2)+=ponderation*reg233; matrix(indices[2]+2,indices[0]+0)+=-reg394; matrix(indices[1]+1,indices[2]+1)+=-reg397; matrix(indices[2]+2,indices[0]+1)+=ponderation*reg229; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg263;
    matrix(indices[2]+2,indices[0]+2)+=ponderation*reg185; matrix(indices[1]+1,indices[1]+2)+=-reg386; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg256; matrix(indices[2]+2,indices[1]+0)+=-reg388; matrix(indices[1]+1,indices[1]+0)+=-reg406;
    matrix(indices[2]+2,indices[1]+1)+=ponderation*reg258; matrix(indices[1]+1,indices[0]+2)+=ponderation*reg250; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg262; matrix(indices[2]+0,indices[1]+2)+=-reg332; matrix(indices[2]+0,indices[2]+1)+=-reg327;
    matrix(indices[2]+0,indices[1]+1)+=ponderation*reg287; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg367; matrix(indices[2]+0,indices[1]+0)+=-reg380; matrix(indices[2]+0,indices[0]+2)+=-reg377; matrix(indices[2]+0,indices[3]+0)+=-reg269;
    matrix(indices[2]+0,indices[0]+1)+=ponderation*reg279; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg274; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg276; matrix(indices[2]+0,indices[3]+2)+=-reg309; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg156;
    matrix(indices[2]+1,indices[0]+0)+=ponderation*reg190; matrix(indices[1]+2,indices[3]+1)+=-reg399; matrix(indices[1]+2,indices[3]+0)+=ponderation*reg270; matrix(indices[2]+1,indices[0]+1)+=ponderation*reg154; matrix(indices[1]+2,indices[2]+2)+=-reg396;
    matrix(indices[2]+1,indices[0]+2)+=ponderation*reg271; matrix(indices[1]+2,indices[2]+1)+=ponderation*reg301; matrix(indices[2]+1,indices[1]+0)+=ponderation*reg268; matrix(indices[1]+2,indices[2]+0)+=-reg385; matrix(indices[2]+1,indices[1]+1)+=-reg407;
    matrix(indices[1]+2,indices[1]+2)+=ponderation*reg147; matrix(indices[2]+1,indices[1]+2)+=ponderation*reg296; matrix(indices[1]+2,indices[1]+1)+=-reg398; matrix(indices[3]+0,indices[1]+2)+=ponderation*reg323; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg128;
    matrix(indices[0]+2,indices[3]+1)+=ponderation*reg315; matrix(indices[3]+0,indices[2]+0)+=-reg278; matrix(indices[0]+2,indices[3]+0)+=ponderation*reg310; matrix(indices[3]+0,indices[2]+1)+=ponderation*reg316; matrix(indices[0]+2,indices[2]+2)+=ponderation*reg202;
    matrix(indices[3]+0,indices[2]+2)+=-reg379; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg86; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg121; matrix(indices[0]+2,indices[1]+2)+=ponderation*reg117; matrix(indices[0]+2,indices[1]+1)+=ponderation*reg345;
    matrix(indices[3]+0,indices[3]+1)+=-reg383; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg349; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg344; matrix(indices[0]+2,indices[0]+2)+=ponderation*reg127; matrix(indices[3]+1,indices[0]+0)+=ponderation*reg348;
    matrix(indices[0]+2,indices[0]+1)+=ponderation*reg335; matrix(indices[3]+1,indices[0]+1)+=ponderation*reg126; matrix(indices[0]+2,indices[0]+0)+=ponderation*reg333; matrix(indices[3]+1,indices[0]+2)+=ponderation*reg334; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg331;
    matrix(indices[3]+1,indices[1]+0)+=-reg337; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg225; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg85; matrix(indices[3]+1,indices[1]+1)+=ponderation*reg103; matrix(indices[2]+2,indices[1]+2)+=-reg403;
    matrix(indices[1]+1,indices[0]+1)+=ponderation*reg175; matrix(indices[2]+2,indices[2]+0)+=ponderation*reg405; matrix(indices[1]+1,indices[0]+0)+=ponderation*reg84; matrix(indices[2]+2,indices[2]+1)+=-reg400; matrix(indices[1]+0,indices[3]+2)+=ponderation*reg38;
    matrix(indices[2]+2,indices[2]+2)+=ponderation*reg167; matrix(indices[1]+0,indices[3]+1)+=-reg401; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg110; matrix(indices[2]+2,indices[3]+0)+=-reg402; matrix(indices[1]+0,indices[2]+2)+=-reg285;
    matrix(indices[2]+2,indices[3]+1)+=ponderation*reg351; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg73; matrix(indices[2]+2,indices[3]+2)+=-reg289; matrix(indices[1]+0,indices[2]+0)+=-reg304; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg36;
    matrix(indices[3]+0,indices[0]+0)+=ponderation*reg0; matrix(indices[3]+0,indices[0]+2)+=ponderation*reg361; matrix(indices[1]+0,indices[1]+1)+=-reg324; matrix(indices[3]+0,indices[0]+1)+=ponderation*reg62; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg360;
    matrix(indices[1]+0,indices[0]+2)+=ponderation*reg328; matrix(indices[3]+0,indices[1]+0)+=ponderation*reg48; matrix(indices[1]+0,indices[0]+1)+=ponderation*reg325; matrix(indices[3]+0,indices[1]+1)+=-reg265; matrix(indices[1]+0,indices[0]+0)+=ponderation*reg322;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; reg0=reg0/(*f.m).elastic_modulus; T reg1=elem.pos(2)[2]-elem.pos(0)[2]; T reg2=elem.pos(3)[1]-elem.pos(0)[1]; T reg3=elem.pos(2)[1]-elem.pos(0)[1];
    T reg4=elem.pos(3)[2]-elem.pos(0)[2]; T reg5=elem.pos(1)[2]-elem.pos(0)[2]; T reg6=elem.pos(1)[1]-elem.pos(0)[1]; T reg7=pow(reg0,2); T reg8=reg5*reg2;
    T reg9=reg1*reg2; reg0=reg0*reg7; T reg10=reg6*reg4; T reg11=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg12=1.0/(*f.m).elastic_modulus;
    T reg13=reg3*reg4; T reg14=reg11*reg7; T reg15=reg11*reg0; reg7=reg12*reg7; T reg16=reg5*reg3;
    reg0=reg12*reg0; T reg17=reg6*reg1; reg8=reg10-reg8; reg10=elem.pos(1)[0]-elem.pos(0)[0]; reg9=reg13-reg9;
    reg13=elem.pos(2)[0]-elem.pos(0)[0]; T reg18=reg12*reg0; T reg19=reg11*reg15; reg0=reg11*reg0; T reg20=reg12*reg7;
    T reg21=reg11*reg14; reg16=reg17-reg16; reg7=reg11*reg7; reg17=reg13*reg8; T reg22=reg10*reg9;
    T reg23=elem.pos(3)[0]-elem.pos(0)[0]; reg0=reg19+reg0; reg15=reg12*reg15; reg18=reg18-reg19; reg14=reg12*reg14;
    reg20=reg20-reg21; reg7=reg21+reg7; T reg24=reg23*reg16; T reg25=reg10*reg4; T reg26=reg13*reg4;
    reg17=reg22-reg17; reg22=reg5*reg23; T reg27=reg1*reg23; reg27=reg26-reg27; reg26=reg3*reg23;
    T reg28=reg12*reg18; reg7=reg11*reg7; T reg29=reg13*reg2; T reg30=reg10*reg2; T reg31=reg11*reg0;
    reg24=reg17+reg24; reg22=reg25-reg22; reg17=reg6*reg23; reg25=reg21+reg14; reg15=reg19+reg15;
    reg19=reg5*reg13; T reg32=reg10*reg1; reg20=reg12*reg20; reg27=reg27/reg24; reg31=reg28-reg31;
    reg9=reg9/reg24; reg12=reg11*reg15; reg7=reg20-reg7; reg26=reg29-reg26; reg8=reg8/reg24;
    reg22=reg22/reg24; reg25=reg11*reg25; reg11=reg6*reg13; reg19=reg32-reg19; reg20=reg10*reg3;
    reg17=reg30-reg17; reg28=reg27-reg22; reg25=reg7-reg25; reg7=reg8-reg9; reg12=reg31-reg12;
    reg26=reg26/reg24; reg17=reg17/reg24; reg11=reg20-reg11; reg19=reg19/reg24; reg16=reg16/reg24;
    reg28=reg19+reg28; reg20=0.5*reg8; reg29=reg17-reg26; reg30=0.5*reg19; reg7=reg7-reg16;
    reg25=reg25/reg12; reg31=0.5*reg16; reg32=0.5*reg22; reg11=reg11/reg24; T reg33=0.5*reg7;
    T reg34=reg25*reg31; T reg35=0.5*reg11; T reg36=reg25*reg30; T reg37=0.5*reg27; T reg38=reg25*reg20;
    T reg39=0.5*reg17; T reg40=reg25*reg32; T reg41=0.5*reg9; T reg42=0.5*reg28; reg29=reg29-reg11;
    reg18=reg18/reg12; T reg43=0.5*reg26; T reg44=2*reg38; T reg45=reg25*reg37; T reg46=0.5*reg29;
    T reg47=reg16*reg18; T reg48=reg22*reg18; T reg49=2*reg36; T reg50=reg25*reg42; T reg51=reg25*reg35;
    T reg52=reg25*reg39; reg40=2*reg40; reg15=reg15/reg12; T reg53=reg25*reg33; T reg54=reg19*reg18;
    reg12=reg0/reg12; reg34=2*reg34; reg0=reg11*reg18; T reg55=reg25*reg41; T reg56=reg8*reg18;
    T reg57=reg17*reg18; T reg58=reg27*reg18; T reg59=2*reg52; T reg60=reg22*reg12; T reg61=reg27*reg48;
    T reg62=reg26*reg57; T reg63=reg26*reg15; T reg64=reg41*reg44; T reg65=reg17*reg15; T reg66=reg8*reg12;
    reg51=2*reg51; T reg67=reg37*reg40; T reg68=reg9*reg56; T reg69=reg19*reg12; T reg70=reg16*reg12;
    T reg71=reg18*reg29; T reg72=reg19*reg15; T reg73=reg11*reg15; T reg74=reg18*reg28; T reg75=reg26*reg18;
    T reg76=reg22*reg54; T reg77=reg20*reg34; reg53=2*reg53; T reg78=reg17*reg0; T reg79=reg9*reg18;
    T reg80=2*reg45; T reg81=reg25*reg43; T reg82=reg25*reg46; T reg83=reg8*reg47; T reg84=reg32*reg49;
    T reg85=reg27*reg12; T reg86=reg18*reg7; reg55=2*reg55; reg50=2*reg50; T reg87=reg16*reg47;
    T reg88=reg49*reg35; T reg89=reg29*reg0; T reg90=reg9*reg85; reg78=reg77+reg78; T reg91=reg33*reg55;
    T reg92=reg9*reg79; T reg93=reg20*reg51; T reg94=reg37*reg80; T reg95=reg37*reg55; T reg96=reg17*reg70;
    T reg97=reg17*reg57; reg77=reg76+reg77; T reg98=reg28*reg58; T reg99=reg11*reg0; T reg100=reg28*reg54;
    T reg101=reg33*reg34; T reg102=reg19*reg54; T reg103=reg29*reg71; T reg104=reg27*reg15; T reg105=reg19*reg73;
    T reg106=reg29*reg75; T reg107=reg31*reg34; T reg108=reg29*reg66; T reg109=reg33*reg59; T reg110=reg33*reg44;
    T reg111=reg22*reg15; T reg112=reg30*reg34; T reg113=reg28*reg48; T reg114=reg29*reg57; T reg115=reg16*reg69;
    T reg116=reg30*reg49; reg83=reg84+reg83; reg61=reg64+reg61; T reg117=reg41*reg49; T reg118=reg27*reg70;
    T reg119=reg41*reg34; T reg120=reg8*reg60; T reg121=reg27*reg54; T reg122=reg27*reg73; T reg123=reg32*reg44;
    T reg124=reg8*reg56; T reg125=reg43*reg49; T reg126=reg26*reg75; T reg127=reg26*reg66; T reg128=reg41*reg59;
    T reg129=reg32*reg40; T reg130=reg64+reg62; reg0=reg26*reg0; T reg131=reg26*reg72; T reg132=reg37*reg51;
    T reg133=reg68+reg67; T reg134=reg43*reg59; T reg135=reg40*reg39; T reg136=reg22*reg65; T reg137=reg20*reg44;
    T reg138=reg9*reg65; T reg139=reg22*reg48; T reg140=reg43*reg44; T reg141=reg9*reg47; T reg142=reg37*reg49;
    T reg143=reg9*reg69; T reg144=reg37*reg34; T reg145=reg41*reg55; T reg146=reg27*reg58; T reg147=reg27*reg63;
    T reg148=reg80*reg43; T reg149=reg39*reg34; T reg150=reg8*reg73; T reg151=reg39*reg51; T reg152=reg46*reg44;
    reg82=2*reg82; T reg153=reg28*reg74; T reg154=reg33*reg53; reg47=reg7*reg47; T reg155=reg7*reg65;
    T reg156=reg9*reg12; T reg157=reg42*reg49; reg81=2*reg81; T reg158=reg7*reg86; T reg159=reg42*reg80;
    T reg160=reg7*reg79; T reg161=reg15*reg29; T reg162=reg42*reg50; T reg163=reg7*reg56; T reg164=reg12*reg28;
    T reg165=reg42*reg40; T reg166=reg43*reg40; reg144=reg143+reg144; reg87=reg87+reg116; T reg167=reg27*reg65;
    T reg168=reg9*reg73; T reg169=reg134+reg61; T reg170=reg43*reg34; reg78=reg84+reg78; T reg171=reg145+reg146;
    T reg172=reg7*reg60; T reg173=reg147+reg148; T reg174=reg41*reg40; T reg175=reg27*reg66; T reg176=reg42*reg44;
    T reg177=reg42*reg51; T reg178=reg16*reg73; reg89=reg101+reg89; T reg179=reg42*reg34; T reg180=reg7*reg69;
    reg92=reg92+reg94; T reg181=reg43*reg81; reg95=reg90+reg95; reg112=reg115+reg112; T reg182=reg9*reg63;
    T reg183=reg43*reg55; T reg184=reg46*reg82; T reg185=reg46*reg51; reg47=reg47-reg157; T reg186=reg133+reg134;
    T reg187=reg9*reg60; T reg188=reg37*reg44; T reg189=reg138+reg140; reg141=reg141+reg142; T reg190=reg43*reg51;
    T reg191=reg35*reg51; T reg192=reg155+reg152; T reg193=reg7*reg85; T reg194=reg129+reg124; T reg195=reg39*reg59;
    reg120=reg123+reg120; T reg196=reg137+reg97; T reg197=reg8*reg65; T reg198=reg39*reg44; T reg199=reg46*reg81;
    reg160=reg160-reg159; T reg200=reg83+reg151; T reg201=reg32*reg34; T reg202=reg8*reg69; reg149=reg150+reg149;
    T reg203=reg39*reg49; reg139=reg139+reg137; T reg204=reg22*reg73; T reg205=reg46*reg53; reg135=reg136+reg135;
    T reg206=reg22*reg70; T reg207=reg20*reg49; T reg208=reg7*reg161; reg151=reg151+reg77; T reg209=reg7*reg164;
    reg118=reg117+reg118; T reg210=reg46*reg59; T reg211=reg165-reg163; T reg212=reg119+reg121; T reg213=reg122+reg125;
    T reg214=reg17*reg72; reg126=reg145+reg126; reg145=reg127+reg128; T reg215=reg26*reg111; T reg216=reg37*reg59;
    T reg217=reg46*reg55; T reg218=reg7*reg63; reg67=reg67+reg130; reg93=reg96+reg93; reg96=reg42*reg53;
    T reg219=reg26*reg70; T reg220=reg41*reg51; reg132=reg131+reg132; T reg221=reg32*reg51; reg0=reg119+reg0;
    reg119=reg42*reg55; T reg222=reg46*reg40; T reg223=reg7*reg73; reg101=reg101-reg100; T reg224=reg46*reg34;
    T reg225=reg42*reg59; T reg226=reg29*reg111; T reg227=reg46*reg49; reg73=reg28*reg73; T reg228=reg46*reg80;
    reg113=reg113-reg110; T reg229=reg108+reg109; reg103=reg154+reg103; T reg230=reg28*reg63; reg158=reg158+reg162;
    reg106=reg91+reg106; T reg231=reg107+reg102; T reg232=reg29*reg156; T reg233=reg33*reg81; reg99=reg107+reg99;
    reg107=reg42*reg81; T reg234=reg28*reg156; reg154=reg153+reg154; reg153=reg29*reg104; T reg235=reg33*reg40;
    T reg236=reg28*reg66; T reg237=reg29*reg72; reg34=reg35*reg34; T reg238=reg28*reg70; T reg239=reg33*reg49;
    T reg240=reg28*reg161; T reg241=reg33*reg51; T reg242=reg29*reg70; T reg243=reg28*reg65; T reg244=reg33*reg80;
    T reg245=reg110+reg114; T reg246=reg105+reg88; reg91=reg91-reg98; T reg247=reg46*reg50; reg166=reg167+reg166;
    reg103=reg162+reg103; reg160=reg160+reg199; reg119=reg119-reg193; reg162=reg24*reg169; reg240=reg247+reg240;
    reg233=reg232+reg233; reg232=reg24*reg78; reg247=reg24*reg246; reg220=reg219+reg220; reg235=reg235-reg236;
    reg222=reg222-reg243; reg174=reg174+reg175; reg231=reg191+reg231; reg219=reg24*reg145; reg96=reg209+reg96;
    reg209=reg24*reg132; reg194=reg194+reg195; reg221=reg221+reg214; reg215=reg215+reg216; reg0=reg142+reg0;
    T reg248=reg24*reg213; reg101=reg185+reg101; T reg249=reg24*reg93; reg73=reg73-reg227; reg129=reg129+reg196;
    reg126=reg94+reg126; reg212=reg190+reg212; reg238=reg238-reg239; T reg250=reg24*reg120; T reg251=reg24*reg118;
    reg154=reg184+reg154; reg211=reg211-reg210; reg113=reg113-reg210; reg217=reg218+reg217; reg218=reg24*reg67;
    T reg252=reg197+reg198; T reg253=reg24*reg189; reg224=reg223+reg224; reg99=reg116+reg99; reg139=reg195+reg139;
    reg187=reg187+reg188; reg184=reg158+reg184; reg158=reg24*reg186; reg226=reg226-reg225; reg205=reg208+reg205;
    reg185=reg47+reg185; reg91=reg199+reg91; reg183=reg182+reg183; reg165=reg165-reg245; reg47=reg24*reg135;
    reg182=reg24*reg95; reg199=reg24*reg112; reg234=reg234-reg244; reg92=reg92+reg181; reg206=reg206+reg207;
    reg241=reg242+reg241; reg89=reg89-reg157; reg34=reg178+reg34; reg179=reg179-reg180; reg178=reg24*reg151;
    reg177=reg177-reg237; reg208=reg24*reg173; reg172=reg172-reg176; reg223=reg24*reg200; reg171=reg181+reg171;
    reg107=reg107-reg153; reg201=reg201+reg202; reg170=reg168+reg170; reg168=reg24*reg144; reg106=reg106-reg159;
    reg230=reg230-reg228; reg181=reg24*reg149; reg190=reg141+reg190; reg204=reg204+reg203; reg141=reg24*reg229;
    reg191=reg87+reg191; reg87=reg24*reg192; reg242=ponderation*reg209; reg160=reg24*reg160; reg99=reg24*reg99;
    T reg254=ponderation*reg223; reg205=reg24*reg205; reg234=reg24*reg234; T reg255=ponderation*reg178; reg206=reg24*reg206;
    reg129=reg24*reg129; reg235=reg24*reg235; T reg256=ponderation*reg250; reg201=reg24*reg201; reg240=reg24*reg240;
    T reg257=ponderation*reg47; reg204=reg24*reg204; reg230=reg24*reg230; reg96=reg24*reg96; reg0=reg24*reg0;
    reg252=reg24*reg252; T reg258=ponderation*reg181; reg194=reg24*reg194; T reg259=ponderation*reg247; reg113=reg24*reg113;
    reg91=reg24*reg91; reg139=reg24*reg139; reg174=reg24*reg174; T reg260=ponderation*reg232; T reg261=ponderation*reg208;
    reg172=reg24*reg172; reg241=reg24*reg241; T reg262=ponderation*reg199; reg171=reg24*reg171; reg92=reg24*reg92;
    reg184=reg24*reg184; reg170=reg24*reg170; reg107=reg24*reg107; T reg263=ponderation*reg168; reg106=reg24*reg106;
    reg224=reg24*reg224; reg190=reg24*reg190; T reg264=ponderation*reg87; T reg265=ponderation*reg253; T reg266=ponderation*reg141;
    reg191=reg24*reg191; reg185=reg24*reg185; reg187=reg24*reg187; T reg267=ponderation*reg158; reg226=reg24*reg226;
    reg183=reg24*reg183; reg165=reg24*reg165; T reg268=ponderation*reg182; reg34=reg24*reg34; reg222=reg24*reg222;
    reg119=reg24*reg119; reg220=reg24*reg220; T reg269=ponderation*reg218; reg238=reg24*reg238; reg215=reg24*reg215;
    T reg270=ponderation*reg249; T reg271=ponderation*reg219; reg217=reg24*reg217; reg177=reg24*reg177; reg126=reg24*reg126;
    reg101=reg24*reg101; T reg272=ponderation*reg248; reg221=reg24*reg221; reg212=reg24*reg212; reg73=reg24*reg73;
    reg179=reg24*reg179; reg154=reg24*reg154; reg89=reg24*reg89; T reg273=ponderation*reg251; reg211=reg24*reg211;
    reg166=reg24*reg166; reg103=reg24*reg103; reg231=reg24*reg231; T reg274=ponderation*reg162; reg233=reg24*reg233;
    matrix(indices[3]+2,indices[3]+2)+=ponderation*reg99; matrix(indices[3]+0,indices[3]+1)+=-reg262; matrix(indices[2]+1,indices[3]+1)+=-reg255; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg34; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg191;
    matrix(indices[0]+0,indices[0]+0)+=ponderation*reg184; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg204; matrix(indices[2]+2,indices[3]+2)+=-reg260; matrix(indices[3]+1,indices[3]+2)+=-reg259; matrix(indices[2]+2,indices[3]+1)+=ponderation*reg221;
    matrix(indices[3]+1,indices[3]+1)+=ponderation*reg231; matrix(indices[2]+2,indices[3]+0)+=-reg270; matrix(indices[2]+2,indices[2]+2)+=ponderation*reg129; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg190; matrix(indices[1]+0,indices[2]+2)+=-reg265;
    matrix(indices[0]+0,indices[2]+2)+=-reg264; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg187; matrix(indices[1]+0,indices[2]+0)+=-reg267; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg183; matrix(indices[1]+0,indices[1]+1)+=-reg268;
    matrix(indices[1]+0,indices[1]+0)+=ponderation*reg92; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg185; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg89; matrix(indices[0]+2,indices[3]+1)+=ponderation*reg177; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg179;
    matrix(indices[0]+2,indices[3]+0)+=ponderation*reg241; matrix(indices[0]+2,indices[2]+2)+=ponderation*reg165; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg226; matrix(indices[0]+0,indices[3]+2)+=ponderation*reg224; matrix(indices[0]+2,indices[1]+2)+=ponderation*reg106;
    matrix(indices[0]+2,indices[1]+1)+=ponderation*reg107; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg233; matrix(indices[0]+2,indices[0]+2)+=ponderation*reg103; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg73; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg101;
    matrix(indices[0]+1,indices[0]+1)+=ponderation*reg154; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg238; matrix(indices[0]+1,indices[2]+2)+=ponderation*reg222; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg113; matrix(indices[0]+1,indices[0]+2)+=ponderation*reg240;
    matrix(indices[0]+1,indices[2]+0)+=ponderation*reg235; matrix(indices[0]+1,indices[1]+2)+=ponderation*reg230; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg91; matrix(indices[0]+2,indices[2]+0)+=-reg266; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg234;
    matrix(indices[0]+0,indices[0]+1)+=ponderation*reg96; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg206; matrix(indices[2]+1,indices[2]+2)+=-reg257; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg139; matrix(indices[0]+0,indices[0]+2)+=ponderation*reg205;
    matrix(indices[2]+0,indices[3]+2)+=-reg258; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg201; matrix(indices[2]+0,indices[3]+0)+=-reg254; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg252; matrix(indices[2]+0,indices[2]+1)+=-reg256;
    matrix(indices[0]+0,indices[1]+0)+=ponderation*reg160; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg194; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg0; matrix(indices[1]+2,indices[3]+1)+=-reg242; matrix(indices[1]+2,indices[3]+0)+=ponderation*reg220;
    matrix(indices[0]+0,indices[1]+1)+=ponderation*reg119; matrix(indices[1]+0,indices[3]+1)+=-reg263; matrix(indices[1]+0,indices[3]+2)+=ponderation*reg170; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg172; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg171;
    matrix(indices[1]+1,indices[1]+2)+=-reg261; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg174; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg211; matrix(indices[1]+1,indices[2]+1)+=-reg274; matrix(indices[1]+1,indices[2]+2)+=ponderation*reg166;
    matrix(indices[1]+1,indices[3]+0)+=-reg273; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg212; matrix(indices[1]+1,indices[3]+2)+=-reg272; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg217; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg126;
    matrix(indices[1]+2,indices[2]+0)+=-reg271; matrix(indices[1]+2,indices[2]+1)+=ponderation*reg215; matrix(indices[1]+2,indices[2]+2)+=-reg269;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=var_inter[0]-0.5; T reg1=var_inter[0]-0.16666666666666665741; T reg2=var_inter[0]-0.25; T reg3=reg1*reg0; reg0=reg2*reg0;
    reg1=reg2*reg1; reg0=reg0/0.027777777777777783175; reg2=var_inter[1]-0.25; T reg4=var_inter[1]-0.16666666666666665741; reg3=reg3/0.020833333333333335646;
    reg3=reg3*reg4; reg1=reg1/0.083333333333333342585; T reg5=var_inter[1]-0.5; reg0=reg0*reg2; reg1=reg2*reg1;
    reg2=reg5*reg0; reg3=reg5*reg3; reg1=reg5*reg1; reg2=reg2/0.027777777777777783175; reg5=var_inter[2]-0.16666666666666665741;
    T reg6=var_inter[2]-0.25; reg3=reg3/0.020833333333333335646; reg2=reg2*reg6; reg1=reg1/0.027777777777777783175; reg0=reg4*reg0;
    reg4=reg3*reg5; T reg7=var_inter[2]-0.5; reg1=reg6*reg1; reg0=reg0/0.083333333333333342585; reg4=reg4*reg7;
    T reg8=reg7*reg2; reg8=reg8/0.027777777777777783175; reg1=reg7*reg1; reg4=reg4/0.020833333333333335646; reg0=reg6*reg0;
    reg1=reg1/0.027777777777777783175; reg6=reg8*elem.proute[1](1,1); T reg9=reg4*elem.proute[0](1,1); reg0=reg7*reg0; reg0=reg0/0.027777777777777783175;
    reg2=reg5*reg2; reg9=reg6-reg9; reg5=reg1*elem.proute[2](1,1); reg5=reg9+reg5; reg6=reg0*elem.proute[3](1,1);
    reg7=elem.pos(1)[1]-elem.pos(0)[1]; reg2=reg2/0.083333333333333342585; reg9=elem.pos(1)[2]-elem.pos(0)[2]; T reg10=elem.pos(2)[1]-elem.pos(0)[1]; T reg11=elem.pos(2)[2]-elem.pos(0)[2];
    T reg12=elem.pos(3)[1]-elem.pos(0)[1]; T reg13=elem.pos(3)[2]-elem.pos(0)[2]; T reg14=reg10*reg13; T reg15=reg7*reg13; T reg16=reg11*reg12;
    T reg17=reg9*reg12; T reg18=1-var_inter[0]; reg6=reg5+reg6; reg5=reg2*elem.proute[4](1,1); T reg19=reg9*reg10;
    T reg20=reg7*reg11; T reg21=elem.pos(1)[0]-elem.pos(0)[0]; T reg22=elem.pos(2)[0]-elem.pos(0)[0]; reg17=reg15-reg17; reg18=reg18-var_inter[1];
    reg5=reg6+reg5; reg16=reg14-reg16; reg19=reg20-reg19; reg6=reg22*reg17; reg14=reg21*reg16;
    reg15=elem.pos(3)[0]-elem.pos(0)[0]; reg20=reg18-var_inter[2]; T reg23=reg5+(*f.m).f_vol[2]; T reg24=reg5+(*f.m).f_vol[1]; reg5=reg5+(*f.m).f_vol[0];
    T reg25=var_inter[2]*reg23; T reg26=var_inter[2]*reg5; T reg27=var_inter[1]*reg23; T reg28=var_inter[1]*reg24; T reg29=var_inter[1]*reg5;
    T reg30=var_inter[2]*reg24; T reg31=var_inter[0]*reg23; T reg32=var_inter[0]*reg24; T reg33=var_inter[0]*reg5; T reg34=reg20*reg23;
    T reg35=reg20*reg5; T reg36=reg20*reg24; reg6=reg14-reg6; reg14=reg15*reg19; reg25=(*f.m).density*reg25;
    reg26=(*f.m).density*reg26; reg27=(*f.m).density*reg27; reg14=reg6+reg14; reg28=(*f.m).density*reg28; reg29=(*f.m).density*reg29;
    reg30=(*f.m).density*reg30; reg31=(*f.m).density*reg31; reg36=(*f.m).density*reg36; reg32=(*f.m).density*reg32; reg33=(*f.m).density*reg33;
    reg35=(*f.m).density*reg35; reg34=(*f.m).density*reg34; reg6=reg14*reg25; T reg37=reg14*reg30; T reg38=reg14*reg26;
    T reg39=reg14*reg27; T reg40=reg14*reg28; T reg41=reg14*reg29; T reg42=reg14*reg31; T reg43=reg14*reg32;
    T reg44=reg14*reg33; T reg45=reg14*reg35; T reg46=reg14*reg34; T reg47=reg14*reg36; T reg48=ponderation*reg6;
    sollicitation[indices[3]+2]+=reg48; T reg49=ponderation*reg37; sollicitation[indices[3]+1]+=reg49; T reg50=ponderation*reg38; sollicitation[indices[3]+0]+=reg50;
    T reg51=ponderation*reg45; sollicitation[indices[0]+0]+=reg51; T reg52=ponderation*reg39; sollicitation[indices[2]+2]+=reg52; T reg53=ponderation*reg40;
    sollicitation[indices[2]+1]+=reg53; T reg54=ponderation*reg47; sollicitation[indices[0]+1]+=reg54; T reg55=ponderation*reg41; sollicitation[indices[2]+0]+=reg55;
    T reg56=ponderation*reg42; sollicitation[indices[1]+2]+=reg56; T reg57=ponderation*reg46; sollicitation[indices[0]+2]+=reg57; T reg58=ponderation*reg43;
    sollicitation[indices[1]+1]+=reg58; T reg59=ponderation*reg44; sollicitation[indices[1]+0]+=reg59;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_0[2]*(*f.m).lim_cond_0; T reg1=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg3=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg4=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[2];
    T reg5=PNODE(0).dep_imp_val_0_1[0]*(*f.m).lim_cond_1; T reg6=reg4+reg0; T reg7=reg2+reg1; T reg8=reg3+reg5; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0;
    matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0; T reg9=PNODE(0).dep_imp_coef_0*reg7; T reg10=PNODE(0).dep_imp_coef_0*reg8; T reg11=PNODE(0).dep_imp_coef_0*reg6;
    T reg12=PNODE(0).f_nodal[0]+reg10; sollicitation[indices[0]+0]+=reg12; T reg13=PNODE(0).f_nodal[1]+reg9; sollicitation[indices[0]+1]+=reg13; T reg14=PNODE(0).f_nodal[2]+reg11;
    sollicitation[indices[0]+2]+=reg14;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_0[2]*(*f.m).lim_cond_0; T reg1=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg3=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg4=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[2];
    T reg5=PNODE(0).dep_imp_val_0_1[0]*(*f.m).lim_cond_1; T reg6=reg4+reg0; T reg7=reg2+reg1; T reg8=reg3+reg5; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0;
    matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0; T reg9=PNODE(0).dep_imp_coef_0*reg7; T reg10=PNODE(0).dep_imp_coef_0*reg8; T reg11=PNODE(0).dep_imp_coef_0*reg6;
    T reg12=PNODE(0).f_nodal[0]+reg10; sollicitation[indices[0]+0]+=reg12; T reg13=PNODE(0).f_nodal[1]+reg9; sollicitation[indices[0]+1]+=reg13; T reg14=PNODE(0).f_nodal[2]+reg11;
    sollicitation[indices[0]+2]+=reg14;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_0[2]*(*f.m).lim_cond_0; T reg1=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg3=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg4=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[2];
    T reg5=PNODE(0).dep_imp_val_0_1[0]*(*f.m).lim_cond_1; T reg6=reg4+reg0; T reg7=reg2+reg1; T reg8=reg3+reg5; T reg9=PNODE(0).dep_imp_coef_0*reg7;
    T reg10=PNODE(0).dep_imp_coef_0*reg8; T reg11=PNODE(0).dep_imp_coef_0*reg6; T reg12=PNODE(0).f_nodal[0]+reg10; sollicitation[indices[0]+0]+=reg12; T reg13=PNODE(0).f_nodal[1]+reg9;
    sollicitation[indices[0]+1]+=reg13; T reg14=PNODE(0).f_nodal[2]+reg11; sollicitation[indices[0]+2]+=reg14;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
  #undef PNODE
}
#endif
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(0)[1]; T reg1=elem.pos(2)[0]-elem.pos(0)[0]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); T reg4=elem.pos(2)[2]-elem.pos(0)[2];
    reg3=reg2+reg3; reg2=pow(reg4,2); reg2=reg3+reg2; reg2=pow(reg2,0.5); reg3=elem.pos(1)[1]-elem.pos(0)[1];
    T reg5=elem.pos(1)[0]-elem.pos(0)[0]; T reg6=reg1/reg2; T reg7=reg0/reg2; T reg8=reg5*reg6; reg2=reg4/reg2;
    T reg9=reg3*reg7; T reg10=elem.pos(1)[2]-elem.pos(0)[2]; reg9=reg8+reg9; reg8=reg10*reg2; reg8=reg9+reg8;
    reg9=reg6*reg8; T reg11=reg7*reg8; reg9=reg5-reg9; reg11=reg3-reg11; T reg12=reg2*reg8;
    T reg13=pow(reg9,2); T reg14=pow(reg11,2); reg12=reg10-reg12; T reg15=pow(reg12,2); reg14=reg13+reg14;
    reg15=reg14+reg15; reg15=pow(reg15,0.5); reg9=reg9/reg15; reg11=reg11/reg15; reg15=reg12/reg15;
    reg12=reg5*reg9; reg13=reg7*reg15; reg14=reg2*reg11; T reg16=reg3*reg11; T reg17=reg2*reg9;
    T reg18=reg6*reg15; T reg19=reg6*reg11; T reg20=reg7*reg9; reg6=reg1*reg6; reg9=reg1*reg9;
    reg11=reg0*reg11; reg7=reg0*reg7; reg16=reg12+reg16; reg12=reg10*reg15; reg15=reg4*reg15;
    reg11=reg9+reg11; reg14=reg13-reg14; reg18=reg17-reg18; reg20=reg19-reg20; reg2=reg4*reg2;
    reg7=reg6+reg7; reg14=skin_elem.p*reg14; reg18=skin_elem.p*reg18; reg15=reg11+reg15; reg20=skin_elem.p*reg20;
    reg12=reg16+reg12; reg2=reg7+reg2; reg6=0.33333333333333331483*skin_elem.f_surf[0]; reg7=0.33333333333333331483*reg14; reg9=0.33333333333333337034*reg20;
    reg11=0.33333333333333337034*skin_elem.f_surf[2]; reg13=0.33333333333333331483*skin_elem.f_surf[1]; reg16=0.33333333333333331483*reg18; reg17=0.33333333333333337034*reg18; reg19=0.33333333333333337034*skin_elem.f_surf[1];
    T reg21=0.33333333333333331483*skin_elem.f_surf[2]; T reg22=0.33333333333333331483*reg20; T reg23=0.33333333333333337034*reg14; T reg24=0.33333333333333337034*skin_elem.f_surf[0]; reg15=reg8*reg15;
    reg12=reg2*reg12; reg22=reg22+reg21; reg7=reg6+reg7; reg16=reg13+reg16; reg9=reg11+reg9;
    reg17=reg19+reg17; reg15=reg12-reg15; reg23=reg24+reg23; reg9=reg15*reg9; reg7=reg15*reg7;
    reg17=reg15*reg17; reg16=reg15*reg16; reg23=reg23*reg15; reg22=reg15*reg22; reg9=0.5*reg9;
    sollicitation[indices[0]+2]+=reg9; reg7=0.5*reg7; sollicitation[indices[1]+0]+=reg7; sollicitation[indices[2]+0]+=reg7; reg17=0.5*reg17;
    sollicitation[indices[0]+1]+=reg17; reg16=0.5*reg16; sollicitation[indices[1]+1]+=reg16; sollicitation[indices[2]+1]+=reg16; reg23=0.5*reg23;
    sollicitation[indices[0]+0]+=reg23; reg22=0.5*reg22; sollicitation[indices[1]+2]+=reg22; sollicitation[indices[2]+2]+=reg22;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(0)[1]; T reg1=elem.pos(2)[0]-elem.pos(0)[0]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); T reg4=elem.pos(2)[2]-elem.pos(0)[2];
    reg3=reg2+reg3; reg2=pow(reg4,2); reg2=reg3+reg2; reg2=pow(reg2,0.5); reg3=elem.pos(1)[1]-elem.pos(0)[1];
    T reg5=elem.pos(1)[0]-elem.pos(0)[0]; T reg6=reg1/reg2; T reg7=reg0/reg2; T reg8=reg5*reg6; reg2=reg4/reg2;
    T reg9=reg3*reg7; T reg10=elem.pos(1)[2]-elem.pos(0)[2]; reg9=reg8+reg9; reg8=reg10*reg2; reg8=reg9+reg8;
    reg9=reg6*reg8; T reg11=reg7*reg8; reg9=reg5-reg9; reg11=reg3-reg11; T reg12=reg2*reg8;
    T reg13=pow(reg9,2); T reg14=pow(reg11,2); reg12=reg10-reg12; T reg15=pow(reg12,2); reg14=reg13+reg14;
    reg15=reg14+reg15; reg15=pow(reg15,0.5); reg9=reg9/reg15; reg11=reg11/reg15; reg15=reg12/reg15;
    reg12=reg5*reg9; reg13=reg7*reg15; reg14=reg2*reg11; T reg16=reg3*reg11; T reg17=reg2*reg9;
    T reg18=reg6*reg15; T reg19=reg6*reg11; T reg20=reg7*reg9; reg6=reg1*reg6; reg9=reg1*reg9;
    reg11=reg0*reg11; reg7=reg0*reg7; reg16=reg12+reg16; reg12=reg10*reg15; reg15=reg4*reg15;
    reg11=reg9+reg11; reg14=reg13-reg14; reg18=reg17-reg18; reg20=reg19-reg20; reg2=reg4*reg2;
    reg7=reg6+reg7; reg14=skin_elem.p*reg14; reg18=skin_elem.p*reg18; reg15=reg11+reg15; reg20=skin_elem.p*reg20;
    reg12=reg16+reg12; reg2=reg7+reg2; reg6=0.33333333333333331483*skin_elem.f_surf[0]; reg7=0.33333333333333331483*reg14; reg9=0.33333333333333337034*reg20;
    reg11=0.33333333333333337034*skin_elem.f_surf[2]; reg13=0.33333333333333331483*skin_elem.f_surf[1]; reg16=0.33333333333333331483*reg18; reg17=0.33333333333333337034*reg18; reg19=0.33333333333333337034*skin_elem.f_surf[1];
    T reg21=0.33333333333333331483*skin_elem.f_surf[2]; T reg22=0.33333333333333331483*reg20; T reg23=0.33333333333333337034*reg14; T reg24=0.33333333333333337034*skin_elem.f_surf[0]; reg15=reg8*reg15;
    reg12=reg2*reg12; reg22=reg22+reg21; reg7=reg6+reg7; reg16=reg13+reg16; reg9=reg11+reg9;
    reg17=reg19+reg17; reg15=reg12-reg15; reg23=reg24+reg23; reg9=reg15*reg9; reg7=reg15*reg7;
    reg17=reg15*reg17; reg16=reg15*reg16; reg23=reg23*reg15; reg22=reg15*reg22; reg9=0.5*reg9;
    sollicitation[indices[0]+2]+=reg9; reg7=0.5*reg7; sollicitation[indices[1]+0]+=reg7; sollicitation[indices[2]+0]+=reg7; reg17=0.5*reg17;
    sollicitation[indices[0]+1]+=reg17; reg16=0.5*reg16; sollicitation[indices[1]+1]+=reg16; sollicitation[indices[2]+1]+=reg16; reg23=0.5*reg23;
    sollicitation[indices[0]+0]+=reg23; reg22=0.5*reg22; sollicitation[indices[1]+2]+=reg22; sollicitation[indices[2]+2]+=reg22;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(0)[1]; T reg1=elem.pos(2)[0]-elem.pos(0)[0]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); T reg4=elem.pos(2)[2]-elem.pos(0)[2];
    reg3=reg2+reg3; reg2=pow(reg4,2); reg2=reg3+reg2; reg2=pow(reg2,0.5); reg3=elem.pos(1)[1]-elem.pos(0)[1];
    T reg5=elem.pos(1)[0]-elem.pos(0)[0]; T reg6=reg1/reg2; T reg7=reg0/reg2; T reg8=reg5*reg6; reg2=reg4/reg2;
    T reg9=reg3*reg7; T reg10=elem.pos(1)[2]-elem.pos(0)[2]; reg9=reg8+reg9; reg8=reg10*reg2; reg8=reg9+reg8;
    reg9=reg6*reg8; T reg11=reg7*reg8; reg9=reg5-reg9; reg11=reg3-reg11; T reg12=reg2*reg8;
    T reg13=pow(reg9,2); T reg14=pow(reg11,2); reg12=reg10-reg12; T reg15=pow(reg12,2); reg14=reg13+reg14;
    reg15=reg14+reg15; reg15=pow(reg15,0.5); reg9=reg9/reg15; reg11=reg11/reg15; reg15=reg12/reg15;
    reg12=reg5*reg9; reg13=reg7*reg15; reg14=reg2*reg11; T reg16=reg3*reg11; T reg17=reg2*reg9;
    T reg18=reg6*reg15; T reg19=reg6*reg11; T reg20=reg7*reg9; reg6=reg1*reg6; reg9=reg1*reg9;
    reg11=reg0*reg11; reg7=reg0*reg7; reg16=reg12+reg16; reg12=reg10*reg15; reg15=reg4*reg15;
    reg11=reg9+reg11; reg14=reg13-reg14; reg18=reg17-reg18; reg20=reg19-reg20; reg2=reg4*reg2;
    reg7=reg6+reg7; reg14=skin_elem.p*reg14; reg18=skin_elem.p*reg18; reg15=reg11+reg15; reg20=skin_elem.p*reg20;
    reg12=reg16+reg12; reg2=reg7+reg2; reg6=0.33333333333333331483*skin_elem.f_surf[0]; reg7=0.33333333333333331483*reg14; reg9=0.33333333333333337034*reg20;
    reg11=0.33333333333333337034*skin_elem.f_surf[2]; reg13=0.33333333333333331483*skin_elem.f_surf[1]; reg16=0.33333333333333331483*reg18; reg17=0.33333333333333337034*reg18; reg19=0.33333333333333337034*skin_elem.f_surf[1];
    T reg21=0.33333333333333331483*skin_elem.f_surf[2]; T reg22=0.33333333333333331483*reg20; T reg23=0.33333333333333337034*reg14; T reg24=0.33333333333333337034*skin_elem.f_surf[0]; reg15=reg8*reg15;
    reg12=reg2*reg12; reg22=reg22+reg21; reg7=reg6+reg7; reg16=reg13+reg16; reg9=reg11+reg9;
    reg17=reg19+reg17; reg15=reg12-reg15; reg23=reg24+reg23; reg9=reg15*reg9; reg7=reg15*reg7;
    reg17=reg15*reg17; reg16=reg15*reg16; reg23=reg23*reg15; reg22=reg15*reg22; reg9=0.5*reg9;
    sollicitation[indices[0]+2]+=reg9; reg7=0.5*reg7; sollicitation[indices[1]+0]+=reg7; sollicitation[indices[2]+0]+=reg7; reg17=0.5*reg17;
    sollicitation[indices[0]+1]+=reg17; reg16=0.5*reg16; sollicitation[indices[1]+1]+=reg16; sollicitation[indices[2]+1]+=reg16; reg23=0.5*reg23;
    sollicitation[indices[0]+0]+=reg23; reg22=0.5*reg22; sollicitation[indices[1]+2]+=reg22; sollicitation[indices[2]+2]+=reg22;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); T reg4=elem.pos(1)[2]-elem.pos(0)[2];
    T reg5=pow(reg4,2); reg3=reg2+reg3; reg5=reg3+reg5; reg5=pow(reg5,0.5); reg2=reg1/reg5;
    reg3=reg0/reg5; T reg6=elem.pos(3)[0]-elem.pos(0)[0]; T reg7=elem.pos(3)[1]-elem.pos(0)[1]; T reg8=elem.pos(3)[2]-elem.pos(0)[2]; T reg9=reg7*reg3;
    T reg10=reg6*reg2; reg5=reg4/reg5; T reg11=reg8*reg5; reg9=reg10+reg9; reg11=reg9+reg11;
    reg9=reg3*reg11; reg10=reg2*reg11; T reg12=reg5*reg11; reg9=reg7-reg9; reg10=reg6-reg10;
    reg12=reg8-reg12; T reg13=pow(reg9,2); T reg14=pow(reg10,2); T reg15=pow(reg12,2); reg13=reg14+reg13;
    reg15=reg13+reg15; reg15=pow(reg15,0.5); reg12=reg12/reg15; reg9=reg9/reg15; reg15=reg10/reg15;
    reg10=reg0*reg3; reg13=reg1*reg2; reg14=reg7*reg9; T reg16=reg6*reg15; T reg17=reg3*reg15;
    T reg18=reg0*reg9; T reg19=reg1*reg15; T reg20=reg2*reg9; reg3=reg3*reg12; reg9=reg5*reg9;
    reg15=reg5*reg15; reg2=reg2*reg12; T reg21=reg8*reg12; reg9=reg3-reg9; reg10=reg13+reg10;
    reg17=reg20-reg17; reg5=reg4*reg5; reg2=reg15-reg2; reg14=reg16+reg14; reg18=reg19+reg18;
    reg12=reg4*reg12; reg9=skin_elem.p*reg9; reg17=skin_elem.p*reg17; reg12=reg18+reg12; reg5=reg10+reg5;
    reg2=skin_elem.p*reg2; reg21=reg14+reg21; reg12=reg11*reg12; reg21=reg5*reg21; reg3=0.33333333333333337034*skin_elem.f_surf[0];
    reg5=0.33333333333333337034*skin_elem.f_surf[1]; reg10=0.33333333333333337034*skin_elem.f_surf[2]; reg11=0.33333333333333331483*reg17; reg13=0.33333333333333337034*reg9; reg14=0.33333333333333331483*skin_elem.f_surf[0];
    reg15=0.33333333333333331483*skin_elem.f_surf[1]; reg16=0.33333333333333331483*skin_elem.f_surf[2]; reg18=0.33333333333333331483*reg9; reg19=0.33333333333333331483*reg2; reg20=0.33333333333333337034*reg17;
    T reg22=0.33333333333333337034*reg2; reg20=reg10+reg20; reg11=reg11+reg16; reg19=reg15+reg19; reg12=reg21-reg12;
    reg22=reg5+reg22; reg13=reg3+reg13; reg18=reg14+reg18; reg19=reg19*reg12; reg13=reg13*reg12;
    reg18=reg18*reg12; reg22=reg22*reg12; reg20=reg20*reg12; reg11=reg12*reg11; reg19=0.5*reg19;
    sollicitation[indices[1]+1]+=reg19; sollicitation[indices[3]+1]+=reg19; reg11=0.5*reg11; sollicitation[indices[1]+2]+=reg11; sollicitation[indices[3]+2]+=reg11;
    reg18=0.5*reg18; sollicitation[indices[1]+0]+=reg18; sollicitation[indices[3]+0]+=reg18; reg20=0.5*reg20; sollicitation[indices[0]+2]+=reg20;
    reg22=0.5*reg22; sollicitation[indices[0]+1]+=reg22; reg13=0.5*reg13; sollicitation[indices[0]+0]+=reg13;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); T reg4=elem.pos(1)[2]-elem.pos(0)[2];
    T reg5=pow(reg4,2); reg3=reg2+reg3; reg5=reg3+reg5; reg5=pow(reg5,0.5); reg2=reg1/reg5;
    reg3=reg0/reg5; T reg6=elem.pos(3)[0]-elem.pos(0)[0]; T reg7=elem.pos(3)[1]-elem.pos(0)[1]; T reg8=elem.pos(3)[2]-elem.pos(0)[2]; T reg9=reg7*reg3;
    T reg10=reg6*reg2; reg5=reg4/reg5; T reg11=reg8*reg5; reg9=reg10+reg9; reg11=reg9+reg11;
    reg9=reg3*reg11; reg10=reg2*reg11; T reg12=reg5*reg11; reg9=reg7-reg9; reg10=reg6-reg10;
    reg12=reg8-reg12; T reg13=pow(reg9,2); T reg14=pow(reg10,2); T reg15=pow(reg12,2); reg13=reg14+reg13;
    reg15=reg13+reg15; reg15=pow(reg15,0.5); reg12=reg12/reg15; reg9=reg9/reg15; reg15=reg10/reg15;
    reg10=reg0*reg3; reg13=reg1*reg2; reg14=reg7*reg9; T reg16=reg6*reg15; T reg17=reg3*reg15;
    T reg18=reg0*reg9; T reg19=reg1*reg15; T reg20=reg2*reg9; reg3=reg3*reg12; reg9=reg5*reg9;
    reg15=reg5*reg15; reg2=reg2*reg12; T reg21=reg8*reg12; reg9=reg3-reg9; reg10=reg13+reg10;
    reg17=reg20-reg17; reg5=reg4*reg5; reg2=reg15-reg2; reg14=reg16+reg14; reg18=reg19+reg18;
    reg12=reg4*reg12; reg9=skin_elem.p*reg9; reg17=skin_elem.p*reg17; reg12=reg18+reg12; reg5=reg10+reg5;
    reg2=skin_elem.p*reg2; reg21=reg14+reg21; reg12=reg11*reg12; reg21=reg5*reg21; reg3=0.33333333333333337034*skin_elem.f_surf[0];
    reg5=0.33333333333333337034*skin_elem.f_surf[1]; reg10=0.33333333333333337034*skin_elem.f_surf[2]; reg11=0.33333333333333331483*reg17; reg13=0.33333333333333337034*reg9; reg14=0.33333333333333331483*skin_elem.f_surf[0];
    reg15=0.33333333333333331483*skin_elem.f_surf[1]; reg16=0.33333333333333331483*skin_elem.f_surf[2]; reg18=0.33333333333333331483*reg9; reg19=0.33333333333333331483*reg2; reg20=0.33333333333333337034*reg17;
    T reg22=0.33333333333333337034*reg2; reg20=reg10+reg20; reg11=reg11+reg16; reg19=reg15+reg19; reg12=reg21-reg12;
    reg22=reg5+reg22; reg13=reg3+reg13; reg18=reg14+reg18; reg19=reg19*reg12; reg13=reg13*reg12;
    reg18=reg18*reg12; reg22=reg22*reg12; reg20=reg20*reg12; reg11=reg12*reg11; reg19=0.5*reg19;
    sollicitation[indices[1]+1]+=reg19; sollicitation[indices[3]+1]+=reg19; reg11=0.5*reg11; sollicitation[indices[1]+2]+=reg11; sollicitation[indices[3]+2]+=reg11;
    reg18=0.5*reg18; sollicitation[indices[1]+0]+=reg18; sollicitation[indices[3]+0]+=reg18; reg20=0.5*reg20; sollicitation[indices[0]+2]+=reg20;
    reg22=0.5*reg22; sollicitation[indices[0]+1]+=reg22; reg13=0.5*reg13; sollicitation[indices[0]+0]+=reg13;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); T reg4=elem.pos(1)[2]-elem.pos(0)[2];
    T reg5=pow(reg4,2); reg3=reg2+reg3; reg5=reg3+reg5; reg5=pow(reg5,0.5); reg2=reg1/reg5;
    reg3=reg0/reg5; T reg6=elem.pos(3)[0]-elem.pos(0)[0]; T reg7=elem.pos(3)[1]-elem.pos(0)[1]; T reg8=elem.pos(3)[2]-elem.pos(0)[2]; T reg9=reg7*reg3;
    T reg10=reg6*reg2; reg5=reg4/reg5; T reg11=reg8*reg5; reg9=reg10+reg9; reg11=reg9+reg11;
    reg9=reg3*reg11; reg10=reg2*reg11; T reg12=reg5*reg11; reg9=reg7-reg9; reg10=reg6-reg10;
    reg12=reg8-reg12; T reg13=pow(reg9,2); T reg14=pow(reg10,2); T reg15=pow(reg12,2); reg13=reg14+reg13;
    reg15=reg13+reg15; reg15=pow(reg15,0.5); reg12=reg12/reg15; reg9=reg9/reg15; reg15=reg10/reg15;
    reg10=reg0*reg3; reg13=reg1*reg2; reg14=reg7*reg9; T reg16=reg6*reg15; T reg17=reg3*reg15;
    T reg18=reg0*reg9; T reg19=reg1*reg15; T reg20=reg2*reg9; reg3=reg3*reg12; reg9=reg5*reg9;
    reg15=reg5*reg15; reg2=reg2*reg12; T reg21=reg8*reg12; reg9=reg3-reg9; reg10=reg13+reg10;
    reg17=reg20-reg17; reg5=reg4*reg5; reg2=reg15-reg2; reg14=reg16+reg14; reg18=reg19+reg18;
    reg12=reg4*reg12; reg9=skin_elem.p*reg9; reg17=skin_elem.p*reg17; reg12=reg18+reg12; reg5=reg10+reg5;
    reg2=skin_elem.p*reg2; reg21=reg14+reg21; reg12=reg11*reg12; reg21=reg5*reg21; reg3=0.33333333333333337034*skin_elem.f_surf[0];
    reg5=0.33333333333333337034*skin_elem.f_surf[1]; reg10=0.33333333333333337034*skin_elem.f_surf[2]; reg11=0.33333333333333331483*reg17; reg13=0.33333333333333337034*reg9; reg14=0.33333333333333331483*skin_elem.f_surf[0];
    reg15=0.33333333333333331483*skin_elem.f_surf[1]; reg16=0.33333333333333331483*skin_elem.f_surf[2]; reg18=0.33333333333333331483*reg9; reg19=0.33333333333333331483*reg2; reg20=0.33333333333333337034*reg17;
    T reg22=0.33333333333333337034*reg2; reg20=reg10+reg20; reg11=reg11+reg16; reg19=reg15+reg19; reg12=reg21-reg12;
    reg22=reg5+reg22; reg13=reg3+reg13; reg18=reg14+reg18; reg19=reg19*reg12; reg13=reg13*reg12;
    reg18=reg18*reg12; reg22=reg22*reg12; reg20=reg20*reg12; reg11=reg12*reg11; reg19=0.5*reg19;
    sollicitation[indices[1]+1]+=reg19; sollicitation[indices[3]+1]+=reg19; reg11=0.5*reg11; sollicitation[indices[1]+2]+=reg11; sollicitation[indices[3]+2]+=reg11;
    reg18=0.5*reg18; sollicitation[indices[1]+0]+=reg18; sollicitation[indices[3]+0]+=reg18; reg20=0.5*reg20; sollicitation[indices[0]+2]+=reg20;
    reg22=0.5*reg22; sollicitation[indices[0]+1]+=reg22; reg13=0.5*reg13; sollicitation[indices[0]+0]+=reg13;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(3)[0]-elem.pos(0)[0]; T reg1=elem.pos(3)[1]-elem.pos(0)[1]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); T reg4=elem.pos(3)[2]-elem.pos(0)[2];
    T reg5=pow(reg4,2); reg2=reg3+reg2; reg5=reg2+reg5; reg5=pow(reg5,0.5); reg2=elem.pos(2)[0]-elem.pos(0)[0];
    reg3=elem.pos(2)[1]-elem.pos(0)[1]; T reg6=reg1/reg5; T reg7=reg0/reg5; T reg8=reg3*reg6; T reg9=reg2*reg7;
    T reg10=elem.pos(2)[2]-elem.pos(0)[2]; reg5=reg4/reg5; T reg11=reg10*reg5; reg8=reg9+reg8; reg11=reg8+reg11;
    reg8=reg7*reg11; reg9=reg6*reg11; reg9=reg3-reg9; reg8=reg2-reg8; T reg12=reg5*reg11;
    T reg13=pow(reg9,2); T reg14=pow(reg8,2); reg12=reg10-reg12; reg13=reg14+reg13; reg14=pow(reg12,2);
    reg14=reg13+reg14; reg14=pow(reg14,0.5); reg9=reg9/reg14; reg8=reg8/reg14; reg14=reg12/reg14;
    reg12=reg1*reg6; reg13=reg0*reg7; T reg15=reg9*reg5; T reg16=reg14*reg6; T reg17=reg2*reg8;
    T reg18=reg3*reg9; T reg19=reg8*reg5; T reg20=reg14*reg7; T reg21=reg1*reg9; reg7=reg9*reg7;
    reg6=reg8*reg6; reg8=reg0*reg8; reg21=reg8+reg21; reg8=reg4*reg14; reg6=reg7-reg6;
    reg5=reg4*reg5; reg12=reg13+reg12; reg20=reg19-reg20; reg14=reg10*reg14; reg15=reg16-reg15;
    reg17=reg18+reg17; reg20=skin_elem.p*reg20; reg6=skin_elem.p*reg6; reg8=reg21+reg8; reg15=skin_elem.p*reg15;
    reg14=reg17+reg14; reg5=reg12+reg5; reg7=0.33333333333333331483*reg15; reg9=0.33333333333333337034*reg6; reg12=0.33333333333333331483*reg6;
    reg13=0.33333333333333331483*reg20; reg16=0.33333333333333337034*reg20; reg5=reg14*reg5; reg14=0.33333333333333337034*skin_elem.f_surf[0]; reg17=0.33333333333333337034*skin_elem.f_surf[1];
    reg18=0.33333333333333337034*skin_elem.f_surf[2]; reg19=0.33333333333333331483*skin_elem.f_surf[0]; reg21=0.33333333333333331483*skin_elem.f_surf[1]; T reg22=0.33333333333333331483*skin_elem.f_surf[2]; reg11=reg8*reg11;
    reg8=0.33333333333333337034*reg15; reg13=reg21+reg13; reg16=reg17+reg16; reg11=reg5-reg11; reg8=reg14+reg8;
    reg9=reg18+reg9; reg12=reg22+reg12; reg7=reg19+reg7; reg13=reg11*reg13; reg7=reg11*reg7;
    reg9=reg11*reg9; reg12=reg11*reg12; reg16=reg11*reg16; reg8=reg11*reg8; reg12=0.5*reg12;
    sollicitation[indices[2]+2]+=reg12; sollicitation[indices[3]+2]+=reg12; reg13=0.5*reg13; sollicitation[indices[2]+1]+=reg13; sollicitation[indices[3]+1]+=reg13;
    reg7=0.5*reg7; sollicitation[indices[2]+0]+=reg7; sollicitation[indices[3]+0]+=reg7; reg9=0.5*reg9; sollicitation[indices[0]+2]+=reg9;
    reg16=0.5*reg16; sollicitation[indices[0]+1]+=reg16; reg8=0.5*reg8; sollicitation[indices[0]+0]+=reg8;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(3)[0]-elem.pos(0)[0]; T reg1=elem.pos(3)[1]-elem.pos(0)[1]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); T reg4=elem.pos(3)[2]-elem.pos(0)[2];
    T reg5=pow(reg4,2); reg2=reg3+reg2; reg5=reg2+reg5; reg5=pow(reg5,0.5); reg2=elem.pos(2)[0]-elem.pos(0)[0];
    reg3=elem.pos(2)[1]-elem.pos(0)[1]; T reg6=reg1/reg5; T reg7=reg0/reg5; T reg8=reg3*reg6; T reg9=reg2*reg7;
    T reg10=elem.pos(2)[2]-elem.pos(0)[2]; reg5=reg4/reg5; T reg11=reg10*reg5; reg8=reg9+reg8; reg11=reg8+reg11;
    reg8=reg7*reg11; reg9=reg6*reg11; reg9=reg3-reg9; reg8=reg2-reg8; T reg12=reg5*reg11;
    T reg13=pow(reg9,2); T reg14=pow(reg8,2); reg12=reg10-reg12; reg13=reg14+reg13; reg14=pow(reg12,2);
    reg14=reg13+reg14; reg14=pow(reg14,0.5); reg9=reg9/reg14; reg8=reg8/reg14; reg14=reg12/reg14;
    reg12=reg1*reg6; reg13=reg0*reg7; T reg15=reg9*reg5; T reg16=reg14*reg6; T reg17=reg2*reg8;
    T reg18=reg3*reg9; T reg19=reg8*reg5; T reg20=reg14*reg7; T reg21=reg1*reg9; reg7=reg9*reg7;
    reg6=reg8*reg6; reg8=reg0*reg8; reg21=reg8+reg21; reg8=reg4*reg14; reg6=reg7-reg6;
    reg5=reg4*reg5; reg12=reg13+reg12; reg20=reg19-reg20; reg14=reg10*reg14; reg15=reg16-reg15;
    reg17=reg18+reg17; reg20=skin_elem.p*reg20; reg6=skin_elem.p*reg6; reg8=reg21+reg8; reg15=skin_elem.p*reg15;
    reg14=reg17+reg14; reg5=reg12+reg5; reg7=0.33333333333333331483*reg15; reg9=0.33333333333333337034*reg6; reg12=0.33333333333333331483*reg6;
    reg13=0.33333333333333331483*reg20; reg16=0.33333333333333337034*reg20; reg5=reg14*reg5; reg14=0.33333333333333337034*skin_elem.f_surf[0]; reg17=0.33333333333333337034*skin_elem.f_surf[1];
    reg18=0.33333333333333337034*skin_elem.f_surf[2]; reg19=0.33333333333333331483*skin_elem.f_surf[0]; reg21=0.33333333333333331483*skin_elem.f_surf[1]; T reg22=0.33333333333333331483*skin_elem.f_surf[2]; reg11=reg8*reg11;
    reg8=0.33333333333333337034*reg15; reg13=reg21+reg13; reg16=reg17+reg16; reg11=reg5-reg11; reg8=reg14+reg8;
    reg9=reg18+reg9; reg12=reg22+reg12; reg7=reg19+reg7; reg13=reg11*reg13; reg7=reg11*reg7;
    reg9=reg11*reg9; reg12=reg11*reg12; reg16=reg11*reg16; reg8=reg11*reg8; reg12=0.5*reg12;
    sollicitation[indices[2]+2]+=reg12; sollicitation[indices[3]+2]+=reg12; reg13=0.5*reg13; sollicitation[indices[2]+1]+=reg13; sollicitation[indices[3]+1]+=reg13;
    reg7=0.5*reg7; sollicitation[indices[2]+0]+=reg7; sollicitation[indices[3]+0]+=reg7; reg9=0.5*reg9; sollicitation[indices[0]+2]+=reg9;
    reg16=0.5*reg16; sollicitation[indices[0]+1]+=reg16; reg8=0.5*reg8; sollicitation[indices[0]+0]+=reg8;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(3)[0]-elem.pos(0)[0]; T reg1=elem.pos(3)[1]-elem.pos(0)[1]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); T reg4=elem.pos(3)[2]-elem.pos(0)[2];
    T reg5=pow(reg4,2); reg2=reg3+reg2; reg5=reg2+reg5; reg5=pow(reg5,0.5); reg2=elem.pos(2)[0]-elem.pos(0)[0];
    reg3=elem.pos(2)[1]-elem.pos(0)[1]; T reg6=reg1/reg5; T reg7=reg0/reg5; T reg8=reg3*reg6; T reg9=reg2*reg7;
    T reg10=elem.pos(2)[2]-elem.pos(0)[2]; reg5=reg4/reg5; T reg11=reg10*reg5; reg8=reg9+reg8; reg11=reg8+reg11;
    reg8=reg7*reg11; reg9=reg6*reg11; reg9=reg3-reg9; reg8=reg2-reg8; T reg12=reg5*reg11;
    T reg13=pow(reg9,2); T reg14=pow(reg8,2); reg12=reg10-reg12; reg13=reg14+reg13; reg14=pow(reg12,2);
    reg14=reg13+reg14; reg14=pow(reg14,0.5); reg9=reg9/reg14; reg8=reg8/reg14; reg14=reg12/reg14;
    reg12=reg1*reg6; reg13=reg0*reg7; T reg15=reg9*reg5; T reg16=reg14*reg6; T reg17=reg2*reg8;
    T reg18=reg3*reg9; T reg19=reg8*reg5; T reg20=reg14*reg7; T reg21=reg1*reg9; reg7=reg9*reg7;
    reg6=reg8*reg6; reg8=reg0*reg8; reg21=reg8+reg21; reg8=reg4*reg14; reg6=reg7-reg6;
    reg5=reg4*reg5; reg12=reg13+reg12; reg20=reg19-reg20; reg14=reg10*reg14; reg15=reg16-reg15;
    reg17=reg18+reg17; reg20=skin_elem.p*reg20; reg6=skin_elem.p*reg6; reg8=reg21+reg8; reg15=skin_elem.p*reg15;
    reg14=reg17+reg14; reg5=reg12+reg5; reg7=0.33333333333333331483*reg15; reg9=0.33333333333333337034*reg6; reg12=0.33333333333333331483*reg6;
    reg13=0.33333333333333331483*reg20; reg16=0.33333333333333337034*reg20; reg5=reg14*reg5; reg14=0.33333333333333337034*skin_elem.f_surf[0]; reg17=0.33333333333333337034*skin_elem.f_surf[1];
    reg18=0.33333333333333337034*skin_elem.f_surf[2]; reg19=0.33333333333333331483*skin_elem.f_surf[0]; reg21=0.33333333333333331483*skin_elem.f_surf[1]; T reg22=0.33333333333333331483*skin_elem.f_surf[2]; reg11=reg8*reg11;
    reg8=0.33333333333333337034*reg15; reg13=reg21+reg13; reg16=reg17+reg16; reg11=reg5-reg11; reg8=reg14+reg8;
    reg9=reg18+reg9; reg12=reg22+reg12; reg7=reg19+reg7; reg13=reg11*reg13; reg7=reg11*reg7;
    reg9=reg11*reg9; reg12=reg11*reg12; reg16=reg11*reg16; reg8=reg11*reg8; reg12=0.5*reg12;
    sollicitation[indices[2]+2]+=reg12; sollicitation[indices[3]+2]+=reg12; reg13=0.5*reg13; sollicitation[indices[2]+1]+=reg13; sollicitation[indices[3]+1]+=reg13;
    reg7=0.5*reg7; sollicitation[indices[2]+0]+=reg7; sollicitation[indices[3]+0]+=reg7; reg9=0.5*reg9; sollicitation[indices[0]+2]+=reg9;
    reg16=0.5*reg16; sollicitation[indices[0]+1]+=reg16; reg8=0.5*reg8; sollicitation[indices[0]+0]+=reg8;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(1)[1]; T reg1=elem.pos(2)[0]-elem.pos(1)[0]; T reg2=elem.pos(2)[2]-elem.pos(1)[2]; T reg3=pow(reg0,2); T reg4=pow(reg1,2);
    reg3=reg4+reg3; reg4=pow(reg2,2); reg4=reg3+reg4; reg4=pow(reg4,0.5); reg3=elem.pos(3)[1]-elem.pos(1)[1];
    T reg5=elem.pos(3)[0]-elem.pos(1)[0]; T reg6=reg1/reg4; T reg7=reg0/reg4; T reg8=elem.pos(3)[2]-elem.pos(1)[2]; T reg9=reg7*reg3;
    reg4=reg2/reg4; T reg10=reg6*reg5; T reg11=reg4*reg8; reg9=reg10+reg9; reg11=reg9+reg11;
    reg9=reg7*reg11; reg10=reg6*reg11; reg10=reg5-reg10; reg9=reg3-reg9; T reg12=reg4*reg11;
    T reg13=pow(reg10,2); T reg14=pow(reg9,2); reg12=reg8-reg12; reg13=reg14+reg13; reg14=pow(reg12,2);
    reg14=reg13+reg14; reg14=pow(reg14,0.5); reg12=reg12/reg14; reg10=reg10/reg14; reg14=reg9/reg14;
    reg9=reg0*reg7; reg13=reg10*reg4; T reg15=reg12*reg6; T reg16=reg1*reg6; T reg17=reg10*reg7;
    reg6=reg14*reg6; reg3=reg14*reg3; T reg18=reg14*reg4; reg7=reg12*reg7; reg0=reg14*reg0;
    reg1=reg10*reg1; reg5=reg10*reg5; reg9=reg16+reg9; reg4=reg2*reg4; reg2=reg12*reg2;
    reg0=reg1+reg0; reg18=reg7-reg18; reg8=reg12*reg8; reg5=reg3+reg5; reg15=reg13-reg15;
    reg17=reg6-reg17; reg4=reg9+reg4; reg17=skin_elem.p*reg17; reg2=reg0+reg2; reg8=reg5+reg8;
    reg18=skin_elem.p*reg18; reg15=skin_elem.p*reg15; reg0=0.33333333333333331483*reg15; reg1=0.33333333333333331483*reg17; reg3=0.33333333333333331483*reg18;
    reg5=0.33333333333333337034*reg17; reg6=0.33333333333333337034*reg15; reg7=0.33333333333333337034*reg18; reg11=reg2*reg11; reg4=reg8*reg4;
    reg2=0.33333333333333331483*skin_elem.f_surf[2]; reg8=0.33333333333333331483*skin_elem.f_surf[1]; reg9=0.33333333333333331483*skin_elem.f_surf[0]; reg10=0.33333333333333337034*skin_elem.f_surf[0]; reg12=0.33333333333333337034*skin_elem.f_surf[2];
    reg13=0.33333333333333337034*skin_elem.f_surf[1]; reg7=reg10+reg7; reg0=reg8+reg0; reg6=reg13+reg6; reg11=reg4-reg11;
    reg5=reg12+reg5; reg1=reg2+reg1; reg3=reg9+reg3; reg0=reg11*reg0; reg3=reg11*reg3;
    reg5=reg11*reg5; reg1=reg11*reg1; reg6=reg11*reg6; reg7=reg11*reg7; reg1=0.5*reg1;
    sollicitation[indices[2]+2]+=reg1; sollicitation[indices[3]+2]+=reg1; reg0=0.5*reg0; sollicitation[indices[2]+1]+=reg0; sollicitation[indices[3]+1]+=reg0;
    reg3=0.5*reg3; sollicitation[indices[2]+0]+=reg3; sollicitation[indices[3]+0]+=reg3; reg5=0.5*reg5; sollicitation[indices[1]+2]+=reg5;
    reg6=0.5*reg6; sollicitation[indices[1]+1]+=reg6; reg7=0.5*reg7; sollicitation[indices[1]+0]+=reg7;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(1)[1]; T reg1=elem.pos(2)[0]-elem.pos(1)[0]; T reg2=elem.pos(2)[2]-elem.pos(1)[2]; T reg3=pow(reg0,2); T reg4=pow(reg1,2);
    reg3=reg4+reg3; reg4=pow(reg2,2); reg4=reg3+reg4; reg4=pow(reg4,0.5); reg3=elem.pos(3)[1]-elem.pos(1)[1];
    T reg5=elem.pos(3)[0]-elem.pos(1)[0]; T reg6=reg1/reg4; T reg7=reg0/reg4; T reg8=elem.pos(3)[2]-elem.pos(1)[2]; T reg9=reg7*reg3;
    reg4=reg2/reg4; T reg10=reg6*reg5; T reg11=reg4*reg8; reg9=reg10+reg9; reg11=reg9+reg11;
    reg9=reg7*reg11; reg10=reg6*reg11; reg10=reg5-reg10; reg9=reg3-reg9; T reg12=reg4*reg11;
    T reg13=pow(reg10,2); T reg14=pow(reg9,2); reg12=reg8-reg12; reg13=reg14+reg13; reg14=pow(reg12,2);
    reg14=reg13+reg14; reg14=pow(reg14,0.5); reg12=reg12/reg14; reg10=reg10/reg14; reg14=reg9/reg14;
    reg9=reg0*reg7; reg13=reg10*reg4; T reg15=reg12*reg6; T reg16=reg1*reg6; T reg17=reg10*reg7;
    reg6=reg14*reg6; reg3=reg14*reg3; T reg18=reg14*reg4; reg7=reg12*reg7; reg0=reg14*reg0;
    reg1=reg10*reg1; reg5=reg10*reg5; reg9=reg16+reg9; reg4=reg2*reg4; reg2=reg12*reg2;
    reg0=reg1+reg0; reg18=reg7-reg18; reg8=reg12*reg8; reg5=reg3+reg5; reg15=reg13-reg15;
    reg17=reg6-reg17; reg4=reg9+reg4; reg17=skin_elem.p*reg17; reg2=reg0+reg2; reg8=reg5+reg8;
    reg18=skin_elem.p*reg18; reg15=skin_elem.p*reg15; reg0=0.33333333333333331483*reg15; reg1=0.33333333333333331483*reg17; reg3=0.33333333333333331483*reg18;
    reg5=0.33333333333333337034*reg17; reg6=0.33333333333333337034*reg15; reg7=0.33333333333333337034*reg18; reg11=reg2*reg11; reg4=reg8*reg4;
    reg2=0.33333333333333331483*skin_elem.f_surf[2]; reg8=0.33333333333333331483*skin_elem.f_surf[1]; reg9=0.33333333333333331483*skin_elem.f_surf[0]; reg10=0.33333333333333337034*skin_elem.f_surf[0]; reg12=0.33333333333333337034*skin_elem.f_surf[2];
    reg13=0.33333333333333337034*skin_elem.f_surf[1]; reg7=reg10+reg7; reg0=reg8+reg0; reg6=reg13+reg6; reg11=reg4-reg11;
    reg5=reg12+reg5; reg1=reg2+reg1; reg3=reg9+reg3; reg0=reg11*reg0; reg3=reg11*reg3;
    reg5=reg11*reg5; reg1=reg11*reg1; reg6=reg11*reg6; reg7=reg11*reg7; reg1=0.5*reg1;
    sollicitation[indices[2]+2]+=reg1; sollicitation[indices[3]+2]+=reg1; reg0=0.5*reg0; sollicitation[indices[2]+1]+=reg0; sollicitation[indices[3]+1]+=reg0;
    reg3=0.5*reg3; sollicitation[indices[2]+0]+=reg3; sollicitation[indices[3]+0]+=reg3; reg5=0.5*reg5; sollicitation[indices[1]+2]+=reg5;
    reg6=0.5*reg6; sollicitation[indices[1]+1]+=reg6; reg7=0.5*reg7; sollicitation[indices[1]+0]+=reg7;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(1)[1]; T reg1=elem.pos(2)[0]-elem.pos(1)[0]; T reg2=elem.pos(2)[2]-elem.pos(1)[2]; T reg3=pow(reg0,2); T reg4=pow(reg1,2);
    reg3=reg4+reg3; reg4=pow(reg2,2); reg4=reg3+reg4; reg4=pow(reg4,0.5); reg3=elem.pos(3)[1]-elem.pos(1)[1];
    T reg5=elem.pos(3)[0]-elem.pos(1)[0]; T reg6=reg1/reg4; T reg7=reg0/reg4; T reg8=elem.pos(3)[2]-elem.pos(1)[2]; T reg9=reg7*reg3;
    reg4=reg2/reg4; T reg10=reg6*reg5; T reg11=reg4*reg8; reg9=reg10+reg9; reg11=reg9+reg11;
    reg9=reg7*reg11; reg10=reg6*reg11; reg10=reg5-reg10; reg9=reg3-reg9; T reg12=reg4*reg11;
    T reg13=pow(reg10,2); T reg14=pow(reg9,2); reg12=reg8-reg12; reg13=reg14+reg13; reg14=pow(reg12,2);
    reg14=reg13+reg14; reg14=pow(reg14,0.5); reg12=reg12/reg14; reg10=reg10/reg14; reg14=reg9/reg14;
    reg9=reg0*reg7; reg13=reg10*reg4; T reg15=reg12*reg6; T reg16=reg1*reg6; T reg17=reg10*reg7;
    reg6=reg14*reg6; reg3=reg14*reg3; T reg18=reg14*reg4; reg7=reg12*reg7; reg0=reg14*reg0;
    reg1=reg10*reg1; reg5=reg10*reg5; reg9=reg16+reg9; reg4=reg2*reg4; reg2=reg12*reg2;
    reg0=reg1+reg0; reg18=reg7-reg18; reg8=reg12*reg8; reg5=reg3+reg5; reg15=reg13-reg15;
    reg17=reg6-reg17; reg4=reg9+reg4; reg17=skin_elem.p*reg17; reg2=reg0+reg2; reg8=reg5+reg8;
    reg18=skin_elem.p*reg18; reg15=skin_elem.p*reg15; reg0=0.33333333333333331483*reg15; reg1=0.33333333333333331483*reg17; reg3=0.33333333333333331483*reg18;
    reg5=0.33333333333333337034*reg17; reg6=0.33333333333333337034*reg15; reg7=0.33333333333333337034*reg18; reg11=reg2*reg11; reg4=reg8*reg4;
    reg2=0.33333333333333331483*skin_elem.f_surf[2]; reg8=0.33333333333333331483*skin_elem.f_surf[1]; reg9=0.33333333333333331483*skin_elem.f_surf[0]; reg10=0.33333333333333337034*skin_elem.f_surf[0]; reg12=0.33333333333333337034*skin_elem.f_surf[2];
    reg13=0.33333333333333337034*skin_elem.f_surf[1]; reg7=reg10+reg7; reg0=reg8+reg0; reg6=reg13+reg6; reg11=reg4-reg11;
    reg5=reg12+reg5; reg1=reg2+reg1; reg3=reg9+reg3; reg0=reg11*reg0; reg3=reg11*reg3;
    reg5=reg11*reg5; reg1=reg11*reg1; reg6=reg11*reg6; reg7=reg11*reg7; reg1=0.5*reg1;
    sollicitation[indices[2]+2]+=reg1; sollicitation[indices[3]+2]+=reg1; reg0=0.5*reg0; sollicitation[indices[2]+1]+=reg0; sollicitation[indices[3]+1]+=reg0;
    reg3=0.5*reg3; sollicitation[indices[2]+0]+=reg3; sollicitation[indices[3]+0]+=reg3; reg5=0.5*reg5; sollicitation[indices[1]+2]+=reg5;
    reg6=0.5*reg6; sollicitation[indices[1]+1]+=reg6; reg7=0.5*reg7; sollicitation[indices[1]+0]+=reg7;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_vector_der_var(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */    T reg0=1+(*f.m).poisson_ratio; T reg1=1.0/(*f.m).elastic_modulus; T reg2=2*reg1; reg0=reg0/(*f.m).elastic_modulus; T reg3=pow(reg0,2);
    reg2=reg0*reg2; T reg4=reg1*reg3; T reg5=reg0*reg2; reg5=reg4+reg5; reg0=reg0*reg3;
    T reg6=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg7=reg1*reg0; T reg8=reg6*reg5; reg5=reg1*reg5; reg0=reg6*reg0;
    reg8=reg7+reg8; T reg9=reg6*reg2; reg3=reg6*reg3; T reg10=elem.pos(2)[2]-elem.pos(0)[2]; T reg11=elem.pos(2)[1]-elem.pos(0)[1];
    T reg12=reg1*reg0; T reg13=elem.pos(1)[2]-elem.pos(0)[2]; T reg14=elem.pos(1)[1]-elem.pos(0)[1]; reg9=reg4+reg9; T reg15=elem.pos(3)[1]-elem.pos(0)[1];
    T reg16=elem.pos(3)[2]-elem.pos(0)[2]; T reg17=reg1*reg7; reg2=reg1*reg2; T reg18=reg6*reg8; T reg19=reg6*reg5;
    T reg20=reg1*reg4; T reg21=reg13*reg15; T reg22=reg1*reg3; T reg23=reg6*reg9; reg7=reg6*reg7;
    reg0=reg6*reg0; T reg24=reg6*reg2; reg18=reg12+reg18; T reg25=reg11*reg16; reg19=reg19+reg17;
    T reg26=reg10*reg15; T reg27=reg14*reg16; reg8=reg1*reg8; reg24=reg20+reg24; T reg28=elem.pos(1)[0]-elem.pos(0)[0];
    T reg29=elem.pos(2)[0]-elem.pos(0)[0]; reg7=reg0+reg7; reg23=reg22+reg23; reg3=reg6*reg3; reg5=reg1*reg5;
    reg19=reg19+reg18; T reg30=reg13*reg11; reg4=reg6*reg4; T reg31=reg14*reg10; reg21=reg27-reg21;
    reg26=reg25-reg26; reg8=reg8+reg18; reg4=reg3+reg4; reg25=reg1*reg7; reg27=reg19*reg6;
    reg18=reg5-reg18; reg9=reg1*reg9; reg17=reg17-reg0; reg24=reg23+reg24; reg12=reg0+reg12;
    reg0=elem.pos(3)[0]-elem.pos(0)[0]; reg2=reg1*reg2; reg30=reg31-reg30; reg5=reg28*reg26; reg20=reg20-reg3;
    reg31=reg29*reg21; T reg32=reg1*reg17; T reg33=reg1*reg4; reg4=reg6*reg4; T reg34=reg3+reg22;
    reg24=reg6*reg24; reg20=reg1*reg20; reg9=reg23+reg9; T reg35=reg18*reg1; reg25=reg27+reg25;
    reg27=reg8*reg6; reg31=reg5-reg31; reg5=reg0*reg30; T reg36=reg29*reg16; T reg37=reg10*reg0;
    T reg38=reg28*reg16; T reg39=reg13*reg0; T reg40=reg6*reg7; T reg41=reg1*reg12; reg23=reg2-reg23;
    reg41=reg27+reg41; reg25=reg35-reg25; reg2=reg6*reg34; reg34=reg1*reg34; reg4=reg20-reg4;
    reg24=reg33+reg24; reg5=reg31+reg5; reg20=reg13*reg29; reg27=reg28*reg10; reg23=reg1*reg23;
    reg1=reg14*reg0; reg31=reg29*reg15; reg37=reg36-reg37; reg33=reg11*reg0; reg9=reg6*reg9;
    reg35=reg28*reg15; reg39=reg38-reg39; reg40=reg32-reg40; reg6=reg6*reg12; reg41=reg25-reg41;
    reg34=reg9+reg34; reg24=reg23-reg24; reg26=reg26/reg5; reg37=reg37/reg5; reg33=reg31-reg33;
    reg21=reg21/reg5; reg39=reg39/reg5; reg2=reg4-reg2; reg6=reg40-reg6; reg4=reg14*reg29;
    reg20=reg27-reg20; reg9=reg28*reg11; reg1=reg35-reg1; reg20=reg20/reg5; reg23=reg21-reg26;
    reg25=reg37-reg39; reg33=reg33/reg5; reg1=reg1/reg5; reg4=reg9-reg4; reg9=pow(reg6,2);
    reg30=reg30/reg5; reg34=reg24-reg34; reg24=reg2*reg41; reg27=reg17*reg41; reg24=reg24/reg9;
    reg34=reg34/reg6; reg31=reg1-reg33; reg25=reg20+reg25; reg23=reg23-reg30; reg4=reg4/reg5;
    reg27=reg27/reg9; reg18=reg18/reg6; reg31=reg31-reg4; reg32=0.5*reg25; reg35=reg12*reg41;
    reg36=0.5*reg23; reg41=reg7*reg41; reg24=reg34-reg24; reg34=reg36*reg24; reg35=reg35/reg9;
    reg8=reg8/reg6; reg38=0.5*reg31; reg19=reg19/reg6; reg9=reg41/reg9; reg40=reg32*reg24;
    reg27=reg18-reg27; reg18=0.5*reg37; reg41=0.5*reg26; T reg42=0.5*reg39; T reg43=reg23*reg27;
    reg35=reg8-reg35; reg34=2*reg34; reg9=reg19-reg9; reg40=2*reg40; reg8=reg38*reg24;
    reg19=0.5*reg21; T reg44=reg25*reg27; T reg45=0.5*reg30; T reg46=0.5*reg20; T reg47=reg25*reg35;
    T reg48=reg25*reg9; T reg49=reg36*reg34; T reg50=reg37*reg44; T reg51=reg41*reg34; T reg52=0.5*reg1;
    T reg53=reg25*reg44; T reg54=reg21*reg43; T reg55=reg42*reg40; T reg56=reg31*reg27; T reg57=reg23*reg9;
    T reg58=reg23*reg43; T reg59=reg45*reg34; T reg60=reg20*reg44; reg8=2*reg8; T reg61=reg26*reg43;
    reg44=reg39*reg44; T reg62=reg18*reg40; T reg63=reg19*reg34; T reg64=0.5*reg33; T reg65=reg18*reg24;
    reg43=reg30*reg43; T reg66=reg32*reg40; T reg67=reg46*reg40; T reg68=0.5*reg4; T reg69=reg45*reg8;
    T reg70=reg37*reg57; T reg71=reg41*reg40; T reg72=reg4*reg57; reg50=reg51-reg50; reg61=reg61-reg62;
    T reg73=reg64*reg8; T reg74=reg31*reg35; T reg75=reg26*reg27; reg65=2*reg65; reg44=reg44-reg63;
    T reg76=reg64*reg24; reg43=reg43-reg67; T reg77=reg68*reg8; T reg78=reg26*reg48; T reg79=reg41*reg24;
    T reg80=reg18*reg34; reg60=reg59-reg60; T reg81=reg39*reg57; T reg82=reg32*reg34; T reg83=reg30*reg48;
    T reg84=reg46*reg34; T reg85=reg23*reg48; T reg86=reg4*reg47; T reg87=reg46*reg8; T reg88=reg41*reg8;
    T reg89=reg1*reg57; T reg90=reg19*reg8; T reg91=reg33*reg57; T reg92=reg33*reg47; T reg93=reg18*reg8;
    T reg94=reg42*reg8; T reg95=reg33*reg56; T reg96=reg1*reg47; T reg97=reg1*reg56; T reg98=reg25*reg57;
    T reg99=reg36*reg40; T reg100=reg19*reg40; T reg101=reg4*reg56; reg53=reg53+reg49; T reg102=reg38*reg8;
    reg58=reg58+reg66; T reg103=reg31*reg57; T reg104=reg45*reg40; T reg105=reg36*reg8; reg57=reg20*reg57;
    reg47=reg31*reg47; T reg106=reg32*reg8; reg48=reg21*reg48; T reg107=reg42*reg34; reg56=reg31*reg56;
    reg8=reg52*reg8; reg54=reg55-reg54; T reg108=reg18*reg65; T reg109=reg30*reg74; T reg110=reg26*reg75;
    reg53=reg102+reg53; T reg111=reg38*reg40; T reg112=reg26*reg74; T reg113=reg52*reg40; T reg114=reg25*reg74;
    reg84=reg83-reg84; reg56=reg49+reg56; reg80=reg78-reg80; reg99=reg98+reg99; reg43=reg43+reg77;
    reg96=reg94-reg96; reg49=reg20*reg74; reg61=reg61+reg73; reg90=reg89+reg90; reg78=reg68*reg40;
    reg106=reg47+reg106; reg47=reg26*reg9; reg60=reg77+reg60; reg105=reg103+reg105; reg77=reg37*reg27;
    reg83=reg39*reg74; reg95=reg51+reg95; reg44=reg44-reg8; reg76=2*reg76; reg51=reg32*reg65;
    reg89=reg64*reg34; reg94=reg23*reg75; reg70=reg71-reg70; reg71=reg38*reg34; reg98=reg23*reg74;
    reg100=reg81-reg100; reg82=reg85+reg82; reg102=reg58+reg102; reg101=reg59+reg101; reg69=reg72+reg69;
    reg58=reg30*reg75; reg59=reg46*reg65; reg91=reg88+reg91; reg57=reg104-reg57; reg75=reg21*reg75;
    reg72=reg42*reg65; reg50=reg73+reg50; reg87=reg86-reg87; reg40=reg64*reg40; reg73=reg21*reg74;
    reg74=reg37*reg74; reg81=reg68*reg34; reg48=reg107-reg48; reg97=reg63+reg97; reg8=reg54-reg8;
    reg34=reg52*reg34; reg79=2*reg79; reg93=reg92-reg93; reg87=reg5*reg87; reg56=reg66+reg56;
    reg54=reg31*reg47; reg67=reg101-reg67; reg63=reg4*reg47; reg66=reg45*reg76; reg69=reg5*reg69;
    reg106=reg5*reg106; reg8=reg5*reg8; reg48=reg5*reg48; reg105=reg5*reg105; reg73=reg34+reg73;
    reg75=reg72+reg75; reg34=reg1*reg47; reg85=reg19*reg76; reg86=reg20*reg77; reg88=reg45*reg79;
    reg70=reg5*reg70; reg113=reg83-reg113; reg83=reg39*reg47; reg92=reg19*reg65; reg101=reg39*reg77;
    reg103=reg19*reg79; reg104=reg64*reg76; reg110=reg110+reg108; reg50=reg5*reg50; reg112=reg89+reg112;
    reg80=reg5*reg80; reg74=reg40-reg74; reg40=reg37*reg47; reg89=reg41*reg65; reg107=reg41*reg79;
    T reg115=reg37*reg77; reg44=reg5*reg44; reg61=reg5*reg61; reg100=reg5*reg100; reg91=reg5*reg91;
    reg90=reg5*reg90; reg93=reg5*reg93; reg62=reg95-reg62; reg95=reg33*reg47; reg96=reg5*reg96;
    T reg116=reg41*reg76; reg97=reg55-reg97; reg55=reg33*reg27; T reg117=reg37*reg35; T reg118=reg36*reg76;
    T reg119=reg52*reg76; reg71=reg98+reg71; reg94=reg94-reg51; reg98=reg38*reg76; reg77=reg25*reg77;
    T reg120=reg36*reg79; reg82=reg5*reg82; T reg121=reg37*reg9; reg60=reg5*reg60; reg102=reg5*reg102;
    reg57=reg5*reg57; T reg122=reg36*reg65; reg43=reg5*reg43; T reg123=reg25*reg47; reg49=reg78-reg49;
    reg84=reg5*reg84; reg114=reg111+reg114; reg78=reg42*reg24; reg109=reg81+reg109; reg81=reg68*reg76;
    reg58=reg58+reg59; reg99=reg5*reg99; reg47=reg20*reg47; reg53=reg5*reg53; reg111=reg45*reg65;
    T reg124=reg4*reg55; reg96=ponderation*reg96; reg90=ponderation*reg90; reg49=reg5*reg49; reg102=ponderation*reg102;
    reg97=reg5*reg97; reg60=ponderation*reg60; reg58=reg58+reg81; reg91=ponderation*reg91; T reg125=reg31*reg55;
    reg82=ponderation*reg82; reg93=ponderation*reg93; T reg126=reg30*reg121; reg101=reg101+reg103; T reg127=reg52*reg24;
    reg92=reg83+reg92; reg113=reg5*reg113; reg83=reg21*reg27; reg78=2*reg78; reg70=ponderation*reg70;
    T reg128=reg18*reg79; T reg129=reg26*reg121; reg109=reg5*reg109; reg110=reg110+reg104; reg84=ponderation*reg84;
    T reg130=reg33*reg35; reg50=ponderation*reg50; reg112=reg5*reg112; T reg131=reg19*reg24; reg80=ponderation*reg80;
    reg74=reg5*reg74; reg43=ponderation*reg43; reg61=ponderation*reg61; reg57=ponderation*reg57; T reg132=reg23*reg121;
    reg89=reg40+reg89; reg40=reg32*reg79; reg115=reg107+reg115; reg44=ponderation*reg44; reg94=reg94+reg98;
    reg71=reg5*reg71; reg100=ponderation*reg100; reg77=reg120-reg77; T reg133=reg18*reg76; reg85=reg34+reg85;
    reg34=reg33*reg55; T reg134=reg42*reg76; T reg135=reg1*reg117; reg121=reg21*reg121; T reg136=reg42*reg79;
    reg75=reg75+reg119; reg55=reg1*reg55; T reg137=reg46*reg76; T reg138=reg4*reg117; reg66=reg63+reg66;
    reg67=reg5*reg67; reg87=ponderation*reg87; reg86=reg88+reg86; reg69=ponderation*reg69; reg8=ponderation*reg8;
    reg48=ponderation*reg48; reg73=reg5*reg73; reg118=reg54+reg118; reg47=reg111+reg47; reg56=reg5*reg56;
    reg99=ponderation*reg99; reg76=reg32*reg76; reg53=ponderation*reg53; reg106=ponderation*reg106; reg62=reg5*reg62;
    reg114=reg5*reg114; reg54=reg31*reg117; reg117=reg33*reg117; reg116=reg95+reg116; reg63=reg46*reg79;
    reg105=ponderation*reg105; reg122=reg123-reg122; reg95=reg30*reg130; reg111=reg39*reg130; reg123=reg23*reg130;
    T reg139=reg68*reg79; T reg140=reg38*reg79; reg62=ponderation*reg62; T reg141=reg30*reg83; reg69=vectors[0][indices[0]+0]*reg69;
    reg87=vectors[0][indices[0]+1]*reg87; T reg142=reg46*reg78; reg105=vectors[0][indices[0]+0]*reg105; reg101=reg119+reg101; reg119=reg32*reg78;
    reg73=ponderation*reg73; reg127=2*reg127; reg58=reg5*reg58; reg113=ponderation*reg113; T reg143=reg23*reg83;
    reg99=vectors[0][indices[0]+0]*reg99; reg53=vectors[0][indices[0]+1]*reg53; reg92=reg5*reg92; reg116=reg5*reg116; reg102=vectors[0][indices[0]+0]*reg102;
    reg82=vectors[0][indices[0]+1]*reg82; reg133=reg117+reg133; reg71=ponderation*reg71; reg117=reg52*reg79; reg34=reg107+reg34;
    reg107=reg21*reg130; T reg144=reg64*reg65; T reg145=reg37*reg130; reg94=reg5*reg94; reg115=reg104+reg115;
    reg121=reg136+reg121; reg89=reg5*reg89; reg104=reg21*reg83; reg75=reg5*reg75; reg137=reg138+reg137;
    reg74=ponderation*reg74; reg136=reg42*reg78; reg60=vectors[0][indices[0]+1]*reg60; reg124=reg88+reg124; reg132=reg40-reg132;
    reg66=reg5*reg66; reg57=vectors[0][indices[0]+0]*reg57; reg67=ponderation*reg67; reg109=ponderation*reg109; reg63=reg126+reg63;
    reg100=vectors[0][indices[0]+0]*reg100; reg54=reg76-reg54; reg97=ponderation*reg97; reg44=vectors[0][indices[0]+1]*reg44; reg125=reg120+reg125;
    reg49=ponderation*reg49; reg40=vectors[0][indices[0]+0]*reg90; reg50=vectors[0][indices[0]+1]*reg50; reg70=vectors[0][indices[0]+0]*reg70; reg86=reg81+reg86;
    reg76=reg20*reg130; reg81=reg68*reg65; reg80=vectors[0][indices[0]+1]*reg80; reg61=vectors[0][indices[0]+0]*reg61; reg96=vectors[0][indices[0]+1]*reg96;
    reg43=vectors[0][indices[0]+0]*reg43; reg131=2*reg131; reg88=reg25*reg130; reg120=reg38*reg65; reg126=reg21*reg9;
    reg47=reg5*reg47; reg138=reg39*reg27; reg55=reg103+reg55; reg48=vectors[0][indices[0]+1]*reg48; reg8=vectors[0][indices[0]+0]*reg8;
    reg135=reg134+reg135; reg85=reg5*reg85; reg93=vectors[0][indices[0]+1]*reg93; reg91=vectors[0][indices[0]+0]*reg91; reg77=reg98+reg77;
    reg122=reg5*reg122; reg114=ponderation*reg114; reg56=ponderation*reg56; reg118=reg5*reg118; reg130=reg26*reg130;
    reg128=reg129+reg128; reg110=reg5*reg110; reg65=reg52*reg65; reg98=reg18*reg78; reg79=reg64*reg79;
    reg84=vectors[0][indices[0]+1]*reg84; reg83=reg26*reg83; reg106=vectors[0][indices[0]+1]*reg106; reg112=ponderation*reg112; reg75=ponderation*reg75;
    reg135=reg5*reg135; reg103=reg39*reg126; reg85=ponderation*reg85; reg121=reg5*reg121; reg129=reg41*reg127;
    reg134=reg33*reg126; reg92=ponderation*reg92; reg34=reg108+reg34; reg62=vectors[0][indices[0]+2]*reg62; reg93=reg91+reg93;
    reg91=reg19*reg78; reg133=reg5*reg133; reg108=reg64*reg127; T reg146=reg39*reg138; reg114=vectors[0][indices[0]+2]*reg114;
    reg122=ponderation*reg122; reg116=ponderation*reg116; reg54=reg5*reg54; reg53=reg99+reg53; reg83=reg83+reg98;
    reg143=reg119-reg143; reg118=ponderation*reg118; reg106=reg105+reg106; reg120=reg88-reg120; reg88=reg68*reg127;
    reg47=ponderation*reg47; reg67=vectors[0][indices[0]+2]*reg67; reg99=reg36*reg78; reg105=reg25*reg126; reg141=reg141+reg142;
    reg87=reg69+reg87; reg77=reg5*reg77; reg101=reg5*reg101; reg69=reg25*reg138; reg139=reg95+reg139;
    reg95=reg36*reg131; reg63=reg5*reg63; T reg147=reg19*reg127; T reg148=reg1*reg126; reg49=vectors[0][indices[0]+2]*reg49;
    reg60=reg57+reg60; reg55=reg72+reg55; reg66=ponderation*reg66; reg65=reg111+reg65; reg57=vectors[0][indices[0]+2]*reg73;
    reg48=reg8+reg48; reg56=vectors[0][indices[0]+2]*reg56; reg137=reg5*reg137; reg50=reg70+reg50; reg8=reg20*reg138;
    reg128=reg5*reg128; reg97=vectors[0][indices[0]+2]*reg97; reg86=reg5*reg86; reg138=reg37*reg138; reg70=reg41*reg131;
    reg82=reg102+reg82; reg110=ponderation*reg110; reg140=reg123+reg140; reg72=reg37*reg126; reg102=reg41*reg78;
    reg112=vectors[0][indices[0]+2]*reg112; reg80=reg61+reg80; reg144=reg145+reg144; reg61=reg38*reg127; reg81=reg76+reg81;
    reg115=reg5*reg115; reg76=reg45*reg78; reg94=ponderation*reg94; reg111=reg20*reg126; reg89=ponderation*reg89;
    reg123=reg45*reg131; reg40=reg96-reg40; reg96=reg46*reg24; reg145=reg39*reg9; reg132=reg5*reg132;
    T reg149=reg19*reg131; reg58=ponderation*reg58; reg79=reg130+reg79; reg51=reg125-reg51; reg44=reg100+reg44;
    reg100=reg31*reg126; reg109=vectors[0][indices[0]+2]*reg109; reg125=reg36*reg127; reg113=vectors[0][indices[0]+2]*reg113; reg124=reg59+reg124;
    reg117=reg107+reg117; reg126=reg4*reg126; reg59=reg45*reg127; reg107=reg39*reg35; reg74=vectors[0][indices[0]+2]*reg74;
    reg130=reg1*reg27; reg84=reg43+reg84; reg43=reg52*reg127; reg71=vectors[0][indices[0]+2]*reg71; reg104=reg136+reg104;
    T reg150=reg46*reg131; T reg151=reg30*reg145; reg8=reg123+reg8; reg135=ponderation*reg135; reg141=reg141+reg88;
    reg91=reg103+reg91; reg111=reg76+reg111; reg76=reg1*reg130; reg103=reg21*reg145; reg101=ponderation*reg101;
    reg65=reg5*reg65; T reg152=reg42*reg131; reg63=ponderation*reg63; reg81=reg5*reg81; reg86=ponderation*reg86;
    reg104=reg104+reg43; T reg153=reg1*reg107; reg121=ponderation*reg121; reg55=reg5*reg55; reg139=reg5*reg139;
    reg117=reg5*reg117; reg147=reg148+reg147; reg148=reg42*reg127; reg105=reg99-reg105; reg122=vectors[0][indices[1]+0]*reg122;
    reg114=reg53+reg114; reg53=reg1*reg35; reg69=reg69-reg95; reg99=reg32*reg131; reg94=vectors[0][indices[1]+0]*reg94;
    reg71=reg82+reg71; reg115=ponderation*reg115; reg144=reg5*reg144; reg82=reg23*reg145; reg72=reg102+reg72;
    reg138=reg70+reg138; reg143=reg143-reg61; reg102=reg31*reg130; reg140=reg5*reg140; reg132=ponderation*reg132;
    reg109=reg84+reg109; reg118=vectors[0][indices[1]+0]*reg118; reg92=vectors[0][indices[1]+0]*reg92; reg113=reg44+reg113; reg56=reg106+reg56;
    reg128=ponderation*reg128; reg79=reg5*reg79; reg77=ponderation*reg77; reg120=reg5*reg120; reg44=reg45*reg24;
    reg83=reg83+reg108; reg40=reg97+reg40; reg145=reg26*reg145; reg84=reg18*reg131; reg24=reg68*reg24;
    reg97=vectors[0][indices[1]+0]*reg85; reg96=2*reg96; reg112=reg80+reg112; reg80=reg30*reg27; reg110=vectors[0][indices[1]+0]*reg110;
    reg67=reg87+reg67; reg66=vectors[0][indices[1]+0]*reg66; reg87=reg46*reg127; reg106=reg4*reg107; reg54=ponderation*reg54;
    reg59=reg126+reg59; reg57=reg48-reg57; reg124=reg5*reg124; reg133=ponderation*reg133; reg34=reg5*reg34;
    reg62=reg93+reg62; reg129=reg134+reg129; reg116=vectors[0][indices[1]+0]*reg116; reg137=ponderation*reg137; reg48=reg33*reg107;
    reg93=reg18*reg127; reg126=vectors[0][indices[1]+0]*reg75; reg134=reg33*reg130; reg74=reg50+reg74; reg130=reg4*reg130;
    reg51=reg5*reg51; reg50=vectors[0][indices[1]+0]*reg89; reg58=vectors[0][indices[1]+0]*reg58; reg125=reg100+reg125; reg127=reg32*reg127;
    reg146=reg146+reg149; reg107=reg31*reg107; reg100=vectors[0][indices[1]+0]*reg47; reg49=reg60+reg49; reg60=reg30*reg9;
    reg147=reg5*reg147; reg61=reg69-reg61; reg76=reg149+reg76; reg126=reg57-reg126; reg121=vectors[0][indices[1]+1]*reg121;
    reg57=reg25*reg53; reg120=ponderation*reg120; reg55=ponderation*reg55; reg69=reg38*reg78; reg153=reg148+reg153;
    reg105=reg5*reg105; reg148=reg30*reg80; reg149=reg46*reg96; T reg154=reg68*reg131; T reg155=reg30*reg53;
    reg150=reg151+reg150; reg151=vectors[0][indices[1]+1]*reg137; reg66=reg67+reg66; reg141=reg5*reg141; reg139=ponderation*reg139;
    reg100=reg49-reg100; reg49=reg21*reg80; reg86=vectors[0][indices[1]+1]*reg86; reg67=vectors[0][indices[1]+1]*reg63; reg43=reg146+reg43;
    reg58=reg109+reg58; reg109=reg39*reg53; reg146=reg52*reg78; reg140=ponderation*reg140; reg143=reg5*reg143;
    reg99=reg82-reg99; reg82=reg23*reg53; T reg156=reg38*reg131; reg97=reg40-reg97; reg135=vectors[0][indices[1]+1]*reg135;
    reg40=reg23*reg80; T reg157=reg32*reg96; reg24=2*reg24; reg44=2*reg44; T reg158=vectors[0][indices[1]+1]*reg101;
    reg92=reg113+reg92; reg65=ponderation*reg65; reg84=reg145+reg84; reg113=reg26*reg53; reg145=reg64*reg131;
    reg80=reg26*reg80; T reg159=reg18*reg96; reg77=vectors[0][indices[1]+1]*reg77; reg122=reg114+reg122; reg132=vectors[0][indices[1]+1]*reg132;
    reg94=reg71+reg94; reg144=ponderation*reg144; reg72=reg5*reg72; reg138=reg108+reg138; reg71=reg37*reg53;
    reg108=reg64*reg78; reg114=reg20*reg53; reg78=reg68*reg78; T reg160=reg42*reg96; reg131=reg52*reg131;
    reg53=reg21*reg53; reg130=reg123+reg130; reg103=reg152+reg103; reg87=reg106+reg87; reg104=reg5*reg104;
    reg59=reg5*reg59; reg117=ponderation*reg117; reg124=ponderation*reg124; reg34=ponderation*reg34; reg129=reg5*reg129;
    reg93=reg48+reg93; reg134=reg70+reg134; reg48=vectors[0][indices[1]+1]*reg133; reg70=reg20*reg27; reg116=reg62+reg116;
    reg50=reg74-reg50; reg51=ponderation*reg51; reg125=reg5*reg125; reg115=vectors[0][indices[1]+1]*reg115; reg127=reg107-reg127;
    reg102=reg95+reg102; reg62=vectors[0][indices[1]+1]*reg128; reg110=reg112+reg110; reg81=ponderation*reg81; reg54=vectors[0][indices[1]+1]*reg54;
    reg8=reg88+reg8; reg91=reg5*reg91; reg111=reg5*reg111; reg79=ponderation*reg79; reg83=reg5*reg83;
    reg118=reg56+reg118; reg130=reg142+reg130; reg100=reg86+reg100; reg77=reg122+reg77; reg56=vectors[0][indices[1]+2]*reg81;
    reg120=vectors[0][indices[1]+2]*reg120; reg87=reg5*reg87; reg65=vectors[0][indices[1]+2]*reg65; reg158=reg92-reg158; reg59=ponderation*reg59;
    reg50=reg115+reg50; reg74=vectors[0][indices[1]+2]*reg144; reg124=vectors[0][indices[1]+2]*reg124; reg34=vectors[0][indices[1]+2]*reg34; reg148=reg148+reg149;
    reg151=reg66-reg151; reg66=reg68*reg24; reg48=reg116-reg48; reg132=reg94+reg132; reg86=vectors[0][indices[1]+2]*reg55;
    reg88=vectors[0][indices[1]+2]*reg117; reg140=vectors[0][indices[1]+2]*reg140; reg54=reg118+reg54; reg51=vectors[0][indices[1]+2]*reg51; reg97=reg135+reg97;
    reg92=reg45*reg24; reg94=reg4*reg60; reg8=reg5*reg8; reg79=vectors[0][indices[1]+2]*reg79; reg126=reg121+reg126;
    reg78=reg114+reg78; reg95=reg45*reg96; reg62=reg110-reg62; reg106=reg20*reg60; reg139=vectors[0][indices[1]+2]*reg139;
    reg67=reg58-reg67; reg58=reg45*reg44; reg107=reg20*reg70; reg111=ponderation*reg111; reg40=reg40-reg157;
    reg108=reg71+reg108; reg71=reg36*reg44; reg156=reg82+reg156; reg82=reg25*reg70; reg91=ponderation*reg91;
    reg110=reg39*reg60; reg112=reg19*reg96; reg114=reg39*reg70; reg115=reg19*reg44; reg138=reg5*reg138;
    reg99=reg5*reg99; reg143=ponderation*reg143; reg72=ponderation*reg72; reg146=reg109+reg146; reg125=ponderation*reg125;
    reg43=reg5*reg43; reg127=reg5*reg127; reg147=ponderation*reg147; reg109=reg41*reg24; reg116=reg33*reg60;
    reg105=ponderation*reg105; reg61=reg5*reg61; reg134=reg98+reg134; reg93=reg5*reg93; reg129=ponderation*reg129;
    reg57=reg69-reg57; reg69=reg25*reg60; reg98=reg36*reg96; reg104=ponderation*reg104; reg103=reg5*reg103;
    reg9=reg20*reg9; reg70=reg37*reg70; reg118=reg41*reg44; reg121=reg37*reg60; reg122=reg41*reg96;
    reg131=reg53+reg131; reg53=reg38*reg24; reg145=reg113+reg145; reg154=reg155+reg154; reg84=reg5*reg84;
    reg83=ponderation*reg83; reg27=reg4*reg27; reg80=reg80+reg159; reg113=reg64*reg24; reg150=reg5*reg150;
    reg141=ponderation*reg141; reg49=reg49+reg160; reg123=reg52*reg24; reg135=reg20*reg35; reg142=reg36*reg24;
    reg153=reg5*reg153; reg152=reg19*reg24; reg76=reg136+reg76; reg102=reg119-reg102; reg119=reg1*reg60;
    reg60=reg31*reg60; reg136=vectors[0][indices[2]+0]*reg129; reg72=vectors[0][indices[2]+0]*reg72; reg155=vectors[0][indices[2]+0]*reg125; reg70=reg118+reg70;
    reg98=reg69-reg98; reg145=reg5*reg145; reg120=reg77+reg120; reg105=vectors[0][indices[2]+0]*reg105; reg57=reg5*reg57;
    reg51=reg54+reg51; reg61=ponderation*reg61; reg102=reg5*reg102; reg54=reg31*reg27; reg93=ponderation*reg93;
    reg134=reg5*reg134; reg127=ponderation*reg127; reg84=ponderation*reg84; reg74=reg50-reg74; reg50=reg4*reg27;
    reg138=ponderation*reg138; reg142=reg60+reg142; reg60=reg32*reg24; reg82=reg71-reg82; reg69=reg46*reg24;
    reg77=reg4*reg135; reg62=reg79+reg62; reg79=reg31*reg135; T reg161=reg18*reg44; reg92=reg94+reg92;
    reg94=vectors[0][indices[2]+0]*reg83; reg108=reg5*reg108; reg143=vectors[0][indices[2]+0]*reg143; reg130=reg5*reg130; reg48=reg34+reg48;
    reg140=reg132+reg140; reg34=reg26*reg9; reg80=reg80+reg113; reg87=ponderation*reg87; reg121=reg122+reg121;
    reg40=reg40+reg53; reg106=reg95+reg106; reg156=reg5*reg156; reg78=reg5*reg78; reg99=ponderation*reg99;
    reg147=vectors[0][indices[2]+0]*reg147; reg8=ponderation*reg8; reg86=reg97-reg86; reg56=reg100-reg56; reg112=reg110+reg112;
    reg111=vectors[0][indices[2]+0]*reg111; reg49=reg49+reg123; reg114=reg114+reg115; reg146=reg5*reg146; reg43=ponderation*reg43;
    reg95=reg1*reg27; reg153=ponderation*reg153; reg76=reg5*reg76; reg67=reg139+reg67; reg97=reg42*reg44;
    reg152=reg119+reg152; reg100=vectors[0][indices[2]+0]*reg141; reg110=reg21*reg9; reg119=reg42*reg24; reg122=reg1*reg135;
    reg109=reg116+reg109; reg104=vectors[0][indices[2]+0]*reg104; reg135=reg33*reg135; reg24=reg18*reg24; reg88=reg126-reg88;
    reg154=reg5*reg154; reg27=reg33*reg27; reg150=ponderation*reg150; reg148=reg148+reg66; reg35=reg4*reg35;
    reg103=ponderation*reg103; reg116=vectors[0][indices[2]+0]*reg59; reg131=reg5*reg131; reg107=reg58+reg107; reg126=reg32*reg44;
    reg151=reg124+reg151; reg124=reg46*reg44; reg132=reg30*reg9; reg139=vectors[0][indices[2]+0]*reg91; reg158=reg65+reg158;
    reg9=reg23*reg9; reg49=reg5*reg49; reg54=reg71+reg54; reg87=vectors[0][indices[2]+1]*reg87; reg79=reg60-reg79;
    reg56=reg111+reg56; reg116=reg151-reg116; reg155=reg51-reg155; reg51=vectors[0][indices[2]+1]*reg8; reg142=reg5*reg142;
    reg127=vectors[0][indices[2]+1]*reg127; reg100=reg67-reg100; reg88=reg104+reg88; reg60=vectors[0][indices[2]+1]*reg103; reg65=reg38*reg44;
    reg67=reg23*reg35; reg57=ponderation*reg57; reg9=reg126-reg9; reg136=reg48-reg136; reg93=vectors[0][indices[2]+1]*reg93;
    reg43=vectors[0][indices[2]+1]*reg43; reg139=reg158-reg139; reg40=reg5*reg40; reg98=reg5*reg98; reg156=ponderation*reg156;
    reg82=reg53+reg82; reg48=reg25*reg35; reg53=reg38*reg96; reg71=vectors[0][indices[2]+1]*reg138; reg74=reg72+reg74;
    reg86=reg147+reg86; reg72=vectors[0][indices[2]+1]*reg153; reg146=ponderation*reg146; reg110=reg97+reg110; reg102=ponderation*reg102;
    reg150=vectors[0][indices[2]+1]*reg150; reg94=reg62-reg94; reg84=vectors[0][indices[2]+1]*reg84; reg62=reg37*reg35; reg76=ponderation*reg76;
    reg152=reg5*reg152; reg70=reg113+reg70; reg121=reg5*reg121; reg108=ponderation*reg108; reg130=ponderation*reg130;
    reg92=reg5*reg92; reg69=reg77+reg69; reg77=reg30*reg35; reg50=reg58+reg50; reg122=reg119+reg122;
    reg58=reg64*reg44; reg97=reg26*reg35; reg143=reg140+reg143; reg124=reg132+reg124; reg148=reg5*reg148;
    reg99=vectors[0][indices[2]+1]*reg99; reg112=reg5*reg112; reg104=reg52*reg44; reg78=ponderation*reg78; reg111=reg21*reg35;
    reg131=ponderation*reg131; reg106=reg5*reg106; reg107=reg66+reg107; reg44=reg68*reg44; reg114=reg123+reg114;
    reg66=reg20*reg35; reg113=reg68*reg96; reg27=reg118+reg27; reg35=reg39*reg35; reg118=reg52*reg96;
    reg24=reg135+reg24; reg109=reg5*reg109; reg134=ponderation*reg134; reg96=reg64*reg96; reg145=ponderation*reg145;
    reg80=reg5*reg80; reg161=reg34+reg161; reg105=reg120+reg105; reg61=vectors[0][indices[2]+1]*reg61; reg154=ponderation*reg154;
    reg95=reg115+reg95; reg27=reg159+reg27; reg82=reg5*reg82; reg69=reg5*reg69; reg92=ponderation*reg92;
    reg60=reg88-reg60; reg98=ponderation*reg98; reg131=vectors[0][indices[2]+2]*reg131; reg34=vectors[0][indices[2]+2]*reg146; reg139=reg43+reg139;
    reg121=ponderation*reg121; reg122=reg5*reg122; reg136=reg93+reg136; reg43=vectors[0][indices[2]+2]*reg134; reg157=reg54-reg157;
    reg57=vectors[0][indices[2]+2]*reg57; reg113=reg66+reg113; reg76=vectors[0][indices[2]+2]*reg76; reg110=reg5*reg110; reg24=reg5*reg24;
    reg70=reg5*reg70; reg112=ponderation*reg112; reg102=vectors[0][indices[2]+2]*reg102; reg155=reg127+reg155; reg96=reg62+reg96;
    reg114=reg5*reg114; reg9=reg5*reg9; reg80=ponderation*reg80; reg54=vectors[0][indices[2]+2]*reg156; reg118=reg35+reg118;
    reg109=ponderation*reg109; reg44=reg77+reg44; reg65=reg67+reg65; reg72=reg86-reg72; reg95=reg160+reg95;
    reg104=reg111+reg104; reg148=ponderation*reg148; reg142=ponderation*reg142; reg161=reg5*reg161; reg49=ponderation*reg49;
    reg35=vectors[0][indices[2]+2]*reg145; reg116=reg87+reg116; reg58=reg97+reg58; reg61=reg105+reg61; reg106=ponderation*reg106;
    reg94=reg84+reg94; reg53=reg48-reg53; reg51=reg56-reg51; reg79=reg5*reg79; reg99=reg143+reg99;
    reg78=vectors[0][indices[2]+2]*reg78; reg124=reg5*reg124; reg152=ponderation*reg152; reg48=vectors[0][indices[2]+2]*reg130; reg107=reg5*reg107;
    reg71=reg74-reg71; reg108=vectors[0][indices[2]+2]*reg108; reg50=reg149+reg50; reg40=ponderation*reg40; reg100=reg150+reg100;
    reg56=vectors[0][indices[2]+2]*reg154; reg51=reg78+reg51; reg27=reg5*reg27; reg9=ponderation*reg9; reg113=reg5*reg113;
    reg107=ponderation*reg107; reg112=vectors[0][indices[3]+0]*reg112; reg34=reg139-reg34; reg157=reg5*reg157; reg44=reg5*reg44;
    reg122=ponderation*reg122; reg57=reg61+reg57; reg98=vectors[0][indices[3]+0]*reg98; reg95=reg5*reg95; reg104=reg5*reg104;
    reg79=ponderation*reg79; reg82=ponderation*reg82; reg69=ponderation*reg69; reg124=ponderation*reg124; reg61=vectors[0][indices[3]+0]*reg121;
    reg71=reg108+reg71; reg50=reg5*reg50; reg53=reg5*reg53; reg148=vectors[0][indices[3]+0]*reg148; reg58=reg5*reg58;
    reg161=ponderation*reg161; reg72=reg76+reg72; reg56=reg100-reg56; reg35=reg94-reg35; reg80=vectors[0][indices[3]+0]*reg80;
    reg54=reg99-reg54; reg40=vectors[0][indices[3]+0]*reg40; reg65=reg5*reg65; reg62=vectors[0][indices[3]+0]*reg106; reg114=ponderation*reg114;
    reg66=vectors[0][indices[3]+0]*reg49; reg60=reg131+reg60; reg24=ponderation*reg24; reg118=reg5*reg118; reg96=reg5*reg96;
    reg70=ponderation*reg70; reg110=ponderation*reg110; reg102=reg155+reg102; reg142=vectors[0][indices[3]+0]*reg142; reg43=reg136-reg43;
    reg109=vectors[0][indices[3]+0]*reg109; reg67=vectors[0][indices[3]+0]*reg152; reg48=reg116-reg48; reg92=vectors[0][indices[3]+0]*reg92; reg67=reg72-reg67;
    reg44=ponderation*reg44; reg118=ponderation*reg118; reg56=reg148+reg56; reg72=vectors[0][indices[3]+1]*reg124; reg95=ponderation*reg95;
    reg74=vectors[0][indices[3]+1]*reg69; reg82=vectors[0][indices[3]+1]*reg82; reg98=reg57+reg98; reg157=ponderation*reg157; reg142=reg102+reg142;
    reg79=vectors[0][indices[3]+1]*reg79; reg48=reg92+reg48; reg9=vectors[0][indices[3]+1]*reg9; reg54=reg40+reg54; reg35=reg80+reg35;
    reg40=vectors[0][indices[3]+1]*reg161; reg53=ponderation*reg53; reg58=ponderation*reg58; reg50=ponderation*reg50; reg70=vectors[0][indices[3]+1]*reg70;
    reg61=reg71-reg61; reg122=vectors[0][indices[3]+1]*reg122; reg104=ponderation*reg104; reg57=vectors[0][indices[3]+1]*reg114; reg34=reg112+reg34;
    reg113=ponderation*reg113; reg27=ponderation*reg27; reg107=vectors[0][indices[3]+1]*reg107; reg66=reg60-reg66; reg110=vectors[0][indices[3]+1]*reg110;
    reg65=ponderation*reg65; reg96=ponderation*reg96; reg62=reg51-reg62; reg51=vectors[0][indices[3]+1]*reg24; reg43=reg109+reg43;
    reg62=reg107+reg62; reg60=vectors[0][indices[3]+2]*reg113; reg50=vectors[0][indices[3]+2]*reg50; reg74=reg48-reg74; reg53=vectors[0][indices[3]+2]*reg53;
    reg79=reg142+reg79; reg157=vectors[0][indices[3]+2]*reg157; reg65=vectors[0][indices[3]+2]*reg65; reg9=reg54+reg9; reg58=vectors[0][indices[3]+2]*reg58;
    reg40=reg35-reg40; reg82=reg98+reg82; reg61=reg70+reg61; reg35=vectors[0][indices[3]+2]*reg96; reg27=vectors[0][indices[3]+2]*reg27;
    reg51=reg43-reg51; reg66=reg110+reg66; reg43=vectors[0][indices[3]+2]*reg104; reg72=reg56-reg72; reg44=vectors[0][indices[3]+2]*reg44;
    reg118=vectors[0][indices[3]+2]*reg118; reg48=vectors[0][indices[3]+2]*reg95; reg67=reg122+reg67; reg57=reg34-reg57; reg72=reg44+reg72;
    reg53=reg82+reg53; reg157=reg79+reg157; reg65=reg9+reg65; reg48=reg67-reg48; reg57=reg118+reg57;
    reg40=reg58+reg40; reg74=reg50+reg74; reg43=reg66-reg43; reg60=reg62-reg60; reg35=reg61-reg35;
    reg51=reg27+reg51; sollicitation[indices[2]+1]+=-reg57; sollicitation[indices[2]+2]+=-reg48; sollicitation[indices[3]+0]+=-reg72; sollicitation[indices[3]+1]+=-reg60;
    sollicitation[indices[3]+2]+=-reg74; sollicitation[indices[0]+0]+=-reg65; sollicitation[indices[0]+1]+=-reg53; sollicitation[indices[0]+2]+=-reg157; sollicitation[indices[1]+0]+=-reg40;
    sollicitation[indices[1]+1]+=-reg35; sollicitation[indices[1]+2]+=-reg51; sollicitation[indices[2]+0]+=-reg43;
  #undef PNODE
}
// 
#ifndef ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
#define ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz>
void add_nodal_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const typename TM::TNode &node,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) node
  /* (*f.m).poisson_ratio */  #undef PNODE
}
#endif
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}

#ifndef elasticity_dep_read_material_to_mesh
#define elasticity_dep_read_material_to_mesh
template<class TM, class T, bool wont_add_nz>
void read_material_to_mesh_(const XmlNode &n, Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f){ 
    if(n.has_attribute("f_vol"))  
        n.get_attribute("f_vol", f.m->f_vol ); 
    else  
        std::cerr << "Warning using default value of f_vol : " << f.m->f_vol << std::endl; 

    if(n.has_attribute("lim_cond_0"))  
        n.get_attribute("lim_cond_0", f.m->lim_cond_0 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_0 : " << f.m->lim_cond_0 << std::endl; 

    if(n.has_attribute("lim_cond_1"))  
        n.get_attribute("lim_cond_1", f.m->lim_cond_1 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_1 : " << f.m->lim_cond_1 << std::endl; 

    if(n.has_attribute("poisson_ratio"))  
        n.get_attribute("poisson_ratio", f.m->poisson_ratio ); 
    else  
        std::cerr << "Warning using default value of poisson_ratio : " << f.m->poisson_ratio << std::endl; 

    if(n.has_attribute("elastic_modulus"))  
        n.get_attribute("elastic_modulus", f.m->elastic_modulus ); 
    else  
        std::cerr << "Warning using default value of elastic_modulus : " << f.m->elastic_modulus << std::endl; 

    if(n.has_attribute("density"))  
        n.get_attribute("density", f.m->density ); 
    else  
        std::cerr << "Warning using default value of density : " << f.m->density << std::endl; 

  };
#endif // elasticity_dep_read_material_to_mesh
} // namespace LMT


#include "formulation/formulation.h"
namespace LMT {
#ifndef ELASTICITY_DEP_3_NUM_0_CARAC_H
#define ELASTICITY_DEP_3_NUM_0_CARAC_H
#ifndef STRUCT_ELASTICITY_DEP
#define STRUCT_ELASTICITY_DEP
struct elasticity_dep {
  static const char *name() { return "elasticity_dep"; }
};
#endif // ELASTICITY_DEP

template<class P_T>
class CaracFormulation<elasticity_dep,3,P_T>  {
public:
  typedef P_T T;
  static const char *name() { return "elasticity_dep"; }
  static const bool matrix_will_be_definite_positive=true;
  static const bool has_nodal_matrix = true;
  static const bool has_IS_contact_matrix=false;
  static const bool need_skin_assembly=false;
  typedef Norm1_is_inf Name_convergence_criterium;
  static const unsigned nb_vectors = 4;
  static const unsigned nb_matrices = 1;
  static const unsigned auto_contact = false;
  static const bool friction_coeff_is_a_nodal_variable = 0;
  static const unsigned offset_of_pos_unknown=3;
  static const unsigned pos_is_an_unknown = false;
  static const unsigned nb_der_var = 1;
  template<class TF> static void add_to_der_vars( TF &f, const Vec<T> &v ) {
      (*f.m).poisson_ratio += v[ 0 ];
  }
  static bool is_unknown(const std::string &s) { return (s=="dep"); }
  static unsigned num_in_vec_unknown(const std::string &s) { if ( s=="dep" )return 0; return 0;  }
  template<unsigned num_mat,unsigned inner=0> struct NodalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  template<unsigned num_mat,unsigned inner=0> struct GlobalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  
  static const unsigned nb_nodal_unknowns = 3;
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
    node.dep[0]=vecs[0][indice+0]; node.dep[1]=vecs[0][indice+1]; node.dep[2]=vecs[0][indice+2];
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
    node.dep[2]=vecs[0][indice+2]; node.dep[1]=vecs[0][indice+1]; node.dep[0]=vecs[0][indice+0];
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
    vecs[0][indice+2]=node.dep[2]; vecs[1][indice+2]=node.dep[2]; vecs[2][indice+2]=node.dep[2]; vecs[3][indice+2]=node.dep[2]; vecs[4][indice+2]=node.dep[2];
    vecs[0][indice+0]=node.dep[0]; vecs[1][indice+0]=node.dep[0]; vecs[2][indice+0]=node.dep[0]; vecs[3][indice+0]=node.dep[0]; vecs[4][indice+0]=node.dep[0];
    vecs[0][indice+1]=node.dep[1]; vecs[1][indice+1]=node.dep[1]; vecs[2][indice+1]=node.dep[1]; vecs[3][indice+1]=node.dep[1]; vecs[4][indice+1]=node.dep[1];
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    T reg0=vecs[1][indice+0]-vecs[0][indice+0]; T reg1=vecs[1][indice+1]-vecs[0][indice+1]; reg1=abs(reg1); reg0=abs(reg0); T reg2=vecs[1][indice+2]-vecs[0][indice+2];
    reg2=abs(reg2); reg0=max(reg1,reg0); return max(reg2,reg0);
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
    old_vec[indice+2]=vecs[1][indice+2]; old_vec[indice+1]=vecs[1][indice+1]; old_vec[indice+0]=vecs[1][indice+0];
  }
  
  static const unsigned nb_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_nodal_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};
#endif // ELASTICITY_DEP_3_NUM_0_CARAC_H
extern "C" void apply_on_elements_after_solve_0_elasticity_dep_Hexa_0( double * );
extern "C" void apply_on_elements_after_solve_1_elasticity_dep_Hexa_1( double * );
extern "C" void apply_on_elements_after_solve_2_elasticity_dep_Hexa_2( double * );
extern "C" void apply_on_elements_after_solve_3_elasticity_dep_Hexa_3( double * );
extern "C" void apply_on_elements_after_solve_4_elasticity_dep_Hexa_4( double * );
extern "C" void apply_on_elements_after_solve_5_elasticity_dep_Hexa_5( double * );
class Hexa;
template<unsigned A,class B,class C> class Node;
template<class A,class B,class C,class D,unsigned E> class Element;

// Carac for ...
template<class P_T_pos,class P_ND,class TED,unsigned nim,class TM,class T>
class CaracFormulationForElement<elasticity_dep,Element<Hexa,DefaultBehavior,Node<3,P_T_pos,P_ND>,TED,nim>,TM,T> {
public:
    template<unsigned num_mat,unsigned inner=0> struct ElemMatricesCarac {
        static const bool symm = true;
        static const bool herm = false;
        static const bool diag = false;
        static const bool linear = true;
    };
    static const unsigned order_integration = 2;
    static const bool has_elementary_matrix = true;
    static const bool has_skin_elementary_matrix = true;
    template<class TE,class TF, class TVEVE> static void after_solve(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
    T reg0=0.25*elem.pos(0)[2]; T reg1=0.25*elem.pos(1)[1]; T reg2=0.25*elem.pos(1)[2]; T reg3=0.25*elem.pos(0)[1]; T reg4=0.25*elem.pos(2)[2];
    T reg5=reg2+reg0; T reg6=0.25*elem.pos(2)[1]; T reg7=reg3+reg1; reg0=reg2-reg0; reg3=reg1-reg3;
    reg1=reg6+reg7; reg2=reg4-reg5; reg0=reg4+reg0; T reg8=0.25*elem.pos(3)[2]; reg4=reg5+reg4;
    reg5=0.25*elem.pos(1)[0]; T reg9=0.25*elem.pos(0)[0]; reg7=reg6-reg7; T reg10=0.25*elem.pos(3)[1]; reg3=reg6+reg3;
    reg6=0.25*elem.pos(2)[0]; reg7=reg7+reg10; T reg11=0.25*elem.pos(4)[1]; T reg12=reg5+reg9; reg4=reg4+reg8;
    reg2=reg8+reg2; reg8=reg0-reg8; reg1=reg10+reg1; reg10=reg3-reg10; reg0=0.25*elem.pos(4)[2];
    reg9=reg5-reg9; reg3=0.25*elem.pos(5)[2]; reg2=reg2-reg0; reg5=0.25*elem.pos(3)[0]; reg1=reg11-reg1;
    reg9=reg9+reg6; reg8=reg8-reg0; reg10=reg10-reg11; reg4=reg0-reg4; reg11=reg7-reg11;
    reg0=0.25*elem.pos(5)[1]; reg7=reg6-reg12; reg9=reg9-reg5; T reg13=0.25*elem.pos(6)[2]; reg4=reg4+reg3;
    reg7=reg5+reg7; T reg14=0.25*elem.pos(6)[1]; reg11=reg11-reg0; reg12=reg6+reg12; reg8=reg3+reg8;
    reg10=reg0+reg10; reg1=reg0+reg1; reg0=0.25*elem.pos(4)[0]; reg3=reg2-reg3; reg10=reg14+reg10;
    reg2=0.25*elem.pos(5)[0]; reg11=reg11+reg14; reg6=0.25*elem.pos(7)[1]; reg9=reg9-reg0; T reg15=0.25*vectors[0][indices[1]+0];
    T reg16=1+(*f.m).poisson_ratio; T reg17=0.25*vectors[0][indices[1]+1]; T reg18=0.25*vectors[0][indices[0]+1]; T reg19=0.25*vectors[0][indices[1]+2]; T reg20=0.25*vectors[0][indices[0]+2];
    reg12=reg5+reg12; reg8=reg13+reg8; reg5=0.25*vectors[0][indices[0]+0]; reg1=reg14+reg1; reg3=reg13+reg3;
    reg7=reg7-reg0; reg14=0.25*elem.pos(7)[2]; reg13=reg4+reg13; reg4=reg15+reg5; reg7=reg7-reg2;
    T reg21=reg17-reg18; reg17=reg18+reg17; reg5=reg15-reg5; reg15=0.25*vectors[0][indices[2]+1]; reg18=reg19-reg20;
    T reg22=0.25*vectors[0][indices[2]+2]; reg19=reg20+reg19; reg20=0.25*vectors[0][indices[2]+0]; reg12=reg0-reg12; reg8=reg8-reg14;
    reg1=reg6+reg1; reg10=reg10-reg6; reg13=reg13+reg14; reg3=reg14+reg3; reg6=reg11+reg6;
    reg16=reg16/(*f.m).elastic_modulus; reg0=0.25*elem.pos(6)[0]; reg9=reg9+reg2; reg11=reg15-reg17; reg14=0.25*vectors[0][indices[3]+1];
    T reg23=reg6*reg13; T reg24=reg20-reg4; T reg25=0.25*vectors[0][indices[3]+0]; reg5=reg5+reg20; T reg26=reg3*reg1;
    T reg27=reg10*reg13; T reg28=reg1*reg8; T reg29=reg22-reg19; reg12=reg2+reg12; reg2=0.25*vectors[0][indices[3]+2];
    reg18=reg22+reg18; reg21=reg15+reg21; reg7=reg0+reg7; reg9=reg9+reg0; T reg30=0.25*elem.pos(7)[0];
    T reg31=pow(reg16,2); T reg32=1.0/(*f.m).elastic_modulus; reg29=reg2+reg29; reg17=reg15+reg17; reg28=reg27-reg28;
    reg16=reg16*reg31; reg12=reg0+reg12; reg0=reg10*reg3; reg15=reg6*reg8; reg27=0.25*vectors[0][indices[4]+2];
    reg22=reg19+reg22; reg9=reg9-reg30; reg18=reg18-reg2; reg21=reg21-reg14; reg19=(*f.m).poisson_ratio/(*f.m).elastic_modulus;
    reg24=reg25+reg24; reg4=reg20+reg4; reg11=reg11+reg14; reg20=0.25*vectors[0][indices[4]+1]; T reg33=0.25*vectors[0][indices[4]+0];
    reg5=reg5-reg25; reg26=reg23-reg26; reg7=reg30+reg7; reg24=reg24-reg33; reg23=reg9*reg26;
    T reg34=0.25*vectors[0][indices[5]+2]; reg2=reg22+reg2; reg22=reg32*reg16; reg16=reg19*reg16; reg21=reg21-reg20;
    reg18=reg18-reg27; reg15=reg0-reg15; reg29=reg29-reg27; reg11=reg11-reg20; reg12=reg30+reg12;
    reg17=reg14+reg17; reg0=0.25*vectors[0][indices[5]+0]; reg14=0.25*vectors[0][indices[5]+1]; reg5=reg5-reg33; reg30=reg7*reg28;
    reg4=reg25+reg4; reg25=reg3*reg12; T reg35=reg7*reg13; reg13=reg9*reg13; T reg36=reg8*reg12;
    T reg37=reg32*reg22; reg11=reg11-reg14; T reg38=reg10*reg12; reg29=reg29-reg34; reg18=reg34+reg18;
    T reg39=0.25*vectors[0][indices[6]+1]; T reg40=reg9*reg1; reg4=reg33-reg4; reg24=reg24-reg0; reg33=0.25*vectors[0][indices[6]+0];
    reg5=reg5+reg0; reg17=reg20-reg17; reg30=reg23-reg30; reg22=reg19*reg22; reg20=reg12*reg15;
    reg12=reg6*reg12; reg1=reg7*reg1; reg23=0.25*vectors[0][indices[6]+2]; reg21=reg14+reg21; T reg41=reg19*reg16;
    reg2=reg27-reg2; reg4=reg0+reg4; reg25=reg35-reg25; reg24=reg33+reg24; reg0=0.25*vectors[0][indices[7]+0];
    reg5=reg5+reg33; reg17=reg14+reg17; reg14=0.25*vectors[0][indices[7]+1]; reg11=reg11+reg39; reg8=reg7*reg8;
    reg3=reg9*reg3; reg21=reg39+reg21; reg37=reg37-reg41; reg20=reg30+reg20; reg22=reg41+reg22;
    reg34=reg2+reg34; reg2=0.25*vectors[0][indices[7]+2]; reg16=reg32*reg16; reg12=reg1-reg12; reg1=reg19*reg31;
    reg18=reg23+reg18; reg31=reg32*reg31; reg38=reg40-reg38; reg6=reg9*reg6; reg29=reg23+reg29;
    reg36=reg13-reg36; reg7=reg10*reg7; reg4=reg33+reg4; reg8=reg3-reg8; reg17=reg39+reg17;
    reg7=reg6-reg7; reg26=reg26/reg20; reg24=reg0+reg24; reg28=reg28/reg20; reg16=reg41+reg16;
    reg5=reg5-reg0; reg3=reg32*reg31; reg6=reg19*reg1; reg31=reg19*reg31; reg29=reg2+reg29;
    reg38=reg38/reg20; reg18=reg18-reg2; reg11=reg11+reg14; reg12=reg12/reg20; reg9=reg19*reg22;
    reg25=reg25/reg20; reg36=reg36/reg20; reg23=reg34+reg23; reg10=reg32*reg37; reg21=reg21-reg14;
    reg13=reg12*reg5; reg27=reg38*reg24; reg30=reg26*reg5; reg33=reg18*reg25; reg31=reg6+reg31;
    reg34=reg11*reg28; reg35=reg29*reg36; reg39=reg21*reg26; reg40=reg28*reg24; reg15=reg15/reg20;
    reg2=reg23+reg2; reg5=reg25*reg5; reg24=reg36*reg24; reg26=reg18*reg26; reg4=reg0+reg4;
    reg0=reg38*reg11; reg23=reg12*reg21; reg28=reg29*reg28; reg17=reg14+reg17; reg9=reg10-reg9;
    reg8=reg8/reg20; reg20=reg7/reg20; reg11=reg36*reg11; reg7=reg19*reg16; reg1=reg32*reg1;
    reg3=reg3-reg6; reg21=reg25*reg21; reg10=reg17*reg15; reg34=reg39-reg34; reg27=reg13-reg27;
    reg21=reg11-reg21; reg11=reg20*reg4; reg13=reg8*reg4; reg5=reg24-reg5; reg28=reg26-reg28;
    reg14=reg2*reg15; reg24=reg20*reg17; reg17=reg8*reg17; reg0=reg23-reg0; reg31=reg19*reg31;
    reg29=reg38*reg29; reg4=reg15*reg4; reg18=reg12*reg18; reg8=reg2*reg8; reg7=reg9-reg7;
    reg3=reg32*reg3; reg9=reg6+reg1; reg40=reg30-reg40; reg33=reg35-reg33; reg31=reg3-reg31;
    reg27=reg11+reg27; reg10=reg34+reg10; reg9=reg19*reg9; reg29=reg18-reg29; reg13=reg5-reg13;
    reg16=reg16/reg7; reg8=reg33-reg8; reg22=reg22/reg7; reg37=reg37/reg7; reg20=reg2*reg20;
    reg14=reg28+reg14; reg17=reg21-reg17; elem.epsilon[0][1]=reg17; reg0=reg24+reg0; reg4=reg40+reg4;
    elem.epsilon[0][0]=reg4; reg8=reg0+reg8; reg14=reg27+reg14; reg29=reg20+reg29; elem.epsilon[0][2]=reg29;
    reg0=reg22*reg17; reg10=reg13+reg10; reg9=reg31-reg9; reg2=reg16*reg17; reg3=reg37*reg4;
    reg5=reg22*reg4; reg11=reg37*reg17; reg7=reg9/reg7; reg3=reg0+reg3; reg0=reg16*reg29;
    reg8=0.5*reg8; elem.epsilon[0][5]=reg8; reg14=0.5*reg14; elem.epsilon[0][4]=reg14; reg11=reg5+reg11;
    reg2=reg5+reg2; reg5=reg37*reg29; reg4=reg17+reg4; reg10=0.5*reg10; elem.epsilon[0][3]=reg10;
    elem.sigma[0][5]=reg7*reg8; elem.tr_epsilon=reg29+reg4; elem.sigma[0][0]=reg0+reg3; elem.sigma[0][4]=reg7*reg14; elem.sigma[0][1]=reg0+reg11;
    elem.sigma[0][2]=reg2+reg5; elem.sigma[0][3]=reg7*reg10;
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_2(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_3(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_4(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_5(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_6(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
  
  static const unsigned nb_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};

// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[1]; T reg1=1-var_inter[2]; T reg2=1-var_inter[0]; T reg3=reg1*var_inter[0]; T reg4=reg0*var_inter[0];
    T reg5=reg1*reg2; T reg6=reg0*reg2; T reg7=reg1*reg0; T reg8=reg4*elem.pos(1)[2]; T reg9=reg6*elem.pos(0)[2];
    T reg10=elem.pos(0)[1]*reg7; T reg11=reg1*var_inter[1]; T reg12=elem.pos(1)[2]*reg3; T reg13=elem.pos(0)[2]*reg5; T reg14=elem.pos(1)[1]*reg7;
    T reg15=reg4*elem.pos(1)[1]; T reg16=reg6*elem.pos(0)[1]; T reg17=var_inter[0]*var_inter[1]; T reg18=elem.pos(0)[2]*reg7; T reg19=elem.pos(1)[2]*reg7;
    T reg20=elem.pos(0)[1]*reg5; T reg21=elem.pos(1)[1]*reg3; T reg22=elem.pos(2)[2]*reg3; T reg23=reg12+reg13; reg14=reg14-reg10;
    T reg24=elem.pos(2)[2]*reg11; T reg25=reg2*var_inter[1]; reg19=reg19-reg18; T reg26=elem.pos(2)[1]*reg11; T reg27=reg20+reg21;
    T reg28=elem.pos(2)[1]*reg3; T reg29=reg8+reg9; T reg30=reg17*elem.pos(2)[2]; T reg31=reg17*elem.pos(2)[1]; T reg32=reg16+reg15;
    T reg33=elem.pos(3)[1]*reg11; T reg34=reg0*var_inter[2]; T reg35=elem.pos(0)[0]*reg5; T reg36=reg32+reg31; T reg37=elem.pos(1)[0]*reg3;
    reg26=reg14+reg26; reg14=reg25*elem.pos(3)[1]; T reg38=elem.pos(3)[2]*reg11; T reg39=elem.pos(3)[2]*reg5; reg22=reg22-reg23;
    T reg40=elem.pos(1)[0]*reg7; reg24=reg19+reg24; reg19=reg2*var_inter[2]; reg28=reg28-reg27; T reg41=elem.pos(3)[1]*reg5;
    T reg42=elem.pos(0)[0]*reg7; T reg43=reg29+reg30; T reg44=reg25*elem.pos(3)[2]; reg40=reg40-reg42; reg41=reg28+reg41;
    reg28=reg4*elem.pos(1)[0]; T reg45=reg6*elem.pos(0)[0]; T reg46=elem.pos(4)[1]*reg19; T reg47=elem.pos(2)[0]*reg11; T reg48=elem.pos(4)[2]*reg19;
    reg39=reg22+reg39; reg24=reg24-reg38; reg22=var_inter[0]*var_inter[2]; T reg49=elem.pos(4)[2]*reg34; T reg50=reg6*elem.pos(4)[2];
    T reg51=reg43+reg44; T reg52=elem.pos(4)[1]*reg34; T reg53=elem.pos(2)[0]*reg3; reg26=reg26-reg33; T reg54=reg35+reg37;
    T reg55=reg36+reg14; T reg56=reg6*elem.pos(4)[1]; reg24=reg24-reg49; T reg57=reg4*elem.pos(5)[2]; reg50=reg50-reg51;
    T reg58=elem.pos(5)[2]*reg34; T reg59=reg17*elem.pos(2)[0]; T reg60=reg45+reg28; T reg61=elem.pos(5)[1]*reg34; reg41=reg41-reg46;
    T reg62=elem.pos(5)[1]*reg22; reg56=reg56-reg55; T reg63=reg4*elem.pos(5)[1]; reg47=reg40+reg47; reg40=elem.pos(3)[0]*reg11;
    reg26=reg26-reg52; T reg64=elem.pos(3)[0]*reg5; reg53=reg53-reg54; T reg65=var_inter[1]*var_inter[2]; reg39=reg39-reg48;
    T reg66=elem.pos(5)[2]*reg22; reg47=reg47-reg40; reg61=reg26+reg61; reg58=reg24+reg58; reg24=elem.pos(6)[2]*reg65;
    reg26=elem.pos(6)[1]*reg65; T reg67=elem.pos(4)[0]*reg34; T reg68=elem.pos(4)[0]*reg19; reg64=reg53+reg64; reg53=reg17*elem.pos(6)[2];
    reg57=reg50+reg57; reg50=reg17*elem.pos(6)[1]; reg63=reg56+reg63; reg56=reg25*elem.pos(3)[0]; T reg69=reg60+reg59;
    reg41=reg41-reg62; T reg70=elem.pos(6)[1]*reg22; T reg71=elem.pos(6)[2]*reg22; reg39=reg39-reg66; T reg72=elem.pos(5)[0]*reg22;
    reg64=reg64-reg68; T reg73=reg25*elem.pos(7)[2]; reg53=reg57+reg53; reg70=reg41+reg70; reg41=elem.pos(7)[1]*reg65;
    reg26=reg61+reg26; reg57=elem.pos(7)[1]*reg19; reg61=elem.pos(7)[2]*reg65; T reg74=reg25*elem.pos(7)[1]; reg50=reg63+reg50;
    reg47=reg47-reg67; reg63=elem.pos(5)[0]*reg34; T reg75=reg6*elem.pos(4)[0]; T reg76=reg69+reg56; reg24=reg58+reg24;
    reg71=reg39+reg71; reg39=elem.pos(7)[2]*reg19; reg24=reg24-reg61; reg64=reg64-reg72; reg73=reg53+reg73;
    reg74=reg50+reg74; reg50=reg4*elem.pos(5)[0]; reg75=reg75-reg76; reg39=reg71+reg39; reg57=reg70+reg57;
    reg63=reg47+reg63; reg47=elem.pos(6)[0]*reg65; reg53=1+(*f.m).poisson_ratio; reg58=elem.pos(6)[0]*reg22; reg26=reg26-reg41;
    reg70=reg24*reg74; reg71=reg39*reg74; reg53=reg53/(*f.m).elastic_modulus; T reg77=reg26*reg73; T reg78=reg57*reg73;
    T reg79=reg17*elem.pos(6)[0]; reg50=reg75+reg50; reg75=elem.pos(7)[0]*reg19; reg58=reg64+reg58; reg64=var_inter[1]-0.21132486540518707896;
    T reg80=elem.pos(7)[0]*reg65; reg47=reg63+reg47; reg63=var_inter[0]-0.21132486540518707896; T reg81=reg2-0.21132486540518707896; reg64=reg64/0.57735026918962573106;
    reg63=reg63/0.57735026918962573106; T reg82=var_inter[2]-0.21132486540518707896; reg71=reg78-reg71; reg78=pow(reg53,2); reg70=reg77-reg70;
    reg77=reg26*reg39; T reg83=reg24*reg57; reg79=reg50+reg79; reg50=reg25*elem.pos(7)[0]; reg81=reg81/0.57735026918962573106;
    T reg84=reg0-0.21132486540518707896; reg75=reg58+reg75; reg47=reg47-reg80; reg58=1.0/(*f.m).elastic_modulus; T reg85=(*f.m).poisson_ratio/(*f.m).elastic_modulus;
    reg82=reg82/0.57735026918962573106; reg50=reg79+reg50; reg53=reg53*reg78; reg81=1-reg81; reg64=1-reg64;
    reg84=reg84/0.57735026918962573106; reg63=1-reg63; reg79=reg47*reg71; T reg86=reg75*reg70; reg83=reg77-reg83;
    reg77=reg64*reg81; T reg87=reg24*reg50; reg84=1-reg84; T reg88=reg39*reg50; T reg89=reg75*reg73;
    reg73=reg47*reg73; T reg90=reg50*reg83; reg86=reg79-reg86; reg79=reg58*reg78; reg82=1-reg82;
    reg78=reg85*reg78; T reg91=reg58*reg53; reg53=reg85*reg53; reg64=reg63*reg64; reg90=reg86+reg90;
    reg86=reg64*reg82; T reg92=reg26*reg50; reg50=reg57*reg50; T reg93=reg47*reg74; reg39=reg47*reg39;
    reg87=reg73-reg87; reg24=reg24*reg75; reg74=reg75*reg74; reg88=reg89-reg88; reg73=reg85*reg79;
    reg89=reg85*reg78; reg79=reg58*reg79; T reg94=reg85*reg91; T reg95=reg85*reg53; T reg96=reg82*reg77;
    reg81=reg81*reg84; T reg97=reg1-0.21132486540518707896; reg91=reg58*reg91; reg87=reg87/reg90; reg88=reg88/reg90;
    reg70=reg70/reg90; reg50=reg74-reg50; reg71=reg71/reg90; reg73=reg89+reg73; reg79=reg79-reg89;
    reg74=reg82*reg81; reg78=reg58*reg78; reg84=reg63*reg84; reg53=reg58*reg53; reg97=reg97/0.57735026918962573106;
    reg75=reg26*reg75; reg91=reg91-reg95; reg26=reg86*elem.proute[0](1,1); reg24=reg39-reg24; reg57=reg47*reg57;
    reg39=reg96*elem.proute[1](1,1); reg94=reg95+reg94; reg92=reg93-reg92; reg79=reg58*reg79; reg24=reg24/reg90;
    reg73=reg85*reg73; reg47=reg22*reg87; reg63=reg89+reg78; reg93=reg22*reg70; reg53=reg95+reg53;
    reg92=reg92/reg90; reg75=reg57-reg75; reg58=reg58*reg91; reg57=reg85*reg94; reg83=reg83/reg90;
    reg95=reg74*elem.proute[2](1,1); reg39=reg26+reg39; reg26=reg88*reg11; T reg98=reg5*reg70; T reg99=reg71*reg11;
    reg97=1-reg97; reg82=reg82*reg84; T reg100=reg71*reg34; reg50=reg50/reg90; T reg101=reg88*reg34;
    T reg102=reg5*reg87; T reg103=reg3*reg87; T reg104=reg4*reg83; reg95=reg39+reg95; reg39=reg82*elem.proute[3](1,1);
    T reg105=reg88*reg65; T reg106=reg7*reg50; T reg107=reg5*reg92; T reg108=reg25*reg24; T reg109=reg102+reg26;
    T reg110=reg11*reg50; T reg111=reg65*reg50; T reg112=reg100+reg93; reg73=reg79-reg73; reg63=reg85*reg63;
    reg79=reg25*reg83; T reg113=reg3*reg70; T reg114=reg98+reg99; T reg115=reg7*reg88; reg75=reg75/reg90;
    T reg116=reg19*reg70; T reg117=reg19*reg87; T reg118=reg64*reg97; T reg119=reg22*reg92; T reg120=reg34*reg50;
    T reg121=reg19*reg92; T reg122=reg7*reg71; T reg123=reg71*reg65; T reg124=reg3*reg92; reg85=reg85*reg53;
    reg57=reg58-reg57; reg58=reg4*reg24; T reg125=reg101+reg47; T reg126=reg58+reg125; T reg127=reg47-reg105;
    T reg128=reg123-reg93; T reg129=reg120+reg119; T reg130=reg111-reg119; reg112=reg104+reg112; T reg131=reg114+reg79;
    T reg132=reg110-reg124; T reg133=reg17*reg75; reg109=reg109+reg108; T reg134=reg17*reg24; T reg135=reg103-reg26;
    T reg136=reg17*reg83; T reg137=reg99-reg113; T reg138=reg25*reg75; T reg139=reg107+reg110; T reg140=reg116-reg100;
    T reg141=reg101-reg117; T reg142=reg106+reg124; T reg143=reg4*reg75; T reg144=reg121-reg120; T reg145=reg115+reg103;
    T reg146=reg122+reg113; T reg147=reg115-reg102; T reg148=reg6*reg24; T reg149=reg118*elem.proute[4](1,1); reg39=reg95+reg39;
    reg85=reg57-reg85; reg57=reg117+reg105; reg95=reg6*reg83; T reg150=reg6*reg75; T reg151=reg107-reg106;
    T reg152=reg98-reg122; T reg153=reg77*reg97; T reg154=reg116+reg123; reg63=reg73-reg63; reg73=reg121+reg111;
    reg63=reg63/reg85; reg135=reg135+reg134; reg146=reg146-reg104; T reg155=0.5*reg131; T reg156=reg58-reg145;
    reg137=reg137-reg136; reg144=reg150+reg144; T reg157=reg81*reg97; T reg158=reg138+reg139; reg142=reg142-reg143;
    T reg159=reg138-reg73; reg151=reg151-reg150; T reg160=reg79-reg154; reg127=reg127-reg134; reg128=reg136+reg128;
    reg147=reg147+reg148; reg132=reg132-reg133; T reg161=0.5*reg112; reg57=reg57-reg108; reg140=reg95+reg140;
    reg129=reg143+reg129; reg141=reg141-reg148; T reg162=reg153*elem.proute[5](1,1); T reg163=0.5*reg126; reg152=reg152-reg95;
    reg149=reg39+reg149; reg130=reg133+reg130; reg39=0.5*reg109; T reg164=reg63*reg155; T reg165=0.5*reg146;
    T reg166=0.5*reg158; reg97=reg84*reg97; T reg167=reg63*reg39; T reg168=0.5*reg135; reg162=reg149+reg162;
    reg149=reg157*elem.proute[6](1,1); T reg169=0.5*reg57; T reg170=0.5*reg132; T reg171=0.5*reg137; T reg172=0.5*reg151;
    T reg173=0.5*reg127; T reg174=0.5*reg147; T reg175=reg63*reg161; T reg176=0.5*reg129; T reg177=0.5*reg152;
    T reg178=reg63*reg163; T reg179=0.5*reg130; T reg180=0.5*reg128; T reg181=0.5*reg140; reg91=reg91/reg85;
    T reg182=0.5*reg156; T reg183=0.5*reg144; T reg184=0.5*reg159; T reg185=0.5*reg141; T reg186=0.5*reg160;
    T reg187=0.5*reg142; T reg188=reg91*reg158; T reg189=reg63*reg171; T reg190=reg63*reg173; T reg191=reg63*reg184;
    T reg192=reg91*reg126; T reg193=reg91*reg131; reg175=2*reg175; T reg194=reg63*reg185; T reg195=reg63*reg176;
    T reg196=reg63*reg169; T reg197=2*reg164; T reg198=2*reg178; T reg199=reg63*reg183; T reg200=reg91*reg112;
    T reg201=reg63*reg186; T reg202=reg63*reg179; T reg203=reg63*reg166; T reg204=reg63*reg181; T reg205=reg91*reg129;
    T reg206=reg91*reg109; T reg207=reg63*reg180; reg167=2*reg167; T reg208=reg63*reg187; T reg209=reg63*reg174;
    T reg210=reg63*reg170; T reg211=reg63*reg177; T reg212=reg63*reg182; reg149=reg162+reg149; reg162=reg97*elem.proute[7](1,1);
    T reg213=reg63*reg172; reg94=reg94/reg85; T reg214=reg63*reg165; T reg215=reg63*reg168; reg85=reg53/reg85;
    reg199=2*reg199; reg212=2*reg212; reg53=reg85*reg126; reg207=2*reg207; T reg216=reg91*reg156;
    reg208=2*reg208; T reg217=reg197*reg161; reg194=2*reg194; T reg218=reg94*reg146; T reg219=reg94*reg112;
    T reg220=reg85*reg130; T reg221=reg126*reg206; T reg222=reg91*reg140; reg214=2*reg214; T reg223=reg91*reg144;
    T reg224=reg158*reg205; T reg225=reg91*reg135; T reg226=reg39*reg198; T reg227=reg94*reg126; T reg228=reg131*reg200;
    reg213=2*reg213; reg195=2*reg195; T reg229=reg94*reg131; T reg230=reg129*reg188; reg211=2*reg211;
    T reg231=reg91*reg128; T reg232=reg94*reg137; reg209=2*reg209; T reg233=reg85*reg151; T reg234=reg91*reg152;
    reg190=2*reg190; T reg235=reg91*reg159; T reg236=reg91*reg130; T reg237=reg94*reg140; T reg238=reg85*reg144;
    reg202=2*reg202; reg204=2*reg204; T reg239=reg91*reg146; T reg240=reg91*reg141; T reg241=reg109*reg192;
    T reg242=2*reg203; T reg243=reg193*reg112; reg189=2*reg189; T reg244=reg91*reg127; T reg245=reg167*reg163;
    T reg246=reg91*reg57; reg201=2*reg201; T reg247=reg91*reg132; T reg248=reg91*reg147; T reg249=reg91*reg137;
    reg191=2*reg191; T reg250=reg91*reg151; T reg251=reg85*reg132; reg215=2*reg215; T reg252=reg94*reg152;
    T reg253=reg94*reg160; T reg254=reg85*reg129; T reg255=reg91*reg142; reg210=2*reg210; T reg256=reg85*reg159;
    T reg257=reg91*reg160; T reg258=reg85*reg158; reg162=reg149+reg162; reg149=reg85*reg109; T reg259=reg85*reg142;
    T reg260=reg155*reg175; T reg261=reg94*reg128; T reg262=reg94*reg109; reg196=2*reg196; T reg263=reg258*reg112;
    T reg264=reg239*reg131; T reg265=reg131*reg238; T reg266=reg234*reg160; T reg267=reg212*reg39; T reg268=reg131*reg222;
    T reg269=reg182*reg215; T reg270=reg239*reg112; T reg271=reg242*reg180; T reg272=reg130*reg229; T reg273=reg146*reg231;
    T reg274=reg233*reg131; T reg275=reg209*reg169; T reg276=reg211*reg166; T reg277=reg182*reg190; T reg278=reg39*reg194;
    T reg279=reg146*reg249; T reg280=reg215*reg39; T reg281=reg249*reg131; T reg282=reg182*reg194; T reg283=reg146*reg222;
    T reg284=reg214*reg166; T reg285=reg215*reg163; T reg286=reg249*reg112; T reg287=reg187*reg197; T reg288=reg146*reg258;
    T reg289=reg259*reg131; T reg290=reg146*reg200; T reg291=reg182*reg198; T reg292=reg130*reg236; T reg293=reg251*reg131;
    T reg294=reg189*reg166; T reg295=reg254*reg131; T reg296=reg39*reg167; T reg297=reg131*reg193; T reg298=reg130*reg188;
    T reg299=reg243+reg245; T reg300=reg242*reg176; T reg301=reg182*reg167; T reg302=reg146*reg193; T reg303=reg39*reg197;
    T reg304=reg131*reg262; T reg305=reg130*reg235; T reg306=reg212*reg163; T reg307=reg109*reg216; T reg308=reg144*reg229;
    T reg309=reg190*reg169; T reg310=reg151*reg229; T reg311=reg177*reg242; T reg312=reg242*reg181; T reg313=reg231*reg160;
    T reg314=reg170*reg197; T reg315=reg151*reg188; T reg316=reg144*reg188; T reg317=reg211*reg155; T reg318=reg109*reg248;
    T reg319=reg198*reg169; T reg320=reg137*reg258; T reg321=reg200*reg160; T reg322=reg85*reg141; T reg323=reg151*reg223;
    T reg324=reg144*reg223; T reg325=reg130*reg255; T reg326=reg167*reg166; T reg327=reg109*reg258; T reg328=reg155*reg197;
    T reg329=reg109*reg206; T reg330=reg211*reg186; T reg331=reg57*reg248; T reg332=reg85*reg147; T reg333=reg151*reg250;
    T reg334=reg144*reg250; T reg335=reg130*reg223; T reg336=reg85*reg156; T reg337=reg144*reg255; T reg338=reg169*reg196;
    T reg339=reg130*reg205; T reg340=reg160*reg257; T reg341=reg85*reg135; T reg342=reg144*reg247; T reg343=reg151*reg247;
    T reg344=reg214*reg155; T reg345=reg215*reg169; T reg346=reg151*reg235; T reg347=reg131*reg231; T reg348=reg249*reg160;
    T reg349=reg168*reg194; T reg350=reg39*reg190; T reg351=reg234*reg146; T reg352=reg209*reg182; T reg353=reg166*reg175;
    T reg354=reg144*reg235; T reg355=reg234*reg112; T reg356=reg166*reg195; reg228=reg226+reg228; T reg357=reg212*reg169;
    T reg358=reg239*reg160; T reg359=reg209*reg163; T reg360=reg146*reg239; T reg361=reg182*reg212; T reg362=reg166*reg204;
    T reg363=reg142*reg255; T reg364=reg194*reg169; T reg365=reg222*reg160; T reg366=reg130*reg247; T reg367=reg197*reg184;
    T reg368=reg258*reg160; T reg369=reg137*reg222; T reg370=reg151*reg205; T reg371=reg144*reg205; T reg372=reg85*reg127;
    T reg373=reg131*reg257; T reg374=reg167*reg169; T reg375=reg193*reg160; T reg376=reg39*reg196; T reg377=reg151*reg236;
    T reg378=reg166*reg207; T reg379=reg131*reg220; T reg380=reg144*reg236; T reg381=reg85*reg57; T reg382=reg249*reg128;
    T reg383=reg215*reg173; T reg384=reg211*reg180; T reg385=reg135*reg248; T reg386=reg211*reg171; T reg387=reg142*reg236;
    T reg388=reg129*reg255; T reg389=reg193*reg128; T reg390=reg167*reg173; T reg391=reg135*reg216; T reg392=reg214*reg171;
    T reg393=reg127*reg248; reg221=reg217+reg221; T reg394=reg171*reg207; T reg395=reg135*reg244; T reg396=reg204*reg161;
    T reg397=reg142*reg250; T reg398=reg126*reg240; T reg399=reg234*reg137; T reg400=reg129*reg229; T reg401=reg142*reg235;
    T reg402=reg126*reg216; T reg403=reg189*reg180; T reg404=reg127*reg225; T reg405=reg132*reg250; T reg406=reg156*reg244;
    T reg407=reg189*reg161; T reg408=reg126*reg225; T reg409=reg214*reg180; T reg410=reg131*reg256; T reg411=reg129*reg247;
    T reg412=reg166*reg201; T reg413=reg127*reg216; T reg414=reg156*reg246; T reg415=reg165*reg201; T reg416=reg171*reg201;
    T reg417=reg135*reg246; T reg418=reg126*reg246; T reg419=reg161*reg175; T reg420=reg200*reg128; T reg421=reg198*reg173;
    T reg422=reg126*reg192; T reg423=reg198*reg176; T reg424=reg171*reg204; T reg425=reg135*reg240; T reg426=reg173*reg190;
    T reg427=reg128*reg231; T reg428=reg142*reg247; T reg429=reg254*reg126; T reg430=reg142*reg229; T reg431=reg161*reg201;
    T reg432=reg142*reg188; T reg433=reg165*reg242; T reg434=reg171*reg197; T reg435=reg135*reg206; T reg436=reg173*reg196;
    T reg437=reg171*reg175; T reg438=reg128*reg257; T reg439=reg142*reg205; T reg440=reg258*reg128; T reg441=reg135*reg192;
    T reg442=reg198*reg161; T reg443=reg109*reg229; T reg444=reg167*reg155; T reg445=reg126*reg219; T reg446=reg197*reg179;
    T reg447=reg129*reg250; T reg448=reg222*reg128; T reg449=reg194*reg173; T reg450=reg135*reg225; T reg451=reg109*reg225;
    T reg452=reg189*reg155; T reg453=reg171*reg189; T reg454=reg142*reg223; T reg455=reg127*reg246; T reg456=reg156*reg248;
    T reg457=reg211*reg165; T reg458=reg112*reg227; T reg459=reg163*reg175; T reg460=reg132*reg205; T reg461=reg112*reg231;
    T reg462=reg163*reg190; T reg463=reg180*reg207; T reg464=reg127*reg244; T reg465=reg156*reg216; T reg466=reg165*reg214;
    T reg467=reg132*reg223; T reg468=reg175*reg180; T reg469=reg127*reg192; T reg470=reg156*reg225; T reg471=reg165*reg189;
    T reg472=reg137*reg200; T reg473=reg197*reg176; T reg474=reg130*reg250; T reg475=reg234*reg131; T reg476=reg209*reg39;
    T reg477=reg222*reg112; T reg478=reg194*reg163; T reg479=reg129*reg236; T reg480=reg129*reg205; T reg481=reg146*reg257;
    T reg482=reg182*reg196; T reg483=reg132*reg235; T reg484=reg112*reg200; T reg485=reg163*reg198; T reg486=reg132*reg236;
    T reg487=reg168*reg167; T reg488=reg137*reg193; T reg489=reg163*reg195; T reg490=reg129*reg53; T reg491=reg180*reg201;
    T reg492=reg137*reg231; T reg493=reg168*reg190; T reg494=reg212*reg168; T reg495=reg156*reg240; T reg496=reg165*reg204;
    T reg497=reg197*reg180; T reg498=reg127*reg206; T reg499=reg132*reg255; T reg500=reg239*reg137; T reg501=reg217+reg230;
    T reg502=reg214*reg161; T reg503=reg156*reg192; T reg504=reg239*reg128; T reg505=reg212*reg173; T reg506=reg137*reg257;
    T reg507=reg168*reg196; T reg508=reg242*reg161; T reg509=reg165*reg175; T reg510=reg209*reg168; T reg511=reg168*reg198;
    T reg512=reg129*reg235; T reg513=reg168*reg215; T reg514=reg137*reg249; T reg515=reg112*reg257; T reg516=reg163*reg196;
    T reg517=reg129*reg223; T reg518=reg234*reg128; T reg519=reg132*reg188; T reg520=reg209*reg173; T reg521=reg204*reg180;
    T reg522=reg156*reg206; T reg523=reg165*reg197; T reg524=reg127*reg240; T reg525=reg171*reg242; T reg526=reg132*reg229;
    T reg527=reg132*reg247; T reg528=reg211*reg161; T reg529=reg126*reg248; T reg530=reg155*reg199; T reg531=reg158*reg237;
    T reg532=reg155*reg207; T reg533=reg234*reg140; T reg534=reg141*reg248; T reg535=reg181*reg175; T reg536=reg141*reg192;
    T reg537=reg159*reg250; T reg538=reg158*reg236; reg236=reg159*reg236; T reg539=reg177*reg211; reg248=reg147*reg248;
    T reg540=reg212*reg185; T reg541=reg177*reg204; T reg542=reg94*reg141; T reg543=reg147*reg240; T reg544=reg158*reg247;
    T reg545=reg94*reg156; T reg546=reg239*reg140; T reg547=reg161*reg207; T reg548=reg177*reg175; T reg549=reg57*reg246;
    T reg550=reg186*reg201; T reg551=reg147*reg192; T reg552=reg208*reg155; T reg553=reg158*reg218; T reg554=reg152*reg257;
    T reg555=reg152*reg258; reg250=reg158*reg250; T reg556=reg57*reg206; T reg557=reg174*reg196; reg239=reg152*reg239;
    T reg558=reg174*reg212; T reg559=reg258*reg140; T reg560=reg109*reg244; T reg561=reg147*reg225; T reg562=reg172*reg197;
    T reg563=reg197*reg186; T reg564=reg158*reg253; T reg565=reg155*reg191; T reg566=reg141*reg240; T reg567=reg174*reg194;
    T reg568=reg152*reg222; T reg569=reg177*reg197; T reg570=reg147*reg206; T reg571=reg152*reg249; T reg572=reg174*reg215;
    T reg573=reg158*reg149; T reg574=reg39*reg242; reg205=reg159*reg205; T reg575=reg158*reg252; T reg576=reg213*reg155;
    T reg577=reg165*reg207; T reg578=reg214*reg181; T reg579=reg141*reg216; T reg580=reg175*reg186; T reg581=reg57*reg192;
    T reg582=reg211*reg181; T reg583=reg177*reg189; reg206=reg141*reg206; T reg584=reg197*reg183; T reg585=reg94*reg57;
    T reg586=reg209*reg185; T reg587=reg109*reg246; T reg588=reg57*reg240; T reg589=reg204*reg186; T reg590=reg94*reg135;
    T reg591=reg197*reg181; T reg592=reg158*reg188; T reg593=reg155*reg201; reg222=reg140*reg222; T reg594=reg185*reg194;
    T reg595=reg185*reg190; T reg596=reg140*reg231; T reg597=reg151*reg255; T reg598=reg181*reg204; T reg599=reg159*reg188;
    T reg600=reg162+(*f.m).f_vol[2]; T reg601=reg185*reg196; T reg602=reg174*reg167; T reg603=reg174*reg190; T reg604=reg158*reg261;
    T reg605=reg147*reg246; T reg606=reg177*reg201; reg247=reg159*reg247; T reg607=reg155*reg195; T reg608=reg159*reg255;
    T reg609=reg158*reg219; reg234=reg152*reg234; T reg610=reg174*reg209; reg246=reg141*reg246; T reg611=reg155*reg202;
    T reg612=reg177*reg214; T reg613=reg181*reg201; T reg614=reg210*reg155; reg255=reg158*reg255; reg231=reg152*reg231;
    T reg615=reg6*var_inter[2]; T reg616=reg214*reg186; reg240=reg109*reg240; T reg617=reg4*var_inter[2]; T reg618=reg17*var_inter[2];
    T reg619=reg57*reg216; T reg620=reg155*reg204; T reg621=reg189*reg181; reg224=reg260+reg224; reg216=reg147*reg216;
    T reg622=reg25*var_inter[2]; reg257=reg140*reg257; T reg623=(*f.m).f_vol[0]+reg162; reg162=reg162+(*f.m).f_vol[1]; reg260=reg241+reg260;
    T reg624=reg215*reg185; T reg625=reg141*reg244; reg249=reg249*reg140; T reg626=reg94*reg147; T reg627=reg193*reg140;
    T reg628=reg174*reg198; T reg629=reg152*reg200; T reg630=reg167*reg185; T reg631=reg6*reg1; T reg632=reg158*reg232;
    T reg633=reg57*reg244; T reg634=reg158*reg223; reg200=reg140*reg200; T reg635=reg159*reg229; T reg636=reg242*reg186;
    T reg637=reg158*reg235; T reg638=reg94*reg127; T reg639=reg141*reg225; reg223=reg159*reg223; T reg640=reg152*reg193;
    reg235=reg159*reg235; T reg641=reg126*reg244; T reg642=reg207*reg186; T reg643=reg1*reg25; T reg644=reg1*reg17;
    reg1=reg1*reg4; T reg645=reg185*reg198; T reg646=reg177*reg207; reg244=reg147*reg244; T reg647=reg181*reg207;
    reg225=reg57*reg225; T reg648=reg189*reg186; T reg649=reg135*reg220; T reg650=reg258*reg126; T reg651=reg126*reg261;
    T reg652=reg194*reg161; T reg653=reg140*reg227; T reg654=reg185*reg175; reg395=reg395+reg394; T reg655=reg254*reg140;
    T reg656=reg161*reg190; reg641=reg547-reg641; T reg657=reg437-reg441; T reg658=reg126*reg237; T reg659=reg238*reg126;
    T reg660=reg194*reg176; T reg661=reg135*reg254; T reg662=reg170*reg198; T reg663=reg171*reg190; T reg664=reg135*reg261;
    reg398=reg396-reg398; T reg665=reg259*reg126; T reg666=reg212*reg176; T reg667=reg132*reg218; T reg668=reg208*reg171;
    reg402=reg502-reg402; T reg669=reg185*reg207; T reg670=reg208*reg168; T reg671=reg132*reg336; T reg672=reg140*reg220;
    T reg673=reg126*reg218; reg611=reg604+reg611; reg499=reg392+reg499; reg604=reg212*reg161; T reg674=reg233*reg126;
    T reg675=reg132*reg232; T reg676=reg210*reg171; T reg677=reg209*reg176; reg529=reg528-reg529; T reg678=reg168*reg210;
    T reg679=reg183*reg207; T reg680=reg132*reg341; reg224=reg226+reg224; reg527=reg453+reg527; T reg681=reg126*reg252;
    T reg682=reg209*reg161; reg257=reg257+reg601; T reg683=reg526+reg525; T reg684=reg617*reg162; T reg685=reg176*reg201;
    T reg686=reg170*reg190; T reg687=reg167*reg176; T reg688=reg300+reg221; T reg689=reg135*reg253; T reg690=reg171*reg196;
    T reg691=reg183*reg175; reg565=reg564+reg565; reg417=reg417+reg416; reg564=reg126*reg229; T reg692=reg167*reg161;
    T reg693=reg135*reg256; T reg694=reg170*reg196; T reg695=reg251*reg126; T reg696=reg215*reg176; T reg697=reg644*reg600;
    T reg698=reg132*reg252; T reg699=reg213*reg171; reg408=reg407-reg408; reg596=reg596+reg595; reg538=reg532+reg538;
    T reg700=reg183*reg202; T reg701=reg140*reg638; T reg702=reg213*reg168; T reg703=reg158*reg372; T reg704=reg132*reg332;
    T reg705=reg126*reg232; T reg706=reg215*reg161; T reg707=reg39*reg202; reg405=reg386+reg405; T reg708=reg168*reg207;
    reg245=reg245+reg501; T reg709=reg137*reg220; T reg710=reg170*reg207; T reg711=reg630-reg627; T reg712=reg242*reg163;
    T reg713=reg129*reg149; T reg714=reg214*reg183; T reg715=reg259*reg140; reg506=reg506+reg507; T reg716=reg170*reg191;
    T reg717=reg400+reg508; T reg718=reg242*reg183; T reg719=reg262*reg140; T reg720=reg214*reg185; T reg721=reg137*reg585;
    T reg722=reg168*reg201; T reg723=reg545*reg140; reg411=reg407+reg411; reg407=reg137*reg256; T reg724=reg170*reg201;
    T reg725=reg197*reg185; T reg726=reg210*reg163; T reg727=reg644*reg162; T reg728=reg129*reg341; T reg729=reg135*reg252;
    T reg730=reg209*reg171; T reg731=reg210*reg161; T reg732=reg129*reg232; T reg733=reg208*reg183; reg386=reg385+reg386;
    reg385=reg161*reg202; T reg734=reg189*reg185; reg369=reg369+reg349; T reg735=reg170*reg199; T reg736=reg129*reg261;
    reg480=reg419+reg480; T reg737=reg137*reg542; T reg738=reg168*reg204; reg489=reg490+reg489; T reg739=reg137*reg238;
    T reg740=reg170*reg204; T reg741=reg590*reg140; reg472=reg472-reg511; T reg742=reg170*reg195; T reg743=reg195*reg161;
    T reg744=reg129*reg219; T reg745=reg137*reg227; T reg746=reg168*reg175; reg517=reg396+reg517; reg396=reg251*reg140;
    T reg747=reg189*reg183; T reg748=reg210*reg183; T reg749=reg137*reg254; T reg750=reg170*reg175; T reg751=reg199*reg163;
    T reg752=reg129*reg322; reg249=reg249+reg624; reg492=reg492+reg493; T reg753=reg170*reg202; T reg754=reg199*reg161;
    T reg755=reg129*reg237; T reg756=reg137*reg638; T reg757=reg171*reg167; reg418=reg431-reg418; T reg758=reg183*reg199;
    T reg759=reg140*reg542; T reg760=reg213*reg183; reg533=reg533+reg586; reg435=reg435-reg434; T reg761=reg126*reg253;
    T reg762=reg161*reg196; T reg763=reg135*reg258; T reg764=reg170*reg167; T reg765=reg126*reg220; T reg766=reg176*reg190;
    T reg767=reg185*reg204; T reg768=reg135*reg237; T reg769=reg171*reg194; T reg770=reg423+reg429; T reg771=reg615*reg623;
    T reg772=reg140*reg238; T reg773=reg183*reg204; reg637=reg593+reg637; reg425=reg425+reg424; reg419=reg419+reg422;
    T reg774=reg135*reg238; T reg775=reg170*reg194; T reg776=reg158*reg381; T reg777=reg135*reg219; T reg778=reg171*reg198;
    reg445=reg442+reg445; T reg779=reg39*reg191; reg200=reg200-reg645; T reg780=reg183*reg195; reg388=reg502+reg388;
    reg546=reg546+reg540; reg502=reg233*reg135; T reg781=reg209*reg170; T reg782=reg208*reg163; T reg783=reg129*reg336;
    T reg784=reg135*reg218; T reg785=reg212*reg171; T reg786=reg208*reg161; T reg787=reg129*reg218; T reg788=reg559+reg584;
    reg392=reg391+reg392; reg391=reg211*reg183; reg447=reg528+reg447; reg528=reg233*reg140; T reg789=reg259*reg135;
    T reg790=reg212*reg170; T reg791=reg213*reg163; reg222=reg222+reg594; T reg792=reg129*reg332; T reg793=reg135*reg232;
    T reg794=reg211*reg185; T reg795=reg213*reg161; T reg796=reg626*reg140; reg453=reg450+reg453; reg450=reg617*reg600;
    T reg797=reg129*reg252; T reg798=reg135*reg251; T reg799=reg215*reg170; T reg800=reg126*reg256; T reg801=reg176*reg196;
    T reg802=reg135*reg229; T reg803=reg155*reg196; T reg804=reg109*reg253; reg373=reg376-reg373; T reg805=reg166*reg191;
    T reg806=reg181*reg202; T reg807=reg144*reg261; T reg808=reg39*reg201; T reg809=reg208*reg180; reg371=reg535+reg371;
    T reg810=reg208*reg173; T reg811=reg210*reg173; T reg812=reg141*reg219; T reg813=reg181*reg198; T reg814=reg166*reg190;
    T reg815=reg130*reg341; T reg816=reg144*reg53; T reg817=reg183*reg198; T reg818=reg109*reg252; T reg819=reg259*reg109;
    T reg820=reg643*reg162; T reg821=reg185*reg199; reg535=reg535-reg536; T reg822=reg144*reg322; T reg823=reg210*reg180;
    T reg824=reg130*reg232; reg324=reg598+reg324; reg325=reg325+reg409; T reg825=reg144*reg219; T reg826=reg181*reg195;
    T reg827=reg130*reg336; reg532=reg560-reg532; reg560=reg185*reg195; T reg828=reg109*reg220; T reg829=reg185*reg191;
    T reg830=reg144*reg381; reg353=reg295+reg353; T reg831=reg141*reg237; T reg832=reg643*reg600; reg354=reg613+reg354;
    T reg833=reg131*reg227; T reg834=reg39*reg175; T reg835=reg617*reg623; reg576=reg575+reg576; reg575=reg228+reg356;
    T reg836=reg258*reg141; T reg837=reg167*reg183; T reg838=reg213*reg39; T reg839=reg158*reg332; reg206=reg206-reg591;
    reg355=reg355-reg359; T reg840=reg141*reg238; T reg841=reg194*reg183; T reg842=reg185*reg202; T reg843=reg144*reg372;
    reg378=reg379+reg378; reg593=reg587-reg593; reg598=reg566+reg598; reg380=reg647+reg380; reg566=reg131*reg638;
    reg587=reg39*reg207; T reg844=reg144*reg253; T reg845=reg181*reg191; T reg846=reg166*reg202; reg347=reg350-reg347;
    T reg847=reg109*reg256; T reg848=reg166*reg196; T reg849=reg194*reg181; T reg850=reg130*reg53; T reg851=reg141*reg220;
    T reg852=reg166*reg194; reg339=reg339+reg468; reg337=reg578+reg337; T reg853=reg109*reg238; T reg854=reg141*reg253;
    T reg855=reg130*reg322; T reg856=reg144*reg336; T reg857=reg208*reg185; T reg858=reg181*reg196; reg240=reg240-reg620;
    reg335=reg335+reg521; T reg859=reg208*reg181; T reg860=reg144*reg218; T reg861=reg130*reg219; T reg862=reg109*reg237;
    T reg863=reg183*reg196; T reg864=reg141*reg256; reg326=reg327+reg326; T reg865=reg155*reg194; reg613=reg246+reg613;
    reg246=reg615*reg600; reg329=reg329+reg328; T reg866=reg144*reg252; T reg867=reg213*reg181; reg444=reg443+reg444;
    T reg868=reg213*reg185; T reg869=reg144*reg332; reg451=reg451-reg452; T reg870=reg195*reg173; reg334=reg582+reg334;
    T reg871=reg195*reg180; T reg872=reg212*reg155; T reg873=reg109*reg218; T reg874=reg254*reg109; T reg875=reg242*reg185;
    T reg876=reg144*reg149; T reg877=reg209*reg166; T reg878=reg233*reg109; T reg879=reg166*reg198; T reg880=reg141*reg261;
    T reg881=reg254*reg141; T reg882=reg591+reg316; reg318=reg318-reg317; T reg883=reg109*reg261; T reg884=reg144*reg237;
    T reg885=reg199*reg181; T reg886=reg155*reg190; T reg887=reg209*reg155; T reg888=reg183*reg190; T reg889=reg199*reg173;
    T reg890=reg144*reg232; T reg891=reg210*reg181; T reg892=reg215*reg155; T reg893=reg109*reg232; T reg894=reg210*reg185;
    T reg895=reg144*reg341; T reg896=reg109*reg219; T reg897=reg212*reg166; T reg898=reg155*reg198; reg342=reg621+reg342;
    reg307=reg307-reg344; reg647=reg625+reg647; reg356=reg356+reg260; reg625=reg181*reg190; T reg899=reg308+reg312;
    T reg900=reg39*reg199; reg460=reg437+reg460; reg437=reg176*reg175; T reg901=reg254*reg112; T reg902=reg132*reg261;
    T reg903=reg171*reg202; reg459=reg458+reg459; T reg904=reg141*reg252; T reg905=reg209*reg181; reg530=reg531+reg530;
    reg531=reg168*reg202; T reg906=reg132*reg372; T reg907=reg176*reg195; reg484=reg484+reg485; reg486=reg394+reg486;
    reg394=reg132*reg253; T reg908=reg213*reg166; reg475=reg476-reg475; T reg909=reg233*reg141; T reg910=reg209*reg183;
    T reg911=reg643*reg623; T reg912=reg328+reg592; reg582=reg534+reg582; reg477=reg477-reg478; reg534=reg199*reg176;
    reg483=reg416+reg483; reg416=reg542*reg112; T reg913=reg204*reg163; T reg914=reg132*reg381; T reg915=reg168*reg191;
    T reg916=reg238*reg112; T reg917=reg204*reg176; T reg918=reg171*reg191; reg607=reg609+reg607; reg609=reg168*reg199;
    T reg919=reg185*reg201; reg515=reg515-reg516; T reg920=reg171*reg199; T reg921=reg132*reg237; T reg922=reg176*reg191;
    T reg923=reg112*reg585; T reg924=reg434+reg519; T reg925=reg163*reg201; T reg926=reg112*reg256; T reg927=reg132*reg149;
    T reg928=reg140*reg585; T reg929=reg39*reg195; T reg930=reg158*reg53; T reg931=reg168*reg242; T reg932=reg183*reg191;
    T reg933=reg158*reg322; T reg934=reg615*reg162; reg634=reg620+reg634; reg620=reg132*reg53; T reg935=reg183*reg201;
    T reg936=reg140*reg256; T reg937=reg168*reg195; reg461=reg461-reg462; T reg938=reg176*reg202; T reg939=reg171*reg195;
    T reg940=reg132*reg219; T reg941=reg112*reg638; T reg942=reg163*reg207; reg467=reg424+reg467; reg424=reg112*reg220;
    T reg943=reg176*reg207; T reg944=reg132*reg322; T reg945=reg208*reg176; reg304=reg303+reg304; T reg946=reg251*reg141;
    T reg947=reg215*reg183; T reg948=reg545*reg112; T reg949=reg214*reg163; T reg950=reg166*reg242; T reg951=reg208*reg39;
    T reg952=reg296+reg297; T reg953=reg158*reg336; reg621=reg639+reg621; reg639=reg259*reg112; T reg954=reg214*reg176;
    reg294=reg293+reg294; reg255=reg344+reg255; reg344=reg215*reg181; reg286=reg286-reg285; T reg955=reg213*reg176;
    reg362=reg265+reg362; T reg956=reg626*reg112; T reg957=reg211*reg163; T reg958=reg131*reg542; T reg959=reg39*reg204;
    T reg960=reg233*reg112; T reg961=reg211*reg176; T reg962=reg166*reg199; reg268=reg278-reg268; reg250=reg317+reg250;
    reg317=reg167*reg181; T reg963=reg141*reg229; reg552=reg553+reg552; reg553=reg166*reg197; T reg964=reg131*reg258;
    reg270=reg270-reg306; T reg965=reg212*reg183; reg578=reg579+reg578; reg579=reg208*reg166; reg264=reg267-reg264;
    reg544=reg452+reg544; reg452=reg299+reg300; T reg966=reg262*reg112; reg276=reg274+reg276; T reg967=reg158*reg229;
    T reg968=reg242*reg155; T reg969=reg212*reg181; T reg970=reg141*reg218; T reg971=reg197*reg163; T reg972=reg626*reg131;
    T reg973=reg211*reg39; reg573=reg574+reg573; T reg974=reg263+reg473; T reg975=reg590*reg131; reg614=reg632+reg614;
    reg632=reg189*reg39; T reg976=reg210*reg176; T reg977=reg590*reg112; T reg978=reg210*reg166; reg281=reg280-reg281;
    T reg979=reg141*reg232; T reg980=reg259*reg141; T reg981=reg189*reg163; T reg982=reg251*reg112; reg284=reg289+reg284;
    T reg983=reg189*reg176; T reg984=reg210*reg39; T reg985=reg545*reg131; T reg986=reg158*reg341; T reg987=reg214*reg39;
    T reg988=reg187*reg189; T reg989=reg146*reg251; reg305=reg491+reg305; T reg990=reg159*reg252; T reg991=reg182*reg189;
    T reg992=reg146*reg590; T reg993=reg622*reg623; T reg994=reg622*reg600; T reg995=reg187*reg210; T reg996=reg631*reg162;
    reg279=reg279+reg269; reg266=reg266+reg275; T reg997=reg213*reg184; T reg998=reg187*reg214; T reg999=reg146*reg259;
    T reg1000=reg626*reg160; T reg1001=reg211*reg169; T reg1002=reg187*reg199; reg283=reg283+reg282; T reg1003=reg173*reg202;
    T reg1004=reg130*reg372; T reg1005=reg213*reg169; T reg1006=reg288+reg287; reg292=reg463+reg292; T reg1007=reg182*reg197;
    reg597=reg597+reg612; T reg1008=reg146*reg262; T reg1009=reg130*reg253; T reg1010=reg180*reg191; T reg1011=reg213*reg186;
    T reg1012=reg187*reg242; T reg1013=reg301-reg302; T reg1014=reg173*reg191; T reg1015=reg172*reg201; T reg1016=reg130*reg381;
    reg248=reg248+reg539; T reg1017=reg213*reg187; reg351=reg351+reg352; T reg1018=reg259*reg160; reg549=reg549+reg550;
    T reg1019=reg1*reg623; T reg1020=reg214*reg184; T reg1021=reg172*reg209; reg346=reg606+reg346; reg348=reg348+reg345;
    T reg1022=reg210*reg184; T reg1023=reg151*reg381; T reg1024=reg174*reg191; T reg1025=reg147*reg233; T reg1026=reg590*reg160;
    T reg1027=reg189*reg169; T reg1028=reg177*reg191; T reg1029=reg151*reg253; T reg1030=reg182*reg214; T reg1031=reg146*reg545;
    T reg1032=reg147*reg252; T reg1033=reg209*reg177; T reg1034=reg233*reg160; T reg1035=reg211*reg184; T reg1036=reg187*reg208;
    reg360=reg360+reg361; T reg1037=reg57*reg256; T reg1038=reg211*reg187; T reg1039=reg233*reg146; reg358=reg358+reg357;
    T reg1040=reg545*reg160; T reg1041=reg208*reg184; T reg1042=reg211*reg182; T reg1043=reg196*reg184; T reg1044=reg626*reg146;
    T reg1045=reg214*reg169; T reg1046=reg152*reg638; T reg1047=reg187*reg201; T reg1048=reg146*reg256; T reg1049=reg127*reg256;
    T reg1050=reg174*reg207; T reg1051=reg159*reg336; T reg1052=reg618*reg600; T reg1053=reg182*reg201; T reg1054=reg146*reg585;
    T reg1055=reg208*reg169; T reg1056=reg130*reg252; T reg1057=reg213*reg180; T reg1058=reg187*reg191; reg481=reg481+reg482;
    T reg1059=reg213*reg173; T reg1060=reg130*reg332; T reg1061=reg187*reg207; T reg1062=reg212*reg165; T reg1063=reg156*reg218;
    reg463=reg464+reg463; reg464=reg190*reg179; T reg1064=reg233*reg156; reg231=reg231+reg603; T reg1065=reg209*reg187;
    T reg1066=reg127*reg220; T reg1067=reg172*reg202; T reg1068=reg127*reg253; reg456=reg456+reg457; T reg1069=reg180*reg196;
    reg608=reg616+reg608; T reg1070=reg209*reg165; T reg1071=reg156*reg252; T reg1072=reg1*reg162; reg491=reg455+reg491;
    reg455=reg179*reg196; T reg1073=reg130*reg149; reg554=reg554+reg557; T reg1074=reg187*reg195; reg290=reg290-reg291;
    T reg1075=reg497+reg298; T reg1076=reg172*reg191; reg537=reg330+reg537; T reg1077=reg130*reg237; T reg1078=reg187*reg204;
    T reg1079=reg146*reg238; T reg1080=reg199*reg180; T reg1081=reg152*reg585; T reg1082=reg174*reg201; T reg1083=reg182*reg204;
    T reg1084=reg146*reg542; T reg1085=reg130*reg261; T reg1086=reg202*reg180; T reg1087=reg159*reg332; T reg1088=reg146*reg220;
    reg474=reg384+reg474; T reg1089=reg152*reg220; T reg1090=reg182*reg207; T reg1091=reg146*reg638; T reg1092=reg172*reg207;
    T reg1093=reg130*reg218; reg366=reg366+reg403; T reg1094=reg208*reg186; T reg1095=reg187*reg202; reg273=reg273+reg277;
    T reg1096=reg159*reg218; T reg1097=reg187*reg175; T reg1098=reg146*reg254; T reg1099=reg272+reg271; T reg1100=reg242*reg173;
    T reg1101=reg182*reg175; T reg1102=reg146*reg227; T reg1103=reg57*reg252; T reg1104=reg209*reg186; T reg1105=reg151*reg332;
    T reg1106=reg174*reg213; reg330=reg331+reg330; reg331=reg213*reg177; T reg1107=reg151*reg252; reg570=reg570-reg569;
    T reg1108=reg238*reg57; T reg1109=reg194*reg184; T reg1110=reg631*reg600; T reg1111=reg209*reg184; T reg1112=reg233*reg57;
    T reg1113=reg147*reg256; T reg1114=reg172*reg167; T reg1115=reg172*reg196; T reg1116=reg57*reg218; reg340=reg340+reg338;
    T reg1117=reg184*reg191; reg406=reg577+reg406; T reg1118=reg160*reg585; T reg1119=reg147*reg251; T reg1120=reg169*reg201;
    T reg1121=reg151*reg336; T reg1122=reg174*reg208; T reg1123=reg147*reg229; T reg1124=reg160*reg256; T reg1125=reg184*reg201;
    T reg1126=reg177*reg208; T reg1127=reg151*reg218; T reg1128=reg177*reg167; T reg1129=reg622*reg162; T reg1130=reg198*reg186;
    reg333=reg539+reg333; reg539=reg57*reg219; T reg1131=reg147*reg261; reg225=reg225+reg648; T reg1132=reg57*reg237;
    T reg1133=reg215*reg184; T reg1134=reg147*reg254; T reg1135=reg172*reg198; T reg1136=reg251*reg57; reg543=reg543+reg541;
    T reg1137=reg57*reg229; T reg1138=reg548-reg551; T reg1139=reg167*reg186; T reg1140=reg258*reg57; T reg1141=reg167*reg184;
    T reg1142=reg177*reg198; T reg1143=reg147*reg219; reg556=reg556-reg563; T reg1144=reg147*reg238; T reg1145=reg172*reg194;
    T reg1146=reg212*reg186; T reg1147=reg147*reg258; reg606=reg605+reg606; reg616=reg619+reg616; reg605=reg177*reg196;
    reg619=reg147*reg253; reg588=reg588+reg589; T reg1148=reg147*reg237; T reg1149=reg212*reg184; T reg1150=reg259*reg57;
    T reg1151=reg147*reg220; T reg1152=reg172*reg190; T reg1153=reg177*reg194; T reg1154=reg57*reg232; T reg1155=reg215*reg186;
    reg244=reg244+reg646; T reg1156=reg194*reg186; T reg1157=reg177*reg190; T reg1158=reg190*reg184; T reg1159=reg151*reg53;
    T reg1160=reg174*reg195; reg612=reg216+reg612; reg216=reg177*reg195; T reg1161=reg215*reg171; reg365=reg365+reg364;
    T reg1162=reg199*reg184; reg633=reg633+reg642; reg336=reg142*reg336; T reg1163=reg542*reg160; T reg1164=reg204*reg169;
    T reg1165=reg172*reg212; T reg1166=reg147*reg259; reg323=reg541+reg323; reg541=reg238*reg160; T reg1167=reg204*reg184;
    T reg1168=reg196*reg186; T reg1169=reg251*reg160; T reg1170=reg57*reg253; T reg1171=reg189*reg184; reg377=reg646+reg377;
    reg646=reg147*reg218; T reg1172=reg151*reg372; T reg1173=reg174*reg202; T reg1174=reg374-reg375; T reg1175=reg242*reg184;
    T reg1176=reg177*reg212; T reg1177=reg177*reg202; T reg1178=reg151*reg261; T reg1179=reg262*reg160; T reg1180=reg197*reg169;
    T reg1181=reg220*reg57; reg370=reg548+reg370; reg548=reg368+reg367; reg313=reg313+reg309; T reg1182=reg202*reg184;
    reg343=reg583+reg343; T reg1183=reg254*reg57; reg583=reg561+reg583; reg561=reg638*reg160; T reg1184=reg207*reg169;
    T reg1185=reg151*reg341; T reg1186=reg198*reg184; T reg1187=reg174*reg210; T reg1188=reg220*reg160; T reg1189=reg207*reg184;
    T reg1190=reg580-reg581; T reg1191=reg177*reg210; T reg1192=reg151*reg232; T reg1193=reg151*reg219; T reg1194=reg182*reg208;
    T reg1195=reg187*reg190; T reg1196=reg151*reg322; T reg1197=reg174*reg199; reg321=reg321-reg319; T reg1198=reg177*reg199;
    T reg1199=reg190*reg186; T reg1200=reg151*reg237; T reg1201=reg195*reg184; T reg1202=reg147*reg232; T reg1203=reg227*reg160;
    T reg1204=reg569+reg315; T reg1205=reg177*reg215; T reg1206=reg175*reg169; T reg1207=reg57*reg261; T reg1208=reg254*reg160;
    T reg1209=reg151*reg149; T reg1210=reg174*reg242; T reg1211=reg175*reg184; T reg1212=reg310+reg311; T reg1213=reg182*reg195;
    T reg1214=reg440+reg446; reg205=reg580+reg205; reg580=reg165*reg195; T reg1215=reg142*reg219; reg571=reg571+reg572;
    reg448=reg448+reg449; T reg1216=reg199*reg179; reg454=reg496+reg454; T reg1217=reg172*reg210; T reg1218=reg542*reg128;
    T reg1219=reg204*reg173; T reg1220=reg142*reg322; T reg1221=reg182*reg199; T reg1222=reg159*reg53; T reg1223=reg238*reg128;
    T reg1224=reg152*reg256; T reg1225=reg174*reg214; T reg1226=reg202*reg169; reg387=reg577+reg387; reg577=reg251*reg128;
    T reg1227=reg189*reg179; T reg1228=reg142*reg372; T reg1229=reg182*reg202; T reg1230=reg242*reg179; T reg1231=reg165*reg202;
    T reg1232=reg202*reg186; T reg1233=reg142*reg261; T reg1234=reg152*reg259; T reg1235=reg262*reg128; T reg1236=reg197*reg173;
    reg439=reg509+reg439; T reg1237=reg172*reg214; T reg1238=reg159*reg261; T reg1239=reg142*reg53; reg428=reg471+reg428;
    reg427=reg427+reg426; T reg1240=reg142*reg341; T reg1241=reg182*reg210; T reg1242=reg179*reg202; T reg1243=reg172*reg189;
    reg638=reg128*reg638; T reg1244=reg165*reg210; T reg1245=reg142*reg232; T reg1246=reg173*reg207; T reg1247=reg159*reg219;
    T reg1248=reg128*reg220; reg363=reg363+reg466; T reg1249=reg390-reg389; reg207=reg179*reg207; reg223=reg589+reg223;
    reg589=reg215*reg166; T reg1250=reg251*reg109; T reg1251=reg204*reg179; T reg1252=reg165*reg199; T reg1253=reg142*reg237;
    T reg1254=reg152*reg590; T reg1255=reg523+reg432; reg420=reg420-reg421; T reg1256=reg195*reg179; T reg1257=reg174*reg189;
    T reg1258=reg195*reg169; T reg1259=reg142*reg149; T reg1260=reg182*reg242; T reg1261=reg227*reg128; T reg1262=reg175*reg173;
    T reg1263=reg430+reg433; T reg1264=reg254*reg128; T reg1265=reg175*reg179; T reg1266=reg195*reg186; T reg1267=reg152*reg251;
    T reg1268=reg163*reg191; T reg1269=reg168*reg189; T reg1270=reg137*reg590; reg512=reg431+reg512; reg431=reg159*reg381;
    T reg1271=reg152*reg626; T reg1272=reg618*reg623; T reg1273=reg170*reg210; reg514=reg514+reg513; T reg1274=reg174*reg211;
    T reg1275=reg169*reg191; T reg1276=reg214*reg170; T reg1277=reg259*reg137; reg518=reg518+reg520; T reg1278=reg213*reg179;
    T reg1279=reg191*reg186; T reg1280=reg214*reg168; T reg1281=reg545*reg137; T reg1282=reg129*reg372; T reg1283=reg320+reg314;
    reg202=reg163*reg202; T reg1284=reg168*reg197; T reg1285=reg137*reg262; reg479=reg547+reg479; reg547=reg631*reg623;
    reg235=reg550+reg235; reg550=reg129*reg253; T reg1286=reg170*reg242; T reg1287=reg487-reg488; T reg1288=reg161*reg191;
    reg234=reg234+reg610; T reg1289=reg129*reg381; T reg1290=reg170*reg189; T reg1291=reg137*reg251; T reg1292=reg172*reg213;
    reg399=reg399+reg510; T reg1293=reg214*reg173; T reg1294=reg644*reg623; reg239=reg239+reg558; T reg1295=reg259*reg128;
    reg214=reg214*reg179; reg401=reg415+reg401; T reg1296=reg172*reg208; reg381=reg142*reg381; T reg1297=reg182*reg191;
    reg382=reg382+reg383; T reg1298=reg210*reg179; reg372=reg159*reg372; T reg1299=reg152*reg545; T reg1300=reg165*reg191;
    T reg1301=reg142*reg253; reg590=reg590*reg128; reg189=reg189*reg173; T reg1302=reg626*reg128; T reg1303=reg211*reg173;
    T reg1304=reg152*reg233; T reg1305=reg208*reg170; reg500=reg500+reg494; T reg1306=reg233*reg128; T reg1307=reg211*reg179;
    T reg1308=reg172*reg211; T reg1309=reg211*reg170; T reg1310=reg233*reg137; T reg1311=reg159*reg253; reg504=reg504+reg505;
    reg211=reg211*reg168; reg626=reg626*reg137; T reg1312=reg208*reg179; reg545=reg545*reg128; reg236=reg642+reg236;
    reg642=reg213*reg170; T reg1313=reg215*reg179; T reg1314=reg242*reg169; T reg1315=reg174*reg175; reg509=reg509-reg503;
    reg403=reg404+reg403; reg404=reg187*reg198; reg341=reg159*reg341; T reg1316=reg174*reg204; T reg1317=reg156*reg254;
    T reg1318=reg156*reg251; T reg1319=reg187*reg215; reg542=reg152*reg542; T reg1320=reg215*reg180; T reg1321=reg127*reg232;
    T reg1322=reg127*reg219; reg149=reg159*reg149; T reg1323=reg156*reg261; T reg1324=reg198*reg180; T reg1325=reg165*reg190;
    T reg1326=reg259*reg127; T reg1327=reg172*reg199; T reg1328=reg212*reg179; T reg1329=reg131*reg585; reg568=reg568+reg567;
    T reg1330=reg210*reg169; reg409=reg413+reg409; reg471=reg470+reg471; reg412=reg410+reg412; reg220=reg156*reg220;
    reg413=reg563+reg599; reg470=reg194*reg180; T reg1331=reg187*reg167; T reg1332=reg156*reg258; reg247=reg648+reg247;
    reg648=reg127*reg237; reg195=reg172*reg195; reg629=reg629-reg628; T reg1333=reg258*reg127; T reg1334=reg156*reg237;
    T reg1335=reg165*reg194; reg522=reg522-reg523; T reg1336=reg167*reg179; reg521=reg524+reg521; reg498=reg498-reg497;
    reg496=reg495+reg496; reg204=reg172*reg204; reg495=reg152*reg238; reg524=reg152*reg227; T reg1337=reg187*reg194;
    T reg1338=reg156*reg238; T reg1339=reg167*reg180; reg167=reg165*reg167; T reg1340=reg156*reg229; T reg1341=reg127*reg229;
    T reg1342=reg635+reg636; reg194=reg194*reg179; reg219=reg156*reg219; T reg1343=reg165*reg198; reg251=reg251*reg127;
    reg238=reg238*reg127; T reg1344=reg1*reg600; T reg1345=reg127*reg252; T reg1346=reg152*reg254; T reg1347=reg199*reg169;
    reg252=reg142*reg252; T reg1348=reg213*reg165; reg254=reg254*reg127; reg259=reg156*reg259; T reg1349=reg142*reg218;
    T reg1350=reg212*reg187; reg175=reg172*reg175; reg210=reg210*reg186; T reg1351=reg618*reg162; T reg1352=reg174*reg197;
    reg262=reg152*reg262; reg213=reg213*reg182; reg332=reg142*reg332; T reg1353=reg179*reg201; T reg1354=reg128*reg256;
    T reg1355=reg172*reg242; reg466=reg465+reg466; reg322=reg159*reg322; reg261=reg127*reg261; reg585=reg128*reg585;
    reg397=reg457+reg397; reg201=reg173*reg201; reg190=reg190*reg180; reg457=reg159*reg232; reg465=reg602-reg640;
    reg468=reg468-reg469; reg212=reg212*reg180; reg218=reg127*reg218; reg253=reg156*reg253; reg438=reg438+reg436;
    T reg1356=reg165*reg196; reg237=reg159*reg237; T reg1357=reg165*reg215; reg232=reg156*reg232; reg215=reg172*reg215;
    reg191=reg179*reg191; reg233=reg233*reg127; reg208=reg208*reg165; T reg1358=reg209*reg179; T reg1359=reg555+reg562;
    T reg1360=reg198*reg179; reg415=reg414+reg415; reg199=reg199*reg186; reg384=reg393+reg384; reg196=reg187*reg196;
    reg256=reg156*reg256; reg209=reg209*reg180; reg812=reg812-reg813; reg711=reg711-reg718; reg341=reg1330+reg341;
    reg235=reg338+reg235; reg1094=reg1096+reg1094; reg588=reg1162+reg588; reg257=reg257+reg932; reg608=reg357+reg608;
    reg935=reg936+reg935; reg1279=reg1311+reg1279; reg679=reg672+reg679; reg1141=reg1141-reg1140; reg747=reg396+reg747;
    reg840=reg841+reg840; reg598=reg758+reg598; reg919=reg928+reg919; reg1051=reg1055+reg1051; reg210=reg457+reg210;
    reg431=reg1275+reg431; reg1156=reg1132+reg1156; reg1199=reg1207+reg1199; reg946=reg947+reg946; reg758=reg222+reg758;
    reg374=reg374-reg413; reg1258=reg1258-reg1222; reg909=reg910+reg909; reg633=reg1182+reg633; reg621=reg748+reg621;
    reg994=(*f.m).density*reg994; reg199=reg237+reg199; reg1181=reg1158+reg1181; reg969=reg970+reg969; reg344=reg979+reg344;
    reg767=reg759+reg767; reg1266=reg1247+reg1266; reg1037=reg1043+reg1037; reg654=reg654-reg653; reg1168=reg1170+reg1168;
    reg200=reg200+reg780; reg773=reg772+reg773; reg980=reg965+reg980; reg322=reg1347+reg322; reg223=reg364+reg223;
    reg578=reg733+reg578; reg549=reg1117+reg549; reg934=(*f.m).density*reg934; reg849=reg831+reg849; reg1108=reg1109+reg1108;
    reg669=reg701+reg669; reg236=reg309+reg236; reg837=reg837-reg836; reg247=reg345+reg247; reg539=reg539-reg1130;
    reg719=reg719-reg725; reg905=reg904+reg905; reg537=reg275+reg537; reg372=reg1226+reg372; reg206=reg206-reg718;
    reg596=reg596+reg700; reg222=reg90*reg1342; reg1190=reg1201+reg1190; reg1087=reg1005+reg1087; reg237=reg90*reg788;
    reg1232=reg1238+reg1232; reg1183=reg1183-reg1186; reg317=reg317-reg963; reg582=reg760+reg582; reg149=reg149-reg1314;
    reg1011=reg990+reg1011; reg205=reg205-reg319; reg691=reg655+reg691; reg673=reg604-reg673; reg403=reg1298+reg403;
    reg402=reg945+reg402; reg1320=reg1321+reg1320; reg666=reg666-reg665; reg1326=reg1328+reg1326; reg705=reg706-reg705;
    reg409=reg1312+reg409; reg212=reg218+reg212; reg408=reg976+reg408; reg696=reg696-reg695; reg233=reg1358+reg233;
    reg692=reg692+reg564; reg384=reg1278+reg384; reg209=reg1345+reg209; reg218=reg90*reg688; reg1351=(*f.m).density*reg1351;
    reg687=reg687+reg650; reg1353=reg1354+reg1353; reg658=reg652-reg658; reg201=reg585+reg201; reg438=reg438+reg191;
    reg398=reg534+reg398; reg660=reg660-reg659; reg207=reg1248+reg207; reg1246=reg638+reg1246; reg1069=reg1068+reg1069;
    reg1066=reg464+reg1066; reg275=reg90*reg459; reg463=reg1242+reg463; reg437=reg901+reg437; reg190=reg261+reg190;
    reg461=reg461+reg938; reg254=reg254-reg1360; reg942=reg941-reg942; reg468=reg1256+reg468; reg943=reg424+reg943;
    reg1322=reg1322-reg1324; reg238=reg194+reg238; reg515=reg515+reg922; reg925=reg923-reg925; reg521=reg1216+reg521;
    reg470=reg648+reg470; reg685=reg926+reg685; reg684=(*f.m).density*reg684; reg1336=reg1336-reg1333; reg681=reg682-reg681;
    reg498=reg498-reg1230; reg1339=reg1339-reg1341; reg529=reg955+reg529; reg677=reg677-reg674; reg251=reg1313+reg251;
    reg731=reg732+reg731; reg1298=reg382+reg1298; reg726=reg728-reg726; reg214=reg1295+reg214; reg285=reg411-reg285;
    reg1293=reg545+reg1293; reg194=reg90*reg717; reg1312=reg504+reg1312; reg713=reg713+reg712; reg1307=reg1306+reg1307;
    reg261=reg90*reg245; reg1303=reg1302+reg1303; reg1278=reg518+reg1278; reg754=reg755+reg754; reg751=reg752-reg751;
    reg1272=(*f.m).density*reg1272; reg478=reg517-reg478; reg516=reg512-reg516; reg1268=reg1289-reg1268; reg743=reg744+reg743;
    reg1288=reg550+reg1288; reg309=reg90*reg489; reg462=reg479-reg462; reg480=reg485+reg480; reg202=reg1282-reg202;
    reg385=reg736+reg385; reg338=reg90*reg445; reg1242=reg427+reg1242; reg419=reg907+reg419; reg1265=reg1264+reg1265;
    reg345=reg90*reg770; reg1262=reg1262-reg1261; reg766=reg766-reg765; reg761=reg762-reg761; reg1256=reg420+reg1256;
    reg1251=reg1223+reg1251; reg418=reg922+reg418; reg1219=reg1218+reg1219; reg801=reg801-reg800; reg1216=reg448+reg1216;
    reg450=(*f.m).density*reg450; reg795=reg797+reg795; reg357=reg90*reg1214; reg791=reg792-reg791; reg1235=reg1235-reg1236;
    reg359=reg447-reg359; reg1249=reg1249-reg1230; reg786=reg787+reg786; reg782=reg783-reg782; reg1227=reg577+reg1227;
    reg306=reg388-reg306; reg189=reg590+reg189; reg1120=reg1118+reg1120; reg856=reg857+reg856; reg1117=reg340+reg1117;
    reg337=reg540+reg337; reg1189=reg1188+reg1189; reg891=reg890+reg891; reg1184=reg561+reg1184; reg895=reg894+reg895;
    reg342=reg624+reg342; reg1182=reg313+reg1182; reg1211=reg1208+reg1211; reg313=reg90*reg899; reg1206=reg1206-reg1203;
    reg876=reg876-reg875; reg1201=reg321+reg1201; reg630=reg630-reg882; reg885=reg884+reg885; reg1167=reg541+reg1167;
    reg822=reg821+reg822; reg1164=reg1163+reg1164; reg324=reg594+reg324; reg1162=reg365+reg1162; reg826=reg825+reg826;
    reg321=reg90*reg548; reg560=reg560-reg816; reg1179=reg1179-reg1180; reg556=reg556-reg1175; reg535=reg780+reg535;
    reg1139=reg1139-reg1137; reg881=reg881-reg817; reg1136=reg1133+reg1136; reg625=reg880+reg625; reg225=reg1022+reg225;
    reg1155=reg1154+reg1155; reg647=reg700+reg647; reg1150=reg1149+reg1150; reg851=reg888+reg851; reg616=reg1041+reg616;
    reg858=reg854+reg858; reg1146=reg1116+reg1146; reg613=reg932+reg613; reg1112=reg1111+reg1112; reg864=reg863+reg864;
    reg330=reg997+reg330; reg246=(*f.m).density*reg246; reg867=reg866+reg867; reg1104=reg1103+reg1104; reg869=reg868+reg869;
    reg1129=(*f.m).density*reg1129; reg1125=reg1124+reg1125; reg334=reg586+reg334; reg859=reg860+reg859; reg954=reg639+reg954;
    reg292=reg426+reg292; reg1004=reg1003+reg1004; reg976=reg286+reg976; reg1086=reg1085+reg1086; reg870=reg870-reg850;
    reg981=reg977-reg981; reg1080=reg1077+reg1080; reg983=reg982+reg983; reg390=reg390-reg1075; reg1073=reg1073-reg1100;
    reg286=reg90*reg1099; reg340=reg90*reg452; reg366=reg383+reg366; reg966=reg966+reg971; reg474=reg520+reg474;
    reg364=reg90*reg974; reg1060=reg1059+reg1060; reg1057=reg1056+reg1057; reg534=reg477+reg534; reg1052=(*f.m).density*reg1052;
    reg913=reg416-reg913; reg1049=reg455+reg1049; reg917=reg916+reg917; reg491=reg191+reg491; reg907=reg484+reg907;
    reg371=reg371-reg645; reg1174=reg1174-reg1175; reg806=reg807+reg806; reg1171=reg1169+reg1171; reg843=reg842+reg843;
    reg1027=reg1026+reg1027; reg380=reg595+reg380; reg1022=reg348+reg1022; reg845=reg844+reg845; reg1020=reg1018+reg1020;
    reg830=reg829+reg830; reg1045=reg1040+reg1045; reg354=reg601+reg354; reg1041=reg358+reg1041; reg835=(*f.m).density*reg835;
    reg1035=reg1034+reg1035; reg1001=reg1000+reg1001; reg955=reg355+reg955; reg957=reg956-reg957; reg997=reg266+reg997;
    reg961=reg960+reg961; reg993=(*f.m).density*reg993; reg305=reg436+reg305; reg945=reg270+reg945; reg1016=reg1014+reg1016;
    reg949=reg948-reg949; reg1010=reg1009+reg1010; reg1231=reg1233+reg1231; reg191=reg90*reg362; reg1121=reg1122+reg1121;
    reg175=reg1346+reg175; reg266=reg90*reg575; reg439=reg439-reg291; reg834=reg834+reg833; reg1213=reg1213-reg1239;
    reg270=reg90*reg353; reg1315=reg1315-reg524; reg406=reg406+reg1095; reg347=reg347-reg846; reg580=reg1215+reg580;
    reg454=reg282+reg454; reg566=reg587-reg566; reg629=reg629+reg195; reg282=reg90*reg378; reg1220=reg1221+reg1220;
    reg373=reg373-reg805; reg1252=reg1253+reg1252; reg1191=reg1192+reg1191; reg1093=reg809+reg1093; reg301=reg301-reg1255;
    reg204=reg495+reg204; reg815=reg811+reg815; reg1259=reg1259-reg1260; reg554=reg554+reg1076; reg985=reg987-reg985;
    reg1309=reg1310+reg1309; reg348=reg90*reg284; reg211=reg626+reg211; reg1105=reg1106+reg1105; reg281=reg281-reg978;
    reg1092=reg1089+reg1092; reg399=reg399+reg642; reg975=reg632-reg975; reg1294=(*f.m).density*reg1294; reg333=reg610+reg333;
    reg355=reg90*reg294; reg401=reg482+reg401; reg1050=reg1046+reg1050; reg952=reg952+reg950; reg381=reg1297+reg381;
    reg358=reg90*reg304; reg1300=reg1301+reg1300; reg365=reg964+reg553; reg1126=reg1127+reg1126; reg387=reg277+reg387;
    reg231=reg231+reg1067; reg268=reg268-reg962; reg1228=reg1229+reg1228; reg958=reg959-reg958; reg332=reg213+reg332;
    reg339=reg339-reg421; reg1348=reg252+reg1348; reg1344=(*f.m).density*reg1344; reg465=reg465-reg1355; reg855=reg889+reg855;
    reg256=reg196+reg256; reg602=reg602-reg1204; reg449=reg335+reg449; reg415=reg1058+reg415; reg871=reg861+reg871;
    reg1243=reg1267+reg1243; reg1356=reg253+reg1356; reg978=reg451-reg978; reg220=reg1195+reg220; reg196=reg90*reg444;
    reg1198=reg1200+reg1198; reg213=reg90*reg412; reg329=reg950+reg329; reg1257=reg1254+reg1257; reg1329=reg808-reg1329;
    reg252=reg90*reg326; reg1325=reg1323+reg1325; reg865=reg862-reg865; reg1196=reg1197+reg1196; reg571=reg571+reg1217;
    reg827=reg810+reg827; reg253=reg90*reg1263; reg1316=reg542+reg1316; reg1185=reg1187+reg1185; reg505=reg325+reg505;
    reg428=reg269+reg428; reg823=reg824+reg823; reg1240=reg1241+reg1240; reg820=(*f.m).density*reg820; reg887=reg818-reg887;
    reg568=reg568+reg1327; reg1244=reg1245+reg1244; reg343=reg572+reg343; reg318=reg318-reg908; reg363=reg361+reg363;
    reg877=reg878-reg877; reg269=reg90*reg1212; reg277=reg90*reg1359; reg872=reg873-reg872; reg589=reg1250-reg589;
    reg208=reg1349+reg208; reg307=reg307-reg579; reg397=reg352+reg397; reg897=reg819-reg897; reg262=reg262-reg1352;
    reg1209=reg1209-reg1210; reg892=reg893-reg892; reg1119=reg215+reg1119; reg417=reg716+reg417; reg386=reg642+reg386;
    reg1138=reg195+reg1138; reg694=reg693+reg694; reg730=reg729+reg730; reg583=reg1217+reg583; reg697=(*f.m).density*reg697;
    reg699=reg698+reg699; reg727=(*f.m).density*reg727; reg704=reg702+reg704; reg724=reg407+reg724; reg1134=reg1134-reg1135;
    reg405=reg510+reg405; reg1205=reg1202+reg1205; reg722=reg721+reg722; reg668=reg667+reg668; reg716=reg506+reg716;
    reg671=reg670+reg671; reg710=reg709+reg710; reg499=reg494+reg499; reg1166=reg1165+reg1166; reg1157=reg1131+reg1157;
    reg676=reg675+reg676; reg708=reg756+reg708; reg612=reg1296+reg612; reg1153=reg1148+reg1153; reg764=reg764-reg763;
    reg435=reg435-reg1286; reg769=reg768+reg769; reg757=reg757-reg802; reg425=reg735+reg425; reg1114=reg1114-reg1147;
    reg775=reg774+reg775; reg799=reg798+reg799; reg543=reg1327+reg543; reg777=reg777-reg778; reg453=reg1273+reg453;
    reg570=reg570-reg1355; reg657=reg742+reg657; reg793=reg1161+reg793; reg661=reg661-reg662; reg790=reg789+reg790;
    reg663=reg664+reg663; reg1144=reg1145+reg1144; reg1128=reg1128-reg1123; reg395=reg753+reg395; reg392=reg1305+reg392;
    reg1143=reg1143-reg1142; reg686=reg649+reg686; reg785=reg784+reg785; reg690=reg689+reg690; reg781=reg502+reg781;
    reg903=reg902+reg903; reg606=reg1076+reg606; reg996=(*f.m).density*reg996; reg906=reg531+reg906; reg1287=reg1287-reg1286;
    reg486=reg493+reg486; reg1290=reg1291+reg1290; reg918=reg394+reg918; reg1015=reg1224+reg1015; reg597=reg558+reg597;
    reg914=reg915+reg914; reg1113=reg1115+reg1113; reg1269=reg1270+reg1269; reg483=reg507+reg483; reg1273=reg514+reg1273;
    reg911=(*f.m).density*reg911; reg1276=reg1277+reg1276; reg908=reg475-reg908; reg1082=reg1081+reg1082; reg972=reg973-reg972;
    reg1280=reg1281+reg1280; reg1110=(*f.m).density*reg1110; reg195=reg90*reg276; reg331=reg1107+reg331; reg1305=reg500+reg1305;
    reg579=reg264-reg579; reg680=reg678+reg680; reg753=reg492+reg753; reg527=reg513+reg527; reg244=reg1067+reg244;
    reg215=reg90*reg683; reg750=reg749+reg750; reg1176=reg646+reg1176; reg927=reg927-reg931; reg746=reg746-reg745;
    reg487=reg487-reg924; reg742=reg472+reg742; reg1151=reg1152+reg1151; reg920=reg921+reg920; reg1025=reg1021+reg1025;
    reg740=reg739+reg740; reg944=reg609+reg944; reg738=reg737+reg738; reg467=reg349+reg467; reg248=reg1292+reg248;
    reg605=reg619+reg605; reg939=reg940+reg939; reg735=reg369+reg735; reg937=reg937-reg620; reg264=reg90*reg1283;
    reg460=reg460-reg511; reg1285=reg1285-reg1284; reg1033=reg1032+reg1033; reg346=reg557+reg346; reg637=reg376-reg637;
    reg1160=reg1160-reg1159; reg325=reg90*reg1006; reg1172=reg1173+reg1172; reg335=reg90*reg576; reg832=(*f.m).density*reg832;
    reg456=reg1017+reg456; reg703=reg707-reg703; reg1318=reg1319+reg1318; reg349=reg967+reg968; reg1308=reg1304+reg1308;
    reg848=reg847-reg848; reg771=(*f.m).density*reg771; reg760=reg533+reg760; reg1008=reg1008-reg1007; reg1070=reg1071+reg1070;
    reg167=reg167-reg1340; reg1042=reg1044+reg1042; reg1072=(*f.m).density*reg1072; reg805=reg593-reg805; reg1097=reg1098+reg1097;
    reg522=reg522-reg1012; reg794=reg796+reg794; reg352=reg90*reg573; reg1013=reg1013-reg1012; reg803=reg804-reg803;
    reg1296=reg239+reg1296; reg239=reg90*reg611; reg216=reg1193+reg216; reg1331=reg1331-reg1332; reg361=reg90*reg565;
    reg1078=reg1079+reg1078; reg369=reg90*reg614; reg547=(*f.m).density*reg547; reg255=reg267-reg255; reg1292=reg234+reg1292;
    reg466=reg1036+reg466; reg953=reg951-reg953; reg1062=reg1063+reg1062; reg938=reg641+reg938; reg1177=reg1178+reg1177;
    reg290=reg290+reg1074; reg1083=reg1084+reg1083; reg986=reg984-reg986; reg259=reg1350+reg259; reg234=reg90*reg552;
    reg1019=(*f.m).density*reg1019; reg370=reg370-reg628; reg651=reg656-reg651; reg1017=reg351+reg1017; reg538=reg350-reg538;
    reg250=reg476-reg250; reg1357=reg232+reg1357; reg776=reg779-reg776; reg1274=reg1271+reg1274; reg1064=reg1065+reg1064;
    reg283=reg283+reg1002; reg544=reg280-reg544; reg839=reg838-reg839; reg1101=reg1101-reg1102; reg471=reg995+reg471;
    reg496=reg1002+reg496; reg232=reg90*reg224; reg267=reg90*reg530; reg1053=reg1054+reg1053; reg1338=reg1337+reg1338;
    reg874=reg874+reg879; reg933=reg900-reg933; reg995=reg279+reg995; reg1058=reg481+reg1058; reg714=reg715+reg714;
    reg929=reg929+reg930; reg323=reg567+reg323; reg279=reg90*reg356; reg1036=reg360+reg1036; reg1237=reg1234+reg1237;
    reg998=reg999+reg998; reg219=reg219-reg1343; reg896=reg896+reg898; reg634=reg278-reg634; reg748=reg249+reg748;
    reg509=reg1074+reg509; reg1061=reg1088+reg1061; reg852=reg853-reg852; reg1090=reg1091+reg1090; reg1028=reg1029+reg1028;
    reg1030=reg1031+reg1030; reg249=reg90*reg607; reg1317=reg1317-reg404; reg962=reg240-reg962; reg734=reg741+reg734;
    reg846=reg532-reg846; reg377=reg603+reg377; reg1047=reg1048+reg1047; reg1023=reg1024+reg1023; reg296=reg296+reg912;
    reg1095=reg273+reg1095; reg988=reg989+reg988; reg391=reg528+reg391; reg1038=reg1039+reg1038; reg336=reg1194+reg336;
    reg991=reg992+reg991; reg1335=reg1334+reg1335; reg814=reg828-reg814; reg720=reg723+reg720; reg1225=reg1299+reg1225;
    reg733=reg546+reg733; reg886=reg883-reg886; reg462=reg90*reg462; reg735=reg90*reg735; reg746=reg90*reg746;
    reg480=reg90*reg480; reg1020=reg90*reg1020; reg1097=reg90*reg1097; reg346=reg90*reg346; reg751=reg90*reg751;
    reg605=reg90*reg605; reg606=reg90*reg606; reg1090=reg90*reg1090; reg1290=reg90*reg1290; reg1023=reg90*reg1023;
    reg244=reg90*reg244; reg1078=reg90*reg1078; reg366=reg90*reg366; reg240=ponderation*reg286; reg740=reg90*reg740;
    reg202=reg90*reg202; reg738=reg90*reg738; reg1146=reg90*reg1146; reg1285=reg90*reg1285; reg823=reg90*reg823;
    reg1151=reg90*reg1151; reg273=ponderation*reg309; reg385=reg90*reg385; reg616=reg90*reg616; reg743=reg90*reg743;
    reg290=reg90*reg290; reg1095=reg90*reg1095; reg278=ponderation*reg264; reg1101=reg90*reg1101; reg1073=reg90*reg1073;
    reg742=reg90*reg742; reg1022=reg90*reg1022; reg478=reg90*reg478; reg474=reg90*reg474; reg1150=reg90*reg1150;
    reg1287=reg90*reg1287; reg795=reg90*reg795; reg556=reg90*reg556; reg790=reg90*reg790; reg791=reg90*reg791;
    reg991=reg90*reg991; reg1038=reg90*reg1038; reg1144=reg90*reg1144; reg392=reg90*reg392; reg1016=reg90*reg1016;
    reg359=reg90*reg359; reg988=reg90*reg988; reg785=reg90*reg785; reg786=reg90*reg786; reg1139=reg90*reg1139;
    reg781=reg90*reg781; reg1010=reg90*reg1010; reg1013=reg90*reg1013; reg782=reg90*reg782; reg1001=reg90*reg1001;
    reg435=reg90*reg435; reg761=reg90*reg761; reg1153=reg90*reg1153; reg1030=reg90*reg1030; reg757=reg90*reg757;
    reg997=reg90*reg997; reg1036=reg90*reg1036; reg418=reg90*reg418; reg1141=reg90*reg1141; reg799=reg90*reg799;
    reg998=reg90*reg998; reg801=reg90*reg801; reg543=reg90*reg543; reg453=reg90*reg453; reg995=reg90*reg995;
    reg793=reg90*reg793; reg1035=reg90*reg1035; reg305=reg90*reg305; reg225=reg90*reg225; reg716=reg90*reg716;
    reg283=reg90*reg283; reg280=ponderation*reg194; reg1134=reg90*reg1134; reg710=reg90*reg710; reg713=reg90*reg713;
    reg870=reg90*reg870; reg1157=reg90*reg1157; reg708=reg90*reg708; reg1045=reg90*reg1045; reg350=ponderation*reg261;
    reg1080=reg90*reg1080; reg1155=reg90*reg1155; reg753=reg90*reg753; reg1083=reg90*reg1083; reg754=reg90*reg754;
    reg390=reg90*reg390; reg750=reg90*reg750; reg1143=reg90*reg1143; reg386=reg90*reg386; reg1042=reg90*reg1042;
    reg306=reg90*reg306; reg292=reg90*reg292; reg730=reg90*reg730; reg731=reg90*reg731; reg1008=reg90*reg1008;
    reg1136=reg90*reg1136; reg1041=reg90*reg1041; reg1138=reg90*reg1138; reg724=reg90*reg724; reg1004=reg90*reg1004;
    reg726=reg90*reg726; reg722=reg90*reg722; reg351=ponderation*reg325; reg285=reg90*reg285; reg1017=reg90*reg1017;
    reg1086=reg90*reg1086; reg521=reg90*reg521; reg1240=reg90*reg1240; reg1182=reg90*reg1182; reg1244=reg90*reg1244;
    reg167=reg90*reg167; reg1242=reg90*reg1242; reg216=reg90*reg216; reg470=reg90*reg470; reg522=reg90*reg522;
    reg363=reg90*reg363; reg1246=reg90*reg1246; reg343=reg90*reg343; reg589=reg90*reg589; reg207=reg90*reg207;
    reg1336=reg90*reg1336; reg208=reg90*reg208; reg1331=reg90*reg1331; reg1211=reg90*reg1211; reg336=reg90*reg336;
    reg1219=reg90*reg1219; reg1189=reg90*reg1189; reg1252=reg90*reg1252; reg1322=reg90*reg1322; reg1251=reg90*reg1251;
    reg301=reg90*reg301; reg471=reg90*reg471; reg1160=reg90*reg1160; reg1191=reg90*reg1191; reg1259=reg90*reg1259;
    reg1256=reg90*reg1256; reg1184=reg90*reg1184; reg360=ponderation*reg253; reg238=reg90*reg238; reg1262=reg90*reg1262;
    reg1318=reg90*reg1318; reg428=reg90*reg428; reg376=ponderation*reg321; reg1265=reg90*reg1265; reg1185=reg90*reg1185;
    reg1201=reg90*reg1201; reg251=reg90*reg251; reg1356=reg90*reg1356; reg233=reg90*reg233; reg602=reg90*reg602;
    reg220=reg90*reg220; reg212=reg90*reg212; reg219=reg90*reg219; reg1164=reg90*reg1164; reg403=reg90*reg403;
    reg1198=reg90*reg1198; reg1329=reg90*reg1329; reg509=reg90*reg509; reg409=reg90*reg409; reg1325=reg90*reg1325;
    reg1196=reg90*reg1196; reg1326=reg90*reg1326; reg1320=reg90*reg1320; reg1167=reg90*reg1167; reg1317=reg90*reg1317;
    reg438=reg90*reg438; reg382=ponderation*reg269; reg397=reg90*reg397; reg201=reg90*reg201; reg498=reg90*reg498;
    reg332=reg90*reg332; reg1335=reg90*reg1335; reg1162=reg90*reg1162; reg1353=reg90*reg1353; reg1206=reg90*reg1206;
    reg1348=reg90*reg1348; reg496=reg90*reg496; reg1209=reg90*reg1209; reg1339=reg90*reg1339; reg256=reg90*reg256;
    reg209=reg90*reg209; reg1338=reg90*reg1338; reg415=reg90*reg415; reg323=reg90*reg323; reg384=reg90*reg384;
    reg1305=reg90*reg1305; reg1303=reg90*reg1303; reg491=reg90*reg491; reg331=reg90*reg331; reg1047=reg90*reg1047;
    reg1171=reg90*reg1171; reg1309=reg90*reg1309; reg1307=reg90*reg1307; reg1104=reg90*reg1104; reg211=reg90*reg211;
    reg1069=reg90*reg1069; reg399=reg90*reg399; reg1070=reg90*reg1070; reg1312=reg90*reg1312; reg1105=reg90*reg1105;
    reg1172=reg90*reg1172; reg1293=reg90*reg1293; reg1066=reg90*reg1066; reg401=reg90*reg401; reg1288=reg90*reg1288;
    reg1028=reg90*reg1028; reg1112=reg90*reg1112; reg1060=reg90*reg1060; reg1269=reg90*reg1269; reg1268=reg90*reg1268;
    reg1061=reg90*reg1061; reg1057=reg90*reg1057; reg1113=reg90*reg1113; reg1273=reg90*reg1273; reg1027=reg90*reg1027;
    reg516=reg90*reg516; reg1276=reg90*reg1276; reg1058=reg90*reg1058; reg330=reg90*reg330; reg377=reg90*reg377;
    reg1280=reg90*reg1280; reg1049=reg90*reg1049; reg1278=reg90*reg1278; reg1053=reg90*reg1053; reg1249=reg90*reg1249;
    reg1121=reg90*reg1121; reg439=reg90*reg439; reg466=reg90*reg466; reg254=reg90*reg254; reg1235=reg90*reg1235;
    reg1117=reg90*reg1117; reg1213=reg90*reg1213; reg370=reg90*reg370; reg580=reg90*reg580; reg383=ponderation*reg357;
    reg259=reg90*reg259; reg468=reg90*reg468; reg406=reg90*reg406; reg454=reg90*reg454; reg1179=reg90*reg1179;
    reg1216=reg90*reg1216; reg597=reg90*reg597; reg1220=reg90*reg1220; reg1357=reg90*reg1357; reg456=reg90*reg456;
    reg333=reg90*reg333; reg214=reg90*reg214; reg1177=reg90*reg1177; reg381=reg90*reg381; reg463=reg90*reg463;
    reg1125=reg90*reg1125; reg1300=reg90*reg1300; reg1064=reg90*reg1064; reg1298=reg90*reg1298; reg387=reg90*reg387;
    reg1062=reg90*reg1062; reg189=reg90*reg189; reg1126=reg90*reg1126; reg1228=reg90*reg1228; reg1174=reg90*reg1174;
    reg190=reg90*reg190; reg1227=reg90*reg1227; reg1120=reg90*reg1120; reg1231=reg90*reg1231; reg388=ponderation*reg252;
    reg864=reg90*reg864; reg329=reg90*reg329; reg393=ponderation*reg196; reg867=reg90*reg867; reg1266=reg90*reg1266;
    reg1257=reg90*reg1257; reg978=reg90*reg978; reg869=reg90*reg869; reg871=reg90*reg871; reg334=reg90*reg334;
    reg223=reg90*reg223; reg449=reg90*reg449; reg859=reg90*reg859; reg1243=reg90*reg1243; reg855=reg90*reg855;
    reg856=reg90*reg856; reg339=reg90*reg339; reg337=reg90*reg337; reg322=reg90*reg322; reg465=reg90*reg465;
    reg892=reg90*reg892; reg891=reg90*reg891; reg897=reg90*reg897; reg814=reg90*reg814; reg372=reg90*reg372;
    reg812=reg90*reg812; reg1296=reg90*reg1296; reg846=reg90*reg846; reg886=reg90*reg886; reg535=reg90*reg535;
    reg874=reg90*reg874; reg881=reg90*reg881; reg1232=reg90*reg1232; reg1225=reg90*reg1225; reg394=ponderation*reg279;
    reg625=reg90*reg625; reg896=reg90*reg896; reg647=reg90*reg647; reg205=reg90*reg205; reg852=reg90*reg852;
    reg851=reg90*reg851; reg1237=reg90*reg1237; reg962=reg90*reg962; reg858=reg90*reg858; reg865=reg90*reg865;
    reg1258=reg90*reg1258; reg613=reg90*reg613; reg571=reg90*reg571; reg815=reg90*reg815; reg560=reg90*reg560;
    reg1093=reg90*reg1093; reg371=reg90*reg371; reg204=reg90*reg204; reg373=reg90*reg373; reg806=reg90*reg806;
    reg247=reg90*reg247; reg396=ponderation*reg282; reg843=reg90*reg843; reg629=reg90*reg629; reg566=reg90*reg566;
    reg380=reg90*reg380; reg341=reg90*reg341; reg347=reg90*reg347; reg845=reg90*reg845; reg407=ponderation*reg270;
    reg830=reg90*reg830; reg1315=reg90*reg1315; reg834=reg90*reg834; reg354=reg90*reg354; reg210=reg90*reg210;
    reg411=ponderation*reg266; reg414=ponderation*reg191; reg895=reg90*reg895; reg199=reg90*reg199; reg307=reg90*reg307;
    reg342=reg90*reg342; reg262=reg90*reg262; reg872=reg90*reg872; reg416=ponderation*reg313; reg877=reg90*reg877;
    reg374=reg90*reg374; reg876=reg90*reg876; reg420=ponderation*reg277; reg318=reg90*reg318; reg630=reg90*reg630;
    reg887=reg90*reg887; reg885=reg90*reg885; reg149=reg90*reg149; reg424=ponderation*reg213; reg822=reg90*reg822;
    reg568=reg90*reg568; reg505=reg90*reg505; reg324=reg90*reg324; reg827=reg90*reg827; reg826=reg90*reg826;
    reg426=ponderation*reg222; reg1316=reg90*reg1316; reg427=reg90*reg835; reg651=reg90*reg651; reg200=reg90*reg200;
    reg436=reg90*reg246; reg938=reg90*reg938; reg654=reg90*reg654; reg447=reg90*reg934; reg448=ponderation*reg361;
    reg691=reg90*reg691; reg451=reg90*reg771; reg538=reg90*reg538; reg703=reg90*reg703; reg596=reg90*reg596;
    reg455=reg90*reg832; reg457=ponderation*reg239; reg669=reg90*reg669; reg464=reg90*reg820; reg472=ponderation*reg232;
    reg679=reg90*reg679; reg475=reg90*reg911; reg929=reg90*reg929; reg476=reg90*reg697; reg257=reg90*reg257;
    reg477=ponderation*reg249; reg734=reg90*reg734; reg479=reg90*reg994; reg748=reg90*reg748; reg747=reg90*reg747;
    reg481=reg90*reg1129; reg714=reg90*reg714; reg720=reg90*reg720; reg711=reg90*reg711; reg482=reg90*reg993;
    reg733=reg90*reg733; reg719=reg90*reg719; reg484=reg90*reg1052; reg391=reg90*reg391; reg492=ponderation*reg237;
    reg493=reg90*reg1351; reg794=reg90*reg794; reg494=reg90*reg1272; reg760=reg90*reg760; reg758=reg90*reg758;
    reg495=reg90*reg450; reg767=reg90*reg767; reg637=reg90*reg637; reg500=reg90*reg684; reg773=reg90*reg773;
    reg776=reg90*reg776; reg235=reg90*reg235; reg255=reg90*reg255; reg344=reg90*reg344; reg953=reg90*reg953;
    reg621=reg90*reg621; reg431=reg90*reg431; reg502=ponderation*reg234; reg946=reg90*reg946; reg1292=reg90*reg1292;
    reg250=reg90*reg250; reg317=reg90*reg317; reg839=reg90*reg839; reg1279=reg90*reg1279; reg206=reg90*reg206;
    reg1274=reg90*reg1274; reg504=ponderation*reg335; reg837=reg90*reg837; reg848=reg90*reg848; reg849=reg90*reg849;
    reg236=reg90*reg236; reg805=reg90*reg805; reg1308=reg90*reg1308; reg598=reg90*reg598; reg803=reg90*reg803;
    reg840=reg90*reg840; reg506=reg90*reg727; reg919=reg90*reg919; reg634=reg90*reg634; reg507=reg90*reg1294;
    reg935=reg90*reg935; reg933=reg90*reg933; reg510=reg90*reg1344; reg512=ponderation*reg267; reg905=reg90*reg905;
    reg513=reg90*reg1072; reg296=reg90*reg296; reg582=reg90*reg582; reg514=reg90*reg1019; reg517=ponderation*reg352;
    reg909=reg90*reg909; reg518=reg90*reg1110; reg520=reg90*reg349; reg969=reg90*reg969; reg528=reg90*reg996;
    reg544=reg90*reg544; reg986=reg90*reg986; reg578=reg90*reg578; reg531=reg90*reg547; reg532=ponderation*reg369;
    reg980=reg90*reg980; reg1168=reg90*reg1168; reg920=reg90*reg920; reg1025=reg90*reg1025; reg487=reg90*reg487;
    reg515=reg90*reg515; reg927=reg90*reg927; reg925=reg90*reg925; reg1181=reg90*reg1181; reg533=ponderation*reg215;
    reg685=reg90*reg685; reg1176=reg90*reg1176; reg527=reg90*reg527; reg681=reg90*reg681; reg633=reg90*reg633;
    reg680=reg90*reg680; reg676=reg90*reg676; reg529=reg90*reg529; reg612=reg90*reg612; reg499=reg90*reg499;
    reg677=reg90*reg677; reg671=reg90*reg671; reg673=reg90*reg673; reg914=reg90*reg914; reg913=reg90*reg913;
    reg918=reg90*reg918; reg1015=reg90*reg1015; reg917=reg90*reg917; reg486=reg90*reg486; reg906=reg90*reg906;
    reg907=reg90*reg907; reg1037=reg90*reg1037; reg903=reg90*reg903; reg540=ponderation*reg275; reg1033=reg90*reg1033;
    reg460=reg90*reg460; reg437=reg90*reg437; reg549=reg90*reg549; reg937=reg90*reg937; reg939=reg90*reg939;
    reg461=reg90*reg461; reg248=reg90*reg248; reg467=reg90*reg467; reg942=reg90*reg942; reg944=reg90*reg944;
    reg943=reg90*reg943; reg395=reg90*reg395; reg687=reg90*reg687; reg663=reg90*reg663; reg658=reg90*reg658;
    reg1128=reg90*reg1128; reg661=reg90*reg661; reg398=reg90*reg398; reg1108=reg90*reg1108; reg657=reg90*reg657;
    reg660=reg90*reg660; reg570=reg90*reg570; reg777=reg90*reg777; reg541=ponderation*reg338; reg588=reg90*reg588;
    reg775=reg90*reg775; reg425=reg90*reg425; reg419=reg90*reg419; reg1114=reg90*reg1114; reg769=reg90*reg769;
    reg542=ponderation*reg345; reg764=reg90*reg764; reg766=reg90*reg766; reg1156=reg90*reg1156; reg1199=reg90*reg1199;
    reg1166=reg90*reg1166; reg668=reg90*reg668; reg402=reg90*reg402; reg405=reg90*reg405; reg666=reg90*reg666;
    reg1183=reg90*reg1183; reg704=reg90*reg704; reg705=reg90*reg705; reg1205=reg90*reg1205; reg699=reg90*reg699;
    reg408=reg90*reg408; reg694=reg90*reg694; reg696=reg90*reg696; reg1190=reg90*reg1190; reg583=reg90*reg583;
    reg417=reg90*reg417; reg692=reg90*reg692; reg690=reg90*reg690; reg1119=reg90*reg1119; reg686=reg90*reg686;
    reg545=ponderation*reg218; reg539=reg90*reg539; reg546=ponderation*reg364; reg908=reg90*reg908; reg1051=reg90*reg1051;
    reg976=reg90*reg976; reg1050=reg90*reg1050; reg957=reg90*reg957; reg1092=reg90*reg1092; reg949=reg90*reg949;
    reg554=reg90*reg554; reg550=ponderation*reg348; reg557=ponderation*reg195; reg981=reg90*reg981; reg365=reg90*reg365;
    reg966=reg90*reg966; reg972=reg90*reg972; reg1087=reg90*reg1087; reg268=reg90*reg268; reg952=reg90*reg952;
    reg558=ponderation*reg340; reg537=reg90*reg537; reg231=reg90*reg231; reg961=reg90*reg961; reg175=reg90*reg175;
    reg534=reg90*reg534; reg955=reg90*reg955; reg1094=reg90*reg1094; reg945=reg90*reg945; reg1011=reg90*reg1011;
    reg975=reg90*reg975; reg483=reg90*reg483; reg561=ponderation*reg358; reg983=reg90*reg983; reg985=reg90*reg985;
    reg954=reg90*reg954; reg958=reg90*reg958; reg567=ponderation*reg355; reg281=reg90*reg281; reg579=reg90*reg579;
    reg608=reg90*reg608; reg1082=reg90*reg1082; matrix(indices[7]+1,indices[3]+0)+=ponderation*reg1139; reg572=ponderation*reg464; sollicitation[indices[3]+1]+=reg572;
    matrix(indices[7]+0,indices[6]+2)+=ponderation*reg1189; matrix(indices[0]+0,indices[6]+0)+=ponderation*reg231; reg231=ponderation*reg475; sollicitation[indices[3]+0]+=reg231; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg583;
    matrix(indices[0]+0,indices[4]+2)+=ponderation*reg204; matrix(indices[7]+0,indices[1]+2)+=ponderation*reg1020; matrix(indices[0]+2,indices[7]+1)+=ponderation*reg1023; reg204=ponderation*reg514; sollicitation[indices[1]+0]+=reg204;
    matrix(indices[0]+1,indices[5]+1)+=ponderation*reg1138; reg577=ponderation*reg513; sollicitation[indices[1]+1]+=reg577; matrix(indices[7]+0,indices[6]+1)+=ponderation*reg1184; matrix(indices[7]+2,indices[1]+0)+=ponderation*reg1094;
    matrix(indices[7]+0,indices[2]+1)+=ponderation*reg1027; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg1205; reg583=ponderation*reg510; sollicitation[indices[1]+2]+=reg583; matrix(indices[0]+2,indices[6]+2)+=ponderation*reg377;
    matrix(indices[0]+0,indices[4]+1)+=ponderation*reg1316; matrix(indices[7]+1,indices[5]+1)+=ponderation*reg1190; reg377=ponderation*reg507; sollicitation[indices[2]+0]+=reg377; matrix(indices[7]+1,indices[2]+2)+=ponderation*reg1136;
    reg585=ponderation*reg506; sollicitation[indices[2]+1]+=reg585; matrix(indices[7]+0,indices[2]+0)+=ponderation*reg1022; matrix(indices[7]+0,indices[7]+2)+=ponderation*reg1125; matrix(indices[7]+2,indices[2]+2)+=ponderation*reg247;
    matrix(indices[0]+2,indices[1]+2)+=ponderation*reg597; reg247=ponderation*reg476; sollicitation[indices[2]+2]+=reg247; matrix(indices[0]+2,indices[7]+0)+=ponderation*reg1028; matrix(indices[0]+1,indices[5]+0)+=ponderation*reg1143;
    matrix(indices[0]+2,indices[1]+1)+=ponderation*reg1121; matrix(indices[7]+1,indices[4]+1)+=ponderation*reg588; matrix(indices[7]+0,indices[7]+1)+=ponderation*reg1120; reg586=ponderation*reg494; sollicitation[indices[6]+0]+=reg586;
    matrix(indices[1]+0,indices[0]+1)+=ponderation*reg1042; matrix(indices[7]+2,indices[2]+0)+=ponderation*reg210; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg570; reg210=ponderation*reg493; sollicitation[indices[6]+1]+=reg210;
    matrix(indices[7]+0,indices[7]+0)+=ponderation*reg1117; matrix(indices[7]+0,indices[0]+2)+=ponderation*reg1035; matrix(indices[7]+1,indices[3]+2)+=ponderation*reg1141; reg570=ponderation*reg484; sollicitation[indices[6]+2]+=reg570;
    matrix(indices[7]+2,indices[1]+2)+=ponderation*reg608; matrix(indices[1]+0,indices[0]+2)+=ponderation*reg1038; matrix(indices[0]+1,indices[4]+0)+=ponderation*reg1153; reg587=ponderation*reg482; sollicitation[indices[7]+0]+=reg587;
    matrix(indices[0]+0,indices[5]+1)+=ponderation*reg1315; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg1114; reg588=ponderation*reg481; sollicitation[indices[7]+1]+=reg588; matrix(indices[7]+1,indices[4]+0)+=ponderation*reg1156;
    matrix(indices[0]+2,indices[1]+0)+=ponderation*reg1126; matrix(indices[7]+0,indices[0]+1)+=ponderation*reg1001; reg590=ponderation*reg479; sollicitation[indices[7]+2]+=reg590; matrix(indices[7]+1,indices[5]+0)+=ponderation*reg539;
    reg539=ponderation*reg455; sollicitation[indices[3]+2]+=reg539; reg593=ponderation*reg451; sollicitation[indices[4]+0]+=reg593; matrix(indices[0]+1,indices[4]+2)+=ponderation*reg1144;
    matrix(indices[7]+2,indices[1]+1)+=ponderation*reg1051; matrix(indices[0]+2,indices[7]+2)+=ponderation*reg346; matrix(indices[0]+1,indices[2]+2)+=ponderation*reg1119; matrix(indices[7]+0,indices[1]+1)+=ponderation*reg1045; reg346=ponderation*reg447;
    sollicitation[indices[4]+1]+=reg346; matrix(indices[0]+2,indices[0]+2)+=ponderation*reg333; matrix(indices[1]+1,indices[6]+1)+=ponderation*reg406; reg333=ponderation*reg436; sollicitation[indices[4]+2]+=reg333;
    matrix(indices[7]+1,indices[4]+2)+=ponderation*reg1108; matrix(indices[7]+2,indices[2]+1)+=ponderation*reg341; reg341=ponderation*reg427; sollicitation[indices[5]+0]+=reg341; matrix(indices[7]+1,indices[3]+1)+=ponderation*reg556;
    matrix(indices[7]+0,indices[1]+0)+=ponderation*reg1041; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg1128; reg406=ponderation*reg500; sollicitation[indices[5]+1]+=reg406; matrix(indices[0]+0,indices[5]+0)+=ponderation*reg629;
    matrix(indices[1]+0,indices[0]+0)+=ponderation*reg1017; matrix(indices[0]+1,indices[4]+1)+=ponderation*reg543; reg543=ponderation*reg495; sollicitation[indices[5]+2]+=reg543; matrix(indices[0]+0,indices[5]+2)+=ponderation*reg175;
    matrix(indices[0]+0,indices[3]+0)+=ponderation*reg465; matrix(indices[0]+2,indices[4]+1)+=ponderation*reg1196; matrix(indices[0]+1,indices[7]+0)+=ponderation*reg605; matrix(indices[0]+0,indices[7]+0)+=ponderation*reg554; matrix(indices[7]+0,indices[4]+1)+=ponderation*reg1164;
    matrix(indices[0]+2,indices[3]+0)+=-reg382; matrix(indices[7]+2,indices[5]+2)+=ponderation*reg205; matrix(indices[0]+1,indices[0]+0)+=ponderation*reg1033; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg1225; matrix(indices[7]+2,indices[4]+0)+=ponderation*reg199;
    matrix(indices[0]+1,indices[6]+2)+=ponderation*reg1151; matrix(indices[0]+2,indices[4]+2)+=ponderation*reg323; matrix(indices[7]+2,indices[0]+1)+=ponderation*reg1087; matrix(indices[7]+0,indices[4]+0)+=ponderation*reg1162; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg248;
    matrix(indices[7]+2,indices[6]+0)+=ponderation*reg1232; matrix(indices[7]+1,indices[7]+0)+=ponderation*reg1168; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg1296; matrix(indices[7]+1,indices[1]+1)+=ponderation*reg616; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg262;
    matrix(indices[7]+0,indices[5]+2)+=ponderation*reg1211; matrix(indices[1]+2,indices[1]+1)+=ponderation*reg336; matrix(indices[7]+2,indices[6]+1)+=ponderation*reg372; matrix(indices[0]+0,indices[7]+1)+=ponderation*reg1082; matrix(indices[0]+2,indices[3]+1)+=ponderation*reg1209;
    matrix(indices[7]+2,indices[4]+2)+=ponderation*reg223; matrix(indices[7]+0,indices[5]+0)+=ponderation*reg1201; matrix(indices[0]+0,indices[2]+2)+=ponderation*reg1243; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg1257; matrix(indices[7]+1,indices[0]+2)+=ponderation*reg1112;
    matrix(indices[0]+2,indices[3]+2)+=ponderation*reg602; matrix(indices[0]+0,indices[7]+2)+=ponderation*reg1015; matrix(indices[7]+2,indices[4]+1)+=ponderation*reg322; matrix(indices[0]+1,indices[7]+1)+=ponderation*reg606; matrix(indices[7]+1,indices[7]+2)+=ponderation*reg1037;
    matrix(indices[7]+2,indices[5]+0)+=ponderation*reg1266; matrix(indices[0]+1,indices[7]+2)+=ponderation*reg1113; matrix(indices[7]+2,indices[0]+0)+=ponderation*reg1011; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg571; matrix(indices[7]+1,indices[0]+1)+=ponderation*reg330;
    matrix(indices[0]+2,indices[4]+0)+=ponderation*reg1198; matrix(indices[7]+0,indices[4]+2)+=ponderation*reg1167; matrix(indices[7]+0,indices[5]+1)+=ponderation*reg1206; matrix(indices[7]+2,indices[5]+1)+=ponderation*reg1258; matrix(indices[7]+1,indices[7]+1)+=ponderation*reg549;
    matrix(indices[7]+1,indices[1]+0)+=ponderation*reg1146; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg1237; matrix(indices[7]+2,indices[3]+1)+=ponderation*reg149; matrix(indices[7]+2,indices[7]+1)+=ponderation*reg431; matrix(indices[0]+2,indices[5]+2)+=ponderation*reg370;
    matrix(indices[7]+1,indices[2]+0)+=ponderation*reg1155; matrix(indices[7]+0,indices[3]+0)+=ponderation*reg1174; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg612; matrix(indices[7]+0,indices[6]+0)+=ponderation*reg1182; matrix(indices[7]+1,indices[6]+0)+=ponderation*reg1199;
    matrix(indices[7]+2,indices[7]+2)+=ponderation*reg235; matrix(indices[0]+1,indices[5]+2)+=ponderation*reg1134; matrix(indices[0]+0,indices[4]+0)+=ponderation*reg568; matrix(indices[0]+2,indices[6]+0)+=ponderation*reg1177; reg149=ponderation*reg531;
    sollicitation[indices[0]+0]+=reg149; matrix(indices[0]+0,indices[6]+1)+=ponderation*reg1050; matrix(indices[0]+2,indices[2]+0)+=ponderation*reg1191; reg175=ponderation*reg528; sollicitation[indices[0]+1]+=reg175;
    matrix(indices[7]+2,indices[3]+0)+=-reg426; matrix(indices[0]+1,indices[1]+2)+=ponderation*reg1166; matrix(indices[7]+0,indices[2]+2)+=ponderation*reg1171; matrix(indices[7]+1,indices[2]+1)+=ponderation*reg225; reg199=ponderation*reg518;
    sollicitation[indices[0]+2]+=reg199; matrix(indices[0]+2,indices[0]+1)+=ponderation*reg1105; matrix(indices[7]+1,indices[5]+2)+=ponderation*reg1183; matrix(indices[0]+2,indices[6]+1)+=ponderation*reg1172; matrix(indices[7]+2,indices[3]+2)+=ponderation*reg374;
    matrix(indices[0]+0,indices[0]+2)+=ponderation*reg1308; matrix(indices[0]+1,indices[0]+2)+=ponderation*reg1025; matrix(indices[0]+1,indices[6]+1)+=ponderation*reg244; matrix(indices[7]+0,indices[3]+2)+=-reg376; matrix(indices[7]+1,indices[6]+2)+=ponderation*reg1181;
    matrix(indices[0]+2,indices[2]+2)+=ponderation*reg343; matrix(indices[7]+2,indices[6]+2)+=ponderation*reg236; matrix(indices[0]+2,indices[0]+0)+=ponderation*reg331; matrix(indices[0]+2,indices[5]+0)+=ponderation*reg216; matrix(indices[0]+0,indices[6]+2)+=ponderation*reg1092;
    matrix(indices[0]+0,indices[0]+1)+=ponderation*reg1274; matrix(indices[7]+1,indices[1]+2)+=ponderation*reg1150; matrix(indices[0]+0,indices[3]+2)+=-reg420; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg1176; matrix(indices[7]+1,indices[0]+0)+=ponderation*reg1104;
    matrix(indices[0]+2,indices[5]+1)+=ponderation*reg1160; matrix(indices[7]+0,indices[3]+1)+=ponderation*reg1179; matrix(indices[7]+2,indices[7]+0)+=ponderation*reg1279; matrix(indices[7]+1,indices[6]+1)+=ponderation*reg633; matrix(indices[0]+1,indices[6]+0)+=ponderation*reg1157;
    matrix(indices[0]+0,indices[0]+0)+=ponderation*reg1292; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg1185; matrix(indices[7]+2,indices[0]+2)+=ponderation*reg537; matrix(indices[3]+0,indices[5]+1)+=ponderation*reg834; matrix(indices[4]+2,indices[7]+2)+=ponderation*reg354;
    matrix(indices[3]+0,indices[5]+0)+=-reg411; matrix(indices[3]+0,indices[4]+2)+=-reg414; matrix(indices[3]+0,indices[4]+1)+=ponderation*reg958; matrix(indices[5]+0,indices[0]+0)+=ponderation*reg955; matrix(indices[3]+0,indices[4]+0)+=ponderation*reg268;
    matrix(indices[5]+0,indices[0]+1)+=ponderation*reg957; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg365; matrix(indices[5]+0,indices[0]+2)+=ponderation*reg961; matrix(indices[3]+0,indices[3]+1)+=-reg561; matrix(indices[5]+0,indices[1]+0)+=ponderation*reg945;
    matrix(indices[3]+0,indices[3]+0)+=ponderation*reg952; matrix(indices[5]+0,indices[1]+1)+=ponderation*reg949; matrix(indices[3]+0,indices[2]+2)+=-reg567; matrix(indices[5]+0,indices[1]+2)+=ponderation*reg954; matrix(indices[3]+0,indices[2]+1)+=ponderation*reg975;
    matrix(indices[3]+0,indices[2]+0)+=ponderation*reg281; matrix(indices[5]+0,indices[2]+0)+=ponderation*reg976; matrix(indices[3]+0,indices[1]+2)+=-reg550; matrix(indices[5]+0,indices[2]+1)+=ponderation*reg981; matrix(indices[3]+0,indices[1]+1)+=ponderation*reg985;
    matrix(indices[5]+0,indices[2]+2)+=ponderation*reg983; matrix(indices[3]+0,indices[1]+0)+=ponderation*reg579; matrix(indices[3]+0,indices[0]+2)+=-reg557; matrix(indices[5]+0,indices[3]+0)+=-reg558; matrix(indices[3]+1,indices[0]+2)+=ponderation*reg877;
    matrix(indices[4]+2,indices[3]+0)+=-reg416; matrix(indices[3]+1,indices[0]+1)+=ponderation*reg318; matrix(indices[4]+2,indices[3]+1)+=ponderation*reg876; matrix(indices[3]+1,indices[0]+0)+=ponderation*reg887; matrix(indices[4]+2,indices[3]+2)+=ponderation*reg630;
    matrix(indices[4]+2,indices[4]+0)+=ponderation*reg885; matrix(indices[3]+0,indices[7]+2)+=-reg424; matrix(indices[4]+2,indices[4]+1)+=ponderation*reg822; matrix(indices[6]+2,indices[1]+2)+=ponderation*reg505; matrix(indices[4]+2,indices[4]+2)+=ponderation*reg324;
    matrix(indices[6]+2,indices[1]+1)+=ponderation*reg827; matrix(indices[4]+2,indices[5]+0)+=ponderation*reg826; matrix(indices[6]+2,indices[2]+1)+=ponderation*reg815; matrix(indices[4]+2,indices[5]+1)+=ponderation*reg560; matrix(indices[6]+2,indices[1]+0)+=ponderation*reg1093;
    matrix(indices[4]+2,indices[5]+2)+=ponderation*reg371; matrix(indices[3]+0,indices[7]+0)+=ponderation*reg373; matrix(indices[4]+2,indices[6]+0)+=ponderation*reg806; matrix(indices[3]+0,indices[6]+2)+=-reg396; matrix(indices[4]+2,indices[6]+1)+=ponderation*reg843;
    matrix(indices[3]+0,indices[6]+1)+=ponderation*reg566; matrix(indices[4]+2,indices[6]+2)+=ponderation*reg380; matrix(indices[3]+0,indices[6]+0)+=ponderation*reg347; matrix(indices[4]+2,indices[7]+0)+=ponderation*reg845; matrix(indices[3]+0,indices[5]+2)+=-reg407;
    matrix(indices[4]+2,indices[7]+1)+=ponderation*reg830; matrix(indices[2]+2,indices[3]+1)+=ponderation*reg927; matrix(indices[5]+0,indices[7]+1)+=ponderation*reg925; matrix(indices[2]+2,indices[3]+0)+=-reg533; matrix(indices[5]+0,indices[7]+2)+=ponderation*reg685;
    matrix(indices[2]+2,indices[2]+2)+=ponderation*reg527; matrix(indices[2]+2,indices[2]+1)+=ponderation*reg680; matrix(indices[5]+1,indices[0]+0)+=ponderation*reg681; matrix(indices[2]+2,indices[2]+0)+=ponderation*reg676; matrix(indices[5]+1,indices[0]+1)+=ponderation*reg529;
    matrix(indices[2]+2,indices[1]+2)+=ponderation*reg499; matrix(indices[5]+1,indices[0]+2)+=ponderation*reg677; matrix(indices[2]+2,indices[1]+1)+=ponderation*reg671; matrix(indices[5]+1,indices[1]+0)+=ponderation*reg673; matrix(indices[2]+2,indices[1]+0)+=ponderation*reg668;
    matrix(indices[5]+1,indices[1]+1)+=ponderation*reg402; matrix(indices[2]+2,indices[0]+2)+=ponderation*reg405; matrix(indices[5]+1,indices[1]+2)+=ponderation*reg666; matrix(indices[2]+2,indices[0]+1)+=ponderation*reg704; matrix(indices[5]+1,indices[2]+0)+=ponderation*reg705;
    matrix(indices[2]+2,indices[0]+0)+=ponderation*reg699; matrix(indices[5]+1,indices[2]+1)+=ponderation*reg408; matrix(indices[2]+1,indices[7]+2)+=ponderation*reg694; matrix(indices[5]+1,indices[2]+2)+=ponderation*reg696; matrix(indices[2]+1,indices[7]+1)+=ponderation*reg417;
    matrix(indices[5]+1,indices[3]+0)+=ponderation*reg692; matrix(indices[2]+1,indices[7]+0)+=ponderation*reg690; matrix(indices[2]+1,indices[6]+2)+=ponderation*reg686; matrix(indices[3]+0,indices[0]+1)+=ponderation*reg972; matrix(indices[5]+0,indices[3]+1)+=ponderation*reg966;
    matrix(indices[3]+0,indices[0]+0)+=ponderation*reg908; matrix(indices[5]+0,indices[3]+2)+=-reg546; matrix(indices[2]+2,indices[7]+2)+=ponderation*reg483; matrix(indices[2]+2,indices[7]+1)+=ponderation*reg914; matrix(indices[5]+0,indices[4]+0)+=ponderation*reg534;
    matrix(indices[2]+2,indices[7]+0)+=ponderation*reg918; matrix(indices[5]+0,indices[4]+1)+=ponderation*reg913; matrix(indices[2]+2,indices[6]+2)+=ponderation*reg486; matrix(indices[5]+0,indices[4]+2)+=ponderation*reg917; matrix(indices[2]+2,indices[6]+1)+=ponderation*reg906;
    matrix(indices[5]+0,indices[5]+0)+=ponderation*reg907; matrix(indices[2]+2,indices[6]+0)+=ponderation*reg903; matrix(indices[2]+2,indices[5]+2)+=ponderation*reg460; matrix(indices[5]+0,indices[5]+1)+=-reg540; matrix(indices[2]+2,indices[5]+1)+=ponderation*reg937;
    matrix(indices[5]+0,indices[5]+2)+=ponderation*reg437; matrix(indices[2]+2,indices[5]+0)+=ponderation*reg939; matrix(indices[5]+0,indices[6]+0)+=ponderation*reg461; matrix(indices[2]+2,indices[4]+2)+=ponderation*reg467; matrix(indices[5]+0,indices[6]+1)+=ponderation*reg942;
    matrix(indices[2]+2,indices[4]+1)+=ponderation*reg944; matrix(indices[5]+0,indices[6]+2)+=ponderation*reg943; matrix(indices[2]+2,indices[4]+0)+=ponderation*reg920; matrix(indices[2]+2,indices[3]+2)+=ponderation*reg487; matrix(indices[5]+0,indices[7]+0)+=ponderation*reg515;
    matrix(indices[4]+0,indices[6]+1)+=ponderation*reg669; matrix(indices[3]+2,indices[5]+2)+=-reg472; matrix(indices[4]+0,indices[6]+2)+=ponderation*reg679; matrix(indices[3]+2,indices[5]+1)+=ponderation*reg929; matrix(indices[3]+2,indices[5]+0)+=-reg477;
    matrix(indices[4]+0,indices[7]+0)+=ponderation*reg257; matrix(indices[3]+2,indices[4]+2)+=ponderation*reg634; matrix(indices[4]+0,indices[7]+1)+=ponderation*reg919; matrix(indices[3]+2,indices[4]+1)+=ponderation*reg933; matrix(indices[4]+0,indices[7]+2)+=ponderation*reg935;
    matrix(indices[3]+2,indices[4]+0)+=-reg512; matrix(indices[4]+1,indices[0]+0)+=ponderation*reg905; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg296; matrix(indices[3]+2,indices[3]+1)+=-reg517; matrix(indices[4]+1,indices[0]+1)+=ponderation*reg582;
    matrix(indices[3]+2,indices[3]+0)+=ponderation*reg520; matrix(indices[4]+1,indices[0]+2)+=ponderation*reg909; matrix(indices[3]+2,indices[2]+2)+=ponderation*reg544; matrix(indices[4]+1,indices[1]+0)+=ponderation*reg969; matrix(indices[3]+2,indices[2]+1)+=ponderation*reg986;
    matrix(indices[4]+1,indices[1]+1)+=ponderation*reg578; matrix(indices[3]+2,indices[2]+0)+=-reg532; matrix(indices[4]+1,indices[1]+2)+=ponderation*reg980; matrix(indices[3]+2,indices[1]+2)+=ponderation*reg255; matrix(indices[4]+1,indices[2]+0)+=ponderation*reg344;
    matrix(indices[3]+2,indices[1]+1)+=ponderation*reg953; matrix(indices[4]+0,indices[2]+1)+=ponderation*reg734; matrix(indices[4]+0,indices[2]+0)+=ponderation*reg748; matrix(indices[4]+0,indices[2]+2)+=ponderation*reg747; matrix(indices[4]+0,indices[1]+2)+=ponderation*reg714;
    matrix(indices[4]+0,indices[1]+1)+=ponderation*reg720; matrix(indices[4]+0,indices[3]+0)+=ponderation*reg711; matrix(indices[4]+0,indices[1]+0)+=ponderation*reg733; matrix(indices[4]+0,indices[3]+1)+=ponderation*reg719; matrix(indices[4]+0,indices[0]+2)+=ponderation*reg391;
    matrix(indices[4]+0,indices[3]+2)+=-reg492; matrix(indices[4]+0,indices[0]+1)+=ponderation*reg794; matrix(indices[4]+0,indices[0]+0)+=ponderation*reg760; matrix(indices[4]+0,indices[4]+0)+=ponderation*reg758; matrix(indices[3]+2,indices[7]+2)+=ponderation*reg637;
    matrix(indices[4]+0,indices[4]+1)+=ponderation*reg767; matrix(indices[3]+2,indices[7]+1)+=ponderation*reg776; matrix(indices[4]+0,indices[4]+2)+=ponderation*reg773; matrix(indices[5]+1,indices[6]+0)+=ponderation*reg651; matrix(indices[4]+0,indices[5]+0)+=ponderation*reg200;
    matrix(indices[5]+1,indices[6]+1)+=ponderation*reg938; matrix(indices[4]+0,indices[5]+1)+=ponderation*reg654; matrix(indices[3]+2,indices[7]+0)+=-reg448; matrix(indices[4]+0,indices[5]+2)+=ponderation*reg691; matrix(indices[3]+2,indices[6]+2)+=ponderation*reg538;
    matrix(indices[3]+2,indices[6]+1)+=ponderation*reg703; matrix(indices[4]+0,indices[6]+0)+=ponderation*reg596; matrix(indices[3]+2,indices[6]+0)+=-reg457; matrix(indices[4]+1,indices[6]+2)+=ponderation*reg851; matrix(indices[3]+1,indices[4]+1)+=ponderation*reg962;
    matrix(indices[4]+1,indices[7]+0)+=ponderation*reg858; matrix(indices[3]+1,indices[4]+0)+=ponderation*reg865; matrix(indices[3]+1,indices[3]+2)+=-reg388; matrix(indices[4]+1,indices[7]+1)+=ponderation*reg613; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg329;
    matrix(indices[4]+1,indices[7]+2)+=ponderation*reg864; matrix(indices[3]+1,indices[3]+0)+=-reg393; matrix(indices[4]+2,indices[0]+0)+=ponderation*reg867; matrix(indices[3]+1,indices[2]+1)+=ponderation*reg978; matrix(indices[4]+2,indices[0]+1)+=ponderation*reg869;
    matrix(indices[6]+2,indices[5]+0)+=ponderation*reg871; matrix(indices[4]+2,indices[0]+2)+=ponderation*reg334; matrix(indices[6]+2,indices[4]+2)+=ponderation*reg449; matrix(indices[4]+2,indices[1]+0)+=ponderation*reg859; matrix(indices[6]+2,indices[4]+1)+=ponderation*reg855;
    matrix(indices[4]+2,indices[1]+1)+=ponderation*reg856; matrix(indices[6]+2,indices[5]+2)+=ponderation*reg339; matrix(indices[4]+2,indices[1]+2)+=ponderation*reg337; matrix(indices[3]+1,indices[2]+0)+=ponderation*reg892; matrix(indices[4]+2,indices[2]+0)+=ponderation*reg891;
    matrix(indices[3]+1,indices[1]+2)+=ponderation*reg897; matrix(indices[4]+2,indices[2]+1)+=ponderation*reg895; matrix(indices[3]+1,indices[1]+1)+=ponderation*reg307; matrix(indices[4]+2,indices[2]+2)+=ponderation*reg342; matrix(indices[3]+1,indices[1]+0)+=ponderation*reg872;
    matrix(indices[4]+1,indices[2]+1)+=ponderation*reg621; matrix(indices[3]+2,indices[1]+0)+=-reg502; matrix(indices[4]+1,indices[2]+2)+=ponderation*reg946; matrix(indices[3]+2,indices[0]+2)+=ponderation*reg250; matrix(indices[4]+1,indices[3]+0)+=ponderation*reg317;
    matrix(indices[3]+2,indices[0]+1)+=ponderation*reg839; matrix(indices[3]+2,indices[0]+0)+=-reg504; matrix(indices[4]+1,indices[3]+1)+=ponderation*reg206; matrix(indices[4]+1,indices[3]+2)+=ponderation*reg837; matrix(indices[3]+1,indices[7]+2)+=ponderation*reg848;
    matrix(indices[4]+1,indices[4]+0)+=ponderation*reg849; matrix(indices[3]+1,indices[7]+1)+=ponderation*reg805; matrix(indices[3]+1,indices[7]+0)+=ponderation*reg803; matrix(indices[4]+1,indices[4]+1)+=ponderation*reg598; matrix(indices[3]+1,indices[6]+2)+=ponderation*reg814;
    matrix(indices[4]+1,indices[4]+2)+=ponderation*reg840; matrix(indices[3]+1,indices[6]+1)+=ponderation*reg846; matrix(indices[4]+1,indices[5]+0)+=ponderation*reg812; matrix(indices[3]+1,indices[6]+0)+=ponderation*reg886; matrix(indices[4]+1,indices[5]+1)+=ponderation*reg535;
    matrix(indices[3]+1,indices[5]+2)+=ponderation*reg874; matrix(indices[4]+1,indices[5]+2)+=ponderation*reg881; matrix(indices[3]+1,indices[5]+1)+=-reg394; matrix(indices[4]+1,indices[6]+0)+=ponderation*reg625; matrix(indices[3]+1,indices[5]+0)+=ponderation*reg896;
    matrix(indices[4]+1,indices[6]+1)+=ponderation*reg647; matrix(indices[3]+1,indices[4]+2)+=ponderation*reg852; matrix(indices[1]+1,indices[6]+2)+=ponderation*reg220; matrix(indices[6]+1,indices[1]+0)+=ponderation*reg212; matrix(indices[3]+0,indices[7]+1)+=ponderation*reg1329;
    matrix(indices[6]+1,indices[1]+1)+=ponderation*reg409; matrix(indices[1]+1,indices[6]+0)+=ponderation*reg1325; matrix(indices[6]+1,indices[1]+2)+=ponderation*reg1326; matrix(indices[1]+1,indices[5]+2)+=ponderation*reg1317; matrix(indices[6]+1,indices[2]+0)+=ponderation*reg1320;
    matrix(indices[1]+1,indices[5]+1)+=ponderation*reg509; matrix(indices[1]+1,indices[5]+0)+=ponderation*reg219; matrix(indices[6]+1,indices[2]+1)+=ponderation*reg403; matrix(indices[1]+1,indices[4]+2)+=ponderation*reg1338; matrix(indices[6]+1,indices[2]+2)+=ponderation*reg251;
    matrix(indices[1]+1,indices[4]+1)+=ponderation*reg496; matrix(indices[6]+1,indices[3]+0)+=ponderation*reg1339; matrix(indices[1]+1,indices[4]+0)+=ponderation*reg1335; matrix(indices[6]+1,indices[3]+1)+=ponderation*reg498; matrix(indices[1]+1,indices[3]+2)+=ponderation*reg1331;
    matrix(indices[6]+1,indices[3]+2)+=ponderation*reg1336; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg522; matrix(indices[6]+1,indices[4]+0)+=ponderation*reg470; matrix(indices[1]+1,indices[3]+0)+=ponderation*reg167; matrix(indices[6]+1,indices[4]+1)+=ponderation*reg521;
    matrix(indices[1]+1,indices[2]+2)+=ponderation*reg1318; matrix(indices[6]+1,indices[4]+2)+=ponderation*reg238; matrix(indices[1]+1,indices[2]+1)+=ponderation*reg471; matrix(indices[6]+0,indices[4]+2)+=ponderation*reg1251; matrix(indices[1]+2,indices[3]+1)+=ponderation*reg1259;
    matrix(indices[6]+0,indices[5]+0)+=ponderation*reg1256; matrix(indices[1]+2,indices[3]+0)+=-reg360; matrix(indices[6]+0,indices[5]+1)+=ponderation*reg1262; matrix(indices[1]+2,indices[2]+2)+=ponderation*reg428; matrix(indices[6]+0,indices[5]+2)+=ponderation*reg1265;
    matrix(indices[1]+2,indices[2]+1)+=ponderation*reg1240; matrix(indices[1]+2,indices[2]+0)+=ponderation*reg1244; matrix(indices[6]+0,indices[6]+0)+=ponderation*reg1242; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg363; matrix(indices[6]+0,indices[6]+1)+=ponderation*reg1246;
    matrix(indices[3]+1,indices[2]+2)+=ponderation*reg589; matrix(indices[6]+0,indices[6]+2)+=ponderation*reg207; matrix(indices[1]+2,indices[1]+0)+=ponderation*reg208; matrix(indices[1]+2,indices[0]+2)+=ponderation*reg397; matrix(indices[6]+0,indices[7]+0)+=ponderation*reg438;
    matrix(indices[1]+2,indices[0]+1)+=ponderation*reg332; matrix(indices[6]+0,indices[7]+1)+=ponderation*reg201; matrix(indices[1]+2,indices[0]+0)+=ponderation*reg1348; matrix(indices[6]+0,indices[7]+2)+=ponderation*reg1353; matrix(indices[1]+1,indices[7]+2)+=ponderation*reg256;
    matrix(indices[6]+1,indices[0]+0)+=ponderation*reg209; matrix(indices[1]+1,indices[7]+1)+=ponderation*reg415; matrix(indices[6]+1,indices[0]+1)+=ponderation*reg384; matrix(indices[1]+1,indices[7]+0)+=ponderation*reg1356; matrix(indices[6]+1,indices[0]+2)+=ponderation*reg233;
    matrix(indices[6]+2,indices[2]+2)+=ponderation*reg366; matrix(indices[1]+0,indices[5]+1)+=ponderation*reg1101; matrix(indices[6]+2,indices[3]+0)+=-reg240; matrix(indices[1]+0,indices[5]+0)+=ponderation*reg290; matrix(indices[6]+2,indices[3]+1)+=ponderation*reg1073;
    matrix(indices[1]+0,indices[4]+2)+=ponderation*reg1078; matrix(indices[6]+2,indices[3]+2)+=ponderation*reg390; matrix(indices[1]+0,indices[4]+1)+=ponderation*reg1083; matrix(indices[6]+2,indices[4]+0)+=ponderation*reg1080; matrix(indices[6]+2,indices[5]+1)+=ponderation*reg870;
    matrix(indices[1]+0,indices[4]+0)+=ponderation*reg283; matrix(indices[6]+2,indices[6]+0)+=ponderation*reg1086; matrix(indices[1]+0,indices[3]+2)+=-reg351; matrix(indices[6]+2,indices[6]+1)+=ponderation*reg1004; matrix(indices[1]+0,indices[3]+1)+=ponderation*reg1008;
    matrix(indices[6]+2,indices[6]+2)+=ponderation*reg292; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg1013; matrix(indices[6]+2,indices[7]+0)+=ponderation*reg1010; matrix(indices[1]+0,indices[2]+2)+=ponderation*reg988; matrix(indices[6]+2,indices[7]+1)+=ponderation*reg1016;
    matrix(indices[1]+0,indices[2]+1)+=ponderation*reg991; matrix(indices[6]+2,indices[7]+2)+=ponderation*reg305; matrix(indices[1]+0,indices[2]+0)+=ponderation*reg995; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg998; matrix(indices[1]+0,indices[1]+1)+=ponderation*reg1030;
    matrix(indices[7]+0,indices[0]+0)+=ponderation*reg997; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg1036; matrix(indices[6]+1,indices[5]+0)+=ponderation*reg1322; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg1357; matrix(indices[1]+1,indices[1]+2)+=ponderation*reg259;
    matrix(indices[6]+1,indices[5]+1)+=ponderation*reg468; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg466; matrix(indices[6]+1,indices[5]+2)+=ponderation*reg254; matrix(indices[1]+1,indices[1]+0)+=ponderation*reg1062; matrix(indices[6]+1,indices[6]+0)+=ponderation*reg190;
    matrix(indices[1]+1,indices[0]+2)+=ponderation*reg1064; matrix(indices[6]+1,indices[6]+1)+=ponderation*reg463; matrix(indices[1]+1,indices[0]+1)+=ponderation*reg456; matrix(indices[6]+1,indices[6]+2)+=ponderation*reg1066; matrix(indices[1]+1,indices[0]+0)+=ponderation*reg1070;
    matrix(indices[6]+1,indices[7]+0)+=ponderation*reg1069; matrix(indices[1]+0,indices[7]+2)+=ponderation*reg1047; matrix(indices[6]+1,indices[7]+1)+=ponderation*reg491; matrix(indices[1]+0,indices[7]+1)+=ponderation*reg1053; matrix(indices[6]+1,indices[7]+2)+=ponderation*reg1049;
    matrix(indices[1]+0,indices[7]+0)+=ponderation*reg1058; matrix(indices[1]+0,indices[6]+2)+=ponderation*reg1061; matrix(indices[6]+2,indices[0]+0)+=ponderation*reg1057; matrix(indices[1]+0,indices[6]+1)+=ponderation*reg1090; matrix(indices[6]+2,indices[0]+1)+=ponderation*reg1060;
    matrix(indices[1]+0,indices[6]+0)+=ponderation*reg1095; matrix(indices[6]+2,indices[0]+2)+=ponderation*reg474; matrix(indices[6]+2,indices[2]+0)+=ponderation*reg823; matrix(indices[1]+0,indices[5]+2)+=ponderation*reg1097; matrix(indices[2]+1,indices[1]+2)+=ponderation*reg790;
    matrix(indices[5]+2,indices[0]+1)+=ponderation*reg791; matrix(indices[2]+1,indices[1]+1)+=ponderation*reg392; matrix(indices[5]+2,indices[0]+2)+=ponderation*reg359; matrix(indices[2]+1,indices[1]+0)+=ponderation*reg785; matrix(indices[5]+2,indices[1]+0)+=ponderation*reg786;
    matrix(indices[2]+1,indices[0]+2)+=ponderation*reg781; matrix(indices[5]+2,indices[1]+1)+=ponderation*reg782; matrix(indices[2]+1,indices[0]+1)+=ponderation*reg386; matrix(indices[5]+2,indices[1]+2)+=ponderation*reg306; matrix(indices[2]+1,indices[0]+0)+=ponderation*reg730;
    matrix(indices[5]+2,indices[2]+0)+=ponderation*reg731; matrix(indices[2]+0,indices[7]+2)+=ponderation*reg724; matrix(indices[5]+2,indices[2]+1)+=ponderation*reg726; matrix(indices[2]+0,indices[7]+1)+=ponderation*reg722; matrix(indices[5]+2,indices[2]+2)+=ponderation*reg285;
    matrix(indices[2]+0,indices[7]+0)+=ponderation*reg716; matrix(indices[5]+2,indices[3]+0)+=-reg280; matrix(indices[2]+0,indices[6]+2)+=ponderation*reg710; matrix(indices[5]+2,indices[3]+1)+=ponderation*reg713; matrix(indices[2]+0,indices[6]+1)+=ponderation*reg708;
    matrix(indices[2]+0,indices[6]+0)+=ponderation*reg753; matrix(indices[5]+2,indices[3]+2)+=-reg350; matrix(indices[2]+0,indices[5]+2)+=ponderation*reg750; matrix(indices[5]+2,indices[4]+0)+=ponderation*reg754; matrix(indices[2]+0,indices[5]+1)+=ponderation*reg746;
    matrix(indices[5]+1,indices[3]+1)+=-reg545; matrix(indices[2]+1,indices[6]+1)+=ponderation*reg395; matrix(indices[5]+1,indices[3]+2)+=ponderation*reg687; matrix(indices[2]+1,indices[6]+0)+=ponderation*reg663; matrix(indices[5]+1,indices[4]+0)+=ponderation*reg658;
    matrix(indices[2]+1,indices[5]+2)+=ponderation*reg661; matrix(indices[5]+1,indices[4]+1)+=ponderation*reg398; matrix(indices[2]+1,indices[5]+1)+=ponderation*reg657; matrix(indices[5]+1,indices[4]+2)+=ponderation*reg660; matrix(indices[2]+1,indices[5]+0)+=ponderation*reg777;
    matrix(indices[2]+1,indices[4]+2)+=ponderation*reg775; matrix(indices[5]+1,indices[5]+0)+=-reg541; matrix(indices[2]+1,indices[4]+1)+=ponderation*reg425; matrix(indices[5]+1,indices[5]+1)+=ponderation*reg419; matrix(indices[2]+1,indices[4]+0)+=ponderation*reg769;
    matrix(indices[5]+1,indices[5]+2)+=-reg542; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg764; matrix(indices[5]+1,indices[6]+2)+=ponderation*reg766; matrix(indices[2]+1,indices[3]+1)+=ponderation*reg435; matrix(indices[5]+1,indices[7]+0)+=ponderation*reg761;
    matrix(indices[2]+1,indices[3]+0)+=ponderation*reg757; matrix(indices[2]+1,indices[2]+2)+=ponderation*reg799; matrix(indices[5]+1,indices[7]+1)+=ponderation*reg418; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg453; matrix(indices[5]+1,indices[7]+2)+=ponderation*reg801;
    matrix(indices[2]+1,indices[2]+0)+=ponderation*reg793; matrix(indices[5]+2,indices[0]+0)+=ponderation*reg795; matrix(indices[6]+0,indices[0]+2)+=ponderation*reg1307; matrix(indices[2]+0,indices[0]+1)+=ponderation*reg211; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg399;
    matrix(indices[6]+0,indices[1]+0)+=ponderation*reg1312; matrix(indices[1]+2,indices[7]+2)+=ponderation*reg401; matrix(indices[6]+0,indices[1]+1)+=ponderation*reg1293; matrix(indices[1]+2,indices[7]+1)+=ponderation*reg381; matrix(indices[6]+0,indices[1]+2)+=ponderation*reg214;
    matrix(indices[1]+2,indices[7]+0)+=ponderation*reg1300; matrix(indices[6]+0,indices[2]+0)+=ponderation*reg1298; matrix(indices[1]+2,indices[6]+2)+=ponderation*reg387; matrix(indices[6]+0,indices[2]+1)+=ponderation*reg189; matrix(indices[1]+2,indices[6]+1)+=ponderation*reg1228;
    matrix(indices[6]+0,indices[2]+2)+=ponderation*reg1227; matrix(indices[1]+2,indices[6]+0)+=ponderation*reg1231; matrix(indices[1]+2,indices[5]+2)+=ponderation*reg439; matrix(indices[6]+0,indices[3]+0)+=ponderation*reg1249; matrix(indices[1]+2,indices[5]+1)+=ponderation*reg1213;
    matrix(indices[6]+0,indices[3]+1)+=ponderation*reg1235; matrix(indices[1]+2,indices[5]+0)+=ponderation*reg580; matrix(indices[6]+0,indices[3]+2)+=-reg383; matrix(indices[1]+2,indices[4]+2)+=ponderation*reg454; matrix(indices[1]+2,indices[4]+1)+=ponderation*reg1220;
    matrix(indices[6]+0,indices[4]+0)+=ponderation*reg1216; matrix(indices[1]+2,indices[4]+0)+=ponderation*reg1252; matrix(indices[6]+0,indices[4]+1)+=ponderation*reg1219; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg301; matrix(indices[5]+2,indices[4]+1)+=ponderation*reg751;
    matrix(indices[2]+0,indices[5]+0)+=ponderation*reg742; matrix(indices[5]+2,indices[4]+2)+=ponderation*reg478; matrix(indices[2]+0,indices[4]+2)+=ponderation*reg740; matrix(indices[5]+2,indices[5]+0)+=ponderation*reg743; matrix(indices[2]+0,indices[4]+1)+=ponderation*reg738;
    matrix(indices[5]+2,indices[5]+1)+=-reg273; matrix(indices[2]+0,indices[4]+0)+=ponderation*reg735; matrix(indices[5]+2,indices[5]+2)+=ponderation*reg480; matrix(indices[2]+0,indices[3]+2)+=-reg278; matrix(indices[5]+2,indices[6]+0)+=ponderation*reg385;
    matrix(indices[2]+0,indices[3]+1)+=ponderation*reg1285; matrix(indices[5]+2,indices[6]+1)+=ponderation*reg202; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg1287; matrix(indices[5]+2,indices[6]+2)+=ponderation*reg462; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg1290;
    matrix(indices[5]+2,indices[7]+0)+=ponderation*reg1288; matrix(indices[2]+0,indices[2]+1)+=ponderation*reg1269; matrix(indices[5]+2,indices[7]+1)+=ponderation*reg1268; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg1273; matrix(indices[5]+2,indices[7]+2)+=ponderation*reg516;
    matrix(indices[2]+0,indices[1]+2)+=ponderation*reg1276; matrix(indices[2]+0,indices[1]+1)+=ponderation*reg1280; matrix(indices[6]+0,indices[0]+0)+=ponderation*reg1278; matrix(indices[2]+0,indices[1]+0)+=ponderation*reg1305; matrix(indices[6]+0,indices[0]+1)+=ponderation*reg1303;
    matrix(indices[2]+0,indices[0]+2)+=ponderation*reg1309;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[1]; T reg1=1-var_inter[2]; T reg2=1-var_inter[0]; T reg3=reg1*var_inter[0]; T reg4=reg0*var_inter[0];
    T reg5=reg1*reg2; T reg6=reg0*reg2; T reg7=reg1*reg0; T reg8=reg4*elem.pos(1)[2]; T reg9=reg6*elem.pos(0)[2];
    T reg10=elem.pos(0)[1]*reg7; T reg11=reg1*var_inter[1]; T reg12=elem.pos(1)[2]*reg3; T reg13=elem.pos(0)[2]*reg5; T reg14=elem.pos(1)[1]*reg7;
    T reg15=reg4*elem.pos(1)[1]; T reg16=reg6*elem.pos(0)[1]; T reg17=var_inter[0]*var_inter[1]; T reg18=elem.pos(0)[2]*reg7; T reg19=elem.pos(1)[2]*reg7;
    T reg20=elem.pos(0)[1]*reg5; T reg21=elem.pos(1)[1]*reg3; T reg22=elem.pos(2)[2]*reg3; T reg23=reg12+reg13; reg14=reg14-reg10;
    T reg24=elem.pos(2)[2]*reg11; T reg25=reg2*var_inter[1]; reg19=reg19-reg18; T reg26=elem.pos(2)[1]*reg11; T reg27=reg20+reg21;
    T reg28=elem.pos(2)[1]*reg3; T reg29=reg8+reg9; T reg30=reg17*elem.pos(2)[2]; T reg31=reg17*elem.pos(2)[1]; T reg32=reg16+reg15;
    T reg33=elem.pos(3)[1]*reg11; T reg34=reg0*var_inter[2]; T reg35=elem.pos(0)[0]*reg5; T reg36=reg32+reg31; T reg37=elem.pos(1)[0]*reg3;
    reg26=reg14+reg26; reg14=reg25*elem.pos(3)[1]; T reg38=elem.pos(3)[2]*reg11; T reg39=elem.pos(3)[2]*reg5; reg22=reg22-reg23;
    T reg40=elem.pos(1)[0]*reg7; reg24=reg19+reg24; reg19=reg2*var_inter[2]; reg28=reg28-reg27; T reg41=elem.pos(3)[1]*reg5;
    T reg42=elem.pos(0)[0]*reg7; T reg43=reg29+reg30; T reg44=reg25*elem.pos(3)[2]; reg40=reg40-reg42; reg41=reg28+reg41;
    reg28=reg4*elem.pos(1)[0]; T reg45=reg6*elem.pos(0)[0]; T reg46=elem.pos(4)[1]*reg19; T reg47=elem.pos(2)[0]*reg11; T reg48=elem.pos(4)[2]*reg19;
    reg39=reg22+reg39; reg24=reg24-reg38; reg22=var_inter[0]*var_inter[2]; T reg49=elem.pos(4)[2]*reg34; T reg50=reg6*elem.pos(4)[2];
    T reg51=reg43+reg44; T reg52=elem.pos(4)[1]*reg34; T reg53=elem.pos(2)[0]*reg3; reg26=reg26-reg33; T reg54=reg35+reg37;
    T reg55=reg36+reg14; T reg56=reg6*elem.pos(4)[1]; reg24=reg24-reg49; T reg57=reg4*elem.pos(5)[2]; reg50=reg50-reg51;
    T reg58=elem.pos(5)[2]*reg34; T reg59=reg17*elem.pos(2)[0]; T reg60=reg45+reg28; T reg61=elem.pos(5)[1]*reg34; reg41=reg41-reg46;
    T reg62=elem.pos(5)[1]*reg22; reg56=reg56-reg55; T reg63=reg4*elem.pos(5)[1]; reg47=reg40+reg47; reg40=elem.pos(3)[0]*reg11;
    reg26=reg26-reg52; T reg64=elem.pos(3)[0]*reg5; reg53=reg53-reg54; T reg65=var_inter[1]*var_inter[2]; reg39=reg39-reg48;
    T reg66=elem.pos(5)[2]*reg22; reg47=reg47-reg40; reg61=reg26+reg61; reg58=reg24+reg58; reg24=elem.pos(6)[2]*reg65;
    reg26=elem.pos(6)[1]*reg65; T reg67=elem.pos(4)[0]*reg34; T reg68=elem.pos(4)[0]*reg19; reg64=reg53+reg64; reg53=reg17*elem.pos(6)[2];
    reg57=reg50+reg57; reg50=reg17*elem.pos(6)[1]; reg63=reg56+reg63; reg56=reg25*elem.pos(3)[0]; T reg69=reg60+reg59;
    reg41=reg41-reg62; T reg70=elem.pos(6)[1]*reg22; T reg71=elem.pos(6)[2]*reg22; reg39=reg39-reg66; T reg72=elem.pos(5)[0]*reg22;
    reg64=reg64-reg68; T reg73=reg25*elem.pos(7)[2]; reg53=reg57+reg53; reg70=reg41+reg70; reg41=elem.pos(7)[1]*reg65;
    reg26=reg61+reg26; reg57=elem.pos(7)[1]*reg19; reg61=elem.pos(7)[2]*reg65; T reg74=reg25*elem.pos(7)[1]; reg50=reg63+reg50;
    reg47=reg47-reg67; reg63=elem.pos(5)[0]*reg34; T reg75=reg6*elem.pos(4)[0]; T reg76=reg69+reg56; reg24=reg58+reg24;
    reg71=reg39+reg71; reg39=elem.pos(7)[2]*reg19; reg24=reg24-reg61; reg64=reg64-reg72; reg73=reg53+reg73;
    reg74=reg50+reg74; reg50=reg4*elem.pos(5)[0]; reg75=reg75-reg76; reg39=reg71+reg39; reg57=reg70+reg57;
    reg63=reg47+reg63; reg47=elem.pos(6)[0]*reg65; reg53=1+(*f.m).poisson_ratio; reg58=elem.pos(6)[0]*reg22; reg26=reg26-reg41;
    reg70=reg24*reg74; reg71=reg39*reg74; reg53=reg53/(*f.m).elastic_modulus; T reg77=reg26*reg73; T reg78=reg57*reg73;
    T reg79=reg17*elem.pos(6)[0]; reg50=reg75+reg50; reg75=elem.pos(7)[0]*reg19; reg58=reg64+reg58; reg64=elem.pos(7)[0]*reg65;
    reg47=reg63+reg47; reg63=var_inter[0]-0.21132486540518707896; T reg80=reg2-0.21132486540518707896; T reg81=var_inter[1]-0.21132486540518707896; reg79=reg50+reg79;
    reg50=reg25*elem.pos(7)[0]; T reg82=pow(reg53,2); T reg83=reg0-0.21132486540518707896; reg80=reg80/0.57735026918962573106; T reg84=reg24*reg57;
    T reg85=var_inter[2]-0.21132486540518707896; reg81=reg81/0.57735026918962573106; reg63=reg63/0.57735026918962573106; T reg86=reg26*reg39; reg70=reg77-reg70;
    reg71=reg78-reg71; reg75=reg58+reg75; reg47=reg47-reg64; reg81=1-reg81; reg85=reg85/0.57735026918962573106;
    reg63=1-reg63; reg84=reg86-reg84; reg80=1-reg80; reg58=reg75*reg70; reg83=reg83/0.57735026918962573106;
    reg50=reg79+reg50; reg77=reg47*reg71; reg53=reg53*reg82; reg78=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg79=1.0/(*f.m).elastic_modulus;
    reg86=reg81*reg80; T reg87=reg79*reg53; reg53=reg78*reg53; reg83=1-reg83; T reg88=reg47*reg73;
    T reg89=reg50*reg84; reg85=1-reg85; T reg90=reg78*reg82; reg81=reg63*reg81; T reg91=reg24*reg50;
    reg82=reg79*reg82; reg58=reg77-reg58; reg73=reg75*reg73; reg77=reg39*reg50; T reg92=reg79*reg82;
    T reg93=reg78*reg90; T reg94=reg78*reg87; reg82=reg78*reg82; T reg95=reg81*reg85; T reg96=reg78*reg53;
    reg89=reg58+reg89; reg77=reg73-reg77; reg58=reg75*reg74; reg73=reg85*reg86; reg87=reg79*reg87;
    reg80=reg80*reg83; T reg97=reg57*reg50; T reg98=reg1-0.21132486540518707896; reg24=reg24*reg75; reg39=reg47*reg39;
    reg74=reg47*reg74; reg91=reg88-reg91; reg50=reg26*reg50; reg57=reg47*reg57; reg82=reg93+reg82;
    reg50=reg74-reg50; reg92=reg92-reg93; reg24=reg39-reg24; reg90=reg79*reg90; reg91=reg91/reg89;
    reg70=reg70/reg89; reg53=reg79*reg53; reg94=reg96+reg94; reg87=reg87-reg96; reg97=reg58-reg97;
    reg75=reg26*reg75; reg26=reg95*elem.proute[0](1,1); reg98=reg98/0.57735026918962573106; reg39=reg73*elem.proute[1](1,1); reg83=reg63*reg83;
    reg47=reg85*reg80; reg77=reg77/reg89; reg71=reg71/reg89; reg58=reg93+reg90; reg63=reg22*reg91;
    reg74=reg79*reg87; reg88=reg47*elem.proute[2](1,1); reg39=reg26+reg39; reg53=reg96+reg53; reg26=reg78*reg94;
    reg82=reg78*reg82; reg92=reg79*reg92; reg79=reg71*reg34; reg75=reg57-reg75; reg24=reg24/reg89;
    reg84=reg84/reg89; reg50=reg50/reg89; reg57=reg22*reg70; reg97=reg97/reg89; reg96=reg77*reg34;
    reg85=reg85*reg83; reg98=1-reg98; T reg99=reg96+reg63; T reg100=reg65*reg97; T reg101=reg78*reg53;
    reg26=reg74-reg26; reg58=reg78*reg58; reg74=reg22*reg50; reg78=reg34*reg97; T reg102=reg77*reg11;
    T reg103=reg19*reg50; reg82=reg92-reg82; reg92=reg11*reg97; T reg104=reg5*reg91; T reg105=reg7*reg77;
    T reg106=reg19*reg70; T reg107=reg77*reg65; T reg108=reg5*reg70; T reg109=reg7*reg71; T reg110=reg3*reg91;
    T reg111=reg79+reg57; reg75=reg75/reg89; T reg112=reg81*reg98; T reg113=reg4*reg84; T reg114=reg3*reg70;
    T reg115=reg71*reg11; T reg116=reg19*reg91; T reg117=reg4*reg24; reg88=reg39+reg88; reg39=reg85*elem.proute[3](1,1);
    T reg118=reg71*reg65; T reg119=reg5*reg50; T reg120=reg6*reg75; T reg121=reg7*reg97; reg111=reg113+reg111;
    T reg122=reg63-reg107; T reg123=reg118-reg57; T reg124=reg3*reg50; T reg125=reg4*reg75; T reg126=reg100-reg74;
    T reg127=reg105+reg110; T reg128=reg109+reg114; T reg129=reg78+reg74; T reg130=reg115-reg114; T reg131=reg17*reg84;
    T reg132=reg106+reg118; T reg133=reg116+reg107; T reg134=reg110-reg102; T reg135=reg17*reg24; T reg136=reg103+reg100;
    T reg137=reg117+reg99; T reg138=reg17*reg75; T reg139=reg112*elem.proute[4](1,1); reg39=reg88+reg39; reg88=reg25*reg75;
    reg101=reg26-reg101; reg26=reg119+reg92; T reg140=reg86*reg98; T reg141=reg106-reg79; T reg142=reg25*reg24;
    T reg143=reg104+reg102; reg58=reg82-reg58; reg82=reg6*reg24; T reg144=reg25*reg84; T reg145=reg105-reg104;
    T reg146=reg6*reg84; T reg147=reg96-reg116; T reg148=reg103-reg78; T reg149=reg108+reg115; T reg150=reg108-reg109;
    T reg151=reg117-reg127; reg123=reg131+reg123; T reg152=reg80*reg98; T reg153=0.5*reg111; reg128=reg128-reg113;
    reg141=reg146+reg141; reg143=reg143+reg142; T reg154=reg149+reg144; T reg155=reg121+reg124; reg129=reg125+reg129;
    reg147=reg147-reg82; reg126=reg138+reg126; reg122=reg122-reg135; reg145=reg145+reg82; reg150=reg150-reg146;
    T reg156=reg119-reg121; reg148=reg120+reg148; T reg157=reg92-reg124; reg58=reg58/reg101; T reg158=0.5*reg137;
    T reg159=reg88-reg136; reg139=reg39+reg139; reg39=reg144-reg132; reg130=reg130-reg131; reg133=reg133-reg142;
    T reg160=reg140*elem.proute[5](1,1); T reg161=reg88+reg26; reg134=reg134+reg135; T reg162=reg58*reg153; T reg163=reg58*reg158;
    T reg164=0.5*reg154; T reg165=0.5*reg143; T reg166=0.5*reg134; reg157=reg157-reg138; T reg167=0.5*reg147;
    T reg168=0.5*reg148; T reg169=0.5*reg130; T reg170=0.5*reg128; T reg171=0.5*reg161; T reg172=0.5*reg141;
    T reg173=0.5*reg129; T reg174=0.5*reg39; T reg175=0.5*reg159; T reg176=0.5*reg150; reg156=reg156-reg120;
    T reg177=0.5*reg133; T reg178=0.5*reg145; reg87=reg87/reg101; T reg179=0.5*reg123; reg98=reg83*reg98;
    T reg180=0.5*reg126; T reg181=0.5*reg151; T reg182=0.5*reg122; reg160=reg139+reg160; reg155=reg155-reg125;
    reg139=reg152*elem.proute[6](1,1); T reg183=reg58*reg178; T reg184=0.5*reg157; T reg185=reg87*reg111; T reg186=reg87*reg129;
    T reg187=reg58*reg164; T reg188=0.5*reg156; T reg189=reg58*reg172; T reg190=reg98*elem.proute[7](1,1); T reg191=reg58*reg171;
    T reg192=reg58*reg169; reg139=reg160+reg139; reg160=reg58*reg168; reg53=reg53/reg101; T reg193=reg58*reg167;
    reg101=reg94/reg101; reg94=reg87*reg137; T reg194=reg58*reg165; T reg195=reg58*reg182; T reg196=reg58*reg174;
    T reg197=reg58*reg179; T reg198=reg58*reg173; reg162=2*reg162; T reg199=reg58*reg175; T reg200=reg58*reg166;
    T reg201=reg58*reg180; T reg202=reg58*reg181; T reg203=reg58*reg170; T reg204=0.5*reg155; T reg205=reg58*reg177;
    T reg206=reg58*reg176; T reg207=2*reg163; reg198=2*reg198; T reg208=reg101*reg39; T reg209=reg87*reg122;
    T reg210=reg101*reg123; T reg211=reg101*reg111; T reg212=reg87*reg134; T reg213=reg87*reg133; T reg214=reg87*reg141;
    T reg215=reg101*reg137; reg195=2*reg195; T reg216=reg87*reg123; T reg217=reg87*reg156; T reg218=reg87*reg151;
    T reg219=reg53*reg161; T reg220=2*reg187; T reg221=reg87*reg155; reg196=2*reg196; T reg222=reg87*reg159;
    reg199=2*reg199; T reg223=reg53*reg159; T reg224=reg87*reg126; T reg225=reg87*reg145; reg205=2*reg205;
    T reg226=reg53*reg148; reg189=2*reg189; T reg227=reg87*reg39; reg160=2*reg160; T reg228=reg53*reg126;
    T reg229=reg87*reg148; T reg230=reg87*reg161; T reg231=reg87*reg157; reg197=2*reg197; reg193=2*reg193;
    reg201=2*reg201; T reg232=reg101*reg154; T reg233=reg87*reg143; T reg234=reg101*reg141; T reg235=reg87*reg147;
    reg194=2*reg194; T reg236=reg87*reg154; T reg237=reg53*reg129; reg203=2*reg203; reg190=reg139+reg190;
    reg206=2*reg206; reg192=2*reg192; reg139=reg143*reg94; T reg238=reg164*reg162; T reg239=reg58*reg188;
    T reg240=reg87*reg130; T reg241=reg87*reg150; T reg242=reg58*reg184; reg183=2*reg183; reg200=2*reg200;
    reg202=2*reg202; T reg243=reg161*reg186; T reg244=reg87*reg128; T reg245=reg58*reg204; T reg246=reg165*reg207;
    T reg247=reg154*reg185; T reg248=reg101*reg143; T reg249=2*reg191; T reg250=reg137*reg209; T reg251=reg153*reg197;
    T reg252=reg171*reg197; T reg253=reg237*reg137; T reg254=reg181*reg194; T reg255=reg128*reg236; T reg256=reg181*reg200;
    T reg257=reg128*reg240; T reg258=reg129*reg224; T reg259=reg181*reg202; T reg260=reg181*reg205; T reg261=reg139+reg238;
    T reg262=reg164*reg199; T reg263=reg154*reg228; T reg264=reg156*reg222; T reg265=reg141*reg214; T reg266=reg128*reg244;
    T reg267=reg181*reg207; T reg268=reg128*reg185; T reg269=reg137*reg213; T reg270=reg181*reg193; T reg271=reg128*reg214;
    T reg272=reg165*reg205; T reg273=reg154*reg227; T reg274=reg153*reg196; T reg275=reg161*reg222; T reg276=reg143*reg233;
    T reg277=reg128*reg216; T reg278=reg129*reg186; T reg279=reg164*reg220; T reg280=reg181*reg195; T reg281=reg143*reg219;
    T reg282=reg128*reg227; T reg283=reg194*reg171; T reg284=reg143*reg235; T reg285=reg204*reg220; T reg286=reg128*reg219;
    T reg287=reg164*reg189; T reg288=reg122*reg209; T reg289=reg179*reg197; T reg290=reg156*reg217; T reg291=reg176*reg196;
    T reg292=reg145*reg213; T reg293=reg164*reg201; T reg294=reg176*reg197; T reg295=reg145*reg209; T reg296=reg161*reg210;
    T reg297=reg122*reg213; T reg298=reg179*reg196; T reg299=reg161*reg230; T reg300=reg176*reg162; T reg301=reg145*reg94;
    T reg302=reg161*reg234; T reg303=reg164*reg160; reg243=reg238+reg243; reg238=reg126*reg224; T reg304=reg176*reg189;
    T reg305=reg145*reg235; T reg306=reg161*reg229; T reg307=reg176*reg220; T reg308=reg145*reg233; T reg309=reg161*reg211;
    T reg310=reg164*reg198; T reg311=reg53*reg133; T reg312=reg161*reg208; T reg313=reg129*reg222; T reg314=reg156*reg224;
    T reg315=reg53*reg122; T reg316=reg123*reg216; T reg317=reg156*reg186; T reg318=reg143*reg209; T reg319=reg182*reg195;
    T reg320=reg53*reg137; T reg321=reg164*reg197; T reg322=reg155*reg221; T reg323=reg156*reg229; T reg324=reg161*reg224;
    T reg325=reg53*reg147; T reg326=reg156*reg230; T reg327=reg143*reg213; T reg328=reg123*reg227; T reg329=reg53*reg143;
    T reg330=reg182*reg205; T reg331=reg176*reg249; T reg332=reg156*reg232; T reg333=reg156*reg231; T reg334=reg164*reg196;
    T reg335=reg53*reg134; T reg336=reg53*reg151; T reg337=reg169*reg162; T reg338=reg134*reg209; T reg339=reg169*reg197;
    T reg340=reg172*reg189; T reg341=reg147*reg235; T reg342=reg134*reg213; T reg343=reg130*reg236; T reg344=reg148*reg186;
    T reg345=reg166*reg200; T reg346=reg130*reg240; T reg347=reg155*reg222; T reg348=reg155*reg224; T reg349=reg169*reg196;
    T reg350=reg157*reg231; T reg351=reg148*reg224; T reg352=reg155*reg186; T reg353=reg155*reg229; T reg354=reg148*reg222;
    T reg355=reg157*reg232; T reg356=reg155*reg230; T reg357=reg111*reg185; T reg358=reg170*reg249; T reg359=reg155*reg232;
    T reg360=reg158*reg207; T reg361=reg169*reg249; T reg362=reg166*reg205; T reg363=reg172*reg197; T reg364=reg130*reg227;
    T reg365=reg166*reg195; T reg366=reg130*reg216; T reg367=reg147*reg213; T reg368=reg134*reg212; T reg369=reg172*reg196;
    T reg370=reg166*reg207; T reg371=reg130*reg185; T reg372=reg148*reg229; T reg373=reg166*reg193; T reg374=reg130*reg214;
    T reg375=reg169*reg192; T reg376=reg147*reg209; T reg377=reg134*reg233; T reg378=reg169*reg220; T reg379=reg184*reg220;
    T reg380=reg134*reg235; T reg381=reg169*reg189; T reg382=reg172*reg162; T reg383=reg147*reg94; T reg384=reg130*reg219;
    T reg385=reg166*reg194; T reg386=reg134*reg94; T reg387=reg170*reg162; T reg388=reg151*reg94; T reg389=reg111*reg227;
    T reg390=reg158*reg205; T reg391=reg170*reg189; T reg392=reg151*reg235; T reg393=reg170*reg220; T reg394=reg151*reg233;
    T reg395=reg165*reg193; T reg396=reg154*reg214; T reg397=reg154*reg226; T reg398=reg170*reg192; T reg399=reg171*reg189;
    reg247=reg246+reg247; T reg400=reg171*reg198; T reg401=reg151*reg212; T reg402=reg153*reg162; T reg403=reg171*reg162;
    T reg404=reg167*reg193; T reg405=reg165*reg195; T reg406=reg154*reg216; T reg407=reg137*reg94; T reg408=reg170*reg203;
    T reg409=reg151*reg218; T reg410=reg207*reg173; T reg411=reg157*reg230; T reg412=reg167*reg205; T reg413=reg141*reg227;
    T reg414=reg155*reg231; T reg415=reg157*reg229; T reg416=reg157*reg186; T reg417=reg167*reg195; T reg418=reg141*reg216;
    T reg419=reg111*reg215; T reg420=reg158*reg162; T reg421=reg157*reg224; T reg422=reg157*reg222; T reg423=reg237*reg154;
    T reg424=reg165*reg194; T reg425=reg154*reg236; T reg426=reg170*reg196; T reg427=reg151*reg213; T reg428=reg111*reg216;
    T reg429=reg158*reg195; T reg430=reg165*reg220; T reg431=reg171*reg196; T reg432=reg154*reg248; T reg433=reg167*reg207;
    T reg434=reg141*reg185; T reg435=reg154*reg223; T reg436=reg151*reg209; T reg437=reg176*reg192; T reg438=reg176*reg206;
    T reg439=reg178*reg207; T reg440=reg145*reg212; T reg441=reg150*reg216; T reg442=reg190+(*f.m).f_vol[2]; T reg443=reg178*reg195;
    T reg444=reg150*reg227; T reg445=reg178*reg193; T reg446=reg177*reg205; T reg447=reg188*reg220; T reg448=reg150*reg241;
    T reg449=reg178*reg205; T reg450=reg178*reg183; T reg451=reg145*reg218; reg213=reg133*reg213; T reg452=reg53*reg157;
    reg239=2*reg239; T reg453=reg101*reg122; T reg454=reg101*reg151; T reg455=reg101*reg133; T reg456=reg176*reg203;
    T reg457=reg150*reg219; reg242=2*reg242; T reg458=reg145*reg225; T reg459=reg101*reg145; reg245=2*reg245;
    T reg460=reg101*reg130; T reg461=reg174*reg196; T reg462=reg159*reg222; T reg463=reg178*reg194; T reg464=reg6*reg1;
    T reg465=reg150*reg244; T reg466=reg101*reg147; T reg467=reg1*reg4; T reg468=reg1*reg17; reg227=reg39*reg227;
    T reg469=reg150*reg240; reg1=reg1*reg25; T reg470=reg170*reg197; T reg471=reg178*reg202; T reg472=reg101*reg128;
    T reg473=reg6*var_inter[2]; T reg474=reg4*var_inter[2]; T reg475=reg156*reg221; T reg476=reg150*reg214; T reg477=reg53*reg156;
    T reg478=reg190+(*f.m).f_vol[1]; reg190=(*f.m).f_vol[0]+reg190; T reg479=reg53*reg155; T reg480=reg150*reg185; reg222=reg126*reg222;
    T reg481=reg150*reg236; T reg482=reg178*reg200; T reg483=reg25*var_inter[2]; T reg484=reg101*reg134; T reg485=reg17*var_inter[2];
    reg372=reg340+reg372; T reg486=reg166*reg220; T reg487=reg384+reg379; T reg488=reg148*reg211; reg374=reg374+reg373;
    T reg489=reg155*reg311; T reg490=reg148*reg210; reg347=reg426+reg347; reg344=reg382+reg344; T reg491=reg468*reg190;
    reg346=reg346+reg345; T reg492=reg184*reg242; T reg493=reg130*reg484; T reg494=reg166*reg192; T reg495=reg148*reg320;
    T reg496=reg130*reg452; T reg497=reg184*reg192; T reg498=reg167*reg198; T reg499=reg188*reg160; reg476=reg476+reg445;
    T reg500=reg385-reg343; T reg501=reg184*reg249; T reg502=reg172*reg198; T reg503=reg130*reg248; T reg504=reg130*reg228;
    T reg505=reg184*reg197; T reg506=reg178*reg220; T reg507=reg150*reg248; reg364=reg364+reg362; T reg508=reg184*reg199;
    T reg509=reg147*reg228; T reg510=reg168*reg195; T reg511=reg130*reg455; T reg512=reg166*reg196; T reg513=reg130*reg223;
    T reg514=reg184*reg196; reg376=reg376+reg363; T reg515=reg468*reg478; reg368=reg368+reg375; T reg516=reg188*reg249;
    T reg517=reg134*reg452; T reg518=reg200*reg184; T reg519=reg172*reg195; T reg520=reg134*reg232; T reg521=reg169*reg194;
    T reg522=reg147*reg210; T reg523=reg184*reg160; T reg524=reg130*reg466; T reg525=reg166*reg189; T reg526=reg473*reg442;
    T reg527=reg130*reg226; T reg528=reg184*reg189; T reg529=reg147*reg223; T reg530=reg457+reg447; reg371=reg371-reg370;
    T reg531=reg184*reg198; T reg532=reg168*reg205; T reg533=reg130*reg215; T reg534=reg166*reg162; reg367=reg367+reg369;
    T reg535=reg130*reg237; T reg536=reg184*reg162; reg366=reg366+reg365; T reg537=reg184*reg201; T reg538=reg130*reg453;
    T reg539=reg166*reg197; T reg540=reg172*reg205; T reg541=reg147*reg208; T reg542=reg151*reg210; T reg543=reg170*reg195;
    T reg544=reg154*reg455; T reg545=reg173*reg201; reg428=reg428-reg429; T reg546=reg178*reg162; T reg547=reg150*reg215;
    reg431=reg435+reg431; T reg548=reg151*reg228; T reg549=reg151*reg208; T reg550=reg170*reg205; T reg551=reg188*reg198;
    reg426=reg427+reg426; reg427=reg173*reg162; T reg552=reg237*reg111; T reg553=reg204*reg205; T reg554=reg151*reg223;
    T reg555=reg467*reg442; reg322=reg322+reg408; reg420=reg419+reg420; reg480=reg480-reg439; T reg556=reg155*reg460;
    T reg557=reg151*reg219; T reg558=reg151*reg234; T reg559=reg170*reg193; T reg560=reg173*reg199; reg389=reg389-reg390;
    T reg561=reg188*reg162; reg392=reg392+reg391; T reg562=reg150*reg237; T reg563=reg188*reg200; T reg564=reg204*reg193;
    T reg565=reg151*reg226; T reg566=reg151*reg211; T reg567=reg170*reg207; T reg568=reg173*reg197; T reg569=reg111*reg228;
    T reg570=reg205*reg175; T reg571=reg133*reg223; T reg572=reg387-reg388; T reg573=reg204*reg207; T reg574=reg151*reg237;
    T reg575=reg158*reg197; T reg576=reg111*reg453; T reg577=reg167*reg199; T reg578=reg155*reg211; T reg579=reg170*reg198;
    T reg580=reg172*reg199; T reg581=reg181*reg198; T reg582=reg155*reg320; T reg583=reg148*reg208; reg352=reg387+reg352;
    reg351=reg363+reg351; reg363=reg155*reg210; reg387=reg170*reg201; T reg584=reg178*reg189; T reg585=reg181*reg201;
    T reg586=reg155*reg315; T reg587=reg148*reg315; T reg588=reg150*reg466; reg348=reg470+reg348; T reg589=reg167*reg201;
    T reg590=reg155*reg208; T reg591=reg170*reg199; T reg592=reg172*reg201; T reg593=reg181*reg199; T reg594=reg170*reg242;
    T reg595=reg181*reg242; T reg596=reg155*reg335; T reg597=reg173*reg198; reg414=reg398+reg414; reg357=reg357+reg360;
    T reg598=reg483*reg442; T reg599=reg359+reg358; T reg600=reg188*reg189; T reg601=reg181*reg249; T reg602=reg155*reg329;
    T reg603=reg474*reg190; T reg604=reg150*reg226; T reg605=reg393+reg356; reg354=reg369+reg354; reg369=reg155*reg234;
    T reg606=reg170*reg160; T reg607=reg181*reg160; T reg608=reg155*reg325; T reg609=reg148*reg311; reg462=reg461+reg462;
    reg353=reg391+reg353; reg465=reg465+reg471; reg403=reg423+reg403; reg265=reg265+reg404; reg406=reg405-reg406;
    reg391=reg171*reg201; T reg610=reg165*reg197; T reg611=reg154*reg453; T reg612=reg473*reg190; T reg613=reg188*reg206;
    reg252=reg263+reg252; reg275=reg334+reg275; T reg614=reg150*reg477; reg273=reg272-reg273; T reg615=reg171*reg199;
    T reg616=reg165*reg196; T reg617=reg161*reg311; T reg618=reg1*reg478; reg276=reg276+reg279; T reg619=reg165*reg199;
    T reg620=reg178*reg206; T reg621=reg150*reg459; T reg622=reg171*reg249; T reg623=reg168*reg198; reg432=reg430+reg432;
    reg434=reg434-reg433; T reg624=reg154*reg219; T reg625=reg171*reg220; T reg626=reg178*reg203; T reg627=reg150*reg454;
    reg396=reg395-reg396; T reg628=reg171*reg160; T reg629=reg168*reg189; T reg630=reg165*reg189; T reg631=reg154*reg466;
    T reg632=reg141*reg226; reg399=reg397+reg399; T reg633=reg167*reg189; T reg634=reg188*reg245; T reg635=reg247+reg400;
    T reg636=reg141*reg466; T reg637=reg165*reg162; T reg638=reg154*reg215; T reg639=reg168*reg160; T reg640=reg143*reg228;
    T reg641=reg171*reg195; T reg642=reg161*reg315; T reg643=reg143*reg208; T reg644=reg164*reg205; T reg645=reg165*reg201;
    reg334=reg327-reg334; reg293=reg296+reg293; reg296=reg143*reg223; reg327=reg171*reg205; T reg646=reg1*reg442;
    T reg647=reg279+reg299; reg303=reg302+reg303; reg243=reg246+reg243; reg302=reg165*reg160; T reg648=reg161*reg325;
    reg306=reg287+reg306; T reg649=reg161*reg320; reg310=reg309+reg310; reg309=reg165*reg198; reg283=reg281+reg283;
    T reg650=reg137*reg210; T reg651=reg143*reg234; T reg652=reg164*reg193; reg287=reg284-reg287; reg250=reg251-reg250;
    reg284=reg143*reg226; T reg653=reg171*reg193; T reg654=reg153*reg195; T reg655=reg143*reg211; T reg656=reg164*reg207;
    T reg657=reg188*reg239; reg448=reg448+reg450; reg400=reg400+reg261; reg262=reg312+reg262; reg312=reg237*reg143;
    T reg658=reg171*reg207; T reg659=reg143*reg210; T reg660=reg164*reg195; reg324=reg321+reg324; T reg661=reg464*reg190;
    reg321=reg318-reg321; reg318=reg193*reg168; T reg662=reg134*reg210; T reg663=reg169*reg195; reg338=reg338+reg339;
    reg340=reg341+reg340; reg341=reg134*reg228; T reg664=reg184*reg195; T reg665=reg134*reg208; T reg666=reg169*reg205;
    T reg667=reg473*reg478; T reg668=reg178*reg192; T reg669=reg150*reg484; reg342=reg342+reg349; T reg670=reg168*reg196;
    T reg671=reg134*reg223; T reg672=reg184*reg205; T reg673=reg141*reg223; T reg674=reg468*reg442; T reg675=reg150*reg223;
    reg350=reg375+reg350; reg375=reg167*reg196; T reg676=reg463-reg481; reg377=reg377-reg378; T reg677=reg237*reg147;
    T reg678=reg134*reg219; T reg679=reg184*reg194; T reg680=reg168*reg207; T reg681=reg134*reg234; T reg682=reg169*reg193;
    reg382=reg382-reg383; reg380=reg380+reg381; T reg683=reg134*reg226; T reg684=reg184*reg193; T reg685=reg134*reg211;
    T reg686=reg169*reg207; T reg687=reg172*reg207; T reg688=reg147*reg211; T reg689=reg188*reg192; T reg690=reg150*reg452;
    T reg691=reg337-reg386; T reg692=reg134*reg237; T reg693=reg184*reg207; T reg694=reg147*reg226; reg416=reg337+reg416;
    reg337=reg168*reg201; T reg695=reg157*reg210; T reg696=reg169*reg201; reg418=reg418+reg417; T reg697=reg166*reg201;
    T reg698=reg157*reg315; reg421=reg339+reg421; reg339=reg168*reg162; T reg699=reg157*reg208; T reg700=reg169*reg199;
    T reg701=reg237*reg141; T reg702=reg166*reg199; T reg703=reg157*reg311; T reg704=reg167*reg162; reg422=reg349+reg422;
    reg349=reg141*reg215; T reg705=reg1*reg190; T reg706=reg188*reg203; T reg707=reg150*reg479; T reg708=reg424+reg425;
    T reg709=reg355+reg361; T reg710=reg141*reg455; T reg711=reg166*reg249; T reg712=reg157*reg329; T reg713=reg168*reg199;
    T reg714=reg378+reg411; reg413=reg413+reg412; T reg715=reg157*reg234; T reg716=reg169*reg160; T reg717=reg188*reg242;
    T reg718=reg166*reg160; T reg719=reg157*reg325; T reg720=reg168*reg197; reg415=reg381+reg415; reg381=reg141*reg228;
    T reg721=reg157*reg211; T reg722=reg169*reg198; T reg723=reg167*reg197; T reg724=reg166*reg198; T reg725=reg157*reg320;
    T reg726=reg141*reg453; reg469=reg469+reg482; reg317=reg300+reg317; T reg727=reg156*reg210; T reg728=reg176*reg201;
    T reg729=reg485*reg190; T reg730=reg178*reg201; T reg731=reg188*reg196; T reg732=reg156*reg315; reg313=reg274+reg313;
    reg475=reg475+reg456; reg314=reg294+reg314; T reg733=reg156*reg208; T reg734=reg176*reg199; T reg735=reg158*reg199;
    T reg736=reg178*reg199; T reg737=reg156*reg311; T reg738=reg129*reg311; T reg739=reg39*reg223; reg264=reg291+reg264;
    T reg740=reg153*reg199; T reg741=reg39*reg455; T reg742=reg307+reg326; T reg743=reg180*reg197; T reg744=reg156*reg234;
    T reg745=reg176*reg160; T reg746=reg123*reg228; T reg747=reg178*reg160; T reg748=reg156*reg325; T reg749=reg182*reg197;
    reg458=reg458+reg438; reg323=reg304+reg323; T reg750=reg123*reg453; T reg751=reg176*reg198; T reg752=reg180*reg201;
    T reg753=reg178*reg198; T reg754=reg156*reg320; reg316=reg316+reg319; T reg755=reg464*reg478; T reg756=reg177*reg196;
    T reg757=reg153*reg201; T reg758=reg188*reg199; T reg759=reg254-reg255; T reg760=reg204*reg249; T reg761=reg129*reg210;
    T reg762=reg128*reg248; T reg763=reg181*reg220; reg278=reg402+reg278; reg444=reg444+reg449; T reg764=reg286+reg285;
    T reg765=reg483*reg478; reg271=reg271+reg270; T reg766=reg204*reg160; T reg767=reg474*reg442; T reg768=reg128*reg466;
    T reg769=reg181*reg189; T reg770=reg137*reg223; T reg771=reg128*reg226; T reg772=reg204*reg189; T reg773=reg467*reg190;
    T reg774=reg178*reg196; T reg775=reg150*reg455; reg266=reg266+reg259; T reg776=reg204*reg245; T reg777=reg129*reg208;
    T reg778=reg128*reg454; T reg779=reg181*reg203; reg258=reg251+reg258; reg251=reg128*reg479; T reg780=reg204*reg203;
    T reg781=reg175*reg196; reg257=reg257+reg256; T reg782=reg204*reg242; T reg783=reg158*reg201; T reg784=reg128*reg484;
    T reg785=reg181*reg192; T reg786=reg129*reg315; T reg787=reg128*reg452; T reg788=reg204*reg192; reg222=reg298+reg222;
    T reg789=reg145*reg211; T reg790=reg176*reg207; T reg791=reg122*reg223; T reg792=reg176*reg200; reg300=reg300-reg301;
    T reg793=reg180*reg205; T reg794=reg188*reg207; T reg795=reg145*reg237; reg298=reg297+reg298; reg297=reg145*reg460;
    T reg796=reg145*reg210; T reg797=reg176*reg195; T reg798=reg483*reg190; T reg799=reg145*reg479; reg294=reg295+reg294;
    reg295=reg188*reg195; T reg800=reg145*reg228; T reg801=reg179*reg205; T reg802=reg145*reg452; T reg803=reg126*reg311;
    reg436=reg470+reg436; reg470=reg145*reg232; T reg804=reg176*reg194; T reg805=reg182*reg199; T reg806=reg156*reg211;
    reg308=reg308-reg307; T reg807=reg179*reg199; T reg808=reg188*reg194; T reg809=reg145*reg219; T reg810=reg126*reg208;
    T reg811=reg145*reg234; T reg812=reg176*reg193; reg238=reg289+reg238; reg440=reg440+reg437; reg304=reg305+reg304;
    reg305=reg188*reg193; T reg813=reg145*reg226; T reg814=reg485*reg442; T reg815=reg204*reg195; T reg816=reg123*reg223;
    T reg817=reg156*reg460; T reg818=reg176*reg242; T reg819=reg182*reg196; T reg820=reg178*reg242; T reg821=reg176*reg202;
    T reg822=reg156*reg335; T reg823=reg123*reg455; T reg824=reg145*reg472; reg333=reg437+reg333; reg437=reg180*reg199;
    T reg825=reg175*reg199; T reg826=reg332+reg331; reg328=reg328+reg330; T reg827=reg178*reg249; T reg828=reg145*reg477;
    T reg829=reg156*reg329; T reg830=reg188*reg183; T reg831=reg122*reg208; T reg832=reg188*reg202; T reg833=reg145*reg208;
    T reg834=reg176*reg205; reg291=reg292+reg291; reg292=reg122*reg228; T reg835=reg195*reg180; T reg836=reg188*reg205;
    T reg837=reg145*reg223; T reg838=reg464*reg442; reg456=reg451+reg456; reg290=reg438+reg290; reg289=reg288+reg289;
    reg288=reg156*reg472; reg438=reg176*reg245; reg451=reg178*reg245; reg227=reg227+reg446; T reg839=reg156*reg336;
    T reg840=reg485*reg478; T reg841=reg180*reg196; T reg842=reg128*reg223; T reg843=reg410+reg253; T reg844=reg181*reg196;
    T reg845=reg128*reg455; T reg846=reg204*reg199; reg282=reg282+reg260; T reg847=reg150*reg453; T reg848=reg178*reg197;
    T reg849=reg173*reg195; T reg850=reg137*reg228; T reg851=reg204*reg197; T reg852=reg128*reg228; T reg853=reg181*reg197;
    T reg854=reg128*reg453; T reg855=reg153*reg205; T reg856=reg137*reg208; T reg857=reg204*reg201; reg277=reg277+reg280;
    T reg858=reg204*reg162; T reg859=reg128*reg237; T reg860=reg150*reg228; T reg861=reg181*reg162; T reg862=reg128*reg215;
    T reg863=reg204*reg194; reg455=reg111*reg455; T reg864=reg158*reg196; reg394=reg394-reg393; T reg865=reg170*reg194;
    T reg866=reg151*reg232; reg223=reg111*reg223; T reg867=reg173*reg196; T reg868=reg151*reg452; T reg869=reg204*reg200;
    reg398=reg401+reg398; reg401=reg474*reg478; T reg870=reg170*reg200; T reg871=reg151*reg460; reg441=reg441+reg443;
    T reg872=reg188*reg201; T reg873=reg151*reg479; T reg874=reg202*reg204; reg402=reg402+reg407; reg408=reg409+reg408;
    reg461=reg213+reg461; reg213=reg467*reg478; reg196=reg204*reg196; reg269=reg274-reg269; reg274=reg173*reg205;
    reg409=reg188*reg197; T reg875=reg204*reg198; reg268=reg268-reg267; T reg876=reg89*reg431; reg290=reg450+reg290;
    reg631=reg630-reg631; reg271=reg271+reg766; reg548=reg815+reg548; reg571=reg570+reg571; reg629=reg632+reg629;
    reg396=reg396-reg628; reg438=reg288+reg438; reg840=(*f.m).density*reg840; reg402=reg597+reg402; reg626=reg627+reg626;
    reg288=reg624+reg625; reg408=reg776+reg408; reg839=reg451+reg839; reg550=reg549+reg550; reg450=reg89*reg432;
    reg821=reg824+reg821; reg436=reg436+reg857; reg434=reg434+reg623; reg708=reg708+reg622; reg841=reg816+reg841;
    reg546=reg546-reg547; reg834=reg833+reg834; reg612=(*f.m).density*reg612; reg406=reg406-reg391; reg292=reg835+reg292;
    reg798=(*f.m).density*reg798; reg456=reg634+reg456; reg451=reg89*reg403; reg291=reg758+reg291; reg544=reg616-reg544;
    reg491=(*f.m).density*reg491; reg265=reg265+reg639; reg637=reg637+reg638; reg462=reg446+reg462; reg873=reg874+reg873;
    reg837=reg836+reg837; reg446=reg89*reg635; reg289=reg752+reg289; reg634=reg465+reg634; reg838=(*f.m).density*reg838;
    reg633=reg636+reg633; reg465=reg89*reg399; reg409=reg860+reg409; reg549=reg89*reg420; reg196=reg842+reg196;
    reg227=reg227+reg825; reg418=reg418+reg337; reg416=reg416-reg370; reg555=(*f.m).density*reg555; reg570=reg89*reg826;
    reg724=reg724-reg725; reg828=reg830+reg828; reg322=reg259+reg322; reg723=reg726+reg723; reg722=reg721+reg722;
    reg494=reg493+reg494; reg829=reg829-reg827; reg844=reg845+reg844; reg415=reg373+reg415; reg498=reg498-reg495;
    reg720=reg381+reg720; reg719=reg718+reg719; reg594=reg556+reg594; reg463=reg463-reg742; reg743=reg746+reg743;
    reg716=reg715+reg716; reg427=reg552+reg427; reg480=reg480+reg551; reg706=reg707+reg706; reg705=(*f.m).density*reg705;
    reg346=reg346+reg492; reg422=reg362+reg422; reg441=reg441+reg872; reg818=reg817+reg818; reg704=reg704-reg349;
    reg703=reg702+reg703; reg819=reg823+reg819; reg426=reg846+reg426; reg476=reg476+reg499; reg700=reg699+reg700;
    reg213=(*f.m).density*reg213; reg822=reg820+reg822; reg339=reg701+reg339; reg421=reg365+reg421; reg698=reg697+reg698;
    reg554=reg553+reg554; reg333=reg482+reg333; reg328=reg328+reg437; reg696=reg695+reg696; reg461=reg825+reg461;
    reg864=reg455-reg864; reg259=reg89*reg293; reg334=reg334-reg615; reg392=reg766+reg392; reg812=reg811+reg812;
    reg238=reg319+reg238; reg644=reg643-reg644; reg440=reg717+reg440; reg865=reg865-reg866; reg642=reg645-reg642;
    reg641=reg640-reg641; reg304=reg499+reg304; reg814=(*f.m).density*reg814; reg489=reg593+reg489; reg391=reg321-reg391;
    reg565=reg564+reg565; reg813=reg305+reg813; reg661=(*f.m).density*reg661; reg324=reg405-reg324; reg660=reg659-reg660;
    reg568=reg569+reg568; reg274=reg274-reg770; reg591=reg590+reg591; reg305=reg89*reg310; reg802=reg563+reg802;
    reg803=reg805+reg803; reg592=reg490+reg592; reg309=reg309+reg649; reg306=reg395-reg306; reg863=reg863-reg557;
    reg389=reg389+reg560; reg648=reg302-reg648; reg804=reg804-reg470; reg772=reg771+reg772; reg394=reg394-reg760;
    reg302=reg89*reg303; reg559=reg558+reg559; reg308=reg308-reg516; reg319=reg89*reg243; reg424=reg424+reg647;
    reg807=reg810+reg807; reg646=(*f.m).density*reg646; reg561=reg562+reg561; reg808=reg808-reg809; reg327=reg296-reg327;
    reg296=reg89*reg283; reg797=reg796+reg797; reg347=reg260+reg347; reg799=reg832+reg799; reg276=reg622+reg276;
    reg574=reg574-reg573; reg620=reg621+reg620; reg618=(*f.m).density*reg618; reg344=reg344-reg433; reg294=reg872+reg294;
    reg617=reg619-reg617; reg615=reg273-reg615; reg801=reg831+reg801; reg401=(*f.m).density*reg401; reg870=reg871+reg870;
    reg800=reg295+reg800; reg348=reg280+reg348; reg275=reg272-reg275; reg260=reg89*reg252; reg543=reg542+reg543;
    reg613=reg614+reg613; reg428=reg428+reg545; reg611=reg610-reg611; reg312=reg312+reg658; reg789=reg789-reg790;
    reg791=reg793+reg791; reg566=reg566-reg567; reg272=reg89*reg400; reg222=reg330+reg222; reg792=reg297+reg792;
    reg868=reg869+reg868; reg769=reg768+reg769; reg273=reg89*reg262; reg655=reg655+reg656; reg300=reg551+reg300;
    reg448=reg448+reg657; reg653=reg284-reg653; reg867=reg223+reg867; reg795=reg795-reg794; reg628=reg287-reg628;
    reg298=reg437+reg298; reg572=reg875+reg572; reg545=reg250+reg545; reg652=reg651-reg652; reg575=reg576-reg575;
    reg398=reg782+reg398; reg650=reg654-reg650; reg606=reg369+reg606; reg502=reg488+reg502; reg521=reg521-reg520;
    reg737=reg736+reg737; reg519=reg522+reg519; reg518=reg517+reg518; reg762=reg762-reg763; reg774=reg775+reg774;
    reg857=reg277+reg857; reg368=reg492+reg368; reg264=reg449+reg264; reg676=reg676-reg516; reg515=(*f.m).density*reg515;
    reg740=reg777+reg740; reg608=reg607+reg608; reg514=reg513+reg514; reg609=reg577+reg609; reg773=(*f.m).density*reg773;
    reg376=reg337+reg376; reg512=reg511+reg512; reg269=reg560+reg269; reg848=reg847+reg848; reg685=reg685-reg686;
    reg849=reg849-reg850; reg732=reg730+reg732; reg688=reg688-reg687; reg684=reg683+reg684; reg390=reg313-reg390;
    reg689=reg690+reg689; reg380=reg523+reg380; reg475=reg471+reg475; reg254=reg254-reg605; reg354=reg412+reg354;
    reg382=reg623+reg382; reg682=reg681+reg682; reg314=reg443+reg314; reg853=reg854+reg853; reg679=reg679-reg678;
    reg278=reg360+reg278; reg734=reg733+reg734; reg735=reg738-reg735; reg677=reg677-reg680; reg377=reg377-reg501;
    reg500=reg500-reg501; reg782=reg257+reg782; reg783=reg786-reg783; reg581=reg581-reg582; reg371=reg371+reg531;
    reg785=reg784+reg785; reg584=reg588+reg584; reg529=reg532+reg529; reg528=reg527+reg528; reg861=reg861-reg862;
    reg352=reg352-reg267; reg788=reg787+reg788; reg525=reg524+reg525; reg757=reg761+reg757; reg351=reg417+reg351;
    reg526=(*f.m).density*reg526; reg223=reg89*reg530; reg523=reg374+reg523; reg758=reg444+reg758; reg387=reg363+reg387;
    reg759=reg759-reg760; reg372=reg404+reg372; reg250=reg89*reg487; reg353=reg270+reg353; reg364=reg364+reg508;
    reg776=reg266+reg776; reg856=reg855-reg856; reg509=reg510+reg509; reg505=reg504+reg505; reg779=reg778+reg779;
    reg429=reg258-reg429; reg858=reg859+reg858; reg539=reg538+reg539; reg579=reg578+reg579; reg580=reg583+reg580;
    reg540=reg541+reg540; reg366=reg366+reg537; reg780=reg251+reg780; reg507=reg507-reg506; reg503=reg503-reg486;
    reg536=reg535+reg536; reg781=reg739+reg781; reg765=(*f.m).density*reg765; reg367=reg713+reg367; reg534=reg534-reg533;
    reg414=reg256+reg414; reg497=reg496+reg497; reg670=reg673+reg670; reg342=reg508+reg342; reg751=reg806+reg751;
    reg752=reg316+reg752; reg251=reg89*reg764; reg598=(*f.m).density*reg598; reg666=reg665+reg666; reg755=(*f.m).density*reg755;
    reg600=reg604+reg600; reg667=(*f.m).density*reg667; reg668=reg669+reg668; reg664=reg341+reg664; reg753=reg753-reg754;
    reg256=reg89*reg599; reg338=reg537+reg338; reg586=reg585+reg586; reg756=reg741+reg756; reg587=reg589+reg587;
    reg717=reg469+reg717; reg257=reg89*reg843; reg385=reg385-reg714; reg745=reg744+reg745; reg713=reg413+reg713;
    reg712=reg712-reg711; reg596=reg595+reg596; reg458=reg657+reg458; reg258=reg89*reg709; reg597=reg357+reg597;
    reg748=reg747+reg748; reg749=reg750+reg749; reg375=reg710+reg375; reg350=reg345+reg350; reg846=reg282+reg846;
    reg674=(*f.m).density*reg674; reg767=(*f.m).density*reg767; reg323=reg445+reg323; reg672=reg671+reg672; reg603=(*f.m).density*reg603;
    reg694=reg318+reg694; reg691=reg531+reg691; reg317=reg317-reg439; reg728=reg727+reg728; reg663=reg662+reg663;
    reg851=reg852+reg851; reg731=reg675+reg731; reg602=reg602-reg601; reg729=(*f.m).density*reg729; reg875=reg268+reg875;
    reg692=reg692-reg693; reg340=reg639+reg340; reg367=reg89*reg367; reg266=reg89*reg618; reg462=reg89*reg462;
    reg418=reg89*reg418; reg268=ponderation*reg549; reg289=reg89*reg289; reg270=ponderation*reg259; reg864=reg89*reg864;
    reg278=reg89*reg278; reg568=reg89*reg568; reg571=reg89*reg571; reg849=reg89*reg849; reg540=reg89*reg540;
    reg375=reg89*reg375; reg277=reg89*reg515; reg592=reg89*reg592; reg783=reg89*reg783; reg781=reg89*reg781;
    reg280=reg89*reg838; reg282=reg89*reg773; reg265=reg89*reg265; reg642=reg89*reg642; reg597=reg89*reg597;
    reg720=reg89*reg720; reg284=reg89*reg661; reg287=reg89*reg755; reg354=reg89*reg354; reg633=reg89*reg633;
    reg390=reg89*reg390; reg295=reg89*reg401; reg389=reg89*reg389; reg309=reg89*reg309; reg297=reg89*reg646;
    reg227=reg89*reg227; reg743=reg89*reg743; reg313=ponderation*reg257; reg807=reg89*reg807; reg529=reg89*reg529;
    reg803=reg89*reg803; reg723=reg89*reg723; reg749=reg89*reg749; reg316=ponderation*reg319; reg757=reg89*reg757;
    reg713=reg89*reg713; reg688=reg89*reg688; reg461=reg89*reg461; reg351=reg89*reg351; reg372=reg89*reg372;
    reg318=reg89*reg767; reg694=reg89*reg694; reg238=reg89*reg238; reg382=reg89*reg382; reg321=reg89*reg213;
    reg292=reg89*reg292; reg330=reg89*reg667; reg337=reg89*reg555; reg222=reg89*reg222; reg341=reg89*reg603;
    reg650=reg89*reg650; reg345=reg89*reg840; reg434=reg89*reg434; reg519=reg89*reg519; reg357=reg89*reg798;
    reg819=reg89*reg819; reg340=reg89*reg340; reg502=reg89*reg502; reg362=reg89*reg705; reg801=reg89*reg801;
    reg617=reg89*reg617; reg363=reg89*reg814; reg740=reg89*reg740; reg609=reg89*reg609; reg841=reg89*reg841;
    reg427=reg89*reg427; reg365=reg89*reg526; reg677=reg89*reg677; reg756=reg89*reg756; reg369=reg89*reg674;
    reg428=reg89*reg428; reg275=reg89*reg275; reg791=reg89*reg791; reg373=reg89*reg491; reg324=reg89*reg324;
    reg752=reg89*reg752; reg328=reg89*reg328; reg344=reg89*reg344; reg339=reg89*reg339; reg856=reg89*reg856;
    reg374=reg89*reg612; reg509=reg89*reg509; reg402=reg89*reg402; reg580=reg89*reg580; reg429=reg89*reg429;
    reg629=reg89*reg629; reg381=ponderation*reg273; reg498=reg89*reg498; reg269=reg89*reg269; reg298=reg89*reg298;
    reg274=reg89*reg274; reg587=reg89*reg587; reg867=reg89*reg867; reg395=reg89*reg598; reg376=reg89*reg376;
    reg704=reg89*reg704; reg404=reg89*reg765; reg670=reg89*reg670; reg735=reg89*reg735; reg545=reg89*reg545;
    reg405=reg89*reg729; reg575=reg89*reg575; reg525=reg89*reg525; reg523=reg89*reg523; reg789=reg89*reg789;
    reg412=ponderation*reg250; reg300=reg89*reg300; reg503=reg89*reg503; reg500=reg89*reg500; reg795=reg89*reg795;
    reg497=reg89*reg497; reg494=reg89*reg494; reg797=reg89*reg797; reg346=reg89*reg346; reg347=reg89*reg347;
    reg294=reg89*reg294; reg489=reg89*reg489; reg800=reg89*reg800; reg254=reg89*reg254; reg606=reg89*reg606;
    reg839=reg89*reg839; reg608=reg89*reg608; reg438=reg89*reg438; reg353=reg89*reg353; reg290=reg89*reg290;
    reg579=reg89*reg579; reg581=reg89*reg581; reg837=reg89*reg837; reg352=reg89*reg352; reg387=reg89*reg387;
    reg291=reg89*reg291; reg586=reg89*reg586; reg834=reg89*reg834; reg348=reg89*reg348; reg591=reg89*reg591;
    reg368=reg89*reg368; reg518=reg89*reg518; reg440=reg89*reg440; reg521=reg89*reg521; reg792=reg89*reg792;
    reg377=reg89*reg377; reg679=reg89*reg679; reg799=reg89*reg799; reg682=reg89*reg682; reg380=reg89*reg380;
    reg456=reg89*reg456; reg684=reg89*reg684; reg821=reg89*reg821; reg685=reg89*reg685; reg828=reg89*reg828;
    reg691=reg89*reg691; reg692=reg89*reg692; reg813=reg89*reg813; reg528=reg89*reg528; reg371=reg89*reg371;
    reg304=reg89*reg304; reg534=reg89*reg534; reg812=reg89*reg812; reg536=reg89*reg536; reg366=reg89*reg366;
    reg808=reg89*reg808; reg539=reg89*reg539; reg308=reg89*reg308; reg505=reg89*reg505; reg364=reg89*reg364;
    reg804=reg89*reg804; reg512=reg89*reg512; reg514=reg89*reg514; reg802=reg89*reg802; reg868=reg89*reg868;
    reg398=reg89*reg398; reg317=reg89*reg317; reg870=reg89*reg870; reg728=reg89*reg728; reg873=reg89*reg873;
    reg408=reg89*reg408; reg732=reg89*reg732; reg196=reg89*reg196; reg844=reg89*reg844; reg314=reg89*reg314;
    reg846=reg89*reg846; reg851=reg89*reg851; reg734=reg89*reg734; reg853=reg89*reg853; reg737=reg89*reg737;
    reg785=reg89*reg785; reg788=reg89*reg788; reg759=reg89*reg759; reg782=reg89*reg782; reg762=reg89*reg762;
    reg413=ponderation*reg251; reg780=reg89*reg780; reg271=reg89*reg271; reg779=reg89*reg779; reg769=reg89*reg769;
    reg772=reg89*reg772; reg776=reg89*reg776; reg875=reg89*reg875; reg861=reg89*reg861; reg264=reg89*reg264;
    reg858=reg89*reg858; reg857=reg89*reg857; reg544=reg89*reg544; reg548=reg89*reg548; reg417=ponderation*reg570;
    reg550=reg89*reg550; reg333=reg89*reg333; reg426=reg89*reg426; reg554=reg89*reg554; reg822=reg89*reg822;
    reg322=reg89*reg322; reg594=reg89*reg594; reg818=reg89*reg818; reg596=reg89*reg596; reg414=reg89*reg414;
    reg475=reg89*reg475; reg437=ponderation*reg256; reg602=reg89*reg602; reg436=reg89*reg436; reg753=reg89*reg753;
    reg865=reg89*reg865; reg751=reg89*reg751; reg394=reg89*reg394; reg863=reg89*reg863; reg323=reg89*reg323;
    reg559=reg89*reg559; reg392=reg89*reg392; reg748=reg89*reg748; reg565=reg89*reg565; reg566=reg89*reg566;
    reg745=reg89*reg745; reg572=reg89*reg572; reg463=reg89*reg463; reg574=reg89*reg574; reg543=reg89*reg543;
    reg829=reg89*reg829; reg655=reg89*reg655; reg708=reg89*reg708; reg443=ponderation*reg272; reg422=reg89*reg422;
    reg626=reg89*reg626; reg312=reg89*reg312; reg703=reg89*reg703; reg476=reg89*reg476; reg700=reg89*reg700;
    reg584=reg89*reg584; reg421=reg89*reg421; reg660=reg89*reg660; reg600=reg89*reg600; reg698=reg89*reg698;
    reg391=reg89*reg391; reg696=reg89*reg696; reg634=reg89*reg634; reg416=reg89*reg416; reg480=reg89*reg480;
    reg724=reg89*reg724; reg641=reg89*reg641; reg546=reg89*reg546; reg722=reg89*reg722; reg644=reg89*reg644;
    reg615=reg89*reg615; reg668=reg89*reg668; reg444=ponderation*reg260; reg445=ponderation*reg876; reg611=reg89*reg611;
    reg276=reg89*reg276; reg689=reg89*reg689; reg406=reg89*reg406; reg449=ponderation*reg451; reg717=reg89*reg717;
    reg637=reg89*reg637; reg455=ponderation*reg296; reg676=reg89*reg676; reg469=ponderation*reg446; reg471=ponderation*reg465;
    reg652=reg89*reg652; reg628=reg89*reg628; reg631=reg89*reg631; reg507=reg89*reg507; reg396=reg89*reg396;
    reg706=reg89*reg706; reg653=reg89*reg653; reg288=reg89*reg288; reg482=ponderation*reg450; reg488=ponderation*reg223;
    reg731=reg89*reg731; reg385=reg89*reg385; reg848=reg89*reg848; reg306=reg89*reg306; reg664=reg89*reg664;
    reg712=reg89*reg712; reg409=reg89*reg409; reg490=ponderation*reg258; reg666=reg89*reg666; reg424=reg89*reg424;
    reg350=reg89*reg350; reg620=reg89*reg620; reg492=ponderation*reg302; reg758=reg89*reg758; reg672=reg89*reg672;
    reg774=reg89*reg774; reg648=reg89*reg648; reg342=reg89*reg342; reg719=reg89*reg719; reg458=reg89*reg458;
    reg663=reg89*reg663; reg561=reg89*reg561; reg334=reg89*reg334; reg613=reg89*reg613; reg415=reg89*reg415;
    reg441=reg89*reg441; reg493=ponderation*reg305; reg716=reg89*reg716; reg448=reg89*reg448; reg338=reg89*reg338;
    reg327=reg89*reg327; reg496=ponderation*reg362; sollicitation[indices[3]+0]+=reg496; reg499=ponderation*reg374; sollicitation[indices[4]+0]+=reg499;
    reg504=ponderation*reg395; sollicitation[indices[7]+2]+=reg504; matrix(indices[0]+2,indices[4]+1)+=ponderation*reg748; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg448; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg706;
    reg448=ponderation*reg297; sollicitation[indices[3]+2]+=reg448; matrix(indices[6]+0,indices[6]+2)+=ponderation*reg743; matrix(indices[5]+2,indices[6]+1)+=ponderation*reg783; matrix(indices[0]+2,indices[3]+1)+=ponderation*reg829;
    matrix(indices[0]+2,indices[4]+0)+=ponderation*reg745; reg508=ponderation*reg404; sollicitation[indices[7]+1]+=reg508; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg780; matrix(indices[6]+0,indices[6]+1)+=ponderation*reg749;
    matrix(indices[1]+0,indices[2]+0)+=ponderation*reg782; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg717; reg510=ponderation*reg266; sollicitation[indices[3]+1]+=reg510; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg463;
    matrix(indices[0]+2,indices[7]+0)+=ponderation*reg734; reg463=ponderation*reg405; sollicitation[indices[6]+0]+=reg463; matrix(indices[0]+0,indices[0]+2)+=ponderation*reg613; matrix(indices[0]+2,indices[6]+2)+=ponderation*reg314;
    matrix(indices[5]+2,indices[7]+1)+=ponderation*reg735; matrix(indices[5]+2,indices[7]+0)+=ponderation*reg740; reg314=ponderation*reg318; sollicitation[indices[5]+2]+=reg314; matrix(indices[0]+2,indices[7]+1)+=ponderation*reg737;
    matrix(indices[0]+2,indices[6]+1)+=ponderation*reg732; reg511=ponderation*reg295; sollicitation[indices[5]+1]+=reg511; reg513=ponderation*reg345; sollicitation[indices[6]+1]+=reg513;
    matrix(indices[0]+2,indices[6]+0)+=ponderation*reg728; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg634; matrix(indices[0]+2,indices[7]+2)+=ponderation*reg264; matrix(indices[5]+2,indices[7]+2)+=ponderation*reg390; reg264=ponderation*reg341;
    sollicitation[indices[5]+0]+=reg264; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg620; reg390=ponderation*reg363; sollicitation[indices[6]+2]+=reg390; matrix(indices[0]+2,indices[5]+2)+=ponderation*reg317;
    matrix(indices[5]+2,indices[6]+2)+=ponderation*reg429; reg317=ponderation*reg365; sollicitation[indices[4]+2]+=reg317; matrix(indices[0]+2,indices[5]+1)+=ponderation*reg753; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg776;
    matrix(indices[0]+0,indices[1]+1)+=ponderation*reg626; matrix(indices[0]+2,indices[5]+0)+=ponderation*reg751; reg429=ponderation*reg330; sollicitation[indices[4]+1]+=reg429; matrix(indices[0]+2,indices[4]+2)+=ponderation*reg323;
    matrix(indices[1]+0,indices[1]+1)+=ponderation*reg779; reg323=ponderation*reg357; sollicitation[indices[7]+0]+=reg323; matrix(indices[6]+0,indices[6]+0)+=ponderation*reg752; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg804;
    matrix(indices[0]+1,indices[3]+1)+=ponderation*reg308; matrix(indices[0]+0,indices[6]+0)+=ponderation*reg441; matrix(indices[6]+2,indices[6]+2)+=ponderation*reg238; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg808; matrix(indices[0]+0,indices[5]+2)+=ponderation*reg561;
    matrix(indices[0]+1,indices[4]+0)+=ponderation*reg812; matrix(indices[7]+1,indices[7]+1)+=ponderation*reg461; matrix(indices[0]+1,indices[4]+1)+=ponderation*reg304; matrix(indices[0]+0,indices[5]+1)+=ponderation*reg546; matrix(indices[6]+1,indices[7]+2)+=ponderation*reg791;
    matrix(indices[0]+1,indices[4]+2)+=ponderation*reg813; matrix(indices[0]+0,indices[5]+0)+=ponderation*reg480; matrix(indices[0]+1,indices[5]+0)+=ponderation*reg789; matrix(indices[7]+1,indices[7]+2)+=ponderation*reg571; matrix(indices[6]+1,indices[7]+1)+=ponderation*reg298;
    matrix(indices[0]+1,indices[5]+1)+=ponderation*reg300; matrix(indices[0]+0,indices[4]+2)+=ponderation*reg600; matrix(indices[0]+1,indices[5]+2)+=ponderation*reg795; matrix(indices[7]+0,indices[7]+0)+=ponderation*reg227; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg458;
    matrix(indices[0]+1,indices[0]+2)+=ponderation*reg828; matrix(indices[0]+0,indices[7]+2)+=ponderation*reg731; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg821; matrix(indices[0]+0,indices[7]+1)+=ponderation*reg774; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg456;
    matrix(indices[7]+0,indices[7]+1)+=ponderation*reg756; matrix(indices[6]+2,indices[7]+2)+=ponderation*reg222; matrix(indices[0]+1,indices[1]+2)+=ponderation*reg799; matrix(indices[0]+0,indices[7]+0)+=ponderation*reg758; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg792;
    matrix(indices[0]+0,indices[6]+2)+=ponderation*reg409; matrix(indices[6]+2,indices[7]+1)+=ponderation*reg803; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg440; matrix(indices[7]+0,indices[7]+2)+=ponderation*reg781; matrix(indices[0]+1,indices[2]+2)+=ponderation*reg802;
    matrix(indices[0]+0,indices[6]+1)+=ponderation*reg848; matrix(indices[6]+2,indices[7]+0)+=ponderation*reg807; reg222=ponderation*reg282; sollicitation[indices[1]+0]+=reg222; matrix(indices[6]+0,indices[7]+2)+=ponderation*reg841;
    matrix(indices[0]+0,indices[3]+0)+=ponderation*reg676; matrix(indices[0]+2,indices[1]+1)+=ponderation*reg839; reg227=ponderation*reg321; sollicitation[indices[1]+1]+=reg227; matrix(indices[1]+1,indices[6]+1)+=ponderation*reg436;
    reg238=ponderation*reg337; sollicitation[indices[1]+2]+=reg238; matrix(indices[6]+0,indices[7]+1)+=ponderation*reg819; matrix(indices[0]+2,indices[1]+2)+=ponderation*reg475; matrix(indices[0]+0,indices[2]+2)+=ponderation*reg689;
    matrix(indices[0]+2,indices[2]+0)+=ponderation*reg818; reg298=ponderation*reg373; sollicitation[indices[2]+0]+=reg298; matrix(indices[6]+0,indices[7]+0)+=ponderation*reg328; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg822;
    reg300=ponderation*reg277; sollicitation[indices[2]+1]+=reg300; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg668; matrix(indices[0]+2,indices[2]+2)+=ponderation*reg333; reg304=ponderation*reg369;
    sollicitation[indices[2]+2]+=reg304; matrix(indices[0]+2,indices[3]+0)+=-reg417; matrix(indices[0]+0,indices[4]+1)+=ponderation*reg584; matrix(indices[0]+1,indices[6]+0)+=ponderation*reg797; matrix(indices[6]+1,indices[7]+0)+=ponderation*reg801;
    matrix(indices[0]+1,indices[6]+1)+=ponderation*reg294; matrix(indices[0]+0,indices[4]+0)+=ponderation*reg476; matrix(indices[0]+1,indices[6]+2)+=ponderation*reg800; matrix(indices[6]+1,indices[6]+2)+=ponderation*reg292; matrix(indices[7]+2,indices[7]+2)+=ponderation*reg462;
    matrix(indices[0]+0,indices[3]+2)+=-reg488; matrix(indices[0]+1,indices[7]+0)+=ponderation*reg834; reg292=ponderation*reg284; sollicitation[indices[0]+0]+=reg292; matrix(indices[0]+1,indices[7]+1)+=ponderation*reg291;
    matrix(indices[6]+1,indices[6]+1)+=ponderation*reg289; reg289=ponderation*reg287; sollicitation[indices[0]+1]+=reg289; matrix(indices[0]+1,indices[7]+2)+=ponderation*reg837; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg507;
    matrix(indices[0]+2,indices[0]+2)+=ponderation*reg290; reg290=ponderation*reg280; sollicitation[indices[0]+2]+=reg290; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg438; matrix(indices[2]+1,indices[6]+2)+=ponderation*reg664;
    matrix(indices[4]+0,indices[7]+2)+=ponderation*reg670; matrix(indices[2]+1,indices[7]+0)+=ponderation*reg666; matrix(indices[2]+1,indices[7]+1)+=ponderation*reg342; matrix(indices[4]+0,indices[7]+1)+=ponderation*reg375; matrix(indices[2]+1,indices[7]+2)+=ponderation*reg672;
    matrix(indices[2]+2,indices[2]+2)+=ponderation*reg350; matrix(indices[4]+0,indices[7]+0)+=ponderation*reg713; matrix(indices[2]+2,indices[3]+0)+=-reg490; matrix(indices[2]+2,indices[3]+1)+=ponderation*reg712; matrix(indices[2]+2,indices[3]+2)+=ponderation*reg385;
    matrix(indices[4]+0,indices[6]+2)+=ponderation*reg720; matrix(indices[2]+2,indices[4]+0)+=ponderation*reg716; matrix(indices[2]+2,indices[4]+1)+=ponderation*reg719; matrix(indices[4]+0,indices[6]+1)+=ponderation*reg723; matrix(indices[2]+2,indices[4]+2)+=ponderation*reg415;
    matrix(indices[2]+2,indices[5]+0)+=ponderation*reg722; matrix(indices[4]+0,indices[6]+0)+=ponderation*reg418; matrix(indices[2]+2,indices[5]+1)+=ponderation*reg724; matrix(indices[2]+2,indices[5]+2)+=ponderation*reg416; matrix(indices[2]+2,indices[6]+0)+=ponderation*reg696;
    matrix(indices[4]+0,indices[5]+2)+=ponderation*reg339; matrix(indices[2]+2,indices[6]+1)+=ponderation*reg698; matrix(indices[2]+2,indices[6]+2)+=ponderation*reg421; matrix(indices[4]+0,indices[5]+1)+=ponderation*reg704; matrix(indices[4]+1,indices[6]+2)+=ponderation*reg509;
    matrix(indices[2]+0,indices[6]+2)+=ponderation*reg505; matrix(indices[2]+0,indices[7]+0)+=ponderation*reg364; matrix(indices[4]+1,indices[6]+1)+=ponderation*reg376; matrix(indices[2]+0,indices[7]+1)+=ponderation*reg512; matrix(indices[2]+0,indices[7]+2)+=ponderation*reg514;
    matrix(indices[4]+1,indices[6]+0)+=ponderation*reg519; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg368; matrix(indices[2]+1,indices[2]+2)+=ponderation*reg518; matrix(indices[4]+1,indices[5]+2)+=ponderation*reg677; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg521;
    matrix(indices[2]+1,indices[3]+1)+=ponderation*reg377; matrix(indices[4]+1,indices[5]+1)+=ponderation*reg382; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg679; matrix(indices[2]+1,indices[4]+0)+=ponderation*reg682; matrix(indices[2]+1,indices[4]+1)+=ponderation*reg380;
    matrix(indices[4]+1,indices[5]+0)+=ponderation*reg688; matrix(indices[2]+1,indices[4]+2)+=ponderation*reg684; matrix(indices[2]+1,indices[5]+0)+=ponderation*reg685; matrix(indices[4]+1,indices[4]+2)+=ponderation*reg694; matrix(indices[2]+1,indices[5]+1)+=ponderation*reg691;
    matrix(indices[2]+1,indices[5]+2)+=ponderation*reg692; matrix(indices[4]+1,indices[4]+1)+=ponderation*reg340; matrix(indices[2]+1,indices[6]+0)+=ponderation*reg663; matrix(indices[2]+1,indices[6]+1)+=ponderation*reg338; matrix(indices[3]+1,indices[3]+2)+=-reg455;
    matrix(indices[5]+1,indices[6]+1)+=ponderation*reg545; matrix(indices[3]+1,indices[4]+0)+=ponderation*reg652; matrix(indices[3]+1,indices[4]+1)+=ponderation*reg628; matrix(indices[3]+1,indices[4]+2)+=ponderation*reg653; matrix(indices[3]+2,indices[7]+0)+=-reg381;
    matrix(indices[3]+1,indices[5]+0)+=ponderation*reg655; matrix(indices[3]+1,indices[5]+1)+=-reg443; matrix(indices[3]+2,indices[6]+2)+=ponderation*reg324; matrix(indices[3]+1,indices[5]+2)+=ponderation*reg312; matrix(indices[3]+1,indices[6]+0)+=ponderation*reg660;
    matrix(indices[3]+2,indices[6]+1)+=ponderation*reg642; matrix(indices[3]+1,indices[6]+1)+=ponderation*reg391; matrix(indices[3]+1,indices[6]+2)+=ponderation*reg641; matrix(indices[3]+2,indices[6]+0)+=-reg270; matrix(indices[3]+1,indices[7]+0)+=ponderation*reg644;
    matrix(indices[3]+1,indices[7]+1)+=ponderation*reg334; matrix(indices[3]+1,indices[7]+2)+=ponderation*reg327; matrix(indices[3]+2,indices[5]+2)+=-reg316; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg424; matrix(indices[3]+2,indices[4]+0)+=-reg492;
    matrix(indices[3]+2,indices[5]+1)+=ponderation*reg309; matrix(indices[3]+2,indices[4]+1)+=ponderation*reg648; matrix(indices[3]+2,indices[4]+2)+=ponderation*reg306; matrix(indices[3]+2,indices[5]+0)+=-reg493; matrix(indices[2]+2,indices[7]+0)+=ponderation*reg700;
    matrix(indices[2]+2,indices[7]+1)+=ponderation*reg703; matrix(indices[4]+0,indices[5]+0)+=ponderation*reg434; matrix(indices[2]+2,indices[7]+2)+=ponderation*reg422; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg708; matrix(indices[3]+0,indices[3]+1)+=-reg482;
    matrix(indices[4]+0,indices[4]+2)+=ponderation*reg629; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg288; matrix(indices[3]+0,indices[4]+0)+=ponderation*reg396; matrix(indices[4]+0,indices[4]+1)+=ponderation*reg633; matrix(indices[3]+0,indices[4]+1)+=ponderation*reg631;
    matrix(indices[3]+0,indices[4]+2)+=-reg471; matrix(indices[4]+0,indices[4]+0)+=ponderation*reg265; matrix(indices[3]+0,indices[5]+0)+=-reg469; matrix(indices[3]+0,indices[5]+1)+=ponderation*reg637; matrix(indices[3]+0,indices[5]+2)+=-reg449;
    matrix(indices[3]+0,indices[6]+0)+=ponderation*reg406; matrix(indices[3]+2,indices[7]+2)+=ponderation*reg275; matrix(indices[3]+0,indices[6]+1)+=ponderation*reg611; matrix(indices[3]+0,indices[6]+2)+=-reg444; matrix(indices[3]+2,indices[7]+1)+=ponderation*reg617;
    matrix(indices[3]+0,indices[7]+0)+=ponderation*reg615; matrix(indices[3]+0,indices[7]+2)+=-reg445; matrix(indices[5]+1,indices[6]+0)+=ponderation*reg650; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg276; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg408;
    matrix(indices[1]+1,indices[1]+2)+=ponderation*reg873; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg870; matrix(indices[5]+0,indices[7]+2)+=ponderation*reg867; matrix(indices[1]+1,indices[2]+1)+=ponderation*reg398; matrix(indices[1]+1,indices[2]+2)+=ponderation*reg868;
    matrix(indices[5]+0,indices[7]+1)+=ponderation*reg864; matrix(indices[1]+1,indices[3]+0)+=ponderation*reg865; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg394; matrix(indices[5]+0,indices[7]+0)+=ponderation*reg389; matrix(indices[1]+1,indices[3]+2)+=ponderation*reg863;
    matrix(indices[1]+1,indices[4]+0)+=ponderation*reg559; matrix(indices[1]+1,indices[4]+1)+=ponderation*reg392; matrix(indices[5]+0,indices[6]+2)+=ponderation*reg568; matrix(indices[1]+1,indices[4]+2)+=ponderation*reg565; matrix(indices[1]+1,indices[5]+0)+=ponderation*reg566;
    matrix(indices[5]+0,indices[6]+1)+=ponderation*reg575; matrix(indices[1]+1,indices[5]+1)+=ponderation*reg572; matrix(indices[1]+1,indices[5]+2)+=ponderation*reg574; matrix(indices[5]+0,indices[6]+0)+=ponderation*reg428; matrix(indices[1]+1,indices[6]+0)+=ponderation*reg543;
    matrix(indices[3]+0,indices[7]+1)+=ponderation*reg544; matrix(indices[1]+1,indices[6]+2)+=ponderation*reg548; matrix(indices[5]+0,indices[5]+2)+=ponderation*reg427; matrix(indices[1]+1,indices[7]+0)+=ponderation*reg550; matrix(indices[5]+2,indices[6]+0)+=ponderation*reg757;
    matrix(indices[1]+0,indices[2]+1)+=ponderation*reg785; matrix(indices[1]+0,indices[2]+2)+=ponderation*reg788; matrix(indices[5]+2,indices[5]+2)+=ponderation*reg278; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg759; matrix(indices[1]+0,indices[3]+1)+=ponderation*reg762;
    matrix(indices[1]+0,indices[3]+2)+=-reg413; matrix(indices[5]+1,indices[7]+2)+=ponderation*reg274; matrix(indices[1]+0,indices[4]+0)+=ponderation*reg271; matrix(indices[1]+0,indices[4]+1)+=ponderation*reg769; matrix(indices[5]+1,indices[7]+1)+=ponderation*reg269;
    matrix(indices[1]+0,indices[4]+2)+=ponderation*reg772; matrix(indices[1]+0,indices[5]+0)+=ponderation*reg875; matrix(indices[1]+0,indices[5]+1)+=ponderation*reg861; matrix(indices[5]+1,indices[7]+0)+=ponderation*reg856; matrix(indices[1]+0,indices[5]+2)+=ponderation*reg858;
    matrix(indices[1]+0,indices[6]+0)+=ponderation*reg857; matrix(indices[5]+1,indices[6]+2)+=ponderation*reg849; matrix(indices[1]+0,indices[6]+1)+=ponderation*reg853; matrix(indices[1]+0,indices[6]+2)+=ponderation*reg851; matrix(indices[5]+1,indices[5]+2)+=-reg313;
    matrix(indices[1]+0,indices[7]+0)+=ponderation*reg846; matrix(indices[1]+0,indices[7]+1)+=ponderation*reg844; matrix(indices[5]+1,indices[5]+1)+=ponderation*reg402; matrix(indices[1]+0,indices[7]+2)+=ponderation*reg196; matrix(indices[1]+2,indices[6]+2)+=ponderation*reg348;
    matrix(indices[1]+2,indices[7]+0)+=ponderation*reg591; matrix(indices[4]+2,indices[5]+2)+=ponderation*reg344; matrix(indices[1]+2,indices[7]+1)+=ponderation*reg489; matrix(indices[1]+2,indices[7]+2)+=ponderation*reg347; matrix(indices[4]+2,indices[5]+1)+=ponderation*reg498;
    matrix(indices[2]+0,indices[2]+0)+=ponderation*reg346; matrix(indices[2]+0,indices[2]+1)+=ponderation*reg494; matrix(indices[4]+2,indices[5]+0)+=ponderation*reg502; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg497; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg500;
    matrix(indices[4]+2,indices[4]+2)+=ponderation*reg372; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg503; matrix(indices[2]+0,indices[3]+2)+=-reg412; matrix(indices[2]+0,indices[4]+0)+=ponderation*reg523; matrix(indices[4]+1,indices[7]+2)+=ponderation*reg529;
    matrix(indices[2]+0,indices[4]+1)+=ponderation*reg525; matrix(indices[2]+0,indices[4]+2)+=ponderation*reg528; matrix(indices[4]+1,indices[7]+1)+=ponderation*reg367; matrix(indices[2]+0,indices[5]+0)+=ponderation*reg371; matrix(indices[2]+0,indices[5]+1)+=ponderation*reg534;
    matrix(indices[2]+0,indices[5]+2)+=ponderation*reg536; matrix(indices[4]+1,indices[7]+0)+=ponderation*reg540; matrix(indices[2]+0,indices[6]+0)+=ponderation*reg366; matrix(indices[2]+0,indices[6]+1)+=ponderation*reg539; matrix(indices[1]+1,indices[7]+1)+=ponderation*reg426;
    matrix(indices[5]+0,indices[5]+1)+=-reg268; matrix(indices[1]+1,indices[7]+2)+=ponderation*reg554; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg322; matrix(indices[5]+0,indices[5]+0)+=ponderation*reg597; matrix(indices[1]+2,indices[2]+0)+=ponderation*reg594;
    matrix(indices[1]+2,indices[2]+1)+=ponderation*reg596; matrix(indices[1]+2,indices[2]+2)+=ponderation*reg414; matrix(indices[1]+2,indices[3]+0)+=-reg437; matrix(indices[4]+2,indices[7]+2)+=ponderation*reg354; matrix(indices[1]+2,indices[3]+1)+=ponderation*reg602;
    matrix(indices[1]+2,indices[3]+2)+=ponderation*reg254; matrix(indices[4]+2,indices[7]+1)+=ponderation*reg609; matrix(indices[1]+2,indices[4]+0)+=ponderation*reg606; matrix(indices[1]+2,indices[4]+1)+=ponderation*reg608; matrix(indices[4]+2,indices[7]+0)+=ponderation*reg580;
    matrix(indices[1]+2,indices[4]+2)+=ponderation*reg353; matrix(indices[1]+2,indices[5]+0)+=ponderation*reg579; matrix(indices[4]+2,indices[6]+2)+=ponderation*reg351; matrix(indices[1]+2,indices[5]+1)+=ponderation*reg581; matrix(indices[1]+2,indices[5]+2)+=ponderation*reg352;
    matrix(indices[4]+2,indices[6]+1)+=ponderation*reg587; matrix(indices[1]+2,indices[6]+0)+=ponderation*reg387; matrix(indices[1]+2,indices[6]+1)+=ponderation*reg586; matrix(indices[4]+2,indices[6]+0)+=ponderation*reg592;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[1]; T reg1=1-var_inter[0]; T reg2=1-var_inter[2]; T reg3=reg0*reg1; T reg4=reg0*var_inter[0];
    T reg5=reg2*reg1; T reg6=reg2*reg0; T reg7=reg2*var_inter[0]; T reg8=reg3*elem.pos(0)[2]; T reg9=reg4*elem.pos(1)[2];
    T reg10=elem.pos(1)[1]*reg7; T reg11=elem.pos(0)[1]*reg5; T reg12=reg3*elem.pos(0)[1]; T reg13=reg4*elem.pos(1)[1]; T reg14=elem.pos(1)[2]*reg7;
    T reg15=elem.pos(1)[2]*reg6; T reg16=elem.pos(0)[2]*reg6; T reg17=reg2*var_inter[1]; T reg18=var_inter[0]*var_inter[1]; T reg19=elem.pos(1)[1]*reg6;
    T reg20=elem.pos(0)[1]*reg6; T reg21=elem.pos(0)[2]*reg5; reg15=reg15-reg16; T reg22=elem.pos(2)[1]*reg17; T reg23=reg18*elem.pos(2)[1];
    T reg24=reg1*var_inter[1]; T reg25=elem.pos(2)[2]*reg17; T reg26=reg12+reg13; reg19=reg19-reg20; T reg27=reg14+reg21;
    T reg28=elem.pos(2)[2]*reg7; T reg29=reg9+reg8; T reg30=reg18*elem.pos(2)[2]; T reg31=reg11+reg10; T reg32=elem.pos(2)[1]*reg7;
    T reg33=reg1*var_inter[2]; T reg34=reg0*var_inter[2]; T reg35=elem.pos(1)[0]*reg7; T reg36=elem.pos(0)[0]*reg5; reg22=reg19+reg22;
    reg19=elem.pos(3)[1]*reg5; T reg37=elem.pos(3)[2]*reg5; reg28=reg28-reg27; reg32=reg32-reg31; T reg38=reg24*elem.pos(3)[2];
    T reg39=reg29+reg30; T reg40=elem.pos(3)[1]*reg17; T reg41=elem.pos(0)[0]*reg6; T reg42=elem.pos(3)[2]*reg17; reg25=reg15+reg25;
    reg15=reg24*elem.pos(3)[1]; T reg43=reg26+reg23; T reg44=elem.pos(1)[0]*reg6; T reg45=reg3*elem.pos(0)[0]; T reg46=reg4*elem.pos(1)[0];
    T reg47=reg36+reg35; reg25=reg25-reg42; T reg48=elem.pos(4)[2]*reg34; T reg49=elem.pos(4)[2]*reg33; reg37=reg28+reg37;
    reg19=reg32+reg19; reg28=reg3*elem.pos(4)[2]; reg32=reg39+reg38; T reg50=elem.pos(4)[1]*reg33; T reg51=reg3*elem.pos(4)[1];
    T reg52=reg43+reg15; reg44=reg44-reg41; T reg53=elem.pos(2)[0]*reg17; T reg54=var_inter[0]*var_inter[2]; reg22=reg22-reg40;
    T reg55=elem.pos(4)[1]*reg34; T reg56=elem.pos(2)[0]*reg7; reg19=reg19-reg50; T reg57=elem.pos(5)[1]*reg54; T reg58=elem.pos(3)[0]*reg5;
    reg56=reg56-reg47; T reg59=reg4*elem.pos(5)[2]; reg28=reg28-reg32; T reg60=reg4*elem.pos(5)[1]; reg51=reg51-reg52;
    reg53=reg44+reg53; reg44=elem.pos(3)[0]*reg17; T reg61=var_inter[1]*var_inter[2]; reg37=reg37-reg49; T reg62=elem.pos(5)[2]*reg34;
    reg25=reg25-reg48; T reg63=elem.pos(5)[2]*reg54; T reg64=elem.pos(5)[1]*reg34; reg22=reg22-reg55; T reg65=reg45+reg46;
    T reg66=reg18*elem.pos(2)[0]; T reg67=elem.pos(6)[1]*reg54; reg19=reg19-reg57; reg59=reg28+reg59; reg28=elem.pos(6)[2]*reg54;
    reg60=reg51+reg60; reg51=reg18*elem.pos(6)[1]; reg37=reg37-reg63; T reg68=reg18*elem.pos(6)[2]; T reg69=reg24*elem.pos(3)[0];
    T reg70=reg65+reg66; T reg71=elem.pos(6)[1]*reg61; T reg72=elem.pos(4)[0]*reg34; reg62=reg25+reg62; reg25=elem.pos(6)[2]*reg61;
    reg53=reg53-reg44; T reg73=elem.pos(4)[0]*reg33; reg58=reg56+reg58; reg64=reg22+reg64; reg28=reg37+reg28;
    reg22=elem.pos(7)[2]*reg33; reg37=reg24*elem.pos(7)[1]; reg51=reg60+reg51; reg56=reg70+reg69; reg60=reg3*elem.pos(4)[0];
    reg53=reg53-reg72; T reg74=elem.pos(5)[0]*reg34; reg68=reg59+reg68; reg71=reg64+reg71; reg59=elem.pos(7)[1]*reg61;
    reg25=reg62+reg25; reg62=elem.pos(7)[2]*reg61; reg58=reg58-reg73; reg64=elem.pos(5)[0]*reg54; T reg75=elem.pos(7)[1]*reg33;
    reg67=reg19+reg67; reg19=reg24*elem.pos(7)[2]; reg37=reg51+reg37; reg51=1+(*f.m).poisson_ratio; reg74=reg53+reg74;
    reg53=reg4*elem.pos(5)[0]; reg60=reg60-reg56; T reg76=elem.pos(6)[0]*reg61; T reg77=elem.pos(6)[0]*reg54; reg58=reg58-reg64;
    reg75=reg67+reg75; reg25=reg25-reg62; reg71=reg71-reg59; reg22=reg28+reg22; reg19=reg68+reg19;
    reg51=reg51/(*f.m).elastic_modulus; reg28=elem.pos(7)[0]*reg33; reg77=reg58+reg77; reg58=elem.pos(7)[0]*reg61; reg76=reg74+reg76;
    reg67=reg25*reg37; reg68=reg22*reg37; reg74=reg71*reg19; T reg78=reg75*reg19; reg53=reg60+reg53;
    reg60=reg18*elem.pos(6)[0]; T reg79=reg25*reg75; T reg80=reg71*reg22; reg67=reg74-reg67; reg68=reg78-reg68;
    reg74=pow(reg51,2); reg78=reg24*elem.pos(7)[0]; reg60=reg53+reg60; reg28=reg77+reg28; reg76=reg76-reg58;
    reg53=1.0/(*f.m).elastic_modulus; reg77=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg51=reg51*reg74; reg79=reg80-reg79; reg80=reg28*reg67;
    reg78=reg60+reg78; reg60=reg76*reg68; T reg81=reg53*reg74; T reg82=reg53*reg51; reg51=reg77*reg51;
    T reg83=reg25*reg78; T reg84=reg76*reg19; T reg85=reg22*reg78; reg19=reg28*reg19; reg74=reg77*reg74;
    T reg86=reg78*reg79; reg80=reg60-reg80; reg60=reg28*reg37; reg85=reg19-reg85; reg19=reg77*reg81;
    T reg87=reg53*reg82; reg25=reg25*reg28; reg81=reg53*reg81; reg22=reg76*reg22; reg86=reg80+reg86;
    reg80=reg71*reg78; reg83=reg84-reg83; reg84=reg77*reg51; reg37=reg76*reg37; reg82=reg77*reg82;
    T reg88=reg77*reg74; reg78=reg75*reg78; reg51=reg53*reg51; reg82=reg84+reg82; reg74=reg53*reg74;
    reg87=reg87-reg84; reg85=reg85/reg86; reg68=reg68/reg86; reg78=reg60-reg78; reg67=reg67/reg86;
    reg83=reg83/reg86; reg80=reg37-reg80; reg19=reg88+reg19; reg75=reg76*reg75; reg25=reg22-reg25;
    reg28=reg71*reg28; reg81=reg81-reg88; reg22=reg68*reg17; reg37=reg88+reg74; reg81=reg53*reg81;
    reg60=reg54*reg67; reg71=reg54*reg83; reg76=reg5*reg83; reg19=reg77*reg19; reg51=reg84+reg51;
    reg84=reg85*reg17; T reg89=reg85*reg34; T reg90=reg5*reg67; T reg91=reg68*reg34; reg53=reg53*reg87;
    reg78=reg78/reg86; T reg92=reg77*reg82; reg80=reg80/reg86; reg28=reg75-reg28; reg79=reg79/reg86;
    reg25=reg25/reg86; reg75=reg24*reg79; T reg93=reg54*reg80; T reg94=reg7*reg80; T reg95=reg4*reg25;
    T reg96=reg7*reg83; T reg97=reg68*reg61; T reg98=reg4*reg79; T reg99=reg7*reg67; T reg100=reg85*reg61;
    T reg101=reg61*reg78; T reg102=reg89+reg71; T reg103=reg91+reg60; T reg104=reg33*reg80; T reg105=reg34*reg78;
    T reg106=reg90+reg22; T reg107=reg76+reg84; T reg108=reg24*reg25; T reg109=reg33*reg67; T reg110=reg33*reg83;
    T reg111=reg17*reg78; T reg112=reg6*reg85; reg37=reg77*reg37; reg19=reg81-reg19; reg81=reg6*reg78;
    T reg113=reg5*reg80; reg92=reg53-reg92; reg77=reg77*reg51; reg53=reg6*reg68; reg28=reg28/reg86;
    T reg114=reg53+reg99; T reg115=reg3*reg28; T reg116=reg96-reg84; T reg117=reg97-reg60; T reg118=reg106+reg75;
    T reg119=reg112+reg96; T reg120=reg3*reg25; T reg121=reg18*reg79; T reg122=reg22-reg99; T reg123=reg104-reg105;
    T reg124=reg4*reg28; T reg125=reg112-reg76; T reg126=reg81+reg94; reg37=reg19-reg37; reg19=reg90-reg53;
    reg103=reg98+reg103; T reg127=reg3*reg79; T reg128=reg105+reg93; T reg129=reg95+reg102; T reg130=reg113+reg111;
    T reg131=reg104+reg101; T reg132=reg24*reg28; T reg133=reg110+reg100; T reg134=reg109+reg97; T reg135=reg109-reg91;
    T reg136=reg111-reg94; reg77=reg92-reg77; reg92=reg18*reg28; T reg137=reg18*reg25; T reg138=reg101-reg93;
    T reg139=reg113-reg81; T reg140=reg89-reg110; reg107=reg107+reg108; T reg141=reg71-reg100; reg19=reg19-reg127;
    T reg142=reg132+reg130; T reg143=0.5*reg118; reg116=reg116+reg137; T reg144=0.5*reg107; reg140=reg140-reg120;
    reg37=reg37/reg77; reg135=reg127+reg135; reg123=reg115+reg123; reg136=reg136-reg92; reg122=reg122-reg121;
    reg139=reg139-reg115; T reg145=reg132-reg131; reg133=reg133-reg108; T reg146=reg75-reg134; reg138=reg92+reg138;
    reg141=reg141-reg137; reg117=reg121+reg117; reg114=reg114-reg98; reg125=reg125+reg120; T reg147=reg95-reg119;
    T reg148=0.5*reg103; reg128=reg124+reg128; reg126=reg126-reg124; T reg149=0.5*reg129; T reg150=0.5*reg146;
    T reg151=reg37*reg144; T reg152=0.5*reg145; T reg153=reg37*reg149; T reg154=0.5*reg142; T reg155=0.5*reg122;
    T reg156=0.5*reg139; T reg157=0.5*reg133; T reg158=reg37*reg143; T reg159=0.5*reg114; T reg160=0.5*reg19;
    reg87=reg87/reg77; T reg161=0.5*reg136; T reg162=0.5*reg117; T reg163=0.5*reg138; T reg164=0.5*reg141;
    T reg165=0.5*reg140; T reg166=0.5*reg123; T reg167=0.5*reg147; T reg168=0.5*reg116; T reg169=reg37*reg148;
    T reg170=0.5*reg128; T reg171=0.5*reg125; T reg172=0.5*reg135; T reg173=0.5*reg126; reg169=2*reg169;
    reg151=2*reg151; T reg174=reg37*reg152; T reg175=reg37*reg170; T reg176=reg87*reg128; T reg177=reg37*reg150;
    T reg178=reg87*reg118; T reg179=reg87*reg107; T reg180=reg37*reg166; T reg181=reg37*reg157; T reg182=reg37*reg154;
    T reg183=reg37*reg172; T reg184=reg87*reg129; T reg185=2*reg158; T reg186=2*reg153; T reg187=reg37*reg162;
    T reg188=reg87*reg142; T reg189=reg87*reg103; T reg190=reg37*reg165; T reg191=reg37*reg163; T reg192=reg37*reg164;
    T reg193=reg37*reg160; T reg194=reg37*reg168; T reg195=reg37*reg156; T reg196=reg37*reg161; T reg197=reg37*reg159;
    T reg198=reg37*reg167; reg82=reg82/reg77; reg77=reg51/reg77; reg51=reg37*reg171; T reg199=reg37*reg173;
    T reg200=reg37*reg155; reg187=2*reg187; T reg201=reg82*reg135; T reg202=reg77*reg123; T reg203=reg87*reg136;
    reg183=2*reg183; T reg204=reg77*reg126; T reg205=reg77*reg138; T reg206=reg87*reg140; T reg207=reg82*reg114;
    T reg208=reg118*reg189; T reg209=reg144*reg186; reg180=2*reg180; T reg210=reg87*reg138; T reg211=reg128*reg188;
    T reg212=reg87*reg146; T reg213=reg87*reg122; T reg214=reg87*reg126; T reg215=reg87*reg114; T reg216=reg87*reg116;
    T reg217=reg87*reg117; T reg218=reg129*reg179; T reg219=reg185*reg148; T reg220=reg87*reg123; T reg221=reg82*reg122;
    reg198=2*reg198; T reg222=reg77*reg139; reg192=2*reg192; T reg223=reg82*reg129; T reg224=reg77*reg129;
    reg175=2*reg175; T reg225=reg82*reg118; reg199=2*reg199; reg193=2*reg193; reg191=2*reg191;
    T reg226=reg87*reg19; reg197=2*reg197; T reg227=reg77*reg107; T reg228=reg87*reg147; T reg229=reg142*reg176;
    T reg230=reg77*reg142; T reg231=reg87*reg139; T reg232=reg87*reg125; reg51=2*reg51; reg174=2*reg174;
    T reg233=reg82*reg107; T reg234=reg82*reg117; T reg235=reg87*reg145; T reg236=reg82*reg19; T reg237=2*reg182;
    reg200=2*reg200; T reg238=reg87*reg141; reg177=2*reg177; T reg239=reg87*reg133; T reg240=reg77*reg136;
    T reg241=reg77*reg145; T reg242=reg82*reg146; T reg243=reg77*reg128; reg196=2*reg196; T reg244=reg87*reg135;
    reg195=2*reg195; reg194=2*reg194; reg181=2*reg181; T reg245=reg143*reg169; T reg246=reg107*reg184;
    T reg247=reg178*reg103; T reg248=reg82*reg103; reg190=2*reg190; T reg249=reg151*reg149; T reg250=reg151*reg165;
    T reg251=reg230*reg135; T reg252=reg240*reg118; T reg253=reg197*reg162; T reg254=reg133*reg184; T reg255=reg51*reg167;
    T reg256=reg139*reg210; T reg257=reg144*reg185; T reg258=reg126*reg203; T reg259=reg144*reg190; T reg260=reg128*reg210;
    T reg261=reg169*reg150; T reg262=reg190*reg157; T reg263=reg118*reg244; T reg264=reg128*reg176; T reg265=reg126*reg188;
    T reg266=reg126*reg214; T reg267=reg226*reg114; T reg268=reg77*reg141; T reg269=reg198*reg165; T reg270=reg185*reg152;
    T reg271=reg230*reg146; T reg272=reg215*reg135; T reg273=reg126*reg225; T reg274=reg183*reg150; T reg275=reg159*reg237;
    T reg276=reg118*reg178; T reg277=reg144*reg151; T reg278=reg77*reg133; T reg279=reg244*reg146; T reg280=reg133*reg206;
    T reg281=reg243*reg118; T reg282=reg194*reg165; T reg283=reg200*reg154; T reg284=reg213*reg135; T reg285=reg139*reg176;
    T reg286=reg178*reg135; T reg287=reg139*reg235; T reg288=reg118*reg233; T reg289=reg126*reg176; T reg290=reg226*reg118;
    T reg291=reg51*reg144; T reg292=reg219+reg211; T reg293=reg141*reg179; T reg294=reg133*reg239; T reg295=reg150*reg177;
    T reg296=reg140*reg232; T reg297=reg77*reg147; T reg298=reg193*reg172; T reg299=reg136*reg235; T reg300=reg185*reg162;
    T reg301=reg126*reg210; T reg302=reg237*reg148; T reg303=reg139*reg231; T reg304=reg140*reg228; T reg305=reg183*reg162;
    T reg306=reg141*reg206; T reg307=reg126*reg235; T reg308=reg185*reg172; T reg309=reg140*reg179; T reg310=reg136*reg176;
    T reg311=reg125*reg239; T reg312=reg160*reg177; T reg313=reg200*reg172; T reg314=reg140*reg216; T reg315=reg128*reg203;
    T reg316=reg136*reg210; T reg317=reg213*reg146; T reg318=reg194*reg157; T reg319=reg77*reg125; T reg320=reg128*reg225;
    T reg321=reg197*reg172; T reg322=reg178*reg146; T reg323=reg151*reg157; T reg324=reg204*reg118; T reg325=reg165*reg186;
    T reg326=reg135*reg189; T reg327=reg197*reg154; T reg328=reg200*reg162; T reg329=reg77*reg140; T reg330=reg128*reg224;
    T reg331=reg141*reg216; T reg332=reg194*reg144; T reg333=reg149*reg175; T reg334=reg139*reg220; T reg335=reg213*reg118;
    T reg336=reg165*reg190; T reg337=reg135*reg244; T reg338=reg185*reg166; T reg339=reg165*reg181; T reg340=reg135*reg212;
    T reg341=reg77*reg116; T reg342=reg222*reg118; T reg343=reg193*reg154; T reg344=reg139*reg203; T reg345=reg198*reg144;
    T reg346=reg215*reg118; T reg347=reg139*reg225; T reg348=reg160*reg237; T reg349=reg165*reg192; T reg350=reg135*reg217;
    T reg351=reg187*reg150; T reg352=reg128*reg220; T reg353=reg133*reg238; T reg354=reg139*reg188; T reg355=reg126*reg220;
    T reg356=reg193*reg159; T reg357=reg147*reg232; T reg358=reg133*reg232; T reg359=reg190*reg164; T reg360=reg244*reg117;
    T reg361=reg193*reg150; T reg362=reg107*reg238; T reg363=reg143*reg187; T reg364=reg185*reg163; T reg365=reg138*reg214;
    T reg366=reg230*reg117; T reg367=reg107*reg239; T reg368=reg143*reg177; T reg369=reg147*reg238; T reg370=reg167*reg181;
    T reg371=reg114*reg212; T reg372=reg144*reg181; T reg373=reg118*reg212; T reg374=reg142*reg214; T reg375=reg197*reg150;
    T reg376=reg133*reg228; T reg377=reg114*reg217; T reg378=reg167*reg192; T reg379=reg199*reg143; T reg380=reg142*reg207;
    T reg381=reg142*reg231; T reg382=reg178*reg117; T reg383=reg151*reg164; T reg384=reg154*reg177; T reg385=reg118*reg241;
    T reg386=reg195*reg143; T reg387=reg142*reg236; T reg388=reg138*reg203; T reg389=reg164*reg192; T reg390=reg117*reg217;
    T reg391=reg138*reg176; T reg392=reg138*reg220; T reg393=reg159*reg185; T reg394=reg147*reg179; T reg395=reg146*reg212;
    T reg396=reg157*reg181; T reg397=reg147*reg206; T reg398=reg159*reg183; T reg399=reg107*reg179; T reg400=reg143*reg185;
    T reg401=reg159*reg200; T reg402=reg147*reg216; T reg403=reg197*reg143; T reg404=reg107*reg230; T reg405=reg164*reg181;
    T reg406=reg217*reg146; T reg407=reg117*reg212; T reg408=reg107*reg232; T reg409=reg246+reg245; T reg410=reg159*reg169;
    T reg411=reg147*reg184; T reg412=reg192*reg157; T reg413=reg193*reg143; T reg414=reg147*reg228; T reg415=reg159*reg197;
    T reg416=reg143*reg183; T reg417=reg107*reg206; T reg418=reg189*reg117; T reg419=reg186*reg164; T reg420=reg107*reg228;
    T reg421=reg151*reg154; T reg422=reg143*reg175; T reg423=reg198*reg164; T reg424=reg215*reg117; T reg425=reg126*reg231;
    reg229=reg245+reg229; reg245=reg142*reg234; T reg426=reg143*reg191; T reg427=reg154*reg175; T reg428=reg167*reg194;
    T reg429=reg114*reg213; reg208=reg209+reg208; T reg430=reg142*reg210; T reg431=reg133*reg179; T reg432=reg185*reg150;
    T reg433=reg142*reg242; T reg434=reg143*reg174; T reg435=reg51*reg165; T reg436=reg226*reg135; T reg437=reg200*reg143;
    T reg438=reg142*reg235; T reg439=reg128*reg235; T reg440=reg107*reg216; T reg441=reg141*reg228; T reg442=reg151*reg143;
    T reg443=reg107*reg225; T reg444=reg226*reg117; T reg445=reg51*reg164; T reg446=reg129*reg238; T reg447=reg114*reg215;
    T reg448=reg167*reg198; T reg449=reg148*reg187; T reg450=reg118*reg202; T reg451=reg154*reg183; T reg452=reg142*reg221;
    T reg453=reg196*reg143; T reg454=reg147*reg239; T reg455=reg167*reg186; T reg456=reg114*reg189; T reg457=reg159*reg177;
    T reg458=reg142*reg203; T reg459=reg154*reg187; T reg460=reg194*reg164; T reg461=reg213*reg117; T reg462=reg186*reg157;
    T reg463=reg118*reg205; T reg464=reg144*reg237; T reg465=reg142*reg227; T reg466=reg189*reg146; T reg467=reg142*reg188;
    T reg468=reg142*reg248; T reg469=reg114*reg178; T reg470=reg167*reg151; T reg471=reg154*reg169; T reg472=reg142*reg220;
    T reg473=reg144*reg192; T reg474=reg118*reg217; T reg475=reg193*reg162; T reg476=reg200*reg150; T reg477=reg114*reg230;
    T reg478=reg173*reg185; T reg479=reg143*reg180; T reg480=reg142*reg201; T reg481=reg133*reg216; T reg482=reg141*reg232;
    T reg483=reg114*reg244; T reg484=reg167*reg190; T reg485=reg129*reg206; T reg486=reg19*reg226; T reg487=reg183*reg148;
    T reg488=reg82*reg133; T reg489=reg141*reg239; T reg490=reg123*reg210; T reg491=reg138*reg235; T reg492=reg171*reg51;
    T reg493=reg171*reg181; T reg494=reg193*reg155; T reg495=reg19*reg212; T reg496=reg116*reg232; T reg497=reg82*reg125;
    T reg498=reg162*reg177; T reg499=reg145*reg220; T reg500=reg155*reg187; T reg501=reg116*reg238; T reg502=reg123*reg235;
    T reg503=reg193*reg148; T reg504=reg82*reg141; T reg505=reg226*reg103; T reg506=reg51*reg149; T reg507=reg122*reg189;
    T reg508=reg138*reg188; T reg509=reg149*reg181; reg235=reg145*reg235; T reg510=reg168*reg186; T reg511=reg171*reg192;
    T reg512=reg103*reg212; T reg513=reg123*reg203; T reg514=reg122*reg178; T reg515=reg243*reg129; T reg516=reg123*reg225;
    T reg517=reg237*reg172; T reg518=reg168*reg151; T reg519=reg186*reg170; T reg520=reg160*reg197; T reg521=reg125*reg228;
    T reg522=reg136*reg231; T reg523=reg123*reg188; T reg524=reg129*reg184; T reg525=reg148*reg169; T reg526=reg145*reg188;
    T reg527=reg51*reg157; T reg528=reg129*reg248; T reg529=reg160*reg193; T reg530=reg125*reg232; T reg531=reg123*reg220;
    T reg532=reg226*reg146; T reg533=reg186*reg148; T reg534=reg122*reg230; T reg535=reg161*reg185; T reg536=reg123*reg176;
    T reg537=reg122*reg244; T reg538=reg139*reg214; T reg539=reg168*reg190; T reg540=reg155*reg177; T reg541=reg116*reg239;
    T reg542=reg149*reg169; T reg543=reg103*reg223; T reg544=reg19*reg213; T reg545=reg200*reg148; T reg546=reg171*reg190;
    T reg547=reg171*reg194; T reg548=reg19*reg244; T reg549=reg138*reg225; T reg550=reg149*reg186; T reg551=reg103*reg189;
    T reg552=reg197*reg148; T reg553=reg247+reg249; T reg554=reg237*reg170; T reg555=reg156*reg185; T reg556=reg19*reg230;
    T reg557=reg138*reg210; T reg558=reg82*reg116; T reg559=reg129*reg228; T reg560=reg230*reg103; T reg561=reg185*reg170;
    T reg562=reg168*reg181; reg212=reg122*reg212; reg244=reg244*reg103; T reg563=reg171*reg151; reg210=reg145*reg210;
    T reg564=reg116*reg179; T reg565=reg155*reg185; T reg566=reg19*reg178; T reg567=reg190*reg149; reg232=reg129*reg232;
    reg228=reg116*reg228; T reg568=reg197*reg155; T reg569=reg19*reg217; T reg570=reg19*reg215; reg218=reg219+reg218;
    T reg571=reg215*reg103; T reg572=reg198*reg149; T reg573=reg171*reg198; T reg574=reg155*reg169; T reg575=reg116*reg184;
    T reg576=reg171*reg186; T reg577=reg82*reg147; T reg578=reg116*reg216; reg189=reg19*reg189; T reg579=reg149*reg192;
    T reg580=reg103*reg217; T reg581=reg155*reg200; T reg582=reg213*reg103; T reg583=reg194*reg149; reg176=reg145*reg176;
    reg217=reg122*reg217; T reg584=reg168*reg192; T reg585=reg82*reg140; T reg586=reg155*reg183; T reg587=reg129*reg216;
    T reg588=reg116*reg206; T reg589=reg138*reg231; T reg590=reg237*reg162; T reg591=reg141*reg184; T reg592=reg198*reg157;
    T reg593=reg215*reg146; T reg594=reg160*reg183; T reg595=reg125*reg206; T reg596=reg169*reg162; T reg597=reg140*reg239;
    T reg598=reg172*reg177; T reg599=reg155*reg237; T reg600=reg136*reg225; T reg601=reg136*reg203; reg213=reg122*reg213;
    T reg602=reg168*reg194; T reg603=reg160*reg185; reg179=reg125*reg179; T reg604=reg123*reg231; reg239=reg129*reg239;
    T reg605=reg148*reg177; reg203=reg145*reg203; T reg606=reg145*reg231; reg226=reg226*reg122; T reg607=reg51*reg168;
    T reg608=reg128*reg214; reg206=reg140*reg206; T reg609=reg172*reg183; T reg610=reg160*reg187; T reg611=reg125*reg238;
    reg220=reg136*reg220; T reg612=reg140*reg184; T reg613=reg172*reg169; T reg614=reg160*reg169; T reg615=reg125*reg184;
    T reg616=reg136*reg188; reg231=reg128*reg231; T reg617=reg140*reg238; T reg618=reg172*reg187; T reg619=reg145*reg214;
    reg215=reg215*reg122; T reg620=reg198*reg168; T reg621=reg159*reg187; T reg622=reg136*reg214; T reg623=reg162*reg187;
    reg238=reg141*reg238; T reg624=reg145*reg225; reg216=reg125*reg216; T reg625=reg160*reg200; reg214=reg123*reg214;
    T reg626=reg237*reg150; T reg627=reg136*reg201; reg283=reg252+reg283; T reg628=reg155*reg180; reg588=reg588+reg586;
    T reg629=reg117*reg488; reg365=reg365+reg253; T reg630=reg141*reg248; T reg631=reg138*reg221; T reg632=reg549+reg590;
    T reg633=reg196*reg162; T reg634=reg163*reg174; reg407=reg407+reg405; T reg635=reg168*reg180; T reg636=reg116*reg240;
    T reg637=reg151*reg163; T reg638=reg204*reg107; T reg639=reg136*reg329; T reg640=reg107*reg236; T reg641=reg230*reg141;
    T reg642=reg202*reg141; T reg643=reg51*reg143; T reg644=reg154*reg174; T reg645=reg144*reg177; T reg646=reg199*reg162;
    T reg647=reg163*reg177; T reg648=reg117*reg241; reg299=reg540+reg299; T reg649=reg565+reg616; T reg650=reg186*reg162;
    T reg651=reg200*reg144; T reg652=reg199*reg164; reg578=reg578+reg581; T reg653=reg195*reg164; T reg654=reg138*reg319;
    T reg655=reg196*reg164; T reg656=reg161*reg190; reg293=reg293-reg300; T reg657=reg138*reg341; T reg658=reg136*reg278;
    T reg659=reg168*reg174; T reg660=reg116*reg202; T reg661=reg138*reg297; T reg662=reg164*reg177; T reg663=reg155*reg174;
    T reg664=reg136*reg242; reg306=reg306+reg305; T reg665=reg199*reg155; reg420=reg420-reg403; T reg666=reg116*reg230;
    T reg667=reg138*reg207; T reg668=reg164*reg187; T reg669=reg155*reg151; T reg670=reg136*reg207; T reg671=reg117*reg504;
    T reg672=reg558*reg118; T reg673=reg141*reg221; T reg674=reg198*reg154; T reg675=reg107*reg221; reg522=reg494+reg522;
    T reg676=reg194*reg143; T reg677=reg163*reg191; reg390=reg390+reg389; T reg678=reg194*reg162; T reg679=reg180*reg164;
    reg388=reg388+reg328; reg238=reg238+reg623; T reg680=reg138*reg224; T reg681=reg168*reg175; reg564=reg564-reg565;
    T reg682=reg136*reg224; T reg683=reg222*reg116; T reg684=reg194*reg161; reg316=reg500+reg316; reg220=reg586+reg220;
    reg586=reg190*reg163; T reg685=reg136*reg248; T reg686=reg155*reg175; T reg687=reg136*reg268; T reg688=reg168*reg191;
    T reg689=reg141*reg201; T reg690=reg190*reg162; reg408=reg408-reg413; T reg691=reg222*reg107; T reg692=reg155*reg191;
    reg589=reg475+reg589; T reg693=reg51*reg154; T reg694=reg163*reg187; T reg695=reg117*reg205; T reg696=reg155*reg190;
    T reg697=reg116*reg201; T reg698=reg107*reg207; T reg699=reg198*reg143; T reg700=reg136*reg234; reg310=reg574+reg310;
    T reg701=reg116*reg225; T reg702=reg161*reg151; T reg703=reg116*reg242; T reg704=reg118*reg585; T reg705=reg198*reg162;
    T reg706=reg243*reg141; T reg707=reg116*reg207; T reg708=reg198*reg155; T reg709=reg186*reg163; reg451=reg450+reg451;
    T reg710=reg141*reg242; T reg711=reg199*reg154; reg601=reg581+reg601; reg581=reg141*reg207; T reg712=reg198*reg163;
    reg489=reg489+reg498; T reg713=reg161*reg192; T reg714=reg116*reg205; reg500=reg501+reg500; reg346=reg345-reg346;
    reg501=reg136*reg297; T reg715=reg600+reg599; T reg716=reg208+reg427; T reg717=reg222*reg141; T reg718=reg144*reg169;
    T reg719=reg240*reg141; T reg720=reg596-reg591; T reg721=reg141*reg234; reg327=reg324+reg327; reg253=reg441+reg253;
    reg441=reg154*reg185; T reg722=reg136*reg221; T reg723=reg161*reg181; T reg724=reg116*reg241; T reg725=reg162*reg181;
    reg540=reg541+reg540; reg541=reg196*reg155; T reg726=reg192*reg162; reg263=reg259-reg263; T reg727=reg154*reg180;
    reg328=reg331+reg328; reg331=reg118*reg230; T reg728=reg168*reg196; reg622=reg568+reg622; T reg729=reg577*reg118;
    reg288=reg257+reg288; T reg730=reg197*reg144; T reg731=reg155*reg181; T reg732=reg194*reg163; T reg733=reg144*reg183;
    T reg734=reg136*reg341; T reg735=reg51*reg161; T reg736=reg116*reg234; T reg737=reg161*reg186; T reg738=reg144*reg187;
    T reg739=reg118*reg504; T reg740=reg116*reg243; T reg741=reg195*reg168; reg335=reg332-reg335; T reg742=reg138*reg236;
    T reg743=reg136*reg319; T reg744=reg195*reg162; reg574=reg574-reg575; T reg745=reg192*reg163; reg459=reg463+reg459;
    T reg746=reg51*reg162; T reg747=reg196*reg154; T reg748=reg155*reg186; T reg749=reg204*reg116; T reg750=reg198*reg161;
    T reg751=reg141*reg236; T reg752=reg138*reg227; T reg753=reg116*reg248; T reg754=reg277+reg276; T reg755=reg237*reg164;
    reg373=reg372-reg373; T reg756=reg116*reg221; T reg757=reg163*reg181; T reg758=reg118*reg223; T reg759=reg136*reg236;
    reg343=reg342+reg343; T reg760=reg51*reg163; T reg761=reg195*reg155; T reg762=reg141*reg241; T reg763=reg141*reg205;
    T reg764=reg300+reg508; T reg765=reg141*reg225; reg471=reg281+reg471; reg475=reg482+reg475; reg482=reg204*reg141;
    T reg766=reg154*reg237; T reg767=reg199*reg168; reg474=reg473-reg474; T reg768=reg154*reg191; T reg769=reg497*reg118;
    T reg770=reg193*reg144; T reg771=reg151*reg162; T reg772=reg195*reg154; reg290=reg291-reg290; reg568=reg228+reg568;
    reg228=reg168*reg237; T reg773=reg136*reg227; T reg774=reg155*reg192; T reg775=reg123*reg297; T reg776=reg199*reg165;
    T reg777=reg199*reg172; T reg778=reg123*reg207; reg604=reg298+reg604; reg239=reg605-reg239; T reg779=reg123*reg319;
    T reg780=reg195*reg165; T reg781=reg170*reg181; T reg782=reg195*reg172; T reg783=reg123*reg236; T reg784=reg129*reg241;
    T reg785=reg140*reg241; T reg786=reg166*reg181; T reg787=reg128*reg236; reg597=reg597+reg598; T reg788=reg195*reg148;
    T reg789=reg172*reg181; T reg790=reg140*reg242; T reg791=reg128*reg319; T reg792=reg140*reg205; reg528=reg533+reg528;
    T reg793=reg123*reg329; T reg794=reg165*reg180; T reg795=reg180*reg172; T reg796=reg123*reg201; T reg797=reg308+reg523;
    T reg798=reg525+reg524; T reg799=reg123*reg227; T reg800=reg237*reg165; T reg801=reg516+reg517; T reg802=reg519+reg515;
    reg513=reg313+reg513; T reg803=reg123*reg341; T reg804=reg196*reg165; T reg805=reg170*reg192; T reg806=reg129*reg205;
    T reg807=reg196*reg172; T reg808=reg123*reg221; reg214=reg321+reg214; T reg809=reg148*reg181; T reg810=reg129*reg242;
    T reg811=reg151*reg166; T reg812=reg128*reg221; reg309=reg309-reg308; T reg813=reg196*reg148; T reg814=reg151*reg172;
    T reg815=reg140*reg225; T reg816=reg128*reg341; T reg817=reg240*reg140; T reg818=reg194*reg166; T reg819=reg196*reg149;
    reg313=reg314+reg313; reg314=reg194*reg172; T reg820=reg140*reg221; reg315=reg545+reg315; T reg821=reg204*reg140;
    T reg822=reg198*reg166; reg321=reg304+reg321; reg304=reg320+reg302; T reg823=reg198*reg172; T reg824=reg140*reg207;
    T reg825=reg222*reg140; T reg826=reg166*reg192; T reg827=reg195*reg149; reg617=reg617+reg618; T reg828=reg172*reg192;
    T reg829=reg140*reg234; reg231=reg503+reg231; T reg830=reg243*reg140; T reg831=reg166*reg186; T reg832=reg128*reg207;
    T reg833=reg613-reg612; T reg834=reg199*reg148; T reg835=reg172*reg186; T reg836=reg140*reg248; T reg837=reg128*reg297;
    T reg838=reg140*reg202; T reg839=reg190*reg166; T reg840=reg199*reg149; reg206=reg206+reg609; T reg841=reg190*reg172;
    T reg842=reg140*reg201; reg608=reg552+reg608; T reg843=reg230*reg140; T reg844=reg170*reg175; reg551=reg551+reg550;
    T reg845=reg183*reg170; T reg846=reg202*reg103; reg559=reg552-reg559; reg552=reg183*reg149; T reg847=reg585*reg103;
    T reg848=reg198*reg170; T reg849=reg180*reg170; reg244=reg244-reg567; T reg850=reg204*reg129; T reg851=reg560+reg561;
    T reg852=reg194*reg148; T reg853=reg185*reg149; T reg854=reg233*reg103; T reg855=reg129*reg221; T reg856=reg553+reg554;
    T reg857=reg200*reg170; T reg858=reg240*reg103; reg587=reg545-reg587; reg545=reg200*reg149; T reg859=reg51*reg148;
    T reg860=reg170*reg177; T reg861=reg103*reg241; T reg862=reg129*reg236; T reg863=reg149*reg177; T reg864=reg103*reg488;
    T reg865=reg170*reg174; reg512=reg512-reg509; reg232=reg503-reg232; reg503=reg170*reg187; T reg866=reg103*reg205;
    T reg867=reg149*reg187; T reg868=reg103*reg504; T reg869=reg51*reg170; T reg870=reg222*reg129; T reg871=reg170*reg191;
    reg580=reg580-reg579; T reg872=reg170*reg169; T reg873=reg243*reg103; T reg874=reg198*reg148; T reg875=reg129*reg207;
    reg542=reg543+reg542; T reg876=reg230*reg129; T reg877=reg123*reg278; T reg878=reg165*reg174; T reg879=reg172*reg174;
    T reg880=reg123*reg242; T reg881=reg190*reg148; T reg882=reg129*reg201; reg490=reg618+reg490; reg618=reg123*reg268;
    T reg883=reg165*reg191; T reg884=reg172*reg191; T reg885=reg123*reg234; reg485=reg487-reg485; reg536=reg613+reg536;
    reg613=reg190*reg170; T reg886=reg123*reg224; T reg887=reg165*reg175; T reg888=reg202*reg129; T reg889=reg172*reg175;
    T reg890=reg123*reg248; reg531=reg609+reg531; reg609=reg558*reg103; T reg891=reg196*reg170; reg582=reg582-reg583;
    T reg892=reg194*reg170; T reg893=reg240*reg129; T reg894=reg197*reg170; T reg895=reg204*reg103; T reg896=reg197*reg149;
    T reg897=reg577*reg103; T reg898=reg151*reg148; T reg899=reg129*reg225; T reg900=reg199*reg170; reg571=reg571-reg572;
    T reg901=reg193*reg170; T reg902=reg222*reg103; T reg903=reg193*reg149; T reg904=reg497*reg103; T reg905=reg554+reg218;
    T reg906=reg195*reg170; reg505=reg505-reg506; reg502=reg598+reg502; reg598=reg151*reg170; reg458=reg437+reg458;
    reg461=reg461+reg460; T reg907=reg196*reg163; T reg908=reg142*reg341; T reg909=reg196*reg144; reg453=reg452+reg453;
    reg452=reg558*reg117; T reg910=reg200*reg164; reg374=reg403+reg374; reg403=reg142*reg297; T reg911=reg199*reg144;
    T reg912=reg240*reg117; T reg913=reg200*reg163; reg379=reg380+reg379; reg381=reg413+reg381; reg380=reg142*reg319;
    reg413=reg195*reg144; T reg914=reg237*reg163; reg386=reg387+reg386; reg387=reg233*reg117; T reg915=reg154*reg181;
    T reg916=reg144*reg191; reg426=reg245+reg426; reg245=reg222*reg117; T reg917=reg193*reg163; reg229=reg209+reg229;
    T reg918=reg142*reg224; T reg919=reg144*reg175; reg422=reg468+reg422; reg424=reg424+reg423; reg468=reg199*reg163;
    reg472=reg416+reg472; T reg920=reg142*reg329; T reg921=reg144*reg180; T reg922=reg577*reg117; T reg923=reg197*reg164;
    reg479=reg480+reg479; reg480=reg400+reg467; T reg924=reg204*reg117; T reg925=reg197*reg163; reg465=reg464+reg465;
    T reg926=reg237*reg143; T reg927=reg142*reg225; T reg928=reg202*reg117; T reg929=reg183*reg163; reg416=reg417-reg416;
    reg417=reg143*reg190; T reg930=reg107*reg201; reg421=reg404+reg421; reg418=reg418-reg419; T reg931=reg175*reg163;
    reg399=reg399+reg400; reg442=reg443+reg442; T reg932=reg223*reg117; T reg933=reg169*reg164; reg437=reg440-reg437;
    reg440=reg175*reg164; T reg934=reg175*reg162; T reg935=reg138*reg248; T reg936=reg243*reg117; T reg937=reg169*reg163;
    reg305=reg392+reg305; reg392=reg138*reg329; reg596=reg391+reg596; reg391=reg107*reg241; T reg938=reg185*reg164;
    reg367=reg367-reg368; T reg939=reg143*reg181; T reg940=reg107*reg242; T reg941=reg366+reg364; T reg942=reg154*reg192;
    T reg943=reg107*reg205; reg362=reg362-reg363; T reg944=reg143*reg192; T reg945=reg107*reg234; reg360=reg360+reg359;
    T reg946=reg180*reg163; T reg947=reg154*reg186; T reg948=reg243*reg107; reg427=reg427+reg409; T reg949=reg585*reg117;
    T reg950=reg183*reg164; T reg951=reg143*reg186; T reg952=reg107*reg248; T reg953=reg154*reg190; T reg954=reg107*reg202;
    reg350=reg350+reg349; T reg955=reg166*reg169; T reg956=reg243*reg135; reg352=reg487+reg352; reg487=reg165*reg169;
    T reg957=reg135*reg223; T reg958=reg128*reg248; T reg959=reg166*reg175; reg326=reg326-reg325; T reg960=reg175*reg148;
    T reg961=reg166*reg183; T reg962=reg135*reg202; T reg963=reg165*reg183; T reg964=reg135*reg585; reg333=reg330+reg333;
    T reg965=reg166*reg180; reg337=reg337+reg336; T reg966=reg251+reg338; reg264=reg525+reg264; reg525=reg185*reg165;
    T reg967=reg233*reg135; T reg968=reg51*reg166; T reg969=reg128*reg227; T reg970=reg237*reg149; reg298=reg296+reg298;
    reg296=reg51*reg172; T reg971=reg140*reg236; T reg972=reg166*reg177; T reg973=reg135*reg241; reg249=reg249+reg292;
    T reg974=reg165*reg177; T reg975=reg135*reg488; T reg976=reg128*reg201; T reg977=reg166*reg174; reg340=reg340+reg339;
    T reg978=reg180*reg148; T reg979=reg166*reg187; T reg980=reg135*reg205; T reg981=reg128*reg329; T reg982=reg165*reg187;
    T reg983=reg135*reg504; T reg984=reg180*reg149; T reg985=reg166*reg191; T reg986=reg222*reg135; T reg987=reg193*reg165;
    T reg988=reg497*reg135; T reg989=reg128*reg278; T reg990=reg149*reg174; T reg991=reg195*reg166; reg436=reg436+reg435;
    reg438=reg368+reg438; reg439=reg605+reg439; reg368=reg142*reg278; reg605=reg144*reg174; T reg992=reg129*reg234;
    reg446=reg449-reg446; T reg993=reg148*reg192; reg444=reg444+reg445; T reg994=reg195*reg163; reg434=reg433+reg434;
    reg430=reg363+reg430; reg363=reg497*reg117; reg433=reg193*reg164; T reg995=reg142*reg268; T reg996=reg237*reg166;
    T reg997=reg250-reg286; T reg998=reg128*reg234; T reg999=reg148*reg191; T reg1000=reg200*reg166; T reg1001=reg240*reg135;
    T reg1002=reg200*reg165; T reg1003=reg558*reg135; T reg1004=reg128*reg268; T reg1005=reg149*reg191; T reg1006=reg196*reg166;
    reg284=reg284+reg282; T reg1007=reg197*reg166; T reg1008=reg204*reg135; reg260=reg449+reg260; reg449=reg197*reg165;
    T reg1009=reg577*reg135; T reg1010=reg199*reg166; reg272=reg272+reg269; T reg1011=reg128*reg242; T reg1012=reg148*reg174;
    T reg1013=reg193*reg166; reg611=reg611+reg610; T reg1014=reg187*reg157; reg397=reg397+reg398; T reg1015=reg145*reg207;
    T reg1016=reg504*reg146; T reg1017=reg173*reg190; T reg1018=reg160*reg192; T reg1019=reg125*reg234; T reg1020=reg147*reg202;
    T reg1021=reg199*reg150; T reg1022=reg191*reg152; T reg1023=reg147*reg248; T reg1024=reg159*reg186; T reg1025=reg125*reg243;
    T reg1026=reg156*reg186; reg406=reg406+reg412; reg384=reg385+reg384; T reg1027=reg169*reg157; T reg1028=reg156*reg190;
    T reg1029=reg125*reg202; T reg1030=reg125*reg248; T reg1031=reg118*reg488; T reg1032=reg160*reg186; T reg1033=reg243*reg146;
    T reg1034=reg145*reg297; T reg1035=reg159*reg192; T reg1036=reg147*reg234; T reg1037=reg169*reg152; T reg1038=reg614-reg615;
    T reg1039=reg147*reg243; T reg1040=reg173*reg186; T reg1041=reg199*reg157; T reg1042=reg410-reg411; T reg1043=reg195*reg157;
    T reg1044=reg147*reg240; T reg1045=reg173*reg194; T reg1046=reg152*reg174; T reg1047=reg156*reg181; T reg1048=reg125*reg241;
    reg402=reg402+reg401; T reg1049=reg146*reg488; T reg1050=reg195*reg150; T reg1051=reg159*reg194; T reg1052=reg147*reg221;
    T reg1053=reg139*reg236; T reg1054=reg157*reg177; T reg1055=reg195*reg160; T reg1056=reg147*reg204; T reg1057=reg145*reg236;
    T reg1058=reg198*reg173; reg606=reg361+reg606; T reg1059=reg159*reg190; T reg1060=reg147*reg201; T reg1061=reg156*reg192;
    T reg1062=reg205*reg146; T reg1063=reg125*reg205; T reg1064=reg147*reg230; T reg1065=reg173*reg151; T reg1066=reg187*reg152;
    T reg1067=reg125*reg242; T reg1068=reg160*reg181; reg394=reg394-reg393; T reg1069=reg145*reg319; T reg1070=reg159*reg151;
    T reg1071=reg147*reg225; reg311=reg311+reg312; reg395=reg395+reg396; T reg1072=reg271+reg270; T reg1073=reg125*reg221;
    T reg1074=reg160*reg194; T reg1075=reg126*reg341; reg216=reg216+reg625; T reg1076=reg167*reg196; T reg1077=reg159*reg196;
    T reg1078=reg126*reg221; reg279=reg279+reg262; reg266=reg266+reg415; reg203=reg476+reg203; T reg1079=reg383-reg382;
    T reg1080=reg139*reg248; T reg1081=reg180*reg152; reg369=reg621+reg369; T reg1082=reg125*reg240; T reg1083=reg194*reg154;
    T reg1084=reg237*reg152; T reg1085=reg160*reg198; T reg1086=reg159*reg180; T reg1087=reg126*reg201; T reg1088=reg145*reg227;
    T reg1089=reg237*reg157; reg521=reg521+reg520; T reg1090=reg393+reg265; T reg1091=reg233*reg146; T reg1092=reg185*reg157;
    T reg1093=reg126*reg227; T reg1094=reg167*reg237; T reg1095=reg156*reg198; T reg1096=reg125*reg204; T reg1097=reg624+reg626;
    T reg1098=reg273+reg275; reg258=reg401+reg258; reg401=reg195*reg159; T reg1099=reg126*reg236; T reg1100=reg147*reg241;
    T reg1101=reg196*reg150; T reg1102=reg125*reg201; T reg1103=reg173*reg181; reg466=reg466-reg462; T reg1104=reg160*reg190;
    reg454=reg454+reg457; T reg1105=reg175*reg152; T reg1106=reg145*reg221; T reg1107=reg159*reg181; T reg1108=reg147*reg242;
    reg595=reg595+reg594; T reg1109=reg223*reg146; T reg1110=reg147*reg205; reg619=reg375+reg619; T reg1111=reg240*reg107;
    T reg1112=reg585*reg146; T reg1113=reg125*reg225; T reg1114=reg160*reg151; T reg1115=reg199*reg159; T reg1116=reg126*reg207;
    T reg1117=reg183*reg157; T reg1118=reg145*reg341; reg425=reg356+reg425; reg179=reg179-reg603; T reg1119=reg202*reg146;
    T reg1120=reg126*reg319; T reg1121=reg196*reg157; T reg1122=reg195*reg167; T reg1123=reg183*reg152; T reg1124=reg156*reg151;
    T reg1125=reg125*reg230; T reg1126=reg126*reg297; T reg1127=reg261-reg254; T reg1128=reg173*reg237; T reg1129=reg470-reg469;
    T reg1130=reg194*reg152; T reg1131=reg240*reg133; T reg1132=reg194*reg155; T reg1133=reg160*reg175; T reg1134=reg173*reg200;
    T reg1135=reg114*reg240; T reg1136=reg171*reg175; T reg1137=reg139*reg224; T reg1138=reg167*reg200; T reg1139=reg114*reg558;
    T reg1140=reg133*reg225; T reg1141=reg151*reg150; T reg1142=reg173*reg196; T reg1143=reg133*reg221; T reg1144=reg160*reg180;
    T reg1145=reg167*reg183; T reg1146=reg133*reg234; T reg1147=reg114*reg585; T reg1148=reg194*reg150; T reg1149=reg171*reg180;
    T reg1150=reg139*reg329; T reg1151=reg173*reg180; reg483=reg483+reg484; T reg1152=reg243*reg133; reg334=reg594+reg334;
    reg594=reg477+reg478; reg476=reg481+reg476; reg481=reg167*reg185; T reg1153=reg114*reg233; T reg1154=reg186*reg152;
    T reg1155=reg222*reg114; T reg1156=reg202*reg133; T reg1157=reg190*reg152; reg256=reg610+reg256; reg610=reg230*reg133;
    T reg1158=reg193*reg167; T reg1159=reg497*reg114; T reg1160=reg139*reg242; T reg1161=reg160*reg174; T reg1162=reg133*reg201;
    T reg1163=reg195*reg173; reg267=reg267+reg255; reg280=reg280+reg274; reg190=reg190*reg150; T reg1164=reg171*reg174;
    T reg1165=reg139*reg278; reg287=reg312+reg287; reg429=reg429+reg428; reg285=reg614+reg285; reg312=reg186*reg150;
    reg614=reg133*reg248; T reg1166=reg173*reg197; T reg1167=reg114*reg204; T reg1168=reg139*reg234; T reg1169=reg160*reg191;
    T reg1170=reg167*reg197; T reg1171=reg114*reg577; reg431=reg431-reg432; T reg1172=reg171*reg191; T reg1173=reg139*reg268;
    T reg1174=reg173*reg199; reg447=reg447+reg448; reg151=reg151*reg152; T reg1175=reg193*reg173; reg294=reg294+reg295;
    T reg1176=reg171*reg199; T reg1177=reg51*reg159; T reg1178=reg147*reg236; reg361=reg358+reg361; reg297=reg139*reg297;
    reg358=reg173*reg177; T reg1179=reg114*reg241; T reg1180=reg173*reg192; T reg1181=reg167*reg177; T reg1182=reg114*reg488;
    T reg1183=reg167*reg199; T reg1184=reg51*reg152; T reg1185=reg181*reg150; T reg1186=reg222*reg133; T reg1187=reg173*reg174;
    T reg1188=reg133*reg242; T reg1189=reg146*reg241; T reg1190=reg171*reg195; reg319=reg139*reg319; reg415=reg414+reg415;
    reg414=reg152*reg177; T reg1191=reg133*reg241; reg303=reg529+reg303; T reg1192=reg198*reg159; T reg1193=reg147*reg207;
    T reg1194=reg133*reg236; reg181=reg181*reg152; T reg1195=reg222*reg147; T reg1196=reg51*reg173; T reg1197=reg139*reg207;
    T reg1198=reg51*reg150; T reg1199=reg160*reg199; reg356=reg357+reg356; reg357=reg114*reg243; reg375=reg376+reg375;
    reg376=reg347+reg348; reg353=reg353+reg351; T reg1200=reg171*reg237; T reg1201=reg167*reg169; T reg1202=reg114*reg223;
    reg227=reg139*reg227; T reg1203=reg198*reg152; T reg1204=reg173*reg175; T reg1205=reg603+reg354; reg456=reg456-reg455;
    T reg1206=reg204*reg133; T reg1207=reg173*reg183; T reg1208=reg114*reg202; T reg1209=reg192*reg150; T reg1210=reg139*reg201;
    reg371=reg371+reg370; reg221=reg139*reg221; T reg1211=reg160*reg196; T reg1212=reg173*reg187; T reg1213=reg114*reg205;
    T reg1214=reg133*reg207; T reg1215=reg171*reg196; reg341=reg139*reg341; reg198=reg198*reg150; T reg1216=reg167*reg187;
    T reg1217=reg114*reg504; T reg1218=reg205*reg133; reg192=reg192*reg152; reg344=reg625+reg344; reg625=reg173*reg191;
    reg377=reg377+reg378; T reg1219=reg173*reg169; reg189=reg189-reg576; T reg1220=reg122*reg558; T reg1221=reg168*reg200;
    T reg1222=reg156*reg183; T reg1223=reg19*reg202; T reg1224=reg193*reg157; T reg1225=reg497*reg146; T reg1226=reg122*reg240;
    reg176=reg261+reg176; reg261=reg161*reg200; T reg1227=reg171*reg183; T reg1228=reg19*reg585; T reg1229=reg518-reg514;
    T reg1230=reg161*reg237; T reg1231=reg195*reg152; reg532=reg532+reg527; T reg1232=reg156*reg180; T reg1233=reg122*reg233;
    T reg1234=reg168*reg185; reg548=reg548+reg546; T reg1235=reg145*reg234; T reg1236=reg191*reg150; T reg1237=reg534+reg535;
    T reg1238=reg556+reg555; reg537=reg537+reg539; T reg1239=reg161*reg180; T reg1240=reg171*reg185; reg491=reg498+reg491;
    reg585=reg122*reg585; reg498=reg168*reg183; reg233=reg19*reg233; T reg1241=reg197*reg157; T reg1242=reg19*reg504;
    T reg1243=reg497*reg122; T reg1244=reg193*reg168; T reg1245=reg156*reg191; T reg1246=reg199*reg152; reg569=reg569+reg511;
    T reg1247=reg222*reg122; T reg1248=reg193*reg161; T reg1249=reg145*reg248; T reg1250=reg175*reg150; T reg1251=reg577*reg146;
    reg593=reg593+reg592; reg215=reg215+reg620; T reg1252=reg156*reg169; T reg1253=reg199*reg161; T reg1254=reg19*reg243;
    T reg1255=reg577*reg122; T reg1256=reg197*reg168; reg194=reg156*reg194; T reg1257=reg171*reg169; T reg1258=reg19*reg223;
    T reg1259=reg204*reg122; T reg1260=reg197*reg161; T reg1261=reg193*reg152; T reg1262=reg175*reg157; T reg1263=reg222*reg146;
    reg213=reg213+reg602; T reg1264=reg145*reg224; T reg1265=reg156*reg175; T reg1266=reg161*reg196; T reg1267=reg19*reg204;
    T reg1268=reg122*reg205; T reg1269=reg161*reg187; T reg1270=reg171*reg197; T reg1271=reg138*reg268; T reg1272=reg164*reg191;
    reg577=reg19*reg577; T reg1273=reg157*reg174; reg212=reg212+reg562; T reg1274=reg161*reg174; T reg1275=reg145*reg278;
    reg199=reg156*reg199; reg570=reg570+reg573; T reg1276=reg122*reg488; T reg1277=reg168*reg177; T reg1278=reg191*reg162;
    T reg1279=reg138*reg234; T reg1280=reg122*reg241; T reg1281=reg161*reg177; T reg1282=reg156*reg193; T reg1283=reg19*reg222;
    reg235=reg295+reg235; reg193=reg171*reg193; reg497=reg19*reg497; reg295=reg116*reg236; T reg1284=reg51*reg155;
    reg494=reg496+reg494; reg496=reg156*reg195; reg486=reg486+reg492; T reg1285=reg180*reg162; T reg1286=reg138*reg201;
    T reg1287=reg191*reg157; T reg1288=reg145*reg268; T reg1289=reg156*reg237; reg202=reg122*reg202; reg183=reg161*reg183;
    T reg1290=reg563-reg566; T reg1291=reg138*reg278; T reg1292=reg164*reg174; reg507=reg507-reg510; T reg1293=reg161*reg175;
    T reg1294=reg156*reg200; T reg1295=reg19*reg240; reg210=reg351+reg210; reg351=reg122*reg223; T reg1296=reg168*reg169;
    T reg1297=reg162*reg174; T reg1298=reg171*reg200; T reg1299=reg19*reg558; T reg1300=reg138*reg242; reg243=reg122*reg243;
    reg169=reg161*reg169; reg241=reg19*reg241; T reg1301=reg156*reg196; reg544=reg544+reg547; reg217=reg217+reg584;
    T reg1302=reg161*reg191; T reg1303=reg145*reg242; reg557=reg623+reg557; reg504=reg122*reg504; reg623=reg174*reg150;
    T reg1304=reg168*reg187; T reg1305=reg156*reg197; T reg1306=reg159*reg174; reg488=reg19*reg488; T reg1307=reg180*reg157;
    T reg1308=reg145*reg329; T reg1309=reg167*reg175; reg240=reg240*reg146; reg529=reg530+reg529; reg530=reg200*reg152;
    T reg1310=reg167*reg174; reg175=reg159*reg175; reg174=reg156*reg174; reg278=reg126*reg278; reg248=reg126*reg248;
    reg495=reg495+reg493; T reg1311=reg432+reg526; T reg1312=reg156*reg51; reg197=reg197*reg152; reg222=reg125*reg222;
    reg307=reg457+reg307; reg457=reg159*reg191; T reg1313=reg156*reg177; reg191=reg167*reg191; T reg1314=reg180*reg150;
    reg234=reg126*reg234; reg558=reg558*reg146; reg520=reg538+reg520; reg268=reg126*reg268; reg200=reg200*reg157;
    reg201=reg145*reg201; reg289=reg410+reg289; reg236=reg125*reg236; reg51=reg51*reg160; reg196=reg196*reg152;
    reg317=reg317+reg318; reg301=reg621+reg301; reg177=reg171*reg177; reg242=reg126*reg242; reg410=reg126*reg224;
    reg205=reg19*reg205; reg538=reg156*reg187; reg226=reg226+reg607; reg195=reg195*reg161; reg499=reg274+reg499;
    reg187=reg171*reg187; reg204=reg204*reg146; reg329=reg126*reg329; reg180=reg167*reg180; reg274=reg323-reg322;
    reg355=reg398+reg355; reg207=reg125*reg207; reg51=reg236+reg51; reg486=reg486+reg496; reg960=reg958+reg960;
    reg544=reg544+reg1301; reg1144=reg1210+reg1144; reg210=reg412+reg210; reg203=reg318+reg203; reg1161=reg1160+reg1161;
    reg1085=reg207+reg1085; reg862=reg859-reg862; reg863=reg864-reg863; reg961=reg962+reg961; reg551=reg551+reg844;
    reg875=reg874-reg875; reg531=reg336+reg531; reg214=reg269+reg214; reg272=reg272+reg1010; reg963=reg964+reg963;
    reg1150=reg1149+reg1150; reg1152=reg1152-reg1154; reg805=reg805-reg806; reg216=reg1301+reg216; reg579=reg260-reg579;
    reg323=reg323-reg1311; reg1165=reg1164+reg1165; reg1288=reg1287+reg1288; reg984=reg981-reg984; reg350=reg350+reg985;
    reg777=reg778+reg777; reg810=reg809-reg810; reg1294=reg1295+reg1294; reg1013=reg986+reg1013; reg353=reg1022+reg353;
    reg244=reg244+reg849; reg207=reg86*reg376; reg1082=reg194+reg1082; reg955=reg956+reg955; reg552=reg847-reg552;
    reg559=reg900+reg559; reg860=reg861+reg860; reg227=reg227-reg1200; reg775=reg776+reg775; reg567=reg352-reg567;
    reg487=reg487-reg957; reg1298=reg1299+reg1298; reg563=reg563-reg1205; reg1209=reg1146+reg1209; reg326=reg326+reg959;
    reg613=reg613-reg888; reg845=reg846+reg845; reg889=reg890+reg889; reg1136=reg1136-reg1137; reg1088=reg1088-reg1089;
    reg193=reg497+reg193; reg1096=reg1095+reg1096; reg580=reg580+reg871; reg614=reg614-reg312; reg513=reg282+reg513;
    reg570=reg570+reg199; reg222=reg1312+reg222; reg1007=reg1008+reg1007; reg285=reg285-reg576; reg1000=reg1001+reg1000;
    reg1005=reg1004-reg1005; reg194=reg86*reg1097; reg999=reg998+reg999; reg1002=reg1003+reg1002; reg867=reg868-reg867;
    reg232=reg906+reg232; reg236=reg86*reg528; reg1169=reg1168+reg1169; reg284=reg284+reg1006; reg521=reg199+reg521;
    reg1275=reg1273+reg1275; reg503=reg866+reg503; reg1156=reg1157+reg1156; reg1282=reg1283+reg1282; reg795=reg796+reg795;
    reg1173=reg1172+reg1173; reg199=reg86*reg801; reg235=reg396+reg235; reg337=reg337+reg965; reg334=reg546+reg334;
    reg807=reg808+reg807; reg798=reg844+reg798; reg1305=reg1267+reg1305; reg260=reg86*reg542; reg1074=reg1073+reg1074;
    reg269=reg86*reg333; reg282=reg86*reg966; reg1126=reg1183+reg1126; reg1127=reg1105+reg1127; reg280=reg1081+reg280;
    reg449=reg1009+reg449; reg623=reg1303+reg623; reg872=reg873+reg872; reg256=reg511+reg256; reg869=reg869-reg870;
    reg1270=reg577+reg1270; reg799=reg799-reg800; reg529=reg496+reg529; reg967=reg967-reg525; reg250=reg250-reg797;
    reg1133=reg1080+reg1133; reg803=reg804+reg803; reg264=reg550+reg264; reg997=reg997-reg996; reg318=reg86*reg802;
    reg793=reg794+reg793; reg512=reg512+reg865; reg901=reg902+reg901; reg898=reg898+reg899; reg811=reg811-reg843;
    reg1063=reg1061+reg1063; reg1257=reg1257-reg1258; reg309=reg309-reg996; reg538=reg205+reg538; reg792=reg826+reg792;
    reg1068=reg1067+reg1068; reg1069=reg1043+reg1069; reg619=reg592+reg619; reg1308=reg1307+reg1308; reg900=reg571+reg900;
    reg813=reg812+reg813; reg814=reg814-reg815; reg595=reg1232+reg595; reg314=reg820+reg314; reg894=reg895+reg894;
    reg495=reg495+reg174; reg1262=reg1262-reg1264; reg1104=reg1102+reg1104; reg892=reg892-reg893; reg1050=reg1057+reg1050;
    reg1048=reg1047+reg1048; reg896=reg897-reg896; reg313=reg1006+reg313; reg819=reg816-reg819; reg817=reg818+reg817;
    reg189=reg189+reg1265; reg490=reg349+reg490; reg788=reg787+reg788; reg789=reg790+reg789; reg311=reg174+reg311;
    reg828=reg829+reg828; reg1030=reg1030-reg1032; reg1021=reg1015+reg1021; reg1034=reg1041+reg1034; reg836=reg836-reg835;
    reg906=reg505+reg906; reg834=reg832+reg834; reg1025=reg1025-reg1026; reg569=reg569+reg1245; reg499=reg262+reg499;
    reg174=reg86*reg905; reg833=reg959+reg833; reg187=reg1242+reg187; reg1038=reg1265+reg1038; reg502=reg339+reg502;
    reg506=reg231-reg506; reg830=reg830-reg831; reg572=reg608-reg572; reg1250=reg1249+reg1250; reg879=reg880+reg879;
    reg598=reg598+reg876; reg827=reg791-reg827; reg841=reg842+reg841; reg606=reg527+reg606; reg611=reg1245+reg611;
    reg617=reg985+reg617; reg206=reg965+reg206; reg903=reg904-reg903; reg1029=reg1028+reg1029; reg840=reg837-reg840;
    reg1252=reg1254+reg1252; reg1018=reg1019+reg1018; reg838=reg839+reg838; reg877=reg878+reg877; reg536=reg536-reg325;
    reg854=reg854+reg853; reg974=reg975+reg974; reg239=reg865+reg239; reg205=reg86*reg249; reg233=reg233-reg1240;
    reg485=reg849+reg485; reg779=reg780+reg779; reg855=reg852-reg855; reg231=reg86*reg856; reg1236=reg1235+reg1236;
    reg179=reg179-reg1289; reg972=reg973+reg972; reg1185=reg1188+reg1185; reg369=reg369+reg625; reg262=reg86*reg1238;
    reg297=reg1176+reg297; reg344=reg547+reg344; reg1313=reg241+reg1313; reg982=reg983+reg982; reg887=reg887-reg886;
    reg341=reg1215+reg341; reg520=reg573+reg520; reg979=reg980+reg979; reg978=reg976+reg978; reg848=reg848-reg850;
    reg241=reg86*reg851; reg1290=reg1290-reg1289; reg1114=reg1114-reg1113; reg604=reg435+reg604; reg1118=reg1121+reg1118;
    reg1218=reg192+reg1218; reg1211=reg221+reg1211; reg340=reg340+reg977; reg823=reg824+reg823; reg785=reg786+reg785;
    reg303=reg492+reg303; reg587=reg891+reg587; reg891=reg582+reg891; reg1191=reg181+reg1191; reg319=reg1190+reg319;
    reg321=reg1010+reg321; reg1227=reg1228+reg1227; reg1101=reg1106+reg1101; reg821=reg822+reg821; reg618=reg883+reg618;
    reg583=reg315-reg583; reg597=reg977+reg597; reg1055=reg1053+reg1055; reg882=reg881-reg882; reg1222=reg1223+reg1222;
    reg296=reg971+reg296; reg969=reg969+reg970; reg1314=reg201+reg1314; reg177=reg488+reg177; reg782=reg783+reg782;
    reg857=reg858+reg857; reg298=reg991+reg298; reg884=reg885+reg884; reg294=reg1046+reg294; reg1199=reg1197+reg1199;
    reg1124=reg1124-reg1125; reg1232=reg548+reg1232; reg825=reg968+reg825; reg181=reg86*reg304; reg176=reg176-reg462;
    reg545=reg609-reg545; reg781=reg781-reg784; reg729=reg730-reg729; reg328=reg907+reg328; reg329=reg180+reg329;
    reg180=reg86*reg327; reg1086=reg1087+reg1086; reg274=reg274-reg1084; reg335=reg335-reg747; reg678=reg673+reg678;
    reg470=reg470-reg1090; reg672=reg651-reg672; reg1093=reg1093-reg1094; reg192=reg86*reg283; reg482=reg712+reg482;
    reg1091=reg1091-reg1092; reg201=reg86*reg1098; reg258=reg428+reg258; reg754=reg754+reg766; reg221=reg86*reg1072;
    reg1075=reg1076+reg1075; reg315=reg86*reg288; reg253=reg468+reg253; reg336=reg331+reg441; reg1077=reg1078+reg1077;
    reg266=reg448+reg266; reg263=reg263-reg727; reg197=reg204+reg197; reg1306=reg242+reg1306; reg687=reg688+reg687;
    reg637=reg637-reg641; reg316=reg584+reg316; reg301=reg378+reg301; reg663=reg664+reg663; reg293=reg293-reg914;
    reg268=reg191+reg268; reg658=reg659+reg658; reg317=reg317+reg196; reg457=reg234+reg457; reg299=reg562+reg299;
    reg289=reg289-reg455; reg290=reg290-reg772; reg771=reg771-reg765; reg200=reg558+reg200; reg769=reg770-reg769;
    reg1309=reg1309-reg410; reg191=reg86*reg343; reg719=reg732+reg719; reg175=reg248+reg175; reg530=reg240+reg530;
    reg346=reg346-reg711; reg355=reg484+reg355; reg647=reg648+reg647; reg667=reg646+reg667; reg1110=reg1180+reg1110;
    reg204=reg86*reg384; reg657=reg655+reg657; reg662=reg629+reg662; reg1027=reg1027-reg1109; reg1031=reg645-reg1031;
    reg661=reg652+reg661; reg1035=reg1036+reg1035; reg423=reg365+reg423; reg407=reg407+reg634; reg633=reg631+reg633;
    reg1037=reg1033+reg1037; reg1039=reg1039-reg1040; reg643=reg640-reg643; reg1042=reg1204+reg1042; reg1023=reg1023-reg1024;
    reg772=reg408-reg772; reg694=reg695+reg694; reg693=reg691-reg693; reg1022=reg406+reg1022; reg1020=reg1017+reg1020;
    reg699=reg698-reg699; reg668=reg671+reg668; reg1081=reg279+reg1081; reg704=reg733-reg704; reg705=reg581+reg705;
    reg1083=reg1111-reg1083; reg234=reg86*reg451; reg1115=reg1116+reg1115; reg1117=reg1112+reg1117; reg240=reg86*reg716;
    reg717=reg760+reg717; reg425=reg255+reg425; reg718=reg718+reg758; reg1120=reg1122+reg1120; reg242=reg86*reg471;
    reg475=reg994+reg475; reg1123=reg1119+reg1123; reg401=reg1099+reg401; reg474=reg474-reg768; reg1100=reg1103+reg1100;
    reg739=reg738-reg739; reg746=reg751+reg746; reg454=reg1187+reg454; reg248=reg86*reg459; reg1105=reg466+reg1105;
    reg1107=reg1108+reg1107; reg373=reg373-reg644; reg1304=reg504+reg1304; reg696=reg697+reg696; reg217=reg217+reg1302;
    reg588=reg1239+reg588; reg654=reg653+reg654; reg557=reg389+reg557; reg656=reg660+reg656; reg169=reg243+reg169;
    reg753=reg753-reg748; reg744=reg742+reg744; reg1296=reg1296-reg351; reg574=reg1293+reg574; reg1297=reg1300+reg1297;
    reg1293=reg507+reg1293; reg740=reg740-reg737; reg762=reg757+reg762; reg774=reg736+reg774; reg183=reg202+reg183;
    reg500=reg1302+reg500; reg489=reg634+reg489; reg1291=reg1292+reg1291; reg713=reg714+reg713; reg498=reg585+reg498;
    reg731=reg703+reg731; reg1239=reg537+reg1239; reg735=reg683+reg735; reg383=reg383-reg764; reg494=reg195+reg494;
    reg708=reg707+reg708; reg1285=reg1286+reg1285; reg1284=reg295+reg1284; reg568=reg1253+reg568; reg752=reg752-reg755;
    reg440=reg440-reg680; reg750=reg749+reg750; reg1281=reg1280+reg1281; reg756=reg1132+reg756; reg202=reg86*reg632;
    reg1277=reg1276+reg1277; reg578=reg1266+reg578; reg1278=reg1279+reg1278; reg684=reg636+reg684; reg212=reg212+reg1274;
    reg669=reg669-reg701; reg388=reg460+reg388; reg1269=reg1268+reg1269; reg564=reg564-reg1230; reg1271=reg1272+reg1271;
    reg702=reg702-reg666; reg589=reg445+reg589; reg720=reg931+reg720; reg1261=reg1263+reg1261; reg1256=reg1255+reg1256;
    reg243=reg86*reg715; reg1253=reg215+reg1253; reg773=reg773-reg228; reg518=reg518-reg649; reg630=reg630-reg650;
    reg1248=reg1247+reg1248; reg628=reg627+reg628; reg593=reg593+reg1246; reg1244=reg1243+reg1244; reg639=reg635+reg639;
    reg642=reg586+reg642; reg220=reg539+reg220; reg195=reg226+reg195; reg686=reg685+reg686; reg306=reg946+reg306;
    reg1241=reg1251+reg1241; reg681=reg681-reg682; reg307=reg370+reg307; reg310=reg310-reg510; reg690=reg689+reg690;
    reg278=reg1310+reg278; reg692=reg700+reg692; reg491=reg405+reg491; reg540=reg1274+reg540; reg725=reg710+reg725;
    reg215=reg86*reg1237; reg723=reg724+reg723; reg1233=reg1233-reg1234; reg761=reg759+reg761; reg763=reg745+reg763;
    reg1229=reg1229-reg1230; reg743=reg741+reg743; reg532=reg532+reg1231; reg522=reg607+reg522; reg238=reg677+reg238;
    reg261=reg1226+reg261; reg665=reg670+reg665; reg1221=reg1220+reg1221; reg501=reg767+reg501; reg726=reg721+reg726;
    reg622=reg620+reg622; reg1224=reg1225+reg1224; reg1266=reg213+reg1266; reg541=reg722+reg541; reg706=reg706-reg709;
    reg734=reg728+reg734; reg1260=reg1259+reg1260; reg601=reg602+reg601; reg380=reg413-reg380; reg198=reg1214+reg198;
    reg625=reg377+reg625; reg381=reg291-reg381; reg913=reg912+reg913; reg1219=reg357+reg1219; reg213=reg86*reg379;
    reg375=reg1246+reg375; reg403=reg911-reg403; reg910=reg452+reg910; reg1201=reg1201-reg1202; reg374=reg345-reg374;
    reg1204=reg456+reg1204; reg226=reg86*reg453; reg907=reg461+reg907; reg908=reg909-reg908; reg1206=reg1203+reg1206;
    reg1207=reg1208+reg1207; reg458=reg332-reg458; reg1145=reg1147+reg1145; reg255=reg927+reg926; reg925=reg924+reg925;
    reg1148=reg1143+reg1148; reg279=reg86*reg427; reg946=reg360+reg946; reg1198=reg1194+reg1198; reg948=reg948+reg947;
    reg356=reg1163+reg356; reg1177=reg1178+reg1177; reg944=reg945-reg944; reg358=reg1179+reg358; reg768=reg362-reg768;
    reg291=reg86*reg941; reg361=reg1231+reg361; reg942=reg943-reg942; reg1181=reg1182+reg1181; reg939=reg940-reg939;
    reg1187=reg371+reg1187; reg644=reg367-reg644; reg387=reg387-reg938; reg1186=reg1184+reg1186; reg915=reg391-reg915;
    reg1212=reg1213+reg1212; reg295=reg86*reg386; reg1079=reg1079-reg914; reg1216=reg1217+reg1216; reg995=reg916-reg995;
    reg1166=reg1167+reg1166; reg1170=reg1171+reg1170; reg430=reg473-reg430; reg994=reg444+reg994; reg332=reg86*reg434;
    reg431=reg431-reg1084; reg447=reg447+reg1174; reg871=reg446+reg871; reg1175=reg1155+reg1175; reg992=reg993-reg992;
    reg509=reg439-reg509; reg151=reg151-reg610; reg368=reg605-reg368; reg1158=reg1159+reg1158; reg438=reg372-reg438;
    reg990=reg989-reg990; reg1163=reg267+reg1163; reg991=reg436+reg991; reg190=reg1162+reg190; reg287=reg493+reg287;
    reg987=reg988+reg987; reg1012=reg1011+reg1012; reg267=reg86*reg465; reg483=reg483+reg1151; reg277=reg277+reg480;
    reg923=reg922+reg923; reg339=reg86*reg594; reg345=reg86*reg479; reg1153=reg1153-reg481; reg476=reg196+reg476;
    reg920=reg921-reg920; reg468=reg424+reg468; reg1129=reg1129-reg1128; reg472=reg259-reg472; reg1134=reg1135+reg1134;
    reg196=reg86*reg422; reg1131=reg1130+reg1131; reg919=reg919+reg918; reg917=reg245+reg917; reg1138=reg1139+reg1138;
    reg245=reg86*reg229; reg429=reg429+reg1142; reg259=reg86*reg426; reg433=reg363+reg433; reg1141=reg1141-reg1140;
    reg1070=reg1070-reg1071; reg953=reg954-reg953; reg414=reg1189+reg414; reg359=reg305+reg359; reg1014=reg1016+reg1014;
    reg415=reg1174+reg415; reg931=reg418+reg931; reg1059=reg1060+reg1059; reg727=reg416-reg727; reg1046=reg395+reg1046;
    reg394=reg394-reg1128; reg402=reg1142+reg402; reg399=reg766+reg399; reg676=reg675-reg676; reg937=reg936+reg937;
    reg1065=reg1065-reg1064; reg929=reg928+reg929; reg596=reg596-reg419; reg1051=reg1052+reg1051; reg1066=reg1062+reg1066;
    reg417=reg930-reg417; reg1056=reg1058+reg1056; reg392=reg679+reg392; reg1054=reg1049+reg1054; reg305=reg86*reg421;
    reg952=reg952+reg951; reg397=reg1151+reg397; reg747=reg437-reg747; reg674=reg638-reg674; reg1195=reg1196+reg1195;
    reg1192=reg1193+reg1192; reg349=reg86*reg442; reg711=reg420-reg711; reg677=reg390+reg677; reg934=reg935+reg934;
    reg1044=reg1045+reg1044; reg933=reg933-reg932; reg950=reg949+reg950; reg572=reg86*reg572; reg827=reg86*reg827;
    reg559=reg86*reg559; reg933=reg86*reg933; reg762=reg86*reg762; reg433=reg86*reg433; reg1288=reg86*reg1288;
    reg238=reg86*reg238; reg614=reg86*reg614; reg1127=reg86*reg1127; reg1034=reg86*reg1034; reg937=reg86*reg937;
    reg647=reg86*reg647; reg587=reg86*reg587; reg491=reg86*reg491; reg1066=reg86*reg1066; reg476=reg86*reg476;
    reg788=reg86*reg788; reg855=reg86*reg855; reg1236=reg86*reg1236; reg725=reg86*reg725; reg763=reg86*reg763;
    reg352=ponderation*reg269; reg662=reg86*reg662; reg468=reg86*reg468; reg1131=reg86*reg1131; reg1105=reg86*reg1105;
    reg176=reg86*reg176; reg848=reg86*reg848; reg917=reg86*reg917; reg1291=reg86*reg1291; reg264=reg86*reg264;
    reg489=reg86*reg489; reg388=reg86*reg388; reg840=reg86*reg840; reg1278=reg86*reg1278; reg694=reg86*reg694;
    reg280=reg86*reg280; reg232=reg86*reg232; reg151=reg86*reg151; reg1275=reg86*reg1275; reg357=ponderation*reg202;
    reg579=reg86*reg579; reg677=reg86*reg677; reg990=reg86*reg990; reg440=reg86*reg440; reg606=reg86*reg606;
    reg752=reg86*reg752; reg834=reg86*reg834; reg862=reg86*reg862; reg235=reg86*reg235; reg1285=reg86*reg1285;
    reg668=reg86*reg668; reg1012=reg86*reg1012; reg190=reg86*reg190; reg383=reg86*reg383; reg1022=reg86*reg1022;
    reg1297=reg86*reg1297; reg1027=reg86*reg1027; reg1069=reg86*reg1069; reg1141=reg86*reg1141; reg744=reg86*reg744;
    reg999=reg86*reg999; reg407=reg86*reg407; reg210=reg86*reg210; reg557=reg86*reg557; reg994=reg86*reg994;
    reg654=reg86*reg654; reg875=reg86*reg875; reg1156=reg86*reg1156; reg1014=reg86*reg1014; reg506=reg86*reg506;
    reg589=reg86*reg589; reg431=reg86*reg431; reg1271=reg86*reg1271; reg623=reg86*reg623; reg1037=reg86*reg1037;
    reg869=reg86*reg869; reg633=reg86*reg633; reg1005=reg86*reg1005; reg1021=reg86*reg1021; reg509=reg86*reg509;
    reg387=reg86*reg387; reg719=reg86*reg719; reg323=reg86*reg323; reg705=reg86*reg705; reg613=reg86*reg613;
    reg200=reg86*reg200; reg583=reg86*reg583; reg360=ponderation*reg205; reg1186=reg86*reg1186; reg771=reg86*reg771;
    reg1191=reg86*reg1191; reg1081=reg86*reg1081; reg317=reg86*reg317; reg485=reg86*reg485; reg1218=reg86*reg1218;
    reg1079=reg86*reg1079; reg810=reg86*reg810; reg1054=reg86*reg1054; reg293=reg86*reg293; reg1314=reg86*reg1314;
    reg1118=reg86*reg1118; reg717=reg86*reg717; reg198=reg86*reg198; reg637=reg86*reg637; reg978=reg86*reg978;
    reg362=ponderation*reg318; reg363=ponderation*reg181; reg1091=reg86*reg1091; reg946=reg86*reg946; reg294=reg86*reg294;
    reg482=reg86*reg482; reg365=ponderation*reg194; reg414=reg86*reg414; reg1198=reg86*reg1198; reg798=reg86*reg798;
    reg203=reg86*reg203; reg678=reg86*reg678; reg253=reg86*reg253; reg274=reg86*reg274; reg367=ponderation*reg221;
    reg969=reg86*reg969; reg370=ponderation*reg291; reg1088=reg86*reg1088; reg805=reg86*reg805; reg1185=reg86*reg1185;
    reg328=reg86*reg328; reg371=ponderation*reg236; reg530=reg86*reg530; reg950=reg86*reg950; reg361=reg86*reg361;
    reg630=reg86*reg630; reg567=reg86*reg567; reg1123=reg86*reg1123; reg1261=reg86*reg1261; reg898=reg86*reg898;
    reg1206=reg86*reg1206; reg1250=reg86*reg1250; reg931=reg86*reg931; reg720=reg86*reg720; reg746=reg86*reg746;
    reg925=reg86*reg925; reg781=reg86*reg781; reg1050=reg86*reg1050; reg706=reg86*reg706; reg1152=reg86*reg1152;
    reg892=reg86*reg892; reg1224=reg86*reg1224; reg960=reg86*reg960; reg1148=reg86*reg1148; reg1262=reg86*reg1262;
    reg726=reg86*reg726; reg813=reg86*reg813; reg923=reg86*reg923; reg619=reg86*reg619; reg532=reg86*reg532;
    reg929=reg86*reg929; reg882=reg86*reg882; reg197=reg86*reg197; reg913=reg86*reg913; reg353=reg86*reg353;
    reg690=reg86*reg690; reg1308=reg86*reg1308; reg1241=reg86*reg1241; reg598=reg86*reg598; reg1117=reg86*reg1117;
    reg475=reg86*reg475; reg910=reg86*reg910; reg819=reg86*reg819; reg984=reg86*reg984; reg306=reg86*reg306;
    reg593=reg86*reg593; reg372=ponderation*reg174; reg239=reg86*reg239; reg375=reg86*reg375; reg499=reg86*reg499;
    reg1101=reg86*reg1101; reg1209=reg86*reg1209; reg642=reg86*reg642; reg1046=reg86*reg1046; reg907=reg86*reg907;
    reg1161=reg86*reg1161; reg377=ponderation*reg295; reg454=reg86*reg454; reg380=reg86*reg380; reg256=reg86*reg256;
    reg381=reg86*reg381; reg774=reg86*reg774; reg378=ponderation*reg213; reg1173=reg86*reg1173; reg1100=reg86*reg1100;
    reg403=reg86*reg403; reg1169=reg86*reg1169; reg374=reg86*reg374; reg740=reg86*reg740; reg389=ponderation*reg226;
    reg285=reg86*reg285; reg908=reg86*reg908; reg458=reg86*reg458; reg1136=reg86*reg1136; reg574=reg86*reg574;
    reg390=reg86*reg255; reg401=reg86*reg401; reg391=ponderation*reg267; reg1133=reg86*reg1133; reg753=reg86*reg753;
    reg277=reg86*reg277; reg1170=reg86*reg1170; reg417=reg86*reg417; reg723=reg86*reg723; reg727=reg86*reg727;
    reg447=reg86*reg447; reg1110=reg86*reg1110; reg953=reg86*reg953; reg540=reg86*reg540; reg952=reg86*reg952;
    reg1175=reg86*reg1175; reg395=ponderation*reg279; reg1158=reg86*reg1158; reg948=reg86*reg948; reg944=reg86*reg944;
    reg731=reg86*reg731; reg1163=reg86*reg1163; reg768=reg86*reg768; reg1107=reg86*reg1107; reg942=reg86*reg942;
    reg287=reg86*reg287; reg939=reg86*reg939; reg713=reg86*reg713; reg644=reg86*reg644; reg1165=reg86*reg1165;
    reg915=reg86*reg915; reg500=reg86*reg500; reg1115=reg86*reg1115; reg438=reg86*reg438; reg341=reg86*reg341;
    reg991=reg86*reg991; reg564=reg86*reg564; reg1211=reg86*reg1211; reg987=reg86*reg987; reg1013=reg86*reg1013;
    reg1083=reg86*reg1083; reg520=reg86*reg520; reg272=reg86*reg272; reg669=reg86*reg669; reg449=reg86*reg449;
    reg369=reg86*reg369; reg1007=reg86*reg1007; reg266=reg86*reg266; reg284=reg86*reg284; reg297=reg86*reg297;
    reg684=reg86*reg684; reg1002=reg86*reg1002; reg1199=reg86*reg1199; reg1000=reg86*reg1000; reg578=reg86*reg578;
    reg997=reg86*reg997; reg303=reg86*reg303; reg967=reg86*reg967; reg1126=reg86*reg1126; reg396=ponderation*reg345;
    reg1120=reg86*reg1120; reg920=reg86*reg920; reg334=reg86*reg334; reg472=reg86*reg472; reg656=reg86*reg656;
    reg398=ponderation*reg196; reg1150=reg86*reg1150; reg919=reg86*reg919; reg588=reg86*reg588; reg405=ponderation*reg245;
    reg1144=reg86*reg1144; reg406=ponderation*reg259; reg563=reg86*reg563; reg995=reg86*reg995; reg425=reg86*reg425;
    reg696=reg86*reg696; reg430=reg86*reg430; reg227=reg86*reg227; reg408=ponderation*reg332; reg871=reg86*reg871;
    reg412=ponderation*reg207; reg702=reg86*reg702; reg992=reg86*reg992; reg344=reg86*reg344; reg368=reg86*reg368;
    reg413=ponderation*reg180; reg628=reg86*reg628; reg356=reg86*reg356; reg335=reg86*reg335; reg1059=reg86*reg1059;
    reg672=reg86*reg672; reg518=reg86*reg518; reg1177=reg86*reg1177; reg416=ponderation*reg192; reg754=reg86*reg754;
    reg358=reg86*reg358; reg397=reg86*reg397; reg418=ponderation*reg315; reg1181=reg86*reg1181; reg336=reg86*reg336;
    reg773=reg86*reg773; reg263=reg86*reg263; reg1187=reg86*reg1187; reg704=reg86*reg704; reg420=ponderation*reg243;
    reg424=ponderation*reg234; reg1212=reg86*reg1212; reg428=ponderation*reg240; reg601=reg86*reg601; reg718=reg86*reg718;
    reg1216=reg86*reg1216; reg1070=reg86*reg1070; reg310=reg86*reg310; reg681=reg86*reg681; reg692=reg86*reg692;
    reg1044=reg86*reg1044; reg687=reg86*reg687; reg402=reg86*reg402; reg316=reg86*reg316; reg686=reg86*reg686;
    reg394=reg86*reg394; reg663=reg86*reg663; reg1051=reg86*reg1051; reg658=reg86*reg658; reg299=reg86*reg299;
    reg1056=reg86*reg1056; reg220=reg86*reg220; reg290=reg86*reg290; reg1065=reg86*reg1065; reg769=reg86*reg769;
    reg415=reg86*reg415; reg639=reg86*reg639; reg435=ponderation*reg191; reg1192=reg86*reg1192; reg346=reg86*reg346;
    reg729=reg86*reg729; reg1195=reg86*reg1195; reg1039=reg86*reg1039; reg436=ponderation*reg339; reg699=reg86*reg699;
    reg665=reg86*reg665; reg711=reg86*reg711; reg1153=reg86*reg1153; reg674=reg86*reg674; reg1129=reg86*reg1129;
    reg676=reg86*reg676; reg522=reg86*reg522; reg596=reg86*reg596; reg1035=reg86*reg1035; reg1134=reg86*reg1134;
    reg392=reg86*reg392; reg359=reg86*reg359; reg1138=reg86*reg1138; reg743=reg86*reg743; reg934=reg86*reg934;
    reg747=reg86*reg747; reg429=reg86*reg429; reg761=reg86*reg761; reg437=ponderation*reg349; reg1166=reg86*reg1166;
    reg399=reg86*reg399; reg1031=reg86*reg1031; reg439=ponderation*reg305; reg1020=reg86*reg1020; reg444=ponderation*reg242;
    reg625=reg86*reg625; reg474=reg86*reg474; reg734=reg86*reg734; reg739=reg86*reg739; reg1219=reg86*reg1219;
    reg445=ponderation*reg248; reg1023=reg86*reg1023; reg1201=reg86*reg1201; reg373=reg86*reg373; reg541=reg86*reg541;
    reg667=reg86*reg667; reg1204=reg86*reg1204; reg657=reg86*reg657; reg1042=reg86*reg1042; reg661=reg86*reg661;
    reg1207=reg86*reg1207; reg622=reg86*reg622; reg423=reg86*reg423; reg446=ponderation*reg204; reg1145=reg86*reg1145;
    reg643=reg86*reg643; reg501=reg86*reg501; reg483=reg86*reg483; reg772=reg86*reg772; reg693=reg86*reg693;
    reg538=reg86*reg538; reg795=reg86*reg795; reg498=reg86*reg498; reg793=reg86*reg793; reg289=reg86*reg289;
    reg531=reg86*reg531; reg187=reg86*reg187; reg889=reg86*reg889; reg569=reg86*reg569; reg887=reg86*reg887;
    reg1239=reg86*reg1239; reg536=reg86*reg536; reg1252=reg86*reg1252; reg884=reg86*reg884; reg448=ponderation*reg215;
    reg1257=reg86*reg1257; reg618=reg86*reg618; reg457=reg86*reg457; reg490=reg86*reg490; reg189=reg86*reg189;
    reg879=reg86*reg879; reg1233=reg86*reg1233; reg877=reg86*reg877; reg1222=reg86*reg1222; reg268=reg86*reg268;
    reg502=reg86*reg502; reg355=reg86*reg355; reg782=reg86*reg782; reg1085=reg86*reg1085; reg169=reg86*reg169;
    reg779=reg86*reg779; reg222=reg86*reg222; reg604=reg86*reg604; reg175=reg86*reg175; reg777=reg86*reg777;
    reg529=reg86*reg529; reg775=reg86*reg775; reg1296=reg86*reg1296; reg51=reg86*reg51; reg214=reg86*reg214;
    reg807=reg86*reg807; reg1293=reg86*reg1293; reg1313=reg86*reg1313; reg803=reg86*reg803; reg513=reg86*reg513;
    reg177=reg86*reg177; reg452=ponderation*reg199; reg1309=reg86*reg1309; reg183=reg86*reg183; reg799=reg86*reg799;
    reg495=reg86*reg495; reg250=reg86*reg250; reg244=reg86*reg244; reg544=reg86*reg544; reg278=reg86*reg278;
    reg552=reg86*reg552; reg1256=reg86*reg1256; reg845=reg86*reg845; reg1305=reg86*reg1305; reg551=reg86*reg551;
    reg1270=reg86*reg1270; reg456=ponderation*reg260; reg1253=reg86*reg1253; reg872=reg86*reg872; reg570=reg86*reg570;
    reg580=reg86*reg580; reg307=reg86*reg307; reg1282=reg86*reg1282; reg867=reg86*reg867; reg1248=reg86*reg1248;
    reg503=reg86*reg503; reg512=reg86*reg512; reg193=reg86*reg193; reg1244=reg86*reg1244; reg863=reg86*reg863;
    reg486=reg86*reg486; reg860=reg86*reg860; reg195=reg86*reg195; reg1229=reg86*reg1229; reg906=reg86*reg906;
    reg1227=reg86*reg1227; reg903=reg86*reg903; reg1232=reg86*reg1232; reg901=reg86*reg901; reg261=reg86*reg261;
    reg900=reg86*reg900; reg301=reg86*reg301; reg460=ponderation*reg262; reg896=reg86*reg896; reg894=reg86*reg894;
    reg233=reg86*reg233; reg1221=reg86*reg1221; reg891=reg86*reg891; reg545=reg86*reg545; reg1290=reg86*reg1290;
    reg857=reg86*reg857; reg1266=reg86*reg1266; reg1294=reg86*reg1294; reg461=ponderation*reg231; reg1306=reg86*reg1306;
    reg854=reg86*reg854; reg1298=reg86*reg1298; reg466=ponderation*reg241; reg1260=reg86*reg1260; reg974=reg86*reg974;
    reg735=reg86*reg735; reg972=reg86*reg972; reg1018=reg86*reg1018; reg296=reg86*reg296; reg1025=reg86*reg1025;
    reg298=reg86*reg298; reg473=ponderation*reg201; reg494=reg86*reg494; reg825=reg86*reg825; reg1038=reg86*reg1038;
    reg823=reg86*reg823; reg321=reg86*reg321; reg1030=reg86*reg1030; reg1284=reg86*reg1284; reg821=reg86*reg821;
    reg1093=reg86*reg1093; reg314=reg86*reg314; reg1029=reg86*reg1029; reg313=reg86*reg313; reg595=reg86*reg595;
    reg817=reg86*reg817; reg1281=reg86*reg1281; reg814=reg86*reg814; reg1104=reg86*reg1104; reg1077=reg86*reg1077;
    reg319=reg86*reg319; reg484=ponderation*reg282; reg756=reg86*reg756; reg337=reg86*reg337; reg963=reg86*reg963;
    reg1055=reg86*reg1055; reg961=reg86*reg961; reg1048=reg86*reg1048; reg326=reg86*reg326; reg750=reg86*reg750;
    reg1075=reg86*reg1075; reg487=reg86*reg487; reg311=reg86*reg311; reg955=reg86*reg955; reg568=reg86*reg568;
    reg1068=reg86*reg1068; reg350=reg86*reg350; reg982=reg86*reg982; reg258=reg86*reg258; reg1063=reg86*reg1063;
    reg979=reg86*reg979; reg708=reg86*reg708; reg340=reg86*reg340; reg611=reg86*reg611; reg206=reg86*reg206;
    reg212=reg86*reg212; reg838=reg86*reg838; reg1114=reg86*reg1114; reg1086=reg86*reg1086; reg836=reg86*reg836;
    reg833=reg86*reg833; reg1082=reg86*reg1082; reg1269=reg86*reg1269; reg830=reg86*reg830; reg216=reg86*reg216;
    reg828=reg86*reg828; reg329=reg86*reg329; reg1304=reg86*reg1304; reg617=reg86*reg617; reg1074=reg86*reg1074;
    reg792=reg86*reg792; reg1096=reg86*reg1096; reg789=reg86*reg789; reg597=reg86*reg597; reg521=reg86*reg521;
    reg217=reg86*reg217; reg785=reg86*reg785; reg309=reg86*reg309; reg841=reg86*reg841; reg470=reg86*reg470;
    reg179=reg86*reg179; reg1124=reg86*reg1124; reg811=reg86*reg811; reg1277=reg86*reg1277; matrix(indices[1]+2,indices[4]+1)+=ponderation*reg329;
    matrix(indices[1]+1,indices[5]+1)+=ponderation*reg1042; matrix(indices[1]+2,indices[7]+1)+=ponderation*reg278; matrix(indices[1]+1,indices[7]+0)+=ponderation*reg1107; matrix(indices[1]+1,indices[7]+2)+=ponderation*reg1100; matrix(indices[7]+0,indices[1]+1)+=ponderation*reg1241;
    matrix(indices[3]+0,indices[7]+1)+=ponderation*reg1031; matrix(indices[1]+2,indices[6]+0)+=ponderation*reg457; matrix(indices[7]+0,indices[6]+1)+=ponderation*reg1014; matrix(indices[1]+1,indices[3]+2)+=ponderation*reg1065; matrix(indices[1]+2,indices[1]+0)+=ponderation*reg1115;
    matrix(indices[3]+1,indices[2]+2)+=ponderation*reg1083; matrix(indices[1]+2,indices[4]+2)+=ponderation*reg355; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg394; matrix(indices[7]+0,indices[3]+0)+=ponderation*reg274; matrix(indices[1]+2,indices[2]+0)+=ponderation*reg1077;
    matrix(indices[7]+0,indices[2]+2)+=ponderation*reg530; matrix(indices[7]+0,indices[5]+2)+=ponderation*reg1037; matrix(indices[1]+2,indices[7]+2)+=ponderation*reg307; matrix(indices[7]+0,indices[3]+2)+=-reg367; matrix(indices[7]+0,indices[5]+0)+=ponderation*reg1105;
    matrix(indices[1]+1,indices[3]+0)+=ponderation*reg1070; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg266; matrix(indices[7]+0,indices[2]+0)+=ponderation*reg317; matrix(indices[1]+1,indices[6]+2)+=ponderation*reg1110; matrix(indices[1]+2,indices[6]+1)+=ponderation*reg268;
    matrix(indices[1]+2,indices[3]+0)+=-reg473; matrix(indices[1]+1,indices[4]+2)+=ponderation*reg1020; matrix(indices[1]+2,indices[0]+1)+=ponderation*reg1120; matrix(indices[1]+2,indices[5]+1)+=ponderation*reg1309; matrix(indices[7]+0,indices[4]+1)+=ponderation*reg1117;
    matrix(indices[1]+1,indices[4]+1)+=ponderation*reg397; matrix(indices[1]+1,indices[5]+2)+=ponderation*reg1039; matrix(indices[1]+2,indices[6]+2)+=ponderation*reg301; matrix(indices[7]+0,indices[4]+2)+=ponderation*reg1123; matrix(indices[7]+0,indices[5]+1)+=ponderation*reg1027;
    matrix(indices[7]+0,indices[3]+1)+=ponderation*reg1091; matrix(indices[7]+0,indices[6]+0)+=ponderation*reg1022; matrix(indices[1]+2,indices[4]+0)+=ponderation*reg1086; matrix(indices[7]+0,indices[1]+2)+=ponderation*reg197; matrix(indices[1]+2,indices[0]+2)+=ponderation*reg425;
    matrix(indices[1]+2,indices[3]+2)+=ponderation*reg470; matrix(indices[1]+1,indices[7]+1)+=ponderation*reg454; matrix(indices[1]+2,indices[2]+2)+=ponderation*reg258; matrix(indices[1]+1,indices[6]+0)+=ponderation*reg1035; matrix(indices[1]+1,indices[4]+0)+=ponderation*reg1059;
    matrix(indices[7]+0,indices[2]+1)+=ponderation*reg200; matrix(indices[1]+2,indices[7]+0)+=ponderation*reg1306; matrix(indices[7]+0,indices[4]+0)+=ponderation*reg1081; matrix(indices[1]+2,indices[5]+2)+=ponderation*reg289; matrix(indices[1]+2,indices[3]+1)+=ponderation*reg1093;
    matrix(indices[1]+1,indices[5]+0)+=ponderation*reg1023; matrix(indices[1]+2,indices[5]+0)+=ponderation*reg175; matrix(indices[1]+2,indices[2]+1)+=ponderation*reg1075; matrix(indices[1]+2,indices[0]+0)+=ponderation*reg401; matrix(indices[0]+1,indices[4]+2)+=ponderation*reg1029;
    matrix(indices[7]+2,indices[1]+1)+=ponderation*reg1034; matrix(indices[0]+1,indices[4]+1)+=ponderation*reg595; matrix(indices[0]+1,indices[4]+0)+=ponderation*reg1104; matrix(indices[7]+2,indices[1]+2)+=ponderation*reg619; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg1124;
    matrix(indices[0]+1,indices[3]+1)+=ponderation*reg179; matrix(indices[7]+2,indices[2]+0)+=ponderation*reg1101; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg1114; matrix(indices[0]+1,indices[2]+2)+=ponderation*reg1082; matrix(indices[7]+2,indices[2]+1)+=ponderation*reg1118;
    matrix(indices[0]+1,indices[2]+1)+=ponderation*reg216; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg1074; matrix(indices[7]+2,indices[2]+2)+=ponderation*reg203; matrix(indices[0]+1,indices[1]+2)+=ponderation*reg1096; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg521;
    matrix(indices[7]+2,indices[3]+0)+=-reg365; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg1085; matrix(indices[0]+1,indices[0]+2)+=ponderation*reg222; matrix(indices[0]+2,indices[1]+1)+=ponderation*reg297; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg1199;
    matrix(indices[0]+2,indices[0]+2)+=ponderation*reg303; matrix(indices[7]+1,indices[7]+1)+=ponderation*reg294; matrix(indices[0]+2,indices[0]+1)+=ponderation*reg319; matrix(indices[0]+2,indices[0]+0)+=ponderation*reg1055; matrix(indices[7]+1,indices[7]+2)+=ponderation*reg1191;
    matrix(indices[0]+1,indices[7]+2)+=ponderation*reg1048; matrix(indices[0]+1,indices[7]+1)+=ponderation*reg311; matrix(indices[7]+2,indices[0]+0)+=ponderation*reg1050; matrix(indices[0]+1,indices[7]+0)+=ponderation*reg1068; matrix(indices[0]+1,indices[6]+2)+=ponderation*reg1063;
    matrix(indices[7]+2,indices[0]+1)+=ponderation*reg1069; matrix(indices[0]+1,indices[6]+1)+=ponderation*reg611; matrix(indices[0]+1,indices[6]+0)+=ponderation*reg1018; matrix(indices[7]+2,indices[0]+2)+=ponderation*reg606; matrix(indices[0]+1,indices[5]+2)+=ponderation*reg1025;
    matrix(indices[0]+1,indices[5]+1)+=ponderation*reg1038; matrix(indices[7]+2,indices[1]+0)+=ponderation*reg1021; matrix(indices[0]+1,indices[5]+0)+=ponderation*reg1030; matrix(indices[0]+0,indices[4]+0)+=ponderation*reg1232; matrix(indices[7]+2,indices[5]+2)+=ponderation*reg176;
    matrix(indices[0]+0,indices[3]+2)+=-reg460; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg233; matrix(indices[7]+2,indices[6]+0)+=ponderation*reg1236; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg1290; matrix(indices[0]+0,indices[2]+2)+=ponderation*reg1294;
    matrix(indices[7]+2,indices[6]+1)+=ponderation*reg1288; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg1298; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg544; matrix(indices[7]+2,indices[6]+2)+=ponderation*reg210; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg1305;
    matrix(indices[0]+0,indices[1]+1)+=ponderation*reg1270; matrix(indices[7]+2,indices[7]+0)+=ponderation*reg623; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg570; matrix(indices[0]+0,indices[0]+2)+=ponderation*reg1282; matrix(indices[7]+2,indices[7]+1)+=ponderation*reg1275;
    matrix(indices[0]+0,indices[0]+1)+=ponderation*reg193; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg486; matrix(indices[7]+2,indices[7]+2)+=ponderation*reg235; matrix(indices[7]+2,indices[3]+1)+=ponderation*reg1088; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg529;
    matrix(indices[0]+1,indices[0]+0)+=ponderation*reg51; matrix(indices[7]+2,indices[3]+2)+=ponderation*reg323; matrix(indices[0]+0,indices[7]+2)+=ponderation*reg1313; matrix(indices[0]+0,indices[7]+1)+=ponderation*reg177; matrix(indices[7]+2,indices[4]+0)+=ponderation*reg1314;
    matrix(indices[0]+0,indices[7]+0)+=ponderation*reg495; matrix(indices[0]+0,indices[6]+2)+=ponderation*reg538; matrix(indices[7]+2,indices[4]+1)+=ponderation*reg1308; matrix(indices[0]+0,indices[6]+1)+=ponderation*reg187; matrix(indices[0]+0,indices[6]+0)+=ponderation*reg569;
    matrix(indices[7]+2,indices[4]+2)+=ponderation*reg499; matrix(indices[0]+0,indices[5]+2)+=ponderation*reg1252; matrix(indices[0]+0,indices[5]+1)+=ponderation*reg1257; matrix(indices[7]+2,indices[5]+0)+=ponderation*reg1250; matrix(indices[0]+0,indices[5]+0)+=ponderation*reg189;
    matrix(indices[0]+0,indices[4]+2)+=ponderation*reg1222; matrix(indices[7]+2,indices[5]+1)+=ponderation*reg1262; matrix(indices[0]+0,indices[4]+1)+=ponderation*reg1227; matrix(indices[1]+0,indices[6]+1)+=ponderation*reg1216; matrix(indices[1]+0,indices[6]+0)+=ponderation*reg625;
    matrix(indices[7]+1,indices[1]+0)+=ponderation*reg198; matrix(indices[1]+0,indices[5]+2)+=ponderation*reg1219; matrix(indices[1]+0,indices[5]+1)+=ponderation*reg1201; matrix(indices[1]+0,indices[5]+0)+=ponderation*reg1204; matrix(indices[7]+1,indices[1]+1)+=ponderation*reg375;
    matrix(indices[1]+0,indices[4]+2)+=ponderation*reg1207; matrix(indices[1]+0,indices[4]+1)+=ponderation*reg1145; matrix(indices[7]+1,indices[1]+2)+=ponderation*reg1206; matrix(indices[1]+0,indices[4]+0)+=ponderation*reg483; matrix(indices[1]+0,indices[3]+2)+=-reg436;
    matrix(indices[7]+1,indices[2]+0)+=ponderation*reg1148; matrix(indices[1]+0,indices[3]+1)+=ponderation*reg1153; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg1129; matrix(indices[7]+1,indices[2]+1)+=ponderation*reg476; matrix(indices[1]+0,indices[2]+2)+=ponderation*reg1134;
    matrix(indices[1]+0,indices[2]+1)+=ponderation*reg1138; matrix(indices[7]+1,indices[2]+2)+=ponderation*reg1131; matrix(indices[1]+0,indices[2]+0)+=ponderation*reg429; matrix(indices[7]+0,indices[6]+2)+=ponderation*reg1066; matrix(indices[1]+1,indices[2]+2)+=ponderation*reg1044;
    matrix(indices[1]+1,indices[2]+1)+=ponderation*reg402; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg1051; matrix(indices[7]+0,indices[7]+0)+=ponderation*reg1046; matrix(indices[1]+1,indices[1]+2)+=ponderation*reg1056; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg415;
    matrix(indices[7]+0,indices[7]+1)+=ponderation*reg1054; matrix(indices[1]+1,indices[1]+0)+=ponderation*reg1192; matrix(indices[1]+1,indices[0]+2)+=ponderation*reg1195; matrix(indices[7]+0,indices[7]+2)+=ponderation*reg414; matrix(indices[1]+1,indices[0]+1)+=ponderation*reg356;
    matrix(indices[1]+1,indices[0]+0)+=ponderation*reg1177; matrix(indices[7]+1,indices[0]+0)+=ponderation*reg1198; matrix(indices[1]+0,indices[7]+2)+=ponderation*reg358; matrix(indices[1]+0,indices[7]+1)+=ponderation*reg1181; matrix(indices[7]+1,indices[0]+1)+=ponderation*reg361;
    matrix(indices[1]+0,indices[7]+0)+=ponderation*reg1187; matrix(indices[1]+0,indices[6]+2)+=ponderation*reg1212; matrix(indices[7]+1,indices[0]+2)+=ponderation*reg1186; matrix(indices[7]+1,indices[5]+0)+=ponderation*reg614; matrix(indices[0]+2,indices[5]+0)+=ponderation*reg1133;
    matrix(indices[1]+2,indices[1]+1)+=ponderation*reg1126; matrix(indices[0]+2,indices[4]+2)+=ponderation*reg334; matrix(indices[7]+1,indices[5]+1)+=ponderation*reg1127; matrix(indices[0]+2,indices[4]+1)+=ponderation*reg1150; matrix(indices[0]+2,indices[4]+0)+=ponderation*reg1144;
    matrix(indices[7]+1,indices[5]+2)+=ponderation*reg1152; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg563; matrix(indices[0]+2,indices[3]+1)+=ponderation*reg227; matrix(indices[7]+1,indices[6]+0)+=ponderation*reg1209; matrix(indices[0]+2,indices[3]+0)+=-reg412;
    matrix(indices[0]+2,indices[2]+2)+=ponderation*reg344; matrix(indices[7]+1,indices[6]+1)+=ponderation*reg353; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg341; matrix(indices[0]+2,indices[2]+0)+=ponderation*reg1211; matrix(indices[7]+1,indices[6]+2)+=ponderation*reg1218;
    matrix(indices[0]+2,indices[1]+2)+=ponderation*reg520; matrix(indices[1]+1,indices[6]+1)+=ponderation*reg369; matrix(indices[7]+1,indices[7]+0)+=ponderation*reg1185; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg1166; matrix(indices[7]+1,indices[3]+0)+=ponderation*reg1141;
    matrix(indices[1]+0,indices[1]+1)+=ponderation*reg1170; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg447; matrix(indices[1]+0,indices[0]+2)+=ponderation*reg1175; matrix(indices[7]+1,indices[3]+1)+=ponderation*reg431; matrix(indices[1]+0,indices[0]+1)+=ponderation*reg1158;
    matrix(indices[1]+0,indices[0]+0)+=ponderation*reg1163; matrix(indices[7]+1,indices[3]+2)+=ponderation*reg151; matrix(indices[0]+2,indices[7]+2)+=ponderation*reg287; matrix(indices[0]+2,indices[7]+1)+=ponderation*reg1165; matrix(indices[7]+1,indices[4]+0)+=ponderation*reg190;
    matrix(indices[0]+2,indices[7]+0)+=ponderation*reg1161; matrix(indices[0]+2,indices[6]+2)+=ponderation*reg256; matrix(indices[7]+1,indices[4]+1)+=ponderation*reg280; matrix(indices[0]+2,indices[6]+1)+=ponderation*reg1173; matrix(indices[0]+2,indices[6]+0)+=ponderation*reg1169;
    matrix(indices[7]+1,indices[4]+2)+=ponderation*reg1156; matrix(indices[0]+2,indices[5]+2)+=ponderation*reg285; matrix(indices[0]+2,indices[5]+1)+=ponderation*reg1136; matrix(indices[5]+2,indices[4]+1)+=ponderation*reg984; matrix(indices[4]+0,indices[5]+1)+=ponderation*reg487;
    matrix(indices[4]+0,indices[5]+0)+=ponderation*reg326; matrix(indices[5]+2,indices[4]+2)+=ponderation*reg567; matrix(indices[4]+0,indices[4]+2)+=ponderation*reg961; matrix(indices[4]+0,indices[4]+1)+=ponderation*reg963; matrix(indices[5]+2,indices[5]+0)+=ponderation*reg960;
    matrix(indices[4]+0,indices[4]+0)+=ponderation*reg337; matrix(indices[4]+0,indices[3]+2)+=-reg484; matrix(indices[5]+2,indices[5]+1)+=-reg352; matrix(indices[4]+0,indices[3]+1)+=ponderation*reg967; matrix(indices[4]+0,indices[3]+0)+=ponderation*reg997;
    matrix(indices[5]+2,indices[5]+2)+=ponderation*reg264; matrix(indices[4]+0,indices[2]+2)+=ponderation*reg1000; matrix(indices[4]+0,indices[2]+1)+=ponderation*reg1002; matrix(indices[5]+2,indices[6]+0)+=ponderation*reg999; matrix(indices[4]+0,indices[2]+0)+=ponderation*reg284;
    matrix(indices[4]+0,indices[1]+2)+=ponderation*reg1007; matrix(indices[5]+2,indices[6]+1)+=ponderation*reg1005; matrix(indices[4]+0,indices[1]+1)+=ponderation*reg449; matrix(indices[4]+0,indices[1]+0)+=ponderation*reg272; matrix(indices[5]+2,indices[6]+2)+=ponderation*reg579;
    matrix(indices[4]+1,indices[2]+2)+=ponderation*reg817; matrix(indices[5]+2,indices[2]+0)+=ponderation*reg813; matrix(indices[4]+1,indices[2]+1)+=ponderation*reg313; matrix(indices[4]+1,indices[2]+0)+=ponderation*reg314; matrix(indices[5]+2,indices[2]+1)+=ponderation*reg819;
    matrix(indices[4]+1,indices[1]+2)+=ponderation*reg821; matrix(indices[4]+1,indices[1]+1)+=ponderation*reg321; matrix(indices[5]+2,indices[2]+2)+=ponderation*reg583; matrix(indices[4]+1,indices[1]+0)+=ponderation*reg823; matrix(indices[4]+1,indices[0]+2)+=ponderation*reg825;
    matrix(indices[5]+2,indices[3]+0)+=-reg363; matrix(indices[4]+1,indices[0]+1)+=ponderation*reg298; matrix(indices[4]+1,indices[0]+0)+=ponderation*reg296; matrix(indices[5]+2,indices[3]+1)+=ponderation*reg969; matrix(indices[4]+0,indices[7]+2)+=ponderation*reg972;
    matrix(indices[4]+0,indices[7]+1)+=ponderation*reg974; matrix(indices[4]+0,indices[7]+0)+=ponderation*reg340; matrix(indices[5]+2,indices[3]+2)+=-reg360; matrix(indices[4]+0,indices[6]+2)+=ponderation*reg979; matrix(indices[4]+0,indices[6]+1)+=ponderation*reg982;
    matrix(indices[5]+2,indices[4]+0)+=ponderation*reg978; matrix(indices[4]+0,indices[6]+0)+=ponderation*reg350; matrix(indices[4]+0,indices[5]+2)+=ponderation*reg955; matrix(indices[3]+2,indices[4]+0)+=-reg396; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg277;
    matrix(indices[6]+0,indices[1]+1)+=ponderation*reg923; matrix(indices[3]+2,indices[3]+1)+=-reg391; matrix(indices[3]+2,indices[3]+0)+=ponderation*reg390; matrix(indices[6]+0,indices[1]+2)+=ponderation*reg925; matrix(indices[3]+2,indices[2]+2)+=ponderation*reg458;
    matrix(indices[3]+2,indices[2]+1)+=ponderation*reg908; matrix(indices[3]+2,indices[2]+0)+=-reg389; matrix(indices[6]+0,indices[2]+0)+=ponderation*reg907; matrix(indices[3]+2,indices[1]+2)+=ponderation*reg374; matrix(indices[3]+2,indices[1]+1)+=ponderation*reg403;
    matrix(indices[6]+0,indices[2]+1)+=ponderation*reg910; matrix(indices[3]+2,indices[1]+0)+=-reg378; matrix(indices[3]+2,indices[0]+2)+=ponderation*reg381; matrix(indices[6]+0,indices[2]+2)+=ponderation*reg913; matrix(indices[3]+2,indices[0]+1)+=ponderation*reg380;
    matrix(indices[3]+2,indices[0]+0)+=-reg377; matrix(indices[3]+1,indices[7]+2)+=ponderation*reg915; matrix(indices[6]+0,indices[3]+0)+=ponderation*reg1079; matrix(indices[3]+1,indices[7]+1)+=ponderation*reg644; matrix(indices[3]+1,indices[7]+0)+=ponderation*reg939;
    matrix(indices[4]+0,indices[0]+2)+=ponderation*reg1013; matrix(indices[4]+0,indices[0]+1)+=ponderation*reg987; matrix(indices[5]+2,indices[7]+0)+=ponderation*reg1012; matrix(indices[4]+0,indices[0]+0)+=ponderation*reg991; matrix(indices[3]+2,indices[7]+2)+=ponderation*reg438;
    matrix(indices[5]+2,indices[7]+1)+=ponderation*reg990; matrix(indices[3]+2,indices[7]+1)+=ponderation*reg368; matrix(indices[5]+1,indices[6]+0)+=ponderation*reg992; matrix(indices[5]+2,indices[7]+2)+=ponderation*reg509; matrix(indices[5]+1,indices[6]+1)+=ponderation*reg871;
    matrix(indices[3]+2,indices[7]+0)+=-reg408; matrix(indices[3]+2,indices[6]+2)+=ponderation*reg430; matrix(indices[6]+0,indices[0]+0)+=ponderation*reg994; matrix(indices[3]+2,indices[6]+1)+=ponderation*reg995; matrix(indices[3]+2,indices[6]+0)+=-reg406;
    matrix(indices[6]+0,indices[0]+1)+=ponderation*reg433; matrix(indices[3]+2,indices[5]+2)+=-reg405; matrix(indices[3]+2,indices[5]+1)+=ponderation*reg919; matrix(indices[6]+0,indices[0]+2)+=ponderation*reg917; matrix(indices[3]+2,indices[5]+0)+=-reg398;
    matrix(indices[3]+2,indices[4]+2)+=ponderation*reg472; matrix(indices[3]+2,indices[4]+1)+=ponderation*reg920; matrix(indices[6]+0,indices[1]+0)+=ponderation*reg468; matrix(indices[5]+0,indices[2]+1)+=ponderation*reg545; matrix(indices[5]+0,indices[2]+0)+=ponderation*reg891;
    matrix(indices[5]+1,indices[2]+1)+=ponderation*reg587; matrix(indices[5]+0,indices[1]+2)+=ponderation*reg894; matrix(indices[5]+0,indices[1]+1)+=ponderation*reg896; matrix(indices[5]+1,indices[2]+2)+=ponderation*reg892; matrix(indices[5]+0,indices[1]+0)+=ponderation*reg900;
    matrix(indices[5]+0,indices[0]+2)+=ponderation*reg901; matrix(indices[5]+1,indices[3]+0)+=ponderation*reg898; matrix(indices[5]+0,indices[0]+1)+=ponderation*reg903; matrix(indices[5]+0,indices[0]+0)+=ponderation*reg906; matrix(indices[4]+2,indices[7]+2)+=ponderation*reg502;
    matrix(indices[5]+1,indices[3]+1)+=-reg372; matrix(indices[4]+2,indices[7]+1)+=ponderation*reg877; matrix(indices[4]+2,indices[7]+0)+=ponderation*reg879; matrix(indices[5]+1,indices[3]+2)+=ponderation*reg598; matrix(indices[4]+2,indices[6]+2)+=ponderation*reg490;
    matrix(indices[4]+2,indices[6]+1)+=ponderation*reg618; matrix(indices[5]+1,indices[4]+0)+=ponderation*reg882; matrix(indices[4]+2,indices[6]+0)+=ponderation*reg884; matrix(indices[4]+2,indices[5]+2)+=ponderation*reg536; matrix(indices[4]+2,indices[5]+1)+=ponderation*reg887;
    matrix(indices[5]+0,indices[7]+2)+=ponderation*reg860; matrix(indices[5]+0,indices[7]+1)+=ponderation*reg863; matrix(indices[5]+0,indices[7]+0)+=ponderation*reg512; matrix(indices[5]+1,indices[0]+0)+=ponderation*reg862; matrix(indices[5]+0,indices[6]+2)+=ponderation*reg503;
    matrix(indices[5]+0,indices[6]+1)+=ponderation*reg867; matrix(indices[5]+1,indices[0]+1)+=ponderation*reg232; matrix(indices[5]+0,indices[6]+0)+=ponderation*reg580; matrix(indices[5]+0,indices[5]+2)+=ponderation*reg872; matrix(indices[5]+1,indices[0]+2)+=ponderation*reg869;
    matrix(indices[5]+0,indices[5]+1)+=-reg456; matrix(indices[5]+0,indices[5]+0)+=ponderation*reg551; matrix(indices[5]+1,indices[1]+0)+=ponderation*reg875; matrix(indices[5]+0,indices[4]+2)+=ponderation*reg845; matrix(indices[5]+0,indices[4]+1)+=ponderation*reg552;
    matrix(indices[5]+0,indices[4]+0)+=ponderation*reg244; matrix(indices[5]+1,indices[1]+1)+=ponderation*reg559; matrix(indices[5]+0,indices[3]+2)+=-reg466; matrix(indices[5]+0,indices[3]+1)+=ponderation*reg854; matrix(indices[5]+1,indices[1]+2)+=ponderation*reg848;
    matrix(indices[5]+0,indices[3]+0)+=-reg461; matrix(indices[5]+0,indices[2]+2)+=ponderation*reg857; matrix(indices[5]+1,indices[2]+0)+=ponderation*reg855; matrix(indices[5]+1,indices[7]+1)+=ponderation*reg239; matrix(indices[4]+1,indices[7]+2)+=ponderation*reg785;
    matrix(indices[4]+1,indices[7]+1)+=ponderation*reg597; matrix(indices[5]+1,indices[7]+2)+=ponderation*reg781; matrix(indices[4]+1,indices[7]+0)+=ponderation*reg789; matrix(indices[4]+1,indices[6]+2)+=ponderation*reg792; matrix(indices[5]+2,indices[0]+0)+=ponderation*reg788;
    matrix(indices[4]+1,indices[6]+1)+=ponderation*reg617; matrix(indices[4]+1,indices[6]+0)+=ponderation*reg828; matrix(indices[5]+2,indices[0]+1)+=ponderation*reg827; matrix(indices[4]+1,indices[5]+2)+=ponderation*reg830; matrix(indices[4]+1,indices[5]+1)+=ponderation*reg833;
    matrix(indices[5]+2,indices[0]+2)+=ponderation*reg506; matrix(indices[4]+1,indices[5]+0)+=ponderation*reg836; matrix(indices[4]+1,indices[4]+2)+=ponderation*reg838; matrix(indices[5]+2,indices[1]+0)+=ponderation*reg834; matrix(indices[4]+1,indices[4]+1)+=ponderation*reg206;
    matrix(indices[4]+1,indices[4]+0)+=ponderation*reg841; matrix(indices[5]+2,indices[1]+1)+=ponderation*reg840; matrix(indices[4]+1,indices[3]+2)+=ponderation*reg811; matrix(indices[4]+1,indices[3]+1)+=ponderation*reg309; matrix(indices[5]+2,indices[1]+2)+=ponderation*reg572;
    matrix(indices[4]+1,indices[3]+0)+=ponderation*reg814; matrix(indices[5]+1,indices[4]+1)+=ponderation*reg485; matrix(indices[4]+2,indices[5]+0)+=ponderation*reg889; matrix(indices[4]+2,indices[4]+2)+=ponderation*reg531; matrix(indices[5]+1,indices[4]+2)+=ponderation*reg613;
    matrix(indices[4]+2,indices[4]+1)+=ponderation*reg793; matrix(indices[4]+2,indices[4]+0)+=ponderation*reg795; matrix(indices[5]+1,indices[5]+0)+=-reg371; matrix(indices[4]+2,indices[3]+2)+=ponderation*reg250; matrix(indices[4]+2,indices[3]+1)+=ponderation*reg799;
    matrix(indices[4]+2,indices[3]+0)+=-reg452; matrix(indices[5]+1,indices[5]+1)+=ponderation*reg798; matrix(indices[4]+2,indices[2]+2)+=ponderation*reg513; matrix(indices[4]+2,indices[2]+1)+=ponderation*reg803; matrix(indices[5]+1,indices[5]+2)+=-reg362;
    matrix(indices[4]+2,indices[2]+0)+=ponderation*reg807; matrix(indices[4]+2,indices[1]+2)+=ponderation*reg214; matrix(indices[5]+1,indices[6]+2)+=ponderation*reg805; matrix(indices[4]+2,indices[1]+1)+=ponderation*reg775; matrix(indices[4]+2,indices[1]+0)+=ponderation*reg777;
    matrix(indices[5]+1,indices[7]+0)+=ponderation*reg810; matrix(indices[4]+2,indices[0]+2)+=ponderation*reg604; matrix(indices[4]+2,indices[0]+1)+=ponderation*reg779; matrix(indices[4]+2,indices[0]+0)+=ponderation*reg782; matrix(indices[2]+1,indices[6]+2)+=ponderation*reg713;
    matrix(indices[2]+1,indices[6]+1)+=ponderation*reg500; matrix(indices[6]+1,indices[7]+1)+=ponderation*reg489; matrix(indices[2]+1,indices[6]+0)+=ponderation*reg774; matrix(indices[2]+1,indices[5]+2)+=ponderation*reg740; matrix(indices[6]+1,indices[7]+2)+=ponderation*reg762;
    matrix(indices[2]+1,indices[5]+1)+=ponderation*reg574; matrix(indices[2]+1,indices[5]+0)+=ponderation*reg753; matrix(indices[6]+2,indices[0]+0)+=ponderation*reg744; matrix(indices[2]+1,indices[4]+2)+=ponderation*reg656; matrix(indices[2]+1,indices[4]+1)+=ponderation*reg588;
    matrix(indices[6]+2,indices[0]+1)+=ponderation*reg654; matrix(indices[2]+1,indices[4]+0)+=ponderation*reg696; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg702; matrix(indices[6]+2,indices[0]+2)+=ponderation*reg589; matrix(indices[2]+1,indices[3]+1)+=ponderation*reg564;
    matrix(indices[6]+2,indices[2]+0)+=ponderation*reg633; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg669; matrix(indices[2]+1,indices[2]+2)+=ponderation*reg684; matrix(indices[6]+2,indices[2]+2)+=ponderation*reg388; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg578;
    matrix(indices[2]+1,indices[2]+0)+=ponderation*reg756; matrix(indices[6]+1,indices[4]+2)+=ponderation*reg642; matrix(indices[2]+2,indices[3]+2)+=ponderation*reg518; matrix(indices[2]+2,indices[3]+1)+=ponderation*reg773; matrix(indices[6]+1,indices[5]+0)+=ponderation*reg630;
    matrix(indices[2]+2,indices[3]+0)+=-reg420; matrix(indices[2]+2,indices[2]+2)+=ponderation*reg601; matrix(indices[6]+1,indices[5]+1)+=ponderation*reg720; matrix(indices[2]+2,indices[2]+1)+=ponderation*reg734; matrix(indices[2]+2,indices[2]+0)+=ponderation*reg541;
    matrix(indices[6]+1,indices[5]+2)+=ponderation*reg706; matrix(indices[2]+2,indices[1]+2)+=ponderation*reg622; matrix(indices[2]+2,indices[1]+1)+=ponderation*reg501; matrix(indices[6]+1,indices[6]+0)+=ponderation*reg726; matrix(indices[2]+2,indices[1]+0)+=ponderation*reg665;
    matrix(indices[2]+2,indices[0]+2)+=ponderation*reg522; matrix(indices[2]+2,indices[0]+1)+=ponderation*reg743; matrix(indices[6]+1,indices[6]+1)+=ponderation*reg238; matrix(indices[2]+2,indices[0]+0)+=ponderation*reg761; matrix(indices[2]+1,indices[7]+2)+=ponderation*reg723;
    matrix(indices[6]+1,indices[6]+2)+=ponderation*reg763; matrix(indices[2]+1,indices[7]+1)+=ponderation*reg540; matrix(indices[2]+1,indices[7]+0)+=ponderation*reg731; matrix(indices[6]+1,indices[7]+0)+=ponderation*reg725; matrix(indices[6]+2,indices[7]+0)+=ponderation*reg1297;
    matrix(indices[2]+0,indices[4]+2)+=ponderation*reg183; matrix(indices[2]+0,indices[4]+1)+=ponderation*reg498; matrix(indices[6]+2,indices[7]+1)+=ponderation*reg1291; matrix(indices[2]+0,indices[4]+0)+=ponderation*reg1239; matrix(indices[2]+0,indices[3]+2)+=-reg448;
    matrix(indices[6]+2,indices[7]+2)+=ponderation*reg491; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg1233; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg1229; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg261; matrix(indices[7]+0,indices[0]+0)+=ponderation*reg532;
    matrix(indices[2]+0,indices[2]+1)+=ponderation*reg1221; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg1266; matrix(indices[7]+0,indices[0]+1)+=ponderation*reg1224; matrix(indices[2]+0,indices[1]+2)+=ponderation*reg1260; matrix(indices[2]+0,indices[1]+1)+=ponderation*reg1256;
    matrix(indices[7]+0,indices[0]+2)+=ponderation*reg1261; matrix(indices[2]+0,indices[1]+0)+=ponderation*reg1253; matrix(indices[2]+0,indices[0]+2)+=ponderation*reg1248; matrix(indices[2]+0,indices[0]+1)+=ponderation*reg1244; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg195;
    matrix(indices[7]+0,indices[1]+0)+=ponderation*reg593; matrix(indices[6]+2,indices[3]+0)+=-reg357; matrix(indices[2]+1,indices[1]+2)+=ponderation*reg750; matrix(indices[2]+1,indices[1]+1)+=ponderation*reg568; matrix(indices[6]+2,indices[3]+1)+=ponderation*reg752;
    matrix(indices[2]+1,indices[1]+0)+=ponderation*reg708; matrix(indices[2]+1,indices[0]+2)+=ponderation*reg735; matrix(indices[6]+2,indices[3]+2)+=ponderation*reg383; matrix(indices[2]+1,indices[0]+1)+=ponderation*reg494; matrix(indices[2]+1,indices[0]+0)+=ponderation*reg1284;
    matrix(indices[6]+2,indices[4]+0)+=ponderation*reg1285; matrix(indices[2]+0,indices[7]+2)+=ponderation*reg1281; matrix(indices[6]+2,indices[5]+1)+=ponderation*reg440; matrix(indices[2]+0,indices[7]+1)+=ponderation*reg1277; matrix(indices[2]+0,indices[7]+0)+=ponderation*reg212;
    matrix(indices[6]+2,indices[6]+0)+=ponderation*reg1278; matrix(indices[2]+0,indices[6]+2)+=ponderation*reg1269; matrix(indices[2]+0,indices[6]+1)+=ponderation*reg1304; matrix(indices[6]+2,indices[6]+1)+=ponderation*reg1271; matrix(indices[2]+0,indices[6]+0)+=ponderation*reg217;
    matrix(indices[2]+0,indices[5]+2)+=ponderation*reg169; matrix(indices[6]+2,indices[6]+2)+=ponderation*reg557; matrix(indices[2]+0,indices[5]+1)+=ponderation*reg1296; matrix(indices[2]+0,indices[5]+0)+=ponderation*reg1293; matrix(indices[6]+0,indices[5]+2)+=ponderation*reg937;
    matrix(indices[6]+2,indices[5]+2)+=ponderation*reg596; matrix(indices[3]+1,indices[2]+0)+=ponderation*reg676; matrix(indices[3]+1,indices[1]+2)+=ponderation*reg674; matrix(indices[6]+0,indices[6]+0)+=ponderation*reg677; matrix(indices[3]+1,indices[1]+1)+=ponderation*reg711;
    matrix(indices[3]+1,indices[1]+0)+=ponderation*reg699; matrix(indices[6]+0,indices[6]+1)+=ponderation*reg668; matrix(indices[3]+1,indices[0]+2)+=ponderation*reg693; matrix(indices[3]+1,indices[0]+1)+=ponderation*reg772; matrix(indices[6]+0,indices[6]+2)+=ponderation*reg694;
    matrix(indices[3]+1,indices[0]+0)+=ponderation*reg643; matrix(indices[3]+0,indices[7]+2)+=-reg446; matrix(indices[6]+2,indices[1]+2)+=ponderation*reg423; matrix(indices[6]+0,indices[7]+0)+=ponderation*reg407; matrix(indices[6]+2,indices[1]+1)+=ponderation*reg661;
    matrix(indices[6]+2,indices[2]+1)+=ponderation*reg657; matrix(indices[6]+0,indices[7]+1)+=ponderation*reg662; matrix(indices[6]+2,indices[1]+0)+=ponderation*reg667; matrix(indices[3]+0,indices[7]+0)+=ponderation*reg373; matrix(indices[6]+0,indices[7]+2)+=ponderation*reg647;
    matrix(indices[3]+0,indices[6]+2)+=-reg445; matrix(indices[6]+0,indices[3]+1)+=ponderation*reg387; matrix(indices[3]+1,indices[6]+2)+=ponderation*reg942; matrix(indices[3]+1,indices[6]+1)+=ponderation*reg768; matrix(indices[6]+0,indices[3]+2)+=-reg370;
    matrix(indices[3]+1,indices[6]+0)+=ponderation*reg944; matrix(indices[3]+1,indices[5]+2)+=ponderation*reg948; matrix(indices[3]+1,indices[5]+1)+=-reg395; matrix(indices[6]+0,indices[4]+0)+=ponderation*reg946; matrix(indices[3]+1,indices[5]+0)+=ponderation*reg952;
    matrix(indices[3]+1,indices[4]+2)+=ponderation*reg953; matrix(indices[6]+0,indices[4]+1)+=ponderation*reg950; matrix(indices[3]+1,indices[4]+1)+=ponderation*reg727; matrix(indices[3]+1,indices[4]+0)+=ponderation*reg417; matrix(indices[6]+0,indices[4]+2)+=ponderation*reg929;
    matrix(indices[3]+1,indices[3]+2)+=-reg439; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg399; matrix(indices[3]+1,indices[3]+0)+=-reg437; matrix(indices[6]+0,indices[5]+0)+=ponderation*reg931; matrix(indices[3]+1,indices[2]+1)+=ponderation*reg747;
    matrix(indices[6]+2,indices[5]+0)+=ponderation*reg934; matrix(indices[6]+0,indices[5]+1)+=ponderation*reg933; matrix(indices[6]+2,indices[4]+2)+=ponderation*reg359; matrix(indices[6]+2,indices[4]+1)+=ponderation*reg392; matrix(indices[3]+0,indices[1]+0)+=ponderation*reg346;
    matrix(indices[6]+1,indices[2]+1)+=ponderation*reg328; matrix(indices[3]+0,indices[0]+2)+=-reg435; matrix(indices[3]+0,indices[0]+1)+=ponderation*reg769; matrix(indices[6]+1,indices[2]+2)+=ponderation*reg719; matrix(indices[3]+0,indices[0]+0)+=ponderation*reg290;
    matrix(indices[2]+2,indices[7]+2)+=ponderation*reg299; matrix(indices[6]+1,indices[3]+0)+=ponderation*reg771; matrix(indices[2]+2,indices[7]+1)+=ponderation*reg658; matrix(indices[2]+2,indices[7]+0)+=ponderation*reg663; matrix(indices[6]+1,indices[3]+1)+=ponderation*reg293;
    matrix(indices[2]+2,indices[6]+2)+=ponderation*reg316; matrix(indices[2]+2,indices[6]+1)+=ponderation*reg687; matrix(indices[6]+1,indices[3]+2)+=ponderation*reg637; matrix(indices[2]+2,indices[6]+0)+=ponderation*reg692; matrix(indices[2]+2,indices[5]+2)+=ponderation*reg310;
    matrix(indices[6]+1,indices[4]+0)+=ponderation*reg690; matrix(indices[2]+2,indices[5]+1)+=ponderation*reg681; matrix(indices[2]+2,indices[5]+0)+=ponderation*reg686; matrix(indices[2]+2,indices[4]+2)+=ponderation*reg220; matrix(indices[6]+1,indices[4]+1)+=ponderation*reg306;
    matrix(indices[2]+2,indices[4]+1)+=ponderation*reg639; matrix(indices[2]+2,indices[4]+0)+=ponderation*reg628; matrix(indices[3]+0,indices[6]+1)+=ponderation*reg739; matrix(indices[6]+1,indices[0]+0)+=ponderation*reg746; matrix(indices[3]+0,indices[6]+0)+=ponderation*reg474;
    matrix(indices[3]+0,indices[5]+2)+=-reg444; matrix(indices[3]+0,indices[5]+1)+=ponderation*reg718; matrix(indices[6]+1,indices[0]+1)+=ponderation*reg475; matrix(indices[3]+0,indices[5]+0)+=-reg428; matrix(indices[3]+0,indices[4]+2)+=-reg424;
    matrix(indices[6]+1,indices[0]+2)+=ponderation*reg717; matrix(indices[3]+0,indices[4]+1)+=ponderation*reg704; matrix(indices[3]+0,indices[4]+0)+=ponderation*reg263; matrix(indices[6]+1,indices[1]+0)+=ponderation*reg705; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg336;
    matrix(indices[3]+0,indices[3]+1)+=-reg418; matrix(indices[6]+1,indices[1]+1)+=ponderation*reg253; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg754; matrix(indices[3]+0,indices[2]+2)+=-reg416; matrix(indices[6]+1,indices[1]+2)+=ponderation*reg482;
    matrix(indices[3]+0,indices[2]+1)+=ponderation*reg672; matrix(indices[3]+0,indices[2]+0)+=ponderation*reg335; matrix(indices[6]+1,indices[2]+0)+=ponderation*reg678; matrix(indices[3]+0,indices[1]+2)+=-reg413; matrix(indices[3]+0,indices[1]+1)+=ponderation*reg729;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[1]; T reg1=1-var_inter[0]; T reg2=1-var_inter[2]; T reg3=reg2*var_inter[0]; T reg4=reg2*reg0;
    T reg5=reg0*var_inter[0]; T reg6=reg0*reg1; T reg7=reg2*reg1; T reg8=elem.pos(0)[2]*reg4; T reg9=elem.pos(0)[2]*reg7;
    T reg10=elem.pos(1)[2]*reg3; T reg11=elem.pos(1)[2]*reg4; T reg12=reg2*var_inter[1]; T reg13=reg6*elem.pos(0)[1]; T reg14=elem.pos(1)[1]*reg3;
    T reg15=reg5*elem.pos(1)[2]; T reg16=reg6*elem.pos(0)[2]; T reg17=elem.pos(0)[1]*reg7; T reg18=reg5*elem.pos(1)[1]; T reg19=elem.pos(0)[1]*reg4;
    T reg20=elem.pos(1)[1]*reg4; T reg21=var_inter[0]*var_inter[1]; T reg22=elem.pos(2)[2]*reg12; T reg23=reg13+reg18; T reg24=reg21*elem.pos(2)[1];
    reg11=reg11-reg8; T reg25=elem.pos(2)[1]*reg3; T reg26=reg17+reg14; T reg27=reg15+reg16; T reg28=reg21*elem.pos(2)[2];
    reg20=reg20-reg19; T reg29=elem.pos(2)[1]*reg12; T reg30=elem.pos(2)[2]*reg3; T reg31=reg1*var_inter[1]; T reg32=reg10+reg9;
    reg30=reg30-reg32; T reg33=elem.pos(1)[0]*reg3; T reg34=elem.pos(3)[2]*reg7; T reg35=elem.pos(0)[0]*reg7; reg29=reg20+reg29;
    reg20=elem.pos(3)[1]*reg12; T reg36=reg31*elem.pos(3)[2]; T reg37=reg27+reg28; T reg38=reg23+reg24; T reg39=reg31*elem.pos(3)[1];
    T reg40=elem.pos(0)[0]*reg4; reg22=reg11+reg22; reg11=elem.pos(3)[2]*reg12; T reg41=elem.pos(1)[0]*reg4; T reg42=reg1*var_inter[2];
    T reg43=elem.pos(3)[1]*reg7; reg25=reg25-reg26; T reg44=reg0*var_inter[2]; T reg45=elem.pos(2)[0]*reg3; T reg46=reg5*elem.pos(1)[0];
    T reg47=var_inter[0]*var_inter[2]; T reg48=reg35+reg33; T reg49=elem.pos(4)[2]*reg44; reg22=reg22-reg11; T reg50=reg6*elem.pos(0)[0];
    T reg51=elem.pos(4)[2]*reg42; reg34=reg30+reg34; reg30=reg6*elem.pos(4)[1]; T reg52=reg38+reg39; T reg53=elem.pos(4)[1]*reg42;
    reg43=reg25+reg43; reg41=reg41-reg40; reg25=elem.pos(2)[0]*reg12; T reg54=reg6*elem.pos(4)[2]; T reg55=reg37+reg36;
    reg29=reg29-reg20; T reg56=elem.pos(4)[1]*reg44; reg43=reg43-reg53; T reg57=elem.pos(3)[0]*reg7; T reg58=elem.pos(5)[1]*reg47;
    T reg59=elem.pos(5)[2]*reg47; reg45=reg45-reg48; reg34=reg34-reg51; T reg60=reg5*elem.pos(5)[2]; reg25=reg41+reg25;
    reg41=elem.pos(3)[0]*reg12; T reg61=var_inter[1]*var_inter[2]; reg54=reg54-reg55; reg29=reg29-reg56; T reg62=elem.pos(5)[1]*reg44;
    reg30=reg30-reg52; T reg63=reg5*elem.pos(5)[1]; reg22=reg22-reg49; T reg64=elem.pos(5)[2]*reg44; T reg65=reg21*elem.pos(2)[0];
    T reg66=reg50+reg46; reg34=reg34-reg59; T reg67=elem.pos(6)[2]*reg47; T reg68=elem.pos(6)[1]*reg47; reg63=reg30+reg63;
    reg43=reg43-reg58; reg30=reg21*elem.pos(6)[2]; T reg69=reg21*elem.pos(6)[1]; reg60=reg54+reg60; reg25=reg25-reg41;
    reg54=elem.pos(4)[0]*reg44; T reg70=reg66+reg65; T reg71=elem.pos(6)[2]*reg61; reg62=reg29+reg62; reg29=elem.pos(6)[1]*reg61;
    reg64=reg22+reg64; reg22=elem.pos(4)[0]*reg42; T reg72=reg31*elem.pos(3)[0]; reg57=reg45+reg57; reg69=reg63+reg69;
    reg45=reg70+reg72; reg63=reg6*elem.pos(4)[0]; T reg73=elem.pos(7)[2]*reg42; reg67=reg34+reg67; reg34=reg31*elem.pos(7)[1];
    T reg74=elem.pos(5)[0]*reg44; reg25=reg25-reg54; reg30=reg60+reg30; reg60=reg31*elem.pos(7)[2]; reg29=reg62+reg29;
    reg62=elem.pos(7)[1]*reg61; reg71=reg64+reg71; reg64=elem.pos(7)[2]*reg61; reg57=reg57-reg22; T reg75=elem.pos(5)[0]*reg47;
    reg68=reg43+reg68; reg43=elem.pos(7)[1]*reg42; reg60=reg30+reg60; reg34=reg69+reg34; reg30=1+(*f.m).poisson_ratio;
    reg74=reg25+reg74; reg25=elem.pos(6)[0]*reg61; reg69=reg5*elem.pos(5)[0]; reg63=reg63-reg45; reg29=reg29-reg62;
    reg71=reg71-reg64; reg73=reg67+reg73; reg57=reg57-reg75; reg67=elem.pos(6)[0]*reg47; reg43=reg68+reg43;
    reg68=reg43*reg60; T reg76=reg29*reg60; T reg77=reg73*reg34; T reg78=reg71*reg34; reg30=reg30/(*f.m).elastic_modulus;
    T reg79=reg21*elem.pos(6)[0]; reg69=reg63+reg69; reg63=elem.pos(7)[0]*reg42; reg67=reg57+reg67; reg57=elem.pos(7)[0]*reg61;
    reg25=reg74+reg25; reg74=reg29*reg73; T reg80=reg71*reg43; reg78=reg76-reg78; reg76=pow(reg30,2);
    reg25=reg25-reg57; reg63=reg67+reg63; reg79=reg69+reg79; reg67=reg31*elem.pos(7)[0]; reg77=reg68-reg77;
    reg68=reg63*reg78; reg80=reg74-reg80; reg30=reg30*reg76; reg69=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg74=1.0/(*f.m).elastic_modulus;
    T reg81=reg25*reg77; reg67=reg79+reg67; reg79=reg71*reg67; T reg82=reg74*reg76; T reg83=reg73*reg67;
    T reg84=reg74*reg30; T reg85=reg25*reg60; reg60=reg63*reg60; T reg86=reg67*reg80; reg68=reg81-reg68;
    reg76=reg69*reg76; reg30=reg69*reg30; reg81=reg74*reg82; T reg87=reg69*reg76; T reg88=reg74*reg84;
    reg84=reg69*reg84; reg82=reg69*reg82; T reg89=reg69*reg30; reg71=reg71*reg63; reg73=reg25*reg73;
    T reg90=reg29*reg67; reg83=reg60-reg83; reg86=reg68+reg86; reg67=reg43*reg67; reg79=reg85-reg79;
    reg60=reg63*reg34; reg34=reg25*reg34; reg30=reg74*reg30; reg84=reg89+reg84; reg77=reg77/reg86;
    reg83=reg83/reg86; reg88=reg88-reg89; reg76=reg74*reg76; reg67=reg60-reg67; reg81=reg81-reg87;
    reg78=reg78/reg86; reg79=reg79/reg86; reg82=reg87+reg82; reg63=reg29*reg63; reg71=reg73-reg71;
    reg43=reg25*reg43; reg90=reg34-reg90; reg82=reg69*reg82; reg25=reg87+reg76; reg81=reg74*reg81;
    reg29=reg77*reg44; reg34=reg47*reg78; reg30=reg89+reg30; reg60=reg47*reg79; reg68=reg83*reg44;
    reg80=reg80/reg86; reg63=reg43-reg63; reg90=reg90/reg86; reg74=reg74*reg88; reg67=reg67/reg86;
    reg43=reg69*reg84; reg71=reg71/reg86; reg73=reg77*reg61; reg85=reg7*reg79; reg89=reg4*reg83;
    T reg91=reg5*reg80; T reg92=reg83*reg61; T reg93=reg42*reg78; T reg94=reg7*reg90; T reg95=reg42*reg79;
    T reg96=reg3*reg79; T reg97=reg61*reg67; T reg98=reg44*reg67; T reg99=reg42*reg90; T reg100=reg5*reg71;
    T reg101=reg12*reg67; T reg102=reg83*reg12; T reg103=reg68+reg60; T reg104=reg4*reg77; reg43=reg74-reg43;
    reg74=reg69*reg30; T reg105=reg7*reg78; T reg106=reg47*reg90; reg82=reg81-reg82; reg25=reg69*reg25;
    reg63=reg63/reg86; reg69=reg77*reg12; reg81=reg29+reg34; T reg107=reg3*reg78; T reg108=reg100+reg103;
    reg81=reg91+reg81; T reg109=reg89+reg96; T reg110=reg104+reg107; T reg111=reg99-reg98; T reg112=reg5*reg63;
    T reg113=reg3*reg90; T reg114=reg68-reg95; T reg115=reg93-reg29; T reg116=reg94+reg101; T reg117=reg31*reg63;
    T reg118=reg31*reg71; T reg119=reg85+reg102; T reg120=reg31*reg80; T reg121=reg105+reg69; T reg122=reg69-reg107;
    T reg123=reg21*reg80; T reg124=reg96-reg102; T reg125=reg21*reg63; T reg126=reg21*reg71; T reg127=reg95+reg92;
    T reg128=reg4*reg67; T reg129=reg6*reg63; T reg130=reg93+reg73; T reg131=reg6*reg71; T reg132=reg89-reg85;
    T reg133=reg97-reg106; T reg134=reg6*reg80; T reg135=reg105-reg104; reg25=reg82-reg25; reg82=reg98+reg106;
    reg74=reg43-reg74; reg43=reg73-reg34; T reg136=reg99+reg97; T reg137=reg60-reg92; reg122=reg122-reg123;
    T reg138=reg121+reg120; reg135=reg135-reg134; T reg139=reg101-reg113; reg119=reg119+reg118; reg132=reg132+reg131;
    T reg140=reg117-reg136; T reg141=reg117+reg116; reg25=reg25/reg74; reg124=reg124+reg126; reg115=reg134+reg115;
    T reg142=reg94-reg128; T reg143=0.5*reg108; reg82=reg112+reg82; T reg144=0.5*reg81; reg43=reg123+reg43;
    reg110=reg110-reg91; reg137=reg137-reg126; T reg145=reg100-reg109; reg111=reg129+reg111; reg133=reg125+reg133;
    reg127=reg127-reg118; T reg146=reg120-reg130; reg114=reg114-reg131; T reg147=reg128+reg113; T reg148=reg25*reg143;
    T reg149=0.5*reg146; T reg150=0.5*reg140; T reg151=0.5*reg82; T reg152=0.5*reg114; T reg153=reg25*reg144;
    T reg154=0.5*reg127; T reg155=0.5*reg115; reg139=reg139-reg125; T reg156=0.5*reg122; T reg157=0.5*reg138;
    T reg158=0.5*reg137; T reg159=0.5*reg141; T reg160=0.5*reg111; T reg161=0.5*reg43; T reg162=0.5*reg119;
    T reg163=0.5*reg133; T reg164=0.5*reg110; T reg165=0.5*reg135; reg142=reg142-reg129; T reg166=0.5*reg132;
    T reg167=0.5*reg145; T reg168=0.5*reg124; reg88=reg88/reg74; reg147=reg147-reg112; T reg169=reg25*reg154;
    reg30=reg30/reg74; T reg170=0.5*reg142; T reg171=reg25*reg162; T reg172=reg25*reg161; T reg173=reg25*reg166;
    T reg174=reg25*reg163; T reg175=reg25*reg164; reg74=reg84/reg74; reg84=reg25*reg159; T reg176=reg25*reg158;
    reg153=2*reg153; T reg177=reg25*reg165; T reg178=reg25*reg157; T reg179=reg25*reg151; T reg180=2*reg148;
    T reg181=reg88*reg81; T reg182=reg25*reg155; T reg183=reg25*reg160; T reg184=reg25*reg167; T reg185=reg25*reg152;
    T reg186=0.5*reg147; T reg187=reg25*reg168; T reg188=reg88*reg108; T reg189=0.5*reg139; T reg190=reg25*reg156;
    T reg191=reg88*reg82; T reg192=reg25*reg150; T reg193=reg25*reg149; T reg194=reg88*reg127; T reg195=reg74*reg108;
    reg179=2*reg179; T reg196=reg74*reg146; reg177=2*reg177; T reg197=reg88*reg137; T reg198=reg88*reg110;
    T reg199=reg30*reg111; T reg200=reg162*reg180; T reg201=reg138*reg181; reg182=2*reg182; T reg202=reg88*reg119;
    reg183=2*reg183; T reg203=reg74*reg43; reg192=2*reg192; T reg204=reg74*reg81; reg184=2*reg184;
    reg185=2*reg185; T reg205=reg88*reg114; T reg206=reg74*reg115; T reg207=reg30*reg140; T reg208=reg88*reg132;
    T reg209=reg88*reg145; T reg210=reg88*reg146; T reg211=reg88*reg135; T reg212=reg30*reg133; T reg213=reg88*reg140;
    reg172=2*reg172; T reg214=reg88*reg133; reg193=2*reg193; reg174=2*reg174; reg169=2*reg169;
    T reg215=reg88*reg111; T reg216=reg88*reg124; T reg217=reg88*reg141; reg173=2*reg173; T reg218=reg25*reg170;
    reg176=2*reg176; T reg219=reg88*reg139; T reg220=reg88*reg43; T reg221=reg88*reg147; T reg222=reg88*reg142;
    T reg223=reg74*reg138; reg187=2*reg187; T reg224=reg88*reg122; T reg225=reg25*reg189; reg190=2*reg190;
    T reg226=reg141*reg191; T reg227=reg30*reg82; T reg228=reg88*reg138; reg171=2*reg171; reg175=2*reg175;
    T reg229=2*reg84; T reg230=reg74*reg119; T reg231=2*reg178; T reg232=reg157*reg153; T reg233=reg30*reg141;
    T reg234=reg119*reg188; T reg235=reg25*reg186; T reg236=reg88*reg115; T reg237=reg145*reg197; T reg238=reg164*reg153;
    T reg239=reg145*reg188; T reg240=reg164*reg182; T reg241=reg145*reg205; T reg242=reg164*reg231; T reg243=reg145*reg202;
    T reg244=reg157*reg192; T reg245=reg164*reg190; T reg246=reg145*reg216; T reg247=reg164*reg175; T reg248=reg145*reg209;
    T reg249=reg167*reg169; T reg250=reg110*reg210; T reg251=reg167*reg176; T reg252=reg110*reg220; T reg253=reg167*reg180;
    T reg254=reg110*reg181; T reg255=reg167*reg185; T reg256=reg110*reg236; T reg257=reg186*reg231; T reg258=reg110*reg233;
    T reg259=reg167*reg171; T reg260=reg144*reg153; T reg261=reg155*reg193; T reg262=reg114*reg194; T reg263=reg147*reg213;
    T reg264=reg147*reg214; T reg265=reg155*reg172; T reg266=reg162*reg169; T reg267=reg138*reg210; reg226=reg232+reg226;
    T reg268=reg141*reg203; T reg269=reg147*reg191; T reg270=reg147*reg215; T reg271=reg147*reg217; T reg272=reg164*reg229;
    T reg273=reg147*reg223; T reg274=reg147*reg219; T reg275=reg140*reg213; T reg276=reg157*reg174; T reg277=reg141*reg214;
    T reg278=reg164*reg193; T reg279=reg145*reg194; T reg280=reg159*reg193; T reg281=reg138*reg207; T reg282=reg141*reg196;
    T reg283=reg142*reg219; T reg284=reg115*reg181; T reg285=reg30*reg124; T reg286=reg152*reg180; T reg287=reg30*reg145;
    T reg288=reg142*reg222; T reg289=reg115*reg220; T reg290=reg165*reg193; T reg291=reg132*reg194; T reg292=reg152*reg176;
    T reg293=reg115*reg210; T reg294=reg152*reg169; T reg295=reg165*reg172; T reg296=reg132*reg197; T reg297=reg81*reg210;
    T reg298=reg155*reg153; T reg299=reg143*reg169; T reg300=reg165*reg153; T reg301=reg132*reg188; T reg302=reg114*reg188;
    T reg303=reg114*reg205; T reg304=reg165*reg182; T reg305=reg132*reg205; T reg306=reg155*reg182; T reg307=reg110*reg228;
    T reg308=reg167*reg187; T reg309=reg144*reg172; T reg310=reg110*reg224; T reg311=reg167*reg184; T reg312=reg110*reg198;
    T reg313=reg142*reg213; T reg314=reg108*reg197; T reg315=reg30*reg127; T reg316=reg142*reg214; T reg317=reg141*reg213;
    T reg318=reg30*reg137; T reg319=reg142*reg191; T reg320=reg119*reg202; T reg321=reg30*reg108; T reg322=reg147*reg221;
    T reg323=reg142*reg215; T reg324=reg114*reg197; T reg325=reg30*reg114; T reg326=reg142*reg217; T reg327=reg115*reg236;
    T reg328=reg152*reg185; T reg329=reg30*reg119; T reg330=reg165*reg229; T reg331=reg142*reg223; T reg332=reg82*reg213;
    T reg333=reg43*reg220; T reg334=reg81*reg195; T reg335=reg162*reg171; T reg336=reg227*reg138; T reg337=reg158*reg176;
    T reg338=reg43*reg210; T reg339=reg158*reg169; reg232=reg234+reg232; T reg340=reg119*reg197; T reg341=reg157*reg172;
    T reg342=reg139*reg213; T reg343=reg139*reg214; T reg344=reg139*reg191; T reg345=reg139*reg215; T reg346=reg143*reg153;
    T reg347=reg139*reg217; T reg348=reg143*reg180; T reg349=reg119*reg194; T reg350=reg81*reg220; T reg351=reg156*reg229;
    T reg352=reg139*reg223; T reg353=reg139*reg219; T reg354=reg156*reg193; T reg355=reg138*reg220; T reg356=reg162*reg176;
    T reg357=reg159*reg153; T reg358=reg159*reg179; T reg359=reg180*reg151; T reg360=reg157*reg231; T reg361=reg119*reg233;
    reg201=reg200+reg201; T reg362=reg171*reg159; T reg363=reg119*reg205; T reg364=reg159*reg182; T reg365=reg157*reg182;
    T reg366=reg138*reg199; T reg367=reg138*reg236; T reg368=reg162*reg185; T reg369=reg138*reg230; T reg370=reg162*reg231;
    T reg371=reg138*reg212; T reg372=reg227*reg108; T reg373=reg144*reg193; T reg374=reg159*reg172; T reg375=reg138*reg228;
    T reg376=reg108*reg194; T reg377=reg82*reg191; T reg378=reg82*reg214; T reg379=reg124*reg216; T reg380=reg168*reg169;
    T reg381=reg122*reg210; T reg382=reg168*reg176; T reg383=reg122*reg220; T reg384=reg141*reg215; T reg385=reg141*reg204;
    T reg386=reg108*reg188; T reg387=reg168*reg180; T reg388=reg122*reg181; T reg389=reg168*reg185; T reg390=reg122*reg236;
    T reg391=reg111*reg213; T reg392=reg189*reg231; T reg393=reg122*reg233; T reg394=reg168*reg171; T reg395=reg122*reg228;
    T reg396=reg168*reg187; T reg397=reg149*reg193; T reg398=reg111*reg214; T reg399=reg111*reg191; T reg400=reg122*reg224;
    T reg401=reg111*reg215; T reg402=reg157*reg179; T reg403=reg124*reg194; T reg404=reg156*reg172; T reg405=reg124*reg197;
    T reg406=reg156*reg153; T reg407=reg124*reg188; T reg408=reg156*reg182; T reg409=reg137*reg197; T reg410=reg161*reg172;
    T reg411=reg137*reg194; T reg412=reg157*reg193; T reg413=reg124*reg205; T reg414=reg161*reg193; T reg415=reg133*reg214;
    reg213=reg133*reg213; T reg416=reg146*reg210; T reg417=reg141*reg217; T reg418=reg141*reg206; T reg419=reg156*reg231;
    T reg420=reg124*reg202; T reg421=reg157*reg183; T reg422=reg154*reg169; reg194=reg127*reg194; T reg423=reg143*reg176;
    T reg424=reg81*reg181; T reg425=reg156*reg190; T reg426=reg135*reg211; T reg427=reg74*reg132; T reg428=reg74*reg127;
    T reg429=reg165*reg231; T reg430=reg135*reg198; T reg431=reg165*reg177; T reg432=reg166*reg173; T reg433=reg132*reg208;
    T reg434=reg74*reg124; T reg435=reg74*reg114; T reg436=reg135*reg236; T reg437=reg170*reg231; T reg438=reg132*reg202;
    T reg439=reg135*reg228; T reg440=reg166*reg184; reg235=2*reg235; reg210=reg135*reg210; T reg441=reg74*reg145;
    T reg442=reg74*reg110; T reg443=reg74*reg137; reg218=2*reg218; T reg444=reg165*reg175; T reg445=reg166*reg169;
    T reg446=reg132*reg216; T reg447=reg165*reg190; T reg448=reg30*reg139; T reg449=reg166*reg176; T reg450=reg142*reg221;
    reg225=2*reg225; T reg451=reg164*reg172; T reg452=reg166*reg185; T reg453=reg135*reg181; T reg454=reg166*reg180;
    T reg455=reg30*reg147; T reg456=reg30*reg142; T reg457=reg74*reg122; T reg458=reg135*reg233; T reg459=reg166*reg171;
    T reg460=reg135*reg220; T reg461=reg166*reg187; T reg462=reg135*reg224; T reg463=reg132*reg209; T reg464=reg151*reg153;
    T reg465=reg160*reg179; reg350=reg350-reg423; reg279=reg279+reg278; T reg466=reg166*reg193; T reg467=reg160*reg182;
    reg284=reg284-reg286; T reg468=reg168*reg179; T reg469=reg139*reg204; T reg470=reg81*reg443; T reg471=reg145*reg212;
    T reg472=reg156*reg179; T reg473=reg139*reg321; T reg474=reg151*reg174; T reg475=reg164*reg169; T reg476=reg145*reg196;
    reg280=reg281+reg280; T reg477=reg135*reg441; T reg478=reg166*reg175; T reg479=reg273+reg272; T reg480=reg156*reg183;
    T reg481=reg139*reg206; T reg482=reg227*reg115; T reg483=reg167*reg229; T reg484=reg147*reg329; reg391=reg261+reg391;
    T reg485=reg419+reg347; T reg486=reg135*reg195; T reg487=reg242+reg271; T reg488=reg160*reg153; T reg489=reg111*reg315;
    T reg490=reg147*reg206; T reg491=reg164*reg183; T reg492=reg152*reg192; T reg493=reg139*reg329; T reg494=reg186*reg169;
    T reg495=reg145*reg207; reg345=reg408+reg345; T reg496=reg227*reg81; reg322=reg322+reg247; T reg497=reg115*reg195;
    reg346=reg334+reg346; T reg498=reg147*reg457; T reg499=reg164*reg225; T reg500=reg139*reg325; T reg501=reg168*reg183;
    T reg502=reg167*reg225; T reg503=reg147*reg285; T reg504=reg152*reg153; T reg505=reg151*reg179; T reg506=reg135*reg428;
    reg274=reg245+reg274; reg424=reg424+reg348; T reg507=reg145*reg457; T reg508=reg164*reg187; T reg509=reg359+reg372;
    reg245=reg246+reg245; reg246=reg139*reg315; T reg510=reg168*reg192; T reg511=reg186*reg187; T reg512=reg145*reg448;
    T reg513=reg135*reg434; T reg514=reg260+reg386; T reg515=reg145*reg223; T reg516=reg164*reg171; T reg517=reg135*reg207;
    reg430=reg430+reg440; T reg518=reg156*reg192; T reg519=reg151*reg193; reg243=reg243-reg242; T reg520=reg139*reg196;
    T reg521=reg110*reg428; T reg522=reg167*reg193; T reg523=reg335+reg375; T reg524=reg108*reg196; T reg525=reg144*reg169;
    T reg526=reg110*reg207; T reg527=reg186*reg193; reg453=reg453-reg454; T reg528=reg166*reg190; reg433=reg433+reg431;
    reg247=reg248+reg247; reg317=reg412+reg317; reg248=reg108*reg212; T reg529=reg151*reg176; T reg530=reg184*reg186;
    T reg531=reg145*reg455; reg342=reg354+reg342; T reg532=reg170*reg179; T reg533=reg164*reg180; T reg534=reg115*reg435;
    T reg535=reg170*reg235; T reg536=reg152*reg182; reg450=reg450+reg444; T reg537=reg238-reg239; T reg538=reg156*reg174;
    T reg539=reg139*reg203; T reg540=reg151*reg172; T reg541=reg186*reg180; T reg542=reg145*reg227; T reg543=reg81*reg212;
    T reg544=reg145*reg203; T reg545=reg164*reg176; reg344=reg406+reg344; T reg546=reg115*reg199; T reg547=reg143*reg172;
    T reg548=reg138*reg428; T reg549=reg81*reg207; reg327=reg327+reg328; T reg550=reg186*reg171; T reg551=reg145*reg233;
    T reg552=reg160*reg183; T reg553=reg143*reg193; T reg554=reg145*reg206; T reg555=reg164*reg185; reg343=reg404+reg343;
    T reg556=reg81*reg428; T reg557=reg170*reg193; reg241=reg241+reg240; T reg558=reg139*reg318; T reg559=reg151*reg192;
    T reg560=reg186*reg185; T reg561=reg145*reg199; T reg562=reg168*reg174; reg297=reg297-reg299; T reg563=reg145*reg204;
    T reg564=reg189*reg179; reg406=reg406-reg407; T reg565=reg114*reg212; T reg566=reg122*reg195; T reg567=reg168*reg153;
    T reg568=reg152*reg193; T reg569=reg160*reg176; T reg570=reg122*reg227; T reg571=reg189*reg153; T reg572=reg156*reg180;
    reg324=reg324+reg265; T reg573=reg135*reg443; reg383=reg383+reg382; T reg574=reg189*reg174; T reg575=reg124*reg204;
    T reg576=reg115*reg207; T reg577=reg160*reg193; T reg578=reg124*reg203; reg261=reg262+reg261; reg262=reg135*reg455;
    reg390=reg390+reg389; T reg579=reg189*reg183; T reg580=reg160*reg192; T reg581=reg170*reg175; T reg582=reg122*reg435;
    T reg583=reg168*reg182; T reg584=reg189*reg180; T reg585=reg155*reg169; T reg586=reg122*reg199; T reg587=reg189*reg182;
    T reg588=reg124*reg227; T reg589=reg114*reg196; T reg590=reg115*reg428; T reg591=reg166*reg172; reg388=reg388-reg387;
    T reg592=reg189*reg193; T reg593=reg298-reg302; T reg594=reg156*reg185; T reg595=reg170*reg174; reg379=reg379+reg425;
    T reg596=reg124*reg206; T reg597=reg124*reg448; T reg598=reg187*reg189; T reg599=reg189*reg171; T reg600=reg155*reg180;
    T reg601=reg114*reg204; T reg602=reg124*reg223; T reg603=reg156*reg171; T reg604=reg124*reg233; T reg605=reg185*reg160;
    T reg606=reg114*reg199; reg460=reg460+reg449; reg420=reg420-reg419; T reg607=reg122*reg443; T reg608=reg168*reg172;
    T reg609=reg189*reg185; T reg610=reg124*reg199; T reg611=reg122*reg212; T reg612=reg189*reg172; T reg613=reg155*reg176;
    T reg614=reg114*reg203; reg408=reg413+reg408; reg381=reg381+reg380; reg413=reg189*reg192; reg462=reg462+reg461;
    T reg615=reg227*reg114; T reg616=reg160*reg180; T reg617=reg122*reg428; T reg618=reg168*reg193; reg303=reg303+reg306;
    T reg619=reg122*reg207; T reg620=reg111*reg318; T reg621=reg147*reg203; T reg622=reg164*reg174; T reg623=reg189*reg169;
    T reg624=reg152*reg174; T reg625=reg124*reg207; T reg626=reg167*reg174; T reg627=reg147*reg318; T reg628=reg115*reg443;
    T reg629=reg152*reg172; T reg630=reg155*reg174; reg210=reg210+reg445; reg264=reg451+reg264; T reg631=reg111*reg203;
    reg354=reg403+reg354; reg403=reg147*reg196; T reg632=reg164*reg192; T reg633=reg170*reg187; T reg634=reg167*reg183;
    T reg635=reg147*reg325; T reg636=reg168*reg229; T reg637=reg155*reg192; T reg638=reg352+reg351; reg270=reg240+reg270;
    reg240=reg166*reg153; T reg639=reg111*reg196; T reg640=reg147*reg204; T reg641=reg164*reg179; reg289=reg289+reg292;
    reg398=reg265+reg398; reg265=reg167*reg179; T reg642=reg147*reg321; reg353=reg425+reg353; reg425=reg160*reg174;
    T reg643=reg170*reg192; reg269=reg238+reg269; reg238=reg122*reg448; T reg644=reg189*reg190; T reg645=reg170*reg225;
    reg401=reg306+reg401; reg404=reg405+reg404; reg306=reg394-reg395; reg405=reg189*reg229; T reg646=reg135*reg227;
    T reg647=reg170*reg153; T reg648=reg122*reg230; T reg649=reg168*reg231; reg293=reg293+reg294; T reg650=reg114*reg207;
    T reg651=reg160*reg169; T reg652=reg170*reg172; T reg653=reg135*reg212; T reg654=reg393+reg392; T reg655=reg156*reg176;
    reg399=reg298+reg399; reg298=reg167*reg192; T reg656=reg147*reg315; T reg657=reg115*reg212; T reg658=reg156*reg169;
    reg263=reg278+reg263; reg278=reg124*reg196; T reg659=reg111*reg321; T reg660=reg152*reg179; T reg661=reg160*reg172;
    reg400=reg400+reg396; T reg662=reg189*reg225; T reg663=reg155*reg179; T reg664=reg122*reg434; T reg665=reg168*reg190;
    T reg666=reg189*reg176; T reg667=reg111*reg204; T reg668=reg124*reg212; reg402=reg385+reg402; reg446=reg446+reg447;
    reg385=reg331+reg330; T reg669=reg157*reg185; T reg670=reg119*reg206; T reg671=reg166*reg229; T reg672=reg142*reg329;
    T reg673=reg161*reg169; T reg674=reg137*reg196; T reg675=reg429+reg326; reg362=reg361+reg362; T reg676=reg162*reg179;
    T reg677=reg142*reg206; T reg678=reg165*reg183; T reg679=reg141*reg321; T reg680=reg137*reg212; T reg681=reg176*reg163;
    T reg682=reg161*reg192; reg384=reg365+reg384; T reg683=reg133*reg196; T reg684=reg186*reg176; reg415=reg410+reg415;
    T reg685=reg142*reg457; T reg686=reg165*reg225; T reg687=reg159*reg185; T reg688=reg119*reg199; T reg689=reg166*reg225;
    T reg690=reg142*reg204; T reg691=reg142*reg285; reg365=reg363-reg365; reg363=reg137*reg207; T reg692=reg163*reg169;
    reg283=reg447+reg283; reg447=reg458+reg437; reg411=reg411+reg414; reg436=reg436+reg452; T reg693=reg158*reg193;
    T reg694=reg43*reg428; T reg695=reg142*reg203; T reg696=reg165*reg174; T reg697=reg170*reg190; T reg698=reg166*reg174;
    reg374=reg371+reg374; T reg699=reg142*reg318; T reg700=reg170*reg183; T reg701=reg163*reg192; reg338=reg338+reg339;
    T reg702=reg132*reg455; T reg703=reg170*reg184; reg316=reg295+reg316; T reg704=reg166*reg177; reg276=reg268+reg276;
    reg268=reg166*reg183; T reg705=reg142*reg325; reg320=reg320+reg360; reg410=reg409+reg410; reg409=reg165*reg187;
    reg323=reg304+reg323; reg226=reg200+reg226; T reg706=reg135*reg427; T reg707=reg132*reg457; T reg708=reg165*reg179;
    T reg709=reg162*reg193; T reg710=reg166*reg179; T reg711=reg142*reg321; T reg712=reg159*reg192; T reg713=reg163*reg193;
    T reg714=reg43*reg207; reg267=reg266-reg267; reg319=reg300+reg319; T reg715=reg165*reg180; T reg716=reg159*reg176;
    reg194=reg194+reg397; T reg717=reg119*reg212; reg438=reg438-reg429; reg300=reg300-reg301; T reg718=reg170*reg180;
    T reg719=reg132*reg227; reg340=reg340-reg341; T reg720=reg166*reg231; T reg721=reg150*reg193; T reg722=reg132*reg203;
    T reg723=reg165*reg176; T reg724=reg146*reg207; T reg725=reg170*reg229; reg193=reg154*reg193; reg295=reg296+reg295;
    reg296=reg119*reg207; reg412=reg349-reg412; reg349=reg132*reg206; T reg726=reg165*reg185; T reg727=reg159*reg169;
    reg275=reg397+reg275; reg397=reg135*reg230; T reg728=reg132*reg233; T reg729=reg170*reg171; reg304=reg305+reg304;
    reg305=reg157*reg169; T reg730=reg127*reg207; T reg731=reg170*reg185; T reg732=reg132*reg199; T reg733=reg119*reg196;
    T reg734=reg169*reg150; T reg735=reg360+reg417; T reg736=reg132*reg204; T reg737=reg170*reg169; T reg738=reg132*reg207;
    T reg739=reg170*reg218; T reg740=reg358+reg232; T reg741=reg141*reg325; T reg742=reg132*reg448; reg288=reg431+reg288;
    reg431=reg133*reg315; T reg743=reg142*reg442; T reg744=reg165*reg235; T reg745=reg459-reg439; T reg746=reg158*reg192;
    T reg747=reg166*reg235; reg237=reg451+reg237; reg451=reg142*reg287; T reg748=reg157*reg180; T reg749=reg119*reg204;
    T reg750=reg157*reg176; reg428=reg146*reg428; T reg751=reg119*reg203; T reg752=reg170*reg176; T reg753=reg132*reg212;
    reg421=reg418+reg421; reg418=reg150*reg192; T reg754=reg165*reg171; T reg755=reg132*reg196; T reg756=reg165*reg169;
    reg416=reg416+reg422; reg426=reg426+reg432; T reg757=reg132*reg223; T reg758=reg159*reg180; reg291=reg291+reg290;
    T reg759=reg227*reg119; T reg760=reg162*reg183; reg213=reg414+reg213; reg414=reg132*reg442; T reg761=reg258+reg257;
    reg364=reg366+reg364; reg378=reg309+reg378; T reg762=reg135*reg456; reg256=reg256+reg255; T reg763=reg186*reg183;
    T reg764=reg144*reg176; T reg765=reg135*reg199; T reg766=reg110*reg435; T reg767=reg167*reg182; T reg768=reg143*reg174;
    T reg769=reg82*reg318; T reg770=reg110*reg199; T reg771=reg186*reg182; T reg772=reg138*reg435; T reg773=reg162*reg182;
    T reg774=reg138*reg195; T reg775=reg162*reg153; T reg776=reg110*reg448; T reg777=reg186*reg190; T reg778=reg143*reg192;
    T reg779=reg82*reg315; reg358=reg201+reg358; T reg780=reg135*reg435; T reg781=reg259-reg307; T reg782=reg186*reg229;
    T reg783=reg166*reg182; T reg784=reg144*reg192; T reg785=reg110*reg230; T reg786=reg167*reg231; reg244=reg282+reg244;
    reg282=reg82*reg196; T reg787=reg165*reg184; reg252=reg252+reg251; T reg788=reg186*reg174; T reg789=reg159*reg231;
    reg207=reg108*reg207; T reg790=reg110*reg443; T reg791=reg167*reg172; T reg792=reg138*reg233; T reg793=reg151*reg169;
    T reg794=reg110*reg212; T reg795=reg186*reg172; reg369=reg370+reg369; reg376=reg373-reg376; T reg796=reg162*reg192;
    T reg797=reg141*reg315; reg250=reg250+reg249; T reg798=reg186*reg192; T reg799=reg159*reg229; reg314=reg309-reg314;
    reg309=reg144*reg174; reg254=reg254-reg253; T reg800=reg186*reg179; T reg801=reg82*reg203; T reg802=reg159*reg183;
    T reg803=reg110*reg195; T reg804=reg167*reg153; reg367=reg368-reg367; T reg805=reg170*reg182; reg377=reg260+reg377;
    reg260=reg110*reg227; T reg806=reg186*reg153; T reg807=reg170*reg177; T reg808=reg108*reg203; T reg809=reg132*reg456;
    T reg810=reg170*reg173; reg357=reg336+reg357; T reg811=reg186*reg175; T reg812=reg110*reg455; reg333=reg333+reg337;
    T reg813=reg163*reg174; T reg814=reg167*reg175; T reg815=reg110*reg441; T reg816=reg135*reg448; T reg817=reg141*reg318;
    T reg818=reg186*reg235; reg312=reg312+reg311; reg444=reg463+reg444; reg463=reg43*reg443; T reg819=reg158*reg172;
    reg355=reg356-reg355; reg313=reg290+reg313; reg290=reg159*reg174; T reg820=reg162*reg174; T reg821=reg43*reg212;
    T reg822=reg162*reg172; T reg823=reg142*reg315; T reg824=reg163*reg172; T reg825=reg166*reg192; T reg826=reg138*reg443;
    T reg827=reg165*reg192; T reg828=reg142*reg196; T reg829=reg167*reg190; T reg830=reg110*reg434; reg332=reg373+reg332;
    reg373=reg186*reg225; reg310=reg310+reg308; reg277=reg341+reg277; reg342=reg380+reg342; reg341=reg86*reg374;
    reg380=reg792+reg789; reg468=reg468-reg473; reg493=reg493-reg636; reg317=reg266-reg317; reg335=reg335+reg735;
    reg340=reg340-reg290; reg697=reg816+reg697; reg384=reg368-reg384; reg408=reg579+reg408; reg290=reg355-reg290;
    reg629=reg628+reg629; reg577=reg576+reg577; reg805=reg765+reg805; reg246=reg510+reg246; reg661=reg657+reg661;
    reg397=reg397-reg720; reg609=reg610+reg609; reg266=reg86*reg638; reg745=reg745-reg725; reg666=reg668+reg666;
    reg344=reg344-reg387; reg412=reg412-reg712; reg523=reg523+reg799; reg797=reg796-reg797; reg658=reg278+reg658;
    reg436=reg436+reg700; reg278=reg86*reg276; reg826=reg822-reg826; reg480=reg481+reg480; reg394=reg394-reg485;
    reg727=reg296-reg727; reg296=reg86*reg369; reg305=reg733-reg305; reg599=reg599-reg604; reg303=reg552+reg303;
    reg467=reg546+reg467; reg669=reg670-reg669; reg808=reg764-reg808; reg355=reg86*reg402; reg504=reg504-reg497;
    reg368=reg86*reg362; reg594=reg596+reg594; reg488=reg482+reg488; reg716=reg717-reg716; reg481=reg86*reg358;
    reg345=reg389+reg345; reg772=reg773-reg772; reg783=reg780+reg783; reg389=reg86*reg740; reg588=reg588-reg584;
    reg289=reg289+reg425; reg528=reg513+reg528; reg293=reg293+reg580; reg453=reg453+reg532; reg552=reg327+reg552;
    reg623=reg625+reg623; reg741=reg760-reg741; reg354=reg413+reg354; reg558=reg562+reg558; reg327=reg86*reg357;
    reg404=reg574+reg404; reg655=reg578+reg655; reg538=reg539+reg538; reg749=reg749+reg748; reg320=reg799+reg320;
    reg277=reg356-reg277; reg356=reg86*reg364; reg676=reg676+reg679; reg472=reg469+reg472; reg750=reg751-reg750;
    reg500=reg501+reg500; reg687=reg688-reg687; reg536=reg534+reg536; reg240=reg240-reg486; reg284=reg284+reg465;
    reg367=reg367-reg802; reg575=reg575-reg572; reg802=reg365-reg802; reg365=reg86*reg421; reg568=reg590+reg568;
    reg518=reg520+reg518; reg462=reg462+reg645; reg314=reg314+reg474; reg775=reg775+reg774; reg759=reg759+reg758;
    reg647=reg646+reg647; reg712=reg267-reg712; reg267=reg86*reg226; reg469=reg86*reg447; reg353=reg396+reg353;
    reg406=reg564+reg406; reg817=reg820-reg817; reg396=reg86*reg244; reg343=reg382+reg343; reg793=reg793-reg207;
    reg252=reg252+reg788; reg806=reg260+reg806; reg377=reg348+reg377; reg804=reg804-reg803; reg254=reg254+reg800;
    reg809=reg810+reg809; reg309=reg801+reg309; reg771=reg770+reg771; reg767=reg766+reg767; reg768=reg769-reg768;
    reg256=reg256+reg763; reg423=reg378-reg423; reg260=reg86*reg761; reg785=reg785-reg786; reg784=reg282+reg784;
    reg781=reg781-reg782; reg787=reg414+reg787; reg777=reg776+reg777; reg778=reg779-reg778; reg829=reg830+reg829;
    reg310=reg310+reg373; reg299=reg332-reg299; reg811=reg812+reg811; reg814=reg815+reg814; reg333=reg333+reg813;
    reg312=reg312+reg818; reg313=reg445+reg313; reg444=reg535+reg444; reg819=reg463+reg819; reg540=reg543+reg540;
    reg537=reg800+reg537; reg450=reg440+reg450; reg563=reg563-reg533; reg561=reg560+reg561; reg297=reg297+reg559;
    reg241=reg763+reg241; reg557=reg517+reg557; reg555=reg554+reg555; reg553=reg556-reg553; reg550=reg550-reg551;
    reg243=reg243-reg782; reg519=reg549+reg519; reg516=reg516-reg515; reg512=reg511+reg512; reg514=reg505+reg514;
    reg245=reg373+reg245; reg508=reg507+reg508; reg282=reg86*reg509; reg531=reg530+reg531; reg247=reg818+reg247;
    reg433=reg739+reg433; reg529=reg529-reg248; reg527=reg526+reg527; reg522=reg521+reg522; reg524=reg525-reg524;
    reg250=reg250+reg798; reg807=reg762+reg807; reg376=reg559+reg376; reg795=reg794+reg795; reg791=reg790+reg791;
    reg415=reg337+reg415; reg788=reg237+reg788; reg682=reg683+reg682; reg451=reg747+reg451; reg744=reg743+reg744;
    reg431=reg746+reg431; reg288=reg432+reg288; reg742=reg633+reg742; reg738=reg737+reg738; reg213=reg339+reg213;
    reg291=reg643+reg291; reg756=reg755+reg756; reg416=reg416+reg418; reg753=reg752+reg753; reg295=reg595+reg295;
    reg754=reg754-reg757; reg193=reg428+reg193; reg723=reg722+reg723; reg721=reg724+reg721; reg719=reg719-reg718;
    reg300=reg532+reg300; reg438=reg438-reg725; reg736=reg736-reg715; reg194=reg418+reg194; reg732=reg731+reg732;
    reg730=reg734+reg730; reg304=reg700+reg304; reg726=reg349+reg726; reg729=reg729-reg728; reg275=reg422+reg275;
    reg823=reg825+reg823; reg824=reg821+reg824; reg827=reg828+reg827; reg704=reg706+reg704; reg316=reg449+reg316;
    reg699=reg698+reg699; reg702=reg703+reg702; reg338=reg338+reg701; reg696=reg695+reg696; reg319=reg319-reg454;
    reg693=reg694+reg693; reg710=reg710-reg711; reg713=reg714+reg713; reg708=reg690+reg708; reg323=reg452+reg323;
    reg409=reg707+reg409; reg410=reg813+reg410; reg705=reg268+reg705; reg678=reg677+reg678; reg680=reg681+reg680;
    reg459=reg459-reg675; reg673=reg674+reg673; reg672=reg672-reg671; reg237=reg86*reg385; reg446=reg645+reg446;
    reg411=reg701+reg411; reg283=reg461+reg283; reg363=reg692+reg363; reg691=reg689+reg691; reg739=reg426+reg739;
    reg686=reg685+reg686; reg268=reg86*reg654; reg648=reg648-reg649; reg650=reg651+reg650; reg306=reg306-reg405;
    reg652=reg653+reg652; reg401=reg328+reg401; reg644=reg238+reg644; reg665=reg664+reg665; reg663=reg667+reg663;
    reg400=reg400+reg662; reg263=reg249+reg263; reg660=reg660-reg659; reg656=reg298+reg656; reg399=reg399-reg286;
    reg632=reg403+reg632; reg264=reg251+reg264; reg630=reg631+reg630; reg627=reg626+reg627; reg622=reg621+reg622;
    reg620=reg624+reg620; reg269=reg269-reg253; reg265=reg265-reg642; reg398=reg292+reg398; reg641=reg640+reg641;
    reg270=reg255+reg270; reg643=reg210+reg643; reg637=reg639+reg637; reg635=reg634+reg635; reg420=reg420-reg405;
    reg606=reg605+reg606; reg603=reg603-reg602; reg598=reg597+reg598; reg601=reg601-reg600; reg379=reg662+reg379;
    reg595=reg460+reg595; reg592=reg619+reg592; reg593=reg465+reg593; reg618=reg617+reg618; reg413=reg381+reg413;
    reg615=reg615-reg616; reg612=reg611+reg612; reg613=reg614+reg613; reg608=reg607+reg608; reg581=reg262+reg581;
    reg574=reg383+reg574; reg324=reg425+reg324; reg571=reg570+reg571; reg567=reg567-reg566; reg565=reg569+reg565;
    reg564=reg388+reg564; reg591=reg573+reg591; reg587=reg586+reg587; reg585=reg589+reg585; reg583=reg582+reg583;
    reg579=reg390+reg579; reg261=reg580+reg261; reg274=reg308+reg274; reg535=reg430+reg535; reg210=reg86*reg479;
    reg505=reg424+reg505; reg475=reg476+reg475; reg471=reg684+reg471; reg503=reg502+reg503; reg238=reg86*reg280;
    reg391=reg294+reg391; reg484=reg484-reg483; reg474=reg350+reg474; reg499=reg498+reg499; reg466=reg506+reg466;
    reg279=reg798+reg279; reg548=reg709-reg548; reg547=reg470-reg547; reg249=reg86*reg346; reg478=reg477+reg478;
    reg542=reg542-reg541; reg495=reg494+reg495; reg259=reg259-reg487; reg322=reg311+reg322; reg464=reg496+reg464;
    reg545=reg544+reg545; reg489=reg492+reg489; reg491=reg490+reg491; reg585=reg86*reg585; reg317=reg86*reg317;
    reg519=reg86*reg519; reg741=reg86*reg741; reg535=reg86*reg535; reg411=reg86*reg411; reg682=reg86*reg682;
    reg568=reg86*reg568; reg324=reg86*reg324; reg293=reg86*reg293; reg464=reg86*reg464; reg565=reg86*reg565;
    reg415=reg86*reg415; reg514=reg86*reg514; reg363=reg86*reg363; reg384=reg86*reg384; reg275=reg86*reg275;
    reg536=reg86*reg536; reg606=reg86*reg606; reg547=reg86*reg547; reg730=reg86*reg730; reg727=reg86*reg727;
    reg540=reg86*reg540; reg303=reg86*reg303; reg745=reg86*reg745; reg194=reg86*reg194; reg601=reg86*reg601;
    reg474=reg86*reg474; reg335=reg86*reg335; reg721=reg86*reg721; reg552=reg86*reg552; reg593=reg86*reg593;
    reg193=reg86*reg193; reg297=reg86*reg297; reg615=reg86*reg615; reg416=reg86*reg416; reg577=reg86*reg577;
    reg467=reg86*reg467; reg213=reg86*reg213; reg613=reg86*reg613; reg251=ponderation*reg365; reg553=reg86*reg553;
    reg581=reg86*reg581; reg431=reg86*reg431; reg819=reg86*reg819; reg808=reg86*reg808; reg399=reg86*reg399;
    reg376=reg86*reg376; reg504=reg86*reg504; reg333=reg86*reg333; reg817=reg86*reg817; reg630=reg86*reg630;
    reg704=reg86*reg704; reg299=reg86*reg299; reg793=reg86*reg793; reg289=reg86*reg289; reg314=reg86*reg314;
    reg778=reg86*reg778; reg277=reg86*reg277; reg620=reg86*reg620; reg478=reg86*reg478; reg784=reg86*reg784;
    reg489=reg86*reg489; reg398=reg86*reg398; reg423=reg86*reg423; reg255=ponderation*reg396; reg377=reg86*reg377;
    reg768=reg86*reg768; reg528=reg86*reg528; reg462=reg86*reg462; reg488=reg86*reg488; reg637=reg86*reg637;
    reg309=reg86*reg309; reg739=reg86*reg739; reg673=reg86*reg673; reg262=ponderation*reg282; reg292=ponderation*reg355;
    reg294=ponderation*reg249; reg261=reg86*reg261; reg680=reg86*reg680; reg284=reg86*reg284; reg410=reg86*reg410;
    reg650=reg86*reg650; reg676=reg86*reg676; reg529=reg86*reg529; reg697=reg86*reg697; reg505=reg86*reg505;
    reg713=reg86*reg713; reg298=ponderation*reg267; reg661=reg86*reg661; reg693=reg86*reg693; reg401=reg86*reg401;
    reg524=reg86*reg524; reg797=reg86*reg797; reg338=reg86*reg338; reg663=reg86*reg663; reg807=reg86*reg807;
    reg660=reg86*reg660; reg824=reg86*reg824; reg629=reg86*reg629; reg391=reg86*reg391; reg308=ponderation*reg278;
    reg823=reg86*reg823; reg379=reg86*reg379; reg444=reg86*reg444; reg592=reg86*reg592; reg313=reg86*reg313;
    reg618=reg86*reg618; reg413=reg86*reg413; reg595=reg86*reg595; reg312=reg86*reg312; reg814=reg86*reg814;
    reg612=reg86*reg612; reg608=reg86*reg608; reg811=reg86*reg811; reg574=reg86*reg574; reg571=reg86*reg571;
    reg567=reg86*reg567; reg310=reg86*reg310; reg564=reg86*reg564; reg587=reg86*reg587; reg829=reg86*reg829;
    reg583=reg86*reg583; reg777=reg86*reg777; reg579=reg86*reg579; reg591=reg86*reg591; reg311=ponderation*reg268;
    reg787=reg86*reg787; reg781=reg86*reg781; reg648=reg86*reg648; reg306=reg86*reg306; reg785=reg86*reg785;
    reg353=reg86*reg353; reg240=reg86*reg240; reg409=reg86*reg409; reg623=reg86*reg623; reg705=reg86*reg705;
    reg354=reg86*reg354; reg323=reg86*reg323; reg658=reg86*reg658; reg708=reg86*reg708; reg666=reg86*reg666;
    reg710=reg86*reg710; reg404=reg86*reg404; reg655=reg86*reg655; reg588=reg86*reg588; reg702=reg86*reg702;
    reg406=reg86*reg406; reg647=reg86*reg647; reg319=reg86*reg319; reg575=reg86*reg575; reg609=reg86*reg609;
    reg696=reg86*reg696; reg408=reg86*reg408; reg699=reg86*reg699; reg594=reg86*reg594; reg316=reg86*reg316;
    reg599=reg86*reg599; reg420=reg86*reg420; reg827=reg86*reg827; reg603=reg86*reg603; reg598=reg86*reg598;
    reg433=reg86*reg433; reg274=reg86*reg274; reg250=reg86*reg250; reg503=reg86*reg503; reg522=reg86*reg522;
    reg499=reg86*reg499; reg322=reg86*reg322; reg527=reg86*reg527; reg495=reg86*reg495; reg247=reg86*reg247;
    reg279=reg86*reg279; reg475=reg86*reg475; reg531=reg86*reg531; reg471=reg86*reg471; reg466=reg86*reg466;
    reg508=reg86*reg508; reg548=reg86*reg548; reg545=reg86*reg545; reg245=reg86*reg245; reg542=reg86*reg542;
    reg537=reg86*reg537; reg512=reg86*reg512; reg563=reg86*reg563; reg516=reg86*reg516; reg561=reg86*reg561;
    reg241=reg86*reg241; reg555=reg86*reg555; reg557=reg86*reg557; reg550=reg86*reg550; reg243=reg86*reg243;
    reg652=reg86*reg652; reg644=reg86*reg644; reg328=ponderation*reg260; reg665=reg86*reg665; reg400=reg86*reg400;
    reg256=reg86*reg256; reg263=reg86*reg263; reg656=reg86*reg656; reg767=reg86*reg767; reg632=reg86*reg632;
    reg771=reg86*reg771; reg264=reg86*reg264; reg809=reg86*reg809; reg627=reg86*reg627; reg254=reg86*reg254;
    reg622=reg86*reg622; reg269=reg86*reg269; reg804=reg86*reg804; reg265=reg86*reg265; reg806=reg86*reg806;
    reg641=reg86*reg641; reg270=reg86*reg270; reg252=reg86*reg252; reg635=reg86*reg635; reg791=reg86*reg791;
    reg491=reg86*reg491; reg259=reg86*reg259; reg643=reg86*reg643; reg795=reg86*reg795; reg484=reg86*reg484;
    reg332=ponderation*reg210; reg772=reg86*reg772; reg744=reg86*reg744; reg367=reg86*reg367; reg719=reg86*reg719;
    reg669=reg86*reg669; reg380=reg86*reg380; reg451=reg86*reg451; reg337=ponderation*reg296; reg802=reg86*reg802;
    reg805=reg86*reg805; reg300=reg86*reg300; reg788=reg86*reg788; reg687=reg86*reg687; reg523=reg86*reg523;
    reg450=reg86*reg450; reg342=reg86*reg342; reg749=reg86*reg749; reg736=reg86*reg736; reg246=reg86*reg246;
    reg686=reg86*reg686; reg438=reg86*reg438; reg518=reg86*reg518; reg343=reg86*reg343; reg339=ponderation*reg341;
    reg753=reg86*reg753; reg826=reg86*reg826; reg756=reg86*reg756; reg290=reg86*reg290; reg436=reg86*reg436;
    reg712=reg86*reg712; reg295=reg86*reg295; reg349=ponderation*reg238; reg350=ponderation*reg327; reg754=reg86*reg754;
    reg742=reg86*reg742; reg775=reg86*reg775; reg291=reg86*reg291; reg320=reg86*reg320; reg373=ponderation*reg481;
    reg738=reg86*reg738; reg783=reg86*reg783; reg723=reg86*reg723; reg378=ponderation*reg356; reg381=ponderation*reg469;
    reg288=reg86*reg288; reg382=ponderation*reg368; reg283=reg86*reg283; reg468=reg86*reg468; reg750=reg86*reg750;
    reg304=reg86*reg304; reg383=ponderation*reg237; reg472=reg86*reg472; reg340=reg86*reg340; reg345=reg86*reg345;
    reg716=reg86*reg716; reg672=reg86*reg672; reg726=reg86*reg726; reg500=reg86*reg500; reg480=reg86*reg480;
    reg305=reg86*reg305; reg459=reg86*reg459; reg394=reg86*reg394; reg729=reg86*reg729; reg493=reg86*reg493;
    reg678=reg86*reg678; reg412=reg86*reg412; reg388=ponderation*reg266; reg691=reg86*reg691; reg397=reg86*reg397;
    reg390=ponderation*reg389; reg558=reg86*reg558; reg732=reg86*reg732; reg759=reg86*reg759; reg538=reg86*reg538;
    reg344=reg86*reg344; reg453=reg86*reg453; reg446=reg86*reg446; matrix(indices[0]+1,indices[5]+1)+=ponderation*reg300; matrix(indices[0]+1,indices[6]+0)+=ponderation*reg723;
    matrix(indices[7]+1,indices[7]+1)+=ponderation*reg194; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg754; matrix(indices[1]+1,indices[3]+0)+=ponderation*reg516; matrix(indices[0]+0,indices[7]+2)+=ponderation*reg557; matrix(indices[1]+0,indices[5]+2)+=ponderation*reg806;
    matrix(indices[5]+1,indices[7]+2)+=ponderation*reg793; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg508; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg729; matrix(indices[7]+0,indices[7]+2)+=ponderation*reg721; matrix(indices[1]+0,indices[5]+1)+=ponderation*reg804;
    matrix(indices[0]+1,indices[4]+2)+=ponderation*reg732; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg247; matrix(indices[7]+0,indices[7]+0)+=ponderation*reg416; matrix(indices[5]+1,indices[5]+2)+=-reg262; matrix(indices[0]+1,indices[6]+1)+=ponderation*reg295;
    matrix(indices[1]+0,indices[7]+0)+=ponderation*reg250; matrix(indices[7]+2,indices[7]+2)+=ponderation*reg275; matrix(indices[1]+0,indices[5]+0)+=ponderation*reg254; matrix(indices[5]+1,indices[7]+0)+=ponderation*reg524; matrix(indices[1]+0,indices[7]+1)+=ponderation*reg522;
    matrix(indices[0]+1,indices[0]+1)+=ponderation*reg433; matrix(indices[5]+1,indices[5]+1)+=ponderation*reg514; matrix(indices[5]+1,indices[6]+2)+=ponderation*reg529; matrix(indices[1]+0,indices[6]+2)+=ponderation*reg795; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg438;
    matrix(indices[1]+1,indices[2]+1)+=ponderation*reg245; matrix(indices[0]+1,indices[5]+0)+=ponderation*reg736; matrix(indices[0]+1,indices[5]+2)+=ponderation*reg719; matrix(indices[1]+0,indices[6]+1)+=ponderation*reg791; matrix(indices[0]+0,indices[0]+2)+=ponderation*reg807;
    matrix(indices[7]+1,indices[7]+2)+=ponderation*reg730; matrix(indices[1]+1,indices[2]+2)+=ponderation*reg512; matrix(indices[0]+1,indices[4]+1)+=ponderation*reg304; matrix(indices[5]+1,indices[7]+1)+=ponderation*reg376; matrix(indices[0]+1,indices[4]+0)+=ponderation*reg726;
    matrix(indices[1]+0,indices[7]+2)+=ponderation*reg527; matrix(indices[1]+1,indices[1]+2)+=ponderation*reg531; matrix(indices[7]+0,indices[7]+1)+=ponderation*reg193; matrix(indices[1]+0,indices[6]+0)+=ponderation*reg252; matrix(indices[5]+0,indices[7]+2)+=ponderation*reg519;
    matrix(indices[6]+0,indices[7]+0)+=ponderation*reg338; matrix(indices[0]+2,indices[6]+0)+=ponderation*reg696; matrix(indices[0]+2,indices[6]+1)+=ponderation*reg699; matrix(indices[6]+1,indices[7]+1)+=ponderation*reg411; matrix(indices[0]+2,indices[6]+2)+=ponderation*reg316;
    matrix(indices[6]+0,indices[6]+2)+=ponderation*reg824; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg446; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg691; matrix(indices[0]+2,indices[7]+0)+=ponderation*reg827; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg444;
    matrix(indices[0]+2,indices[2]+0)+=ponderation*reg686; matrix(indices[6]+0,indices[6]+1)+=ponderation*reg819; matrix(indices[0]+2,indices[7]+1)+=ponderation*reg823; matrix(indices[6]+1,indices[7]+2)+=ponderation*reg363; matrix(indices[0]+2,indices[7]+2)+=ponderation*reg313;
    matrix(indices[6]+0,indices[6]+0)+=ponderation*reg333; matrix(indices[0]+2,indices[1]+2)+=ponderation*reg450; matrix(indices[6]+1,indices[6]+1)+=ponderation*reg410; matrix(indices[0]+2,indices[4]+0)+=ponderation*reg678; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg459;
    matrix(indices[0]+2,indices[4]+1)+=ponderation*reg705; matrix(indices[6]+1,indices[6]+2)+=ponderation*reg680; matrix(indices[0]+2,indices[4]+2)+=ponderation*reg323; matrix(indices[6]+0,indices[7]+2)+=ponderation*reg713; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg409;
    matrix(indices[0]+2,indices[5]+0)+=ponderation*reg708; matrix(indices[0]+2,indices[3]+1)+=ponderation*reg672; matrix(indices[0]+2,indices[5]+1)+=ponderation*reg710; matrix(indices[0]+2,indices[3]+0)+=-reg383; matrix(indices[6]+0,indices[7]+1)+=ponderation*reg693;
    matrix(indices[0]+1,indices[1]+2)+=ponderation*reg702; matrix(indices[6]+1,indices[7]+0)+=ponderation*reg673; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg739; matrix(indices[0]+2,indices[2]+2)+=ponderation*reg283; matrix(indices[0]+2,indices[5]+2)+=ponderation*reg319;
    matrix(indices[6]+2,indices[7]+1)+=ponderation*reg431; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg781; matrix(indices[5]+2,indices[6]+2)+=ponderation*reg423; matrix(indices[0]+1,indices[7]+1)+=ponderation*reg291; matrix(indices[1]+0,indices[3]+1)+=ponderation*reg785;
    matrix(indices[1]+0,indices[3]+2)+=-reg328; matrix(indices[0]+1,indices[0]+2)+=ponderation*reg809; matrix(indices[5]+2,indices[6]+1)+=ponderation*reg768; matrix(indices[6]+2,indices[7]+2)+=ponderation*reg213; matrix(indices[1]+0,indices[4]+0)+=ponderation*reg256;
    matrix(indices[0]+1,indices[2]+2)+=ponderation*reg742; matrix(indices[0]+1,indices[7]+0)+=ponderation*reg756; matrix(indices[1]+0,indices[4]+1)+=ponderation*reg767; matrix(indices[5]+2,indices[6]+0)+=ponderation*reg309; matrix(indices[1]+0,indices[4]+2)+=ponderation*reg771;
    matrix(indices[0]+1,indices[6]+2)+=ponderation*reg753; matrix(indices[5]+2,indices[5]+2)+=ponderation*reg377; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg312; matrix(indices[1]+1,indices[6]+1)+=ponderation*reg788; matrix(indices[1]+0,indices[1]+1)+=ponderation*reg814;
    matrix(indices[6]+2,indices[6]+2)+=ponderation*reg415; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg704; matrix(indices[5]+2,indices[7]+2)+=ponderation*reg299; matrix(indices[0]+2,indices[1]+1)+=ponderation*reg451; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg811;
    matrix(indices[0]+1,indices[1]+0)+=ponderation*reg787; matrix(indices[1]+0,indices[2]+0)+=ponderation*reg310; matrix(indices[5]+2,indices[7]+1)+=ponderation*reg778; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg744; matrix(indices[6]+2,indices[7]+0)+=ponderation*reg682;
    matrix(indices[1]+0,indices[2]+1)+=ponderation*reg829; matrix(indices[0]+2,indices[0]+2)+=ponderation*reg288; matrix(indices[1]+0,indices[2]+2)+=ponderation*reg777; matrix(indices[5]+2,indices[7]+0)+=ponderation*reg784; matrix(indices[0]+1,indices[7]+2)+=ponderation*reg738;
    matrix(indices[2]+2,indices[3]+2)+=ponderation*reg394; matrix(indices[2]+2,indices[4]+0)+=ponderation*reg480; matrix(indices[4]+0,indices[5]+0)+=ponderation*reg284; matrix(indices[2]+2,indices[4]+1)+=ponderation*reg500; matrix(indices[0]+0,indices[5]+0)+=ponderation*reg453;
    matrix(indices[2]+2,indices[4]+2)+=ponderation*reg345; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg462; matrix(indices[4]+0,indices[4]+2)+=ponderation*reg467; matrix(indices[2]+2,indices[5]+0)+=ponderation*reg472; matrix(indices[2]+2,indices[5]+1)+=ponderation*reg468;
    matrix(indices[4]+0,indices[4]+1)+=ponderation*reg536; matrix(indices[2]+2,indices[5]+2)+=ponderation*reg344; matrix(indices[2]+2,indices[6]+0)+=ponderation*reg538; matrix(indices[4]+0,indices[4]+0)+=ponderation*reg552; matrix(indices[2]+2,indices[6]+1)+=ponderation*reg558;
    matrix(indices[2]+2,indices[6]+2)+=ponderation*reg343; matrix(indices[2]+2,indices[7]+0)+=ponderation*reg518; matrix(indices[3]+2,indices[7]+2)+=ponderation*reg317; matrix(indices[2]+2,indices[7]+1)+=ponderation*reg246; matrix(indices[2]+2,indices[7]+2)+=ponderation*reg342;
    matrix(indices[3]+2,indices[7]+1)+=ponderation*reg797; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg523; matrix(indices[0]+0,indices[4]+2)+=ponderation*reg805; matrix(indices[0]+0,indices[5]+2)+=ponderation*reg647; matrix(indices[4]+0,indices[7]+2)+=ponderation*reg577;
    matrix(indices[2]+1,indices[4]+1)+=ponderation*reg408; matrix(indices[2]+1,indices[4]+2)+=ponderation*reg609; matrix(indices[4]+0,indices[7]+1)+=ponderation*reg568; matrix(indices[2]+1,indices[5]+0)+=ponderation*reg575; matrix(indices[4]+0,indices[7]+0)+=ponderation*reg293;
    matrix(indices[2]+1,indices[5]+1)+=ponderation*reg406; matrix(indices[2]+1,indices[5]+2)+=ponderation*reg588; matrix(indices[2]+1,indices[6]+0)+=ponderation*reg655; matrix(indices[4]+0,indices[6]+2)+=ponderation*reg661; matrix(indices[2]+1,indices[6]+1)+=ponderation*reg404;
    matrix(indices[2]+1,indices[6]+2)+=ponderation*reg666; matrix(indices[4]+0,indices[6]+1)+=ponderation*reg629; matrix(indices[2]+1,indices[7]+0)+=ponderation*reg658; matrix(indices[0]+0,indices[5]+1)+=ponderation*reg240; matrix(indices[2]+1,indices[7]+1)+=ponderation*reg354;
    matrix(indices[4]+0,indices[6]+0)+=ponderation*reg289; matrix(indices[2]+1,indices[7]+2)+=ponderation*reg623; matrix(indices[2]+2,indices[2]+2)+=ponderation*reg353; matrix(indices[4]+0,indices[5]+2)+=ponderation*reg488; matrix(indices[2]+2,indices[3]+0)+=-reg388;
    matrix(indices[2]+2,indices[3]+1)+=ponderation*reg493; matrix(indices[4]+0,indices[5]+1)+=ponderation*reg504; matrix(indices[3]+2,indices[5]+1)+=ponderation*reg676; matrix(indices[0]+0,indices[3]+2)+=-reg381; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg320;
    matrix(indices[3]+2,indices[5]+0)+=-reg292; matrix(indices[3]+1,indices[3]+2)+=-reg382; matrix(indices[3]+1,indices[4]+0)+=ponderation*reg669; matrix(indices[3]+2,indices[4]+2)+=ponderation*reg384; matrix(indices[3]+1,indices[4]+1)+=ponderation*reg802;
    matrix(indices[3]+1,indices[4]+2)+=ponderation*reg687; matrix(indices[3]+2,indices[4]+1)+=ponderation*reg741; matrix(indices[3]+1,indices[5]+0)+=ponderation*reg749; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg397; matrix(indices[3]+2,indices[4]+0)+=-reg251;
    matrix(indices[3]+1,indices[5]+1)+=-reg390; matrix(indices[3]+1,indices[5]+2)+=ponderation*reg759; matrix(indices[3]+1,indices[6]+0)+=ponderation*reg750; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg335; matrix(indices[3]+1,indices[6]+1)+=ponderation*reg340;
    matrix(indices[3]+1,indices[6]+2)+=ponderation*reg716; matrix(indices[3]+1,indices[7]+2)+=ponderation*reg727; matrix(indices[3]+1,indices[7]+0)+=ponderation*reg305; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg745; matrix(indices[3]+1,indices[7]+1)+=ponderation*reg412;
    matrix(indices[5]+1,indices[6]+0)+=ponderation*reg808; matrix(indices[3]+0,indices[3]+1)+=-reg337; matrix(indices[5]+1,indices[6]+1)+=ponderation*reg314; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg380; matrix(indices[3]+0,indices[4]+0)+=ponderation*reg367;
    matrix(indices[3]+0,indices[4]+1)+=ponderation*reg772; matrix(indices[0]+0,indices[4]+1)+=ponderation*reg783; matrix(indices[3]+2,indices[7]+0)+=-reg255; matrix(indices[3]+0,indices[4]+2)+=-reg378; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg528;
    matrix(indices[3]+2,indices[6]+2)+=ponderation*reg277; matrix(indices[3]+0,indices[5]+0)+=-reg373; matrix(indices[3]+0,indices[5]+1)+=ponderation*reg775; matrix(indices[3]+2,indices[6]+1)+=ponderation*reg817; matrix(indices[3]+0,indices[5]+2)+=-reg350;
    matrix(indices[0]+0,indices[4]+0)+=ponderation*reg436; matrix(indices[3]+2,indices[6]+0)+=-reg308; matrix(indices[3]+0,indices[6]+0)+=ponderation*reg290; matrix(indices[3]+0,indices[6]+1)+=ponderation*reg826; matrix(indices[3]+0,indices[6]+2)+=-reg339;
    matrix(indices[3]+2,indices[5]+2)+=-reg298; matrix(indices[3]+0,indices[7]+0)+=ponderation*reg712; matrix(indices[3]+0,indices[7]+2)+=-reg349; matrix(indices[0]+0,indices[2]+2)+=ponderation*reg697; matrix(indices[5]+0,indices[5]+0)+=ponderation*reg505;
    matrix(indices[1]+2,indices[2]+0)+=ponderation*reg499; matrix(indices[1]+2,indices[2]+1)+=ponderation*reg503; matrix(indices[1]+2,indices[2]+2)+=ponderation*reg274; matrix(indices[0]+0,indices[7]+0)+=ponderation*reg643; matrix(indices[4]+2,indices[7]+2)+=ponderation*reg391;
    matrix(indices[1]+2,indices[3]+0)+=-reg332; matrix(indices[1]+2,indices[3]+1)+=ponderation*reg484; matrix(indices[4]+2,indices[7]+1)+=ponderation*reg489; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg259; matrix(indices[4]+2,indices[7]+0)+=ponderation*reg637;
    matrix(indices[1]+2,indices[4]+0)+=ponderation*reg491; matrix(indices[1]+2,indices[4]+1)+=ponderation*reg635; matrix(indices[4]+2,indices[6]+2)+=ponderation*reg398; matrix(indices[1]+2,indices[4]+2)+=ponderation*reg270; matrix(indices[1]+2,indices[5]+0)+=ponderation*reg641;
    matrix(indices[4]+2,indices[6]+1)+=ponderation*reg620; matrix(indices[1]+2,indices[5]+1)+=ponderation*reg265; matrix(indices[1]+2,indices[5]+2)+=ponderation*reg269; matrix(indices[4]+2,indices[6]+0)+=ponderation*reg630; matrix(indices[1]+2,indices[6]+0)+=ponderation*reg622;
    matrix(indices[1]+2,indices[6]+1)+=ponderation*reg627; matrix(indices[4]+2,indices[5]+2)+=ponderation*reg399; matrix(indices[5]+0,indices[7]+1)+=ponderation*reg553; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg243; matrix(indices[1]+1,indices[3]+2)+=ponderation*reg550;
    matrix(indices[5]+0,indices[7]+0)+=ponderation*reg297; matrix(indices[1]+1,indices[4]+0)+=ponderation*reg555; matrix(indices[1]+1,indices[4]+1)+=ponderation*reg241; matrix(indices[1]+1,indices[4]+2)+=ponderation*reg561; matrix(indices[5]+0,indices[6]+2)+=ponderation*reg540;
    matrix(indices[1]+1,indices[5]+0)+=ponderation*reg563; matrix(indices[1]+1,indices[5]+1)+=ponderation*reg537; matrix(indices[5]+0,indices[6]+1)+=ponderation*reg547; matrix(indices[1]+1,indices[5]+2)+=ponderation*reg542; matrix(indices[1]+1,indices[6]+0)+=ponderation*reg545;
    matrix(indices[5]+0,indices[6]+0)+=ponderation*reg474; matrix(indices[3]+0,indices[7]+1)+=ponderation*reg548; matrix(indices[0]+0,indices[7]+1)+=ponderation*reg466; matrix(indices[1]+1,indices[6]+2)+=ponderation*reg471; matrix(indices[5]+0,indices[5]+2)+=ponderation*reg464;
    matrix(indices[1]+1,indices[7]+0)+=ponderation*reg475; matrix(indices[1]+1,indices[7]+1)+=ponderation*reg279; matrix(indices[5]+0,indices[5]+1)+=-reg294; matrix(indices[1]+1,indices[7]+2)+=ponderation*reg495; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg322;
    matrix(indices[0]+0,indices[1]+0)+=ponderation*reg535; matrix(indices[4]+1,indices[6]+1)+=ponderation*reg324; matrix(indices[2]+0,indices[5]+1)+=ponderation*reg567; matrix(indices[2]+0,indices[5]+2)+=ponderation*reg571; matrix(indices[2]+0,indices[6]+0)+=ponderation*reg574;
    matrix(indices[4]+1,indices[6]+0)+=ponderation*reg613; matrix(indices[2]+0,indices[6]+1)+=ponderation*reg608; matrix(indices[2]+0,indices[6]+2)+=ponderation*reg612; matrix(indices[4]+1,indices[5]+2)+=ponderation*reg615; matrix(indices[0]+0,indices[6]+0)+=ponderation*reg595;
    matrix(indices[2]+0,indices[7]+0)+=ponderation*reg413; matrix(indices[4]+1,indices[5]+1)+=ponderation*reg593; matrix(indices[2]+0,indices[7]+1)+=ponderation*reg618; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg581; matrix(indices[2]+0,indices[7]+2)+=ponderation*reg592;
    matrix(indices[4]+1,indices[5]+0)+=ponderation*reg601; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg379; matrix(indices[2]+1,indices[2]+2)+=ponderation*reg598; matrix(indices[4]+1,indices[4]+2)+=ponderation*reg606; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg603;
    matrix(indices[2]+1,indices[3]+1)+=ponderation*reg420; matrix(indices[4]+1,indices[4]+1)+=ponderation*reg303; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg599; matrix(indices[2]+1,indices[4]+0)+=ponderation*reg594; matrix(indices[1]+2,indices[6]+2)+=ponderation*reg264;
    matrix(indices[1]+2,indices[7]+0)+=ponderation*reg632; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg478; matrix(indices[4]+2,indices[5]+1)+=ponderation*reg660; matrix(indices[1]+2,indices[7]+1)+=ponderation*reg656; matrix(indices[1]+2,indices[7]+2)+=ponderation*reg263;
    matrix(indices[4]+2,indices[5]+0)+=ponderation*reg663; matrix(indices[0]+0,indices[6]+2)+=ponderation*reg652; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg400; matrix(indices[4]+2,indices[4]+2)+=ponderation*reg401; matrix(indices[2]+0,indices[2]+1)+=ponderation*reg665;
    matrix(indices[2]+0,indices[2]+2)+=ponderation*reg644; matrix(indices[4]+1,indices[7]+2)+=ponderation*reg650; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg306; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg648; matrix(indices[4]+1,indices[7]+1)+=ponderation*reg261;
    matrix(indices[2]+0,indices[3]+2)+=-reg311; matrix(indices[0]+0,indices[6]+1)+=ponderation*reg591; matrix(indices[4]+1,indices[7]+0)+=ponderation*reg585; matrix(indices[2]+0,indices[4]+0)+=ponderation*reg579; matrix(indices[2]+0,indices[4]+1)+=ponderation*reg583;
    matrix(indices[4]+1,indices[6]+2)+=ponderation*reg565; matrix(indices[2]+0,indices[4]+2)+=ponderation*reg587; matrix(indices[2]+0,indices[5]+0)+=ponderation*reg564;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[0]; T reg1=var_inter[1]-0.21132486540518707896; T reg2=var_inter[0]-0.21132486540518707896; T reg3=1-var_inter[1]; T reg4=reg0-0.21132486540518707896;
    reg1=reg1/0.57735026918962573106; reg2=reg2/0.57735026918962573106; T reg5=var_inter[2]-0.21132486540518707896; reg4=reg4/0.57735026918962573106; T reg6=reg3-0.21132486540518707896;
    T reg7=1-var_inter[2]; T reg8=reg7*reg0; T reg9=reg7*var_inter[0]; reg4=1-reg4; reg6=reg6/0.57735026918962573106;
    T reg10=reg7*reg3; T reg11=reg3*var_inter[0]; reg5=reg5/0.57735026918962573106; T reg12=reg3*reg0; reg2=1-reg2;
    reg1=1-reg1; T reg13=reg1*reg4; T reg14=var_inter[0]*var_inter[1]; T reg15=reg11*elem.pos(1)[1]; T reg16=elem.pos(0)[2]*reg10;
    reg6=1-reg6; T reg17=elem.pos(0)[1]*reg8; T reg18=elem.pos(1)[1]*reg9; T reg19=elem.pos(1)[2]*reg10; T reg20=reg7*var_inter[1];
    T reg21=reg12*elem.pos(0)[2]; reg5=1-reg5; T reg22=reg11*elem.pos(1)[2]; T reg23=elem.pos(0)[2]*reg8; T reg24=elem.pos(1)[2]*reg9;
    T reg25=reg12*elem.pos(0)[1]; T reg26=elem.pos(1)[1]*reg10; T reg27=elem.pos(0)[1]*reg10; reg1=reg2*reg1; T reg28=reg7-0.21132486540518707896;
    T reg29=reg17+reg18; T reg30=elem.pos(2)[1]*reg9; reg4=reg4*reg6; T reg31=reg24+reg23; T reg32=elem.pos(2)[2]*reg20;
    T reg33=reg5*reg13; T reg34=elem.pos(2)[2]*reg9; reg19=reg19-reg16; T reg35=reg1*reg5; T reg36=reg25+reg15;
    T reg37=reg0*var_inter[1]; T reg38=reg14*elem.pos(2)[1]; T reg39=elem.pos(2)[1]*reg20; T reg40=reg14*elem.pos(2)[2]; T reg41=reg22+reg21;
    reg26=reg26-reg27; T reg42=elem.pos(3)[1]*reg20; T reg43=elem.pos(3)[1]*reg8; T reg44=elem.pos(0)[0]*reg8; reg34=reg34-reg31;
    T reg45=elem.pos(3)[2]*reg8; reg39=reg26+reg39; reg30=reg30-reg29; reg32=reg19+reg32; reg19=elem.pos(0)[0]*reg10;
    reg26=elem.pos(1)[0]*reg10; T reg46=elem.pos(3)[2]*reg20; T reg47=elem.pos(1)[0]*reg9; T reg48=reg0*var_inter[2]; T reg49=reg3*var_inter[2];
    T reg50=reg36+reg38; T reg51=reg5*reg4; reg6=reg2*reg6; reg2=reg37*elem.pos(3)[1]; reg28=reg28/0.57735026918962573106;
    T reg52=reg37*elem.pos(3)[2]; T reg53=reg33*elem.proute[1](1,1); T reg54=reg35*elem.proute[0](1,1); T reg55=reg41+reg40; T reg56=reg12*elem.pos(4)[2];
    T reg57=reg55+reg52; T reg58=elem.pos(2)[0]*reg9; T reg59=reg44+reg47; T reg60=reg50+reg2; T reg61=reg12*elem.pos(4)[1];
    reg32=reg32-reg46; T reg62=elem.pos(4)[2]*reg49; reg39=reg39-reg42; T reg63=elem.pos(4)[1]*reg49; reg53=reg54+reg53;
    reg54=reg51*elem.proute[2](1,1); reg45=reg34+reg45; reg34=elem.pos(4)[2]*reg48; T reg64=elem.pos(4)[1]*reg48; reg43=reg30+reg43;
    reg30=reg12*elem.pos(0)[0]; T reg65=reg11*elem.pos(1)[0]; T reg66=var_inter[0]*var_inter[2]; reg26=reg26-reg19; reg5=reg5*reg6;
    reg28=1-reg28; T reg67=elem.pos(2)[0]*reg20; T reg68=reg11*elem.pos(5)[2]; reg56=reg56-reg57; T reg69=elem.pos(3)[0]*reg8;
    reg58=reg58-reg59; reg45=reg45-reg34; T reg70=elem.pos(5)[2]*reg66; reg32=reg32-reg62; T reg71=elem.pos(5)[2]*reg49;
    T reg72=elem.pos(5)[1]*reg66; reg43=reg43-reg64; T reg73=reg11*elem.pos(5)[1]; T reg74=reg14*elem.pos(2)[0]; reg61=reg61-reg60;
    T reg75=reg30+reg65; T reg76=reg1*reg28; T reg77=reg5*elem.proute[3](1,1); reg54=reg53+reg54; reg53=elem.pos(5)[1]*reg49;
    reg39=reg39-reg63; T reg78=var_inter[1]*var_inter[2]; reg67=reg26+reg67; reg26=elem.pos(3)[0]*reg20; T reg79=reg37*elem.pos(3)[0];
    T reg80=reg75+reg74; T reg81=elem.pos(4)[0]*reg49; reg67=reg67-reg26; T reg82=reg13*reg28; T reg83=elem.pos(6)[2]*reg66;
    reg43=reg43-reg72; T reg84=elem.pos(6)[1]*reg66; reg45=reg45-reg70; reg77=reg54+reg77; reg54=reg76*elem.proute[4](1,1);
    reg68=reg56+reg68; reg56=reg14*elem.pos(6)[2]; T reg85=elem.pos(4)[0]*reg48; reg69=reg58+reg69; reg58=elem.pos(6)[1]*reg78;
    reg73=reg61+reg73; reg61=reg14*elem.pos(6)[1]; reg53=reg39+reg53; reg71=reg32+reg71; reg32=elem.pos(6)[2]*reg78;
    reg56=reg68+reg56; reg39=reg37*elem.pos(7)[1]; reg83=reg45+reg83; reg45=elem.pos(7)[2]*reg48; reg61=reg73+reg61;
    reg68=reg4*reg28; reg73=reg80+reg79; T reg86=reg12*elem.pos(4)[0]; T reg87=reg37*elem.pos(7)[2]; reg54=reg77+reg54;
    reg77=reg82*elem.proute[5](1,1); T reg88=elem.pos(7)[1]*reg78; reg58=reg53+reg58; reg53=elem.pos(7)[1]*reg48; reg84=reg43+reg84;
    reg32=reg71+reg32; reg43=elem.pos(7)[2]*reg78; reg71=elem.pos(5)[0]*reg66; reg67=reg67-reg81; T reg89=elem.pos(5)[0]*reg49;
    reg69=reg69-reg85; reg69=reg69-reg71; reg87=reg56+reg87; reg89=reg67+reg89; reg56=elem.pos(6)[0]*reg78;
    reg32=reg32-reg43; reg39=reg61+reg39; reg58=reg58-reg88; reg77=reg54+reg77; reg53=reg84+reg53;
    reg54=reg68*elem.proute[6](1,1); reg45=reg83+reg45; reg28=reg6*reg28; reg61=elem.pos(6)[0]*reg66; reg67=reg11*elem.pos(5)[0];
    reg86=reg86-reg73; reg67=reg86+reg67; reg83=reg14*elem.pos(6)[0]; reg84=reg45*reg39; reg54=reg77+reg54;
    reg77=reg28*elem.proute[7](1,1); reg86=reg58*reg87; T reg90=elem.pos(7)[0]*reg78; reg56=reg89+reg56; reg89=reg53*reg87;
    T reg91=reg32*reg39; T reg92=elem.pos(7)[0]*reg48; reg61=reg69+reg61; reg69=reg32*reg53; reg84=reg89-reg84;
    reg91=reg86-reg91; reg86=reg58*reg45; reg56=reg56-reg90; reg92=reg61+reg92; reg77=reg54+reg77;
    reg54=reg37*elem.pos(7)[0]; reg83=reg67+reg83; reg61=reg77+(*f.m).f_vol[2]; reg67=reg77+(*f.m).f_vol[1]; reg77=(*f.m).f_vol[0]+reg77;
    reg69=reg86-reg69; reg86=reg92*reg91; reg89=reg56*reg84; T reg93=reg12*var_inter[2]; T reg94=reg7*reg37;
    T reg95=reg7*reg14; T reg96=reg7*reg11; reg7=reg12*reg7; T reg97=reg11*var_inter[2]; T reg98=reg14*var_inter[2];
    T reg99=reg37*var_inter[2]; reg54=reg83+reg54; reg83=reg95*reg67; T reg100=reg95*reg61; T reg101=reg94*reg77;
    T reg102=reg94*reg67; T reg103=reg94*reg61; T reg104=reg93*reg77; T reg105=reg93*reg67; T reg106=reg93*reg61;
    T reg107=reg97*reg77; T reg108=reg97*reg67; T reg109=reg97*reg61; T reg110=reg98*reg77; T reg111=reg99*reg67;
    T reg112=reg98*reg67; T reg113=reg99*reg77; T reg114=reg98*reg61; T reg115=reg99*reg61; T reg116=reg7*reg67;
    T reg117=reg7*reg61; T reg118=reg7*reg77; T reg119=reg96*reg77; T reg120=reg54*reg69; reg86=reg89-reg86;
    reg89=reg96*reg67; T reg121=reg96*reg61; T reg122=reg95*reg77; reg114=(*f.m).density*reg114; reg120=reg86+reg120;
    reg113=(*f.m).density*reg113; reg112=(*f.m).density*reg112; reg110=(*f.m).density*reg110; reg111=(*f.m).density*reg111; reg109=(*f.m).density*reg109;
    reg115=(*f.m).density*reg115; reg118=(*f.m).density*reg118; reg108=(*f.m).density*reg108; reg122=(*f.m).density*reg122; reg121=(*f.m).density*reg121;
    reg83=(*f.m).density*reg83; reg100=(*f.m).density*reg100; reg89=(*f.m).density*reg89; reg101=(*f.m).density*reg101; reg102=(*f.m).density*reg102;
    reg119=(*f.m).density*reg119; reg103=(*f.m).density*reg103; reg104=(*f.m).density*reg104; reg117=(*f.m).density*reg117; reg105=(*f.m).density*reg105;
    reg106=(*f.m).density*reg106; reg116=(*f.m).density*reg116; reg107=(*f.m).density*reg107; reg86=reg120*reg100; T reg123=reg120*reg101;
    T reg124=reg120*reg102; T reg125=reg120*reg103; T reg126=reg120*reg104; T reg127=reg120*reg105; T reg128=reg120*reg106;
    T reg129=reg120*reg107; T reg130=reg120*reg108; T reg131=reg120*reg109; T reg132=reg120*reg110; T reg133=reg120*reg112;
    T reg134=reg120*reg114; T reg135=reg120*reg113; T reg136=reg120*reg111; T reg137=reg120*reg115; T reg138=reg120*reg83;
    T reg139=reg120*reg119; T reg140=reg120*reg118; T reg141=reg120*reg122; T reg142=reg120*reg117; T reg143=reg120*reg121;
    T reg144=reg120*reg116; T reg145=reg120*reg89; T reg146=ponderation*reg142; sollicitation[indices[0]+2]+=reg146; T reg147=ponderation*reg131;
    sollicitation[indices[5]+2]+=reg147; T reg148=ponderation*reg132; sollicitation[indices[6]+0]+=reg148; T reg149=ponderation*reg144; sollicitation[indices[0]+1]+=reg149;
    T reg150=ponderation*reg133; sollicitation[indices[6]+1]+=reg150; T reg151=ponderation*reg134; sollicitation[indices[6]+2]+=reg151; T reg152=ponderation*reg140;
    sollicitation[indices[0]+0]+=reg152; T reg153=ponderation*reg135; sollicitation[indices[7]+0]+=reg153; T reg154=ponderation*reg136; sollicitation[indices[7]+1]+=reg154;
    T reg155=ponderation*reg137; sollicitation[indices[7]+2]+=reg155; T reg156=ponderation*reg130; sollicitation[indices[5]+1]+=reg156; T reg157=ponderation*reg129;
    sollicitation[indices[5]+0]+=reg157; T reg158=ponderation*reg139; sollicitation[indices[1]+0]+=reg158; T reg159=ponderation*reg128; sollicitation[indices[4]+2]+=reg159;
    T reg160=ponderation*reg127; sollicitation[indices[4]+1]+=reg160; T reg161=ponderation*reg145; sollicitation[indices[1]+1]+=reg161; T reg162=ponderation*reg126;
    sollicitation[indices[4]+0]+=reg162; T reg163=ponderation*reg125; sollicitation[indices[3]+2]+=reg163; T reg164=ponderation*reg143; sollicitation[indices[1]+2]+=reg164;
    T reg165=ponderation*reg124; sollicitation[indices[3]+1]+=reg165; T reg166=ponderation*reg123; sollicitation[indices[3]+0]+=reg166; T reg167=ponderation*reg141;
    sollicitation[indices[2]+0]+=reg167; T reg168=ponderation*reg86; sollicitation[indices[2]+2]+=reg168; T reg169=ponderation*reg138; sollicitation[indices[2]+1]+=reg169;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg1=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0]; T reg3=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[2]; T reg4=PNODE(0).dep_imp_val_0_0[2]*(*f.m).lim_cond_0;
    T reg5=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0; T reg6=reg4+reg3;
    T reg7=reg5+reg0; T reg8=reg2+reg1; T reg9=PNODE(0).dep_imp_coef_0*reg6; T reg10=PNODE(0).dep_imp_coef_0*reg8; T reg11=PNODE(0).dep_imp_coef_0*reg7;
    T reg12=PNODE(0).f_nodal[2]+reg9; sollicitation[indices[0]+2]+=reg12; T reg13=PNODE(0).f_nodal[0]+reg10; sollicitation[indices[0]+0]+=reg13; T reg14=PNODE(0).f_nodal[1]+reg11;
    sollicitation[indices[0]+1]+=reg14;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg1=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0]; T reg3=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[2]; T reg4=PNODE(0).dep_imp_val_0_0[2]*(*f.m).lim_cond_0;
    T reg5=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0; T reg6=reg4+reg3;
    T reg7=reg5+reg0; T reg8=reg2+reg1; T reg9=PNODE(0).dep_imp_coef_0*reg6; T reg10=PNODE(0).dep_imp_coef_0*reg8; T reg11=PNODE(0).dep_imp_coef_0*reg7;
    T reg12=PNODE(0).f_nodal[2]+reg9; sollicitation[indices[0]+2]+=reg12; T reg13=PNODE(0).f_nodal[0]+reg10; sollicitation[indices[0]+0]+=reg13; T reg14=PNODE(0).f_nodal[1]+reg11;
    sollicitation[indices[0]+1]+=reg14;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg1=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0]; T reg3=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[2]; T reg4=PNODE(0).dep_imp_val_0_0[2]*(*f.m).lim_cond_0;
    T reg5=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg6=reg4+reg3; T reg7=reg5+reg0; T reg8=reg2+reg1; T reg9=PNODE(0).dep_imp_coef_0*reg6;
    T reg10=PNODE(0).dep_imp_coef_0*reg8; T reg11=PNODE(0).dep_imp_coef_0*reg7; T reg12=PNODE(0).f_nodal[2]+reg9; sollicitation[indices[0]+2]+=reg12; T reg13=PNODE(0).f_nodal[0]+reg10;
    sollicitation[indices[0]+0]+=reg13; T reg14=PNODE(0).f_nodal[1]+reg11; sollicitation[indices[0]+1]+=reg14;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
  #undef PNODE
}
#endif
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[1]; T reg1=0.21132486540518713447*elem.pos(3)[1]; T reg2=0.21132486540518713447*elem.pos(0)[0]; T reg3=0.21132486540518713447*elem.pos(3)[0]; T reg4=0.78867513459481286553*elem.pos(0)[0];
    T reg5=0.78867513459481286553*elem.pos(2)[0]; T reg6=reg1-reg0; T reg7=reg3-reg2; T reg8=0.78867513459481286553*elem.pos(2)[1]; T reg9=0.78867513459481286553*elem.pos(0)[1];
    T reg10=0.21132486540518713447*elem.pos(3)[2]; T reg11=0.21132486540518713447*elem.pos(0)[2]; T reg12=0.78867513459481286553*elem.pos(3)[0]; T reg13=0.78867513459481286553*elem.pos(3)[1]; T reg14=0.78867513459481286553*elem.pos(3)[2];
    reg7=reg7+reg5; T reg15=reg13-reg9; T reg16=0.78867513459481286553*elem.pos(1)[0]; T reg17=reg12-reg4; T reg18=0.21132486540518713447*elem.pos(2)[0];
    reg6=reg6+reg8; T reg19=0.21132486540518713447*elem.pos(2)[1]; T reg20=0.78867513459481286553*elem.pos(0)[2]; T reg21=0.78867513459481286553*elem.pos(1)[1]; T reg22=reg10-reg11;
    T reg23=0.78867513459481286553*elem.pos(2)[2]; T reg24=0.21132486540518713447*elem.pos(1)[0]; reg7=reg7-reg16; reg6=reg6-reg21; T reg25=0.78867513459481286553*elem.pos(1)[2];
    T reg26=0.21132486540518713447*elem.pos(1)[1]; T reg27=reg14-reg20; T reg28=0.21132486540518713447*elem.pos(2)[2]; reg15=reg19+reg15; reg22=reg22+reg23;
    reg17=reg18+reg17; reg27=reg28+reg27; reg22=reg22-reg25; T reg29=pow(reg6,2); T reg30=0.21132486540518713447*elem.pos(1)[2];
    T reg31=pow(reg7,2); reg17=reg17-reg24; reg15=reg15-reg26; reg27=reg27-reg30; reg29=reg31+reg29;
    reg31=pow(reg17,2); T reg32=pow(reg22,2); T reg33=pow(reg15,2); T reg34=pow(reg27,2); reg33=reg31+reg33;
    reg31=reg2+reg12; reg32=reg29+reg32; reg29=reg0+reg13; T reg35=reg1+reg9; T reg36=reg3+reg4;
    reg29=reg8-reg29; reg31=reg5-reg31; T reg37=reg10+reg20; T reg38=reg11+reg14; reg34=reg33+reg34;
    reg36=reg18-reg36; reg32=pow(reg32,0.5); reg35=reg19-reg35; reg38=reg23-reg38; reg36=reg16+reg36;
    reg29=reg29+reg26; reg35=reg21+reg35; reg31=reg31+reg24; reg37=reg28-reg37; reg33=reg7/reg32;
    T reg39=reg6/reg32; reg34=pow(reg34,0.5); T reg40=reg15/reg34; reg37=reg25+reg37; T reg41=reg39*reg35;
    reg38=reg38+reg30; T reg42=reg33*reg36; T reg43=reg17/reg34; T reg44=reg39*reg29; reg32=reg22/reg32;
    T reg45=reg33*reg31; reg44=reg45+reg44; reg45=reg32*reg38; reg34=reg27/reg34; T reg46=reg31*reg43;
    T reg47=reg29*reg40; reg41=reg42+reg41; reg42=reg32*reg37; T reg48=reg35*reg40; T reg49=reg36*reg43;
    reg47=reg46+reg47; reg46=reg38*reg34; reg45=reg44+reg45; reg42=reg41+reg42; reg41=reg33*reg45;
    reg49=reg48+reg49; reg44=reg37*reg34; reg48=reg39*reg45; T reg50=reg33*reg42; reg46=reg47+reg46;
    reg47=reg39*reg42; reg50=reg36-reg50; reg48=reg29-reg48; T reg51=reg32*reg45; T reg52=reg43*reg46;
    reg44=reg49+reg44; reg41=reg31-reg41; reg49=reg32*reg42; T reg53=reg40*reg46; reg47=reg35-reg47;
    T reg54=pow(reg47,2); reg49=reg37-reg49; T reg55=reg43*reg44; T reg56=reg40*reg44; T reg57=pow(reg50,2);
    reg51=reg38-reg51; T reg58=pow(reg48,2); reg52=reg31-reg52; reg53=reg29-reg53; T reg59=reg34*reg46;
    T reg60=pow(reg41,2); reg54=reg57+reg54; reg59=reg38-reg59; reg57=pow(reg53,2); T reg61=pow(reg52,2);
    T reg62=pow(reg49,2); T reg63=reg34*reg44; reg55=reg36-reg55; T reg64=pow(reg51,2); reg58=reg60+reg58;
    reg56=reg35-reg56; reg64=reg58+reg64; reg63=reg37-reg63; reg58=pow(reg56,2); reg60=pow(reg55,2);
    reg62=reg54+reg62; reg54=pow(reg59,2); reg57=reg61+reg57; reg64=pow(reg64,0.5); reg61=pow(reg63,2);
    reg58=reg60+reg58; reg62=pow(reg62,0.5); reg54=reg57+reg54; reg47=reg47/reg62; reg50=reg50/reg62;
    reg61=reg58+reg61; reg62=reg49/reg62; reg54=pow(reg54,0.5); reg51=reg51/reg64; reg48=reg48/reg64;
    reg64=reg41/reg64; reg41=reg32*reg50; reg49=reg32*reg47; reg57=reg39*reg62; reg58=reg6*reg47;
    reg60=reg7*reg50; T reg65=reg33*reg62; reg61=pow(reg61,0.5); T reg66=reg33*reg47; T reg67=reg39*reg50;
    reg59=reg59/reg54; reg53=reg53/reg54; reg54=reg52/reg54; reg52=reg7*reg64; T reg68=reg39*reg64;
    T reg69=reg33*reg48; T reg70=reg6*reg48; reg50=reg36*reg50; reg47=reg35*reg47; T reg71=reg29*reg48;
    T reg72=reg31*reg64; T reg73=reg33*reg51; reg64=reg32*reg64; reg6=reg6*reg39; reg33=reg7*reg33;
    reg48=reg32*reg48; reg39=reg39*reg51; reg70=reg52+reg70; reg7=reg22*reg51; reg52=reg40*reg59;
    T reg74=reg17*reg43; T reg75=reg15*reg40; reg51=reg38*reg51; reg71=reg72+reg71; reg72=reg15*reg53;
    reg32=reg22*reg32; reg6=reg33+reg6; reg33=reg17*reg54; reg63=reg63/reg61; reg29=reg29*reg53;
    reg31=reg31*reg54; reg58=reg60+reg58; reg22=reg22*reg62; reg60=reg40*reg54; reg56=reg56/reg61;
    T reg76=reg43*reg53; reg62=reg37*reg62; reg47=reg50+reg47; reg49=reg57-reg49; reg65=reg41-reg65;
    reg41=reg43*reg59; reg68=reg69-reg68; reg61=reg55/reg61; reg67=reg66-reg67; reg54=reg34*reg54;
    reg73=reg64-reg73; reg53=reg34*reg53; reg48=reg39-reg48; reg39=reg34*reg61; reg15=reg15*reg56;
    reg60=reg76-reg60; reg29=reg31+reg29; reg38=reg38*reg59; reg31=reg40*reg63; reg50=reg43*reg56;
    reg53=reg52-reg53; reg43=reg43*reg63; reg41=reg54-reg41; reg72=reg33+reg72; reg40=reg40*reg61;
    reg59=reg27*reg59; reg33=reg34*reg56; reg56=reg35*reg56; reg62=reg47+reg62; reg22=reg58+reg22;
    reg36=reg36*reg61; reg49=skin_elem.p*reg49; reg65=skin_elem.p*reg65; reg68=skin_elem.p*reg68; reg67=skin_elem.p*reg67;
    reg73=skin_elem.p*reg73; reg48=skin_elem.p*reg48; reg7=reg70+reg7; reg75=reg74+reg75; reg34=reg27*reg34;
    reg51=reg71+reg51; reg32=reg6+reg32; reg61=reg17*reg61; reg56=reg36+reg56; reg33=reg31-reg33;
    reg27=reg27*reg63; reg15=reg61+reg15; reg63=reg37*reg63; reg6=0.6220084679281461892*reg49; reg17=0.16666666666666667632*reg48;
    reg31=0.6220084679281461892*skin_elem.f_surf[2]; reg35=0.044658198738520458147*reg67; reg36=0.16666666666666667632*reg73; reg37=0.6220084679281461892*reg65; reg47=0.16666666666666667632*reg67;
    reg52=0.16666666666666667632*skin_elem.f_surf[2]; reg54=0.044658198738520458147*reg68; reg55=0.044658198738520458147*skin_elem.f_surf[2]; reg57=0.16666666666666667632*reg68; reg58=0.6220084679281461892*skin_elem.f_surf[1];
    reg61=0.6220084679281461892*reg67; reg64=0.16666666666666667632*reg65; reg66=0.16666666666666667632*skin_elem.f_surf[1]; reg69=0.044658198738520458147*reg73; reg70=0.16666666666666667632*reg49;
    reg71=0.16666666666666667632*skin_elem.f_surf[0]; reg74=0.6220084679281461892*reg48; reg40=reg50-reg40; reg43=reg39-reg43; reg39=0.6220084679281461892*skin_elem.f_surf[0];
    reg50=0.6220084679281461892*reg68; reg38=reg29+reg38; reg59=reg72+reg59; reg7=reg45*reg7; reg29=0.044658198738520458147*reg49;
    reg53=skin_elem.p*reg53; reg41=skin_elem.p*reg41; reg60=skin_elem.p*reg60; reg22=reg42*reg22; reg51=reg32*reg51;
    reg62=reg32*reg62; reg32=0.6220084679281461892*reg73; reg42=0.044658198738520458147*skin_elem.f_surf[1]; reg45=0.044658198738520458147*reg48; reg34=reg75+reg34;
    reg72=0.044658198738520458147*reg65; reg75=0.044658198738520458147*skin_elem.f_surf[0]; reg64=reg66+reg64; reg76=0.044658198738520458147*reg60; reg7=reg51-reg7;
    reg61=reg31+reg61; reg51=0.16666666666666667632*reg41; T reg77=0.6220084679281461892*reg53; reg57=reg52+reg57; T reg78=0.6220084679281461892*reg60;
    reg47=reg52+reg47; T reg79=0.6220084679281461892*reg41; reg37=reg58+reg37; reg36=reg66+reg36; T reg80=0.044658198738520458147*reg41;
    T reg81=0.16666666666666667632*reg60; reg29=reg75+reg29; reg54=reg55+reg54; reg63=reg56+reg63; reg72=reg42+reg72;
    reg45=reg75+reg45; reg32=reg58+reg32; reg27=reg15+reg27; reg6=reg39+reg6; reg74=reg39+reg74;
    reg17=reg71+reg17; reg15=0.16666666666666667632*reg53; reg33=skin_elem.p*reg33; reg43=skin_elem.p*reg43; reg35=reg55+reg35;
    reg59=reg46*reg59; reg40=skin_elem.p*reg40; reg38=reg34*reg38; reg70=reg71+reg70; reg50=reg31+reg50;
    reg69=reg42+reg69; reg46=0.044658198738520458147*reg53; reg22=reg62-reg22; reg36=reg7*reg36; reg56=0.16666666666666667632*reg33;
    reg6=reg22*reg6; reg46=reg75+reg46; reg62=0.044658198738520458147*reg33; reg74=reg7*reg74; reg32=reg7*reg32;
    T reg82=0.044658198738520458147*reg43; reg77=reg39+reg77; reg72=reg22*reg72; T reg83=0.16666666666666667632*reg40; reg76=reg55+reg76;
    reg50=reg7*reg50; reg61=reg22*reg61; reg57=reg7*reg57; T reg84=0.044658198738520458147*reg40; reg79=reg58+reg79;
    T reg85=0.16666666666666667632*reg43; reg80=reg42+reg80; reg29=reg22*reg29; reg37=reg22*reg37; reg27=reg44*reg27;
    reg54=reg7*reg54; reg63=reg34*reg63; reg47=reg22*reg47; reg70=reg22*reg70; reg78=reg31+reg78;
    reg45=reg45*reg7; reg81=reg52+reg81; reg15=reg15+reg71; reg69=reg7*reg69; reg59=reg38-reg59;
    reg35=reg22*reg35; reg34=0.6220084679281461892*reg43; reg38=0.6220084679281461892*reg40; reg64=reg22*reg64; reg44=0.6220084679281461892*reg33;
    reg17=reg7*reg17; reg51=reg66+reg51; reg76=reg59*reg76; reg83=reg52+reg83; reg72=0.25*reg72;
    reg69=0.25*reg69; reg61=0.25*reg61; reg64=0.25*reg64; reg45=0.25*reg45; reg27=reg63-reg27;
    reg74=0.25*reg74; reg62=reg75+reg62; reg70=0.25*reg70; reg32=0.25*reg32; reg82=reg42+reg82;
    reg77=reg59*reg77; reg15=reg15*reg59; reg78=reg59*reg78; reg50=0.25*reg50; reg44=reg39+reg44;
    reg84=reg55+reg84; reg29=0.25*reg29; reg46=reg59*reg46; reg35=0.25*reg35; reg80=reg59*reg80;
    reg38=reg31+reg38; reg79=reg59*reg79; reg36=0.25*reg36; reg85=reg66+reg85; reg6=0.25*reg6;
    reg56=reg71+reg56; reg81=reg59*reg81; reg37=0.25*reg37; reg34=reg58+reg34; reg17=0.25*reg17;
    reg54=0.25*reg54; reg51=reg59*reg51; reg57=0.25*reg57; reg47=0.25*reg47; reg46=0.25*reg46;
    reg81=0.25*reg81; reg82=reg27*reg82; reg56=reg27*reg56; reg77=0.25*reg77; reg15=0.25*reg15;
    reg50=reg47+reg50; reg6=reg17+reg6; reg38=reg27*reg38; reg84=reg27*reg84; reg29=reg17+reg29;
    reg44=reg44*reg27; reg78=0.25*reg78; reg69=reg69+reg64; reg61=reg57+reg61; reg51=0.25*reg51;
    reg34=reg27*reg34; reg76=0.25*reg76; reg72=reg36+reg72; reg85=reg27*reg85; reg83=reg27*reg83;
    reg35=reg57+reg35; reg80=0.25*reg80; reg37=reg36+reg37; reg74=reg70+reg74; reg62=reg27*reg62;
    reg47=reg54+reg47; reg45=reg70+reg45; reg79=0.25*reg79; reg32=reg64+reg32; reg77=reg29+reg77;
    reg79=reg72+reg79; reg78=reg35+reg78; reg47=reg47+reg81; reg38=0.25*reg38; reg46=reg6+reg46;
    reg56=0.25*reg56; reg34=0.25*reg34; reg80=reg37+reg80; reg85=0.25*reg85; reg69=reg69+reg51;
    reg76=reg61+reg76; reg83=0.25*reg83; reg74=reg15+reg74; reg62=0.25*reg62; reg15=reg45+reg15;
    reg44=0.25*reg44; reg32=reg51+reg32; reg82=0.25*reg82; reg50=reg81+reg50; reg84=0.25*reg84;
    reg38=reg47+reg38; sollicitation[indices[0]+2]+=reg38; reg44=reg15+reg44; sollicitation[indices[0]+0]+=reg44; reg34=reg69+reg34;
    sollicitation[indices[0]+1]+=reg34; reg78=reg83+reg78; sollicitation[indices[3]+2]+=reg78; reg79=reg85+reg79; sollicitation[indices[3]+1]+=reg79;
    reg46=reg46+reg56; sollicitation[indices[1]+0]+=reg46; reg85=reg80+reg85; sollicitation[indices[1]+1]+=reg85; reg83=reg76+reg83;
    sollicitation[indices[1]+2]+=reg83; reg77=reg56+reg77; sollicitation[indices[3]+0]+=reg77; reg62=reg74+reg62; sollicitation[indices[2]+0]+=reg62;
    reg82=reg32+reg82; sollicitation[indices[2]+1]+=reg82; reg84=reg50+reg84; sollicitation[indices[2]+2]+=reg84;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[1]; T reg1=0.21132486540518713447*elem.pos(3)[1]; T reg2=0.21132486540518713447*elem.pos(0)[0]; T reg3=0.21132486540518713447*elem.pos(3)[0]; T reg4=0.78867513459481286553*elem.pos(0)[0];
    T reg5=0.78867513459481286553*elem.pos(2)[0]; T reg6=reg1-reg0; T reg7=reg3-reg2; T reg8=0.78867513459481286553*elem.pos(2)[1]; T reg9=0.78867513459481286553*elem.pos(0)[1];
    T reg10=0.21132486540518713447*elem.pos(3)[2]; T reg11=0.21132486540518713447*elem.pos(0)[2]; T reg12=0.78867513459481286553*elem.pos(3)[0]; T reg13=0.78867513459481286553*elem.pos(3)[1]; T reg14=0.78867513459481286553*elem.pos(3)[2];
    reg7=reg7+reg5; T reg15=reg13-reg9; T reg16=0.78867513459481286553*elem.pos(1)[0]; T reg17=reg12-reg4; T reg18=0.21132486540518713447*elem.pos(2)[0];
    reg6=reg6+reg8; T reg19=0.21132486540518713447*elem.pos(2)[1]; T reg20=0.78867513459481286553*elem.pos(0)[2]; T reg21=0.78867513459481286553*elem.pos(1)[1]; T reg22=reg10-reg11;
    T reg23=0.78867513459481286553*elem.pos(2)[2]; T reg24=0.21132486540518713447*elem.pos(1)[0]; reg7=reg7-reg16; reg6=reg6-reg21; T reg25=0.78867513459481286553*elem.pos(1)[2];
    T reg26=0.21132486540518713447*elem.pos(1)[1]; T reg27=reg14-reg20; T reg28=0.21132486540518713447*elem.pos(2)[2]; reg15=reg19+reg15; reg22=reg22+reg23;
    reg17=reg18+reg17; reg27=reg28+reg27; reg22=reg22-reg25; T reg29=pow(reg6,2); T reg30=0.21132486540518713447*elem.pos(1)[2];
    T reg31=pow(reg7,2); reg17=reg17-reg24; reg15=reg15-reg26; reg27=reg27-reg30; reg29=reg31+reg29;
    reg31=pow(reg17,2); T reg32=pow(reg22,2); T reg33=pow(reg15,2); T reg34=pow(reg27,2); reg33=reg31+reg33;
    reg31=reg2+reg12; reg32=reg29+reg32; reg29=reg0+reg13; T reg35=reg1+reg9; T reg36=reg3+reg4;
    reg29=reg8-reg29; reg31=reg5-reg31; T reg37=reg10+reg20; T reg38=reg11+reg14; reg34=reg33+reg34;
    reg36=reg18-reg36; reg32=pow(reg32,0.5); reg35=reg19-reg35; reg38=reg23-reg38; reg36=reg16+reg36;
    reg29=reg29+reg26; reg35=reg21+reg35; reg31=reg31+reg24; reg37=reg28-reg37; reg33=reg7/reg32;
    T reg39=reg6/reg32; reg34=pow(reg34,0.5); T reg40=reg15/reg34; reg37=reg25+reg37; T reg41=reg39*reg35;
    reg38=reg38+reg30; T reg42=reg33*reg36; T reg43=reg17/reg34; T reg44=reg39*reg29; reg32=reg22/reg32;
    T reg45=reg33*reg31; reg44=reg45+reg44; reg45=reg32*reg38; reg34=reg27/reg34; T reg46=reg31*reg43;
    T reg47=reg29*reg40; reg41=reg42+reg41; reg42=reg32*reg37; T reg48=reg35*reg40; T reg49=reg36*reg43;
    reg47=reg46+reg47; reg46=reg38*reg34; reg45=reg44+reg45; reg42=reg41+reg42; reg41=reg33*reg45;
    reg49=reg48+reg49; reg44=reg37*reg34; reg48=reg39*reg45; T reg50=reg33*reg42; reg46=reg47+reg46;
    reg47=reg39*reg42; reg50=reg36-reg50; reg48=reg29-reg48; T reg51=reg32*reg45; T reg52=reg43*reg46;
    reg44=reg49+reg44; reg41=reg31-reg41; reg49=reg32*reg42; T reg53=reg40*reg46; reg47=reg35-reg47;
    T reg54=pow(reg47,2); reg49=reg37-reg49; T reg55=reg43*reg44; T reg56=reg40*reg44; T reg57=pow(reg50,2);
    reg51=reg38-reg51; T reg58=pow(reg48,2); reg52=reg31-reg52; reg53=reg29-reg53; T reg59=reg34*reg46;
    T reg60=pow(reg41,2); reg54=reg57+reg54; reg59=reg38-reg59; reg57=pow(reg53,2); T reg61=pow(reg52,2);
    T reg62=pow(reg49,2); T reg63=reg34*reg44; reg55=reg36-reg55; T reg64=pow(reg51,2); reg58=reg60+reg58;
    reg56=reg35-reg56; reg64=reg58+reg64; reg63=reg37-reg63; reg58=pow(reg56,2); reg60=pow(reg55,2);
    reg62=reg54+reg62; reg54=pow(reg59,2); reg57=reg61+reg57; reg64=pow(reg64,0.5); reg61=pow(reg63,2);
    reg58=reg60+reg58; reg62=pow(reg62,0.5); reg54=reg57+reg54; reg47=reg47/reg62; reg50=reg50/reg62;
    reg61=reg58+reg61; reg62=reg49/reg62; reg54=pow(reg54,0.5); reg51=reg51/reg64; reg48=reg48/reg64;
    reg64=reg41/reg64; reg41=reg32*reg50; reg49=reg32*reg47; reg57=reg39*reg62; reg58=reg6*reg47;
    reg60=reg7*reg50; T reg65=reg33*reg62; reg61=pow(reg61,0.5); T reg66=reg33*reg47; T reg67=reg39*reg50;
    reg59=reg59/reg54; reg53=reg53/reg54; reg54=reg52/reg54; reg52=reg7*reg64; T reg68=reg39*reg64;
    T reg69=reg33*reg48; T reg70=reg6*reg48; reg50=reg36*reg50; reg47=reg35*reg47; T reg71=reg29*reg48;
    T reg72=reg31*reg64; T reg73=reg33*reg51; reg64=reg32*reg64; reg6=reg6*reg39; reg33=reg7*reg33;
    reg48=reg32*reg48; reg39=reg39*reg51; reg70=reg52+reg70; reg7=reg22*reg51; reg52=reg40*reg59;
    T reg74=reg17*reg43; T reg75=reg15*reg40; reg51=reg38*reg51; reg71=reg72+reg71; reg72=reg15*reg53;
    reg32=reg22*reg32; reg6=reg33+reg6; reg33=reg17*reg54; reg63=reg63/reg61; reg29=reg29*reg53;
    reg31=reg31*reg54; reg58=reg60+reg58; reg22=reg22*reg62; reg60=reg40*reg54; reg56=reg56/reg61;
    T reg76=reg43*reg53; reg62=reg37*reg62; reg47=reg50+reg47; reg49=reg57-reg49; reg65=reg41-reg65;
    reg41=reg43*reg59; reg68=reg69-reg68; reg61=reg55/reg61; reg67=reg66-reg67; reg54=reg34*reg54;
    reg73=reg64-reg73; reg53=reg34*reg53; reg48=reg39-reg48; reg39=reg34*reg61; reg15=reg15*reg56;
    reg60=reg76-reg60; reg29=reg31+reg29; reg38=reg38*reg59; reg31=reg40*reg63; reg50=reg43*reg56;
    reg53=reg52-reg53; reg43=reg43*reg63; reg41=reg54-reg41; reg72=reg33+reg72; reg40=reg40*reg61;
    reg59=reg27*reg59; reg33=reg34*reg56; reg56=reg35*reg56; reg62=reg47+reg62; reg22=reg58+reg22;
    reg36=reg36*reg61; reg49=skin_elem.p*reg49; reg65=skin_elem.p*reg65; reg68=skin_elem.p*reg68; reg67=skin_elem.p*reg67;
    reg73=skin_elem.p*reg73; reg48=skin_elem.p*reg48; reg7=reg70+reg7; reg75=reg74+reg75; reg34=reg27*reg34;
    reg51=reg71+reg51; reg32=reg6+reg32; reg61=reg17*reg61; reg56=reg36+reg56; reg33=reg31-reg33;
    reg27=reg27*reg63; reg15=reg61+reg15; reg63=reg37*reg63; reg6=0.6220084679281461892*reg49; reg17=0.16666666666666667632*reg48;
    reg31=0.6220084679281461892*skin_elem.f_surf[2]; reg35=0.044658198738520458147*reg67; reg36=0.16666666666666667632*reg73; reg37=0.6220084679281461892*reg65; reg47=0.16666666666666667632*reg67;
    reg52=0.16666666666666667632*skin_elem.f_surf[2]; reg54=0.044658198738520458147*reg68; reg55=0.044658198738520458147*skin_elem.f_surf[2]; reg57=0.16666666666666667632*reg68; reg58=0.6220084679281461892*skin_elem.f_surf[1];
    reg61=0.6220084679281461892*reg67; reg64=0.16666666666666667632*reg65; reg66=0.16666666666666667632*skin_elem.f_surf[1]; reg69=0.044658198738520458147*reg73; reg70=0.16666666666666667632*reg49;
    reg71=0.16666666666666667632*skin_elem.f_surf[0]; reg74=0.6220084679281461892*reg48; reg40=reg50-reg40; reg43=reg39-reg43; reg39=0.6220084679281461892*skin_elem.f_surf[0];
    reg50=0.6220084679281461892*reg68; reg38=reg29+reg38; reg59=reg72+reg59; reg7=reg45*reg7; reg29=0.044658198738520458147*reg49;
    reg53=skin_elem.p*reg53; reg41=skin_elem.p*reg41; reg60=skin_elem.p*reg60; reg22=reg42*reg22; reg51=reg32*reg51;
    reg62=reg32*reg62; reg32=0.6220084679281461892*reg73; reg42=0.044658198738520458147*skin_elem.f_surf[1]; reg45=0.044658198738520458147*reg48; reg34=reg75+reg34;
    reg72=0.044658198738520458147*reg65; reg75=0.044658198738520458147*skin_elem.f_surf[0]; reg64=reg66+reg64; reg76=0.044658198738520458147*reg60; reg7=reg51-reg7;
    reg61=reg31+reg61; reg51=0.16666666666666667632*reg41; T reg77=0.6220084679281461892*reg53; reg57=reg52+reg57; T reg78=0.6220084679281461892*reg60;
    reg47=reg52+reg47; T reg79=0.6220084679281461892*reg41; reg37=reg58+reg37; reg36=reg66+reg36; T reg80=0.044658198738520458147*reg41;
    T reg81=0.16666666666666667632*reg60; reg29=reg75+reg29; reg54=reg55+reg54; reg63=reg56+reg63; reg72=reg42+reg72;
    reg45=reg75+reg45; reg32=reg58+reg32; reg27=reg15+reg27; reg6=reg39+reg6; reg74=reg39+reg74;
    reg17=reg71+reg17; reg15=0.16666666666666667632*reg53; reg33=skin_elem.p*reg33; reg43=skin_elem.p*reg43; reg35=reg55+reg35;
    reg59=reg46*reg59; reg40=skin_elem.p*reg40; reg38=reg34*reg38; reg70=reg71+reg70; reg50=reg31+reg50;
    reg69=reg42+reg69; reg46=0.044658198738520458147*reg53; reg22=reg62-reg22; reg36=reg7*reg36; reg56=0.16666666666666667632*reg33;
    reg6=reg22*reg6; reg46=reg75+reg46; reg62=0.044658198738520458147*reg33; reg74=reg7*reg74; reg32=reg7*reg32;
    T reg82=0.044658198738520458147*reg43; reg77=reg39+reg77; reg72=reg22*reg72; T reg83=0.16666666666666667632*reg40; reg76=reg55+reg76;
    reg50=reg7*reg50; reg61=reg22*reg61; reg57=reg7*reg57; T reg84=0.044658198738520458147*reg40; reg79=reg58+reg79;
    T reg85=0.16666666666666667632*reg43; reg80=reg42+reg80; reg29=reg22*reg29; reg37=reg22*reg37; reg27=reg44*reg27;
    reg54=reg7*reg54; reg63=reg34*reg63; reg47=reg22*reg47; reg70=reg22*reg70; reg78=reg31+reg78;
    reg45=reg45*reg7; reg81=reg52+reg81; reg15=reg15+reg71; reg69=reg7*reg69; reg59=reg38-reg59;
    reg35=reg22*reg35; reg34=0.6220084679281461892*reg43; reg38=0.6220084679281461892*reg40; reg64=reg22*reg64; reg44=0.6220084679281461892*reg33;
    reg17=reg7*reg17; reg51=reg66+reg51; reg76=reg59*reg76; reg83=reg52+reg83; reg72=0.25*reg72;
    reg69=0.25*reg69; reg61=0.25*reg61; reg64=0.25*reg64; reg45=0.25*reg45; reg27=reg63-reg27;
    reg74=0.25*reg74; reg62=reg75+reg62; reg70=0.25*reg70; reg32=0.25*reg32; reg82=reg42+reg82;
    reg77=reg59*reg77; reg15=reg15*reg59; reg78=reg59*reg78; reg50=0.25*reg50; reg44=reg39+reg44;
    reg84=reg55+reg84; reg29=0.25*reg29; reg46=reg59*reg46; reg35=0.25*reg35; reg80=reg59*reg80;
    reg38=reg31+reg38; reg79=reg59*reg79; reg36=0.25*reg36; reg85=reg66+reg85; reg6=0.25*reg6;
    reg56=reg71+reg56; reg81=reg59*reg81; reg37=0.25*reg37; reg34=reg58+reg34; reg17=0.25*reg17;
    reg54=0.25*reg54; reg51=reg59*reg51; reg57=0.25*reg57; reg47=0.25*reg47; reg46=0.25*reg46;
    reg81=0.25*reg81; reg82=reg27*reg82; reg56=reg27*reg56; reg77=0.25*reg77; reg15=0.25*reg15;
    reg50=reg47+reg50; reg6=reg17+reg6; reg38=reg27*reg38; reg84=reg27*reg84; reg29=reg17+reg29;
    reg44=reg44*reg27; reg78=0.25*reg78; reg69=reg69+reg64; reg61=reg57+reg61; reg51=0.25*reg51;
    reg34=reg27*reg34; reg76=0.25*reg76; reg72=reg36+reg72; reg85=reg27*reg85; reg83=reg27*reg83;
    reg35=reg57+reg35; reg80=0.25*reg80; reg37=reg36+reg37; reg74=reg70+reg74; reg62=reg27*reg62;
    reg47=reg54+reg47; reg45=reg70+reg45; reg79=0.25*reg79; reg32=reg64+reg32; reg77=reg29+reg77;
    reg79=reg72+reg79; reg78=reg35+reg78; reg47=reg47+reg81; reg38=0.25*reg38; reg46=reg6+reg46;
    reg56=0.25*reg56; reg34=0.25*reg34; reg80=reg37+reg80; reg85=0.25*reg85; reg69=reg69+reg51;
    reg76=reg61+reg76; reg83=0.25*reg83; reg74=reg15+reg74; reg62=0.25*reg62; reg15=reg45+reg15;
    reg44=0.25*reg44; reg32=reg51+reg32; reg82=0.25*reg82; reg50=reg81+reg50; reg84=0.25*reg84;
    reg38=reg47+reg38; sollicitation[indices[0]+2]+=reg38; reg44=reg15+reg44; sollicitation[indices[0]+0]+=reg44; reg34=reg69+reg34;
    sollicitation[indices[0]+1]+=reg34; reg78=reg83+reg78; sollicitation[indices[3]+2]+=reg78; reg79=reg85+reg79; sollicitation[indices[3]+1]+=reg79;
    reg46=reg46+reg56; sollicitation[indices[1]+0]+=reg46; reg85=reg80+reg85; sollicitation[indices[1]+1]+=reg85; reg83=reg76+reg83;
    sollicitation[indices[1]+2]+=reg83; reg77=reg56+reg77; sollicitation[indices[3]+0]+=reg77; reg62=reg74+reg62; sollicitation[indices[2]+0]+=reg62;
    reg82=reg32+reg82; sollicitation[indices[2]+1]+=reg82; reg84=reg50+reg84; sollicitation[indices[2]+2]+=reg84;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[1]; T reg1=0.21132486540518713447*elem.pos(3)[1]; T reg2=0.21132486540518713447*elem.pos(0)[0]; T reg3=0.21132486540518713447*elem.pos(3)[0]; T reg4=0.78867513459481286553*elem.pos(0)[0];
    T reg5=0.78867513459481286553*elem.pos(2)[0]; T reg6=reg1-reg0; T reg7=reg3-reg2; T reg8=0.78867513459481286553*elem.pos(2)[1]; T reg9=0.78867513459481286553*elem.pos(0)[1];
    T reg10=0.21132486540518713447*elem.pos(3)[2]; T reg11=0.21132486540518713447*elem.pos(0)[2]; T reg12=0.78867513459481286553*elem.pos(3)[0]; T reg13=0.78867513459481286553*elem.pos(3)[1]; T reg14=0.78867513459481286553*elem.pos(3)[2];
    reg7=reg7+reg5; T reg15=reg13-reg9; T reg16=0.78867513459481286553*elem.pos(1)[0]; T reg17=reg12-reg4; T reg18=0.21132486540518713447*elem.pos(2)[0];
    reg6=reg6+reg8; T reg19=0.21132486540518713447*elem.pos(2)[1]; T reg20=0.78867513459481286553*elem.pos(0)[2]; T reg21=0.78867513459481286553*elem.pos(1)[1]; T reg22=reg10-reg11;
    T reg23=0.78867513459481286553*elem.pos(2)[2]; T reg24=0.21132486540518713447*elem.pos(1)[0]; reg7=reg7-reg16; reg6=reg6-reg21; T reg25=0.78867513459481286553*elem.pos(1)[2];
    T reg26=0.21132486540518713447*elem.pos(1)[1]; T reg27=reg14-reg20; T reg28=0.21132486540518713447*elem.pos(2)[2]; reg15=reg19+reg15; reg22=reg22+reg23;
    reg17=reg18+reg17; reg27=reg28+reg27; reg22=reg22-reg25; T reg29=pow(reg6,2); T reg30=0.21132486540518713447*elem.pos(1)[2];
    T reg31=pow(reg7,2); reg17=reg17-reg24; reg15=reg15-reg26; reg27=reg27-reg30; reg29=reg31+reg29;
    reg31=pow(reg17,2); T reg32=pow(reg22,2); T reg33=pow(reg15,2); T reg34=pow(reg27,2); reg33=reg31+reg33;
    reg31=reg2+reg12; reg32=reg29+reg32; reg29=reg0+reg13; T reg35=reg1+reg9; T reg36=reg3+reg4;
    reg29=reg8-reg29; reg31=reg5-reg31; T reg37=reg10+reg20; T reg38=reg11+reg14; reg34=reg33+reg34;
    reg36=reg18-reg36; reg32=pow(reg32,0.5); reg35=reg19-reg35; reg38=reg23-reg38; reg36=reg16+reg36;
    reg29=reg29+reg26; reg35=reg21+reg35; reg31=reg31+reg24; reg37=reg28-reg37; reg33=reg7/reg32;
    T reg39=reg6/reg32; reg34=pow(reg34,0.5); T reg40=reg15/reg34; reg37=reg25+reg37; T reg41=reg39*reg35;
    reg38=reg38+reg30; T reg42=reg33*reg36; T reg43=reg17/reg34; T reg44=reg39*reg29; reg32=reg22/reg32;
    T reg45=reg33*reg31; reg44=reg45+reg44; reg45=reg32*reg38; reg34=reg27/reg34; T reg46=reg31*reg43;
    T reg47=reg29*reg40; reg41=reg42+reg41; reg42=reg32*reg37; T reg48=reg35*reg40; T reg49=reg36*reg43;
    reg47=reg46+reg47; reg46=reg38*reg34; reg45=reg44+reg45; reg42=reg41+reg42; reg41=reg33*reg45;
    reg49=reg48+reg49; reg44=reg37*reg34; reg48=reg39*reg45; T reg50=reg33*reg42; reg46=reg47+reg46;
    reg47=reg39*reg42; reg50=reg36-reg50; reg48=reg29-reg48; T reg51=reg32*reg45; T reg52=reg43*reg46;
    reg44=reg49+reg44; reg41=reg31-reg41; reg49=reg32*reg42; T reg53=reg40*reg46; reg47=reg35-reg47;
    T reg54=pow(reg47,2); reg49=reg37-reg49; T reg55=reg43*reg44; T reg56=reg40*reg44; T reg57=pow(reg50,2);
    reg51=reg38-reg51; T reg58=pow(reg48,2); reg52=reg31-reg52; reg53=reg29-reg53; T reg59=reg34*reg46;
    T reg60=pow(reg41,2); reg54=reg57+reg54; reg59=reg38-reg59; reg57=pow(reg53,2); T reg61=pow(reg52,2);
    T reg62=pow(reg49,2); T reg63=reg34*reg44; reg55=reg36-reg55; T reg64=pow(reg51,2); reg58=reg60+reg58;
    reg56=reg35-reg56; reg64=reg58+reg64; reg63=reg37-reg63; reg58=pow(reg56,2); reg60=pow(reg55,2);
    reg62=reg54+reg62; reg54=pow(reg59,2); reg57=reg61+reg57; reg64=pow(reg64,0.5); reg61=pow(reg63,2);
    reg58=reg60+reg58; reg62=pow(reg62,0.5); reg54=reg57+reg54; reg47=reg47/reg62; reg50=reg50/reg62;
    reg61=reg58+reg61; reg62=reg49/reg62; reg54=pow(reg54,0.5); reg51=reg51/reg64; reg48=reg48/reg64;
    reg64=reg41/reg64; reg41=reg32*reg50; reg49=reg32*reg47; reg57=reg39*reg62; reg58=reg6*reg47;
    reg60=reg7*reg50; T reg65=reg33*reg62; reg61=pow(reg61,0.5); T reg66=reg33*reg47; T reg67=reg39*reg50;
    reg59=reg59/reg54; reg53=reg53/reg54; reg54=reg52/reg54; reg52=reg7*reg64; T reg68=reg39*reg64;
    T reg69=reg33*reg48; T reg70=reg6*reg48; reg50=reg36*reg50; reg47=reg35*reg47; T reg71=reg29*reg48;
    T reg72=reg31*reg64; T reg73=reg33*reg51; reg64=reg32*reg64; reg6=reg6*reg39; reg33=reg7*reg33;
    reg48=reg32*reg48; reg39=reg39*reg51; reg70=reg52+reg70; reg7=reg22*reg51; reg52=reg40*reg59;
    T reg74=reg17*reg43; T reg75=reg15*reg40; reg51=reg38*reg51; reg71=reg72+reg71; reg72=reg15*reg53;
    reg32=reg22*reg32; reg6=reg33+reg6; reg33=reg17*reg54; reg63=reg63/reg61; reg29=reg29*reg53;
    reg31=reg31*reg54; reg58=reg60+reg58; reg22=reg22*reg62; reg60=reg40*reg54; reg56=reg56/reg61;
    T reg76=reg43*reg53; reg62=reg37*reg62; reg47=reg50+reg47; reg49=reg57-reg49; reg65=reg41-reg65;
    reg41=reg43*reg59; reg68=reg69-reg68; reg61=reg55/reg61; reg67=reg66-reg67; reg54=reg34*reg54;
    reg73=reg64-reg73; reg53=reg34*reg53; reg48=reg39-reg48; reg39=reg34*reg61; reg15=reg15*reg56;
    reg60=reg76-reg60; reg29=reg31+reg29; reg38=reg38*reg59; reg31=reg40*reg63; reg50=reg43*reg56;
    reg53=reg52-reg53; reg43=reg43*reg63; reg41=reg54-reg41; reg72=reg33+reg72; reg40=reg40*reg61;
    reg59=reg27*reg59; reg33=reg34*reg56; reg56=reg35*reg56; reg62=reg47+reg62; reg22=reg58+reg22;
    reg36=reg36*reg61; reg49=skin_elem.p*reg49; reg65=skin_elem.p*reg65; reg68=skin_elem.p*reg68; reg67=skin_elem.p*reg67;
    reg73=skin_elem.p*reg73; reg48=skin_elem.p*reg48; reg7=reg70+reg7; reg75=reg74+reg75; reg34=reg27*reg34;
    reg51=reg71+reg51; reg32=reg6+reg32; reg61=reg17*reg61; reg56=reg36+reg56; reg33=reg31-reg33;
    reg27=reg27*reg63; reg15=reg61+reg15; reg63=reg37*reg63; reg6=0.6220084679281461892*reg49; reg17=0.16666666666666667632*reg48;
    reg31=0.6220084679281461892*skin_elem.f_surf[2]; reg35=0.044658198738520458147*reg67; reg36=0.16666666666666667632*reg73; reg37=0.6220084679281461892*reg65; reg47=0.16666666666666667632*reg67;
    reg52=0.16666666666666667632*skin_elem.f_surf[2]; reg54=0.044658198738520458147*reg68; reg55=0.044658198738520458147*skin_elem.f_surf[2]; reg57=0.16666666666666667632*reg68; reg58=0.6220084679281461892*skin_elem.f_surf[1];
    reg61=0.6220084679281461892*reg67; reg64=0.16666666666666667632*reg65; reg66=0.16666666666666667632*skin_elem.f_surf[1]; reg69=0.044658198738520458147*reg73; reg70=0.16666666666666667632*reg49;
    reg71=0.16666666666666667632*skin_elem.f_surf[0]; reg74=0.6220084679281461892*reg48; reg40=reg50-reg40; reg43=reg39-reg43; reg39=0.6220084679281461892*skin_elem.f_surf[0];
    reg50=0.6220084679281461892*reg68; reg38=reg29+reg38; reg59=reg72+reg59; reg7=reg45*reg7; reg29=0.044658198738520458147*reg49;
    reg53=skin_elem.p*reg53; reg41=skin_elem.p*reg41; reg60=skin_elem.p*reg60; reg22=reg42*reg22; reg51=reg32*reg51;
    reg62=reg32*reg62; reg32=0.6220084679281461892*reg73; reg42=0.044658198738520458147*skin_elem.f_surf[1]; reg45=0.044658198738520458147*reg48; reg34=reg75+reg34;
    reg72=0.044658198738520458147*reg65; reg75=0.044658198738520458147*skin_elem.f_surf[0]; reg64=reg66+reg64; reg76=0.044658198738520458147*reg60; reg7=reg51-reg7;
    reg61=reg31+reg61; reg51=0.16666666666666667632*reg41; T reg77=0.6220084679281461892*reg53; reg57=reg52+reg57; T reg78=0.6220084679281461892*reg60;
    reg47=reg52+reg47; T reg79=0.6220084679281461892*reg41; reg37=reg58+reg37; reg36=reg66+reg36; T reg80=0.044658198738520458147*reg41;
    T reg81=0.16666666666666667632*reg60; reg29=reg75+reg29; reg54=reg55+reg54; reg63=reg56+reg63; reg72=reg42+reg72;
    reg45=reg75+reg45; reg32=reg58+reg32; reg27=reg15+reg27; reg6=reg39+reg6; reg74=reg39+reg74;
    reg17=reg71+reg17; reg15=0.16666666666666667632*reg53; reg33=skin_elem.p*reg33; reg43=skin_elem.p*reg43; reg35=reg55+reg35;
    reg59=reg46*reg59; reg40=skin_elem.p*reg40; reg38=reg34*reg38; reg70=reg71+reg70; reg50=reg31+reg50;
    reg69=reg42+reg69; reg46=0.044658198738520458147*reg53; reg22=reg62-reg22; reg36=reg7*reg36; reg56=0.16666666666666667632*reg33;
    reg6=reg22*reg6; reg46=reg75+reg46; reg62=0.044658198738520458147*reg33; reg74=reg7*reg74; reg32=reg7*reg32;
    T reg82=0.044658198738520458147*reg43; reg77=reg39+reg77; reg72=reg22*reg72; T reg83=0.16666666666666667632*reg40; reg76=reg55+reg76;
    reg50=reg7*reg50; reg61=reg22*reg61; reg57=reg7*reg57; T reg84=0.044658198738520458147*reg40; reg79=reg58+reg79;
    T reg85=0.16666666666666667632*reg43; reg80=reg42+reg80; reg29=reg22*reg29; reg37=reg22*reg37; reg27=reg44*reg27;
    reg54=reg7*reg54; reg63=reg34*reg63; reg47=reg22*reg47; reg70=reg22*reg70; reg78=reg31+reg78;
    reg45=reg45*reg7; reg81=reg52+reg81; reg15=reg15+reg71; reg69=reg7*reg69; reg59=reg38-reg59;
    reg35=reg22*reg35; reg34=0.6220084679281461892*reg43; reg38=0.6220084679281461892*reg40; reg64=reg22*reg64; reg44=0.6220084679281461892*reg33;
    reg17=reg7*reg17; reg51=reg66+reg51; reg76=reg59*reg76; reg83=reg52+reg83; reg72=0.25*reg72;
    reg69=0.25*reg69; reg61=0.25*reg61; reg64=0.25*reg64; reg45=0.25*reg45; reg27=reg63-reg27;
    reg74=0.25*reg74; reg62=reg75+reg62; reg70=0.25*reg70; reg32=0.25*reg32; reg82=reg42+reg82;
    reg77=reg59*reg77; reg15=reg15*reg59; reg78=reg59*reg78; reg50=0.25*reg50; reg44=reg39+reg44;
    reg84=reg55+reg84; reg29=0.25*reg29; reg46=reg59*reg46; reg35=0.25*reg35; reg80=reg59*reg80;
    reg38=reg31+reg38; reg79=reg59*reg79; reg36=0.25*reg36; reg85=reg66+reg85; reg6=0.25*reg6;
    reg56=reg71+reg56; reg81=reg59*reg81; reg37=0.25*reg37; reg34=reg58+reg34; reg17=0.25*reg17;
    reg54=0.25*reg54; reg51=reg59*reg51; reg57=0.25*reg57; reg47=0.25*reg47; reg46=0.25*reg46;
    reg81=0.25*reg81; reg82=reg27*reg82; reg56=reg27*reg56; reg77=0.25*reg77; reg15=0.25*reg15;
    reg50=reg47+reg50; reg6=reg17+reg6; reg38=reg27*reg38; reg84=reg27*reg84; reg29=reg17+reg29;
    reg44=reg44*reg27; reg78=0.25*reg78; reg69=reg69+reg64; reg61=reg57+reg61; reg51=0.25*reg51;
    reg34=reg27*reg34; reg76=0.25*reg76; reg72=reg36+reg72; reg85=reg27*reg85; reg83=reg27*reg83;
    reg35=reg57+reg35; reg80=0.25*reg80; reg37=reg36+reg37; reg74=reg70+reg74; reg62=reg27*reg62;
    reg47=reg54+reg47; reg45=reg70+reg45; reg79=0.25*reg79; reg32=reg64+reg32; reg77=reg29+reg77;
    reg79=reg72+reg79; reg78=reg35+reg78; reg47=reg47+reg81; reg38=0.25*reg38; reg46=reg6+reg46;
    reg56=0.25*reg56; reg34=0.25*reg34; reg80=reg37+reg80; reg85=0.25*reg85; reg69=reg69+reg51;
    reg76=reg61+reg76; reg83=0.25*reg83; reg74=reg15+reg74; reg62=0.25*reg62; reg15=reg45+reg15;
    reg44=0.25*reg44; reg32=reg51+reg32; reg82=0.25*reg82; reg50=reg81+reg50; reg84=0.25*reg84;
    reg38=reg47+reg38; sollicitation[indices[0]+2]+=reg38; reg44=reg15+reg44; sollicitation[indices[0]+0]+=reg44; reg34=reg69+reg34;
    sollicitation[indices[0]+1]+=reg34; reg78=reg83+reg78; sollicitation[indices[3]+2]+=reg78; reg79=reg85+reg79; sollicitation[indices[3]+1]+=reg79;
    reg46=reg46+reg56; sollicitation[indices[1]+0]+=reg46; reg85=reg80+reg85; sollicitation[indices[1]+1]+=reg85; reg83=reg76+reg83;
    sollicitation[indices[1]+2]+=reg83; reg77=reg56+reg77; sollicitation[indices[3]+0]+=reg77; reg62=reg74+reg62; sollicitation[indices[2]+0]+=reg62;
    reg82=reg32+reg82; sollicitation[indices[2]+1]+=reg82; reg84=reg50+reg84; sollicitation[indices[2]+2]+=reg84;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(4)[1]; T reg1=0.21132486540518713447*elem.pos(5)[1]; T reg2=0.21132486540518713447*elem.pos(4)[0]; T reg3=0.21132486540518713447*elem.pos(5)[0]; T reg4=0.78867513459481286553*elem.pos(6)[0];
    T reg5=0.78867513459481286553*elem.pos(6)[1]; T reg6=0.78867513459481286553*elem.pos(5)[0]; T reg7=0.78867513459481286553*elem.pos(4)[0]; T reg8=0.21132486540518713447*elem.pos(4)[2]; T reg9=0.21132486540518713447*elem.pos(5)[2];
    T reg10=0.78867513459481286553*elem.pos(5)[1]; T reg11=reg1-reg0; T reg12=0.78867513459481286553*elem.pos(4)[1]; T reg13=reg3-reg2; T reg14=0.78867513459481286553*elem.pos(7)[0];
    reg11=reg11+reg5; T reg15=0.78867513459481286553*elem.pos(7)[1]; reg13=reg4+reg13; T reg16=reg9-reg8; T reg17=0.78867513459481286553*elem.pos(6)[2];
    T reg18=0.21132486540518713447*elem.pos(6)[0]; T reg19=0.78867513459481286553*elem.pos(5)[2]; T reg20=reg6-reg7; T reg21=reg10-reg12; T reg22=0.78867513459481286553*elem.pos(4)[2];
    T reg23=0.21132486540518713447*elem.pos(6)[1]; T reg24=0.21132486540518713447*elem.pos(6)[2]; reg13=reg13-reg14; reg11=reg11-reg15; reg16=reg16+reg17;
    T reg25=0.78867513459481286553*elem.pos(7)[2]; T reg26=0.21132486540518713447*elem.pos(7)[0]; T reg27=0.21132486540518713447*elem.pos(7)[1]; reg20=reg18+reg20; reg21=reg23+reg21;
    T reg28=reg19-reg22; T reg29=pow(reg13,2); T reg30=pow(reg11,2); reg16=reg16-reg25; reg28=reg24+reg28;
    reg21=reg21-reg27; reg20=reg20-reg26; T reg31=0.21132486540518713447*elem.pos(7)[2]; T reg32=pow(reg16,2); reg28=reg28-reg31;
    T reg33=pow(reg21,2); T reg34=pow(reg20,2); reg30=reg29+reg30; reg29=reg0+reg10; T reg35=reg12+reg1;
    T reg36=reg2+reg6; T reg37=reg7+reg3; reg33=reg34+reg33; reg34=pow(reg28,2); reg32=reg30+reg32;
    reg36=reg4-reg36; reg32=pow(reg32,0.5); reg30=reg22+reg9; reg29=reg5-reg29; T reg38=reg8+reg19;
    reg35=reg23-reg35; reg34=reg33+reg34; reg37=reg18-reg37; reg37=reg37+reg14; reg33=reg13/reg32;
    T reg39=reg11/reg32; reg36=reg36+reg26; reg29=reg29+reg27; reg38=reg17-reg38; reg34=pow(reg34,0.5);
    reg30=reg24-reg30; reg35=reg35+reg15; reg30=reg30+reg25; reg32=reg16/reg32; T reg40=reg33*reg36;
    T reg41=reg39*reg29; reg38=reg38+reg31; T reg42=reg20/reg34; T reg43=reg21/reg34; T reg44=reg35*reg39;
    T reg45=reg37*reg33; reg41=reg40+reg41; reg40=reg32*reg38; T reg46=reg30*reg32; reg44=reg45+reg44;
    reg45=reg36*reg42; T reg47=reg29*reg43; reg34=reg28/reg34; reg40=reg41+reg40; reg44=reg46+reg44;
    reg41=reg38*reg34; reg47=reg45+reg47; reg45=reg35*reg43; reg46=reg37*reg42; T reg48=reg39*reg40;
    reg46=reg45+reg46; reg45=reg30*reg34; reg41=reg47+reg41; reg47=reg33*reg40; T reg49=reg44*reg39;
    T reg50=reg44*reg33; T reg51=reg42*reg41; T reg52=reg43*reg41; reg49=reg35-reg49; reg47=reg36-reg47;
    reg45=reg46+reg45; reg50=reg37-reg50; reg46=reg32*reg40; reg48=reg29-reg48; T reg53=reg44*reg32;
    T reg54=pow(reg50,2); reg46=reg38-reg46; T reg55=reg34*reg41; T reg56=pow(reg49,2); reg52=reg29-reg52;
    reg51=reg36-reg51; reg53=reg30-reg53; T reg57=pow(reg47,2); T reg58=reg42*reg45; T reg59=reg43*reg45;
    T reg60=pow(reg48,2); reg60=reg57+reg60; reg57=reg34*reg45; T reg61=pow(reg53,2); reg55=reg38-reg55;
    T reg62=pow(reg52,2); reg56=reg54+reg56; reg58=reg37-reg58; reg54=pow(reg46,2); T reg63=pow(reg51,2);
    reg59=reg35-reg59; T reg64=pow(reg55,2); reg56=reg61+reg56; reg54=reg60+reg54; reg57=reg30-reg57;
    reg62=reg63+reg62; reg60=pow(reg58,2); reg61=pow(reg59,2); reg54=pow(reg54,0.5); reg63=pow(reg57,2);
    reg64=reg62+reg64; reg56=pow(reg56,0.5); reg61=reg60+reg61; reg46=reg46/reg54; reg49=reg49/reg56;
    reg50=reg50/reg56; reg47=reg47/reg54; reg56=reg53/reg56; reg64=pow(reg64,0.5); reg63=reg61+reg63;
    reg54=reg48/reg54; reg48=reg50*reg37; reg51=reg51/reg64; reg53=reg54*reg33; reg60=reg47*reg36;
    reg61=reg47*reg39; reg62=reg49*reg35; T reg65=reg54*reg11; T reg66=reg47*reg13; T reg67=reg49*reg32;
    T reg68=reg56*reg39; T reg69=reg54*reg29; T reg70=reg56*reg33; T reg71=reg50*reg32; reg63=pow(reg63,0.5);
    reg47=reg47*reg32; T reg72=reg46*reg33; T reg73=reg11*reg39; T reg74=reg13*reg33; reg13=reg50*reg13;
    reg11=reg49*reg11; T reg75=reg46*reg39; reg52=reg52/reg64; reg39=reg50*reg39; reg33=reg49*reg33;
    reg54=reg54*reg32; reg64=reg55/reg64; reg49=reg42*reg52; reg50=reg21*reg52; reg55=reg42*reg64;
    T reg76=reg34*reg51; T reg77=reg20*reg51; T reg78=reg43*reg51; reg29=reg29*reg52; reg51=reg36*reg51;
    reg36=reg43*reg64; reg57=reg57/reg63; reg59=reg59/reg63; reg63=reg58/reg63; reg58=reg21*reg43;
    reg52=reg34*reg52; T reg79=reg46*reg38; reg72=reg47-reg72; reg46=reg46*reg16; reg66=reg65+reg66;
    reg60=reg69+reg60; reg54=reg75-reg54; reg61=reg53-reg61; reg62=reg48+reg62; reg47=reg30*reg56;
    reg73=reg74+reg73; reg32=reg16*reg32; reg11=reg13+reg11; reg16=reg56*reg16; reg13=reg20*reg42;
    reg39=reg33-reg39; reg70=reg71-reg70; reg67=reg68-reg67; reg61=skin_elem.p*reg61; reg78=reg49-reg78;
    reg79=reg60+reg79; reg55=reg76-reg55; reg33=reg34*reg59; reg48=reg43*reg57; reg52=reg36-reg52;
    reg36=reg42*reg57; reg49=reg34*reg63; reg43=reg43*reg63; reg42=reg42*reg59; reg21=reg21*reg59;
    reg20=reg20*reg63; reg63=reg37*reg63; reg59=reg35*reg59; reg34=reg28*reg34; reg58=reg13+reg58;
    reg38=reg38*reg64; reg67=skin_elem.p*reg67; reg29=reg51+reg29; reg54=skin_elem.p*reg54; reg46=reg66+reg46;
    reg70=skin_elem.p*reg70; reg39=skin_elem.p*reg39; reg32=reg73+reg32; reg72=skin_elem.p*reg72; reg47=reg62+reg47;
    reg50=reg77+reg50; reg64=reg28*reg64; reg16=reg11+reg16; reg28=reg28*reg57; reg43=reg42-reg43;
    reg21=reg20+reg21; reg16=reg44*reg16; reg11=0.16666666666666667632*reg39; reg13=0.6220084679281461892*reg39; reg34=reg58+reg34;
    reg36=reg49-reg36; reg33=reg48-reg33; reg20=0.044658198738520458147*reg61; reg35=0.16666666666666667632*reg61; reg37=0.044658198738520458147*reg54;
    reg42=0.044658198738520458147*reg39; reg44=0.16666666666666667632*reg67; reg48=0.6220084679281461892*reg70; reg49=0.6220084679281461892*reg54; reg51=0.16666666666666667632*reg70;
    reg53=0.6220084679281461892*reg67; reg56=0.6220084679281461892*reg72; reg58=0.6220084679281461892*reg61; reg60=0.044658198738520458147*reg72; reg62=0.044658198738520458147*reg67;
    reg64=reg50+reg64; reg78=skin_elem.p*reg78; reg50=0.16666666666666667632*reg54; reg55=skin_elem.p*reg55; reg38=reg29+reg38;
    reg52=skin_elem.p*reg52; reg29=0.16666666666666667632*reg72; reg65=0.6220084679281461892*skin_elem.f_surf[2]; reg66=0.16666666666666667632*skin_elem.f_surf[2]; reg68=0.044658198738520458147*skin_elem.f_surf[2];
    reg69=0.6220084679281461892*skin_elem.f_surf[1]; reg71=0.16666666666666667632*skin_elem.f_surf[1]; reg73=0.16666666666666667632*skin_elem.f_surf[0]; reg74=0.044658198738520458147*reg70; reg57=reg30*reg57;
    reg59=reg63+reg59; reg47=reg32*reg47; reg32=reg79*reg32; reg30=0.044658198738520458147*skin_elem.f_surf[1]; reg63=0.6220084679281461892*skin_elem.f_surf[0];
    reg75=0.044658198738520458147*skin_elem.f_surf[0]; reg40=reg46*reg40; reg50=reg73+reg50; reg60=reg30+reg60; reg56=reg69+reg56;
    reg11=reg66+reg11; reg29=reg71+reg29; reg46=0.16666666666666667632*reg78; reg51=reg71+reg51; reg49=reg63+reg49;
    reg76=0.16666666666666667632*reg55; reg20=reg68+reg20; reg62=reg75+reg62; reg77=0.6220084679281461892*reg78; reg79=0.6220084679281461892*reg55;
    reg42=reg68+reg42; reg74=reg30+reg74; reg35=reg66+reg35; T reg80=0.6220084679281461892*reg52; T reg81=0.044658198738520458147*reg55;
    reg43=skin_elem.p*reg43; reg28=reg21+reg28; reg36=skin_elem.p*reg36; reg33=skin_elem.p*reg33; reg37=reg75+reg37;
    reg16=reg47-reg16; reg57=reg59+reg57; reg48=reg69+reg48; reg44=reg73+reg44; reg13=reg65+reg13;
    reg21=0.044658198738520458147*reg52; reg47=0.16666666666666667632*reg52; reg59=0.044658198738520458147*reg78; reg53=reg63+reg53; reg38=reg34*reg38;
    reg40=reg32-reg40; reg58=reg65+reg58; reg64=reg41*reg64; reg13=reg16*reg13; reg32=0.16666666666666667632*reg33;
    reg29=reg40*reg29; reg80=reg63+reg80; reg62=reg16*reg62; reg74=reg16*reg74; reg59=reg68+reg59;
    reg81=reg30+reg81; reg79=reg69+reg79; reg41=0.16666666666666667632*reg36; reg35=reg40*reg35; reg48=reg16*reg48;
    reg42=reg16*reg42; reg77=reg65+reg77; T reg82=0.16666666666666667632*reg43; reg21=reg75+reg21; reg49=reg40*reg49;
    T reg83=0.044658198738520458147*reg33; reg53=reg16*reg53; T reg84=0.044658198738520458147*reg43; reg58=reg40*reg58; T reg85=0.044658198738520458147*reg36;
    reg56=reg40*reg56; reg11=reg16*reg11; reg28=reg45*reg28; reg76=reg71+reg76; reg45=0.6220084679281461892*reg33;
    reg37=reg40*reg37; reg57=reg34*reg57; reg34=0.6220084679281461892*reg36; T reg86=0.6220084679281461892*reg43; reg20=reg40*reg20;
    reg51=reg16*reg51; reg46=reg66+reg46; reg64=reg38-reg64; reg44=reg16*reg44; reg47=reg73+reg47;
    reg60=reg40*reg60; reg50=reg40*reg50; reg47=reg64*reg47; reg53=0.25*reg53; reg42=0.25*reg42;
    reg34=reg69+reg34; reg35=0.25*reg35; reg44=0.25*reg44; reg77=reg64*reg77; reg76=reg64*reg76;
    reg82=reg66+reg82; reg84=reg68+reg84; reg58=0.25*reg58; reg51=0.25*reg51; reg49=0.25*reg49;
    reg45=reg63+reg45; reg83=reg75+reg83; reg85=reg30+reg85; reg60=0.25*reg60; reg56=0.25*reg56;
    reg50=0.25*reg50; reg59=reg64*reg59; reg62=0.25*reg62; reg86=reg65+reg86; reg80=reg64*reg80;
    reg13=0.25*reg13; reg32=reg73+reg32; reg81=reg64*reg81; reg28=reg57-reg28; reg46=reg64*reg46;
    reg29=0.25*reg29; reg21=reg64*reg21; reg41=reg71+reg41; reg37=0.25*reg37; reg79=reg64*reg79;
    reg20=0.25*reg20; reg48=0.25*reg48; reg74=0.25*reg74; reg11=0.25*reg11; reg58=reg11+reg58;
    reg81=0.25*reg81; reg48=reg29+reg48; reg84=reg28*reg84; reg45=reg28*reg45; reg53=reg50+reg53;
    reg13=reg35+reg13; reg85=reg28*reg85; reg21=0.25*reg21; reg56=reg51+reg56; reg37=reg37+reg44;
    reg59=0.25*reg59; reg47=0.25*reg47; reg86=reg28*reg86; reg77=0.25*reg77; reg82=reg28*reg82;
    reg76=0.25*reg76; reg41=reg28*reg41; reg79=0.25*reg79; reg51=reg60+reg51; reg49=reg44+reg49;
    reg74=reg29+reg74; reg62=reg50+reg62; reg11=reg20+reg11; reg83=reg28*reg83; reg46=0.25*reg46;
    reg42=reg35+reg42; reg34=reg28*reg34; reg32=reg28*reg32; reg80=0.25*reg80; reg59=reg13+reg59;
    reg41=0.25*reg41; reg21=reg53+reg21; reg80=reg62+reg80; reg79=reg74+reg79; reg11=reg11+reg46;
    reg32=0.25*reg32; reg81=reg48+reg81; reg34=0.25*reg34; reg51=reg51+reg76; reg84=0.25*reg84;
    reg77=reg42+reg77; reg37=reg37+reg47; reg58=reg46+reg58; reg82=0.25*reg82; reg49=reg47+reg49;
    reg85=0.25*reg85; reg83=0.25*reg83; reg45=0.25*reg45; reg56=reg76+reg56; reg86=0.25*reg86;
    reg59=reg59+reg82; sollicitation[indices[7]+2]+=reg59; reg86=reg11+reg86; sollicitation[indices[4]+2]+=reg86; reg81=reg41+reg81;
    sollicitation[indices[7]+1]+=reg81; reg80=reg80+reg32; sollicitation[indices[5]+0]+=reg80; reg21=reg32+reg21; sollicitation[indices[7]+0]+=reg21;
    reg41=reg79+reg41; sollicitation[indices[5]+1]+=reg41; reg34=reg51+reg34; sollicitation[indices[4]+1]+=reg34; reg84=reg58+reg84;
    sollicitation[indices[6]+2]+=reg84; reg82=reg77+reg82; sollicitation[indices[5]+2]+=reg82; reg85=reg56+reg85; sollicitation[indices[6]+1]+=reg85;
    reg83=reg49+reg83; sollicitation[indices[6]+0]+=reg83; reg45=reg37+reg45; sollicitation[indices[4]+0]+=reg45;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(4)[1]; T reg1=0.21132486540518713447*elem.pos(5)[1]; T reg2=0.21132486540518713447*elem.pos(4)[0]; T reg3=0.21132486540518713447*elem.pos(5)[0]; T reg4=0.78867513459481286553*elem.pos(6)[0];
    T reg5=0.78867513459481286553*elem.pos(6)[1]; T reg6=0.78867513459481286553*elem.pos(5)[0]; T reg7=0.78867513459481286553*elem.pos(4)[0]; T reg8=0.21132486540518713447*elem.pos(4)[2]; T reg9=0.21132486540518713447*elem.pos(5)[2];
    T reg10=0.78867513459481286553*elem.pos(5)[1]; T reg11=reg1-reg0; T reg12=0.78867513459481286553*elem.pos(4)[1]; T reg13=reg3-reg2; T reg14=0.78867513459481286553*elem.pos(7)[0];
    reg11=reg11+reg5; T reg15=0.78867513459481286553*elem.pos(7)[1]; reg13=reg4+reg13; T reg16=reg9-reg8; T reg17=0.78867513459481286553*elem.pos(6)[2];
    T reg18=0.21132486540518713447*elem.pos(6)[0]; T reg19=0.78867513459481286553*elem.pos(5)[2]; T reg20=reg6-reg7; T reg21=reg10-reg12; T reg22=0.78867513459481286553*elem.pos(4)[2];
    T reg23=0.21132486540518713447*elem.pos(6)[1]; T reg24=0.21132486540518713447*elem.pos(6)[2]; reg13=reg13-reg14; reg11=reg11-reg15; reg16=reg16+reg17;
    T reg25=0.78867513459481286553*elem.pos(7)[2]; T reg26=0.21132486540518713447*elem.pos(7)[0]; T reg27=0.21132486540518713447*elem.pos(7)[1]; reg20=reg18+reg20; reg21=reg23+reg21;
    T reg28=reg19-reg22; T reg29=pow(reg13,2); T reg30=pow(reg11,2); reg16=reg16-reg25; reg28=reg24+reg28;
    reg21=reg21-reg27; reg20=reg20-reg26; T reg31=0.21132486540518713447*elem.pos(7)[2]; T reg32=pow(reg16,2); reg28=reg28-reg31;
    T reg33=pow(reg21,2); T reg34=pow(reg20,2); reg30=reg29+reg30; reg29=reg0+reg10; T reg35=reg12+reg1;
    T reg36=reg2+reg6; T reg37=reg7+reg3; reg33=reg34+reg33; reg34=pow(reg28,2); reg32=reg30+reg32;
    reg36=reg4-reg36; reg32=pow(reg32,0.5); reg30=reg22+reg9; reg29=reg5-reg29; T reg38=reg8+reg19;
    reg35=reg23-reg35; reg34=reg33+reg34; reg37=reg18-reg37; reg37=reg37+reg14; reg33=reg13/reg32;
    T reg39=reg11/reg32; reg36=reg36+reg26; reg29=reg29+reg27; reg38=reg17-reg38; reg34=pow(reg34,0.5);
    reg30=reg24-reg30; reg35=reg35+reg15; reg30=reg30+reg25; reg32=reg16/reg32; T reg40=reg33*reg36;
    T reg41=reg39*reg29; reg38=reg38+reg31; T reg42=reg20/reg34; T reg43=reg21/reg34; T reg44=reg35*reg39;
    T reg45=reg37*reg33; reg41=reg40+reg41; reg40=reg32*reg38; T reg46=reg30*reg32; reg44=reg45+reg44;
    reg45=reg36*reg42; T reg47=reg29*reg43; reg34=reg28/reg34; reg40=reg41+reg40; reg44=reg46+reg44;
    reg41=reg38*reg34; reg47=reg45+reg47; reg45=reg35*reg43; reg46=reg37*reg42; T reg48=reg39*reg40;
    reg46=reg45+reg46; reg45=reg30*reg34; reg41=reg47+reg41; reg47=reg33*reg40; T reg49=reg44*reg39;
    T reg50=reg44*reg33; T reg51=reg42*reg41; T reg52=reg43*reg41; reg49=reg35-reg49; reg47=reg36-reg47;
    reg45=reg46+reg45; reg50=reg37-reg50; reg46=reg32*reg40; reg48=reg29-reg48; T reg53=reg44*reg32;
    T reg54=pow(reg50,2); reg46=reg38-reg46; T reg55=reg34*reg41; T reg56=pow(reg49,2); reg52=reg29-reg52;
    reg51=reg36-reg51; reg53=reg30-reg53; T reg57=pow(reg47,2); T reg58=reg42*reg45; T reg59=reg43*reg45;
    T reg60=pow(reg48,2); reg60=reg57+reg60; reg57=reg34*reg45; T reg61=pow(reg53,2); reg55=reg38-reg55;
    T reg62=pow(reg52,2); reg56=reg54+reg56; reg58=reg37-reg58; reg54=pow(reg46,2); T reg63=pow(reg51,2);
    reg59=reg35-reg59; T reg64=pow(reg55,2); reg56=reg61+reg56; reg54=reg60+reg54; reg57=reg30-reg57;
    reg62=reg63+reg62; reg60=pow(reg58,2); reg61=pow(reg59,2); reg54=pow(reg54,0.5); reg63=pow(reg57,2);
    reg64=reg62+reg64; reg56=pow(reg56,0.5); reg61=reg60+reg61; reg46=reg46/reg54; reg49=reg49/reg56;
    reg50=reg50/reg56; reg47=reg47/reg54; reg56=reg53/reg56; reg64=pow(reg64,0.5); reg63=reg61+reg63;
    reg54=reg48/reg54; reg48=reg50*reg37; reg51=reg51/reg64; reg53=reg54*reg33; reg60=reg47*reg36;
    reg61=reg47*reg39; reg62=reg49*reg35; T reg65=reg54*reg11; T reg66=reg47*reg13; T reg67=reg49*reg32;
    T reg68=reg56*reg39; T reg69=reg54*reg29; T reg70=reg56*reg33; T reg71=reg50*reg32; reg63=pow(reg63,0.5);
    reg47=reg47*reg32; T reg72=reg46*reg33; T reg73=reg11*reg39; T reg74=reg13*reg33; reg13=reg50*reg13;
    reg11=reg49*reg11; T reg75=reg46*reg39; reg52=reg52/reg64; reg39=reg50*reg39; reg33=reg49*reg33;
    reg54=reg54*reg32; reg64=reg55/reg64; reg49=reg42*reg52; reg50=reg21*reg52; reg55=reg42*reg64;
    T reg76=reg34*reg51; T reg77=reg20*reg51; T reg78=reg43*reg51; reg29=reg29*reg52; reg51=reg36*reg51;
    reg36=reg43*reg64; reg57=reg57/reg63; reg59=reg59/reg63; reg63=reg58/reg63; reg58=reg21*reg43;
    reg52=reg34*reg52; T reg79=reg46*reg38; reg72=reg47-reg72; reg46=reg46*reg16; reg66=reg65+reg66;
    reg60=reg69+reg60; reg54=reg75-reg54; reg61=reg53-reg61; reg62=reg48+reg62; reg47=reg30*reg56;
    reg73=reg74+reg73; reg32=reg16*reg32; reg11=reg13+reg11; reg16=reg56*reg16; reg13=reg20*reg42;
    reg39=reg33-reg39; reg70=reg71-reg70; reg67=reg68-reg67; reg61=skin_elem.p*reg61; reg78=reg49-reg78;
    reg79=reg60+reg79; reg55=reg76-reg55; reg33=reg34*reg59; reg48=reg43*reg57; reg52=reg36-reg52;
    reg36=reg42*reg57; reg49=reg34*reg63; reg43=reg43*reg63; reg42=reg42*reg59; reg21=reg21*reg59;
    reg20=reg20*reg63; reg63=reg37*reg63; reg59=reg35*reg59; reg34=reg28*reg34; reg58=reg13+reg58;
    reg38=reg38*reg64; reg67=skin_elem.p*reg67; reg29=reg51+reg29; reg54=skin_elem.p*reg54; reg46=reg66+reg46;
    reg70=skin_elem.p*reg70; reg39=skin_elem.p*reg39; reg32=reg73+reg32; reg72=skin_elem.p*reg72; reg47=reg62+reg47;
    reg50=reg77+reg50; reg64=reg28*reg64; reg16=reg11+reg16; reg28=reg28*reg57; reg43=reg42-reg43;
    reg21=reg20+reg21; reg16=reg44*reg16; reg11=0.16666666666666667632*reg39; reg13=0.6220084679281461892*reg39; reg34=reg58+reg34;
    reg36=reg49-reg36; reg33=reg48-reg33; reg20=0.044658198738520458147*reg61; reg35=0.16666666666666667632*reg61; reg37=0.044658198738520458147*reg54;
    reg42=0.044658198738520458147*reg39; reg44=0.16666666666666667632*reg67; reg48=0.6220084679281461892*reg70; reg49=0.6220084679281461892*reg54; reg51=0.16666666666666667632*reg70;
    reg53=0.6220084679281461892*reg67; reg56=0.6220084679281461892*reg72; reg58=0.6220084679281461892*reg61; reg60=0.044658198738520458147*reg72; reg62=0.044658198738520458147*reg67;
    reg64=reg50+reg64; reg78=skin_elem.p*reg78; reg50=0.16666666666666667632*reg54; reg55=skin_elem.p*reg55; reg38=reg29+reg38;
    reg52=skin_elem.p*reg52; reg29=0.16666666666666667632*reg72; reg65=0.6220084679281461892*skin_elem.f_surf[2]; reg66=0.16666666666666667632*skin_elem.f_surf[2]; reg68=0.044658198738520458147*skin_elem.f_surf[2];
    reg69=0.6220084679281461892*skin_elem.f_surf[1]; reg71=0.16666666666666667632*skin_elem.f_surf[1]; reg73=0.16666666666666667632*skin_elem.f_surf[0]; reg74=0.044658198738520458147*reg70; reg57=reg30*reg57;
    reg59=reg63+reg59; reg47=reg32*reg47; reg32=reg79*reg32; reg30=0.044658198738520458147*skin_elem.f_surf[1]; reg63=0.6220084679281461892*skin_elem.f_surf[0];
    reg75=0.044658198738520458147*skin_elem.f_surf[0]; reg40=reg46*reg40; reg50=reg73+reg50; reg60=reg30+reg60; reg56=reg69+reg56;
    reg11=reg66+reg11; reg29=reg71+reg29; reg46=0.16666666666666667632*reg78; reg51=reg71+reg51; reg49=reg63+reg49;
    reg76=0.16666666666666667632*reg55; reg20=reg68+reg20; reg62=reg75+reg62; reg77=0.6220084679281461892*reg78; reg79=0.6220084679281461892*reg55;
    reg42=reg68+reg42; reg74=reg30+reg74; reg35=reg66+reg35; T reg80=0.6220084679281461892*reg52; T reg81=0.044658198738520458147*reg55;
    reg43=skin_elem.p*reg43; reg28=reg21+reg28; reg36=skin_elem.p*reg36; reg33=skin_elem.p*reg33; reg37=reg75+reg37;
    reg16=reg47-reg16; reg57=reg59+reg57; reg48=reg69+reg48; reg44=reg73+reg44; reg13=reg65+reg13;
    reg21=0.044658198738520458147*reg52; reg47=0.16666666666666667632*reg52; reg59=0.044658198738520458147*reg78; reg53=reg63+reg53; reg38=reg34*reg38;
    reg40=reg32-reg40; reg58=reg65+reg58; reg64=reg41*reg64; reg13=reg16*reg13; reg32=0.16666666666666667632*reg33;
    reg29=reg40*reg29; reg80=reg63+reg80; reg62=reg16*reg62; reg74=reg16*reg74; reg59=reg68+reg59;
    reg81=reg30+reg81; reg79=reg69+reg79; reg41=0.16666666666666667632*reg36; reg35=reg40*reg35; reg48=reg16*reg48;
    reg42=reg16*reg42; reg77=reg65+reg77; T reg82=0.16666666666666667632*reg43; reg21=reg75+reg21; reg49=reg40*reg49;
    T reg83=0.044658198738520458147*reg33; reg53=reg16*reg53; T reg84=0.044658198738520458147*reg43; reg58=reg40*reg58; T reg85=0.044658198738520458147*reg36;
    reg56=reg40*reg56; reg11=reg16*reg11; reg28=reg45*reg28; reg76=reg71+reg76; reg45=0.6220084679281461892*reg33;
    reg37=reg40*reg37; reg57=reg34*reg57; reg34=0.6220084679281461892*reg36; T reg86=0.6220084679281461892*reg43; reg20=reg40*reg20;
    reg51=reg16*reg51; reg46=reg66+reg46; reg64=reg38-reg64; reg44=reg16*reg44; reg47=reg73+reg47;
    reg60=reg40*reg60; reg50=reg40*reg50; reg47=reg64*reg47; reg53=0.25*reg53; reg42=0.25*reg42;
    reg34=reg69+reg34; reg35=0.25*reg35; reg44=0.25*reg44; reg77=reg64*reg77; reg76=reg64*reg76;
    reg82=reg66+reg82; reg84=reg68+reg84; reg58=0.25*reg58; reg51=0.25*reg51; reg49=0.25*reg49;
    reg45=reg63+reg45; reg83=reg75+reg83; reg85=reg30+reg85; reg60=0.25*reg60; reg56=0.25*reg56;
    reg50=0.25*reg50; reg59=reg64*reg59; reg62=0.25*reg62; reg86=reg65+reg86; reg80=reg64*reg80;
    reg13=0.25*reg13; reg32=reg73+reg32; reg81=reg64*reg81; reg28=reg57-reg28; reg46=reg64*reg46;
    reg29=0.25*reg29; reg21=reg64*reg21; reg41=reg71+reg41; reg37=0.25*reg37; reg79=reg64*reg79;
    reg20=0.25*reg20; reg48=0.25*reg48; reg74=0.25*reg74; reg11=0.25*reg11; reg58=reg11+reg58;
    reg81=0.25*reg81; reg48=reg29+reg48; reg84=reg28*reg84; reg45=reg28*reg45; reg53=reg50+reg53;
    reg13=reg35+reg13; reg85=reg28*reg85; reg21=0.25*reg21; reg56=reg51+reg56; reg37=reg37+reg44;
    reg59=0.25*reg59; reg47=0.25*reg47; reg86=reg28*reg86; reg77=0.25*reg77; reg82=reg28*reg82;
    reg76=0.25*reg76; reg41=reg28*reg41; reg79=0.25*reg79; reg51=reg60+reg51; reg49=reg44+reg49;
    reg74=reg29+reg74; reg62=reg50+reg62; reg11=reg20+reg11; reg83=reg28*reg83; reg46=0.25*reg46;
    reg42=reg35+reg42; reg34=reg28*reg34; reg32=reg28*reg32; reg80=0.25*reg80; reg59=reg13+reg59;
    reg41=0.25*reg41; reg21=reg53+reg21; reg80=reg62+reg80; reg79=reg74+reg79; reg11=reg11+reg46;
    reg32=0.25*reg32; reg81=reg48+reg81; reg34=0.25*reg34; reg51=reg51+reg76; reg84=0.25*reg84;
    reg77=reg42+reg77; reg37=reg37+reg47; reg58=reg46+reg58; reg82=0.25*reg82; reg49=reg47+reg49;
    reg85=0.25*reg85; reg83=0.25*reg83; reg45=0.25*reg45; reg56=reg76+reg56; reg86=0.25*reg86;
    reg59=reg59+reg82; sollicitation[indices[7]+2]+=reg59; reg86=reg11+reg86; sollicitation[indices[4]+2]+=reg86; reg81=reg41+reg81;
    sollicitation[indices[7]+1]+=reg81; reg80=reg80+reg32; sollicitation[indices[5]+0]+=reg80; reg21=reg32+reg21; sollicitation[indices[7]+0]+=reg21;
    reg41=reg79+reg41; sollicitation[indices[5]+1]+=reg41; reg34=reg51+reg34; sollicitation[indices[4]+1]+=reg34; reg84=reg58+reg84;
    sollicitation[indices[6]+2]+=reg84; reg82=reg77+reg82; sollicitation[indices[5]+2]+=reg82; reg85=reg56+reg85; sollicitation[indices[6]+1]+=reg85;
    reg83=reg49+reg83; sollicitation[indices[6]+0]+=reg83; reg45=reg37+reg45; sollicitation[indices[4]+0]+=reg45;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(4)[1]; T reg1=0.21132486540518713447*elem.pos(5)[1]; T reg2=0.21132486540518713447*elem.pos(4)[0]; T reg3=0.21132486540518713447*elem.pos(5)[0]; T reg4=0.78867513459481286553*elem.pos(6)[0];
    T reg5=0.78867513459481286553*elem.pos(6)[1]; T reg6=0.78867513459481286553*elem.pos(5)[0]; T reg7=0.78867513459481286553*elem.pos(4)[0]; T reg8=0.21132486540518713447*elem.pos(4)[2]; T reg9=0.21132486540518713447*elem.pos(5)[2];
    T reg10=0.78867513459481286553*elem.pos(5)[1]; T reg11=reg1-reg0; T reg12=0.78867513459481286553*elem.pos(4)[1]; T reg13=reg3-reg2; T reg14=0.78867513459481286553*elem.pos(7)[0];
    reg11=reg11+reg5; T reg15=0.78867513459481286553*elem.pos(7)[1]; reg13=reg4+reg13; T reg16=reg9-reg8; T reg17=0.78867513459481286553*elem.pos(6)[2];
    T reg18=0.21132486540518713447*elem.pos(6)[0]; T reg19=0.78867513459481286553*elem.pos(5)[2]; T reg20=reg6-reg7; T reg21=reg10-reg12; T reg22=0.78867513459481286553*elem.pos(4)[2];
    T reg23=0.21132486540518713447*elem.pos(6)[1]; T reg24=0.21132486540518713447*elem.pos(6)[2]; reg13=reg13-reg14; reg11=reg11-reg15; reg16=reg16+reg17;
    T reg25=0.78867513459481286553*elem.pos(7)[2]; T reg26=0.21132486540518713447*elem.pos(7)[0]; T reg27=0.21132486540518713447*elem.pos(7)[1]; reg20=reg18+reg20; reg21=reg23+reg21;
    T reg28=reg19-reg22; T reg29=pow(reg13,2); T reg30=pow(reg11,2); reg16=reg16-reg25; reg28=reg24+reg28;
    reg21=reg21-reg27; reg20=reg20-reg26; T reg31=0.21132486540518713447*elem.pos(7)[2]; T reg32=pow(reg16,2); reg28=reg28-reg31;
    T reg33=pow(reg21,2); T reg34=pow(reg20,2); reg30=reg29+reg30; reg29=reg0+reg10; T reg35=reg12+reg1;
    T reg36=reg2+reg6; T reg37=reg7+reg3; reg33=reg34+reg33; reg34=pow(reg28,2); reg32=reg30+reg32;
    reg36=reg4-reg36; reg32=pow(reg32,0.5); reg30=reg22+reg9; reg29=reg5-reg29; T reg38=reg8+reg19;
    reg35=reg23-reg35; reg34=reg33+reg34; reg37=reg18-reg37; reg37=reg37+reg14; reg33=reg13/reg32;
    T reg39=reg11/reg32; reg36=reg36+reg26; reg29=reg29+reg27; reg38=reg17-reg38; reg34=pow(reg34,0.5);
    reg30=reg24-reg30; reg35=reg35+reg15; reg30=reg30+reg25; reg32=reg16/reg32; T reg40=reg33*reg36;
    T reg41=reg39*reg29; reg38=reg38+reg31; T reg42=reg20/reg34; T reg43=reg21/reg34; T reg44=reg35*reg39;
    T reg45=reg37*reg33; reg41=reg40+reg41; reg40=reg32*reg38; T reg46=reg30*reg32; reg44=reg45+reg44;
    reg45=reg36*reg42; T reg47=reg29*reg43; reg34=reg28/reg34; reg40=reg41+reg40; reg44=reg46+reg44;
    reg41=reg38*reg34; reg47=reg45+reg47; reg45=reg35*reg43; reg46=reg37*reg42; T reg48=reg39*reg40;
    reg46=reg45+reg46; reg45=reg30*reg34; reg41=reg47+reg41; reg47=reg33*reg40; T reg49=reg44*reg39;
    T reg50=reg44*reg33; T reg51=reg42*reg41; T reg52=reg43*reg41; reg49=reg35-reg49; reg47=reg36-reg47;
    reg45=reg46+reg45; reg50=reg37-reg50; reg46=reg32*reg40; reg48=reg29-reg48; T reg53=reg44*reg32;
    T reg54=pow(reg50,2); reg46=reg38-reg46; T reg55=reg34*reg41; T reg56=pow(reg49,2); reg52=reg29-reg52;
    reg51=reg36-reg51; reg53=reg30-reg53; T reg57=pow(reg47,2); T reg58=reg42*reg45; T reg59=reg43*reg45;
    T reg60=pow(reg48,2); reg60=reg57+reg60; reg57=reg34*reg45; T reg61=pow(reg53,2); reg55=reg38-reg55;
    T reg62=pow(reg52,2); reg56=reg54+reg56; reg58=reg37-reg58; reg54=pow(reg46,2); T reg63=pow(reg51,2);
    reg59=reg35-reg59; T reg64=pow(reg55,2); reg56=reg61+reg56; reg54=reg60+reg54; reg57=reg30-reg57;
    reg62=reg63+reg62; reg60=pow(reg58,2); reg61=pow(reg59,2); reg54=pow(reg54,0.5); reg63=pow(reg57,2);
    reg64=reg62+reg64; reg56=pow(reg56,0.5); reg61=reg60+reg61; reg46=reg46/reg54; reg49=reg49/reg56;
    reg50=reg50/reg56; reg47=reg47/reg54; reg56=reg53/reg56; reg64=pow(reg64,0.5); reg63=reg61+reg63;
    reg54=reg48/reg54; reg48=reg50*reg37; reg51=reg51/reg64; reg53=reg54*reg33; reg60=reg47*reg36;
    reg61=reg47*reg39; reg62=reg49*reg35; T reg65=reg54*reg11; T reg66=reg47*reg13; T reg67=reg49*reg32;
    T reg68=reg56*reg39; T reg69=reg54*reg29; T reg70=reg56*reg33; T reg71=reg50*reg32; reg63=pow(reg63,0.5);
    reg47=reg47*reg32; T reg72=reg46*reg33; T reg73=reg11*reg39; T reg74=reg13*reg33; reg13=reg50*reg13;
    reg11=reg49*reg11; T reg75=reg46*reg39; reg52=reg52/reg64; reg39=reg50*reg39; reg33=reg49*reg33;
    reg54=reg54*reg32; reg64=reg55/reg64; reg49=reg42*reg52; reg50=reg21*reg52; reg55=reg42*reg64;
    T reg76=reg34*reg51; T reg77=reg20*reg51; T reg78=reg43*reg51; reg29=reg29*reg52; reg51=reg36*reg51;
    reg36=reg43*reg64; reg57=reg57/reg63; reg59=reg59/reg63; reg63=reg58/reg63; reg58=reg21*reg43;
    reg52=reg34*reg52; T reg79=reg46*reg38; reg72=reg47-reg72; reg46=reg46*reg16; reg66=reg65+reg66;
    reg60=reg69+reg60; reg54=reg75-reg54; reg61=reg53-reg61; reg62=reg48+reg62; reg47=reg30*reg56;
    reg73=reg74+reg73; reg32=reg16*reg32; reg11=reg13+reg11; reg16=reg56*reg16; reg13=reg20*reg42;
    reg39=reg33-reg39; reg70=reg71-reg70; reg67=reg68-reg67; reg61=skin_elem.p*reg61; reg78=reg49-reg78;
    reg79=reg60+reg79; reg55=reg76-reg55; reg33=reg34*reg59; reg48=reg43*reg57; reg52=reg36-reg52;
    reg36=reg42*reg57; reg49=reg34*reg63; reg43=reg43*reg63; reg42=reg42*reg59; reg21=reg21*reg59;
    reg20=reg20*reg63; reg63=reg37*reg63; reg59=reg35*reg59; reg34=reg28*reg34; reg58=reg13+reg58;
    reg38=reg38*reg64; reg67=skin_elem.p*reg67; reg29=reg51+reg29; reg54=skin_elem.p*reg54; reg46=reg66+reg46;
    reg70=skin_elem.p*reg70; reg39=skin_elem.p*reg39; reg32=reg73+reg32; reg72=skin_elem.p*reg72; reg47=reg62+reg47;
    reg50=reg77+reg50; reg64=reg28*reg64; reg16=reg11+reg16; reg28=reg28*reg57; reg43=reg42-reg43;
    reg21=reg20+reg21; reg16=reg44*reg16; reg11=0.16666666666666667632*reg39; reg13=0.6220084679281461892*reg39; reg34=reg58+reg34;
    reg36=reg49-reg36; reg33=reg48-reg33; reg20=0.044658198738520458147*reg61; reg35=0.16666666666666667632*reg61; reg37=0.044658198738520458147*reg54;
    reg42=0.044658198738520458147*reg39; reg44=0.16666666666666667632*reg67; reg48=0.6220084679281461892*reg70; reg49=0.6220084679281461892*reg54; reg51=0.16666666666666667632*reg70;
    reg53=0.6220084679281461892*reg67; reg56=0.6220084679281461892*reg72; reg58=0.6220084679281461892*reg61; reg60=0.044658198738520458147*reg72; reg62=0.044658198738520458147*reg67;
    reg64=reg50+reg64; reg78=skin_elem.p*reg78; reg50=0.16666666666666667632*reg54; reg55=skin_elem.p*reg55; reg38=reg29+reg38;
    reg52=skin_elem.p*reg52; reg29=0.16666666666666667632*reg72; reg65=0.6220084679281461892*skin_elem.f_surf[2]; reg66=0.16666666666666667632*skin_elem.f_surf[2]; reg68=0.044658198738520458147*skin_elem.f_surf[2];
    reg69=0.6220084679281461892*skin_elem.f_surf[1]; reg71=0.16666666666666667632*skin_elem.f_surf[1]; reg73=0.16666666666666667632*skin_elem.f_surf[0]; reg74=0.044658198738520458147*reg70; reg57=reg30*reg57;
    reg59=reg63+reg59; reg47=reg32*reg47; reg32=reg79*reg32; reg30=0.044658198738520458147*skin_elem.f_surf[1]; reg63=0.6220084679281461892*skin_elem.f_surf[0];
    reg75=0.044658198738520458147*skin_elem.f_surf[0]; reg40=reg46*reg40; reg50=reg73+reg50; reg60=reg30+reg60; reg56=reg69+reg56;
    reg11=reg66+reg11; reg29=reg71+reg29; reg46=0.16666666666666667632*reg78; reg51=reg71+reg51; reg49=reg63+reg49;
    reg76=0.16666666666666667632*reg55; reg20=reg68+reg20; reg62=reg75+reg62; reg77=0.6220084679281461892*reg78; reg79=0.6220084679281461892*reg55;
    reg42=reg68+reg42; reg74=reg30+reg74; reg35=reg66+reg35; T reg80=0.6220084679281461892*reg52; T reg81=0.044658198738520458147*reg55;
    reg43=skin_elem.p*reg43; reg28=reg21+reg28; reg36=skin_elem.p*reg36; reg33=skin_elem.p*reg33; reg37=reg75+reg37;
    reg16=reg47-reg16; reg57=reg59+reg57; reg48=reg69+reg48; reg44=reg73+reg44; reg13=reg65+reg13;
    reg21=0.044658198738520458147*reg52; reg47=0.16666666666666667632*reg52; reg59=0.044658198738520458147*reg78; reg53=reg63+reg53; reg38=reg34*reg38;
    reg40=reg32-reg40; reg58=reg65+reg58; reg64=reg41*reg64; reg13=reg16*reg13; reg32=0.16666666666666667632*reg33;
    reg29=reg40*reg29; reg80=reg63+reg80; reg62=reg16*reg62; reg74=reg16*reg74; reg59=reg68+reg59;
    reg81=reg30+reg81; reg79=reg69+reg79; reg41=0.16666666666666667632*reg36; reg35=reg40*reg35; reg48=reg16*reg48;
    reg42=reg16*reg42; reg77=reg65+reg77; T reg82=0.16666666666666667632*reg43; reg21=reg75+reg21; reg49=reg40*reg49;
    T reg83=0.044658198738520458147*reg33; reg53=reg16*reg53; T reg84=0.044658198738520458147*reg43; reg58=reg40*reg58; T reg85=0.044658198738520458147*reg36;
    reg56=reg40*reg56; reg11=reg16*reg11; reg28=reg45*reg28; reg76=reg71+reg76; reg45=0.6220084679281461892*reg33;
    reg37=reg40*reg37; reg57=reg34*reg57; reg34=0.6220084679281461892*reg36; T reg86=0.6220084679281461892*reg43; reg20=reg40*reg20;
    reg51=reg16*reg51; reg46=reg66+reg46; reg64=reg38-reg64; reg44=reg16*reg44; reg47=reg73+reg47;
    reg60=reg40*reg60; reg50=reg40*reg50; reg47=reg64*reg47; reg53=0.25*reg53; reg42=0.25*reg42;
    reg34=reg69+reg34; reg35=0.25*reg35; reg44=0.25*reg44; reg77=reg64*reg77; reg76=reg64*reg76;
    reg82=reg66+reg82; reg84=reg68+reg84; reg58=0.25*reg58; reg51=0.25*reg51; reg49=0.25*reg49;
    reg45=reg63+reg45; reg83=reg75+reg83; reg85=reg30+reg85; reg60=0.25*reg60; reg56=0.25*reg56;
    reg50=0.25*reg50; reg59=reg64*reg59; reg62=0.25*reg62; reg86=reg65+reg86; reg80=reg64*reg80;
    reg13=0.25*reg13; reg32=reg73+reg32; reg81=reg64*reg81; reg28=reg57-reg28; reg46=reg64*reg46;
    reg29=0.25*reg29; reg21=reg64*reg21; reg41=reg71+reg41; reg37=0.25*reg37; reg79=reg64*reg79;
    reg20=0.25*reg20; reg48=0.25*reg48; reg74=0.25*reg74; reg11=0.25*reg11; reg58=reg11+reg58;
    reg81=0.25*reg81; reg48=reg29+reg48; reg84=reg28*reg84; reg45=reg28*reg45; reg53=reg50+reg53;
    reg13=reg35+reg13; reg85=reg28*reg85; reg21=0.25*reg21; reg56=reg51+reg56; reg37=reg37+reg44;
    reg59=0.25*reg59; reg47=0.25*reg47; reg86=reg28*reg86; reg77=0.25*reg77; reg82=reg28*reg82;
    reg76=0.25*reg76; reg41=reg28*reg41; reg79=0.25*reg79; reg51=reg60+reg51; reg49=reg44+reg49;
    reg74=reg29+reg74; reg62=reg50+reg62; reg11=reg20+reg11; reg83=reg28*reg83; reg46=0.25*reg46;
    reg42=reg35+reg42; reg34=reg28*reg34; reg32=reg28*reg32; reg80=0.25*reg80; reg59=reg13+reg59;
    reg41=0.25*reg41; reg21=reg53+reg21; reg80=reg62+reg80; reg79=reg74+reg79; reg11=reg11+reg46;
    reg32=0.25*reg32; reg81=reg48+reg81; reg34=0.25*reg34; reg51=reg51+reg76; reg84=0.25*reg84;
    reg77=reg42+reg77; reg37=reg37+reg47; reg58=reg46+reg58; reg82=0.25*reg82; reg49=reg47+reg49;
    reg85=0.25*reg85; reg83=0.25*reg83; reg45=0.25*reg45; reg56=reg76+reg56; reg86=0.25*reg86;
    reg59=reg59+reg82; sollicitation[indices[7]+2]+=reg59; reg86=reg11+reg86; sollicitation[indices[4]+2]+=reg86; reg81=reg41+reg81;
    sollicitation[indices[7]+1]+=reg81; reg80=reg80+reg32; sollicitation[indices[5]+0]+=reg80; reg21=reg32+reg21; sollicitation[indices[7]+0]+=reg21;
    reg41=reg79+reg41; sollicitation[indices[5]+1]+=reg41; reg34=reg51+reg34; sollicitation[indices[4]+1]+=reg34; reg84=reg58+reg84;
    sollicitation[indices[6]+2]+=reg84; reg82=reg77+reg82; sollicitation[indices[5]+2]+=reg82; reg85=reg56+reg85; sollicitation[indices[6]+1]+=reg85;
    reg83=reg49+reg83; sollicitation[indices[6]+0]+=reg83; reg45=reg37+reg45; sollicitation[indices[4]+0]+=reg45;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(1)[1]; T reg1=0.21132486540518713447*elem.pos(1)[0]; T reg2=0.21132486540518713447*elem.pos(0)[1]; T reg3=0.21132486540518713447*elem.pos(0)[0]; T reg4=0.78867513459481286553*elem.pos(0)[0];
    T reg5=0.78867513459481286553*elem.pos(0)[1]; T reg6=0.78867513459481286553*elem.pos(1)[0]; T reg7=reg0-reg2; T reg8=0.78867513459481286553*elem.pos(1)[1]; T reg9=0.21132486540518713447*elem.pos(0)[2];
    T reg10=0.21132486540518713447*elem.pos(1)[2]; T reg11=reg1-reg3; T reg12=0.78867513459481286553*elem.pos(5)[1]; T reg13=0.78867513459481286553*elem.pos(5)[0]; T reg14=0.78867513459481286553*elem.pos(5)[2];
    T reg15=reg10-reg9; T reg16=0.78867513459481286553*elem.pos(0)[2]; T reg17=reg8-reg5; T reg18=0.78867513459481286553*elem.pos(4)[1]; T reg19=0.78867513459481286553*elem.pos(4)[0];
    T reg20=0.21132486540518713447*elem.pos(5)[0]; T reg21=0.21132486540518713447*elem.pos(5)[1]; T reg22=0.78867513459481286553*elem.pos(1)[2]; T reg23=reg6-reg4; reg7=reg12+reg7;
    reg11=reg13+reg11; T reg24=reg22-reg16; T reg25=0.21132486540518713447*elem.pos(5)[2]; T reg26=0.21132486540518713447*elem.pos(4)[1]; reg11=reg11-reg19;
    T reg27=0.21132486540518713447*elem.pos(4)[0]; reg7=reg7-reg18; T reg28=0.78867513459481286553*elem.pos(4)[2]; reg15=reg14+reg15; reg17=reg21+reg17;
    reg23=reg20+reg23; T reg29=pow(reg7,2); reg15=reg15-reg28; reg17=reg17-reg26; T reg30=0.21132486540518713447*elem.pos(4)[2];
    T reg31=pow(reg11,2); reg24=reg25+reg24; reg23=reg23-reg27; T reg32=pow(reg15,2); reg31=reg29+reg31;
    reg29=pow(reg23,2); T reg33=pow(reg17,2); reg24=reg24-reg30; reg31=reg32+reg31; reg32=reg0+reg5;
    T reg34=reg1+reg4; reg33=reg29+reg33; reg29=reg2+reg8; T reg35=pow(reg24,2); T reg36=reg3+reg6;
    reg31=pow(reg31,0.5); reg35=reg33+reg35; reg33=reg10+reg16; reg32=reg21-reg32; reg34=reg20-reg34;
    reg36=reg13-reg36; reg29=reg12-reg29; T reg37=reg9+reg22; reg34=reg19+reg34; reg35=pow(reg35,0.5);
    T reg38=reg7/reg31; reg32=reg18+reg32; reg29=reg26+reg29; reg33=reg25-reg33; T reg39=reg11/reg31;
    reg36=reg27+reg36; reg37=reg14-reg37; reg33=reg28+reg33; T reg40=reg38*reg32; T reg41=reg39*reg34;
    T reg42=reg23/reg35; T reg43=reg17/reg35; T reg44=reg29*reg38; T reg45=reg36*reg39; reg37=reg30+reg37;
    reg31=reg15/reg31; reg44=reg45+reg44; reg45=reg37*reg31; reg35=reg24/reg35; T reg46=reg36*reg42;
    reg40=reg41+reg40; reg41=reg29*reg43; T reg47=reg31*reg33; T reg48=reg32*reg43; T reg49=reg34*reg42;
    reg41=reg46+reg41; reg46=reg37*reg35; reg47=reg40+reg47; reg44=reg45+reg44; reg40=reg39*reg47;
    reg46=reg41+reg46; reg41=reg38*reg47; reg45=reg39*reg44; reg49=reg48+reg49; reg48=reg33*reg35;
    T reg50=reg38*reg44; T reg51=reg42*reg46; T reg52=reg43*reg46; reg48=reg49+reg48; reg45=reg36-reg45;
    reg50=reg29-reg50; reg49=reg31*reg47; reg41=reg32-reg41; T reg53=reg31*reg44; reg40=reg34-reg40;
    T reg54=reg35*reg46; reg52=reg29-reg52; T reg55=pow(reg41,2); reg51=reg36-reg51; T reg56=pow(reg40,2);
    reg49=reg33-reg49; T reg57=pow(reg50,2); T reg58=reg43*reg48; T reg59=reg42*reg48; reg53=reg37-reg53;
    T reg60=pow(reg45,2); reg60=reg57+reg60; reg57=pow(reg49,2); reg55=reg56+reg55; reg59=reg34-reg59;
    reg54=reg37-reg54; reg58=reg32-reg58; reg56=pow(reg53,2); T reg61=pow(reg52,2); T reg62=reg35*reg48;
    T reg63=pow(reg51,2); T reg64=pow(reg54,2); reg61=reg63+reg61; reg56=reg60+reg56; reg60=pow(reg59,2);
    reg62=reg33-reg62; reg57=reg55+reg57; reg55=pow(reg58,2); reg56=pow(reg56,0.5); reg57=pow(reg57,0.5);
    reg64=reg61+reg64; reg55=reg60+reg55; reg60=pow(reg62,2); reg40=reg40/reg57; reg41=reg41/reg57;
    reg57=reg49/reg57; reg45=reg45/reg56; reg50=reg50/reg56; reg56=reg53/reg56; reg64=pow(reg64,0.5);
    reg60=reg55+reg60; reg54=reg54/reg64; reg52=reg52/reg64; reg64=reg51/reg64; reg49=reg31*reg40;
    reg51=reg39*reg57; reg53=reg31*reg41; reg55=reg38*reg57; reg61=reg38*reg40; reg63=reg39*reg41;
    T reg65=reg7*reg41; reg60=pow(reg60,0.5); T reg66=reg36*reg45; T reg67=reg29*reg50; T reg68=reg7*reg38;
    T reg69=reg11*reg39; T reg70=reg11*reg45; reg7=reg7*reg50; T reg71=reg39*reg50; T reg72=reg38*reg45;
    reg38=reg38*reg56; reg50=reg31*reg50; reg45=reg31*reg45; reg39=reg39*reg56; T reg73=reg34*reg40;
    reg40=reg11*reg40; reg41=reg32*reg41; reg11=reg15*reg56; reg31=reg15*reg31; T reg74=reg23*reg42;
    reg69=reg68+reg69; reg68=reg17*reg43; T reg75=reg17*reg52; T reg76=reg43*reg54; T reg77=reg23*reg64;
    reg15=reg15*reg57; reg56=reg37*reg56; reg67=reg66+reg67; reg65=reg40+reg65; reg40=reg35*reg52;
    reg59=reg59/reg60; reg58=reg58/reg60; reg53=reg55-reg53; reg55=reg35*reg64; reg51=reg49-reg51;
    reg29=reg29*reg52; reg39=reg45-reg39; reg41=reg73+reg41; reg45=reg42*reg54; reg50=reg38-reg50;
    reg52=reg42*reg52; reg61=reg63-reg61; reg60=reg62/reg60; reg72=reg71-reg72; reg57=reg33*reg57;
    reg36=reg36*reg64; reg7=reg70+reg7; reg64=reg43*reg64; reg38=reg42*reg58; reg49=reg43*reg59;
    reg43=reg43*reg60; reg62=reg35*reg58; reg63=reg35*reg59; reg42=reg42*reg60; reg17=reg17*reg58;
    reg23=reg23*reg59; reg58=reg32*reg58; reg59=reg34*reg59; reg37=reg37*reg54; reg64=reg52-reg64;
    reg40=reg76-reg40; reg45=reg55-reg45; reg75=reg77+reg75; reg54=reg24*reg54; reg56=reg67+reg56;
    reg31=reg69+reg31; reg7=reg11+reg7; reg72=skin_elem.p*reg72; reg50=skin_elem.p*reg50; reg39=skin_elem.p*reg39;
    reg57=reg41+reg57; reg15=reg65+reg15; reg29=reg36+reg29; reg35=reg24*reg35; reg68=reg74+reg68;
    reg51=skin_elem.p*reg51; reg53=skin_elem.p*reg53; reg61=skin_elem.p*reg61; reg17=reg23+reg17; reg24=reg24*reg60;
    reg49=reg38-reg49; reg62=reg43-reg62; reg11=0.044658198738520458147*skin_elem.f_surf[0]; reg42=reg63-reg42; reg60=reg33*reg60;
    reg23=0.6220084679281461892*reg72; reg32=0.6220084679281461892*skin_elem.f_surf[0]; reg33=0.044658198738520458147*reg39; reg34=0.6220084679281461892*reg39; reg36=0.16666666666666667632*reg51;
    reg38=0.6220084679281461892*reg50; reg41=0.044658198738520458147*reg72; reg43=0.16666666666666667632*reg61; reg52=0.6220084679281461892*reg61; reg55=0.16666666666666667632*reg50;
    reg63=0.6220084679281461892*reg51; reg65=0.044658198738520458147*reg53; reg66=0.6220084679281461892*reg53; reg67=0.16666666666666667632*reg39; reg69=0.044658198738520458147*reg51;
    reg70=0.044658198738520458147*reg61; reg71=0.16666666666666667632*reg72; reg35=reg68+reg35; reg37=reg29+reg37; reg54=reg75+reg54;
    reg15=reg47*reg15; reg64=skin_elem.p*reg64; reg57=reg31*reg57; reg40=skin_elem.p*reg40; reg45=skin_elem.p*reg45;
    reg7=reg44*reg7; reg31=reg56*reg31; reg29=0.16666666666666667632*reg53; reg44=0.044658198738520458147*reg50; reg58=reg59+reg58;
    reg47=0.044658198738520458147*skin_elem.f_surf[1]; reg56=0.16666666666666667632*skin_elem.f_surf[0]; reg59=0.16666666666666667632*skin_elem.f_surf[1]; reg68=0.6220084679281461892*skin_elem.f_surf[1]; reg73=0.044658198738520458147*skin_elem.f_surf[2];
    reg74=0.16666666666666667632*skin_elem.f_surf[2]; reg75=0.6220084679281461892*skin_elem.f_surf[2]; reg38=reg32+reg38; reg76=0.044658198738520458147*reg64; reg29=reg56+reg29;
    reg41=reg73+reg41; reg49=skin_elem.p*reg49; reg43=reg74+reg43; reg52=reg75+reg52; reg77=0.16666666666666667632*reg64;
    T reg78=0.044658198738520458147*reg45; reg63=reg68+reg63; reg60=reg58+reg60; reg55=reg56+reg55; reg15=reg57-reg15;
    reg65=reg11+reg65; reg57=0.6220084679281461892*reg40; reg58=0.044658198738520458147*reg40; reg66=reg32+reg66; reg54=reg46*reg54;
    reg67=reg59+reg67; reg37=reg35*reg37; reg69=reg47+reg69; reg46=0.6220084679281461892*reg64; T reg79=0.6220084679281461892*reg45;
    reg70=reg73+reg70; reg44=reg11+reg44; reg71=reg74+reg71; reg23=reg75+reg23; reg7=reg31-reg7;
    reg31=0.16666666666666667632*reg40; reg36=reg59+reg36; reg42=skin_elem.p*reg42; T reg80=0.16666666666666667632*reg45; reg33=reg47+reg33;
    reg24=reg17+reg24; reg34=reg68+reg34; reg62=skin_elem.p*reg62; reg17=0.044658198738520458147*reg42; reg57=reg32+reg57;
    T reg81=0.6220084679281461892*reg62; reg66=reg15*reg66; T reg82=0.16666666666666667632*reg62; reg58=reg11+reg58; T reg83=0.16666666666666667632*reg49;
    reg65=reg15*reg65; T reg84=0.044658198738520458147*reg49; reg67=reg7*reg67; reg31=reg56+reg31; reg69=reg15*reg69;
    reg46=reg75+reg46; reg23=reg7*reg23; reg79=reg68+reg79; reg70=reg15*reg70; reg29=reg29*reg15;
    T reg85=0.16666666666666667632*reg42; reg71=reg7*reg71; reg44=reg44*reg7; reg38=reg7*reg38; reg80=reg59+reg80;
    T reg86=0.6220084679281461892*reg42; reg76=reg73+reg76; T reg87=0.044658198738520458147*reg62; reg41=reg7*reg41; reg36=reg15*reg36;
    reg43=reg15*reg43; reg52=reg15*reg52; reg24=reg48*reg24; reg77=reg74+reg77; reg60=reg35*reg60;
    reg54=reg37-reg54; reg78=reg47+reg78; reg35=0.6220084679281461892*reg49; reg34=reg7*reg34; reg33=reg7*reg33;
    reg63=reg15*reg63; reg55=reg7*reg55; reg38=0.25*reg38; reg34=0.25*reg34; reg71=0.25*reg71;
    reg23=0.25*reg23; reg76=reg54*reg76; reg58=reg54*reg58; reg70=0.25*reg70; reg87=reg11+reg87;
    reg52=0.25*reg52; reg63=0.25*reg63; reg66=0.25*reg66; reg46=reg54*reg46; reg17=reg47+reg17;
    reg78=reg54*reg78; reg83=reg74+reg83; reg84=reg73+reg84; reg57=reg54*reg57; reg65=0.25*reg65;
    reg24=reg60-reg24; reg82=reg56+reg82; reg86=reg68+reg86; reg41=0.25*reg41; reg80=reg54*reg80;
    reg29=0.25*reg29; reg55=0.25*reg55; reg36=0.25*reg36; reg44=0.25*reg44; reg43=0.25*reg43;
    reg67=0.25*reg67; reg69=0.25*reg69; reg33=0.25*reg33; reg31=reg54*reg31; reg79=reg54*reg79;
    reg77=reg54*reg77; reg85=reg59+reg85; reg81=reg32+reg81; reg35=reg75+reg35; reg41=reg41+reg43;
    reg52=reg71+reg52; reg78=0.25*reg78; reg23=reg43+reg23; reg86=reg24*reg86; reg76=0.25*reg76;
    reg80=0.25*reg80; reg38=reg29+reg38; reg33=reg33+reg36; reg87=reg24*reg87; reg29=reg44+reg29;
    reg81=reg24*reg81; reg34=reg36+reg34; reg17=reg24*reg17; reg31=0.25*reg31; reg46=0.25*reg46;
    reg83=reg24*reg83; reg69=reg67+reg69; reg84=reg24*reg84; reg70=reg71+reg70; reg82=reg24*reg82;
    reg79=0.25*reg79; reg57=0.25*reg57; reg66=reg55+reg66; reg65=reg55+reg65; reg58=0.25*reg58;
    reg85=reg24*reg85; reg35=reg24*reg35; reg63=reg67+reg63; reg77=0.25*reg77; reg79=reg69+reg79;
    reg34=reg80+reg34; reg81=0.25*reg81; reg29=reg29+reg31; reg85=0.25*reg85; reg17=0.25*reg17;
    reg87=0.25*reg87; reg46=reg70+reg46; reg84=0.25*reg84; reg82=0.25*reg82; reg38=reg31+reg38;
    reg83=0.25*reg83; reg80=reg33+reg80; reg57=reg65+reg57; reg76=reg52+reg76; reg86=0.25*reg86;
    reg58=reg66+reg58; reg35=0.25*reg35; reg23=reg77+reg23; reg78=reg63+reg78; reg77=reg41+reg77;
    reg84=reg23+reg84; sollicitation[indices[5]+2]+=reg84; reg17=reg34+reg17; sollicitation[indices[5]+1]+=reg17; reg81=reg29+reg81;
    sollicitation[indices[0]+0]+=reg81; reg87=reg38+reg87; sollicitation[indices[5]+0]+=reg87; reg76=reg83+reg76; sollicitation[indices[4]+2]+=reg76;
    reg86=reg80+reg86; sollicitation[indices[0]+1]+=reg86; reg78=reg85+reg78; sollicitation[indices[4]+1]+=reg78; reg35=reg77+reg35;
    sollicitation[indices[0]+2]+=reg35; reg58=reg82+reg58; sollicitation[indices[4]+0]+=reg58; reg83=reg46+reg83; sollicitation[indices[1]+2]+=reg83;
    reg82=reg57+reg82; sollicitation[indices[1]+0]+=reg82; reg85=reg79+reg85; sollicitation[indices[1]+1]+=reg85;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(1)[1]; T reg1=0.21132486540518713447*elem.pos(1)[0]; T reg2=0.21132486540518713447*elem.pos(0)[1]; T reg3=0.21132486540518713447*elem.pos(0)[0]; T reg4=0.78867513459481286553*elem.pos(0)[0];
    T reg5=0.78867513459481286553*elem.pos(0)[1]; T reg6=0.78867513459481286553*elem.pos(1)[0]; T reg7=reg0-reg2; T reg8=0.78867513459481286553*elem.pos(1)[1]; T reg9=0.21132486540518713447*elem.pos(0)[2];
    T reg10=0.21132486540518713447*elem.pos(1)[2]; T reg11=reg1-reg3; T reg12=0.78867513459481286553*elem.pos(5)[1]; T reg13=0.78867513459481286553*elem.pos(5)[0]; T reg14=0.78867513459481286553*elem.pos(5)[2];
    T reg15=reg10-reg9; T reg16=0.78867513459481286553*elem.pos(0)[2]; T reg17=reg8-reg5; T reg18=0.78867513459481286553*elem.pos(4)[1]; T reg19=0.78867513459481286553*elem.pos(4)[0];
    T reg20=0.21132486540518713447*elem.pos(5)[0]; T reg21=0.21132486540518713447*elem.pos(5)[1]; T reg22=0.78867513459481286553*elem.pos(1)[2]; T reg23=reg6-reg4; reg7=reg12+reg7;
    reg11=reg13+reg11; T reg24=reg22-reg16; T reg25=0.21132486540518713447*elem.pos(5)[2]; T reg26=0.21132486540518713447*elem.pos(4)[1]; reg11=reg11-reg19;
    T reg27=0.21132486540518713447*elem.pos(4)[0]; reg7=reg7-reg18; T reg28=0.78867513459481286553*elem.pos(4)[2]; reg15=reg14+reg15; reg17=reg21+reg17;
    reg23=reg20+reg23; T reg29=pow(reg7,2); reg15=reg15-reg28; reg17=reg17-reg26; T reg30=0.21132486540518713447*elem.pos(4)[2];
    T reg31=pow(reg11,2); reg24=reg25+reg24; reg23=reg23-reg27; T reg32=pow(reg15,2); reg31=reg29+reg31;
    reg29=pow(reg23,2); T reg33=pow(reg17,2); reg24=reg24-reg30; reg31=reg32+reg31; reg32=reg0+reg5;
    T reg34=reg1+reg4; reg33=reg29+reg33; reg29=reg2+reg8; T reg35=pow(reg24,2); T reg36=reg3+reg6;
    reg31=pow(reg31,0.5); reg35=reg33+reg35; reg33=reg10+reg16; reg32=reg21-reg32; reg34=reg20-reg34;
    reg36=reg13-reg36; reg29=reg12-reg29; T reg37=reg9+reg22; reg34=reg19+reg34; reg35=pow(reg35,0.5);
    T reg38=reg7/reg31; reg32=reg18+reg32; reg29=reg26+reg29; reg33=reg25-reg33; T reg39=reg11/reg31;
    reg36=reg27+reg36; reg37=reg14-reg37; reg33=reg28+reg33; T reg40=reg38*reg32; T reg41=reg39*reg34;
    T reg42=reg23/reg35; T reg43=reg17/reg35; T reg44=reg29*reg38; T reg45=reg36*reg39; reg37=reg30+reg37;
    reg31=reg15/reg31; reg44=reg45+reg44; reg45=reg37*reg31; reg35=reg24/reg35; T reg46=reg36*reg42;
    reg40=reg41+reg40; reg41=reg29*reg43; T reg47=reg31*reg33; T reg48=reg32*reg43; T reg49=reg34*reg42;
    reg41=reg46+reg41; reg46=reg37*reg35; reg47=reg40+reg47; reg44=reg45+reg44; reg40=reg39*reg47;
    reg46=reg41+reg46; reg41=reg38*reg47; reg45=reg39*reg44; reg49=reg48+reg49; reg48=reg33*reg35;
    T reg50=reg38*reg44; T reg51=reg42*reg46; T reg52=reg43*reg46; reg48=reg49+reg48; reg45=reg36-reg45;
    reg50=reg29-reg50; reg49=reg31*reg47; reg41=reg32-reg41; T reg53=reg31*reg44; reg40=reg34-reg40;
    T reg54=reg35*reg46; reg52=reg29-reg52; T reg55=pow(reg41,2); reg51=reg36-reg51; T reg56=pow(reg40,2);
    reg49=reg33-reg49; T reg57=pow(reg50,2); T reg58=reg43*reg48; T reg59=reg42*reg48; reg53=reg37-reg53;
    T reg60=pow(reg45,2); reg60=reg57+reg60; reg57=pow(reg49,2); reg55=reg56+reg55; reg59=reg34-reg59;
    reg54=reg37-reg54; reg58=reg32-reg58; reg56=pow(reg53,2); T reg61=pow(reg52,2); T reg62=reg35*reg48;
    T reg63=pow(reg51,2); T reg64=pow(reg54,2); reg61=reg63+reg61; reg56=reg60+reg56; reg60=pow(reg59,2);
    reg62=reg33-reg62; reg57=reg55+reg57; reg55=pow(reg58,2); reg56=pow(reg56,0.5); reg57=pow(reg57,0.5);
    reg64=reg61+reg64; reg55=reg60+reg55; reg60=pow(reg62,2); reg40=reg40/reg57; reg41=reg41/reg57;
    reg57=reg49/reg57; reg45=reg45/reg56; reg50=reg50/reg56; reg56=reg53/reg56; reg64=pow(reg64,0.5);
    reg60=reg55+reg60; reg54=reg54/reg64; reg52=reg52/reg64; reg64=reg51/reg64; reg49=reg31*reg40;
    reg51=reg39*reg57; reg53=reg31*reg41; reg55=reg38*reg57; reg61=reg38*reg40; reg63=reg39*reg41;
    T reg65=reg7*reg41; reg60=pow(reg60,0.5); T reg66=reg36*reg45; T reg67=reg29*reg50; T reg68=reg7*reg38;
    T reg69=reg11*reg39; T reg70=reg11*reg45; reg7=reg7*reg50; T reg71=reg39*reg50; T reg72=reg38*reg45;
    reg38=reg38*reg56; reg50=reg31*reg50; reg45=reg31*reg45; reg39=reg39*reg56; T reg73=reg34*reg40;
    reg40=reg11*reg40; reg41=reg32*reg41; reg11=reg15*reg56; reg31=reg15*reg31; T reg74=reg23*reg42;
    reg69=reg68+reg69; reg68=reg17*reg43; T reg75=reg17*reg52; T reg76=reg43*reg54; T reg77=reg23*reg64;
    reg15=reg15*reg57; reg56=reg37*reg56; reg67=reg66+reg67; reg65=reg40+reg65; reg40=reg35*reg52;
    reg59=reg59/reg60; reg58=reg58/reg60; reg53=reg55-reg53; reg55=reg35*reg64; reg51=reg49-reg51;
    reg29=reg29*reg52; reg39=reg45-reg39; reg41=reg73+reg41; reg45=reg42*reg54; reg50=reg38-reg50;
    reg52=reg42*reg52; reg61=reg63-reg61; reg60=reg62/reg60; reg72=reg71-reg72; reg57=reg33*reg57;
    reg36=reg36*reg64; reg7=reg70+reg7; reg64=reg43*reg64; reg38=reg42*reg58; reg49=reg43*reg59;
    reg43=reg43*reg60; reg62=reg35*reg58; reg63=reg35*reg59; reg42=reg42*reg60; reg17=reg17*reg58;
    reg23=reg23*reg59; reg58=reg32*reg58; reg59=reg34*reg59; reg37=reg37*reg54; reg64=reg52-reg64;
    reg40=reg76-reg40; reg45=reg55-reg45; reg75=reg77+reg75; reg54=reg24*reg54; reg56=reg67+reg56;
    reg31=reg69+reg31; reg7=reg11+reg7; reg72=skin_elem.p*reg72; reg50=skin_elem.p*reg50; reg39=skin_elem.p*reg39;
    reg57=reg41+reg57; reg15=reg65+reg15; reg29=reg36+reg29; reg35=reg24*reg35; reg68=reg74+reg68;
    reg51=skin_elem.p*reg51; reg53=skin_elem.p*reg53; reg61=skin_elem.p*reg61; reg17=reg23+reg17; reg24=reg24*reg60;
    reg49=reg38-reg49; reg62=reg43-reg62; reg11=0.044658198738520458147*skin_elem.f_surf[0]; reg42=reg63-reg42; reg60=reg33*reg60;
    reg23=0.6220084679281461892*reg72; reg32=0.6220084679281461892*skin_elem.f_surf[0]; reg33=0.044658198738520458147*reg39; reg34=0.6220084679281461892*reg39; reg36=0.16666666666666667632*reg51;
    reg38=0.6220084679281461892*reg50; reg41=0.044658198738520458147*reg72; reg43=0.16666666666666667632*reg61; reg52=0.6220084679281461892*reg61; reg55=0.16666666666666667632*reg50;
    reg63=0.6220084679281461892*reg51; reg65=0.044658198738520458147*reg53; reg66=0.6220084679281461892*reg53; reg67=0.16666666666666667632*reg39; reg69=0.044658198738520458147*reg51;
    reg70=0.044658198738520458147*reg61; reg71=0.16666666666666667632*reg72; reg35=reg68+reg35; reg37=reg29+reg37; reg54=reg75+reg54;
    reg15=reg47*reg15; reg64=skin_elem.p*reg64; reg57=reg31*reg57; reg40=skin_elem.p*reg40; reg45=skin_elem.p*reg45;
    reg7=reg44*reg7; reg31=reg56*reg31; reg29=0.16666666666666667632*reg53; reg44=0.044658198738520458147*reg50; reg58=reg59+reg58;
    reg47=0.044658198738520458147*skin_elem.f_surf[1]; reg56=0.16666666666666667632*skin_elem.f_surf[0]; reg59=0.16666666666666667632*skin_elem.f_surf[1]; reg68=0.6220084679281461892*skin_elem.f_surf[1]; reg73=0.044658198738520458147*skin_elem.f_surf[2];
    reg74=0.16666666666666667632*skin_elem.f_surf[2]; reg75=0.6220084679281461892*skin_elem.f_surf[2]; reg38=reg32+reg38; reg76=0.044658198738520458147*reg64; reg29=reg56+reg29;
    reg41=reg73+reg41; reg49=skin_elem.p*reg49; reg43=reg74+reg43; reg52=reg75+reg52; reg77=0.16666666666666667632*reg64;
    T reg78=0.044658198738520458147*reg45; reg63=reg68+reg63; reg60=reg58+reg60; reg55=reg56+reg55; reg15=reg57-reg15;
    reg65=reg11+reg65; reg57=0.6220084679281461892*reg40; reg58=0.044658198738520458147*reg40; reg66=reg32+reg66; reg54=reg46*reg54;
    reg67=reg59+reg67; reg37=reg35*reg37; reg69=reg47+reg69; reg46=0.6220084679281461892*reg64; T reg79=0.6220084679281461892*reg45;
    reg70=reg73+reg70; reg44=reg11+reg44; reg71=reg74+reg71; reg23=reg75+reg23; reg7=reg31-reg7;
    reg31=0.16666666666666667632*reg40; reg36=reg59+reg36; reg42=skin_elem.p*reg42; T reg80=0.16666666666666667632*reg45; reg33=reg47+reg33;
    reg24=reg17+reg24; reg34=reg68+reg34; reg62=skin_elem.p*reg62; reg17=0.044658198738520458147*reg42; reg57=reg32+reg57;
    T reg81=0.6220084679281461892*reg62; reg66=reg15*reg66; T reg82=0.16666666666666667632*reg62; reg58=reg11+reg58; T reg83=0.16666666666666667632*reg49;
    reg65=reg15*reg65; T reg84=0.044658198738520458147*reg49; reg67=reg7*reg67; reg31=reg56+reg31; reg69=reg15*reg69;
    reg46=reg75+reg46; reg23=reg7*reg23; reg79=reg68+reg79; reg70=reg15*reg70; reg29=reg29*reg15;
    T reg85=0.16666666666666667632*reg42; reg71=reg7*reg71; reg44=reg44*reg7; reg38=reg7*reg38; reg80=reg59+reg80;
    T reg86=0.6220084679281461892*reg42; reg76=reg73+reg76; T reg87=0.044658198738520458147*reg62; reg41=reg7*reg41; reg36=reg15*reg36;
    reg43=reg15*reg43; reg52=reg15*reg52; reg24=reg48*reg24; reg77=reg74+reg77; reg60=reg35*reg60;
    reg54=reg37-reg54; reg78=reg47+reg78; reg35=0.6220084679281461892*reg49; reg34=reg7*reg34; reg33=reg7*reg33;
    reg63=reg15*reg63; reg55=reg7*reg55; reg38=0.25*reg38; reg34=0.25*reg34; reg71=0.25*reg71;
    reg23=0.25*reg23; reg76=reg54*reg76; reg58=reg54*reg58; reg70=0.25*reg70; reg87=reg11+reg87;
    reg52=0.25*reg52; reg63=0.25*reg63; reg66=0.25*reg66; reg46=reg54*reg46; reg17=reg47+reg17;
    reg78=reg54*reg78; reg83=reg74+reg83; reg84=reg73+reg84; reg57=reg54*reg57; reg65=0.25*reg65;
    reg24=reg60-reg24; reg82=reg56+reg82; reg86=reg68+reg86; reg41=0.25*reg41; reg80=reg54*reg80;
    reg29=0.25*reg29; reg55=0.25*reg55; reg36=0.25*reg36; reg44=0.25*reg44; reg43=0.25*reg43;
    reg67=0.25*reg67; reg69=0.25*reg69; reg33=0.25*reg33; reg31=reg54*reg31; reg79=reg54*reg79;
    reg77=reg54*reg77; reg85=reg59+reg85; reg81=reg32+reg81; reg35=reg75+reg35; reg41=reg41+reg43;
    reg52=reg71+reg52; reg78=0.25*reg78; reg23=reg43+reg23; reg86=reg24*reg86; reg76=0.25*reg76;
    reg80=0.25*reg80; reg38=reg29+reg38; reg33=reg33+reg36; reg87=reg24*reg87; reg29=reg44+reg29;
    reg81=reg24*reg81; reg34=reg36+reg34; reg17=reg24*reg17; reg31=0.25*reg31; reg46=0.25*reg46;
    reg83=reg24*reg83; reg69=reg67+reg69; reg84=reg24*reg84; reg70=reg71+reg70; reg82=reg24*reg82;
    reg79=0.25*reg79; reg57=0.25*reg57; reg66=reg55+reg66; reg65=reg55+reg65; reg58=0.25*reg58;
    reg85=reg24*reg85; reg35=reg24*reg35; reg63=reg67+reg63; reg77=0.25*reg77; reg79=reg69+reg79;
    reg34=reg80+reg34; reg81=0.25*reg81; reg29=reg29+reg31; reg85=0.25*reg85; reg17=0.25*reg17;
    reg87=0.25*reg87; reg46=reg70+reg46; reg84=0.25*reg84; reg82=0.25*reg82; reg38=reg31+reg38;
    reg83=0.25*reg83; reg80=reg33+reg80; reg57=reg65+reg57; reg76=reg52+reg76; reg86=0.25*reg86;
    reg58=reg66+reg58; reg35=0.25*reg35; reg23=reg77+reg23; reg78=reg63+reg78; reg77=reg41+reg77;
    reg84=reg23+reg84; sollicitation[indices[5]+2]+=reg84; reg17=reg34+reg17; sollicitation[indices[5]+1]+=reg17; reg81=reg29+reg81;
    sollicitation[indices[0]+0]+=reg81; reg87=reg38+reg87; sollicitation[indices[5]+0]+=reg87; reg76=reg83+reg76; sollicitation[indices[4]+2]+=reg76;
    reg86=reg80+reg86; sollicitation[indices[0]+1]+=reg86; reg78=reg85+reg78; sollicitation[indices[4]+1]+=reg78; reg35=reg77+reg35;
    sollicitation[indices[0]+2]+=reg35; reg58=reg82+reg58; sollicitation[indices[4]+0]+=reg58; reg83=reg46+reg83; sollicitation[indices[1]+2]+=reg83;
    reg82=reg57+reg82; sollicitation[indices[1]+0]+=reg82; reg85=reg79+reg85; sollicitation[indices[1]+1]+=reg85;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(1)[1]; T reg1=0.21132486540518713447*elem.pos(1)[0]; T reg2=0.21132486540518713447*elem.pos(0)[1]; T reg3=0.21132486540518713447*elem.pos(0)[0]; T reg4=0.78867513459481286553*elem.pos(0)[0];
    T reg5=0.78867513459481286553*elem.pos(0)[1]; T reg6=0.78867513459481286553*elem.pos(1)[0]; T reg7=reg0-reg2; T reg8=0.78867513459481286553*elem.pos(1)[1]; T reg9=0.21132486540518713447*elem.pos(0)[2];
    T reg10=0.21132486540518713447*elem.pos(1)[2]; T reg11=reg1-reg3; T reg12=0.78867513459481286553*elem.pos(5)[1]; T reg13=0.78867513459481286553*elem.pos(5)[0]; T reg14=0.78867513459481286553*elem.pos(5)[2];
    T reg15=reg10-reg9; T reg16=0.78867513459481286553*elem.pos(0)[2]; T reg17=reg8-reg5; T reg18=0.78867513459481286553*elem.pos(4)[1]; T reg19=0.78867513459481286553*elem.pos(4)[0];
    T reg20=0.21132486540518713447*elem.pos(5)[0]; T reg21=0.21132486540518713447*elem.pos(5)[1]; T reg22=0.78867513459481286553*elem.pos(1)[2]; T reg23=reg6-reg4; reg7=reg12+reg7;
    reg11=reg13+reg11; T reg24=reg22-reg16; T reg25=0.21132486540518713447*elem.pos(5)[2]; T reg26=0.21132486540518713447*elem.pos(4)[1]; reg11=reg11-reg19;
    T reg27=0.21132486540518713447*elem.pos(4)[0]; reg7=reg7-reg18; T reg28=0.78867513459481286553*elem.pos(4)[2]; reg15=reg14+reg15; reg17=reg21+reg17;
    reg23=reg20+reg23; T reg29=pow(reg7,2); reg15=reg15-reg28; reg17=reg17-reg26; T reg30=0.21132486540518713447*elem.pos(4)[2];
    T reg31=pow(reg11,2); reg24=reg25+reg24; reg23=reg23-reg27; T reg32=pow(reg15,2); reg31=reg29+reg31;
    reg29=pow(reg23,2); T reg33=pow(reg17,2); reg24=reg24-reg30; reg31=reg32+reg31; reg32=reg0+reg5;
    T reg34=reg1+reg4; reg33=reg29+reg33; reg29=reg2+reg8; T reg35=pow(reg24,2); T reg36=reg3+reg6;
    reg31=pow(reg31,0.5); reg35=reg33+reg35; reg33=reg10+reg16; reg32=reg21-reg32; reg34=reg20-reg34;
    reg36=reg13-reg36; reg29=reg12-reg29; T reg37=reg9+reg22; reg34=reg19+reg34; reg35=pow(reg35,0.5);
    T reg38=reg7/reg31; reg32=reg18+reg32; reg29=reg26+reg29; reg33=reg25-reg33; T reg39=reg11/reg31;
    reg36=reg27+reg36; reg37=reg14-reg37; reg33=reg28+reg33; T reg40=reg38*reg32; T reg41=reg39*reg34;
    T reg42=reg23/reg35; T reg43=reg17/reg35; T reg44=reg29*reg38; T reg45=reg36*reg39; reg37=reg30+reg37;
    reg31=reg15/reg31; reg44=reg45+reg44; reg45=reg37*reg31; reg35=reg24/reg35; T reg46=reg36*reg42;
    reg40=reg41+reg40; reg41=reg29*reg43; T reg47=reg31*reg33; T reg48=reg32*reg43; T reg49=reg34*reg42;
    reg41=reg46+reg41; reg46=reg37*reg35; reg47=reg40+reg47; reg44=reg45+reg44; reg40=reg39*reg47;
    reg46=reg41+reg46; reg41=reg38*reg47; reg45=reg39*reg44; reg49=reg48+reg49; reg48=reg33*reg35;
    T reg50=reg38*reg44; T reg51=reg42*reg46; T reg52=reg43*reg46; reg48=reg49+reg48; reg45=reg36-reg45;
    reg50=reg29-reg50; reg49=reg31*reg47; reg41=reg32-reg41; T reg53=reg31*reg44; reg40=reg34-reg40;
    T reg54=reg35*reg46; reg52=reg29-reg52; T reg55=pow(reg41,2); reg51=reg36-reg51; T reg56=pow(reg40,2);
    reg49=reg33-reg49; T reg57=pow(reg50,2); T reg58=reg43*reg48; T reg59=reg42*reg48; reg53=reg37-reg53;
    T reg60=pow(reg45,2); reg60=reg57+reg60; reg57=pow(reg49,2); reg55=reg56+reg55; reg59=reg34-reg59;
    reg54=reg37-reg54; reg58=reg32-reg58; reg56=pow(reg53,2); T reg61=pow(reg52,2); T reg62=reg35*reg48;
    T reg63=pow(reg51,2); T reg64=pow(reg54,2); reg61=reg63+reg61; reg56=reg60+reg56; reg60=pow(reg59,2);
    reg62=reg33-reg62; reg57=reg55+reg57; reg55=pow(reg58,2); reg56=pow(reg56,0.5); reg57=pow(reg57,0.5);
    reg64=reg61+reg64; reg55=reg60+reg55; reg60=pow(reg62,2); reg40=reg40/reg57; reg41=reg41/reg57;
    reg57=reg49/reg57; reg45=reg45/reg56; reg50=reg50/reg56; reg56=reg53/reg56; reg64=pow(reg64,0.5);
    reg60=reg55+reg60; reg54=reg54/reg64; reg52=reg52/reg64; reg64=reg51/reg64; reg49=reg31*reg40;
    reg51=reg39*reg57; reg53=reg31*reg41; reg55=reg38*reg57; reg61=reg38*reg40; reg63=reg39*reg41;
    T reg65=reg7*reg41; reg60=pow(reg60,0.5); T reg66=reg36*reg45; T reg67=reg29*reg50; T reg68=reg7*reg38;
    T reg69=reg11*reg39; T reg70=reg11*reg45; reg7=reg7*reg50; T reg71=reg39*reg50; T reg72=reg38*reg45;
    reg38=reg38*reg56; reg50=reg31*reg50; reg45=reg31*reg45; reg39=reg39*reg56; T reg73=reg34*reg40;
    reg40=reg11*reg40; reg41=reg32*reg41; reg11=reg15*reg56; reg31=reg15*reg31; T reg74=reg23*reg42;
    reg69=reg68+reg69; reg68=reg17*reg43; T reg75=reg17*reg52; T reg76=reg43*reg54; T reg77=reg23*reg64;
    reg15=reg15*reg57; reg56=reg37*reg56; reg67=reg66+reg67; reg65=reg40+reg65; reg40=reg35*reg52;
    reg59=reg59/reg60; reg58=reg58/reg60; reg53=reg55-reg53; reg55=reg35*reg64; reg51=reg49-reg51;
    reg29=reg29*reg52; reg39=reg45-reg39; reg41=reg73+reg41; reg45=reg42*reg54; reg50=reg38-reg50;
    reg52=reg42*reg52; reg61=reg63-reg61; reg60=reg62/reg60; reg72=reg71-reg72; reg57=reg33*reg57;
    reg36=reg36*reg64; reg7=reg70+reg7; reg64=reg43*reg64; reg38=reg42*reg58; reg49=reg43*reg59;
    reg43=reg43*reg60; reg62=reg35*reg58; reg63=reg35*reg59; reg42=reg42*reg60; reg17=reg17*reg58;
    reg23=reg23*reg59; reg58=reg32*reg58; reg59=reg34*reg59; reg37=reg37*reg54; reg64=reg52-reg64;
    reg40=reg76-reg40; reg45=reg55-reg45; reg75=reg77+reg75; reg54=reg24*reg54; reg56=reg67+reg56;
    reg31=reg69+reg31; reg7=reg11+reg7; reg72=skin_elem.p*reg72; reg50=skin_elem.p*reg50; reg39=skin_elem.p*reg39;
    reg57=reg41+reg57; reg15=reg65+reg15; reg29=reg36+reg29; reg35=reg24*reg35; reg68=reg74+reg68;
    reg51=skin_elem.p*reg51; reg53=skin_elem.p*reg53; reg61=skin_elem.p*reg61; reg17=reg23+reg17; reg24=reg24*reg60;
    reg49=reg38-reg49; reg62=reg43-reg62; reg11=0.044658198738520458147*skin_elem.f_surf[0]; reg42=reg63-reg42; reg60=reg33*reg60;
    reg23=0.6220084679281461892*reg72; reg32=0.6220084679281461892*skin_elem.f_surf[0]; reg33=0.044658198738520458147*reg39; reg34=0.6220084679281461892*reg39; reg36=0.16666666666666667632*reg51;
    reg38=0.6220084679281461892*reg50; reg41=0.044658198738520458147*reg72; reg43=0.16666666666666667632*reg61; reg52=0.6220084679281461892*reg61; reg55=0.16666666666666667632*reg50;
    reg63=0.6220084679281461892*reg51; reg65=0.044658198738520458147*reg53; reg66=0.6220084679281461892*reg53; reg67=0.16666666666666667632*reg39; reg69=0.044658198738520458147*reg51;
    reg70=0.044658198738520458147*reg61; reg71=0.16666666666666667632*reg72; reg35=reg68+reg35; reg37=reg29+reg37; reg54=reg75+reg54;
    reg15=reg47*reg15; reg64=skin_elem.p*reg64; reg57=reg31*reg57; reg40=skin_elem.p*reg40; reg45=skin_elem.p*reg45;
    reg7=reg44*reg7; reg31=reg56*reg31; reg29=0.16666666666666667632*reg53; reg44=0.044658198738520458147*reg50; reg58=reg59+reg58;
    reg47=0.044658198738520458147*skin_elem.f_surf[1]; reg56=0.16666666666666667632*skin_elem.f_surf[0]; reg59=0.16666666666666667632*skin_elem.f_surf[1]; reg68=0.6220084679281461892*skin_elem.f_surf[1]; reg73=0.044658198738520458147*skin_elem.f_surf[2];
    reg74=0.16666666666666667632*skin_elem.f_surf[2]; reg75=0.6220084679281461892*skin_elem.f_surf[2]; reg38=reg32+reg38; reg76=0.044658198738520458147*reg64; reg29=reg56+reg29;
    reg41=reg73+reg41; reg49=skin_elem.p*reg49; reg43=reg74+reg43; reg52=reg75+reg52; reg77=0.16666666666666667632*reg64;
    T reg78=0.044658198738520458147*reg45; reg63=reg68+reg63; reg60=reg58+reg60; reg55=reg56+reg55; reg15=reg57-reg15;
    reg65=reg11+reg65; reg57=0.6220084679281461892*reg40; reg58=0.044658198738520458147*reg40; reg66=reg32+reg66; reg54=reg46*reg54;
    reg67=reg59+reg67; reg37=reg35*reg37; reg69=reg47+reg69; reg46=0.6220084679281461892*reg64; T reg79=0.6220084679281461892*reg45;
    reg70=reg73+reg70; reg44=reg11+reg44; reg71=reg74+reg71; reg23=reg75+reg23; reg7=reg31-reg7;
    reg31=0.16666666666666667632*reg40; reg36=reg59+reg36; reg42=skin_elem.p*reg42; T reg80=0.16666666666666667632*reg45; reg33=reg47+reg33;
    reg24=reg17+reg24; reg34=reg68+reg34; reg62=skin_elem.p*reg62; reg17=0.044658198738520458147*reg42; reg57=reg32+reg57;
    T reg81=0.6220084679281461892*reg62; reg66=reg15*reg66; T reg82=0.16666666666666667632*reg62; reg58=reg11+reg58; T reg83=0.16666666666666667632*reg49;
    reg65=reg15*reg65; T reg84=0.044658198738520458147*reg49; reg67=reg7*reg67; reg31=reg56+reg31; reg69=reg15*reg69;
    reg46=reg75+reg46; reg23=reg7*reg23; reg79=reg68+reg79; reg70=reg15*reg70; reg29=reg29*reg15;
    T reg85=0.16666666666666667632*reg42; reg71=reg7*reg71; reg44=reg44*reg7; reg38=reg7*reg38; reg80=reg59+reg80;
    T reg86=0.6220084679281461892*reg42; reg76=reg73+reg76; T reg87=0.044658198738520458147*reg62; reg41=reg7*reg41; reg36=reg15*reg36;
    reg43=reg15*reg43; reg52=reg15*reg52; reg24=reg48*reg24; reg77=reg74+reg77; reg60=reg35*reg60;
    reg54=reg37-reg54; reg78=reg47+reg78; reg35=0.6220084679281461892*reg49; reg34=reg7*reg34; reg33=reg7*reg33;
    reg63=reg15*reg63; reg55=reg7*reg55; reg38=0.25*reg38; reg34=0.25*reg34; reg71=0.25*reg71;
    reg23=0.25*reg23; reg76=reg54*reg76; reg58=reg54*reg58; reg70=0.25*reg70; reg87=reg11+reg87;
    reg52=0.25*reg52; reg63=0.25*reg63; reg66=0.25*reg66; reg46=reg54*reg46; reg17=reg47+reg17;
    reg78=reg54*reg78; reg83=reg74+reg83; reg84=reg73+reg84; reg57=reg54*reg57; reg65=0.25*reg65;
    reg24=reg60-reg24; reg82=reg56+reg82; reg86=reg68+reg86; reg41=0.25*reg41; reg80=reg54*reg80;
    reg29=0.25*reg29; reg55=0.25*reg55; reg36=0.25*reg36; reg44=0.25*reg44; reg43=0.25*reg43;
    reg67=0.25*reg67; reg69=0.25*reg69; reg33=0.25*reg33; reg31=reg54*reg31; reg79=reg54*reg79;
    reg77=reg54*reg77; reg85=reg59+reg85; reg81=reg32+reg81; reg35=reg75+reg35; reg41=reg41+reg43;
    reg52=reg71+reg52; reg78=0.25*reg78; reg23=reg43+reg23; reg86=reg24*reg86; reg76=0.25*reg76;
    reg80=0.25*reg80; reg38=reg29+reg38; reg33=reg33+reg36; reg87=reg24*reg87; reg29=reg44+reg29;
    reg81=reg24*reg81; reg34=reg36+reg34; reg17=reg24*reg17; reg31=0.25*reg31; reg46=0.25*reg46;
    reg83=reg24*reg83; reg69=reg67+reg69; reg84=reg24*reg84; reg70=reg71+reg70; reg82=reg24*reg82;
    reg79=0.25*reg79; reg57=0.25*reg57; reg66=reg55+reg66; reg65=reg55+reg65; reg58=0.25*reg58;
    reg85=reg24*reg85; reg35=reg24*reg35; reg63=reg67+reg63; reg77=0.25*reg77; reg79=reg69+reg79;
    reg34=reg80+reg34; reg81=0.25*reg81; reg29=reg29+reg31; reg85=0.25*reg85; reg17=0.25*reg17;
    reg87=0.25*reg87; reg46=reg70+reg46; reg84=0.25*reg84; reg82=0.25*reg82; reg38=reg31+reg38;
    reg83=0.25*reg83; reg80=reg33+reg80; reg57=reg65+reg57; reg76=reg52+reg76; reg86=0.25*reg86;
    reg58=reg66+reg58; reg35=0.25*reg35; reg23=reg77+reg23; reg78=reg63+reg78; reg77=reg41+reg77;
    reg84=reg23+reg84; sollicitation[indices[5]+2]+=reg84; reg17=reg34+reg17; sollicitation[indices[5]+1]+=reg17; reg81=reg29+reg81;
    sollicitation[indices[0]+0]+=reg81; reg87=reg38+reg87; sollicitation[indices[5]+0]+=reg87; reg76=reg83+reg76; sollicitation[indices[4]+2]+=reg76;
    reg86=reg80+reg86; sollicitation[indices[0]+1]+=reg86; reg78=reg85+reg78; sollicitation[indices[4]+1]+=reg78; reg35=reg77+reg35;
    sollicitation[indices[0]+2]+=reg35; reg58=reg82+reg58; sollicitation[indices[4]+0]+=reg58; reg83=reg46+reg83; sollicitation[indices[1]+2]+=reg83;
    reg82=reg57+reg82; sollicitation[indices[1]+0]+=reg82; reg85=reg79+reg85; sollicitation[indices[1]+1]+=reg85;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(7)[0]; T reg1=0.21132486540518713447*elem.pos(7)[1]; T reg2=0.21132486540518713447*elem.pos(3)[0]; T reg3=0.21132486540518713447*elem.pos(3)[1]; T reg4=0.78867513459481286553*elem.pos(3)[1];
    T reg5=reg0-reg2; T reg6=reg1-reg3; T reg7=0.78867513459481286553*elem.pos(3)[0]; T reg8=0.21132486540518713447*elem.pos(7)[2]; T reg9=0.21132486540518713447*elem.pos(3)[2];
    T reg10=0.78867513459481286553*elem.pos(7)[1]; T reg11=0.78867513459481286553*elem.pos(6)[1]; T reg12=0.78867513459481286553*elem.pos(7)[0]; T reg13=0.78867513459481286553*elem.pos(6)[0]; T reg14=0.78867513459481286553*elem.pos(7)[2];
    T reg15=0.78867513459481286553*elem.pos(6)[2]; T reg16=0.78867513459481286553*elem.pos(3)[2]; T reg17=0.21132486540518713447*elem.pos(6)[1]; T reg18=0.21132486540518713447*elem.pos(6)[0]; T reg19=0.78867513459481286553*elem.pos(2)[1];
    T reg20=0.78867513459481286553*elem.pos(2)[0]; reg5=reg13+reg5; reg6=reg11+reg6; T reg21=reg8-reg9; T reg22=reg12-reg7;
    T reg23=reg10-reg4; reg5=reg5-reg20; reg6=reg6-reg19; reg21=reg15+reg21; reg22=reg18+reg22;
    T reg24=0.21132486540518713447*elem.pos(6)[2]; reg23=reg17+reg23; T reg25=reg14-reg16; T reg26=0.78867513459481286553*elem.pos(2)[2]; T reg27=0.21132486540518713447*elem.pos(2)[0];
    T reg28=0.21132486540518713447*elem.pos(2)[1]; T reg29=pow(reg5,2); reg23=reg23-reg28; reg25=reg24+reg25; T reg30=pow(reg6,2);
    reg22=reg22-reg27; T reg31=0.21132486540518713447*elem.pos(2)[2]; reg21=reg21-reg26; reg25=reg25-reg31; T reg32=pow(reg21,2);
    reg30=reg29+reg30; reg29=pow(reg22,2); T reg33=pow(reg23,2); T reg34=reg3+reg10; T reg35=reg4+reg1;
    T reg36=pow(reg25,2); reg32=reg30+reg32; reg33=reg29+reg33; reg29=reg2+reg12; reg30=reg7+reg0;
    reg32=pow(reg32,0.5); reg36=reg33+reg36; reg34=reg11-reg34; reg33=reg9+reg14; reg29=reg13-reg29;
    T reg37=reg16+reg8; reg30=reg18-reg30; reg35=reg17-reg35; reg34=reg28+reg34; reg36=pow(reg36,0.5);
    reg33=reg15-reg33; reg37=reg24-reg37; reg35=reg19+reg35; T reg38=reg5/reg32; T reg39=reg6/reg32;
    reg29=reg27+reg29; reg30=reg20+reg30; T reg40=reg38*reg30; T reg41=reg39*reg35; reg37=reg26+reg37;
    reg33=reg31+reg33; reg32=reg21/reg32; T reg42=reg22/reg36; T reg43=reg39*reg34; T reg44=reg38*reg29;
    T reg45=reg23/reg36; reg41=reg40+reg41; reg40=reg32*reg37; T reg46=reg34*reg45; T reg47=reg29*reg42;
    reg36=reg25/reg36; T reg48=reg32*reg33; reg43=reg44+reg43; reg46=reg47+reg46; reg44=reg33*reg36;
    reg48=reg43+reg48; reg43=reg30*reg42; reg47=reg35*reg45; reg40=reg41+reg40; reg41=reg37*reg36;
    reg44=reg46+reg44; reg43=reg47+reg43; reg46=reg38*reg48; reg47=reg39*reg48; T reg49=reg39*reg40;
    T reg50=reg38*reg40; reg50=reg30-reg50; T reg51=reg42*reg44; T reg52=reg32*reg48; reg49=reg35-reg49;
    reg47=reg34-reg47; reg46=reg29-reg46; T reg53=reg32*reg40; T reg54=reg45*reg44; reg41=reg43+reg41;
    reg43=pow(reg47,2); T reg55=pow(reg46,2); reg52=reg33-reg52; T reg56=pow(reg50,2); T reg57=pow(reg49,2);
    reg53=reg37-reg53; T reg58=reg42*reg41; reg51=reg29-reg51; T reg59=reg45*reg41; reg54=reg34-reg54;
    T reg60=reg36*reg44; T reg61=pow(reg52,2); reg43=reg55+reg43; reg60=reg33-reg60; reg55=pow(reg51,2);
    T reg62=reg36*reg41; T reg63=pow(reg54,2); reg59=reg35-reg59; reg58=reg30-reg58; T reg64=pow(reg53,2);
    reg57=reg56+reg57; reg63=reg55+reg63; reg55=pow(reg60,2); reg61=reg43+reg61; reg64=reg57+reg64;
    reg62=reg37-reg62; reg43=pow(reg59,2); reg56=pow(reg58,2); reg55=reg63+reg55; reg61=pow(reg61,0.5);
    reg64=pow(reg64,0.5); reg57=pow(reg62,2); reg43=reg56+reg43; reg55=pow(reg55,0.5); reg53=reg53/reg64;
    reg52=reg52/reg61; reg47=reg47/reg61; reg61=reg46/reg61; reg49=reg49/reg64; reg64=reg50/reg64;
    reg57=reg43+reg57; reg43=reg39*reg61; reg46=reg30*reg64; reg50=reg35*reg49; reg56=reg5*reg64;
    reg63=reg6*reg49; T reg65=reg39*reg53; T reg66=reg32*reg49; T reg67=reg32*reg64; T reg68=reg38*reg53;
    reg49=reg38*reg49; reg64=reg39*reg64; reg60=reg60/reg55; reg54=reg54/reg55; reg55=reg51/reg55;
    reg57=pow(reg57,0.5); reg51=reg5*reg38; T reg69=reg6*reg39; T reg70=reg29*reg61; T reg71=reg34*reg47;
    reg5=reg5*reg61; reg6=reg6*reg47; T reg72=reg38*reg52; reg38=reg38*reg47; reg39=reg39*reg52;
    reg47=reg32*reg47; reg61=reg32*reg61; reg62=reg62/reg57; reg50=reg46+reg50; reg72=reg61-reg72;
    reg46=reg37*reg53; reg29=reg29*reg55; reg43=reg38-reg43; reg34=reg34*reg54; reg63=reg56+reg63;
    reg53=reg21*reg53; reg38=reg36*reg54; reg56=reg45*reg60; reg66=reg65-reg66; reg68=reg67-reg68;
    reg64=reg49-reg64; reg49=reg23*reg54; reg61=reg22*reg55; reg6=reg5+reg6; reg5=reg21*reg52;
    reg65=reg36*reg55; reg67=reg42*reg60; reg52=reg33*reg52; reg71=reg70+reg71; reg32=reg21*reg32;
    reg69=reg51+reg69; reg47=reg39-reg47; reg21=reg22*reg42; reg54=reg42*reg54; reg55=reg45*reg55;
    reg39=reg23*reg45; reg58=reg58/reg57; reg57=reg59/reg57; reg34=reg29+reg34; reg39=reg21+reg39;
    reg64=skin_elem.p*reg64; reg33=reg33*reg60; reg49=reg61+reg49; reg21=reg25*reg36; reg60=reg25*reg60;
    reg29=reg45*reg58; reg51=reg42*reg57; reg42=reg42*reg62; reg59=reg36*reg58; reg36=reg36*reg57;
    reg45=reg45*reg62; reg23=reg23*reg57; reg22=reg22*reg58; reg57=reg35*reg57; reg58=reg30*reg58;
    reg55=reg54-reg55; reg67=reg65-reg67; reg68=skin_elem.p*reg68; reg66=skin_elem.p*reg66; reg53=reg63+reg53;
    reg38=reg56-reg38; reg46=reg50+reg46; reg43=skin_elem.p*reg43; reg72=skin_elem.p*reg72; reg47=skin_elem.p*reg47;
    reg32=reg69+reg32; reg52=reg71+reg52; reg5=reg6+reg5; reg6=0.044658198738520458147*reg47; reg30=0.16666666666666667632*reg66;
    reg35=0.044658198738520458147*reg72; reg50=0.16666666666666667632*reg68; reg54=0.044658198738520458147*reg43; reg56=0.16666666666666667632*reg64; reg61=0.6220084679281461892*reg47;
    reg63=0.6220084679281461892*reg72; reg65=0.6220084679281461892*reg43; reg69=0.044658198738520458147*reg66; reg70=0.044658198738520458147*reg68; reg71=0.044658198738520458147*reg64;
    T reg73=0.6220084679281461892*reg64; reg29=reg51-reg29; reg42=reg59-reg42; reg36=reg45-reg36; reg67=skin_elem.p*reg67;
    reg25=reg25*reg62; reg23=reg22+reg23; reg60=reg49+reg60; reg55=skin_elem.p*reg55; reg62=reg37*reg62;
    reg57=reg58+reg57; reg38=skin_elem.p*reg38; reg22=0.16666666666666667632*reg72; reg37=0.6220084679281461892*reg66; reg45=0.16666666666666667632*skin_elem.f_surf[0];
    reg49=0.6220084679281461892*reg68; reg51=0.16666666666666667632*reg47; reg58=0.044658198738520458147*skin_elem.f_surf[1]; reg59=0.6220084679281461892*skin_elem.f_surf[2]; T reg74=0.6220084679281461892*skin_elem.f_surf[0];
    T reg75=0.044658198738520458147*skin_elem.f_surf[0]; T reg76=0.16666666666666667632*reg43; T reg77=0.16666666666666667632*skin_elem.f_surf[2]; T reg78=0.6220084679281461892*skin_elem.f_surf[1]; reg33=reg34+reg33;
    reg21=reg39+reg21; reg34=0.16666666666666667632*skin_elem.f_surf[1]; reg39=0.044658198738520458147*skin_elem.f_surf[2]; reg53=reg40*reg53; reg46=reg32*reg46;
    reg5=reg48*reg5; reg52=reg32*reg52; reg63=reg78+reg63; reg62=reg57+reg62; reg25=reg23+reg25;
    reg23=0.044658198738520458147*reg38; reg61=reg74+reg61; reg32=0.16666666666666667632*reg55; reg36=skin_elem.p*reg36; reg56=reg77+reg56;
    reg76=reg77+reg76; reg42=skin_elem.p*reg42; reg54=reg39+reg54; reg51=reg45+reg51; reg29=skin_elem.p*reg29;
    reg73=reg59+reg73; reg40=0.16666666666666667632*reg67; reg50=reg34+reg50; reg48=0.044658198738520458147*reg55; reg35=reg58+reg35;
    reg57=0.16666666666666667632*reg38; reg30=reg45+reg30; T reg79=0.044658198738520458147*reg67; reg70=reg58+reg70; T reg80=0.6220084679281461892*reg67;
    T reg81=0.6220084679281461892*reg38; reg71=reg39+reg71; reg22=reg34+reg22; reg37=reg74+reg37; reg69=reg75+reg69;
    reg5=reg52-reg5; reg53=reg46-reg53; reg6=reg75+reg6; reg49=reg78+reg49; reg46=0.6220084679281461892*reg55;
    reg60=reg44*reg60; reg65=reg59+reg65; reg33=reg21*reg33; reg44=0.6220084679281461892*reg36; reg35=reg5*reg35;
    reg71=reg53*reg71; reg57=reg45+reg57; reg30=reg53*reg30; reg80=reg78+reg80; reg50=reg53*reg50;
    reg46=reg59+reg46; reg70=reg53*reg70; reg40=reg34+reg40; reg52=0.6220084679281461892*reg42; reg76=reg76*reg5;
    reg81=reg74+reg81; reg54=reg5*reg54; reg69=reg53*reg69; reg56=reg53*reg56; reg32=reg77+reg32;
    T reg82=0.6220084679281461892*reg29; T reg83=0.044658198738520458147*reg29; reg61=reg5*reg61; T reg84=0.044658198738520458147*reg36; reg65=reg5*reg65;
    reg63=reg5*reg63; T reg85=0.044658198738520458147*reg42; reg6=reg6*reg5; reg62=reg21*reg62; reg73=reg53*reg73;
    reg60=reg33-reg60; reg51=reg51*reg5; reg48=reg39+reg48; reg37=reg37*reg53; reg49=reg49*reg53;
    reg79=reg58+reg79; reg25=reg41*reg25; reg21=0.16666666666666667632*reg29; reg22=reg22*reg5; reg23=reg75+reg23;
    reg33=0.16666666666666667632*reg36; reg41=0.16666666666666667632*reg42; reg44=reg74+reg44; reg61=0.25*reg61; reg79=reg79*reg60;
    reg84=reg75+reg84; reg46=reg60*reg46; reg82=reg59+reg82; reg25=reg62-reg25; reg6=0.25*reg6;
    reg32=reg60*reg32; reg63=0.25*reg63; reg85=reg58+reg85; reg65=0.25*reg65; reg83=reg39+reg83;
    reg71=0.25*reg71; reg49=0.25*reg49; reg69=0.25*reg69; reg22=0.25*reg22; reg81=reg60*reg81;
    reg23=reg23*reg60; reg70=0.25*reg70; reg33=reg45+reg33; reg80=reg60*reg80; reg41=reg34+reg41;
    reg52=reg78+reg52; reg50=0.25*reg50; reg73=0.25*reg73; reg30=0.25*reg30; reg21=reg77+reg21;
    reg37=0.25*reg37; reg54=0.25*reg54; reg51=0.25*reg51; reg76=0.25*reg76; reg57=reg60*reg57;
    reg35=0.25*reg35; reg48=reg60*reg48; reg56=0.25*reg56; reg40=reg60*reg40; reg85=reg25*reg85;
    reg35=reg35+reg50; reg79=0.25*reg79; reg49=reg49+reg22; reg33=reg33*reg25; reg65=reg56+reg65;
    reg81=0.25*reg81; reg71=reg76+reg71; reg73=reg76+reg73; reg83=reg25*reg83; reg48=0.25*reg48;
    reg57=0.25*reg57; reg69=reg51+reg69; reg56=reg54+reg56; reg41=reg41*reg25; reg23=0.25*reg23;
    reg32=0.25*reg32; reg37=reg51+reg37; reg44=reg44*reg25; reg82=reg25*reg82; reg80=0.25*reg80;
    reg46=0.25*reg46; reg61=reg30+reg61; reg52=reg25*reg52; reg84=reg25*reg84; reg70=reg22+reg70;
    reg30=reg6+reg30; reg21=reg25*reg21; reg40=0.25*reg40; reg63=reg50+reg63; reg81=reg69+reg81;
    reg21=0.25*reg21; reg33=0.25*reg33; reg80=reg70+reg80; reg30=reg30+reg57; reg56=reg56+reg32;
    reg82=0.25*reg82; reg44=0.25*reg44; reg52=0.25*reg52; reg61=reg57+reg61; reg84=0.25*reg84;
    reg35=reg35+reg40; reg23=reg37+reg23; reg63=reg40+reg63; reg85=0.25*reg85; reg49=reg79+reg49;
    reg41=0.25*reg41; reg65=reg32+reg65; reg83=0.25*reg83; reg48=reg73+reg48; reg46=reg71+reg46;
    reg46=reg21+reg46; sollicitation[indices[7]+2]+=reg46; reg80=reg41+reg80; sollicitation[indices[7]+1]+=reg80; reg23=reg23+reg33;
    sollicitation[indices[2]+0]+=reg23; reg81=reg33+reg81; sollicitation[indices[7]+0]+=reg81; reg83=reg65+reg83; sollicitation[indices[6]+2]+=reg83;
    reg41=reg49+reg41; sollicitation[indices[2]+1]+=reg41; reg85=reg63+reg85; sollicitation[indices[6]+1]+=reg85; reg84=reg61+reg84;
    sollicitation[indices[6]+0]+=reg84; reg82=reg56+reg82; sollicitation[indices[3]+2]+=reg82; reg52=reg35+reg52; sollicitation[indices[3]+1]+=reg52;
    reg30=reg44+reg30; sollicitation[indices[3]+0]+=reg30; reg21=reg48+reg21; sollicitation[indices[2]+2]+=reg21;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(7)[0]; T reg1=0.21132486540518713447*elem.pos(7)[1]; T reg2=0.21132486540518713447*elem.pos(3)[0]; T reg3=0.21132486540518713447*elem.pos(3)[1]; T reg4=0.78867513459481286553*elem.pos(3)[1];
    T reg5=reg0-reg2; T reg6=reg1-reg3; T reg7=0.78867513459481286553*elem.pos(3)[0]; T reg8=0.21132486540518713447*elem.pos(7)[2]; T reg9=0.21132486540518713447*elem.pos(3)[2];
    T reg10=0.78867513459481286553*elem.pos(7)[1]; T reg11=0.78867513459481286553*elem.pos(6)[1]; T reg12=0.78867513459481286553*elem.pos(7)[0]; T reg13=0.78867513459481286553*elem.pos(6)[0]; T reg14=0.78867513459481286553*elem.pos(7)[2];
    T reg15=0.78867513459481286553*elem.pos(6)[2]; T reg16=0.78867513459481286553*elem.pos(3)[2]; T reg17=0.21132486540518713447*elem.pos(6)[1]; T reg18=0.21132486540518713447*elem.pos(6)[0]; T reg19=0.78867513459481286553*elem.pos(2)[1];
    T reg20=0.78867513459481286553*elem.pos(2)[0]; reg5=reg13+reg5; reg6=reg11+reg6; T reg21=reg8-reg9; T reg22=reg12-reg7;
    T reg23=reg10-reg4; reg5=reg5-reg20; reg6=reg6-reg19; reg21=reg15+reg21; reg22=reg18+reg22;
    T reg24=0.21132486540518713447*elem.pos(6)[2]; reg23=reg17+reg23; T reg25=reg14-reg16; T reg26=0.78867513459481286553*elem.pos(2)[2]; T reg27=0.21132486540518713447*elem.pos(2)[0];
    T reg28=0.21132486540518713447*elem.pos(2)[1]; T reg29=pow(reg5,2); reg23=reg23-reg28; reg25=reg24+reg25; T reg30=pow(reg6,2);
    reg22=reg22-reg27; T reg31=0.21132486540518713447*elem.pos(2)[2]; reg21=reg21-reg26; reg25=reg25-reg31; T reg32=pow(reg21,2);
    reg30=reg29+reg30; reg29=pow(reg22,2); T reg33=pow(reg23,2); T reg34=reg3+reg10; T reg35=reg4+reg1;
    T reg36=pow(reg25,2); reg32=reg30+reg32; reg33=reg29+reg33; reg29=reg2+reg12; reg30=reg7+reg0;
    reg32=pow(reg32,0.5); reg36=reg33+reg36; reg34=reg11-reg34; reg33=reg9+reg14; reg29=reg13-reg29;
    T reg37=reg16+reg8; reg30=reg18-reg30; reg35=reg17-reg35; reg34=reg28+reg34; reg36=pow(reg36,0.5);
    reg33=reg15-reg33; reg37=reg24-reg37; reg35=reg19+reg35; T reg38=reg5/reg32; T reg39=reg6/reg32;
    reg29=reg27+reg29; reg30=reg20+reg30; T reg40=reg38*reg30; T reg41=reg39*reg35; reg37=reg26+reg37;
    reg33=reg31+reg33; reg32=reg21/reg32; T reg42=reg22/reg36; T reg43=reg39*reg34; T reg44=reg38*reg29;
    T reg45=reg23/reg36; reg41=reg40+reg41; reg40=reg32*reg37; T reg46=reg34*reg45; T reg47=reg29*reg42;
    reg36=reg25/reg36; T reg48=reg32*reg33; reg43=reg44+reg43; reg46=reg47+reg46; reg44=reg33*reg36;
    reg48=reg43+reg48; reg43=reg30*reg42; reg47=reg35*reg45; reg40=reg41+reg40; reg41=reg37*reg36;
    reg44=reg46+reg44; reg43=reg47+reg43; reg46=reg38*reg48; reg47=reg39*reg48; T reg49=reg39*reg40;
    T reg50=reg38*reg40; reg50=reg30-reg50; T reg51=reg42*reg44; T reg52=reg32*reg48; reg49=reg35-reg49;
    reg47=reg34-reg47; reg46=reg29-reg46; T reg53=reg32*reg40; T reg54=reg45*reg44; reg41=reg43+reg41;
    reg43=pow(reg47,2); T reg55=pow(reg46,2); reg52=reg33-reg52; T reg56=pow(reg50,2); T reg57=pow(reg49,2);
    reg53=reg37-reg53; T reg58=reg42*reg41; reg51=reg29-reg51; T reg59=reg45*reg41; reg54=reg34-reg54;
    T reg60=reg36*reg44; T reg61=pow(reg52,2); reg43=reg55+reg43; reg60=reg33-reg60; reg55=pow(reg51,2);
    T reg62=reg36*reg41; T reg63=pow(reg54,2); reg59=reg35-reg59; reg58=reg30-reg58; T reg64=pow(reg53,2);
    reg57=reg56+reg57; reg63=reg55+reg63; reg55=pow(reg60,2); reg61=reg43+reg61; reg64=reg57+reg64;
    reg62=reg37-reg62; reg43=pow(reg59,2); reg56=pow(reg58,2); reg55=reg63+reg55; reg61=pow(reg61,0.5);
    reg64=pow(reg64,0.5); reg57=pow(reg62,2); reg43=reg56+reg43; reg55=pow(reg55,0.5); reg53=reg53/reg64;
    reg52=reg52/reg61; reg47=reg47/reg61; reg61=reg46/reg61; reg49=reg49/reg64; reg64=reg50/reg64;
    reg57=reg43+reg57; reg43=reg39*reg61; reg46=reg30*reg64; reg50=reg35*reg49; reg56=reg5*reg64;
    reg63=reg6*reg49; T reg65=reg39*reg53; T reg66=reg32*reg49; T reg67=reg32*reg64; T reg68=reg38*reg53;
    reg49=reg38*reg49; reg64=reg39*reg64; reg60=reg60/reg55; reg54=reg54/reg55; reg55=reg51/reg55;
    reg57=pow(reg57,0.5); reg51=reg5*reg38; T reg69=reg6*reg39; T reg70=reg29*reg61; T reg71=reg34*reg47;
    reg5=reg5*reg61; reg6=reg6*reg47; T reg72=reg38*reg52; reg38=reg38*reg47; reg39=reg39*reg52;
    reg47=reg32*reg47; reg61=reg32*reg61; reg62=reg62/reg57; reg50=reg46+reg50; reg72=reg61-reg72;
    reg46=reg37*reg53; reg29=reg29*reg55; reg43=reg38-reg43; reg34=reg34*reg54; reg63=reg56+reg63;
    reg53=reg21*reg53; reg38=reg36*reg54; reg56=reg45*reg60; reg66=reg65-reg66; reg68=reg67-reg68;
    reg64=reg49-reg64; reg49=reg23*reg54; reg61=reg22*reg55; reg6=reg5+reg6; reg5=reg21*reg52;
    reg65=reg36*reg55; reg67=reg42*reg60; reg52=reg33*reg52; reg71=reg70+reg71; reg32=reg21*reg32;
    reg69=reg51+reg69; reg47=reg39-reg47; reg21=reg22*reg42; reg54=reg42*reg54; reg55=reg45*reg55;
    reg39=reg23*reg45; reg58=reg58/reg57; reg57=reg59/reg57; reg34=reg29+reg34; reg39=reg21+reg39;
    reg64=skin_elem.p*reg64; reg33=reg33*reg60; reg49=reg61+reg49; reg21=reg25*reg36; reg60=reg25*reg60;
    reg29=reg45*reg58; reg51=reg42*reg57; reg42=reg42*reg62; reg59=reg36*reg58; reg36=reg36*reg57;
    reg45=reg45*reg62; reg23=reg23*reg57; reg22=reg22*reg58; reg57=reg35*reg57; reg58=reg30*reg58;
    reg55=reg54-reg55; reg67=reg65-reg67; reg68=skin_elem.p*reg68; reg66=skin_elem.p*reg66; reg53=reg63+reg53;
    reg38=reg56-reg38; reg46=reg50+reg46; reg43=skin_elem.p*reg43; reg72=skin_elem.p*reg72; reg47=skin_elem.p*reg47;
    reg32=reg69+reg32; reg52=reg71+reg52; reg5=reg6+reg5; reg6=0.044658198738520458147*reg47; reg30=0.16666666666666667632*reg66;
    reg35=0.044658198738520458147*reg72; reg50=0.16666666666666667632*reg68; reg54=0.044658198738520458147*reg43; reg56=0.16666666666666667632*reg64; reg61=0.6220084679281461892*reg47;
    reg63=0.6220084679281461892*reg72; reg65=0.6220084679281461892*reg43; reg69=0.044658198738520458147*reg66; reg70=0.044658198738520458147*reg68; reg71=0.044658198738520458147*reg64;
    T reg73=0.6220084679281461892*reg64; reg29=reg51-reg29; reg42=reg59-reg42; reg36=reg45-reg36; reg67=skin_elem.p*reg67;
    reg25=reg25*reg62; reg23=reg22+reg23; reg60=reg49+reg60; reg55=skin_elem.p*reg55; reg62=reg37*reg62;
    reg57=reg58+reg57; reg38=skin_elem.p*reg38; reg22=0.16666666666666667632*reg72; reg37=0.6220084679281461892*reg66; reg45=0.16666666666666667632*skin_elem.f_surf[0];
    reg49=0.6220084679281461892*reg68; reg51=0.16666666666666667632*reg47; reg58=0.044658198738520458147*skin_elem.f_surf[1]; reg59=0.6220084679281461892*skin_elem.f_surf[2]; T reg74=0.6220084679281461892*skin_elem.f_surf[0];
    T reg75=0.044658198738520458147*skin_elem.f_surf[0]; T reg76=0.16666666666666667632*reg43; T reg77=0.16666666666666667632*skin_elem.f_surf[2]; T reg78=0.6220084679281461892*skin_elem.f_surf[1]; reg33=reg34+reg33;
    reg21=reg39+reg21; reg34=0.16666666666666667632*skin_elem.f_surf[1]; reg39=0.044658198738520458147*skin_elem.f_surf[2]; reg53=reg40*reg53; reg46=reg32*reg46;
    reg5=reg48*reg5; reg52=reg32*reg52; reg63=reg78+reg63; reg62=reg57+reg62; reg25=reg23+reg25;
    reg23=0.044658198738520458147*reg38; reg61=reg74+reg61; reg32=0.16666666666666667632*reg55; reg36=skin_elem.p*reg36; reg56=reg77+reg56;
    reg76=reg77+reg76; reg42=skin_elem.p*reg42; reg54=reg39+reg54; reg51=reg45+reg51; reg29=skin_elem.p*reg29;
    reg73=reg59+reg73; reg40=0.16666666666666667632*reg67; reg50=reg34+reg50; reg48=0.044658198738520458147*reg55; reg35=reg58+reg35;
    reg57=0.16666666666666667632*reg38; reg30=reg45+reg30; T reg79=0.044658198738520458147*reg67; reg70=reg58+reg70; T reg80=0.6220084679281461892*reg67;
    T reg81=0.6220084679281461892*reg38; reg71=reg39+reg71; reg22=reg34+reg22; reg37=reg74+reg37; reg69=reg75+reg69;
    reg5=reg52-reg5; reg53=reg46-reg53; reg6=reg75+reg6; reg49=reg78+reg49; reg46=0.6220084679281461892*reg55;
    reg60=reg44*reg60; reg65=reg59+reg65; reg33=reg21*reg33; reg44=0.6220084679281461892*reg36; reg35=reg5*reg35;
    reg71=reg53*reg71; reg57=reg45+reg57; reg30=reg53*reg30; reg80=reg78+reg80; reg50=reg53*reg50;
    reg46=reg59+reg46; reg70=reg53*reg70; reg40=reg34+reg40; reg52=0.6220084679281461892*reg42; reg76=reg76*reg5;
    reg81=reg74+reg81; reg54=reg5*reg54; reg69=reg53*reg69; reg56=reg53*reg56; reg32=reg77+reg32;
    T reg82=0.6220084679281461892*reg29; T reg83=0.044658198738520458147*reg29; reg61=reg5*reg61; T reg84=0.044658198738520458147*reg36; reg65=reg5*reg65;
    reg63=reg5*reg63; T reg85=0.044658198738520458147*reg42; reg6=reg6*reg5; reg62=reg21*reg62; reg73=reg53*reg73;
    reg60=reg33-reg60; reg51=reg51*reg5; reg48=reg39+reg48; reg37=reg37*reg53; reg49=reg49*reg53;
    reg79=reg58+reg79; reg25=reg41*reg25; reg21=0.16666666666666667632*reg29; reg22=reg22*reg5; reg23=reg75+reg23;
    reg33=0.16666666666666667632*reg36; reg41=0.16666666666666667632*reg42; reg44=reg74+reg44; reg61=0.25*reg61; reg79=reg79*reg60;
    reg84=reg75+reg84; reg46=reg60*reg46; reg82=reg59+reg82; reg25=reg62-reg25; reg6=0.25*reg6;
    reg32=reg60*reg32; reg63=0.25*reg63; reg85=reg58+reg85; reg65=0.25*reg65; reg83=reg39+reg83;
    reg71=0.25*reg71; reg49=0.25*reg49; reg69=0.25*reg69; reg22=0.25*reg22; reg81=reg60*reg81;
    reg23=reg23*reg60; reg70=0.25*reg70; reg33=reg45+reg33; reg80=reg60*reg80; reg41=reg34+reg41;
    reg52=reg78+reg52; reg50=0.25*reg50; reg73=0.25*reg73; reg30=0.25*reg30; reg21=reg77+reg21;
    reg37=0.25*reg37; reg54=0.25*reg54; reg51=0.25*reg51; reg76=0.25*reg76; reg57=reg60*reg57;
    reg35=0.25*reg35; reg48=reg60*reg48; reg56=0.25*reg56; reg40=reg60*reg40; reg85=reg25*reg85;
    reg35=reg35+reg50; reg79=0.25*reg79; reg49=reg49+reg22; reg33=reg33*reg25; reg65=reg56+reg65;
    reg81=0.25*reg81; reg71=reg76+reg71; reg73=reg76+reg73; reg83=reg25*reg83; reg48=0.25*reg48;
    reg57=0.25*reg57; reg69=reg51+reg69; reg56=reg54+reg56; reg41=reg41*reg25; reg23=0.25*reg23;
    reg32=0.25*reg32; reg37=reg51+reg37; reg44=reg44*reg25; reg82=reg25*reg82; reg80=0.25*reg80;
    reg46=0.25*reg46; reg61=reg30+reg61; reg52=reg25*reg52; reg84=reg25*reg84; reg70=reg22+reg70;
    reg30=reg6+reg30; reg21=reg25*reg21; reg40=0.25*reg40; reg63=reg50+reg63; reg81=reg69+reg81;
    reg21=0.25*reg21; reg33=0.25*reg33; reg80=reg70+reg80; reg30=reg30+reg57; reg56=reg56+reg32;
    reg82=0.25*reg82; reg44=0.25*reg44; reg52=0.25*reg52; reg61=reg57+reg61; reg84=0.25*reg84;
    reg35=reg35+reg40; reg23=reg37+reg23; reg63=reg40+reg63; reg85=0.25*reg85; reg49=reg79+reg49;
    reg41=0.25*reg41; reg65=reg32+reg65; reg83=0.25*reg83; reg48=reg73+reg48; reg46=reg71+reg46;
    reg46=reg21+reg46; sollicitation[indices[7]+2]+=reg46; reg80=reg41+reg80; sollicitation[indices[7]+1]+=reg80; reg23=reg23+reg33;
    sollicitation[indices[2]+0]+=reg23; reg81=reg33+reg81; sollicitation[indices[7]+0]+=reg81; reg83=reg65+reg83; sollicitation[indices[6]+2]+=reg83;
    reg41=reg49+reg41; sollicitation[indices[2]+1]+=reg41; reg85=reg63+reg85; sollicitation[indices[6]+1]+=reg85; reg84=reg61+reg84;
    sollicitation[indices[6]+0]+=reg84; reg82=reg56+reg82; sollicitation[indices[3]+2]+=reg82; reg52=reg35+reg52; sollicitation[indices[3]+1]+=reg52;
    reg30=reg44+reg30; sollicitation[indices[3]+0]+=reg30; reg21=reg48+reg21; sollicitation[indices[2]+2]+=reg21;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(7)[0]; T reg1=0.21132486540518713447*elem.pos(7)[1]; T reg2=0.21132486540518713447*elem.pos(3)[0]; T reg3=0.21132486540518713447*elem.pos(3)[1]; T reg4=0.78867513459481286553*elem.pos(3)[1];
    T reg5=reg0-reg2; T reg6=reg1-reg3; T reg7=0.78867513459481286553*elem.pos(3)[0]; T reg8=0.21132486540518713447*elem.pos(7)[2]; T reg9=0.21132486540518713447*elem.pos(3)[2];
    T reg10=0.78867513459481286553*elem.pos(7)[1]; T reg11=0.78867513459481286553*elem.pos(6)[1]; T reg12=0.78867513459481286553*elem.pos(7)[0]; T reg13=0.78867513459481286553*elem.pos(6)[0]; T reg14=0.78867513459481286553*elem.pos(7)[2];
    T reg15=0.78867513459481286553*elem.pos(6)[2]; T reg16=0.78867513459481286553*elem.pos(3)[2]; T reg17=0.21132486540518713447*elem.pos(6)[1]; T reg18=0.21132486540518713447*elem.pos(6)[0]; T reg19=0.78867513459481286553*elem.pos(2)[1];
    T reg20=0.78867513459481286553*elem.pos(2)[0]; reg5=reg13+reg5; reg6=reg11+reg6; T reg21=reg8-reg9; T reg22=reg12-reg7;
    T reg23=reg10-reg4; reg5=reg5-reg20; reg6=reg6-reg19; reg21=reg15+reg21; reg22=reg18+reg22;
    T reg24=0.21132486540518713447*elem.pos(6)[2]; reg23=reg17+reg23; T reg25=reg14-reg16; T reg26=0.78867513459481286553*elem.pos(2)[2]; T reg27=0.21132486540518713447*elem.pos(2)[0];
    T reg28=0.21132486540518713447*elem.pos(2)[1]; T reg29=pow(reg5,2); reg23=reg23-reg28; reg25=reg24+reg25; T reg30=pow(reg6,2);
    reg22=reg22-reg27; T reg31=0.21132486540518713447*elem.pos(2)[2]; reg21=reg21-reg26; reg25=reg25-reg31; T reg32=pow(reg21,2);
    reg30=reg29+reg30; reg29=pow(reg22,2); T reg33=pow(reg23,2); T reg34=reg3+reg10; T reg35=reg4+reg1;
    T reg36=pow(reg25,2); reg32=reg30+reg32; reg33=reg29+reg33; reg29=reg2+reg12; reg30=reg7+reg0;
    reg32=pow(reg32,0.5); reg36=reg33+reg36; reg34=reg11-reg34; reg33=reg9+reg14; reg29=reg13-reg29;
    T reg37=reg16+reg8; reg30=reg18-reg30; reg35=reg17-reg35; reg34=reg28+reg34; reg36=pow(reg36,0.5);
    reg33=reg15-reg33; reg37=reg24-reg37; reg35=reg19+reg35; T reg38=reg5/reg32; T reg39=reg6/reg32;
    reg29=reg27+reg29; reg30=reg20+reg30; T reg40=reg38*reg30; T reg41=reg39*reg35; reg37=reg26+reg37;
    reg33=reg31+reg33; reg32=reg21/reg32; T reg42=reg22/reg36; T reg43=reg39*reg34; T reg44=reg38*reg29;
    T reg45=reg23/reg36; reg41=reg40+reg41; reg40=reg32*reg37; T reg46=reg34*reg45; T reg47=reg29*reg42;
    reg36=reg25/reg36; T reg48=reg32*reg33; reg43=reg44+reg43; reg46=reg47+reg46; reg44=reg33*reg36;
    reg48=reg43+reg48; reg43=reg30*reg42; reg47=reg35*reg45; reg40=reg41+reg40; reg41=reg37*reg36;
    reg44=reg46+reg44; reg43=reg47+reg43; reg46=reg38*reg48; reg47=reg39*reg48; T reg49=reg39*reg40;
    T reg50=reg38*reg40; reg50=reg30-reg50; T reg51=reg42*reg44; T reg52=reg32*reg48; reg49=reg35-reg49;
    reg47=reg34-reg47; reg46=reg29-reg46; T reg53=reg32*reg40; T reg54=reg45*reg44; reg41=reg43+reg41;
    reg43=pow(reg47,2); T reg55=pow(reg46,2); reg52=reg33-reg52; T reg56=pow(reg50,2); T reg57=pow(reg49,2);
    reg53=reg37-reg53; T reg58=reg42*reg41; reg51=reg29-reg51; T reg59=reg45*reg41; reg54=reg34-reg54;
    T reg60=reg36*reg44; T reg61=pow(reg52,2); reg43=reg55+reg43; reg60=reg33-reg60; reg55=pow(reg51,2);
    T reg62=reg36*reg41; T reg63=pow(reg54,2); reg59=reg35-reg59; reg58=reg30-reg58; T reg64=pow(reg53,2);
    reg57=reg56+reg57; reg63=reg55+reg63; reg55=pow(reg60,2); reg61=reg43+reg61; reg64=reg57+reg64;
    reg62=reg37-reg62; reg43=pow(reg59,2); reg56=pow(reg58,2); reg55=reg63+reg55; reg61=pow(reg61,0.5);
    reg64=pow(reg64,0.5); reg57=pow(reg62,2); reg43=reg56+reg43; reg55=pow(reg55,0.5); reg53=reg53/reg64;
    reg52=reg52/reg61; reg47=reg47/reg61; reg61=reg46/reg61; reg49=reg49/reg64; reg64=reg50/reg64;
    reg57=reg43+reg57; reg43=reg39*reg61; reg46=reg30*reg64; reg50=reg35*reg49; reg56=reg5*reg64;
    reg63=reg6*reg49; T reg65=reg39*reg53; T reg66=reg32*reg49; T reg67=reg32*reg64; T reg68=reg38*reg53;
    reg49=reg38*reg49; reg64=reg39*reg64; reg60=reg60/reg55; reg54=reg54/reg55; reg55=reg51/reg55;
    reg57=pow(reg57,0.5); reg51=reg5*reg38; T reg69=reg6*reg39; T reg70=reg29*reg61; T reg71=reg34*reg47;
    reg5=reg5*reg61; reg6=reg6*reg47; T reg72=reg38*reg52; reg38=reg38*reg47; reg39=reg39*reg52;
    reg47=reg32*reg47; reg61=reg32*reg61; reg62=reg62/reg57; reg50=reg46+reg50; reg72=reg61-reg72;
    reg46=reg37*reg53; reg29=reg29*reg55; reg43=reg38-reg43; reg34=reg34*reg54; reg63=reg56+reg63;
    reg53=reg21*reg53; reg38=reg36*reg54; reg56=reg45*reg60; reg66=reg65-reg66; reg68=reg67-reg68;
    reg64=reg49-reg64; reg49=reg23*reg54; reg61=reg22*reg55; reg6=reg5+reg6; reg5=reg21*reg52;
    reg65=reg36*reg55; reg67=reg42*reg60; reg52=reg33*reg52; reg71=reg70+reg71; reg32=reg21*reg32;
    reg69=reg51+reg69; reg47=reg39-reg47; reg21=reg22*reg42; reg54=reg42*reg54; reg55=reg45*reg55;
    reg39=reg23*reg45; reg58=reg58/reg57; reg57=reg59/reg57; reg34=reg29+reg34; reg39=reg21+reg39;
    reg64=skin_elem.p*reg64; reg33=reg33*reg60; reg49=reg61+reg49; reg21=reg25*reg36; reg60=reg25*reg60;
    reg29=reg45*reg58; reg51=reg42*reg57; reg42=reg42*reg62; reg59=reg36*reg58; reg36=reg36*reg57;
    reg45=reg45*reg62; reg23=reg23*reg57; reg22=reg22*reg58; reg57=reg35*reg57; reg58=reg30*reg58;
    reg55=reg54-reg55; reg67=reg65-reg67; reg68=skin_elem.p*reg68; reg66=skin_elem.p*reg66; reg53=reg63+reg53;
    reg38=reg56-reg38; reg46=reg50+reg46; reg43=skin_elem.p*reg43; reg72=skin_elem.p*reg72; reg47=skin_elem.p*reg47;
    reg32=reg69+reg32; reg52=reg71+reg52; reg5=reg6+reg5; reg6=0.044658198738520458147*reg47; reg30=0.16666666666666667632*reg66;
    reg35=0.044658198738520458147*reg72; reg50=0.16666666666666667632*reg68; reg54=0.044658198738520458147*reg43; reg56=0.16666666666666667632*reg64; reg61=0.6220084679281461892*reg47;
    reg63=0.6220084679281461892*reg72; reg65=0.6220084679281461892*reg43; reg69=0.044658198738520458147*reg66; reg70=0.044658198738520458147*reg68; reg71=0.044658198738520458147*reg64;
    T reg73=0.6220084679281461892*reg64; reg29=reg51-reg29; reg42=reg59-reg42; reg36=reg45-reg36; reg67=skin_elem.p*reg67;
    reg25=reg25*reg62; reg23=reg22+reg23; reg60=reg49+reg60; reg55=skin_elem.p*reg55; reg62=reg37*reg62;
    reg57=reg58+reg57; reg38=skin_elem.p*reg38; reg22=0.16666666666666667632*reg72; reg37=0.6220084679281461892*reg66; reg45=0.16666666666666667632*skin_elem.f_surf[0];
    reg49=0.6220084679281461892*reg68; reg51=0.16666666666666667632*reg47; reg58=0.044658198738520458147*skin_elem.f_surf[1]; reg59=0.6220084679281461892*skin_elem.f_surf[2]; T reg74=0.6220084679281461892*skin_elem.f_surf[0];
    T reg75=0.044658198738520458147*skin_elem.f_surf[0]; T reg76=0.16666666666666667632*reg43; T reg77=0.16666666666666667632*skin_elem.f_surf[2]; T reg78=0.6220084679281461892*skin_elem.f_surf[1]; reg33=reg34+reg33;
    reg21=reg39+reg21; reg34=0.16666666666666667632*skin_elem.f_surf[1]; reg39=0.044658198738520458147*skin_elem.f_surf[2]; reg53=reg40*reg53; reg46=reg32*reg46;
    reg5=reg48*reg5; reg52=reg32*reg52; reg63=reg78+reg63; reg62=reg57+reg62; reg25=reg23+reg25;
    reg23=0.044658198738520458147*reg38; reg61=reg74+reg61; reg32=0.16666666666666667632*reg55; reg36=skin_elem.p*reg36; reg56=reg77+reg56;
    reg76=reg77+reg76; reg42=skin_elem.p*reg42; reg54=reg39+reg54; reg51=reg45+reg51; reg29=skin_elem.p*reg29;
    reg73=reg59+reg73; reg40=0.16666666666666667632*reg67; reg50=reg34+reg50; reg48=0.044658198738520458147*reg55; reg35=reg58+reg35;
    reg57=0.16666666666666667632*reg38; reg30=reg45+reg30; T reg79=0.044658198738520458147*reg67; reg70=reg58+reg70; T reg80=0.6220084679281461892*reg67;
    T reg81=0.6220084679281461892*reg38; reg71=reg39+reg71; reg22=reg34+reg22; reg37=reg74+reg37; reg69=reg75+reg69;
    reg5=reg52-reg5; reg53=reg46-reg53; reg6=reg75+reg6; reg49=reg78+reg49; reg46=0.6220084679281461892*reg55;
    reg60=reg44*reg60; reg65=reg59+reg65; reg33=reg21*reg33; reg44=0.6220084679281461892*reg36; reg35=reg5*reg35;
    reg71=reg53*reg71; reg57=reg45+reg57; reg30=reg53*reg30; reg80=reg78+reg80; reg50=reg53*reg50;
    reg46=reg59+reg46; reg70=reg53*reg70; reg40=reg34+reg40; reg52=0.6220084679281461892*reg42; reg76=reg76*reg5;
    reg81=reg74+reg81; reg54=reg5*reg54; reg69=reg53*reg69; reg56=reg53*reg56; reg32=reg77+reg32;
    T reg82=0.6220084679281461892*reg29; T reg83=0.044658198738520458147*reg29; reg61=reg5*reg61; T reg84=0.044658198738520458147*reg36; reg65=reg5*reg65;
    reg63=reg5*reg63; T reg85=0.044658198738520458147*reg42; reg6=reg6*reg5; reg62=reg21*reg62; reg73=reg53*reg73;
    reg60=reg33-reg60; reg51=reg51*reg5; reg48=reg39+reg48; reg37=reg37*reg53; reg49=reg49*reg53;
    reg79=reg58+reg79; reg25=reg41*reg25; reg21=0.16666666666666667632*reg29; reg22=reg22*reg5; reg23=reg75+reg23;
    reg33=0.16666666666666667632*reg36; reg41=0.16666666666666667632*reg42; reg44=reg74+reg44; reg61=0.25*reg61; reg79=reg79*reg60;
    reg84=reg75+reg84; reg46=reg60*reg46; reg82=reg59+reg82; reg25=reg62-reg25; reg6=0.25*reg6;
    reg32=reg60*reg32; reg63=0.25*reg63; reg85=reg58+reg85; reg65=0.25*reg65; reg83=reg39+reg83;
    reg71=0.25*reg71; reg49=0.25*reg49; reg69=0.25*reg69; reg22=0.25*reg22; reg81=reg60*reg81;
    reg23=reg23*reg60; reg70=0.25*reg70; reg33=reg45+reg33; reg80=reg60*reg80; reg41=reg34+reg41;
    reg52=reg78+reg52; reg50=0.25*reg50; reg73=0.25*reg73; reg30=0.25*reg30; reg21=reg77+reg21;
    reg37=0.25*reg37; reg54=0.25*reg54; reg51=0.25*reg51; reg76=0.25*reg76; reg57=reg60*reg57;
    reg35=0.25*reg35; reg48=reg60*reg48; reg56=0.25*reg56; reg40=reg60*reg40; reg85=reg25*reg85;
    reg35=reg35+reg50; reg79=0.25*reg79; reg49=reg49+reg22; reg33=reg33*reg25; reg65=reg56+reg65;
    reg81=0.25*reg81; reg71=reg76+reg71; reg73=reg76+reg73; reg83=reg25*reg83; reg48=0.25*reg48;
    reg57=0.25*reg57; reg69=reg51+reg69; reg56=reg54+reg56; reg41=reg41*reg25; reg23=0.25*reg23;
    reg32=0.25*reg32; reg37=reg51+reg37; reg44=reg44*reg25; reg82=reg25*reg82; reg80=0.25*reg80;
    reg46=0.25*reg46; reg61=reg30+reg61; reg52=reg25*reg52; reg84=reg25*reg84; reg70=reg22+reg70;
    reg30=reg6+reg30; reg21=reg25*reg21; reg40=0.25*reg40; reg63=reg50+reg63; reg81=reg69+reg81;
    reg21=0.25*reg21; reg33=0.25*reg33; reg80=reg70+reg80; reg30=reg30+reg57; reg56=reg56+reg32;
    reg82=0.25*reg82; reg44=0.25*reg44; reg52=0.25*reg52; reg61=reg57+reg61; reg84=0.25*reg84;
    reg35=reg35+reg40; reg23=reg37+reg23; reg63=reg40+reg63; reg85=0.25*reg85; reg49=reg79+reg49;
    reg41=0.25*reg41; reg65=reg32+reg65; reg83=0.25*reg83; reg48=reg73+reg48; reg46=reg71+reg46;
    reg46=reg21+reg46; sollicitation[indices[7]+2]+=reg46; reg80=reg41+reg80; sollicitation[indices[7]+1]+=reg80; reg23=reg23+reg33;
    sollicitation[indices[2]+0]+=reg23; reg81=reg33+reg81; sollicitation[indices[7]+0]+=reg81; reg83=reg65+reg83; sollicitation[indices[6]+2]+=reg83;
    reg41=reg49+reg41; sollicitation[indices[2]+1]+=reg41; reg85=reg63+reg85; sollicitation[indices[6]+1]+=reg85; reg84=reg61+reg84;
    sollicitation[indices[6]+0]+=reg84; reg82=reg56+reg82; sollicitation[indices[3]+2]+=reg82; reg52=reg35+reg52; sollicitation[indices[3]+1]+=reg52;
    reg30=reg44+reg30; sollicitation[indices[3]+0]+=reg30; reg21=reg48+reg21; sollicitation[indices[2]+2]+=reg21;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[0]; T reg1=0.21132486540518713447*elem.pos(0)[1]; T reg2=0.21132486540518713447*elem.pos(4)[1]; T reg3=0.21132486540518713447*elem.pos(4)[0]; T reg4=0.78867513459481286553*elem.pos(0)[0];
    T reg5=0.21132486540518713447*elem.pos(0)[2]; T reg6=0.78867513459481286553*elem.pos(7)[0]; T reg7=0.78867513459481286553*elem.pos(7)[1]; T reg8=reg3-reg0; T reg9=0.21132486540518713447*elem.pos(4)[2];
    T reg10=0.78867513459481286553*elem.pos(0)[1]; T reg11=0.78867513459481286553*elem.pos(4)[0]; T reg12=0.78867513459481286553*elem.pos(4)[1]; T reg13=reg2-reg1; T reg14=0.78867513459481286553*elem.pos(0)[2];
    T reg15=0.78867513459481286553*elem.pos(3)[1]; T reg16=0.78867513459481286553*elem.pos(3)[0]; T reg17=0.78867513459481286553*elem.pos(4)[2]; T reg18=0.78867513459481286553*elem.pos(7)[2]; reg8=reg8+reg6;
    T reg19=0.21132486540518713447*elem.pos(7)[0]; T reg20=0.21132486540518713447*elem.pos(7)[1]; T reg21=reg9-reg5; T reg22=reg12-reg10; T reg23=reg11-reg4;
    reg13=reg7+reg13; T reg24=0.21132486540518713447*elem.pos(7)[2]; T reg25=reg17-reg14; reg21=reg18+reg21; reg22=reg20+reg22;
    reg23=reg19+reg23; reg13=reg13-reg15; reg8=reg8-reg16; T reg26=0.78867513459481286553*elem.pos(3)[2]; T reg27=0.21132486540518713447*elem.pos(3)[0];
    T reg28=0.21132486540518713447*elem.pos(3)[1]; reg21=reg21-reg26; reg22=reg22-reg28; reg25=reg24+reg25; reg23=reg23-reg27;
    T reg29=pow(reg13,2); T reg30=pow(reg8,2); T reg31=0.21132486540518713447*elem.pos(3)[2]; reg29=reg30+reg29; reg30=pow(reg23,2);
    reg25=reg25-reg31; T reg32=pow(reg21,2); T reg33=pow(reg22,2); T reg34=reg0+reg11; T reg35=reg10+reg2;
    reg29=reg32+reg29; reg33=reg30+reg33; reg30=reg1+reg12; reg32=pow(reg25,2); T reg36=reg4+reg3;
    reg30=reg7-reg30; reg36=reg19-reg36; reg29=pow(reg29,0.5); reg35=reg20-reg35; T reg37=reg5+reg17;
    reg34=reg6-reg34; T reg38=reg14+reg9; reg32=reg33+reg32; reg36=reg16+reg36; reg32=pow(reg32,0.5);
    reg35=reg15+reg35; reg34=reg27+reg34; reg33=reg8/reg29; reg38=reg24-reg38; reg37=reg18-reg37;
    reg30=reg28+reg30; T reg39=reg13/reg29; T reg40=reg39*reg35; reg38=reg26+reg38; reg37=reg31+reg37;
    T reg41=reg39*reg30; T reg42=reg33*reg36; T reg43=reg23/reg32; T reg44=reg33*reg34; T reg45=reg22/reg32;
    reg29=reg21/reg29; T reg46=reg29*reg37; reg32=reg25/reg32; T reg47=reg34*reg43; T reg48=reg30*reg45;
    reg40=reg42+reg40; reg42=reg29*reg38; reg41=reg44+reg41; reg46=reg41+reg46; reg48=reg47+reg48;
    reg41=reg37*reg32; reg42=reg40+reg42; reg40=reg36*reg43; reg44=reg35*reg45; reg47=reg38*reg32;
    T reg49=reg33*reg42; T reg50=reg39*reg46; T reg51=reg33*reg46; T reg52=reg39*reg42; reg40=reg44+reg40;
    reg41=reg48+reg41; reg44=reg29*reg46; reg50=reg30-reg50; reg48=reg29*reg42; reg47=reg40+reg47;
    reg40=reg45*reg41; reg52=reg35-reg52; T reg53=reg43*reg41; reg51=reg34-reg51; reg49=reg36-reg49;
    T reg54=reg43*reg47; T reg55=pow(reg51,2); reg44=reg37-reg44; T reg56=reg45*reg47; T reg57=pow(reg49,2);
    T reg58=pow(reg52,2); reg48=reg38-reg48; T reg59=pow(reg50,2); T reg60=reg32*reg41; reg40=reg30-reg40;
    reg53=reg34-reg53; reg60=reg37-reg60; reg58=reg57+reg58; reg57=pow(reg48,2); T reg61=pow(reg40,2);
    T reg62=pow(reg53,2); T reg63=reg32*reg47; reg56=reg35-reg56; T reg64=pow(reg44,2); reg54=reg36-reg54;
    reg55=reg59+reg55; reg57=reg58+reg57; reg61=reg62+reg61; reg58=pow(reg60,2); reg59=pow(reg54,2);
    reg62=pow(reg56,2); reg64=reg55+reg64; reg63=reg38-reg63; reg57=pow(reg57,0.5); reg64=pow(reg64,0.5);
    reg55=pow(reg63,2); reg58=reg61+reg58; reg62=reg59+reg62; reg51=reg51/reg64; reg49=reg49/reg57;
    reg50=reg50/reg64; reg52=reg52/reg57; reg55=reg62+reg55; reg64=reg44/reg64; reg57=reg48/reg57;
    reg58=pow(reg58,0.5); reg44=reg13*reg52; reg48=reg33*reg52; reg55=pow(reg55,0.5); reg59=reg8*reg49;
    reg61=reg39*reg49; reg62=reg39*reg57; T reg65=reg29*reg49; T reg66=reg33*reg57; T reg67=reg29*reg52;
    T reg68=reg8*reg33; T reg69=reg39*reg13; reg8=reg8*reg51; reg13=reg50*reg13; reg60=reg60/reg58;
    reg40=reg40/reg58; reg58=reg53/reg58; reg53=reg29*reg50; T reg70=reg39*reg64; T reg71=reg33*reg64;
    T reg72=reg30*reg50; T reg73=reg29*reg51; T reg74=reg34*reg51; reg51=reg39*reg51; reg50=reg33*reg50;
    reg49=reg36*reg49; reg52=reg35*reg52; reg33=reg23*reg43; reg67=reg62-reg67; reg63=reg63/reg55;
    reg39=reg22*reg45; reg62=reg22*reg40; reg56=reg56/reg55; reg34=reg34*reg58; T reg75=reg23*reg58;
    reg30=reg30*reg40; reg55=reg54/reg55; reg54=reg32*reg40; T reg76=reg45*reg60; T reg77=reg21*reg64;
    reg53=reg70-reg53; reg72=reg74+reg72; reg71=reg73-reg71; reg51=reg50-reg51; reg13=reg8+reg13;
    reg52=reg49+reg52; reg8=reg38*reg57; reg49=reg43*reg60; reg50=reg32*reg58; reg29=reg21*reg29;
    reg68=reg69+reg68; reg64=reg64*reg37; reg66=reg65-reg66; reg61=reg48-reg61; reg40=reg43*reg40;
    reg44=reg59+reg44; reg57=reg21*reg57; reg58=reg45*reg58; reg54=reg76-reg54; reg23=reg23*reg55;
    reg49=reg50-reg49; reg37=reg37*reg60; reg62=reg75+reg62; reg36=reg36*reg55; reg60=reg25*reg60;
    reg21=reg32*reg56; reg48=reg45*reg63; reg58=reg40-reg58; reg35=reg35*reg56; reg40=reg43*reg63;
    reg50=reg32*reg55; reg55=reg45*reg55; reg43=reg43*reg56; reg56=reg22*reg56; reg67=skin_elem.p*reg67;
    reg72=reg64+reg72; reg68=reg29+reg68; reg51=skin_elem.p*reg51; reg71=skin_elem.p*reg71; reg77=reg13+reg77;
    reg53=skin_elem.p*reg53; reg8=reg52+reg8; reg57=reg44+reg57; reg30=reg34+reg30; reg32=reg25*reg32;
    reg39=reg33+reg39; reg66=skin_elem.p*reg66; reg61=skin_elem.p*reg61; reg13=0.044658198738520458147*skin_elem.f_surf[1]; reg35=reg36+reg35;
    reg22=0.6220084679281461892*skin_elem.f_surf[0]; reg38=reg38*reg63; reg29=0.044658198738520458147*reg66; reg33=0.044658198738520458147*skin_elem.f_surf[0]; reg34=0.044658198738520458147*reg51;
    reg36=0.16666666666666667632*reg66; reg44=0.16666666666666667632*reg61; reg56=reg23+reg56; reg63=reg25*reg63; reg23=0.044658198738520458147*reg67;
    reg25=0.044658198738520458147*reg71; reg45=0.6220084679281461892*reg67; reg55=reg43-reg55; reg43=0.16666666666666667632*reg71; reg52=0.16666666666666667632*reg53;
    reg40=reg50-reg40; reg50=0.6220084679281461892*reg61; reg59=0.6220084679281461892*reg66; reg21=reg48-reg21; reg48=0.16666666666666667632*reg51;
    reg57=reg42*reg57; reg42=0.6220084679281461892*reg53; reg58=skin_elem.p*reg58; reg8=reg68*reg8; reg64=0.6220084679281461892*reg51;
    reg49=skin_elem.p*reg49; reg65=0.6220084679281461892*reg71; reg69=0.16666666666666667632*reg67; reg60=reg62+reg60; reg54=skin_elem.p*reg54;
    reg62=0.044658198738520458147*reg53; reg70=0.044658198738520458147*reg61; reg73=0.16666666666666667632*skin_elem.f_surf[0]; reg74=0.16666666666666667632*skin_elem.f_surf[1]; reg37=reg30+reg37;
    reg32=reg39+reg32; reg46=reg77*reg46; reg68=reg72*reg68; reg30=0.6220084679281461892*skin_elem.f_surf[1]; reg39=0.6220084679281461892*skin_elem.f_surf[2];
    reg72=0.16666666666666667632*skin_elem.f_surf[2]; reg75=0.044658198738520458147*skin_elem.f_surf[2]; reg76=0.044658198738520458147*reg54; reg65=reg30+reg65; reg45=reg22+reg45;
    reg77=0.16666666666666667632*reg49; T reg78=0.16666666666666667632*reg58; reg44=reg72+reg44; reg64=reg39+reg64; reg34=reg75+reg34;
    reg52=reg73+reg52; reg43=reg74+reg43; reg59=reg30+reg59; T reg79=0.044658198738520458147*reg49; reg48=reg72+reg48;
    reg42=reg22+reg42; T reg80=0.6220084679281461892*reg58; reg50=reg39+reg50; reg70=reg75+reg70; T reg81=0.044658198738520458147*reg58;
    reg23=reg33+reg23; T reg82=0.6220084679281461892*reg49; reg29=reg13+reg29; T reg83=0.6220084679281461892*reg54; reg69=reg73+reg69;
    reg57=reg8-reg57; reg63=reg56+reg63; reg60=reg41*reg60; reg37=reg32*reg37; reg55=skin_elem.p*reg55;
    reg25=reg13+reg25; reg40=skin_elem.p*reg40; reg62=reg33+reg62; reg36=reg74+reg36; reg8=0.16666666666666667632*reg54;
    reg46=reg68-reg46; reg38=reg35+reg38; reg21=skin_elem.p*reg21; reg60=reg37-reg60; reg45=reg57*reg45;
    reg35=0.6220084679281461892*reg21; reg42=reg46*reg42; reg76=reg33+reg76; reg81=reg75+reg81; reg70=reg57*reg70;
    reg37=0.16666666666666667632*reg21; reg41=0.16666666666666667632*reg40; reg50=reg57*reg50; reg80=reg39+reg80; reg62=reg46*reg62;
    reg69=reg69*reg57; reg79=reg13+reg79; reg56=0.044658198738520458147*reg21; reg43=reg46*reg43; reg48=reg46*reg48;
    reg59=reg57*reg59; reg8=reg73+reg8; reg36=reg57*reg36; reg77=reg74+reg77; reg29=reg57*reg29;
    reg68=0.044658198738520458147*reg55; T reg84=0.6220084679281461892*reg40; reg83=reg22+reg83; reg38=reg32*reg38; reg64=reg46*reg64;
    reg34=reg46*reg34; reg25=reg46*reg25; reg44=reg57*reg44; reg23=reg57*reg23; reg78=reg72+reg78;
    reg65=reg46*reg65; reg52=reg46*reg52; reg32=0.16666666666666667632*reg55; T reg85=0.044658198738520458147*reg40; T reg86=0.6220084679281461892*reg55;
    reg82=reg30+reg82; reg63=reg47*reg63; reg23=0.25*reg23; reg48=0.25*reg48; reg82=reg60*reg82;
    reg63=reg38-reg63; reg32=reg72+reg32; reg83=reg60*reg83; reg81=reg60*reg81; reg29=0.25*reg29;
    reg70=0.25*reg70; reg50=0.25*reg50; reg62=0.25*reg62; reg36=0.25*reg36; reg77=reg60*reg77;
    reg68=reg75+reg68; reg84=reg30+reg84; reg64=0.25*reg64; reg25=0.25*reg25; reg34=0.25*reg34;
    reg44=0.25*reg44; reg78=reg60*reg78; reg85=reg13+reg85; reg86=reg39+reg86; reg65=0.25*reg65;
    reg52=0.25*reg52; reg35=reg22+reg35; reg45=0.25*reg45; reg41=reg74+reg41; reg80=reg60*reg80;
    reg79=reg60*reg79; reg59=0.25*reg59; reg43=0.25*reg43; reg8=reg60*reg8; reg56=reg33+reg56;
    reg37=reg73+reg37; reg69=0.25*reg69; reg42=0.25*reg42; reg76=reg60*reg76; reg56=reg63*reg56;
    reg85=reg63*reg85; reg82=0.25*reg82; reg65=reg36+reg65; reg80=0.25*reg80; reg64=reg44+reg64;
    reg29=reg43+reg29; reg70=reg48+reg70; reg68=reg63*reg68; reg42=reg69+reg42; reg44=reg34+reg44;
    reg78=0.25*reg78; reg86=reg63*reg86; reg35=reg63*reg35; reg45=reg52+reg45; reg8=0.25*reg8;
    reg76=0.25*reg76; reg37=reg63*reg37; reg84=reg63*reg84; reg59=reg43+reg59; reg69=reg62+reg69;
    reg79=0.25*reg79; reg41=reg63*reg41; reg77=0.25*reg77; reg50=reg48+reg50; reg81=0.25*reg81;
    reg83=0.25*reg83; reg23=reg52+reg23; reg36=reg25+reg36; reg32=reg63*reg32; reg85=0.25*reg85;
    reg83=reg23+reg83; reg44=reg44+reg78; reg65=reg77+reg65; reg86=0.25*reg86; reg84=0.25*reg84;
    reg35=0.25*reg35; reg68=0.25*reg68; reg69=reg69+reg8; reg32=0.25*reg32; reg76=reg45+reg76;
    reg82=reg29+reg82; reg56=0.25*reg56; reg37=0.25*reg37; reg64=reg78+reg64; reg81=reg50+reg81;
    reg42=reg8+reg42; reg77=reg36+reg77; reg80=reg70+reg80; reg79=reg59+reg79; reg41=0.25*reg41;
    reg84=reg77+reg84; sollicitation[indices[0]+1]+=reg84; reg68=reg64+reg68; sollicitation[indices[7]+2]+=reg68; reg35=reg69+reg35;
    sollicitation[indices[0]+0]+=reg35; reg85=reg65+reg85; sollicitation[indices[7]+1]+=reg85; reg86=reg44+reg86; sollicitation[indices[0]+2]+=reg86;
    reg56=reg42+reg56; sollicitation[indices[7]+0]+=reg56; reg76=reg76+reg37; sollicitation[indices[3]+0]+=reg76; reg80=reg32+reg80;
    sollicitation[indices[4]+2]+=reg80; reg79=reg79+reg41; sollicitation[indices[3]+1]+=reg79; reg82=reg41+reg82; sollicitation[indices[4]+1]+=reg82;
    reg32=reg81+reg32; sollicitation[indices[3]+2]+=reg32; reg83=reg37+reg83; sollicitation[indices[4]+0]+=reg83;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[0]; T reg1=0.21132486540518713447*elem.pos(0)[1]; T reg2=0.21132486540518713447*elem.pos(4)[1]; T reg3=0.21132486540518713447*elem.pos(4)[0]; T reg4=0.78867513459481286553*elem.pos(0)[0];
    T reg5=0.21132486540518713447*elem.pos(0)[2]; T reg6=0.78867513459481286553*elem.pos(7)[0]; T reg7=0.78867513459481286553*elem.pos(7)[1]; T reg8=reg3-reg0; T reg9=0.21132486540518713447*elem.pos(4)[2];
    T reg10=0.78867513459481286553*elem.pos(0)[1]; T reg11=0.78867513459481286553*elem.pos(4)[0]; T reg12=0.78867513459481286553*elem.pos(4)[1]; T reg13=reg2-reg1; T reg14=0.78867513459481286553*elem.pos(0)[2];
    T reg15=0.78867513459481286553*elem.pos(3)[1]; T reg16=0.78867513459481286553*elem.pos(3)[0]; T reg17=0.78867513459481286553*elem.pos(4)[2]; T reg18=0.78867513459481286553*elem.pos(7)[2]; reg8=reg8+reg6;
    T reg19=0.21132486540518713447*elem.pos(7)[0]; T reg20=0.21132486540518713447*elem.pos(7)[1]; T reg21=reg9-reg5; T reg22=reg12-reg10; T reg23=reg11-reg4;
    reg13=reg7+reg13; T reg24=0.21132486540518713447*elem.pos(7)[2]; T reg25=reg17-reg14; reg21=reg18+reg21; reg22=reg20+reg22;
    reg23=reg19+reg23; reg13=reg13-reg15; reg8=reg8-reg16; T reg26=0.78867513459481286553*elem.pos(3)[2]; T reg27=0.21132486540518713447*elem.pos(3)[0];
    T reg28=0.21132486540518713447*elem.pos(3)[1]; reg21=reg21-reg26; reg22=reg22-reg28; reg25=reg24+reg25; reg23=reg23-reg27;
    T reg29=pow(reg13,2); T reg30=pow(reg8,2); T reg31=0.21132486540518713447*elem.pos(3)[2]; reg29=reg30+reg29; reg30=pow(reg23,2);
    reg25=reg25-reg31; T reg32=pow(reg21,2); T reg33=pow(reg22,2); T reg34=reg0+reg11; T reg35=reg10+reg2;
    reg29=reg32+reg29; reg33=reg30+reg33; reg30=reg1+reg12; reg32=pow(reg25,2); T reg36=reg4+reg3;
    reg30=reg7-reg30; reg36=reg19-reg36; reg29=pow(reg29,0.5); reg35=reg20-reg35; T reg37=reg5+reg17;
    reg34=reg6-reg34; T reg38=reg14+reg9; reg32=reg33+reg32; reg36=reg16+reg36; reg32=pow(reg32,0.5);
    reg35=reg15+reg35; reg34=reg27+reg34; reg33=reg8/reg29; reg38=reg24-reg38; reg37=reg18-reg37;
    reg30=reg28+reg30; T reg39=reg13/reg29; T reg40=reg39*reg35; reg38=reg26+reg38; reg37=reg31+reg37;
    T reg41=reg39*reg30; T reg42=reg33*reg36; T reg43=reg23/reg32; T reg44=reg33*reg34; T reg45=reg22/reg32;
    reg29=reg21/reg29; T reg46=reg29*reg37; reg32=reg25/reg32; T reg47=reg34*reg43; T reg48=reg30*reg45;
    reg40=reg42+reg40; reg42=reg29*reg38; reg41=reg44+reg41; reg46=reg41+reg46; reg48=reg47+reg48;
    reg41=reg37*reg32; reg42=reg40+reg42; reg40=reg36*reg43; reg44=reg35*reg45; reg47=reg38*reg32;
    T reg49=reg33*reg42; T reg50=reg39*reg46; T reg51=reg33*reg46; T reg52=reg39*reg42; reg40=reg44+reg40;
    reg41=reg48+reg41; reg44=reg29*reg46; reg50=reg30-reg50; reg48=reg29*reg42; reg47=reg40+reg47;
    reg40=reg45*reg41; reg52=reg35-reg52; T reg53=reg43*reg41; reg51=reg34-reg51; reg49=reg36-reg49;
    T reg54=reg43*reg47; T reg55=pow(reg51,2); reg44=reg37-reg44; T reg56=reg45*reg47; T reg57=pow(reg49,2);
    T reg58=pow(reg52,2); reg48=reg38-reg48; T reg59=pow(reg50,2); T reg60=reg32*reg41; reg40=reg30-reg40;
    reg53=reg34-reg53; reg60=reg37-reg60; reg58=reg57+reg58; reg57=pow(reg48,2); T reg61=pow(reg40,2);
    T reg62=pow(reg53,2); T reg63=reg32*reg47; reg56=reg35-reg56; T reg64=pow(reg44,2); reg54=reg36-reg54;
    reg55=reg59+reg55; reg57=reg58+reg57; reg61=reg62+reg61; reg58=pow(reg60,2); reg59=pow(reg54,2);
    reg62=pow(reg56,2); reg64=reg55+reg64; reg63=reg38-reg63; reg57=pow(reg57,0.5); reg64=pow(reg64,0.5);
    reg55=pow(reg63,2); reg58=reg61+reg58; reg62=reg59+reg62; reg51=reg51/reg64; reg49=reg49/reg57;
    reg50=reg50/reg64; reg52=reg52/reg57; reg55=reg62+reg55; reg64=reg44/reg64; reg57=reg48/reg57;
    reg58=pow(reg58,0.5); reg44=reg13*reg52; reg48=reg33*reg52; reg55=pow(reg55,0.5); reg59=reg8*reg49;
    reg61=reg39*reg49; reg62=reg39*reg57; T reg65=reg29*reg49; T reg66=reg33*reg57; T reg67=reg29*reg52;
    T reg68=reg8*reg33; T reg69=reg39*reg13; reg8=reg8*reg51; reg13=reg50*reg13; reg60=reg60/reg58;
    reg40=reg40/reg58; reg58=reg53/reg58; reg53=reg29*reg50; T reg70=reg39*reg64; T reg71=reg33*reg64;
    T reg72=reg30*reg50; T reg73=reg29*reg51; T reg74=reg34*reg51; reg51=reg39*reg51; reg50=reg33*reg50;
    reg49=reg36*reg49; reg52=reg35*reg52; reg33=reg23*reg43; reg67=reg62-reg67; reg63=reg63/reg55;
    reg39=reg22*reg45; reg62=reg22*reg40; reg56=reg56/reg55; reg34=reg34*reg58; T reg75=reg23*reg58;
    reg30=reg30*reg40; reg55=reg54/reg55; reg54=reg32*reg40; T reg76=reg45*reg60; T reg77=reg21*reg64;
    reg53=reg70-reg53; reg72=reg74+reg72; reg71=reg73-reg71; reg51=reg50-reg51; reg13=reg8+reg13;
    reg52=reg49+reg52; reg8=reg38*reg57; reg49=reg43*reg60; reg50=reg32*reg58; reg29=reg21*reg29;
    reg68=reg69+reg68; reg64=reg64*reg37; reg66=reg65-reg66; reg61=reg48-reg61; reg40=reg43*reg40;
    reg44=reg59+reg44; reg57=reg21*reg57; reg58=reg45*reg58; reg54=reg76-reg54; reg23=reg23*reg55;
    reg49=reg50-reg49; reg37=reg37*reg60; reg62=reg75+reg62; reg36=reg36*reg55; reg60=reg25*reg60;
    reg21=reg32*reg56; reg48=reg45*reg63; reg58=reg40-reg58; reg35=reg35*reg56; reg40=reg43*reg63;
    reg50=reg32*reg55; reg55=reg45*reg55; reg43=reg43*reg56; reg56=reg22*reg56; reg67=skin_elem.p*reg67;
    reg72=reg64+reg72; reg68=reg29+reg68; reg51=skin_elem.p*reg51; reg71=skin_elem.p*reg71; reg77=reg13+reg77;
    reg53=skin_elem.p*reg53; reg8=reg52+reg8; reg57=reg44+reg57; reg30=reg34+reg30; reg32=reg25*reg32;
    reg39=reg33+reg39; reg66=skin_elem.p*reg66; reg61=skin_elem.p*reg61; reg13=0.044658198738520458147*skin_elem.f_surf[1]; reg35=reg36+reg35;
    reg22=0.6220084679281461892*skin_elem.f_surf[0]; reg38=reg38*reg63; reg29=0.044658198738520458147*reg66; reg33=0.044658198738520458147*skin_elem.f_surf[0]; reg34=0.044658198738520458147*reg51;
    reg36=0.16666666666666667632*reg66; reg44=0.16666666666666667632*reg61; reg56=reg23+reg56; reg63=reg25*reg63; reg23=0.044658198738520458147*reg67;
    reg25=0.044658198738520458147*reg71; reg45=0.6220084679281461892*reg67; reg55=reg43-reg55; reg43=0.16666666666666667632*reg71; reg52=0.16666666666666667632*reg53;
    reg40=reg50-reg40; reg50=0.6220084679281461892*reg61; reg59=0.6220084679281461892*reg66; reg21=reg48-reg21; reg48=0.16666666666666667632*reg51;
    reg57=reg42*reg57; reg42=0.6220084679281461892*reg53; reg58=skin_elem.p*reg58; reg8=reg68*reg8; reg64=0.6220084679281461892*reg51;
    reg49=skin_elem.p*reg49; reg65=0.6220084679281461892*reg71; reg69=0.16666666666666667632*reg67; reg60=reg62+reg60; reg54=skin_elem.p*reg54;
    reg62=0.044658198738520458147*reg53; reg70=0.044658198738520458147*reg61; reg73=0.16666666666666667632*skin_elem.f_surf[0]; reg74=0.16666666666666667632*skin_elem.f_surf[1]; reg37=reg30+reg37;
    reg32=reg39+reg32; reg46=reg77*reg46; reg68=reg72*reg68; reg30=0.6220084679281461892*skin_elem.f_surf[1]; reg39=0.6220084679281461892*skin_elem.f_surf[2];
    reg72=0.16666666666666667632*skin_elem.f_surf[2]; reg75=0.044658198738520458147*skin_elem.f_surf[2]; reg76=0.044658198738520458147*reg54; reg65=reg30+reg65; reg45=reg22+reg45;
    reg77=0.16666666666666667632*reg49; T reg78=0.16666666666666667632*reg58; reg44=reg72+reg44; reg64=reg39+reg64; reg34=reg75+reg34;
    reg52=reg73+reg52; reg43=reg74+reg43; reg59=reg30+reg59; T reg79=0.044658198738520458147*reg49; reg48=reg72+reg48;
    reg42=reg22+reg42; T reg80=0.6220084679281461892*reg58; reg50=reg39+reg50; reg70=reg75+reg70; T reg81=0.044658198738520458147*reg58;
    reg23=reg33+reg23; T reg82=0.6220084679281461892*reg49; reg29=reg13+reg29; T reg83=0.6220084679281461892*reg54; reg69=reg73+reg69;
    reg57=reg8-reg57; reg63=reg56+reg63; reg60=reg41*reg60; reg37=reg32*reg37; reg55=skin_elem.p*reg55;
    reg25=reg13+reg25; reg40=skin_elem.p*reg40; reg62=reg33+reg62; reg36=reg74+reg36; reg8=0.16666666666666667632*reg54;
    reg46=reg68-reg46; reg38=reg35+reg38; reg21=skin_elem.p*reg21; reg60=reg37-reg60; reg45=reg57*reg45;
    reg35=0.6220084679281461892*reg21; reg42=reg46*reg42; reg76=reg33+reg76; reg81=reg75+reg81; reg70=reg57*reg70;
    reg37=0.16666666666666667632*reg21; reg41=0.16666666666666667632*reg40; reg50=reg57*reg50; reg80=reg39+reg80; reg62=reg46*reg62;
    reg69=reg69*reg57; reg79=reg13+reg79; reg56=0.044658198738520458147*reg21; reg43=reg46*reg43; reg48=reg46*reg48;
    reg59=reg57*reg59; reg8=reg73+reg8; reg36=reg57*reg36; reg77=reg74+reg77; reg29=reg57*reg29;
    reg68=0.044658198738520458147*reg55; T reg84=0.6220084679281461892*reg40; reg83=reg22+reg83; reg38=reg32*reg38; reg64=reg46*reg64;
    reg34=reg46*reg34; reg25=reg46*reg25; reg44=reg57*reg44; reg23=reg57*reg23; reg78=reg72+reg78;
    reg65=reg46*reg65; reg52=reg46*reg52; reg32=0.16666666666666667632*reg55; T reg85=0.044658198738520458147*reg40; T reg86=0.6220084679281461892*reg55;
    reg82=reg30+reg82; reg63=reg47*reg63; reg23=0.25*reg23; reg48=0.25*reg48; reg82=reg60*reg82;
    reg63=reg38-reg63; reg32=reg72+reg32; reg83=reg60*reg83; reg81=reg60*reg81; reg29=0.25*reg29;
    reg70=0.25*reg70; reg50=0.25*reg50; reg62=0.25*reg62; reg36=0.25*reg36; reg77=reg60*reg77;
    reg68=reg75+reg68; reg84=reg30+reg84; reg64=0.25*reg64; reg25=0.25*reg25; reg34=0.25*reg34;
    reg44=0.25*reg44; reg78=reg60*reg78; reg85=reg13+reg85; reg86=reg39+reg86; reg65=0.25*reg65;
    reg52=0.25*reg52; reg35=reg22+reg35; reg45=0.25*reg45; reg41=reg74+reg41; reg80=reg60*reg80;
    reg79=reg60*reg79; reg59=0.25*reg59; reg43=0.25*reg43; reg8=reg60*reg8; reg56=reg33+reg56;
    reg37=reg73+reg37; reg69=0.25*reg69; reg42=0.25*reg42; reg76=reg60*reg76; reg56=reg63*reg56;
    reg85=reg63*reg85; reg82=0.25*reg82; reg65=reg36+reg65; reg80=0.25*reg80; reg64=reg44+reg64;
    reg29=reg43+reg29; reg70=reg48+reg70; reg68=reg63*reg68; reg42=reg69+reg42; reg44=reg34+reg44;
    reg78=0.25*reg78; reg86=reg63*reg86; reg35=reg63*reg35; reg45=reg52+reg45; reg8=0.25*reg8;
    reg76=0.25*reg76; reg37=reg63*reg37; reg84=reg63*reg84; reg59=reg43+reg59; reg69=reg62+reg69;
    reg79=0.25*reg79; reg41=reg63*reg41; reg77=0.25*reg77; reg50=reg48+reg50; reg81=0.25*reg81;
    reg83=0.25*reg83; reg23=reg52+reg23; reg36=reg25+reg36; reg32=reg63*reg32; reg85=0.25*reg85;
    reg83=reg23+reg83; reg44=reg44+reg78; reg65=reg77+reg65; reg86=0.25*reg86; reg84=0.25*reg84;
    reg35=0.25*reg35; reg68=0.25*reg68; reg69=reg69+reg8; reg32=0.25*reg32; reg76=reg45+reg76;
    reg82=reg29+reg82; reg56=0.25*reg56; reg37=0.25*reg37; reg64=reg78+reg64; reg81=reg50+reg81;
    reg42=reg8+reg42; reg77=reg36+reg77; reg80=reg70+reg80; reg79=reg59+reg79; reg41=0.25*reg41;
    reg84=reg77+reg84; sollicitation[indices[0]+1]+=reg84; reg68=reg64+reg68; sollicitation[indices[7]+2]+=reg68; reg35=reg69+reg35;
    sollicitation[indices[0]+0]+=reg35; reg85=reg65+reg85; sollicitation[indices[7]+1]+=reg85; reg86=reg44+reg86; sollicitation[indices[0]+2]+=reg86;
    reg56=reg42+reg56; sollicitation[indices[7]+0]+=reg56; reg76=reg76+reg37; sollicitation[indices[3]+0]+=reg76; reg80=reg32+reg80;
    sollicitation[indices[4]+2]+=reg80; reg79=reg79+reg41; sollicitation[indices[3]+1]+=reg79; reg82=reg41+reg82; sollicitation[indices[4]+1]+=reg82;
    reg32=reg81+reg32; sollicitation[indices[3]+2]+=reg32; reg83=reg37+reg83; sollicitation[indices[4]+0]+=reg83;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[0]; T reg1=0.21132486540518713447*elem.pos(0)[1]; T reg2=0.21132486540518713447*elem.pos(4)[1]; T reg3=0.21132486540518713447*elem.pos(4)[0]; T reg4=0.78867513459481286553*elem.pos(0)[0];
    T reg5=0.21132486540518713447*elem.pos(0)[2]; T reg6=0.78867513459481286553*elem.pos(7)[0]; T reg7=0.78867513459481286553*elem.pos(7)[1]; T reg8=reg3-reg0; T reg9=0.21132486540518713447*elem.pos(4)[2];
    T reg10=0.78867513459481286553*elem.pos(0)[1]; T reg11=0.78867513459481286553*elem.pos(4)[0]; T reg12=0.78867513459481286553*elem.pos(4)[1]; T reg13=reg2-reg1; T reg14=0.78867513459481286553*elem.pos(0)[2];
    T reg15=0.78867513459481286553*elem.pos(3)[1]; T reg16=0.78867513459481286553*elem.pos(3)[0]; T reg17=0.78867513459481286553*elem.pos(4)[2]; T reg18=0.78867513459481286553*elem.pos(7)[2]; reg8=reg8+reg6;
    T reg19=0.21132486540518713447*elem.pos(7)[0]; T reg20=0.21132486540518713447*elem.pos(7)[1]; T reg21=reg9-reg5; T reg22=reg12-reg10; T reg23=reg11-reg4;
    reg13=reg7+reg13; T reg24=0.21132486540518713447*elem.pos(7)[2]; T reg25=reg17-reg14; reg21=reg18+reg21; reg22=reg20+reg22;
    reg23=reg19+reg23; reg13=reg13-reg15; reg8=reg8-reg16; T reg26=0.78867513459481286553*elem.pos(3)[2]; T reg27=0.21132486540518713447*elem.pos(3)[0];
    T reg28=0.21132486540518713447*elem.pos(3)[1]; reg21=reg21-reg26; reg22=reg22-reg28; reg25=reg24+reg25; reg23=reg23-reg27;
    T reg29=pow(reg13,2); T reg30=pow(reg8,2); T reg31=0.21132486540518713447*elem.pos(3)[2]; reg29=reg30+reg29; reg30=pow(reg23,2);
    reg25=reg25-reg31; T reg32=pow(reg21,2); T reg33=pow(reg22,2); T reg34=reg0+reg11; T reg35=reg10+reg2;
    reg29=reg32+reg29; reg33=reg30+reg33; reg30=reg1+reg12; reg32=pow(reg25,2); T reg36=reg4+reg3;
    reg30=reg7-reg30; reg36=reg19-reg36; reg29=pow(reg29,0.5); reg35=reg20-reg35; T reg37=reg5+reg17;
    reg34=reg6-reg34; T reg38=reg14+reg9; reg32=reg33+reg32; reg36=reg16+reg36; reg32=pow(reg32,0.5);
    reg35=reg15+reg35; reg34=reg27+reg34; reg33=reg8/reg29; reg38=reg24-reg38; reg37=reg18-reg37;
    reg30=reg28+reg30; T reg39=reg13/reg29; T reg40=reg39*reg35; reg38=reg26+reg38; reg37=reg31+reg37;
    T reg41=reg39*reg30; T reg42=reg33*reg36; T reg43=reg23/reg32; T reg44=reg33*reg34; T reg45=reg22/reg32;
    reg29=reg21/reg29; T reg46=reg29*reg37; reg32=reg25/reg32; T reg47=reg34*reg43; T reg48=reg30*reg45;
    reg40=reg42+reg40; reg42=reg29*reg38; reg41=reg44+reg41; reg46=reg41+reg46; reg48=reg47+reg48;
    reg41=reg37*reg32; reg42=reg40+reg42; reg40=reg36*reg43; reg44=reg35*reg45; reg47=reg38*reg32;
    T reg49=reg33*reg42; T reg50=reg39*reg46; T reg51=reg33*reg46; T reg52=reg39*reg42; reg40=reg44+reg40;
    reg41=reg48+reg41; reg44=reg29*reg46; reg50=reg30-reg50; reg48=reg29*reg42; reg47=reg40+reg47;
    reg40=reg45*reg41; reg52=reg35-reg52; T reg53=reg43*reg41; reg51=reg34-reg51; reg49=reg36-reg49;
    T reg54=reg43*reg47; T reg55=pow(reg51,2); reg44=reg37-reg44; T reg56=reg45*reg47; T reg57=pow(reg49,2);
    T reg58=pow(reg52,2); reg48=reg38-reg48; T reg59=pow(reg50,2); T reg60=reg32*reg41; reg40=reg30-reg40;
    reg53=reg34-reg53; reg60=reg37-reg60; reg58=reg57+reg58; reg57=pow(reg48,2); T reg61=pow(reg40,2);
    T reg62=pow(reg53,2); T reg63=reg32*reg47; reg56=reg35-reg56; T reg64=pow(reg44,2); reg54=reg36-reg54;
    reg55=reg59+reg55; reg57=reg58+reg57; reg61=reg62+reg61; reg58=pow(reg60,2); reg59=pow(reg54,2);
    reg62=pow(reg56,2); reg64=reg55+reg64; reg63=reg38-reg63; reg57=pow(reg57,0.5); reg64=pow(reg64,0.5);
    reg55=pow(reg63,2); reg58=reg61+reg58; reg62=reg59+reg62; reg51=reg51/reg64; reg49=reg49/reg57;
    reg50=reg50/reg64; reg52=reg52/reg57; reg55=reg62+reg55; reg64=reg44/reg64; reg57=reg48/reg57;
    reg58=pow(reg58,0.5); reg44=reg13*reg52; reg48=reg33*reg52; reg55=pow(reg55,0.5); reg59=reg8*reg49;
    reg61=reg39*reg49; reg62=reg39*reg57; T reg65=reg29*reg49; T reg66=reg33*reg57; T reg67=reg29*reg52;
    T reg68=reg8*reg33; T reg69=reg39*reg13; reg8=reg8*reg51; reg13=reg50*reg13; reg60=reg60/reg58;
    reg40=reg40/reg58; reg58=reg53/reg58; reg53=reg29*reg50; T reg70=reg39*reg64; T reg71=reg33*reg64;
    T reg72=reg30*reg50; T reg73=reg29*reg51; T reg74=reg34*reg51; reg51=reg39*reg51; reg50=reg33*reg50;
    reg49=reg36*reg49; reg52=reg35*reg52; reg33=reg23*reg43; reg67=reg62-reg67; reg63=reg63/reg55;
    reg39=reg22*reg45; reg62=reg22*reg40; reg56=reg56/reg55; reg34=reg34*reg58; T reg75=reg23*reg58;
    reg30=reg30*reg40; reg55=reg54/reg55; reg54=reg32*reg40; T reg76=reg45*reg60; T reg77=reg21*reg64;
    reg53=reg70-reg53; reg72=reg74+reg72; reg71=reg73-reg71; reg51=reg50-reg51; reg13=reg8+reg13;
    reg52=reg49+reg52; reg8=reg38*reg57; reg49=reg43*reg60; reg50=reg32*reg58; reg29=reg21*reg29;
    reg68=reg69+reg68; reg64=reg64*reg37; reg66=reg65-reg66; reg61=reg48-reg61; reg40=reg43*reg40;
    reg44=reg59+reg44; reg57=reg21*reg57; reg58=reg45*reg58; reg54=reg76-reg54; reg23=reg23*reg55;
    reg49=reg50-reg49; reg37=reg37*reg60; reg62=reg75+reg62; reg36=reg36*reg55; reg60=reg25*reg60;
    reg21=reg32*reg56; reg48=reg45*reg63; reg58=reg40-reg58; reg35=reg35*reg56; reg40=reg43*reg63;
    reg50=reg32*reg55; reg55=reg45*reg55; reg43=reg43*reg56; reg56=reg22*reg56; reg67=skin_elem.p*reg67;
    reg72=reg64+reg72; reg68=reg29+reg68; reg51=skin_elem.p*reg51; reg71=skin_elem.p*reg71; reg77=reg13+reg77;
    reg53=skin_elem.p*reg53; reg8=reg52+reg8; reg57=reg44+reg57; reg30=reg34+reg30; reg32=reg25*reg32;
    reg39=reg33+reg39; reg66=skin_elem.p*reg66; reg61=skin_elem.p*reg61; reg13=0.044658198738520458147*skin_elem.f_surf[1]; reg35=reg36+reg35;
    reg22=0.6220084679281461892*skin_elem.f_surf[0]; reg38=reg38*reg63; reg29=0.044658198738520458147*reg66; reg33=0.044658198738520458147*skin_elem.f_surf[0]; reg34=0.044658198738520458147*reg51;
    reg36=0.16666666666666667632*reg66; reg44=0.16666666666666667632*reg61; reg56=reg23+reg56; reg63=reg25*reg63; reg23=0.044658198738520458147*reg67;
    reg25=0.044658198738520458147*reg71; reg45=0.6220084679281461892*reg67; reg55=reg43-reg55; reg43=0.16666666666666667632*reg71; reg52=0.16666666666666667632*reg53;
    reg40=reg50-reg40; reg50=0.6220084679281461892*reg61; reg59=0.6220084679281461892*reg66; reg21=reg48-reg21; reg48=0.16666666666666667632*reg51;
    reg57=reg42*reg57; reg42=0.6220084679281461892*reg53; reg58=skin_elem.p*reg58; reg8=reg68*reg8; reg64=0.6220084679281461892*reg51;
    reg49=skin_elem.p*reg49; reg65=0.6220084679281461892*reg71; reg69=0.16666666666666667632*reg67; reg60=reg62+reg60; reg54=skin_elem.p*reg54;
    reg62=0.044658198738520458147*reg53; reg70=0.044658198738520458147*reg61; reg73=0.16666666666666667632*skin_elem.f_surf[0]; reg74=0.16666666666666667632*skin_elem.f_surf[1]; reg37=reg30+reg37;
    reg32=reg39+reg32; reg46=reg77*reg46; reg68=reg72*reg68; reg30=0.6220084679281461892*skin_elem.f_surf[1]; reg39=0.6220084679281461892*skin_elem.f_surf[2];
    reg72=0.16666666666666667632*skin_elem.f_surf[2]; reg75=0.044658198738520458147*skin_elem.f_surf[2]; reg76=0.044658198738520458147*reg54; reg65=reg30+reg65; reg45=reg22+reg45;
    reg77=0.16666666666666667632*reg49; T reg78=0.16666666666666667632*reg58; reg44=reg72+reg44; reg64=reg39+reg64; reg34=reg75+reg34;
    reg52=reg73+reg52; reg43=reg74+reg43; reg59=reg30+reg59; T reg79=0.044658198738520458147*reg49; reg48=reg72+reg48;
    reg42=reg22+reg42; T reg80=0.6220084679281461892*reg58; reg50=reg39+reg50; reg70=reg75+reg70; T reg81=0.044658198738520458147*reg58;
    reg23=reg33+reg23; T reg82=0.6220084679281461892*reg49; reg29=reg13+reg29; T reg83=0.6220084679281461892*reg54; reg69=reg73+reg69;
    reg57=reg8-reg57; reg63=reg56+reg63; reg60=reg41*reg60; reg37=reg32*reg37; reg55=skin_elem.p*reg55;
    reg25=reg13+reg25; reg40=skin_elem.p*reg40; reg62=reg33+reg62; reg36=reg74+reg36; reg8=0.16666666666666667632*reg54;
    reg46=reg68-reg46; reg38=reg35+reg38; reg21=skin_elem.p*reg21; reg60=reg37-reg60; reg45=reg57*reg45;
    reg35=0.6220084679281461892*reg21; reg42=reg46*reg42; reg76=reg33+reg76; reg81=reg75+reg81; reg70=reg57*reg70;
    reg37=0.16666666666666667632*reg21; reg41=0.16666666666666667632*reg40; reg50=reg57*reg50; reg80=reg39+reg80; reg62=reg46*reg62;
    reg69=reg69*reg57; reg79=reg13+reg79; reg56=0.044658198738520458147*reg21; reg43=reg46*reg43; reg48=reg46*reg48;
    reg59=reg57*reg59; reg8=reg73+reg8; reg36=reg57*reg36; reg77=reg74+reg77; reg29=reg57*reg29;
    reg68=0.044658198738520458147*reg55; T reg84=0.6220084679281461892*reg40; reg83=reg22+reg83; reg38=reg32*reg38; reg64=reg46*reg64;
    reg34=reg46*reg34; reg25=reg46*reg25; reg44=reg57*reg44; reg23=reg57*reg23; reg78=reg72+reg78;
    reg65=reg46*reg65; reg52=reg46*reg52; reg32=0.16666666666666667632*reg55; T reg85=0.044658198738520458147*reg40; T reg86=0.6220084679281461892*reg55;
    reg82=reg30+reg82; reg63=reg47*reg63; reg23=0.25*reg23; reg48=0.25*reg48; reg82=reg60*reg82;
    reg63=reg38-reg63; reg32=reg72+reg32; reg83=reg60*reg83; reg81=reg60*reg81; reg29=0.25*reg29;
    reg70=0.25*reg70; reg50=0.25*reg50; reg62=0.25*reg62; reg36=0.25*reg36; reg77=reg60*reg77;
    reg68=reg75+reg68; reg84=reg30+reg84; reg64=0.25*reg64; reg25=0.25*reg25; reg34=0.25*reg34;
    reg44=0.25*reg44; reg78=reg60*reg78; reg85=reg13+reg85; reg86=reg39+reg86; reg65=0.25*reg65;
    reg52=0.25*reg52; reg35=reg22+reg35; reg45=0.25*reg45; reg41=reg74+reg41; reg80=reg60*reg80;
    reg79=reg60*reg79; reg59=0.25*reg59; reg43=0.25*reg43; reg8=reg60*reg8; reg56=reg33+reg56;
    reg37=reg73+reg37; reg69=0.25*reg69; reg42=0.25*reg42; reg76=reg60*reg76; reg56=reg63*reg56;
    reg85=reg63*reg85; reg82=0.25*reg82; reg65=reg36+reg65; reg80=0.25*reg80; reg64=reg44+reg64;
    reg29=reg43+reg29; reg70=reg48+reg70; reg68=reg63*reg68; reg42=reg69+reg42; reg44=reg34+reg44;
    reg78=0.25*reg78; reg86=reg63*reg86; reg35=reg63*reg35; reg45=reg52+reg45; reg8=0.25*reg8;
    reg76=0.25*reg76; reg37=reg63*reg37; reg84=reg63*reg84; reg59=reg43+reg59; reg69=reg62+reg69;
    reg79=0.25*reg79; reg41=reg63*reg41; reg77=0.25*reg77; reg50=reg48+reg50; reg81=0.25*reg81;
    reg83=0.25*reg83; reg23=reg52+reg23; reg36=reg25+reg36; reg32=reg63*reg32; reg85=0.25*reg85;
    reg83=reg23+reg83; reg44=reg44+reg78; reg65=reg77+reg65; reg86=0.25*reg86; reg84=0.25*reg84;
    reg35=0.25*reg35; reg68=0.25*reg68; reg69=reg69+reg8; reg32=0.25*reg32; reg76=reg45+reg76;
    reg82=reg29+reg82; reg56=0.25*reg56; reg37=0.25*reg37; reg64=reg78+reg64; reg81=reg50+reg81;
    reg42=reg8+reg42; reg77=reg36+reg77; reg80=reg70+reg80; reg79=reg59+reg79; reg41=0.25*reg41;
    reg84=reg77+reg84; sollicitation[indices[0]+1]+=reg84; reg68=reg64+reg68; sollicitation[indices[7]+2]+=reg68; reg35=reg69+reg35;
    sollicitation[indices[0]+0]+=reg35; reg85=reg65+reg85; sollicitation[indices[7]+1]+=reg85; reg86=reg44+reg86; sollicitation[indices[0]+2]+=reg86;
    reg56=reg42+reg56; sollicitation[indices[7]+0]+=reg56; reg76=reg76+reg37; sollicitation[indices[3]+0]+=reg76; reg80=reg32+reg80;
    sollicitation[indices[4]+2]+=reg80; reg79=reg79+reg41; sollicitation[indices[3]+1]+=reg79; reg82=reg41+reg82; sollicitation[indices[4]+1]+=reg82;
    reg32=reg81+reg32; sollicitation[indices[3]+2]+=reg32; reg83=reg37+reg83; sollicitation[indices[4]+0]+=reg83;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(1)[0]; T reg1=0.21132486540518713447*elem.pos(1)[1]; T reg2=0.21132486540518713447*elem.pos(2)[0]; T reg3=0.21132486540518713447*elem.pos(2)[1]; T reg4=0.78867513459481286553*elem.pos(6)[0];
    T reg5=0.78867513459481286553*elem.pos(1)[1]; T reg6=0.78867513459481286553*elem.pos(2)[1]; T reg7=0.78867513459481286553*elem.pos(1)[0]; T reg8=0.78867513459481286553*elem.pos(2)[0]; T reg9=0.21132486540518713447*elem.pos(1)[2];
    T reg10=0.21132486540518713447*elem.pos(2)[2]; T reg11=reg2-reg0; T reg12=reg3-reg1; T reg13=0.78867513459481286553*elem.pos(6)[1]; T reg14=0.78867513459481286553*elem.pos(5)[1];
    T reg15=0.78867513459481286553*elem.pos(5)[0]; T reg16=0.21132486540518713447*elem.pos(6)[0]; T reg17=0.78867513459481286553*elem.pos(6)[2]; T reg18=0.21132486540518713447*elem.pos(6)[1]; T reg19=reg10-reg9;
    reg12=reg13+reg12; reg11=reg4+reg11; T reg20=reg8-reg7; T reg21=reg6-reg5; T reg22=0.78867513459481286553*elem.pos(2)[2];
    T reg23=0.78867513459481286553*elem.pos(1)[2]; reg20=reg16+reg20; T reg24=0.78867513459481286553*elem.pos(5)[2]; reg21=reg18+reg21; reg11=reg11-reg15;
    T reg25=reg22-reg23; reg12=reg12-reg14; T reg26=0.21132486540518713447*elem.pos(5)[1]; T reg27=0.21132486540518713447*elem.pos(5)[0]; reg19=reg17+reg19;
    T reg28=0.21132486540518713447*elem.pos(6)[2]; T reg29=pow(reg12,2); T reg30=0.21132486540518713447*elem.pos(5)[2]; reg19=reg19-reg24; T reg31=pow(reg11,2);
    reg20=reg20-reg27; reg21=reg21-reg26; reg25=reg28+reg25; reg29=reg31+reg29; reg31=pow(reg19,2);
    T reg32=pow(reg20,2); T reg33=pow(reg21,2); reg25=reg25-reg30; T reg34=reg7+reg2; reg31=reg29+reg31;
    reg29=reg5+reg3; reg33=reg32+reg33; reg32=pow(reg25,2); T reg35=reg8+reg0; T reg36=reg6+reg1;
    reg34=reg16-reg34; T reg37=reg22+reg9; reg29=reg18-reg29; reg32=reg33+reg32; reg36=reg13-reg36;
    reg31=pow(reg31,0.5); reg35=reg4-reg35; reg33=reg23+reg10; reg35=reg27+reg35; reg36=reg26+reg36;
    reg32=pow(reg32,0.5); reg33=reg28-reg33; reg29=reg14+reg29; reg34=reg15+reg34; reg37=reg17-reg37;
    T reg38=reg12/reg31; T reg39=reg11/reg31; reg37=reg30+reg37; reg33=reg24+reg33; T reg40=reg38*reg36;
    reg31=reg19/reg31; T reg41=reg39*reg35; T reg42=reg38*reg29; T reg43=reg39*reg34; T reg44=reg20/reg32;
    T reg45=reg21/reg32; T reg46=reg31*reg37; reg40=reg41+reg40; reg42=reg43+reg42; reg32=reg25/reg32;
    reg41=reg35*reg44; reg43=reg36*reg45; T reg47=reg31*reg33; T reg48=reg29*reg45; T reg49=reg34*reg44;
    reg47=reg42+reg47; reg46=reg40+reg46; reg40=reg37*reg32; reg43=reg41+reg43; reg41=reg39*reg46;
    reg49=reg48+reg49; reg42=reg33*reg32; reg48=reg39*reg47; T reg50=reg38*reg47; T reg51=reg38*reg46;
    reg40=reg43+reg40; reg50=reg29-reg50; reg43=reg45*reg40; reg48=reg34-reg48; T reg52=reg31*reg47;
    T reg53=reg31*reg46; reg42=reg49+reg42; reg51=reg36-reg51; reg41=reg35-reg41; reg49=reg44*reg40;
    T reg54=pow(reg51,2); reg53=reg37-reg53; T reg55=pow(reg41,2); reg43=reg36-reg43; reg49=reg35-reg49;
    T reg56=pow(reg48,2); T reg57=pow(reg50,2); reg52=reg33-reg52; T reg58=reg45*reg42; T reg59=reg44*reg42;
    T reg60=reg32*reg40; T reg61=pow(reg53,2); T reg62=pow(reg43,2); reg54=reg55+reg54; reg55=pow(reg49,2);
    reg59=reg34-reg59; reg58=reg29-reg58; reg60=reg37-reg60; reg57=reg56+reg57; reg56=pow(reg52,2);
    T reg63=reg32*reg42; T reg64=pow(reg60,2); reg62=reg55+reg62; reg55=pow(reg59,2); reg63=reg33-reg63;
    reg56=reg57+reg56; reg61=reg54+reg61; reg54=pow(reg58,2); reg54=reg55+reg54; reg64=reg62+reg64;
    reg61=pow(reg61,0.5); reg56=pow(reg56,0.5); reg55=pow(reg63,2); reg55=reg54+reg55; reg53=reg53/reg61;
    reg64=pow(reg64,0.5); reg41=reg41/reg61; reg48=reg48/reg56; reg61=reg51/reg61; reg52=reg52/reg56;
    reg56=reg50/reg56; reg49=reg49/reg64; reg43=reg43/reg64; reg64=reg60/reg64; reg50=reg38*reg41;
    reg51=reg39*reg61; reg54=reg39*reg53; reg57=reg31*reg41; reg60=reg31*reg61; reg62=reg38*reg48;
    T reg65=reg39*reg56; T reg66=reg39*reg52; T reg67=reg31*reg48; T reg68=reg31*reg56; T reg69=reg38*reg52;
    T reg70=reg12*reg56; T reg71=reg11*reg48; reg56=reg29*reg56; reg48=reg34*reg48; reg55=pow(reg55,0.5);
    T reg72=reg38*reg53; reg39=reg11*reg39; reg38=reg12*reg38; T reg73=reg35*reg41; reg12=reg12*reg61;
    reg41=reg11*reg41; reg61=reg36*reg61; reg56=reg48+reg56; reg11=reg33*reg52; reg70=reg71+reg70;
    reg52=reg19*reg52; reg68=reg69-reg68; reg66=reg67-reg66; reg62=reg65-reg62; reg48=reg20*reg44;
    reg65=reg21*reg45; reg35=reg35*reg49; reg36=reg36*reg43; reg67=reg20*reg49; reg69=reg21*reg43;
    reg71=reg45*reg64; T reg74=reg32*reg43; T reg75=reg32*reg49; T reg76=reg44*reg64; reg43=reg44*reg43;
    reg49=reg45*reg49; reg59=reg59/reg55; reg58=reg58/reg55; reg55=reg63/reg55; reg31=reg19*reg31;
    reg38=reg39+reg38; reg12=reg41+reg12; reg50=reg51-reg50; reg39=reg37*reg53; reg53=reg19*reg53;
    reg54=reg57-reg54; reg61=reg73+reg61; reg60=reg72-reg60; reg20=reg20*reg59; reg21=reg21*reg58;
    reg62=skin_elem.p*reg62; reg37=reg37*reg64; reg36=reg35+reg36; reg39=reg61+reg39; reg19=reg45*reg59;
    reg35=reg44*reg58; reg29=reg29*reg58; reg60=skin_elem.p*reg60; reg41=reg25*reg32; reg44=reg44*reg55;
    reg51=reg32*reg59; reg59=reg34*reg59; reg31=reg38+reg31; reg45=reg45*reg55; reg58=reg32*reg58;
    reg65=reg48+reg65; reg66=skin_elem.p*reg66; reg69=reg67+reg69; reg49=reg43-reg49; reg68=skin_elem.p*reg68;
    reg64=reg25*reg64; reg54=skin_elem.p*reg54; reg50=skin_elem.p*reg50; reg52=reg70+reg52; reg74=reg71-reg74;
    reg76=reg75-reg76; reg53=reg12+reg53; reg11=reg56+reg11; reg12=0.16666666666666667632*skin_elem.f_surf[2]; reg32=0.044658198738520458147*skin_elem.f_surf[2];
    reg34=0.044658198738520458147*reg68; reg38=0.6220084679281461892*skin_elem.f_surf[1]; reg43=0.16666666666666667632*skin_elem.f_surf[1]; reg29=reg59+reg29; reg48=0.16666666666666667632*skin_elem.f_surf[0];
    reg56=0.044658198738520458147*skin_elem.f_surf[1]; reg57=0.6220084679281461892*skin_elem.f_surf[0]; reg59=0.6220084679281461892*skin_elem.f_surf[2]; reg49=skin_elem.p*reg49; reg76=skin_elem.p*reg76;
    reg61=0.16666666666666667632*reg60; reg53=reg46*reg53; reg74=skin_elem.p*reg74; reg46=0.044658198738520458147*skin_elem.f_surf[0]; reg64=reg69+reg64;
    reg37=reg36+reg37; reg39=reg31*reg39; reg11=reg31*reg11; reg31=0.16666666666666667632*reg68; reg36=0.6220084679281461892*reg66;
    reg63=0.6220084679281461892*reg68; reg52=reg47*reg52; reg47=0.044658198738520458147*reg54; reg67=0.044658198738520458147*reg62; reg69=0.16666666666666667632*reg50;
    reg70=0.6220084679281461892*reg62; reg71=0.044658198738520458147*reg66; reg72=0.044658198738520458147*reg50; reg73=0.16666666666666667632*reg54; reg75=0.6220084679281461892*reg60;
    T reg77=0.16666666666666667632*reg62; reg33=reg33*reg55; reg21=reg20+reg21; reg55=reg25*reg55; reg20=0.6220084679281461892*reg50;
    reg41=reg65+reg41; reg58=reg45-reg58; reg25=0.16666666666666667632*reg66; reg45=0.6220084679281461892*reg54; reg65=0.044658198738520458147*reg60;
    reg44=reg51-reg44; reg19=reg35-reg19; reg70=reg59+reg70; reg45=reg38+reg45; reg35=0.044658198738520458147*reg76;
    reg36=reg38+reg36; reg51=0.044658198738520458147*reg49; reg75=reg57+reg75; reg20=reg59+reg20; T reg78=0.044658198738520458147*reg74;
    reg63=reg57+reg63; T reg79=0.6220084679281461892*reg49; reg67=reg32+reg67; reg69=reg12+reg69; T reg80=0.6220084679281461892*reg76;
    reg71=reg56+reg71; reg73=reg43+reg73; T reg81=0.6220084679281461892*reg74; reg19=skin_elem.p*reg19; reg44=skin_elem.p*reg44;
    reg58=skin_elem.p*reg58; reg53=reg39-reg53; reg55=reg21+reg55; reg33=reg29+reg33; reg21=0.16666666666666667632*reg76;
    reg77=reg12+reg77; reg29=0.16666666666666667632*reg49; reg25=reg43+reg25; reg31=reg48+reg31; reg52=reg11-reg52;
    reg72=reg32+reg72; reg11=0.16666666666666667632*reg74; reg34=reg46+reg34; reg47=reg56+reg47; reg61=reg48+reg61;
    reg65=reg46+reg65; reg37=reg41*reg37; reg64=reg40*reg64; reg77=reg77*reg52; reg73=reg53*reg73;
    reg45=reg53*reg45; reg39=0.044658198738520458147*reg58; reg40=0.16666666666666667632*reg58; reg71=reg52*reg71; reg80=reg38+reg80;
    reg75=reg53*reg75; reg81=reg57+reg81; T reg82=0.16666666666666667632*reg44; T reg83=0.044658198738520458147*reg44; reg47=reg47*reg53;
    T reg84=0.6220084679281461892*reg19; reg69=reg53*reg69; reg25=reg25*reg52; reg67=reg52*reg67; reg51=reg32+reg51;
    reg79=reg59+reg79; T reg85=0.16666666666666667632*reg19; reg70=reg52*reg70; reg65=reg65*reg53; reg63=reg52*reg63;
    reg35=reg56+reg35; reg78=reg46+reg78; reg29=reg12+reg29; reg36=reg52*reg36; T reg86=0.6220084679281461892*reg58;
    reg11=reg48+reg11; T reg87=0.6220084679281461892*reg44; reg31=reg31*reg52; reg33=reg41*reg33; reg72=reg72*reg53;
    reg61=reg61*reg53; reg21=reg43+reg21; reg41=0.044658198738520458147*reg19; reg34=reg34*reg52; reg20=reg53*reg20;
    reg55=reg42*reg55; reg64=reg37-reg64; reg67=0.25*reg67; reg25=0.25*reg25; reg20=0.25*reg20;
    reg69=0.25*reg69; reg79=reg64*reg79; reg31=0.25*reg31; reg86=reg57+reg86; reg85=reg12+reg85;
    reg70=0.25*reg70; reg61=0.25*reg61; reg65=0.25*reg65; reg63=0.25*reg63; reg35=reg64*reg35;
    reg41=reg32+reg41; reg78=reg64*reg78; reg36=0.25*reg36; reg29=reg29*reg64; reg84=reg59+reg84;
    reg83=reg56+reg83; reg34=0.25*reg34; reg81=reg64*reg81; reg45=0.25*reg45; reg40=reg48+reg40;
    reg77=0.25*reg77; reg72=0.25*reg72; reg87=reg38+reg87; reg73=0.25*reg73; reg39=reg46+reg39;
    reg71=0.25*reg71; reg21=reg21*reg64; reg51=reg64*reg51; reg55=reg33-reg55; reg82=reg43+reg82;
    reg47=0.25*reg47; reg75=0.25*reg75; reg80=reg64*reg80; reg11=reg11*reg64; reg35=0.25*reg35;
    reg39=reg55*reg39; reg20=reg77+reg20; reg83=reg55*reg83; reg77=reg72+reg77; reg41=reg55*reg41;
    reg36=reg73+reg36; reg45=reg25+reg45; reg51=0.25*reg51; reg70=reg69+reg70; reg75=reg31+reg75;
    reg87=reg87*reg55; reg86=reg86*reg55; reg71=reg73+reg71; reg80=0.25*reg80; reg82=reg55*reg82;
    reg47=reg25+reg47; reg31=reg65+reg31; reg40=reg55*reg40; reg67=reg69+reg67; reg79=0.25*reg79;
    reg81=0.25*reg81; reg85=reg55*reg85; reg84=reg84*reg55; reg34=reg61+reg34; reg11=0.25*reg11;
    reg29=0.25*reg29; reg63=reg61+reg63; reg78=0.25*reg78; reg21=0.25*reg21; reg45=reg21+reg45;
    reg31=reg31+reg11; reg81=reg34+reg81; reg40=0.25*reg40; reg39=0.25*reg39; reg83=0.25*reg83;
    reg21=reg47+reg21; reg87=0.25*reg87; reg75=reg11+reg75; reg80=reg71+reg80; reg82=0.25*reg82;
    reg20=reg29+reg20; reg51=reg70+reg51; reg84=0.25*reg84; reg79=reg67+reg79; reg85=0.25*reg85;
    reg29=reg77+reg29; reg41=0.25*reg41; reg35=reg36+reg35; reg86=0.25*reg86; reg78=reg63+reg78;
    reg29=reg84+reg29; sollicitation[indices[1]+2]+=reg29; reg41=reg20+reg41; sollicitation[indices[6]+2]+=reg41; reg83=reg45+reg83;
    sollicitation[indices[6]+1]+=reg83; reg81=reg81+reg40; sollicitation[indices[2]+0]+=reg81; reg39=reg75+reg39; sollicitation[indices[6]+0]+=reg39;
    reg87=reg21+reg87; sollicitation[indices[1]+1]+=reg87; reg51=reg85+reg51; sollicitation[indices[5]+2]+=reg51; reg80=reg80+reg82;
    sollicitation[indices[2]+1]+=reg80; reg86=reg31+reg86; sollicitation[indices[1]+0]+=reg86; reg85=reg79+reg85; sollicitation[indices[2]+2]+=reg85;
    reg35=reg82+reg35; sollicitation[indices[5]+1]+=reg35; reg78=reg40+reg78; sollicitation[indices[5]+0]+=reg78;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(1)[0]; T reg1=0.21132486540518713447*elem.pos(1)[1]; T reg2=0.21132486540518713447*elem.pos(2)[0]; T reg3=0.21132486540518713447*elem.pos(2)[1]; T reg4=0.78867513459481286553*elem.pos(6)[0];
    T reg5=0.78867513459481286553*elem.pos(1)[1]; T reg6=0.78867513459481286553*elem.pos(2)[1]; T reg7=0.78867513459481286553*elem.pos(1)[0]; T reg8=0.78867513459481286553*elem.pos(2)[0]; T reg9=0.21132486540518713447*elem.pos(1)[2];
    T reg10=0.21132486540518713447*elem.pos(2)[2]; T reg11=reg2-reg0; T reg12=reg3-reg1; T reg13=0.78867513459481286553*elem.pos(6)[1]; T reg14=0.78867513459481286553*elem.pos(5)[1];
    T reg15=0.78867513459481286553*elem.pos(5)[0]; T reg16=0.21132486540518713447*elem.pos(6)[0]; T reg17=0.78867513459481286553*elem.pos(6)[2]; T reg18=0.21132486540518713447*elem.pos(6)[1]; T reg19=reg10-reg9;
    reg12=reg13+reg12; reg11=reg4+reg11; T reg20=reg8-reg7; T reg21=reg6-reg5; T reg22=0.78867513459481286553*elem.pos(2)[2];
    T reg23=0.78867513459481286553*elem.pos(1)[2]; reg20=reg16+reg20; T reg24=0.78867513459481286553*elem.pos(5)[2]; reg21=reg18+reg21; reg11=reg11-reg15;
    T reg25=reg22-reg23; reg12=reg12-reg14; T reg26=0.21132486540518713447*elem.pos(5)[1]; T reg27=0.21132486540518713447*elem.pos(5)[0]; reg19=reg17+reg19;
    T reg28=0.21132486540518713447*elem.pos(6)[2]; T reg29=pow(reg12,2); T reg30=0.21132486540518713447*elem.pos(5)[2]; reg19=reg19-reg24; T reg31=pow(reg11,2);
    reg20=reg20-reg27; reg21=reg21-reg26; reg25=reg28+reg25; reg29=reg31+reg29; reg31=pow(reg19,2);
    T reg32=pow(reg20,2); T reg33=pow(reg21,2); reg25=reg25-reg30; T reg34=reg7+reg2; reg31=reg29+reg31;
    reg29=reg5+reg3; reg33=reg32+reg33; reg32=pow(reg25,2); T reg35=reg8+reg0; T reg36=reg6+reg1;
    reg34=reg16-reg34; T reg37=reg22+reg9; reg29=reg18-reg29; reg32=reg33+reg32; reg36=reg13-reg36;
    reg31=pow(reg31,0.5); reg35=reg4-reg35; reg33=reg23+reg10; reg35=reg27+reg35; reg36=reg26+reg36;
    reg32=pow(reg32,0.5); reg33=reg28-reg33; reg29=reg14+reg29; reg34=reg15+reg34; reg37=reg17-reg37;
    T reg38=reg12/reg31; T reg39=reg11/reg31; reg37=reg30+reg37; reg33=reg24+reg33; T reg40=reg38*reg36;
    reg31=reg19/reg31; T reg41=reg39*reg35; T reg42=reg38*reg29; T reg43=reg39*reg34; T reg44=reg20/reg32;
    T reg45=reg21/reg32; T reg46=reg31*reg37; reg40=reg41+reg40; reg42=reg43+reg42; reg32=reg25/reg32;
    reg41=reg35*reg44; reg43=reg36*reg45; T reg47=reg31*reg33; T reg48=reg29*reg45; T reg49=reg34*reg44;
    reg47=reg42+reg47; reg46=reg40+reg46; reg40=reg37*reg32; reg43=reg41+reg43; reg41=reg39*reg46;
    reg49=reg48+reg49; reg42=reg33*reg32; reg48=reg39*reg47; T reg50=reg38*reg47; T reg51=reg38*reg46;
    reg40=reg43+reg40; reg50=reg29-reg50; reg43=reg45*reg40; reg48=reg34-reg48; T reg52=reg31*reg47;
    T reg53=reg31*reg46; reg42=reg49+reg42; reg51=reg36-reg51; reg41=reg35-reg41; reg49=reg44*reg40;
    T reg54=pow(reg51,2); reg53=reg37-reg53; T reg55=pow(reg41,2); reg43=reg36-reg43; reg49=reg35-reg49;
    T reg56=pow(reg48,2); T reg57=pow(reg50,2); reg52=reg33-reg52; T reg58=reg45*reg42; T reg59=reg44*reg42;
    T reg60=reg32*reg40; T reg61=pow(reg53,2); T reg62=pow(reg43,2); reg54=reg55+reg54; reg55=pow(reg49,2);
    reg59=reg34-reg59; reg58=reg29-reg58; reg60=reg37-reg60; reg57=reg56+reg57; reg56=pow(reg52,2);
    T reg63=reg32*reg42; T reg64=pow(reg60,2); reg62=reg55+reg62; reg55=pow(reg59,2); reg63=reg33-reg63;
    reg56=reg57+reg56; reg61=reg54+reg61; reg54=pow(reg58,2); reg54=reg55+reg54; reg64=reg62+reg64;
    reg61=pow(reg61,0.5); reg56=pow(reg56,0.5); reg55=pow(reg63,2); reg55=reg54+reg55; reg53=reg53/reg61;
    reg64=pow(reg64,0.5); reg41=reg41/reg61; reg48=reg48/reg56; reg61=reg51/reg61; reg52=reg52/reg56;
    reg56=reg50/reg56; reg49=reg49/reg64; reg43=reg43/reg64; reg64=reg60/reg64; reg50=reg38*reg41;
    reg51=reg39*reg61; reg54=reg39*reg53; reg57=reg31*reg41; reg60=reg31*reg61; reg62=reg38*reg48;
    T reg65=reg39*reg56; T reg66=reg39*reg52; T reg67=reg31*reg48; T reg68=reg31*reg56; T reg69=reg38*reg52;
    T reg70=reg12*reg56; T reg71=reg11*reg48; reg56=reg29*reg56; reg48=reg34*reg48; reg55=pow(reg55,0.5);
    T reg72=reg38*reg53; reg39=reg11*reg39; reg38=reg12*reg38; T reg73=reg35*reg41; reg12=reg12*reg61;
    reg41=reg11*reg41; reg61=reg36*reg61; reg56=reg48+reg56; reg11=reg33*reg52; reg70=reg71+reg70;
    reg52=reg19*reg52; reg68=reg69-reg68; reg66=reg67-reg66; reg62=reg65-reg62; reg48=reg20*reg44;
    reg65=reg21*reg45; reg35=reg35*reg49; reg36=reg36*reg43; reg67=reg20*reg49; reg69=reg21*reg43;
    reg71=reg45*reg64; T reg74=reg32*reg43; T reg75=reg32*reg49; T reg76=reg44*reg64; reg43=reg44*reg43;
    reg49=reg45*reg49; reg59=reg59/reg55; reg58=reg58/reg55; reg55=reg63/reg55; reg31=reg19*reg31;
    reg38=reg39+reg38; reg12=reg41+reg12; reg50=reg51-reg50; reg39=reg37*reg53; reg53=reg19*reg53;
    reg54=reg57-reg54; reg61=reg73+reg61; reg60=reg72-reg60; reg20=reg20*reg59; reg21=reg21*reg58;
    reg62=skin_elem.p*reg62; reg37=reg37*reg64; reg36=reg35+reg36; reg39=reg61+reg39; reg19=reg45*reg59;
    reg35=reg44*reg58; reg29=reg29*reg58; reg60=skin_elem.p*reg60; reg41=reg25*reg32; reg44=reg44*reg55;
    reg51=reg32*reg59; reg59=reg34*reg59; reg31=reg38+reg31; reg45=reg45*reg55; reg58=reg32*reg58;
    reg65=reg48+reg65; reg66=skin_elem.p*reg66; reg69=reg67+reg69; reg49=reg43-reg49; reg68=skin_elem.p*reg68;
    reg64=reg25*reg64; reg54=skin_elem.p*reg54; reg50=skin_elem.p*reg50; reg52=reg70+reg52; reg74=reg71-reg74;
    reg76=reg75-reg76; reg53=reg12+reg53; reg11=reg56+reg11; reg12=0.16666666666666667632*skin_elem.f_surf[2]; reg32=0.044658198738520458147*skin_elem.f_surf[2];
    reg34=0.044658198738520458147*reg68; reg38=0.6220084679281461892*skin_elem.f_surf[1]; reg43=0.16666666666666667632*skin_elem.f_surf[1]; reg29=reg59+reg29; reg48=0.16666666666666667632*skin_elem.f_surf[0];
    reg56=0.044658198738520458147*skin_elem.f_surf[1]; reg57=0.6220084679281461892*skin_elem.f_surf[0]; reg59=0.6220084679281461892*skin_elem.f_surf[2]; reg49=skin_elem.p*reg49; reg76=skin_elem.p*reg76;
    reg61=0.16666666666666667632*reg60; reg53=reg46*reg53; reg74=skin_elem.p*reg74; reg46=0.044658198738520458147*skin_elem.f_surf[0]; reg64=reg69+reg64;
    reg37=reg36+reg37; reg39=reg31*reg39; reg11=reg31*reg11; reg31=0.16666666666666667632*reg68; reg36=0.6220084679281461892*reg66;
    reg63=0.6220084679281461892*reg68; reg52=reg47*reg52; reg47=0.044658198738520458147*reg54; reg67=0.044658198738520458147*reg62; reg69=0.16666666666666667632*reg50;
    reg70=0.6220084679281461892*reg62; reg71=0.044658198738520458147*reg66; reg72=0.044658198738520458147*reg50; reg73=0.16666666666666667632*reg54; reg75=0.6220084679281461892*reg60;
    T reg77=0.16666666666666667632*reg62; reg33=reg33*reg55; reg21=reg20+reg21; reg55=reg25*reg55; reg20=0.6220084679281461892*reg50;
    reg41=reg65+reg41; reg58=reg45-reg58; reg25=0.16666666666666667632*reg66; reg45=0.6220084679281461892*reg54; reg65=0.044658198738520458147*reg60;
    reg44=reg51-reg44; reg19=reg35-reg19; reg70=reg59+reg70; reg45=reg38+reg45; reg35=0.044658198738520458147*reg76;
    reg36=reg38+reg36; reg51=0.044658198738520458147*reg49; reg75=reg57+reg75; reg20=reg59+reg20; T reg78=0.044658198738520458147*reg74;
    reg63=reg57+reg63; T reg79=0.6220084679281461892*reg49; reg67=reg32+reg67; reg69=reg12+reg69; T reg80=0.6220084679281461892*reg76;
    reg71=reg56+reg71; reg73=reg43+reg73; T reg81=0.6220084679281461892*reg74; reg19=skin_elem.p*reg19; reg44=skin_elem.p*reg44;
    reg58=skin_elem.p*reg58; reg53=reg39-reg53; reg55=reg21+reg55; reg33=reg29+reg33; reg21=0.16666666666666667632*reg76;
    reg77=reg12+reg77; reg29=0.16666666666666667632*reg49; reg25=reg43+reg25; reg31=reg48+reg31; reg52=reg11-reg52;
    reg72=reg32+reg72; reg11=0.16666666666666667632*reg74; reg34=reg46+reg34; reg47=reg56+reg47; reg61=reg48+reg61;
    reg65=reg46+reg65; reg37=reg41*reg37; reg64=reg40*reg64; reg77=reg77*reg52; reg73=reg53*reg73;
    reg45=reg53*reg45; reg39=0.044658198738520458147*reg58; reg40=0.16666666666666667632*reg58; reg71=reg52*reg71; reg80=reg38+reg80;
    reg75=reg53*reg75; reg81=reg57+reg81; T reg82=0.16666666666666667632*reg44; T reg83=0.044658198738520458147*reg44; reg47=reg47*reg53;
    T reg84=0.6220084679281461892*reg19; reg69=reg53*reg69; reg25=reg25*reg52; reg67=reg52*reg67; reg51=reg32+reg51;
    reg79=reg59+reg79; T reg85=0.16666666666666667632*reg19; reg70=reg52*reg70; reg65=reg65*reg53; reg63=reg52*reg63;
    reg35=reg56+reg35; reg78=reg46+reg78; reg29=reg12+reg29; reg36=reg52*reg36; T reg86=0.6220084679281461892*reg58;
    reg11=reg48+reg11; T reg87=0.6220084679281461892*reg44; reg31=reg31*reg52; reg33=reg41*reg33; reg72=reg72*reg53;
    reg61=reg61*reg53; reg21=reg43+reg21; reg41=0.044658198738520458147*reg19; reg34=reg34*reg52; reg20=reg53*reg20;
    reg55=reg42*reg55; reg64=reg37-reg64; reg67=0.25*reg67; reg25=0.25*reg25; reg20=0.25*reg20;
    reg69=0.25*reg69; reg79=reg64*reg79; reg31=0.25*reg31; reg86=reg57+reg86; reg85=reg12+reg85;
    reg70=0.25*reg70; reg61=0.25*reg61; reg65=0.25*reg65; reg63=0.25*reg63; reg35=reg64*reg35;
    reg41=reg32+reg41; reg78=reg64*reg78; reg36=0.25*reg36; reg29=reg29*reg64; reg84=reg59+reg84;
    reg83=reg56+reg83; reg34=0.25*reg34; reg81=reg64*reg81; reg45=0.25*reg45; reg40=reg48+reg40;
    reg77=0.25*reg77; reg72=0.25*reg72; reg87=reg38+reg87; reg73=0.25*reg73; reg39=reg46+reg39;
    reg71=0.25*reg71; reg21=reg21*reg64; reg51=reg64*reg51; reg55=reg33-reg55; reg82=reg43+reg82;
    reg47=0.25*reg47; reg75=0.25*reg75; reg80=reg64*reg80; reg11=reg11*reg64; reg35=0.25*reg35;
    reg39=reg55*reg39; reg20=reg77+reg20; reg83=reg55*reg83; reg77=reg72+reg77; reg41=reg55*reg41;
    reg36=reg73+reg36; reg45=reg25+reg45; reg51=0.25*reg51; reg70=reg69+reg70; reg75=reg31+reg75;
    reg87=reg87*reg55; reg86=reg86*reg55; reg71=reg73+reg71; reg80=0.25*reg80; reg82=reg55*reg82;
    reg47=reg25+reg47; reg31=reg65+reg31; reg40=reg55*reg40; reg67=reg69+reg67; reg79=0.25*reg79;
    reg81=0.25*reg81; reg85=reg55*reg85; reg84=reg84*reg55; reg34=reg61+reg34; reg11=0.25*reg11;
    reg29=0.25*reg29; reg63=reg61+reg63; reg78=0.25*reg78; reg21=0.25*reg21; reg45=reg21+reg45;
    reg31=reg31+reg11; reg81=reg34+reg81; reg40=0.25*reg40; reg39=0.25*reg39; reg83=0.25*reg83;
    reg21=reg47+reg21; reg87=0.25*reg87; reg75=reg11+reg75; reg80=reg71+reg80; reg82=0.25*reg82;
    reg20=reg29+reg20; reg51=reg70+reg51; reg84=0.25*reg84; reg79=reg67+reg79; reg85=0.25*reg85;
    reg29=reg77+reg29; reg41=0.25*reg41; reg35=reg36+reg35; reg86=0.25*reg86; reg78=reg63+reg78;
    reg29=reg84+reg29; sollicitation[indices[1]+2]+=reg29; reg41=reg20+reg41; sollicitation[indices[6]+2]+=reg41; reg83=reg45+reg83;
    sollicitation[indices[6]+1]+=reg83; reg81=reg81+reg40; sollicitation[indices[2]+0]+=reg81; reg39=reg75+reg39; sollicitation[indices[6]+0]+=reg39;
    reg87=reg21+reg87; sollicitation[indices[1]+1]+=reg87; reg51=reg85+reg51; sollicitation[indices[5]+2]+=reg51; reg80=reg80+reg82;
    sollicitation[indices[2]+1]+=reg80; reg86=reg31+reg86; sollicitation[indices[1]+0]+=reg86; reg85=reg79+reg85; sollicitation[indices[2]+2]+=reg85;
    reg35=reg82+reg35; sollicitation[indices[5]+1]+=reg35; reg78=reg40+reg78; sollicitation[indices[5]+0]+=reg78;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(1)[0]; T reg1=0.21132486540518713447*elem.pos(1)[1]; T reg2=0.21132486540518713447*elem.pos(2)[0]; T reg3=0.21132486540518713447*elem.pos(2)[1]; T reg4=0.78867513459481286553*elem.pos(6)[0];
    T reg5=0.78867513459481286553*elem.pos(1)[1]; T reg6=0.78867513459481286553*elem.pos(2)[1]; T reg7=0.78867513459481286553*elem.pos(1)[0]; T reg8=0.78867513459481286553*elem.pos(2)[0]; T reg9=0.21132486540518713447*elem.pos(1)[2];
    T reg10=0.21132486540518713447*elem.pos(2)[2]; T reg11=reg2-reg0; T reg12=reg3-reg1; T reg13=0.78867513459481286553*elem.pos(6)[1]; T reg14=0.78867513459481286553*elem.pos(5)[1];
    T reg15=0.78867513459481286553*elem.pos(5)[0]; T reg16=0.21132486540518713447*elem.pos(6)[0]; T reg17=0.78867513459481286553*elem.pos(6)[2]; T reg18=0.21132486540518713447*elem.pos(6)[1]; T reg19=reg10-reg9;
    reg12=reg13+reg12; reg11=reg4+reg11; T reg20=reg8-reg7; T reg21=reg6-reg5; T reg22=0.78867513459481286553*elem.pos(2)[2];
    T reg23=0.78867513459481286553*elem.pos(1)[2]; reg20=reg16+reg20; T reg24=0.78867513459481286553*elem.pos(5)[2]; reg21=reg18+reg21; reg11=reg11-reg15;
    T reg25=reg22-reg23; reg12=reg12-reg14; T reg26=0.21132486540518713447*elem.pos(5)[1]; T reg27=0.21132486540518713447*elem.pos(5)[0]; reg19=reg17+reg19;
    T reg28=0.21132486540518713447*elem.pos(6)[2]; T reg29=pow(reg12,2); T reg30=0.21132486540518713447*elem.pos(5)[2]; reg19=reg19-reg24; T reg31=pow(reg11,2);
    reg20=reg20-reg27; reg21=reg21-reg26; reg25=reg28+reg25; reg29=reg31+reg29; reg31=pow(reg19,2);
    T reg32=pow(reg20,2); T reg33=pow(reg21,2); reg25=reg25-reg30; T reg34=reg7+reg2; reg31=reg29+reg31;
    reg29=reg5+reg3; reg33=reg32+reg33; reg32=pow(reg25,2); T reg35=reg8+reg0; T reg36=reg6+reg1;
    reg34=reg16-reg34; T reg37=reg22+reg9; reg29=reg18-reg29; reg32=reg33+reg32; reg36=reg13-reg36;
    reg31=pow(reg31,0.5); reg35=reg4-reg35; reg33=reg23+reg10; reg35=reg27+reg35; reg36=reg26+reg36;
    reg32=pow(reg32,0.5); reg33=reg28-reg33; reg29=reg14+reg29; reg34=reg15+reg34; reg37=reg17-reg37;
    T reg38=reg12/reg31; T reg39=reg11/reg31; reg37=reg30+reg37; reg33=reg24+reg33; T reg40=reg38*reg36;
    reg31=reg19/reg31; T reg41=reg39*reg35; T reg42=reg38*reg29; T reg43=reg39*reg34; T reg44=reg20/reg32;
    T reg45=reg21/reg32; T reg46=reg31*reg37; reg40=reg41+reg40; reg42=reg43+reg42; reg32=reg25/reg32;
    reg41=reg35*reg44; reg43=reg36*reg45; T reg47=reg31*reg33; T reg48=reg29*reg45; T reg49=reg34*reg44;
    reg47=reg42+reg47; reg46=reg40+reg46; reg40=reg37*reg32; reg43=reg41+reg43; reg41=reg39*reg46;
    reg49=reg48+reg49; reg42=reg33*reg32; reg48=reg39*reg47; T reg50=reg38*reg47; T reg51=reg38*reg46;
    reg40=reg43+reg40; reg50=reg29-reg50; reg43=reg45*reg40; reg48=reg34-reg48; T reg52=reg31*reg47;
    T reg53=reg31*reg46; reg42=reg49+reg42; reg51=reg36-reg51; reg41=reg35-reg41; reg49=reg44*reg40;
    T reg54=pow(reg51,2); reg53=reg37-reg53; T reg55=pow(reg41,2); reg43=reg36-reg43; reg49=reg35-reg49;
    T reg56=pow(reg48,2); T reg57=pow(reg50,2); reg52=reg33-reg52; T reg58=reg45*reg42; T reg59=reg44*reg42;
    T reg60=reg32*reg40; T reg61=pow(reg53,2); T reg62=pow(reg43,2); reg54=reg55+reg54; reg55=pow(reg49,2);
    reg59=reg34-reg59; reg58=reg29-reg58; reg60=reg37-reg60; reg57=reg56+reg57; reg56=pow(reg52,2);
    T reg63=reg32*reg42; T reg64=pow(reg60,2); reg62=reg55+reg62; reg55=pow(reg59,2); reg63=reg33-reg63;
    reg56=reg57+reg56; reg61=reg54+reg61; reg54=pow(reg58,2); reg54=reg55+reg54; reg64=reg62+reg64;
    reg61=pow(reg61,0.5); reg56=pow(reg56,0.5); reg55=pow(reg63,2); reg55=reg54+reg55; reg53=reg53/reg61;
    reg64=pow(reg64,0.5); reg41=reg41/reg61; reg48=reg48/reg56; reg61=reg51/reg61; reg52=reg52/reg56;
    reg56=reg50/reg56; reg49=reg49/reg64; reg43=reg43/reg64; reg64=reg60/reg64; reg50=reg38*reg41;
    reg51=reg39*reg61; reg54=reg39*reg53; reg57=reg31*reg41; reg60=reg31*reg61; reg62=reg38*reg48;
    T reg65=reg39*reg56; T reg66=reg39*reg52; T reg67=reg31*reg48; T reg68=reg31*reg56; T reg69=reg38*reg52;
    T reg70=reg12*reg56; T reg71=reg11*reg48; reg56=reg29*reg56; reg48=reg34*reg48; reg55=pow(reg55,0.5);
    T reg72=reg38*reg53; reg39=reg11*reg39; reg38=reg12*reg38; T reg73=reg35*reg41; reg12=reg12*reg61;
    reg41=reg11*reg41; reg61=reg36*reg61; reg56=reg48+reg56; reg11=reg33*reg52; reg70=reg71+reg70;
    reg52=reg19*reg52; reg68=reg69-reg68; reg66=reg67-reg66; reg62=reg65-reg62; reg48=reg20*reg44;
    reg65=reg21*reg45; reg35=reg35*reg49; reg36=reg36*reg43; reg67=reg20*reg49; reg69=reg21*reg43;
    reg71=reg45*reg64; T reg74=reg32*reg43; T reg75=reg32*reg49; T reg76=reg44*reg64; reg43=reg44*reg43;
    reg49=reg45*reg49; reg59=reg59/reg55; reg58=reg58/reg55; reg55=reg63/reg55; reg31=reg19*reg31;
    reg38=reg39+reg38; reg12=reg41+reg12; reg50=reg51-reg50; reg39=reg37*reg53; reg53=reg19*reg53;
    reg54=reg57-reg54; reg61=reg73+reg61; reg60=reg72-reg60; reg20=reg20*reg59; reg21=reg21*reg58;
    reg62=skin_elem.p*reg62; reg37=reg37*reg64; reg36=reg35+reg36; reg39=reg61+reg39; reg19=reg45*reg59;
    reg35=reg44*reg58; reg29=reg29*reg58; reg60=skin_elem.p*reg60; reg41=reg25*reg32; reg44=reg44*reg55;
    reg51=reg32*reg59; reg59=reg34*reg59; reg31=reg38+reg31; reg45=reg45*reg55; reg58=reg32*reg58;
    reg65=reg48+reg65; reg66=skin_elem.p*reg66; reg69=reg67+reg69; reg49=reg43-reg49; reg68=skin_elem.p*reg68;
    reg64=reg25*reg64; reg54=skin_elem.p*reg54; reg50=skin_elem.p*reg50; reg52=reg70+reg52; reg74=reg71-reg74;
    reg76=reg75-reg76; reg53=reg12+reg53; reg11=reg56+reg11; reg12=0.16666666666666667632*skin_elem.f_surf[2]; reg32=0.044658198738520458147*skin_elem.f_surf[2];
    reg34=0.044658198738520458147*reg68; reg38=0.6220084679281461892*skin_elem.f_surf[1]; reg43=0.16666666666666667632*skin_elem.f_surf[1]; reg29=reg59+reg29; reg48=0.16666666666666667632*skin_elem.f_surf[0];
    reg56=0.044658198738520458147*skin_elem.f_surf[1]; reg57=0.6220084679281461892*skin_elem.f_surf[0]; reg59=0.6220084679281461892*skin_elem.f_surf[2]; reg49=skin_elem.p*reg49; reg76=skin_elem.p*reg76;
    reg61=0.16666666666666667632*reg60; reg53=reg46*reg53; reg74=skin_elem.p*reg74; reg46=0.044658198738520458147*skin_elem.f_surf[0]; reg64=reg69+reg64;
    reg37=reg36+reg37; reg39=reg31*reg39; reg11=reg31*reg11; reg31=0.16666666666666667632*reg68; reg36=0.6220084679281461892*reg66;
    reg63=0.6220084679281461892*reg68; reg52=reg47*reg52; reg47=0.044658198738520458147*reg54; reg67=0.044658198738520458147*reg62; reg69=0.16666666666666667632*reg50;
    reg70=0.6220084679281461892*reg62; reg71=0.044658198738520458147*reg66; reg72=0.044658198738520458147*reg50; reg73=0.16666666666666667632*reg54; reg75=0.6220084679281461892*reg60;
    T reg77=0.16666666666666667632*reg62; reg33=reg33*reg55; reg21=reg20+reg21; reg55=reg25*reg55; reg20=0.6220084679281461892*reg50;
    reg41=reg65+reg41; reg58=reg45-reg58; reg25=0.16666666666666667632*reg66; reg45=0.6220084679281461892*reg54; reg65=0.044658198738520458147*reg60;
    reg44=reg51-reg44; reg19=reg35-reg19; reg70=reg59+reg70; reg45=reg38+reg45; reg35=0.044658198738520458147*reg76;
    reg36=reg38+reg36; reg51=0.044658198738520458147*reg49; reg75=reg57+reg75; reg20=reg59+reg20; T reg78=0.044658198738520458147*reg74;
    reg63=reg57+reg63; T reg79=0.6220084679281461892*reg49; reg67=reg32+reg67; reg69=reg12+reg69; T reg80=0.6220084679281461892*reg76;
    reg71=reg56+reg71; reg73=reg43+reg73; T reg81=0.6220084679281461892*reg74; reg19=skin_elem.p*reg19; reg44=skin_elem.p*reg44;
    reg58=skin_elem.p*reg58; reg53=reg39-reg53; reg55=reg21+reg55; reg33=reg29+reg33; reg21=0.16666666666666667632*reg76;
    reg77=reg12+reg77; reg29=0.16666666666666667632*reg49; reg25=reg43+reg25; reg31=reg48+reg31; reg52=reg11-reg52;
    reg72=reg32+reg72; reg11=0.16666666666666667632*reg74; reg34=reg46+reg34; reg47=reg56+reg47; reg61=reg48+reg61;
    reg65=reg46+reg65; reg37=reg41*reg37; reg64=reg40*reg64; reg77=reg77*reg52; reg73=reg53*reg73;
    reg45=reg53*reg45; reg39=0.044658198738520458147*reg58; reg40=0.16666666666666667632*reg58; reg71=reg52*reg71; reg80=reg38+reg80;
    reg75=reg53*reg75; reg81=reg57+reg81; T reg82=0.16666666666666667632*reg44; T reg83=0.044658198738520458147*reg44; reg47=reg47*reg53;
    T reg84=0.6220084679281461892*reg19; reg69=reg53*reg69; reg25=reg25*reg52; reg67=reg52*reg67; reg51=reg32+reg51;
    reg79=reg59+reg79; T reg85=0.16666666666666667632*reg19; reg70=reg52*reg70; reg65=reg65*reg53; reg63=reg52*reg63;
    reg35=reg56+reg35; reg78=reg46+reg78; reg29=reg12+reg29; reg36=reg52*reg36; T reg86=0.6220084679281461892*reg58;
    reg11=reg48+reg11; T reg87=0.6220084679281461892*reg44; reg31=reg31*reg52; reg33=reg41*reg33; reg72=reg72*reg53;
    reg61=reg61*reg53; reg21=reg43+reg21; reg41=0.044658198738520458147*reg19; reg34=reg34*reg52; reg20=reg53*reg20;
    reg55=reg42*reg55; reg64=reg37-reg64; reg67=0.25*reg67; reg25=0.25*reg25; reg20=0.25*reg20;
    reg69=0.25*reg69; reg79=reg64*reg79; reg31=0.25*reg31; reg86=reg57+reg86; reg85=reg12+reg85;
    reg70=0.25*reg70; reg61=0.25*reg61; reg65=0.25*reg65; reg63=0.25*reg63; reg35=reg64*reg35;
    reg41=reg32+reg41; reg78=reg64*reg78; reg36=0.25*reg36; reg29=reg29*reg64; reg84=reg59+reg84;
    reg83=reg56+reg83; reg34=0.25*reg34; reg81=reg64*reg81; reg45=0.25*reg45; reg40=reg48+reg40;
    reg77=0.25*reg77; reg72=0.25*reg72; reg87=reg38+reg87; reg73=0.25*reg73; reg39=reg46+reg39;
    reg71=0.25*reg71; reg21=reg21*reg64; reg51=reg64*reg51; reg55=reg33-reg55; reg82=reg43+reg82;
    reg47=0.25*reg47; reg75=0.25*reg75; reg80=reg64*reg80; reg11=reg11*reg64; reg35=0.25*reg35;
    reg39=reg55*reg39; reg20=reg77+reg20; reg83=reg55*reg83; reg77=reg72+reg77; reg41=reg55*reg41;
    reg36=reg73+reg36; reg45=reg25+reg45; reg51=0.25*reg51; reg70=reg69+reg70; reg75=reg31+reg75;
    reg87=reg87*reg55; reg86=reg86*reg55; reg71=reg73+reg71; reg80=0.25*reg80; reg82=reg55*reg82;
    reg47=reg25+reg47; reg31=reg65+reg31; reg40=reg55*reg40; reg67=reg69+reg67; reg79=0.25*reg79;
    reg81=0.25*reg81; reg85=reg55*reg85; reg84=reg84*reg55; reg34=reg61+reg34; reg11=0.25*reg11;
    reg29=0.25*reg29; reg63=reg61+reg63; reg78=0.25*reg78; reg21=0.25*reg21; reg45=reg21+reg45;
    reg31=reg31+reg11; reg81=reg34+reg81; reg40=0.25*reg40; reg39=0.25*reg39; reg83=0.25*reg83;
    reg21=reg47+reg21; reg87=0.25*reg87; reg75=reg11+reg75; reg80=reg71+reg80; reg82=0.25*reg82;
    reg20=reg29+reg20; reg51=reg70+reg51; reg84=0.25*reg84; reg79=reg67+reg79; reg85=0.25*reg85;
    reg29=reg77+reg29; reg41=0.25*reg41; reg35=reg36+reg35; reg86=0.25*reg86; reg78=reg63+reg78;
    reg29=reg84+reg29; sollicitation[indices[1]+2]+=reg29; reg41=reg20+reg41; sollicitation[indices[6]+2]+=reg41; reg83=reg45+reg83;
    sollicitation[indices[6]+1]+=reg83; reg81=reg81+reg40; sollicitation[indices[2]+0]+=reg81; reg39=reg75+reg39; sollicitation[indices[6]+0]+=reg39;
    reg87=reg21+reg87; sollicitation[indices[1]+1]+=reg87; reg51=reg85+reg51; sollicitation[indices[5]+2]+=reg51; reg80=reg80+reg82;
    sollicitation[indices[2]+1]+=reg80; reg86=reg31+reg86; sollicitation[indices[1]+0]+=reg86; reg85=reg79+reg85; sollicitation[indices[2]+2]+=reg85;
    reg35=reg82+reg35; sollicitation[indices[5]+1]+=reg35; reg78=reg40+reg78; sollicitation[indices[5]+0]+=reg78;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_vector_der_var(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */    T reg0=1-var_inter[2]; T reg1=1-var_inter[0]; T reg2=1-var_inter[1]; T reg3=reg0*reg2; T reg4=reg0*reg1;
    T reg5=reg0*var_inter[0]; T reg6=reg2*reg1; T reg7=reg2*var_inter[0]; T reg8=elem.pos(0)[1]*reg3; T reg9=elem.pos(1)[1]*reg5;
    T reg10=elem.pos(1)[2]*reg5; T reg11=elem.pos(0)[2]*reg3; T reg12=elem.pos(1)[2]*reg3; T reg13=elem.pos(0)[1]*reg4; T reg14=reg6*elem.pos(0)[2];
    T reg15=reg7*elem.pos(1)[2]; T reg16=reg7*elem.pos(1)[1]; T reg17=reg6*elem.pos(0)[1]; T reg18=elem.pos(1)[1]*reg3; T reg19=reg0*var_inter[1];
    T reg20=elem.pos(0)[2]*reg4; T reg21=var_inter[0]*var_inter[1]; T reg22=elem.pos(2)[2]*reg5; T reg23=reg10+reg20; T reg24=elem.pos(2)[1]*reg5;
    T reg25=reg17+reg16; T reg26=reg21*elem.pos(2)[1]; T reg27=reg13+reg9; reg18=reg18-reg8; T reg28=elem.pos(2)[1]*reg19;
    T reg29=1+(*f.m).poisson_ratio; T reg30=1.0/(*f.m).elastic_modulus; T reg31=elem.pos(2)[2]*reg19; reg12=reg12-reg11; T reg32=reg1*var_inter[1];
    T reg33=reg21*elem.pos(2)[2]; T reg34=reg15+reg14; reg22=reg22-reg23; T reg35=elem.pos(1)[0]*reg3; T reg36=reg1*var_inter[2];
    T reg37=elem.pos(3)[1]*reg19; T reg38=elem.pos(0)[0]*reg4; T reg39=2*reg30; T reg40=reg2*var_inter[2]; T reg41=elem.pos(3)[1]*reg4;
    reg24=reg24-reg27; T reg42=elem.pos(1)[0]*reg5; reg28=reg18+reg28; reg18=elem.pos(3)[2]*reg19; reg31=reg12+reg31;
    reg29=reg29/(*f.m).elastic_modulus; reg12=reg32*elem.pos(3)[2]; T reg43=reg34+reg33; T reg44=reg32*elem.pos(3)[1]; T reg45=reg25+reg26;
    T reg46=elem.pos(3)[2]*reg4; T reg47=elem.pos(0)[0]*reg3; reg35=reg35-reg47; reg28=reg28-reg37; T reg48=elem.pos(4)[1]*reg40;
    reg39=reg29*reg39; T reg49=var_inter[0]*var_inter[2]; T reg50=elem.pos(2)[0]*reg5; T reg51=reg38+reg42; T reg52=elem.pos(4)[2]*reg36;
    reg46=reg22+reg46; reg22=reg43+reg12; T reg53=reg6*elem.pos(4)[2]; T reg54=pow(reg29,2); reg31=reg31-reg18;
    T reg55=elem.pos(4)[2]*reg40; T reg56=reg6*elem.pos(4)[1]; T reg57=reg45+reg44; T reg58=reg6*elem.pos(0)[0]; T reg59=reg7*elem.pos(1)[0];
    T reg60=elem.pos(2)[0]*reg19; T reg61=elem.pos(4)[1]*reg36; reg41=reg24+reg41; reg24=elem.pos(5)[2]*reg49; T reg62=reg7*elem.pos(5)[2];
    reg53=reg53-reg22; T reg63=elem.pos(5)[1]*reg49; reg41=reg41-reg61; T reg64=reg58+reg59; T reg65=reg21*elem.pos(2)[0];
    T reg66=reg30*reg54; reg50=reg50-reg51; T reg67=elem.pos(3)[0]*reg4; reg46=reg46-reg52; T reg68=reg29*reg39;
    reg56=reg56-reg57; T reg69=reg7*elem.pos(5)[1]; reg28=reg28-reg48; reg60=reg35+reg60; reg35=elem.pos(3)[0]*reg19;
    T reg70=elem.pos(5)[2]*reg40; reg31=reg31-reg55; T reg71=var_inter[1]*var_inter[2]; T reg72=elem.pos(5)[1]*reg40; T reg73=reg21*elem.pos(6)[2];
    reg62=reg53+reg62; reg53=reg21*elem.pos(6)[1]; reg69=reg56+reg69; reg56=elem.pos(4)[0]*reg40; reg41=reg41-reg63;
    T reg74=elem.pos(6)[1]*reg49; T reg75=reg32*elem.pos(3)[0]; reg60=reg60-reg35; T reg76=reg64+reg65; T reg77=elem.pos(6)[2]*reg49;
    reg46=reg46-reg24; reg68=reg66+reg68; T reg78=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg79=elem.pos(4)[0]*reg36; reg72=reg28+reg72;
    reg67=reg50+reg67; reg28=elem.pos(6)[1]*reg71; reg50=elem.pos(6)[2]*reg71; reg70=reg31+reg70; reg29=reg29*reg54;
    reg77=reg46+reg77; reg31=elem.pos(7)[2]*reg36; reg46=reg78*reg68; T reg80=reg30*reg29; T reg81=reg76+reg75;
    T reg82=reg6*elem.pos(4)[0]; reg53=reg69+reg53; reg69=reg32*elem.pos(7)[1]; T reg83=reg32*elem.pos(7)[2]; reg73=reg62+reg73;
    reg28=reg72+reg28; reg62=elem.pos(7)[1]*reg71; reg72=elem.pos(7)[2]*reg71; reg50=reg70+reg50; reg67=reg67-reg79;
    reg74=reg41+reg74; reg41=elem.pos(5)[0]*reg40; reg60=reg60-reg56; reg70=elem.pos(7)[1]*reg36; T reg84=elem.pos(5)[0]*reg49;
    reg67=reg67-reg84; T reg85=reg78*reg39; T reg86=elem.pos(6)[0]*reg49; reg29=reg78*reg29; reg68=reg30*reg68;
    reg46=reg80+reg46; T reg87=reg7*elem.pos(5)[0]; reg82=reg82-reg81; reg70=reg74+reg70; reg50=reg50-reg72;
    reg83=reg73+reg83; reg31=reg77+reg31; reg41=reg60+reg41; reg60=elem.pos(6)[0]*reg71; reg28=reg28-reg62;
    reg69=reg53+reg69; reg53=reg30*reg80; reg86=reg67+reg86; reg60=reg41+reg60; reg41=elem.pos(7)[0]*reg71;
    reg67=elem.pos(7)[0]*reg36; reg73=reg70*reg83; reg74=reg28*reg83; reg77=reg31*reg69; T reg88=reg78*reg68;
    T reg89=reg50*reg69; reg85=reg66+reg85; reg39=reg30*reg39; T reg90=reg78*reg46; T reg91=reg21*elem.pos(6)[0];
    reg87=reg82+reg87; reg54=reg78*reg54; reg82=reg30*reg29; T reg92=reg50*reg70; T reg93=reg78*reg85;
    T reg94=reg28*reg31; reg89=reg74-reg89; reg74=reg30*reg54; reg77=reg73-reg77; reg73=reg78*reg39;
    T reg95=reg30*reg66; reg88=reg53+reg88; reg67=reg86+reg67; reg60=reg60-reg41; reg80=reg78*reg80;
    reg91=reg87+reg91; reg86=reg32*elem.pos(7)[0]; reg29=reg78*reg29; reg90=reg82+reg90; reg80=reg29+reg80;
    reg54=reg78*reg54; reg68=reg30*reg68; reg93=reg74+reg93; reg66=reg78*reg66; reg87=reg60*reg77;
    T reg96=reg67*reg89; reg73=reg95+reg73; reg86=reg91+reg86; reg88=reg88+reg90; reg46=reg30*reg46;
    reg92=reg94-reg92; reg91=reg31*reg86; reg82=reg29+reg82; reg94=reg67*reg83; reg66=reg54+reg66;
    reg29=reg53-reg29; reg46=reg46+reg90; reg85=reg30*reg85; reg95=reg95-reg54; reg73=reg93+reg73;
    reg39=reg30*reg39; reg53=reg30*reg80; T reg97=reg78*reg88; reg83=reg60*reg83; T reg98=reg86*reg92;
    reg90=reg68-reg90; reg96=reg87-reg96; reg68=reg50*reg86; reg87=reg78*reg66; T reg99=reg70*reg86;
    reg95=reg30*reg95; reg98=reg96+reg98; reg91=reg94-reg91; reg94=reg30*reg82; reg96=reg60*reg69;
    T reg100=reg78*reg46; reg39=reg39-reg93; reg68=reg83-reg68; reg83=reg54+reg74; reg50=reg50*reg67;
    reg73=reg78*reg73; reg31=reg60*reg31; T reg101=reg78*reg80; reg66=reg30*reg66; reg86=reg28*reg86;
    reg93=reg85+reg93; reg85=reg30*reg90; T reg102=reg30*reg29; reg53=reg97+reg53; reg69=reg67*reg69;
    reg87=reg95-reg87; reg53=reg85-reg53; reg85=reg78*reg83; reg94=reg100+reg94; reg39=reg30*reg39;
    reg99=reg69-reg99; reg89=reg89/reg98; reg68=reg68/reg98; reg73=reg66+reg73; reg86=reg96-reg86;
    reg93=reg93*reg78; reg70=reg60*reg70; reg50=reg31-reg50; reg67=reg28*reg67; reg83=reg30*reg83;
    reg91=reg91/reg98; reg78=reg78*reg82; reg101=reg102-reg101; reg77=reg77/reg98; reg83=reg93+reg83;
    reg28=reg4*reg68; reg73=reg39-reg73; reg30=reg3*reg91; reg31=reg3*reg77; reg39=reg4*reg89;
    reg99=reg99/reg98; reg78=reg101-reg78; reg67=reg70-reg67; reg86=reg86/reg98; reg92=reg92/reg98;
    reg50=reg50/reg98; reg85=reg87-reg85; reg94=reg53-reg94; reg53=reg30-reg28; reg60=reg6*reg50;
    reg67=reg67/reg98; reg66=reg6*reg92; reg69=reg39-reg31; reg70=reg3*reg99; reg87=reg85*reg94;
    reg83=reg73-reg83; reg73=reg4*reg86; reg93=pow(reg78,2); reg95=reg91*reg71; reg96=reg77*reg19;
    reg97=reg36*reg68; reg100=reg77*reg71; reg101=reg91*reg40; reg102=reg5*reg89; T reg103=reg49*reg68;
    T reg104=reg49*reg89; T reg105=reg73-reg70; reg53=reg53+reg60; T reg106=reg5*reg68; T reg107=reg6*reg67;
    T reg108=reg29*reg94; reg69=reg69-reg66; reg87=reg87/reg93; reg83=reg83/reg78; T reg109=reg77*reg40;
    T reg110=reg36*reg89; T reg111=reg91*reg19; T reg112=reg96-reg102; T reg113=reg31+reg102; T reg114=reg7*reg92;
    T reg115=reg28+reg111; T reg116=reg32*reg92; T reg117=reg21*reg92; T reg118=reg39+reg96; T reg119=reg106-reg111;
    T reg120=reg21*reg50; T reg121=reg32*reg50; T reg122=reg19*reg99; T reg123=reg110-reg109; T reg124=reg30+reg106;
    T reg125=reg7*reg50; T reg126=reg101-reg97; T reg127=reg36*reg86; T reg128=reg40*reg99; T reg129=reg5*reg86;
    reg108=reg108/reg93; reg90=reg90/reg78; T reg130=reg97+reg95; T reg131=reg110+reg100; T reg132=reg71*reg99;
    T reg133=reg103-reg95; T reg134=reg80*reg94; T reg135=reg100-reg104; reg87=reg83-reg87; reg83=0.5*reg69;
    T reg136=reg109+reg104; reg105=reg105-reg107; T reg137=0.5*reg53; reg94=reg82*reg94; T reg138=reg49*reg86;
    T reg139=reg101+reg103; reg126=reg126-reg60; reg46=reg46/reg78; T reg140=reg127+reg132; reg115=reg115+reg121;
    T reg141=reg32*reg67; T reg142=reg73+reg122; reg130=reg130-reg121; T reg143=reg128+reg138; T reg144=reg116-reg131;
    T reg145=reg125+reg139; T reg146=reg132-reg138; reg136=reg114+reg136; reg133=reg133-reg120; reg123=reg66+reg123;
    T reg147=reg127-reg128; reg135=reg117+reg135; T reg148=reg87*reg83; T reg149=reg7*reg67; T reg150=reg125-reg124;
    T reg151=reg70+reg129; reg88=reg88/reg78; reg134=reg134/reg93; reg112=reg112-reg117; reg119=reg119+reg120;
    T reg152=reg21*reg67; reg113=reg113-reg114; T reg153=0.5*reg105; T reg154=reg122-reg129; reg93=reg94/reg93;
    reg108=reg90-reg108; reg90=reg87*reg137; reg94=reg118+reg116; reg148=2*reg148; reg143=reg149+reg143;
    T reg155=0.5*reg136; T reg156=0.5*reg145; T reg157=reg108*reg69; reg134=reg88-reg134; reg88=0.5*reg144;
    T reg158=0.5*reg133; T reg159=reg141-reg140; reg146=reg152+reg146; reg90=2*reg90; T reg160=0.5*reg135;
    T reg161=0.5*reg130; T reg162=reg87*reg153; T reg163=0.5*reg112; reg93=reg46-reg93; reg46=0.5*reg123;
    T reg164=reg108*reg53; T reg165=0.5*reg94; reg147=reg107+reg147; T reg166=0.5*reg150; T reg167=0.5*reg126;
    T reg168=0.5*reg115; reg151=reg151-reg149; reg154=reg154-reg152; T reg169=0.5*reg113; T reg170=reg141+reg142;
    T reg171=0.5*reg119; T reg172=reg87*reg166; T reg173=reg157*reg113; T reg174=reg133*reg164; T reg175=reg157*reg136;
    T reg176=reg108*reg105; T reg177=reg90*reg166; T reg178=reg90*reg156; T reg179=reg90*reg158; T reg180=reg53*reg93;
    T reg181=reg157*reg135; T reg182=reg148*reg160; T reg183=reg157*reg144; T reg184=reg90*reg161; T reg185=reg157*reg112;
    T reg186=reg90*reg171; T reg187=reg115*reg164; T reg188=reg148*reg165; T reg189=reg148*reg163; T reg190=reg119*reg164;
    T reg191=reg148*reg46; T reg192=reg126*reg164; T reg193=reg148*reg83; T reg194=reg53*reg164; T reg195=reg69*reg134;
    T reg196=reg130*reg164; T reg197=reg148*reg88; T reg198=0.5*reg159; T reg199=reg150*reg164; T reg200=reg90*reg168;
    T reg201=0.5*reg143; T reg202=reg157*reg69; T reg203=reg157*reg94; T reg204=0.5*reg147; T reg205=reg148*reg169;
    T reg206=reg148*reg155; reg164=reg145*reg164; T reg207=reg90*reg137; reg157=reg157*reg123; T reg208=0.5*reg146;
    T reg209=0.5*reg151; T reg210=0.5*reg170; T reg211=0.5*reg154; reg162=2*reg162; T reg212=reg90*reg167;
    T reg213=reg134*reg53; T reg214=reg143*reg180; T reg215=reg162*reg156; reg190=reg190+reg189; T reg216=reg143*reg176;
    reg187=reg187-reg188; T reg217=reg162*reg198; reg183=reg183+reg184; T reg218=reg148*reg156; T reg219=reg213*reg136;
    T reg220=reg90*reg155; T reg221=reg147*reg195; T reg222=reg162*reg155; T reg223=reg143*reg195; T reg224=reg213*reg144;
    T reg225=reg148*reg161; reg192=reg192+reg191; T reg226=reg162*reg210; T reg227=reg90*reg163; T reg228=reg119*reg195;
    T reg229=reg90*reg46; T reg230=reg126*reg195; reg203=reg200-reg203; T reg231=reg130*reg195; T reg232=reg90*reg88;
    reg196=reg196+reg197; T reg233=reg53*reg195; T reg234=reg133*reg195; T reg235=reg87*reg169; T reg236=reg148*reg168;
    T reg237=reg105*reg176; T reg238=reg162*reg201; T reg239=reg87*reg209; T reg240=reg148*reg158; T reg241=reg213*reg135;
    T reg242=reg105*reg180; reg172=2*reg172; T reg243=reg162*reg208; reg181=reg181+reg179; T reg244=reg162*reg137;
    T reg245=reg105*reg93; T reg246=reg162*reg83; T reg247=reg108*reg113; reg175=reg175-reg178; T reg248=reg105*reg195;
    T reg249=reg154*reg176; T reg250=reg162*reg46; T reg251=reg90*reg165; T reg252=reg162*reg167; T reg253=reg115*reg195;
    T reg254=reg147*reg180; T reg255=reg154*reg195; T reg256=reg146*reg176; T reg257=reg162*reg163; T reg258=reg147*reg176;
    T reg259=reg146*reg180; T reg260=reg162*reg158; T reg261=reg162*reg160; T reg262=reg146*reg195; T reg263=reg162*reg171;
    T reg264=reg154*reg180; reg174=reg174+reg182; T reg265=reg145*reg195; T reg266=reg213*reg94; T reg267=reg90*reg160;
    T reg268=reg159*reg195; T reg269=reg162*reg88; T reg270=reg170*reg195; T reg271=reg162*reg169; T reg272=reg90*reg169;
    T reg273=reg162*reg161; T reg274=reg159*reg180; T reg275=reg170*reg176; T reg276=reg170*reg180; reg185=reg185+reg186;
    T reg277=reg159*reg176; T reg278=reg213*reg113; reg157=reg157+reg212; T reg279=reg150*reg195; T reg280=reg162*reg168;
    T reg281=reg162*reg166; T reg282=reg69*reg213; reg180=reg151*reg180; T reg283=reg148*reg137; T reg284=reg162*reg211;
    T reg285=reg90*reg83; T reg286=reg162*reg204; reg164=reg206-reg164; T reg287=reg148*reg166; reg202=reg202+reg207;
    T reg288=reg213*reg123; T reg289=reg148*reg167; reg176=reg151*reg176; reg173=reg173+reg177; reg199=reg199+reg205;
    reg194=reg194+reg193; T reg290=reg162*reg153; reg195=reg151*reg195; T reg291=reg148*reg171; reg213=reg213*reg112;
    T reg292=reg162*reg165; reg162=reg162*reg209; reg176=reg205+reg176; reg257=reg255+reg257; reg266=reg236-reg266;
    reg205=reg145*reg245; reg236=reg94*reg247; reg199=reg162+reg199; reg258=reg191+reg258; reg261=reg262+reg261;
    reg191=reg90*reg208; reg255=reg133*reg245; reg164=reg164+reg238; reg262=reg90*reg201; T reg293=reg168*reg172;
    T reg294=reg94*reg245; reg249=reg189+reg249; reg189=reg148*reg210; T reg295=reg90*reg209; T reg296=reg150*reg245;
    reg157=reg157+reg286; reg246=reg248+reg246; reg248=reg69*reg247; reg276=reg280-reg276; reg280=reg90*reg211;
    reg289=reg288+reg289; reg181=reg181+reg243; reg288=reg90*reg210; reg240=reg241+reg240; reg241=reg137*reg172;
    reg242=reg244+reg242; reg244=reg135*reg245; T reg297=reg148*reg208; T reg298=reg148*reg153; reg239=2*reg239;
    T reg299=reg135*reg247; T reg300=reg158*reg172; T reg301=reg69*reg245; reg271=reg195+reg271; reg162=reg173+reg162;
    reg237=reg193+reg237; reg173=reg123*reg245; reg264=reg263+reg264; reg193=reg148*reg204; reg267=reg234+reg267;
    reg235=2*reg235; reg195=reg123*reg247; reg180=reg281+reg180; reg234=reg167*reg172; reg174=reg243+reg174;
    reg243=reg53*reg245; reg277=reg197+reg277; reg197=reg136*reg245; reg215=reg214-reg215; reg214=reg90*reg153;
    reg275=reg188+reg275; reg188=reg148*reg201; reg222=reg223+reg222; reg274=reg273+reg274; reg225=reg224+reg225;
    reg192=reg286+reg192; reg194=reg290+reg194; reg223=reg144*reg245; reg224=reg148*reg198; reg269=reg268+reg269;
    reg263=reg144*reg247; reg268=reg161*reg172; reg273=reg156*reg172; reg229=reg230+reg229; reg227=reg228+reg227;
    reg291=reg213+reg291; reg213=reg115*reg245; reg228=reg136*reg247; reg230=reg171*reg172; reg281=reg112*reg245;
    reg232=reg231+reg232; reg231=reg112*reg247; reg286=reg148*reg211; reg285=reg233+reg285; reg233=reg130*reg245;
    reg196=reg217+reg196; T reg302=reg90*reg198; reg259=reg260+reg259; reg265=reg220-reg265; reg287=reg278+reg287;
    reg256=reg182+reg256; reg292=reg270+reg292; reg254=reg252+reg254; reg238=reg175+reg238; reg175=reg108*reg150;
    reg250=reg221+reg250; reg203=reg203-reg226; reg290=reg202+reg290; reg251=reg253-reg251; reg182=reg134*reg113;
    reg218=reg219-reg218; reg202=reg166*reg172; reg206=reg216+reg206; reg90=reg90*reg204; reg190=reg284+reg190;
    reg216=reg126*reg245; reg226=reg187-reg226; reg283=reg282+reg283; reg284=reg185+reg284; reg217=reg183+reg217;
    reg183=reg119*reg245; reg245=reg113*reg245; reg148=reg148*reg209; reg272=reg279+reg272; reg247=reg113*reg247;
    reg298=reg301+reg298; reg238=reg98*reg238; reg218=reg98*reg218; reg188=reg197+reg188; reg275=reg200-reg275;
    reg185=reg170*reg182; reg203=reg98*reg203; reg276=reg98*reg276; reg250=reg98*reg250; reg187=reg165*reg235;
    reg197=reg53*reg182; reg251=reg98*reg251; reg200=reg46*reg235; reg219=reg126*reg175; reg220=reg115*reg175;
    reg243=reg214+reg243; reg214=reg46*reg172; reg221=reg126*reg182; reg226=reg98*reg226; reg252=reg165*reg172;
    reg192=reg98*reg192; reg194=reg98*reg194; reg229=reg98*reg229; reg288=reg213-reg288; reg213=reg115*reg182;
    reg285=reg98*reg285; reg157=reg98*reg157; reg289=reg98*reg289; reg248=reg248+reg241; reg253=reg153*reg239;
    reg260=reg134*reg150; reg193=reg173+reg193; reg195=reg195+reg234; reg266=reg98*reg266; reg189=reg294+reg189;
    reg173=reg46*reg239; reg270=reg147*reg182; reg278=reg87*reg171; reg279=reg210*reg239; reg258=reg212+reg258;
    reg212=reg204*reg239; reg292=reg98*reg292; reg254=reg98*reg254; reg282=reg83*reg235; reg294=reg53*reg175;
    reg301=reg88*reg172; T reg303=reg130*reg182; reg286=reg281+reg286; reg196=reg98*reg196; reg232=reg98*reg232;
    reg231=reg231+reg230; reg281=reg211*reg239; T reg304=reg198*reg239; reg263=reg263+reg268; reg227=reg98*reg227;
    reg224=reg223+reg224; reg225=reg98*reg225; reg222=reg98*reg222; reg215=reg98*reg215; reg178=reg206-reg178;
    reg190=reg98*reg190; reg206=reg143*reg182; reg223=reg155*reg239; reg217=reg98*reg217; reg148=reg245+reg148;
    reg183=reg280+reg183; reg247=reg247+reg202; reg233=reg302+reg233; reg245=reg209*reg239; reg280=reg119*reg182;
    reg302=reg163*reg172; T reg305=reg119*reg175; T reg306=reg163*reg235; T reg307=reg146*reg182; reg272=reg98*reg272;
    reg283=reg98*reg283; reg290=reg98*reg290; T reg308=reg83*reg172; reg199=reg98*reg199; reg296=reg295+reg296;
    reg295=reg150*reg182; T reg309=reg169*reg172; T reg310=reg150*reg175; T reg311=reg169*reg235; reg236=reg293-reg236;
    T reg312=reg165*reg239; reg271=reg98*reg271; reg162=reg98*reg162; reg216=reg90+reg216; reg180=reg98*reg180;
    reg176=reg177+reg176; reg287=reg98*reg287; reg90=reg151*reg182; reg177=reg169*reg239; reg255=reg191+reg255;
    reg191=reg88*reg239; T reg313=reg159*reg182; reg277=reg184+reg277; reg284=reg98*reg284; reg274=reg98*reg274;
    reg269=reg98*reg269; reg291=reg98*reg291; reg184=reg88*reg235; T reg314=reg130*reg175; T reg315=reg163*reg239;
    T reg316=reg154*reg182; reg174=reg98*reg174; reg265=reg98*reg265; reg249=reg186+reg249; reg267=reg98*reg267;
    reg164=reg98*reg164; reg186=reg83*reg239; T reg317=reg105*reg182; reg205=reg262-reg205; reg237=reg207+reg237;
    reg207=reg208*reg239; reg299=reg299+reg300; reg242=reg98*reg242; reg297=reg244+reg297; reg240=reg98*reg240;
    reg181=reg98*reg181; reg244=reg155*reg172; reg246=reg98*reg246; reg262=reg145*reg182; reg264=reg98*reg264;
    T reg318=reg155*reg235; T reg319=reg145*reg175; T reg320=reg160*reg239; reg256=reg179+reg256; reg228=reg228-reg273;
    reg259=reg98*reg259; reg179=reg201*reg239; reg261=reg98*reg261; T reg321=reg108*reg151; reg257=reg98*reg257;
    T reg322=reg160*reg235; reg182=reg133*reg182; T reg323=reg160*reg172; T reg324=reg150*reg93; reg175=reg133*reg175;
    reg272=ponderation*reg272; reg309=reg295+reg309; reg287=ponderation*reg287; reg275=reg98*reg275; reg296=reg98*reg296;
    reg176=reg98*reg176; reg295=reg113*reg260; reg310=reg310+reg311; reg315=reg316+reg315; reg316=reg154*reg321;
    reg180=ponderation*reg180; reg276=ponderation*reg276; reg264=ponderation*reg264; T reg325=reg154*reg324; reg162=ponderation*reg162;
    reg292=ponderation*reg292; T reg326=reg171*reg239; reg199=ponderation*reg199; reg249=reg98*reg249; reg271=ponderation*reg271;
    reg247=reg247+reg245; T reg327=reg137*reg239; reg226=ponderation*reg226; reg266=ponderation*reg266; reg227=ponderation*reg227;
    reg189=reg98*reg189; T reg328=reg105*reg324; reg257=ponderation*reg257; reg190=ponderation*reg190; reg148=reg98*reg148;
    reg236=reg236-reg279; T reg329=reg168*reg235; reg251=ponderation*reg251; T reg330=reg105*reg321; reg183=reg98*reg183;
    T reg331=reg94*reg260; reg302=reg280+reg302; reg305=reg305+reg306; reg177=reg90+reg177; reg220=reg220-reg187;
    reg90=reg166*reg239; reg280=reg151*reg324; T reg332=reg151*reg321; reg252=reg213-reg252; reg246=ponderation*reg246;
    reg284=ponderation*reg284; reg242=ponderation*reg242; reg203=ponderation*reg203; reg291=ponderation*reg291; reg237=reg98*reg237;
    reg286=reg98*reg286; reg288=reg98*reg288; reg186=reg317+reg186; reg231=reg231+reg281; reg213=reg112*reg260;
    reg259=ponderation*reg259; reg261=ponderation*reg261; reg216=reg98*reg216; reg175=reg175+reg322; reg323=reg182+reg323;
    reg182=reg167*reg235; reg255=reg98*reg255; reg174=ponderation*reg174; reg267=ponderation*reg267; reg317=reg135*reg260;
    reg299=reg299+reg207; reg297=reg98*reg297; reg240=ponderation*reg240; reg181=ponderation*reg181; T reg333=reg143*reg321;
    reg319=reg318-reg319; T reg334=reg171*reg235; reg262=reg244-reg262; reg205=reg98*reg205; reg164=ponderation*reg164;
    reg265=ponderation*reg265; reg244=reg166*reg235; T reg335=reg136*reg260; reg228=reg228+reg179; reg188=reg98*reg188;
    reg218=ponderation*reg218; reg238=ponderation*reg238; reg298=reg98*reg298; reg248=reg248+reg253; T reg336=reg69*reg260;
    reg314=reg314+reg184; reg301=reg303+reg301; reg233=reg98*reg233; reg196=ponderation*reg196; reg269=ponderation*reg269;
    reg232=ponderation*reg232; reg274=ponderation*reg274; reg277=reg98*reg277; reg191=reg313+reg191; reg303=reg161*reg239;
    reg313=reg159*reg324; T reg337=reg159*reg321; T reg338=reg144*reg260; reg263=reg263+reg304; T reg339=reg158*reg235;
    reg224=reg98*reg224; reg225=ponderation*reg225; reg222=ponderation*reg222; reg215=ponderation*reg215; reg178=reg98*reg178;
    reg217=ponderation*reg217; reg223=reg206+reg223; reg206=reg143*reg324; T reg340=reg161*reg235; T reg341=reg156*reg239;
    T reg342=reg146*reg321; T reg343=reg146*reg324; T reg344=reg158*reg239; reg307=reg320+reg307; reg320=reg156*reg235;
    reg256=reg98*reg256; T reg345=reg87*reg211; reg254=ponderation*reg254; T reg346=reg87*reg163; reg250=ponderation*reg250;
    reg219=reg219+reg200; reg214=reg221+reg214; reg192=ponderation*reg192; reg229=ponderation*reg229; reg285=ponderation*reg285;
    reg194=ponderation*reg194; reg243=reg98*reg243; reg197=reg308+reg197; reg260=reg123*reg260; reg294=reg294+reg282;
    reg195=reg195+reg212; reg193=reg98*reg193; reg289=ponderation*reg289; reg157=ponderation*reg157; reg221=reg170*reg321;
    reg308=reg170*reg324; T reg347=reg168*reg239; reg185=reg312+reg185; reg278=2*reg278; reg173=reg270+reg173;
    reg283=ponderation*reg283; reg239=reg167*reg239; reg258=reg98*reg258; reg270=reg151*reg93; reg290=ponderation*reg290;
    reg324=reg147*reg324; reg312=reg108*reg112; reg321=reg147*reg321; T reg348=reg137*reg235; reg226=vectors[0][indices[0]+1]*reg226;
    reg251=vectors[0][indices[0]+0]*reg251; T reg349=vectors[0][indices[0]+0]*reg292; reg176=ponderation*reg176; reg266=vectors[0][indices[0]+1]*reg266; reg259=vectors[0][indices[0]+1]*reg259;
    reg261=vectors[0][indices[0]+0]*reg261; T reg350=reg113*reg312; reg217=vectors[0][indices[0]+0]*reg217; reg225=vectors[0][indices[0]+1]*reg225; reg276=vectors[0][indices[0]+1]*reg276;
    reg174=vectors[0][indices[0]+1]*reg174; reg232=vectors[0][indices[0]+0]*reg232; reg290=vectors[0][indices[0]+0]*reg290; reg157=vectors[0][indices[0]+0]*reg157; reg177=reg98*reg177;
    reg337=reg184+reg337; reg196=vectors[0][indices[0]+1]*reg196; reg332=reg311+reg332; reg191=reg98*reg191; reg277=ponderation*reg277;
    reg269=vectors[0][indices[0]+0]*reg269; reg184=reg209*reg235; reg289=vectors[0][indices[0]+1]*reg289; reg311=reg113*reg270; T reg351=reg130*reg270;
    reg274=vectors[0][indices[0]+1]*reg274; T reg352=reg198*reg172; reg199=vectors[0][indices[0]+1]*reg199; reg271=vectors[0][indices[0]+0]*reg271; reg180=vectors[0][indices[0]+1]*reg180;
    T reg353=reg150*reg270; T reg354=reg209*reg172; reg310=reg245+reg310; reg218=vectors[0][indices[0]+1]*reg218; reg284=vectors[0][indices[0]+0]*reg284;
    reg238=vectors[0][indices[0]+0]*reg238; reg254=vectors[0][indices[0]+1]*reg254; reg250=vectors[0][indices[0]+0]*reg250; reg291=vectors[0][indices[0]+1]*reg291; reg245=reg166*reg278;
    reg227=vectors[0][indices[0]+0]*reg227; reg309=reg98*reg309; reg190=vectors[0][indices[0]+1]*reg190; reg257=vectors[0][indices[0]+0]*reg257; reg192=vectors[0][indices[0]+1]*reg192;
    reg283=vectors[0][indices[0]+1]*reg283; reg285=vectors[0][indices[0]+0]*reg285; reg267=vectors[0][indices[0]+0]*reg267; reg194=vectors[0][indices[0]+1]*reg194; reg240=vectors[0][indices[0]+1]*reg240;
    reg246=vectors[0][indices[0]+0]*reg246; reg242=vectors[0][indices[0]+1]*reg242; reg203=vectors[0][indices[0]+0]*reg203; reg264=vectors[0][indices[0]+1]*reg264; reg181=vectors[0][indices[0]+0]*reg181;
    reg162=vectors[0][indices[0]+0]*reg162; reg287=vectors[0][indices[0]+1]*reg287; reg296=ponderation*reg296; reg215=vectors[0][indices[0]+1]*reg215; reg272=vectors[0][indices[0]+0]*reg272;
    reg222=vectors[0][indices[0]+0]*reg222; reg164=vectors[0][indices[0]+1]*reg164; reg265=vectors[0][indices[0]+0]*reg265; reg229=vectors[0][indices[0]+0]*reg229; T reg355=reg94*reg312;
    T reg356=reg168*reg278; T reg357=reg210*reg235; T reg358=reg94*reg270; reg331=reg329-reg331; reg236=reg98*reg236;
    reg258=ponderation*reg258; reg189=ponderation*reg189; reg173=reg98*reg173; reg321=reg200+reg321; reg188=ponderation*reg188;
    reg316=reg306+reg316; reg228=reg98*reg228; reg320=reg335-reg320; reg315=reg98*reg315; reg200=reg136*reg270;
    reg306=reg201*reg235; reg329=reg136*reg312; reg249=ponderation*reg249; reg335=reg156*reg278; reg205=ponderation*reg205;
    reg275=ponderation*reg275; reg185=reg98*reg185; reg308=reg347-reg308; reg221=reg187+reg221; reg193=ponderation*reg193;
    reg195=reg98*reg195; reg187=reg210*reg172; reg347=reg115*reg270; reg279=reg220-reg279; reg260=reg182+reg260;
    reg182=reg123*reg270; reg252=reg98*reg252; reg288=ponderation*reg288; reg220=reg204*reg235; T reg359=reg123*reg312;
    T reg360=reg167*reg278; reg216=ponderation*reg216; reg214=reg98*reg214; reg219=reg212+reg219; reg212=reg204*reg172;
    T reg361=reg126*reg270; reg307=reg98*reg307; reg302=reg98*reg302; reg183=ponderation*reg183; reg342=reg322+reg342;
    reg224=ponderation*reg224; reg263=reg98*reg263; reg322=reg171*reg278; T reg362=reg112*reg312; T reg363=reg211*reg235;
    T reg364=reg112*reg270; reg213=reg334+reg213; reg338=reg340+reg338; reg231=reg98*reg231; reg334=reg144*reg270;
    reg340=reg198*reg235; T reg365=reg144*reg312; T reg366=reg161*reg278; reg286=ponderation*reg286; reg233=ponderation*reg233;
    reg301=reg98*reg301; reg314=reg304+reg314; reg262=reg98*reg262; reg319=reg179+reg319; reg179=reg201*reg172;
    reg304=reg145*reg270; reg333=reg318+reg333; reg297=ponderation*reg297; reg299=reg98*reg299; reg317=reg339+reg317;
    reg318=reg135*reg270; reg339=reg208*reg235; T reg367=reg135*reg312; T reg368=reg158*reg278; reg255=ponderation*reg255;
    reg323=reg98*reg323; reg175=reg207+reg175; reg207=reg208*reg172; T reg369=reg133*reg270; T reg370=reg211*reg172;
    T reg371=reg119*reg270; reg305=reg281+reg305; reg256=ponderation*reg256; reg328=reg327+reg328; reg197=reg98*reg197;
    reg243=ponderation*reg243; reg280=reg90+reg280; reg325=reg326+reg325; reg343=reg344+reg343; reg298=ponderation*reg298;
    reg248=reg98*reg248; reg324=reg239+reg324; reg313=reg303+reg313; reg348=reg336+reg348; reg90=reg69*reg270;
    reg341=reg206-reg341; reg223=reg98*reg223; reg178=ponderation*reg178; reg312=reg69*reg312; reg206=reg137*reg278;
    reg345=2*reg345; reg346=2*reg346; reg295=reg244+reg295; reg235=reg153*reg235; reg247=reg98*reg247;
    reg239=reg134*reg112; reg237=ponderation*reg237; reg148=ponderation*reg148; reg186=reg98*reg186; reg270=reg53*reg270;
    reg330=reg282+reg330; reg172=reg153*reg172; reg244=reg108*reg119; reg294=reg253+reg294; reg357=reg358+reg357;
    reg266=reg203+reg266; reg203=vectors[0][indices[0]+2]*reg189; reg219=reg98*reg219; reg298=vectors[0][indices[0]+2]*reg298; reg260=reg98*reg260;
    reg283=reg290+reg283; reg331=reg98*reg331; reg270=reg172+reg270; reg236=ponderation*reg236; reg288=vectors[0][indices[0]+2]*reg288;
    reg197=ponderation*reg197; reg361=reg212+reg361; reg172=reg126*reg239; reg212=reg46*reg278; reg253=reg88*reg345;
    reg281=reg159*reg239; reg337=reg268+reg337; reg195=ponderation*reg195; reg289=reg157+reg289; reg157=reg126*reg244;
    reg193=vectors[0][indices[0]+2]*reg193; reg313=reg98*reg313; reg268=reg46*reg346; reg191=ponderation*reg191; reg231=ponderation*reg231;
    reg213=reg98*reg213; reg363=reg364+reg363; reg282=reg88*reg346; reg362=reg362+reg322; reg226=reg251+reg226;
    reg264=reg257+reg264; reg251=reg204*reg345; reg249=vectors[0][indices[0]+2]*reg249; reg183=vectors[0][indices[0]+2]*reg183; reg190=reg227+reg190;
    reg286=vectors[0][indices[0]+2]*reg286; reg291=reg284+reg291; reg294=reg98*reg294; reg177=ponderation*reg177; reg176=vectors[0][indices[0]+2]*reg176;
    reg280=reg98*reg280; reg180=reg271+reg180; reg359=reg359+reg360; reg332=reg202+reg332; reg202=reg151*reg239;
    reg227=reg169*reg345; reg296=vectors[0][indices[0]+2]*reg296; reg199=reg272+reg199; reg214=ponderation*reg214; reg148=vectors[0][indices[0]+2]*reg148;
    reg287=reg162+reg287; reg275=vectors[0][indices[0]+2]*reg275; reg220=reg182+reg220; reg237=vectors[0][indices[0]+2]*reg237; reg242=reg246+reg242;
    reg349=reg276-reg349; reg162=reg210*reg345; reg355=reg356-reg355; reg182=reg87*reg168; reg243=vectors[0][indices[0]+2]*reg243;
    reg194=reg285+reg194; reg317=reg98*reg317; reg339=reg318+reg339; reg367=reg367+reg368; reg246=reg208*reg345;
    reg323=ponderation*reg323; reg175=reg98*reg175; reg369=reg207+reg369; reg207=reg133*reg239; reg257=reg160*reg278;
    reg271=reg133*reg244; reg272=reg160*reg346; reg276=reg201*reg345; reg284=reg163*reg346; reg285=reg119*reg244;
    reg329=reg329-reg335; reg290=reg119*reg239; reg303=reg163*reg278; reg370=reg371+reg370; reg318=reg105*reg239;
    reg304=reg179-reg304; reg179=reg155*reg278; reg326=reg145*reg239; reg327=reg155*reg346; reg336=reg145*reg244;
    reg186=ponderation*reg186; reg328=reg98*reg328; reg330=reg241+reg330; reg315=ponderation*reg315; reg319=reg98*reg319;
    reg262=ponderation*reg262; reg325=reg98*reg325; reg273=reg333-reg273; reg241=reg143*reg239; reg333=reg155*reg345;
    reg316=reg230+reg316; reg230=reg154*reg239; reg344=reg163*reg345; reg299=ponderation*reg299; reg173=ponderation*reg173;
    reg341=reg98*reg341; reg223=ponderation*reg223; reg263=ponderation*reg263; reg338=reg98*reg338; reg340=reg334+reg340;
    reg365=reg365+reg366; reg334=reg198*reg345; reg90=reg235+reg90; reg312=reg312+reg206; reg235=reg153*reg345;
    reg301=ponderation*reg301; reg314=reg98*reg314; reg351=reg352+reg351; reg352=reg130*reg239; reg358=reg88*reg278;
    reg364=reg134*reg119; reg371=reg130*reg244; T reg372=reg211*reg345; reg305=reg98*reg305; T reg373=reg83*reg345;
    reg302=ponderation*reg302; T reg374=reg119*reg93; T reg375=reg108*reg154; reg306=reg200+reg306; reg320=reg98*reg320;
    reg228=ponderation*reg228; reg248=ponderation*reg248; reg307=ponderation*reg307; reg343=reg98*reg343; reg342=reg300+reg342;
    reg200=reg146*reg239; reg300=reg160*reg345; T reg376=reg46*reg345; T reg377=reg147*reg239; reg321=reg234+reg321;
    reg348=reg98*reg348; reg324=reg98*reg324; reg258=vectors[0][indices[0]+2]*reg258; reg254=reg250+reg254; reg310=reg98*reg310;
    reg353=reg354+reg353; reg225=reg217+reg225; reg224=vectors[0][indices[0]+2]*reg224; reg217=reg150*reg239; reg252=ponderation*reg252;
    reg196=reg232+reg196; reg233=vectors[0][indices[0]+2]*reg233; reg232=reg169*reg278; reg279=reg98*reg279; reg234=reg165*reg346;
    reg274=reg269+reg274; reg277=vectors[0][indices[0]+2]*reg277; reg250=reg150*reg244; reg269=reg169*reg346; reg354=reg115*reg244;
    reg187=reg347-reg187; reg188=vectors[0][indices[0]+2]*reg188; reg218=reg238+reg218; reg164=reg265+reg164; reg205=vectors[0][indices[0]+2]*reg205;
    reg238=reg165*reg345; reg215=reg222+reg215; reg178=vectors[0][indices[0]+2]*reg178; reg222=reg170*reg239; reg221=reg293-reg221;
    reg240=reg181+reg240; reg297=vectors[0][indices[0]+2]*reg297; reg309=ponderation*reg309; reg308=reg98*reg308; reg185=ponderation*reg185;
    reg174=reg267+reg174; reg255=vectors[0][indices[0]+2]*reg255; reg259=reg261+reg259; reg256=vectors[0][indices[0]+2]*reg256; reg181=reg209*reg345;
    reg350=reg350+reg245; reg261=reg83*reg346; reg265=reg115*reg239; reg267=reg165*reg278; reg247=ponderation*reg247;
    reg239=reg53*reg239; reg293=reg83*reg278; reg216=vectors[0][indices[0]+2]*reg216; reg184=reg311+reg184; reg295=reg98*reg295;
    reg192=reg229+reg192; reg244=reg53*reg244; reg314=ponderation*reg314; reg221=reg98*reg221; reg351=reg98*reg351;
    reg184=reg98*reg184; reg312=reg312+reg235; reg358=reg352+reg358; reg229=reg69*reg364; reg297=reg240+reg297;
    reg299=vectors[0][indices[1]+0]*reg299; reg328=ponderation*reg328; reg90=reg98*reg90; reg240=reg161*reg346; reg311=reg144*reg364;
    reg365=reg365+reg334; reg308=ponderation*reg308; reg350=reg350+reg181; reg340=reg98*reg340; reg338=ponderation*reg338;
    reg330=reg98*reg330; reg336=reg327-reg336; reg255=reg174+reg255; reg323=vectors[0][indices[1]+0]*reg323; reg348=ponderation*reg348;
    reg219=ponderation*reg219; reg174=reg170*reg374; reg361=reg98*reg361; reg347=reg168*reg345; reg352=reg159*reg375;
    reg212=reg172+reg212; reg172=reg159*reg374; T reg378=reg161*reg345; reg304=reg98*reg304; reg295=ponderation*reg295;
    reg253=reg281+reg253; reg326=reg179-reg326; reg337=reg98*reg337; reg205=reg164+reg205; reg262=vectors[0][indices[1]+0]*reg262;
    reg313=ponderation*reg313; reg157=reg157+reg268; reg164=reg154*reg93; reg238=reg222+reg238; reg213=ponderation*reg213;
    reg319=ponderation*reg319; reg363=reg98*reg363; reg371=reg371+reg282; reg178=reg215+reg178; reg362=reg362+reg372;
    reg179=reg137*reg346; reg215=reg112*reg364; reg222=reg171*reg346; reg223=vectors[0][indices[1]+0]*reg223; reg305=ponderation*reg305;
    reg281=reg143*reg374; T reg379=reg156*reg345; reg370=reg98*reg370; reg233=reg196+reg233; reg301=vectors[0][indices[1]+0]*reg301;
    reg290=reg303+reg290; reg285=reg285+reg284; reg316=reg98*reg316; reg329=reg329+reg276; reg196=reg136*reg364;
    reg271=reg271+reg272; reg279=ponderation*reg279; reg303=reg143*reg375; T reg380=reg156*reg346; reg257=reg207+reg257;
    reg344=reg230+reg344; reg369=reg98*reg369; reg207=reg171*reg345; reg230=reg154*reg374; reg277=reg274+reg277;
    reg175=ponderation*reg175; reg191=vectors[0][indices[1]+0]*reg191; reg274=reg154*reg375; T reg381=reg158*reg346; T reg382=reg135*reg364;
    reg367=reg367+reg246; reg187=reg98*reg187; reg339=reg98*reg339; reg317=ponderation*reg317; reg324=ponderation*reg324;
    T reg383=reg113*reg364; reg321=reg98*reg321; T reg384=reg146*reg375; T reg385=reg166*reg346; T reg386=reg146*reg374;
    T reg387=reg158*reg345; reg256=reg259+reg256; reg325=ponderation*reg325; reg300=reg200+reg300; reg307=vectors[0][indices[1]+0]*reg307;
    reg342=reg98*reg342; reg341=ponderation*reg341; reg376=reg377+reg376; reg343=ponderation*reg343; reg200=reg87*reg165;
    reg259=reg167*reg345; reg377=reg147*reg374; reg267=reg265-reg267; reg265=reg147*reg375; reg273=reg98*reg273;
    reg224=reg225+reg224; reg263=vectors[0][indices[1]+0]*reg263; reg320=ponderation*reg320; reg225=reg105*reg375; reg306=reg98*reg306;
    T reg388=reg105*reg374; T reg389=reg137*reg345; reg333=reg241+reg333; reg373=reg318+reg373; reg231=vectors[0][indices[1]+0]*reg231;
    reg286=reg291+reg286; reg353=reg98*reg353; reg177=vectors[0][indices[1]+0]*reg177; reg176=reg180+reg176; reg280=ponderation*reg280;
    reg310=ponderation*reg310; reg332=reg98*reg332; reg227=reg202+reg227; reg345=reg166*reg345; reg374=reg151*reg374;
    reg180=reg87*reg210; reg354=reg354-reg234; reg202=reg151*reg375; reg182=2*reg182; reg309=vectors[0][indices[1]+0]*reg309;
    reg296=reg199+reg296; reg258=reg254+reg258; reg173=vectors[0][indices[1]+0]*reg173; reg247=vectors[0][indices[1]+0]*reg247; reg148=reg287+reg148;
    reg199=reg94*reg364; reg241=reg168*reg346; reg355=reg355-reg162; reg186=vectors[0][indices[1]+0]*reg186; reg193=reg289+reg193;
    reg195=vectors[0][indices[1]+0]*reg195; reg270=reg98*reg270; reg254=vectors[0][indices[1]+0]*reg185; reg349=reg275+reg349; reg293=reg239+reg293;
    reg239=reg108*reg94; reg294=ponderation*reg294; reg252=vectors[0][indices[1]+0]*reg252; reg288=reg226+reg288; reg216=reg192+reg216;
    reg214=vectors[0][indices[1]+0]*reg214; reg260=ponderation*reg260; reg203=reg266-reg203; reg236=vectors[0][indices[1]+0]*reg236; reg244=reg244+reg261;
    reg220=reg98*reg220; reg250=reg250+reg269; reg315=vectors[0][indices[1]+0]*reg315; reg249=reg264+reg249; reg359=reg359+reg251;
    reg364=reg123*reg364; reg302=vectors[0][indices[1]+0]*reg302; reg183=reg190+reg183; reg232=reg217+reg232; reg190=reg167*reg346;
    reg298=reg283+reg298; reg248=vectors[0][indices[1]+0]*reg248; reg331=ponderation*reg331; reg228=vectors[0][indices[1]+0]*reg228; reg188=reg218+reg188;
    reg357=reg98*reg357; reg243=reg194+reg243; reg197=vectors[0][indices[1]+0]*reg197; reg375=reg170*reg375; reg237=reg242+reg237;
    reg355=reg98*reg355; reg302=reg183+reg302; reg305=vectors[0][indices[1]+1]*reg305; reg253=reg98*reg253; reg183=reg136*reg164;
    reg257=reg98*reg257; reg359=reg98*reg359; reg232=reg98*reg232; reg369=ponderation*reg369; reg380=reg196-reg380;
    reg192=reg201*reg346; reg371=reg334+reg371; reg315=reg249+reg315; reg191=reg277+reg191; reg194=reg136*reg239;
    reg196=reg156*reg182; reg217=reg135*reg239; reg218=reg158*reg182; reg274=reg284+reg274; reg226=reg208*reg346;
    reg242=reg135*reg164; reg325=vectors[0][indices[1]+1]*reg325; reg381=reg382+reg381; reg172=reg378+reg172; reg220=ponderation*reg220;
    reg367=reg98*reg367; reg388=reg389+reg388; reg249=reg210*reg278; reg353=ponderation*reg353; reg306=ponderation*reg306;
    reg373=reg98*reg373; reg357=ponderation*reg357; reg264=reg115*reg164; reg231=reg286+reg231; reg213=vectors[0][indices[1]+1]*reg213;
    reg330=ponderation*reg330; reg266=reg204*reg346; reg275=reg123*reg164; reg370=ponderation*reg370; reg190=reg364+reg190;
    reg277=reg112*reg239; reg290=reg98*reg290; reg301=reg233+reg301; reg314=vectors[0][indices[1]+1]*reg314; reg162=reg354-reg162;
    reg294=vectors[0][indices[1]+1]*reg294; reg285=reg372+reg285; reg197=reg243+reg197; reg362=reg98*reg362; reg233=reg119*reg164;
    reg243=reg211*reg278; reg329=reg98*reg329; reg271=reg246+reg271; reg348=vectors[0][indices[1]+1]*reg348; reg248=reg298+reg248;
    reg252=reg288+reg252; reg279=vectors[0][indices[1]+1]*reg279; reg385=reg383+reg385; reg246=reg145*reg164; reg283=reg201*reg278;
    reg174=reg347-reg174; reg267=reg98*reg267; reg336=reg276+reg336; reg276=reg134*reg94; reg293=reg98*reg293;
    reg350=reg98*reg350; reg284=reg69*reg164; reg286=reg153*reg346; reg363=ponderation*reg363; reg184=ponderation*reg184;
    reg308=vectors[0][indices[1]+1]*reg308; reg254=reg349-reg254; reg320=vectors[0][indices[1]+1]*reg320; reg326=reg98*reg326; reg270=ponderation*reg270;
    reg260=vectors[0][indices[1]+1]*reg260; reg195=reg193+reg195; reg304=ponderation*reg304; reg228=reg188+reg228; reg212=reg98*reg212;
    reg313=vectors[0][indices[1]+1]*reg313; reg250=reg181+reg250; reg339=ponderation*reg339; reg181=reg113*reg239; reg244=reg235+reg244;
    reg328=vectors[0][indices[1]+1]*reg328; reg188=reg166*reg182; reg193=reg209*reg278; reg230=reg207+reg230; reg352=reg282+reg352;
    reg344=reg98*reg344; reg203=reg236+reg203; reg187=ponderation*reg187; reg331=vectors[0][indices[1]+1]*reg331; reg303=reg327+reg303;
    reg186=reg237+reg186; reg316=ponderation*reg316; reg207=reg150*reg164; reg379=reg281-reg379; reg219=vectors[0][indices[1]+1]*reg219;
    reg214=reg216+reg214; reg216=reg209*reg346; reg333=reg98*reg333; reg235=reg113*reg164; reg361=ponderation*reg361;
    reg273=ponderation*reg273; reg299=reg297+reg299; reg236=reg94*reg239; reg374=reg345+reg374; reg384=reg272+reg384;
    reg237=reg161*reg182; reg272=reg126*reg164; reg321=ponderation*reg321; reg281=reg210*reg346; reg282=reg204*reg278;
    reg287=reg94*reg164; reg337=ponderation*reg337; reg386=reg387+reg386; reg180=2*reg180; reg227=reg98*reg227;
    reg300=reg98*reg300; reg332=ponderation*reg332; reg157=reg251+reg157; reg307=reg256+reg307; reg199=reg241-reg199;
    reg342=ponderation*reg342; reg340=ponderation*reg340; reg241=reg137*reg182; reg310=vectors[0][indices[1]+1]*reg310; reg251=reg168*reg182;
    reg309=reg296+reg309; reg365=reg98*reg365; reg317=vectors[0][indices[1]+1]*reg317; reg256=reg130*reg164; reg288=reg69*reg239;
    reg289=reg198*reg278; reg202=reg269+reg202; reg323=reg255+reg323; reg175=vectors[0][indices[1]+1]*reg175; reg255=reg144*reg239;
    reg269=reg108*reg115; reg240=reg311+reg240; reg238=reg98*reg238; reg90=ponderation*reg90; reg291=reg144*reg164;
    reg296=reg198*reg346; reg262=reg205+reg262; reg265=reg268+reg265; reg205=reg171*reg182; reg358=reg98*reg358;
    reg341=vectors[0][indices[1]+1]*reg341; reg324=vectors[0][indices[1]+1]*reg324; reg177=reg176+reg177; reg280=vectors[0][indices[1]+1]*reg280; reg346=reg211*reg346;
    reg176=reg112*reg164; reg223=reg178+reg223; reg239=reg123*reg239; reg178=reg133*reg164; reg263=reg224+reg263;
    reg225=reg261+reg225; reg224=reg167*reg182; reg222=reg215+reg222; reg338=vectors[0][indices[1]+1]*reg338; reg215=reg208*reg278;
    reg179=reg229+reg179; reg351=ponderation*reg351; reg221=ponderation*reg221; reg375=reg234+reg375; reg247=reg148+reg247;
    reg173=reg258+reg173; reg312=reg98*reg312; reg376=reg98*reg376; reg343=vectors[0][indices[1]+1]*reg343; reg164=reg53*reg164;
    reg200=2*reg200; reg278=reg153*reg278; reg319=vectors[0][indices[1]+1]*reg319; reg377=reg259+reg377; reg295=vectors[0][indices[1]+1]*reg295;
    reg148=reg46*reg200; reg375=reg356-reg375; reg179=reg98*reg179; reg164=reg278+reg164; reg199=reg98*reg199;
    reg293=ponderation*reg293; reg174=reg98*reg174; reg229=reg170*reg276; reg312=ponderation*reg312; reg267=ponderation*reg267;
    reg212=ponderation*reg212; reg234=reg165*reg180; reg380=reg98*reg380; reg359=ponderation*reg359; reg258=reg115*reg269;
    reg238=ponderation*reg238; reg259=reg165*reg182; reg261=reg115*reg276; reg329=ponderation*reg329; reg376=ponderation*reg376;
    reg377=reg98*reg377; reg265=reg360+reg265; reg268=reg147*reg276; reg278=reg46*reg180; reg190=reg98*reg190;
    reg249=reg264-reg249; reg264=reg153*reg180; reg297=reg204*reg180; reg239=reg224-reg239; reg162=reg98*reg162;
    reg355=ponderation*reg355; reg266=reg275+reg266; reg275=reg83*reg182; reg344=ponderation*reg344; reg286=reg284+reg286;
    reg284=reg53*reg276; reg236=reg236+reg251; reg298=reg210*reg180; reg288=reg241-reg288; reg311=reg126*reg269;
    reg230=reg98*reg230; reg318=reg53*reg269; reg327=reg46*reg182; reg334=reg83*reg200; reg345=reg201*reg180;
    reg347=reg165*reg200; reg272=reg282+reg272; reg274=reg322+reg274; reg194=reg194+reg196; reg282=reg154*reg276;
    reg322=reg163*reg180; reg192=reg183+reg192; reg157=reg98*reg157; reg244=reg98*reg244; reg294=reg197+reg294;
    reg270=vectors[0][indices[1]+2]*reg270; reg328=reg186+reg328; reg330=vectors[0][indices[1]+2]*reg330; reg183=reg126*reg276; reg295=reg247+reg295;
    reg184=vectors[0][indices[1]+2]*reg184; reg310=reg309+reg310; reg353=vectors[0][indices[1]+2]*reg353; reg186=reg169*reg180; reg197=reg151*reg276;
    reg202=reg245+reg202; reg374=reg98*reg374; reg227=ponderation*reg227; reg280=reg177+reg280; reg332=vectors[0][indices[1]+2]*reg332;
    reg177=reg119*reg276; reg213=reg231+reg213; reg363=vectors[0][indices[1]+2]*reg363; reg305=reg302+reg305; reg370=vectors[0][indices[1]+2]*reg370;
    reg231=reg150*reg276; reg245=reg211*reg180; reg277=reg205-reg277; reg358=ponderation*reg358; reg346=reg176+reg346;
    reg222=reg98*reg222; reg362=ponderation*reg362; reg371=reg98*reg371; reg176=reg108*reg170; reg256=reg289+reg256;
    reg247=reg88*reg182; reg289=reg130*reg269; reg302=reg88*reg200; reg309=reg145*reg269; reg349=reg155*reg200;
    reg253=ponderation*reg253; reg172=reg98*reg172; reg352=reg366+reg352; reg354=reg159*reg276; reg356=reg88*reg180;
    reg360=reg133*reg276; reg364=reg145*reg276; reg348=reg248+reg348; reg90=vectors[0][indices[1]+2]*reg90; reg319=reg262+reg319;
    reg304=vectors[0][indices[1]+2]*reg304; reg341=reg223+reg341; reg273=vectors[0][indices[1]+2]*reg273; reg317=reg299+reg317; reg339=vectors[0][indices[1]+2]*reg339;
    reg175=reg323+reg175; reg369=vectors[0][indices[1]+2]*reg369; reg343=reg307+reg343; reg342=vectors[0][indices[1]+2]*reg342; reg338=reg263+reg338;
    reg340=vectors[0][indices[1]+2]*reg340; reg314=reg301+reg314; reg351=vectors[0][indices[1]+2]*reg351; reg223=reg209*reg180; reg181=reg188-reg181;
    reg313=reg191+reg313; reg337=vectors[0][indices[1]+2]*reg337; reg216=reg235+reg216; reg385=reg98*reg385; reg350=ponderation*reg350;
    reg325=reg315+reg325; reg316=vectors[0][indices[1]+2]*reg316; reg281=reg287+reg281; reg331=reg203+reg331; reg191=vectors[0][indices[1]+2]*reg357;
    reg279=reg252+reg279; reg187=vectors[0][indices[1]+2]*reg187; reg254=reg308+reg254; reg221=vectors[0][indices[1]+2]*reg221; reg260=reg195+reg260;
    reg220=vectors[0][indices[1]+2]*reg220; reg195=reg169*reg200; reg203=reg150*reg269; reg235=reg169*reg182; reg207=reg193+reg207;
    reg219=reg214+reg219; reg250=reg98*reg250; reg232=ponderation*reg232; reg361=vectors[0][indices[1]+2]*reg361; reg324=reg173+reg324;
    reg321=vectors[0][indices[1]+2]*reg321; reg320=reg228+reg320; reg306=vectors[0][indices[1]+2]*reg306; reg290=ponderation*reg290; reg373=ponderation*reg373;
    reg173=reg160*reg180; reg193=reg146*reg276; reg214=reg87*reg167; reg335=reg303-reg335; reg228=reg160*reg200;
    reg384=reg368+reg384; reg388=reg98*reg388; reg225=reg206+reg225; reg178=reg215+reg178; reg217=reg218-reg217;
    reg381=reg98*reg381; reg386=reg98*reg386; reg300=ponderation*reg300; reg206=reg130*reg276; reg215=reg134*reg115;
    reg248=reg143*reg276; reg252=reg155*reg180; reg276=reg105*reg276; reg262=reg83*reg180; reg263=reg208*reg180;
    reg367=ponderation*reg367; reg326=ponderation*reg326; reg287=reg198*reg180; reg255=reg237-reg255; reg336=reg98*reg336;
    reg296=reg291+reg296; reg291=reg119*reg269; reg240=reg98*reg240; reg299=reg163*reg182; reg246=reg283-reg246;
    reg271=reg98*reg271; reg365=ponderation*reg365; reg283=reg155*reg182; reg301=reg163*reg200; reg303=reg115*reg93;
    reg243=reg233+reg243; reg226=reg242+reg226; reg333=ponderation*reg333; reg233=reg160*reg182; reg257=ponderation*reg257;
    reg269=reg133*reg269; reg379=reg98*reg379; reg285=reg98*reg285; reg212=vectors[0][indices[2]+0]*reg212; reg234=reg229+reg234;
    reg375=reg98*reg375; reg321=reg324+reg321; reg376=vectors[0][indices[2]+0]*reg376; reg174=ponderation*reg174; reg229=reg168*reg180;
    reg242=reg170*reg303; reg307=reg170*reg176; reg361=reg219+reg361; reg217=reg217-reg263; reg244=ponderation*reg244;
    reg219=reg135*reg215; reg308=reg158*reg200; reg192=reg98*reg192; reg315=reg87*reg46; reg323=reg87*reg204;
    reg380=ponderation*reg380; reg359=vectors[0][indices[2]+0]*reg359; reg220=reg260+reg220; reg288=reg288-reg264; reg258=reg258+reg347;
    reg257=vectors[0][indices[2]+0]*reg257; reg335=reg98*reg335; reg259=reg261+reg259; reg342=reg343+reg342; reg249=reg98*reg249;
    reg300=vectors[0][indices[2]+0]*reg300; reg379=ponderation*reg379; reg340=reg338+reg340; reg162=ponderation*reg162; reg365=vectors[0][indices[2]+0]*reg365;
    reg260=reg136*reg215; reg351=reg314+reg351; reg358=vectors[0][indices[2]+0]*reg358; reg261=reg156*reg200; reg246=reg98*reg246;
    reg336=ponderation*reg336; reg337=reg313+reg337; reg253=vectors[0][indices[2]+0]*reg253; reg226=reg98*reg226; reg306=reg320+reg306;
    reg329=vectors[0][indices[2]+0]*reg329; reg381=ponderation*reg381; reg304=reg319+reg304; reg326=vectors[0][indices[2]+0]*reg326; reg313=reg143*reg176;
    reg273=reg341+reg273; reg333=vectors[0][indices[2]+0]*reg333; reg164=reg98*reg164; reg314=reg156*reg180; reg319=reg143*reg303;
    reg339=reg317+reg339; reg367=vectors[0][indices[2]+0]*reg367; reg252=reg248+reg252; reg284=reg275-reg284; reg369=reg175+reg369;
    reg318=reg318-reg334; reg283=reg364+reg283; reg172=ponderation*reg172; reg384=reg98*reg384; reg352=reg98*reg352;
    reg386=ponderation*reg386; reg356=reg354+reg356; reg175=reg159*reg303; reg248=reg161*reg180; reg275=reg159*reg176;
    reg90=reg348+reg90; reg312=vectors[0][indices[2]+0]*reg312; reg194=reg194+reg345; reg317=reg69*reg215; reg286=reg98*reg286;
    reg320=reg137*reg200; reg270=reg294+reg270; reg293=vectors[0][indices[2]+0]*reg293; reg294=reg170*reg93; reg324=reg108*reg123;
    reg338=reg161*reg200; reg341=reg144*reg215; reg296=reg98*reg296; reg240=ponderation*reg240; reg179=ponderation*reg179;
    reg371=ponderation*reg371; reg311=reg311-reg148; reg256=reg98*reg256; reg183=reg327-reg183; reg255=reg255-reg287;
    reg272=reg98*reg272; reg206=reg247-reg206; reg247=reg146*reg176; reg327=reg158*reg180; reg157=ponderation*reg157;
    reg289=reg289-reg302; reg309=reg349+reg309; reg343=reg146*reg303; reg173=reg193+reg173; reg266=reg98*reg266;
    reg360=reg233-reg360; reg178=reg98*reg178; reg190=ponderation*reg190; reg363=reg213+reg363; reg362=vectors[0][indices[2]+0]*reg362;
    reg277=reg277-reg245; reg370=reg305+reg370; reg290=vectors[0][indices[2]+0]*reg290; reg316=reg325+reg316; reg344=vectors[0][indices[2]+0]*reg344;
    reg355=vectors[0][indices[2]+0]*reg355; reg191=reg331-reg191; reg181=reg181-reg223; reg271=ponderation*reg271; reg187=reg279+reg187;
    reg267=vectors[0][indices[2]+0]*reg267; reg221=reg254+reg221; reg193=vectors[0][indices[2]+0]*reg238; reg330=reg328+reg330; reg373=vectors[0][indices[2]+0]*reg373;
    reg377=ponderation*reg377; reg214=2*reg214; reg184=reg295+reg184; reg350=vectors[0][indices[2]+0]*reg350; reg239=reg239-reg297;
    reg269=reg269-reg228; reg265=reg98*reg265; reg353=reg310+reg353; reg232=vectors[0][indices[2]+0]*reg232; reg278=reg268+reg278;
    reg213=reg147*reg303; reg233=reg167*reg180; reg254=reg167*reg200; reg268=reg123*reg215; reg279=reg147*reg176;
    reg332=reg280+reg332; reg227=vectors[0][indices[2]+0]*reg227; reg230=ponderation*reg230; reg274=reg98*reg274; reg322=reg282+reg322;
    reg280=reg154*reg303; reg282=reg171*reg180; reg295=reg94*reg215; reg305=reg168*reg200; reg236=reg236+reg298;
    reg310=reg154*reg176; reg281=reg98*reg281; reg199=ponderation*reg199; reg374=ponderation*reg374; reg291=reg291-reg301;
    reg203=reg203-reg195; reg325=reg105*reg303; reg177=reg299-reg177; reg231=reg235-reg231; reg243=reg98*reg243;
    reg207=reg98*reg207; reg250=ponderation*reg250; reg262=reg276+reg262; reg285=ponderation*reg285; reg225=reg98*reg225;
    reg388=ponderation*reg388; reg202=reg98*reg202; reg186=reg197+reg186; reg197=reg171*reg200; reg235=reg112*reg215;
    reg276=reg166*reg200; reg215=reg113*reg215; reg346=reg98*reg346; reg222=ponderation*reg222; reg299=reg137*reg180;
    reg328=reg151*reg176; reg216=reg98*reg216; reg385=ponderation*reg385; reg176=reg105*reg176; reg180=reg166*reg180;
    reg303=reg151*reg303; reg186=reg98*reg186; reg331=reg166*reg214; reg202=ponderation*reg202; reg222=vectors[0][indices[2]+1]*reg222;
    reg232=reg353+reg232; reg362=reg363+reg362; reg265=ponderation*reg265; reg278=reg98*reg278; reg194=reg98*reg194;
    reg261=reg260+reg261; reg274=ponderation*reg274; reg260=reg136*reg294; reg192=ponderation*reg192; reg322=reg98*reg322;
    reg348=reg201*reg200; reg282=reg280-reg282; reg280=reg136*reg324; reg353=reg156*reg214; reg310=reg301+reg310;
    reg365=reg340+reg365; reg240=vectors[0][indices[2]+1]*reg240; reg250=vectors[0][indices[2]+1]*reg250; reg227=reg332+reg227; reg374=vectors[0][indices[2]+1]*reg374;
    reg279=reg148+reg279; reg233=reg213-reg233; reg191=reg355+reg191; reg199=vectors[0][indices[2]+1]*reg199; reg267=reg187+reg267;
    reg162=vectors[0][indices[2]+1]*reg162; reg148=reg167*reg214; reg187=reg123*reg324; reg213=reg204*reg200; reg301=reg123*reg294;
    reg254=reg268-reg254; reg295=reg305+reg295; reg239=reg98*reg239; reg268=reg94*reg294; reg305=reg210*reg200;
    reg266=ponderation*reg266; reg332=reg168*reg214; reg340=reg94*reg324; reg276=reg215-reg276; reg181=reg98*reg181;
    reg216=ponderation*reg216; reg253=reg337+reg253; reg172=vectors[0][indices[2]+1]*reg172; reg215=reg113*reg324; reg337=reg209*reg200;
    reg354=reg113*reg294; reg358=reg351+reg358; reg371=vectors[0][indices[2]+1]*reg371; reg380=vectors[0][indices[2]+1]*reg380; reg329=reg306+reg329;
    reg290=reg370+reg290; reg285=vectors[0][indices[2]+1]*reg285; reg306=reg126*reg294; reg351=reg204*reg182; reg297=reg311-reg297;
    reg183=reg98*reg183; reg272=ponderation*reg272; reg344=reg316+reg344; reg230=vectors[0][indices[2]+1]*reg230; reg286=ponderation*reg286;
    reg281=ponderation*reg281; reg236=reg98*reg236; reg377=vectors[0][indices[2]+1]*reg377; reg376=reg321+reg376; reg311=reg130*reg294;
    reg247=reg228+reg247; reg327=reg343-reg327; reg173=reg98*reg173; reg384=ponderation*reg384; reg288=reg98*reg288;
    reg228=reg145*reg294; reg316=reg201*reg182; reg320=reg317-reg320; reg317=reg69*reg294; reg321=reg153*reg200;
    reg343=reg69*reg324; reg257=reg369+reg257; reg355=reg137*reg214; reg271=vectors[0][indices[2]+1]*reg271; reg345=reg309+reg345;
    reg283=reg98*reg283; reg352=ponderation*reg352; reg356=reg98*reg356; reg248=reg175-reg248; reg367=reg339+reg367;
    reg381=vectors[0][indices[2]+1]*reg381; reg175=reg211*reg200; reg309=reg112*reg294; reg197=reg235-reg197; reg235=reg161*reg214;
    reg339=reg144*reg324; reg363=reg198*reg200; reg364=reg144*reg294; reg338=reg341-reg338; reg255=reg98*reg255;
    reg341=reg112*reg324; reg366=reg171*reg214; reg296=ponderation*reg296; reg277=reg98*reg277; reg346=ponderation*reg346;
    reg299=reg325-reg299; reg176=reg334+reg176; reg256=ponderation*reg256; reg206=reg98*reg206; reg287=reg289-reg287;
    reg289=reg198*reg182; reg312=reg90+reg312; reg179=vectors[0][indices[2]+1]*reg179; reg379=vectors[0][indices[2]+1]*reg379; reg333=reg273+reg333;
    reg293=reg270+reg293; reg244=vectors[0][indices[2]+1]*reg244; reg313=reg349+reg313; reg314=reg319+reg314; reg252=reg98*reg252;
    reg335=ponderation*reg335; reg300=reg342+reg300; reg373=reg330+reg373; reg388=vectors[0][indices[2]+1]*reg388; reg246=ponderation*reg246;
    reg386=vectors[0][indices[2]+1]*reg386; reg350=reg184+reg350; reg385=vectors[0][indices[2]+1]*reg385; reg336=vectors[0][indices[2]+1]*reg336; reg326=reg304+reg326;
    reg328=reg195+reg328; reg180=reg303-reg180; reg275=reg302+reg275; reg90=reg133*reg294; reg184=reg208*reg182;
    reg263=reg269-reg263; reg360=reg98*reg360; reg262=reg98*reg262; reg178=ponderation*reg178; reg225=ponderation*reg225;
    reg243=ponderation*reg243; reg177=reg98*reg177; reg245=reg291-reg245; reg195=reg211*reg182; reg269=reg119*reg294;
    reg323=2*reg323; reg315=2*reg315; reg270=reg158*reg214; reg324=reg135*reg324; reg200=reg208*reg200;
    reg273=reg135*reg294; reg308=reg219-reg308; reg217=reg98*reg217; reg226=ponderation*reg226; reg249=ponderation*reg249;
    reg259=reg98*reg259; reg258=reg298+reg258; reg164=ponderation*reg164; reg219=reg115*reg294; reg291=reg210*reg182;
    reg157=vectors[0][indices[2]+1]*reg157; reg190=vectors[0][indices[2]+1]*reg190; reg284=reg98*reg284; reg307=reg347+reg307; reg264=reg318-reg264;
    reg298=reg150*reg294; reg242=reg229+reg242; reg229=reg209*reg182; reg174=vectors[0][indices[2]+1]*reg174; reg234=reg98*reg234;
    reg193=reg221-reg193; reg359=reg220+reg359; reg223=reg203-reg223; reg375=ponderation*reg375; reg203=reg134*reg123;
    reg231=reg98*reg231; reg220=reg108*reg126; reg294=reg53*reg294; reg182=reg153*reg182; reg207=ponderation*reg207;
    reg212=reg361+reg212; reg263=reg98*reg263; reg284=ponderation*reg284; reg221=reg87*reg156; reg180=reg98*reg180;
    reg302=reg209*reg323; reg303=reg159*reg203; reg304=reg88*reg323; reg280=reg280-reg353; reg90=reg184-reg90;
    reg215=reg215+reg331; reg184=reg160*reg315; reg318=reg133*reg203; reg324=reg324+reg270; reg319=reg160*reg214;
    reg242=reg98*reg242; reg325=reg201*reg323; reg330=reg208*reg323; reg334=reg133*reg220; reg246=vectors[0][indices[2]+2]*reg246;
    reg336=reg326+reg336; reg326=vectors[0][indices[2]+2]*reg281; reg199=reg191+reg199; reg245=reg98*reg245; reg177=ponderation*reg177;
    reg207=vectors[0][indices[2]+2]*reg207; reg222=reg362+reg222; reg266=vectors[0][indices[2]+2]*reg266; reg269=reg195-reg269; reg346=vectors[0][indices[2]+2]*reg346;
    reg343=reg343+reg355; reg191=reg119*reg203; reg195=reg163*reg214; reg190=reg359+reg190; reg342=reg153*reg323;
    reg250=reg232+reg250; reg262=ponderation*reg262; reg377=reg376+reg377; reg265=vectors[0][indices[2]+2]*reg265; reg231=ponderation*reg231;
    reg232=reg134*reg126; reg360=ponderation*reg360; reg186=ponderation*reg186; reg236=ponderation*reg236; reg347=reg126*reg220;
    reg349=reg46*reg315; reg244=reg293+reg244; reg164=vectors[0][indices[2]+2]*reg164; reg328=reg188-reg328; reg188=reg151*reg203;
    reg293=reg169*reg323; reg192=vectors[0][indices[2]+2]*reg192; reg359=reg155*reg323; reg361=reg143*reg203; reg380=reg329+reg380;
    reg313=reg196+reg313; reg314=reg98*reg314; reg196=reg83*reg214; reg252=ponderation*reg252; reg329=reg53*reg203;
    reg362=reg170*reg203; reg294=reg182-reg294; reg388=reg373+reg388; reg225=vectors[0][indices[2]+2]*reg225; reg182=reg165*reg323;
    reg285=reg290+reg285; reg386=reg300+reg386; reg384=vectors[0][indices[2]+2]*reg384; reg243=vectors[0][indices[2]+2]*reg243; reg200=reg273+reg200;
    reg223=reg98*reg223; reg337=reg354+reg337; reg274=vectors[0][indices[2]+2]*reg274; reg230=reg344+reg230; reg308=reg98*reg308;
    reg273=reg119*reg220; reg217=ponderation*reg217; reg290=reg163*reg315; reg298=reg229-reg298; reg183=ponderation*reg183;
    reg307=reg251+reg307; reg335=vectors[0][indices[2]+2]*reg335; reg379=reg333+reg379; reg371=reg358+reg371; reg297=reg98*reg297;
    reg256=vectors[0][indices[2]+2]*reg256; reg179=reg312+reg179; reg286=vectors[0][indices[2]+2]*reg286; reg306=reg351-reg306; reg216=vectors[0][indices[2]+2]*reg216;
    reg385=reg350+reg385; reg229=reg126*reg203; reg251=reg46*reg214; reg300=reg150*reg203; reg312=reg169*reg214;
    reg264=reg98*reg264; reg291=reg219+reg291; reg176=reg241-reg176; reg233=reg98*reg233; reg219=reg169*reg315;
    reg241=reg105*reg203; reg333=reg83*reg323; reg344=reg150*reg220; reg276=reg98*reg276; reg206=ponderation*reg206;
    reg350=reg115*reg203; reg287=reg98*reg287; reg351=reg165*reg214; reg278=ponderation*reg278; reg354=reg210*reg323;
    reg340=reg332-reg340; reg311=reg289-reg311; reg289=reg130*reg203; reg305=reg268+reg305; reg193=reg174+reg193;
    reg375=vectors[0][indices[2]+2]*reg375; reg174=reg88*reg214; reg239=ponderation*reg239; reg295=reg98*reg295; reg268=reg130*reg220;
    reg358=reg88*reg315; reg254=reg98*reg254; reg352=vectors[0][indices[2]+2]*reg352; reg381=reg367+reg381; reg226=vectors[0][indices[2]+2]*reg226;
    reg172=reg253+reg172; reg202=vectors[0][indices[2]+2]*reg202; reg197=reg98*reg197; reg253=reg53*reg220; reg374=reg227+reg374;
    reg181=ponderation*reg181; reg227=reg198*reg323; reg339=reg339+reg235; reg367=reg83*reg315; reg368=reg46*reg323;
    reg363=reg364+reg363; reg364=reg147*reg203; reg338=reg98*reg338; reg175=reg309+reg175; reg296=vectors[0][indices[2]+2]*reg296;
    reg255=ponderation*reg255; reg341=reg341+reg366; reg309=reg211*reg323; reg240=reg365+reg240; reg279=reg224-reg279;
    reg259=ponderation*reg259; reg277=ponderation*reg277; reg258=reg98*reg258; reg299=reg98*reg299; reg224=reg145*reg220;
    reg365=reg155*reg315; reg369=reg145*reg203; reg370=reg155*reg214; reg288=ponderation*reg288; reg322=ponderation*reg322;
    reg228=reg316+reg228; reg320=reg98*reg320; reg249=vectors[0][indices[2]+2]*reg249; reg272=vectors[0][indices[2]+2]*reg272; reg321=reg317+reg321;
    reg194=ponderation*reg194; reg162=reg267+reg162; reg271=reg257+reg271; reg178=vectors[0][indices[2]+2]*reg178; reg261=reg98*reg261;
    reg345=reg98*reg345; reg257=reg126*reg93; reg348=reg260+reg348; reg283=ponderation*reg283; reg260=reg108*reg147;
    reg356=ponderation*reg356; reg248=reg98*reg248; reg157=reg212+reg157; reg275=reg237-reg275; reg212=reg163*reg323;
    reg234=ponderation*reg234; reg213=reg301+reg213; reg237=reg154*reg203; reg267=reg160*reg323; reg203=reg146*reg203;
    reg187=reg187+reg148; reg301=reg204*reg323; reg310=reg205-reg310; reg247=reg218-reg247; reg327=reg98*reg327;
    reg220=reg115*reg220; reg173=ponderation*reg173; reg205=reg165*reg315; reg282=reg98*reg282; reg261=ponderation*reg261;
    reg218=reg166*reg315; reg316=reg136*reg232; reg212=reg237+reg212; reg255=vectors[0][indices[3]+0]*reg255; reg237=reg166*reg323;
    reg317=reg151*reg257; reg280=reg280+reg325; reg372=reg147*reg260; reg246=reg336+reg246; reg180=ponderation*reg180;
    reg348=reg98*reg348; reg202=reg374+reg202; reg336=vectors[0][indices[3]+0]*reg186; reg231=vectors[0][indices[3]+0]*reg231; reg183=vectors[0][indices[3]+0]*reg183;
    reg215=reg215+reg302; reg181=vectors[0][indices[3]+0]*reg181; reg373=reg171*reg323; reg272=reg157+reg272; reg352=reg172+reg352;
    reg282=ponderation*reg282; reg157=reg154*reg257; reg264=ponderation*reg264; reg216=reg385+reg216; reg328=reg98*reg328;
    reg172=reg156*reg315; reg374=vectors[0][indices[3]+0]*reg356; reg376=reg113*reg232; reg207=reg250+reg207; reg283=vectors[0][indices[3]+0]*reg283;
    reg310=reg98*reg310; reg293=reg188+reg293; reg296=reg240+reg296; reg268=reg268+reg358; reg188=reg146*reg260;
    reg240=reg146*reg257; reg250=reg158*reg323; reg267=reg203+reg267; reg247=reg98*reg247; reg327=ponderation*reg327;
    reg220=reg220-reg205; reg224=reg365-reg224; reg369=reg370-reg369; reg228=reg98*reg228; reg320=ponderation*reg320;
    reg345=ponderation*reg345; reg321=reg98*reg321; reg178=reg271+reg178; reg360=vectors[0][indices[3]+0]*reg360; reg203=reg137*reg323;
    reg271=reg105*reg257; reg370=reg105*reg260; reg248=ponderation*reg248; reg334=reg334+reg184; reg319=reg318+reg319;
    reg90=reg98*reg90; reg196=reg329+reg196; reg226=reg381+reg226; reg217=vectors[0][indices[3]+0]*reg217; reg197=ponderation*reg197;
    reg318=reg161*reg315; reg329=reg144*reg232; reg339=reg339+reg227; reg253=reg253+reg367; reg363=reg98*reg363;
    reg338=ponderation*reg338; reg175=reg98*reg175; reg341=reg341+reg309; reg378=reg112*reg232; reg381=reg171*reg315;
    reg258=ponderation*reg258; reg299=ponderation*reg299; reg176=reg98*reg176; reg291=reg98*reg291; reg333=reg241+reg333;
    reg287=ponderation*reg287; reg351=reg350-reg351; reg311=reg98*reg311; reg174=reg289+reg174; reg241=vectors[0][indices[3]+0]*reg252;
    reg289=reg87*reg201; reg335=reg379+reg335; reg350=reg87*reg155; reg298=reg98*reg298; reg286=reg179+reg286;
    reg288=vectors[0][indices[3]+0]*reg288; reg312=reg300+reg312; reg164=reg244+reg164; reg284=vectors[0][indices[3]+0]*reg284; reg179=reg143*reg260;
    reg244=reg156*reg323; reg300=reg143*reg257; reg359=reg361+reg359; reg313=reg98*reg313; reg314=ponderation*reg314;
    reg361=reg151*reg260; reg294=reg98*reg294; reg225=reg388+reg225; reg379=vectors[0][indices[3]+0]*reg262; reg384=reg386+reg384;
    reg382=vectors[0][indices[3]+0]*reg173; reg263=ponderation*reg263; reg239=vectors[0][indices[3]+0]*reg239; reg245=ponderation*reg245; reg266=reg190+reg266;
    reg269=reg98*reg269; reg343=reg343+reg342; reg195=reg191+reg195; reg190=reg69*reg232; reg191=reg137*reg315;
    reg383=reg147*reg93; reg385=reg108*reg136; reg221=2*reg221; reg275=reg98*reg275; reg304=reg303+reg304;
    reg303=reg161*reg323; reg386=reg159*reg257; reg387=reg159*reg260; reg388=reg158*reg315; reg389=reg135*reg232;
    reg324=reg324+reg330; reg200=reg98*reg200; reg223=ponderation*reg223; reg308=ponderation*reg308; reg273=reg273+reg290;
    reg340=reg340-reg354; reg305=reg98*reg305; reg295=ponderation*reg295; reg375=reg193+reg375; reg234=vectors[0][indices[3]+0]*reg234;
    reg254=ponderation*reg254; reg344=reg344+reg219; reg233=ponderation*reg233; reg193=reg154*reg260; reg243=reg285+reg243;
    reg177=vectors[0][indices[3]+0]*reg177; reg279=reg98*reg279; reg368=reg364+reg368; reg297=ponderation*reg297; reg182=reg362+reg182;
    reg306=reg98*reg306; reg326=reg199-reg326; reg213=reg98*reg213; reg249=reg162+reg249; reg274=reg230+reg274;
    reg162=vectors[0][indices[3]+0]*reg322; reg346=reg222+reg346; reg277=vectors[0][indices[3]+0]*reg277; reg199=reg170*reg257; reg337=reg98*reg337;
    reg242=ponderation*reg242; reg276=ponderation*reg276; reg222=vectors[0][indices[3]+0]*reg259; reg256=reg371+reg256; reg206=vectors[0][indices[3]+0]*reg206;
    reg230=vectors[0][indices[3]+0]*reg194; reg192=reg380+reg192; reg307=reg98*reg307; reg285=reg168*reg323; reg362=reg94*reg232;
    reg364=reg168*reg315; reg251=reg229+reg251; reg232=reg123*reg232; reg187=reg187+reg301; reg229=reg167*reg315;
    reg265=reg377+reg265; reg371=vectors[0][indices[3]+0]*reg278; reg260=reg170*reg260; reg257=reg147*reg257; reg323=reg167*reg323;
    reg347=reg347+reg349; reg236=vectors[0][indices[3]+0]*reg236; reg325=reg224+reg325; reg291=ponderation*reg291; reg181=reg216+reg181;
    reg216=reg123*reg383; reg224=reg204*reg315; reg276=vectors[0][indices[3]+1]*reg276; reg362=reg364-reg362; reg369=reg98*reg369;
    reg206=reg256+reg206; reg328=ponderation*reg328; reg287=vectors[0][indices[3]+1]*reg287; reg293=reg98*reg293; reg256=reg137*reg221;
    reg179=reg365+reg179; reg307=ponderation*reg307; reg317=reg237+reg317; reg237=vectors[0][indices[3]+1]*reg345; reg314=vectors[0][indices[3]+1]*reg314;
    reg347=reg301+reg347; reg312=reg98*reg312; reg284=reg164+reg284; reg199=reg285-reg199; reg233=vectors[0][indices[3]+1]*reg233;
    reg229=reg232+reg229; reg164=reg108*reg145; reg371=reg265-reg371; reg277=reg346+reg277; reg197=vectors[0][indices[3]+1]*reg197;
    reg273=reg309+reg273; reg232=reg94*reg385; reg265=reg168*reg221; reg285=reg119*reg383; reg301=reg211*reg214;
    reg309=reg134*reg136; reg337=ponderation*reg337; reg346=reg113*reg383; reg264=vectors[0][indices[3]+1]*reg264; reg283=reg246+reg283;
    reg176=ponderation*reg176; reg246=reg210*reg315; reg364=reg209*reg315; reg370=reg367+reg370; reg365=reg94*reg383;
    reg241=reg335-reg241; reg299=vectors[0][indices[3]+1]*reg299; reg268=reg227+reg268; reg263=vectors[0][indices[3]+1]*reg263; reg227=reg198*reg214;
    reg335=reg130*reg383; reg360=reg178+reg360; reg247=ponderation*reg247; reg298=ponderation*reg298; reg361=reg219+reg361;
    reg294=ponderation*reg294; reg182=reg98*reg182; reg178=reg167*reg221; reg219=vectors[0][indices[3]+1]*reg242; reg321=ponderation*reg321;
    reg306=ponderation*reg306; reg367=reg210*reg214; reg288=reg286+reg288; reg320=vectors[0][indices[3]+1]*reg320; reg286=reg115*reg383;
    reg188=reg184+reg188; reg240=reg250+reg240; reg184=reg113*reg385; reg213=ponderation*reg213; reg250=reg166*reg221;
    reg267=reg98*reg267; reg271=reg203+reg271; reg333=reg98*reg333; reg203=reg204*reg214; reg351=reg98*reg351;
    reg377=reg123*reg385; reg289=2*reg289; reg340=reg98*reg340; reg305=ponderation*reg305; reg311=ponderation*reg311;
    reg244=reg300-reg244; reg300=reg126*reg383; reg251=reg98*reg251; reg174=reg98*reg174; reg234=reg375+reg234;
    reg359=reg98*reg359; reg187=reg98*reg187; reg382=reg384-reg382; reg327=vectors[0][indices[3]+1]*reg327; reg228=ponderation*reg228;
    reg313=ponderation*reg313; reg177=reg243+reg177; reg354=reg220-reg354; reg245=vectors[0][indices[3]+1]*reg245; reg350=2*reg350;
    reg379=reg225-reg379; reg220=reg208*reg214; reg225=reg209*reg214; reg218=reg376+reg218; reg243=reg133*reg383;
    reg212=reg98*reg212; reg363=ponderation*reg363; reg253=reg342+reg253; reg231=reg207+reg231; reg386=reg303+reg386;
    reg310=ponderation*reg310; reg304=reg98*reg304; reg297=vectors[0][indices[3]+1]*reg297; reg257=reg323+reg257; reg269=ponderation*reg269;
    reg183=reg272+reg183; reg180=vectors[0][indices[3]+1]*reg180; reg336=reg202-reg336; reg202=reg158*reg221; reg175=ponderation*reg175;
    reg248=vectors[0][indices[3]+1]*reg248; reg207=reg153*reg214; reg343=reg98*reg343; reg272=reg53*reg383; reg374=reg352-reg374;
    reg303=reg198*reg315; reg323=reg144*reg383; reg326=reg236+reg326; reg236=reg144*reg385; reg157=reg373+reg157;
    reg342=vectors[0][indices[3]+1]*reg295; reg223=vectors[0][indices[3]+1]*reg223; reg318=reg329+reg318; reg329=reg161*reg221; reg90=ponderation*reg90;
    reg339=reg98*reg339; reg319=reg98*reg319; reg338=vectors[0][indices[3]+1]*reg338; reg255=reg296+reg255; reg254=vectors[0][indices[3]+1]*reg254;
    reg368=reg98*reg368; reg279=ponderation*reg279; reg344=reg302+reg344; reg215=reg98*reg215; reg334=reg330+reg334;
    reg387=reg358+reg387; reg239=reg266+reg239; reg193=reg290+reg193; reg388=reg389+reg388; reg266=reg112*reg383;
    reg290=reg211*reg315; reg162=reg274-reg162; reg200=ponderation*reg200; reg280=reg98*reg280; reg324=reg98*reg324;
    reg274=reg156*reg221; reg296=reg153*reg315; reg302=reg136*reg385; reg330=reg69*reg383; reg172=reg316-reg172;
    reg196=reg98*reg196; reg308=vectors[0][indices[3]+1]*reg308; reg316=reg112*reg385; reg217=reg226+reg217; reg226=reg136*reg383;
    reg195=reg98*reg195; reg352=reg201*reg315; reg191=reg190+reg191; reg190=reg171*reg221; reg358=reg135*reg385;
    reg275=ponderation*reg275; reg222=reg249-reg222; reg258=vectors[0][indices[3]+1]*reg258; reg249=reg150*reg383; reg341=reg98*reg341;
    reg214=reg201*reg214; reg315=reg208*reg315; reg373=reg135*reg383; reg381=reg378+reg381; reg383=reg145*reg383;
    reg230=reg192-reg230; reg260=reg205+reg260; reg372=reg349+reg372; reg261=vectors[0][indices[3]+1]*reg261; reg385=reg69*reg385;
    reg282=vectors[0][indices[3]+1]*reg282; reg348=ponderation*reg348; reg192=reg165*reg289; reg320=reg288+reg320; reg205=reg88*reg289;
    reg251=ponderation*reg251; reg288=reg159*reg309; reg349=reg170*reg309; reg375=reg209*reg289; reg184=reg184-reg250;
    reg191=reg98*reg191; reg376=vectors[0][indices[3]+2]*reg321; reg387=reg235+reg387; reg224=reg216+reg224; reg369=ponderation*reg369;
    reg386=reg98*reg386; reg354=reg98*reg354; reg296=reg330+reg296; reg343=ponderation*reg343; reg216=reg204*reg289;
    reg377=reg377-reg178; reg219=reg234-reg219; reg304=ponderation*reg304; reg260=reg332-reg260; reg385=reg385-reg256;
    reg358=reg358-reg202; reg234=reg119*reg164; reg235=reg133*reg164; reg330=reg163*reg350; reg315=reg373+reg315;
    reg388=reg98*reg388; reg271=reg98*reg271; reg332=reg163*reg221; reg373=reg119*reg309; reg378=reg150*reg164;
    reg324=ponderation*reg324; reg370=reg355+reg370; reg355=reg165*reg350; reg301=reg285+reg301; reg285=reg169*reg350;
    reg380=reg115*reg164; reg384=reg105*reg309; reg273=reg98*reg273; reg310=vectors[0][indices[3]+2]*reg310; reg162=reg282+reg162;
    reg279=vectors[0][indices[3]+2]*reg279; reg371=reg233+reg371; reg195=ponderation*reg195; reg233=reg83*reg289; reg199=reg98*reg199;
    reg367=reg286-reg367; reg282=reg87*reg158; reg254=reg239+reg254; reg239=vectors[0][indices[3]+2]*reg213; reg286=reg115*reg309;
    reg389=reg165*reg221; reg305=vectors[0][indices[3]+2]*reg305; reg342=reg326-reg342; reg326=reg134*reg145; reg182=ponderation*reg182;
    reg311=vectors[0][indices[3]+2]*reg311; reg319=ponderation*reg319; reg263=reg360+reg263; reg360=reg150*reg309; reg334=reg98*reg334;
    T reg390=reg153*reg289; T reg391=reg169*reg221; reg90=vectors[0][indices[3]+2]*reg90; reg243=reg220+reg243; reg220=vectors[0][indices[3]+2]*reg313;
    T reg392=reg133*reg309; T reg393=reg160*reg221; reg241=reg314+reg241; reg314=reg160*reg350; T reg394=reg208*reg289;
    T reg395=reg201*reg289; reg316=reg316-reg190; T reg396=reg211*reg289; reg308=reg217+reg308; reg303=reg323+reg303;
    reg217=reg53*reg164; reg323=vectors[0][indices[3]+2]*reg200; T reg397=reg83*reg350; reg236=reg236-reg329; T reg398=reg210*reg289;
    reg232=reg265+reg232; reg197=reg277+reg197; reg277=vectors[0][indices[3]+2]*reg175; T reg399=reg198*reg289; T reg400=reg83*reg221;
    T reg401=reg53*reg309; reg246=reg365+reg246; reg365=reg145*reg93; T reg402=reg108*reg143; T reg403=vectors[0][indices[3]+2]*reg337;
    reg276=reg181+reg276; reg362=reg98*reg362; reg287=reg206+reg287; reg325=reg98*reg325; reg293=ponderation*reg293;
    reg317=reg98*reg317; reg228=vectors[0][indices[3]+2]*reg228; reg237=reg283-reg237; reg368=ponderation*reg368; reg333=ponderation*reg333;
    reg215=ponderation*reg215; reg193=reg366+reg193; reg306=vectors[0][indices[3]+2]*reg306; reg212=ponderation*reg212; reg218=reg98*reg218;
    reg181=reg154*reg309; reg206=reg163*reg289; reg338=reg255+reg338; reg253=reg98*reg253; reg255=vectors[0][indices[3]+2]*reg363;
    reg297=reg183+reg297; reg339=ponderation*reg339; reg183=vectors[0][indices[3]+2]*reg291; reg222=reg258+reg222; reg374=reg248+reg374;
    reg275=vectors[0][indices[3]+2]*reg275; reg344=reg98*reg344; reg341=ponderation*reg341; reg248=vectors[0][indices[3]+2]*reg348; reg230=reg261+reg230;
    reg223=reg231+reg223; reg381=reg98*reg381; reg298=vectors[0][indices[3]+2]*reg298; reg157=reg98*reg157; reg290=reg266+reg290;
    reg280=ponderation*reg280; reg272=reg207+reg272; reg172=reg98*reg172; reg352=reg226+reg352; reg318=reg98*reg318;
    reg302=reg302+reg274; reg207=reg169*reg289; reg226=reg145*reg309; reg231=reg160*reg289; reg258=reg155*reg350;
    reg261=reg146*reg309; reg266=reg145*reg164; reg188=reg270+reg188; reg249=reg225+reg249; reg240=reg98*reg240;
    reg225=reg46*reg289; reg270=reg147*reg309; reg267=ponderation*reg267; reg294=vectors[0][indices[3]+2]*reg294; reg283=reg126*reg164;
    reg366=reg46*reg350; reg264=reg284+reg264; reg307=vectors[0][indices[3]+2]*reg307; reg284=reg46*reg221; T reg404=reg126*reg309;
    reg359=ponderation*reg359; reg300=reg203+reg300; reg244=reg98*reg244; reg353=reg179-reg353; reg187=ponderation*reg187;
    reg179=reg143*reg309; reg203=reg155*reg289; reg351=ponderation*reg351; T reg405=reg88*reg350; reg164=reg130*reg164;
    reg372=reg148+reg372; reg229=reg98*reg229; reg347=reg98*reg347; reg268=reg98*reg268; reg379=reg299+reg379;
    reg257=reg98*reg257; reg335=reg227+reg335; reg269=vectors[0][indices[3]+2]*reg269; reg336=reg180+reg336; reg148=reg130*reg309;
    reg180=reg88*reg221; reg245=reg177+reg245; reg364=reg346+reg364; reg382=reg327+reg382; reg328=vectors[0][indices[3]+2]*reg328;
    reg247=vectors[0][indices[3]+2]*reg247; reg361=reg331+reg361; reg383=reg214-reg383; reg174=ponderation*reg174; reg196=ponderation*reg196;
    reg177=reg155*reg221; reg176=vectors[0][indices[3]+2]*reg176; reg309=reg151*reg309; reg312=ponderation*reg312; reg340=ponderation*reg340;
    reg325=ponderation*reg325; reg214=reg168*reg289; reg251=vectors[0][indices[4]+0]*reg251; reg340=vectors[0][indices[4]+0]*reg340; reg249=reg98*reg249;
    reg342=reg305+reg342; reg227=reg144*reg326; reg299=reg161*reg350; reg174=vectors[0][indices[4]+0]*reg174; reg344=ponderation*reg344;
    reg236=reg236+reg399; reg239=reg254-reg239; reg187=vectors[0][indices[4]+0]*reg187; reg266=reg258+reg266; reg383=reg98*reg383;
    reg318=ponderation*reg318; reg226=reg177+reg226; reg303=reg98*reg303; reg192=reg349+reg192; reg391=reg360-reg391;
    reg319=vectors[0][indices[4]+0]*reg319; reg90=reg263+reg90; reg389=reg286+reg389; reg268=ponderation*reg268; reg177=reg170*reg365;
    reg335=reg98*reg335; reg254=reg113*reg326; reg263=reg146*reg402; reg180=reg148-reg180; reg367=reg98*reg367;
    reg148=reg146*reg365; reg286=reg123*reg326; reg305=reg158*reg289; reg231=reg261+reg231; reg261=reg167*reg350;
    reg377=reg377+reg216; reg188=reg98*reg188; reg240=ponderation*reg240; reg327=reg170*reg402; reg354=ponderation*reg354;
    reg224=reg98*reg224; reg164=reg405-reg164; reg229=ponderation*reg229; reg334=ponderation*reg334; reg243=reg98*reg243;
    reg183=reg222-reg183; reg393=reg392-reg393; reg351=vectors[0][indices[4]+0]*reg351; reg253=ponderation*reg253; reg235=reg314-reg235;
    reg380=reg380+reg355; reg381=ponderation*reg381; reg378=reg285-reg378; reg290=reg98*reg290; reg222=reg94*reg326;
    reg331=reg168*reg350; reg272=reg98*reg272; reg316=reg316+reg396; reg232=reg232+reg398; reg324=vectors[0][indices[4]+0]*reg324;
    reg323=reg308-reg323; reg370=reg98*reg370; reg246=reg98*reg246; reg308=reg171*reg350; reg346=reg112*reg326;
    reg362=ponderation*reg362; reg271=ponderation*reg271; reg349=reg143*reg365; reg203=reg179+reg203; reg353=reg98*reg353;
    reg244=ponderation*reg244; reg300=reg98*reg300; reg284=reg404-reg284; reg294=reg264+reg294; reg283=reg366-reg283;
    reg196=vectors[0][indices[4]+0]*reg196; reg179=reg166*reg289; reg207=reg309+reg207; reg364=reg98*reg364; reg361=reg98*reg361;
    reg317=ponderation*reg317; reg195=vectors[0][indices[4]+0]*reg195; reg269=reg245+reg269; reg247=reg382+reg247; reg267=vectors[0][indices[4]+0]*reg267;
    reg176=reg379+reg176; reg333=vectors[0][indices[4]+0]*reg333; reg369=vectors[0][indices[4]+0]*reg369; reg301=reg98*reg301; reg332=reg373-reg332;
    reg234=reg330-reg234; reg279=reg371+reg279; reg368=vectors[0][indices[4]+0]*reg368; reg385=reg385+reg390; reg245=reg137*reg350;
    reg264=reg69*reg326; reg309=reg143*reg93; reg360=reg108*reg135; reg282=2*reg282; reg371=reg87*reg208;
    reg373=reg166*reg350; reg184=reg184+reg375; reg343=vectors[0][indices[4]+0]*reg343; reg376=reg320-reg376; reg320=reg151*reg402;
    reg379=reg151*reg365; reg382=reg143*reg402; reg347=ponderation*reg347; reg392=reg156*reg289; reg404=reg171*reg289;
    reg206=reg181+reg206; reg193=reg98*reg193; reg339=vectors[0][indices[4]+0]*reg339; reg255=reg338-reg255; reg157=ponderation*reg157;
    reg298=reg223+reg298; reg312=vectors[0][indices[4]+0]*reg312; reg306=reg297+reg306; reg233=reg384+reg233; reg181=reg137*reg289;
    reg223=reg105*reg365; reg297=reg105*reg402; reg328=reg336+reg328; reg293=vectors[0][indices[4]+0]*reg293; reg336=reg147*reg402;
    reg338=reg147*reg365; reg384=reg167*reg289; reg225=reg270+reg225; reg372=reg98*reg372; reg257=ponderation*reg257;
    reg270=reg87*reg160; reg237=reg228+reg237; reg219=reg307+reg219; reg215=vectors[0][indices[4]+0]*reg215; reg403=reg276-reg403;
    reg277=reg197-reg277; reg341=vectors[0][indices[4]+0]*reg341; reg400=reg401-reg400; reg197=reg156*reg350; reg228=reg136*reg326;
    reg276=vectors[0][indices[4]+0]*reg182; reg302=reg302+reg395; reg352=reg98*reg352; reg172=ponderation*reg172; reg217=reg397-reg217;
    reg304=vectors[0][indices[4]+0]*reg304; reg218=ponderation*reg218; reg280=vectors[0][indices[4]+0]*reg280; reg275=reg374+reg275; reg307=reg154*reg402;
    reg248=reg230-reg248; reg230=reg154*reg365; reg212=vectors[0][indices[4]+0]*reg212; reg388=ponderation*reg388; reg315=reg98*reg315;
    reg358=reg358+reg394; reg374=reg158*reg350; reg326=reg135*reg326; reg359=vectors[0][indices[4]+0]*reg359; reg220=reg241-reg220;
    reg402=reg159*reg402; reg365=reg159*reg365; reg289=reg161*reg289; reg205=reg288+reg205; reg387=reg98*reg387;
    reg386=ponderation*reg386; reg199=ponderation*reg199; reg260=reg98*reg260; reg296=reg98*reg296; reg191=ponderation*reg191;
    reg273=ponderation*reg273; reg310=reg162+reg310; reg311=reg287+reg311; reg400=reg98*reg400; reg162=reg156*reg282;
    reg241=reg136*reg360; reg287=reg201*reg350; reg288=reg136*reg309; reg232=reg98*reg232; reg197=reg228+reg197;
    reg234=reg396+reg234; reg272=ponderation*reg272; reg365=reg289-reg365; reg302=reg98*reg302; reg228=reg108*reg133;
    reg352=ponderation*reg352; reg290=ponderation*reg290; reg199=vectors[0][indices[4]+1]*reg199; reg229=vectors[0][indices[4]+1]*reg229; reg297=reg397+reg297;
    reg386=vectors[0][indices[4]+1]*reg386; reg304=reg275+reg304; reg222=reg331+reg222; reg239=reg187+reg239; reg332=reg98*reg332;
    reg307=reg330+reg307; reg187=reg94*reg309; reg275=reg210*reg350; reg240=vectors[0][indices[4]+1]*reg240; reg362=vectors[0][indices[4]+1]*reg362;
    reg333=reg176+reg333; reg271=vectors[0][indices[4]+1]*reg271; reg176=reg113*reg360; reg289=reg166*reg282; reg325=vectors[0][indices[4]+1]*reg325;
    reg369=reg237+reg369; reg380=reg398+reg380; reg340=reg342+reg340; reg270=2*reg270; reg237=reg115*reg309;
    reg319=reg90+reg319; reg346=reg308-reg346; reg403=reg215+reg403; reg218=vectors[0][indices[4]+1]*reg218; reg316=reg98*reg316;
    reg381=vectors[0][indices[4]+1]*reg381; reg277=reg341+reg277; reg246=ponderation*reg246; reg334=vectors[0][indices[4]+1]*reg334; reg388=vectors[0][indices[4]+1]*reg388;
    reg323=reg324+reg323; reg90=reg210*reg221; reg402=reg405+reg402; reg227=reg299-reg227; reg268=vectors[0][indices[4]+1]*reg268;
    reg215=reg144*reg309; reg299=reg198*reg350; reg174=reg311+reg174; reg347=vectors[0][indices[4]+1]*reg347; reg308=reg144*reg360;
    reg311=reg161*reg282; reg293=reg328+reg293; reg260=ponderation*reg260; reg317=vectors[0][indices[4]+1]*reg317; reg336=reg366+reg336;
    reg383=ponderation*reg383; reg217=reg390+reg217; reg226=reg98*reg226; reg338=reg384-reg338; reg301=ponderation*reg301;
    reg296=ponderation*reg296; reg395=reg266+reg395; reg266=reg201*reg221; reg324=reg145*reg309; reg225=reg98*reg225;
    reg251=reg306+reg251; reg370=ponderation*reg370; reg372=ponderation*reg372; reg249=ponderation*reg249; reg205=reg98*reg205;
    reg387=ponderation*reg387; reg248=reg280+reg248; reg230=reg404-reg230; reg389=reg98*reg389; reg280=reg153*reg221;
    reg306=reg168*reg282; reg328=reg94*reg360; reg172=vectors[0][indices[4]+1]*reg172; reg206=reg98*reg206; reg391=reg98*reg391;
    reg193=ponderation*reg193; reg183=reg351+reg183; reg354=vectors[0][indices[4]+1]*reg354; reg330=reg53*reg309; reg276=reg219-reg276;
    reg219=reg209*reg221; reg255=reg339+reg255; reg318=vectors[0][indices[4]+1]*reg318; reg312=reg298+reg312; reg344=vectors[0][indices[4]+1]*reg344;
    reg303=ponderation*reg303; reg233=reg98*reg233; reg236=reg98*reg236; reg192=reg98*reg192; reg223=reg181-reg223;
    reg224=ponderation*reg224; reg320=reg285+reg320; reg181=reg211*reg221; reg379=reg179-reg379; reg378=reg375+reg378;
    reg382=reg258+reg382; reg179=reg198*reg221; reg258=reg130*reg309; reg164=reg399+reg164; reg285=reg171*reg282;
    reg393=reg98*reg393; reg298=reg112*reg360; reg358=reg98*reg358; reg392=reg349+reg392; reg331=reg119*reg309;
    reg339=reg123*reg360; reg203=reg98*reg203; reg341=reg211*reg350; reg243=ponderation*reg243; reg353=ponderation*reg353;
    reg326=reg374-reg326; reg342=reg112*reg309; reg349=reg167*reg282; reg351=reg135*reg309; reg300=ponderation*reg300;
    reg366=reg208*reg350; reg385=reg98*reg385; reg374=reg134*reg135; reg368=reg279+reg368; reg264=reg245-reg264;
    reg245=reg204*reg350; reg279=reg123*reg309; reg177=reg214+reg177; reg212=reg310+reg212; reg214=reg69*reg309;
    reg367=ponderation*reg367; reg310=reg153*reg350; reg375=reg208*reg221; reg254=reg373-reg254; reg373=reg69*reg360;
    reg286=reg261-reg286; reg261=reg133*reg309; reg384=reg137*reg282; reg157=vectors[0][indices[4]+1]*reg157; reg377=reg98*reg377;
    reg184=reg98*reg184; reg235=reg394+reg235; reg390=reg113*reg309; reg315=ponderation*reg315; reg376=reg343+reg376;
    reg350=reg209*reg350; reg191=vectors[0][indices[4]+1]*reg191; reg364=ponderation*reg364; reg327=reg355+reg327; reg343=reg126*reg309;
    reg188=ponderation*reg188; reg207=reg98*reg207; reg231=reg98*reg231; reg309=reg150*reg309; reg360=reg135*reg360;
    reg148=reg305-reg148; reg180=reg98*reg180; reg361=ponderation*reg361; reg305=reg158*reg282; reg263=reg314+reg263;
    reg371=2*reg371; reg221=reg204*reg221; reg335=ponderation*reg335; reg273=vectors[0][indices[4]+1]*reg273; reg195=reg269+reg195;
    reg267=reg247+reg267; reg244=vectors[0][indices[4]+1]*reg244; reg196=reg294+reg196; reg284=reg98*reg284; reg257=vectors[0][indices[4]+1]*reg257;
    reg283=reg216+reg283; reg220=reg359+reg220; reg253=vectors[0][indices[4]+1]*reg253; reg260=vectors[0][indices[4]+2]*reg260; reg353=vectors[0][indices[4]+2]*reg353;
    reg329=reg402-reg329; reg381=reg277+reg381; reg391=ponderation*reg391; reg290=vectors[0][indices[4]+2]*reg290; reg223=reg98*reg223;
    reg256=reg297-reg256; reg317=reg293+reg317; reg216=reg105*reg374; reg247=reg83*reg371; reg244=reg220+reg244;
    reg361=vectors[0][indices[4]+2]*reg361; reg352=vectors[0][indices[4]+2]*reg352; reg229=reg239+reg229; reg220=reg159*reg374; reg362=reg340+reg362;
    reg239=vectors[0][indices[4]+2]*reg246; reg269=reg108*reg146; reg277=reg209*reg371; reg293=reg145*reg228; reg294=reg88*reg371;
    reg271=reg333+reg271; reg297=reg155*reg270; reg370=vectors[0][indices[4]+2]*reg370; reg383=vectors[0][indices[4]+2]*reg383; reg395=reg98*reg395;
    reg224=vectors[0][indices[4]+2]*reg224; reg172=reg248+reg172; reg248=reg133*reg93; reg325=reg369+reg325; reg273=reg195+reg273;
    reg226=ponderation*reg226; reg301=vectors[0][indices[4]+2]*reg301; reg157=reg212+reg157; reg276=reg199+reg276; reg180=ponderation*reg180;
    reg300=vectors[0][indices[4]+2]*reg300; reg367=vectors[0][indices[4]+2]*reg367; reg354=reg183+reg354; reg205=ponderation*reg205; reg183=reg88*reg270;
    reg195=reg130*reg228; reg199=reg88*reg282; reg212=reg130*reg374; reg179=reg258-reg179; reg207=ponderation*reg207;
    reg378=reg98*reg378; reg164=reg98*reg164; reg257=reg368+reg257; reg372=vectors[0][indices[4]+2]*reg372; reg272=vectors[0][indices[4]+2]*reg272;
    reg253=reg196+reg253; reg218=reg403+reg218; reg191=reg376+reg191; reg196=reg150*reg228; reg296=vectors[0][indices[4]+2]*reg296;
    reg233=ponderation*reg233; reg258=reg169*reg371; reg193=vectors[0][indices[4]+2]*reg193; reg314=reg169*reg270; reg249=vectors[0][indices[4]+2]*reg249;
    reg365=reg98*reg365; reg344=reg312+reg344; reg312=reg151*reg374; reg250=reg320-reg250; reg320=reg169*reg282;
    reg333=reg150*reg374; reg219=reg309-reg219; reg364=vectors[0][indices[4]+2]*reg364; reg347=reg251+reg347; reg379=reg98*reg379;
    reg251=reg143*reg374; reg382=reg274+reg382; reg392=reg98*reg392; reg203=ponderation*reg203; reg274=reg119*reg374;
    reg309=reg163*reg282; reg340=reg119*reg228; reg355=reg163*reg270; reg359=reg153*reg371; reg368=reg145*reg374;
    reg369=reg155*reg282; reg324=reg266+reg324; reg240=reg267+reg240; reg188=vectors[0][indices[4]+2]*reg188; reg266=reg134*reg133;
    reg267=reg87*reg161; reg376=reg201*reg371; reg241=reg241-reg162; reg287=reg288+reg287; reg197=reg98*reg197;
    reg302=ponderation*reg302; reg318=reg255+reg318; reg303=vectors[0][indices[4]+2]*reg303; reg255=reg46*reg371; reg350=reg390+reg350;
    reg254=reg98*reg254; reg288=reg160*reg270; reg390=reg133*reg228; reg394=reg160*reg282; reg396=reg133*reg374;
    reg375=reg261-reg375; reg235=reg98*reg235; reg393=ponderation*reg393; reg334=reg319+reg334; reg243=vectors[0][indices[4]+2]*reg243;
    reg261=reg208*reg371; reg360=reg360+reg305; reg366=reg351+reg366; reg326=reg98*reg326; reg358=ponderation*reg358;
    reg332=ponderation*reg332; reg234=reg98*reg234; reg181=reg331-reg181; reg385=ponderation*reg385; reg264=reg98*reg264;
    reg310=reg214+reg310; reg373=reg373+reg384; reg184=ponderation*reg184; reg214=reg155*reg371; reg339=reg339+reg349;
    reg245=reg279+reg245; reg286=reg98*reg286; reg377=ponderation*reg377; reg232=ponderation*reg232; reg222=reg98*reg222;
    reg275=reg187+reg275; reg328=reg306-reg328; reg187=reg210*reg371; reg279=reg165*reg371; reg319=reg170*reg374;
    reg327=reg265+reg327; reg177=reg98*reg177; reg192=ponderation*reg192; reg386=reg304+reg386; reg400=ponderation*reg400;
    reg387=vectors[0][indices[4]+2]*reg387; reg265=reg165*reg270; reg304=reg115*reg228; reg331=reg165*reg282; reg351=reg115*reg374;
    reg90=reg237+reg90; reg380=reg98*reg380; reg389=ponderation*reg389; reg237=reg147*reg374; reg178=reg336-reg178;
    reg338=reg98*reg338; reg225=ponderation*reg225; reg206=ponderation*reg206; reg230=reg98*reg230; reg190=reg307-reg190;
    reg307=reg154*reg374; reg336=reg163*reg371; reg397=reg46*reg270; reg398=reg126*reg228; reg399=reg46*reg282;
    reg401=reg126*reg374; reg221=reg343-reg221; reg283=reg98*reg283; reg284=ponderation*reg284; reg343=reg83*reg270;
    reg228=reg53*reg228; reg402=reg83*reg282; reg403=reg53*reg374; reg280=reg330-reg280; reg217=reg98*reg217;
    reg268=reg174+reg268; reg335=vectors[0][indices[4]+2]*reg335; reg174=reg204*reg371; reg388=reg323+reg388; reg315=vectors[0][indices[4]+2]*reg315;
    reg323=reg211*reg371; reg298=reg298+reg285; reg316=ponderation*reg316; reg236=ponderation*reg236; reg227=reg98*reg227;
    reg346=reg98*reg346; reg299=reg215+reg299; reg308=reg308+reg311; reg215=reg198*reg371; reg341=reg342+reg341;
    reg231=ponderation*reg231; reg148=reg98*reg148; reg176=reg176+reg289; reg330=reg160*reg371; reg202=reg263-reg202;
    reg374=reg146*reg374; reg391=vectors[0][indices[5]+0]*reg391; reg249=reg344+reg249; reg236=vectors[0][indices[5]+0]*reg236; reg310=reg98*reg310;
    reg303=reg318+reg303; reg263=reg158*reg371; reg346=ponderation*reg346; reg197=ponderation*reg197; reg287=reg98*reg287;
    reg241=reg241+reg376; reg318=reg136*reg266; reg342=reg156*reg270; reg184=vectors[0][indices[5]+0]*reg184; reg344=reg151*reg248;
    reg315=reg388+reg315; reg352=reg172+reg352; reg172=reg166*reg371; reg330=reg374+reg330; reg207=vectors[0][indices[5]+0]*reg207;
    reg361=reg317+reg361; reg338=ponderation*reg338; reg358=vectors[0][indices[5]+0]*reg358; reg178=reg98*reg178; reg264=ponderation*reg264;
    reg255=reg237+reg255; reg237=reg167*reg371; reg317=reg147*reg248; reg374=reg147*reg269; reg223=ponderation*reg223;
    reg302=vectors[0][indices[5]+0]*reg302; reg250=reg98*reg250; reg258=reg312+reg258; reg312=reg156*reg371; reg388=reg143*reg248;
    reg379=ponderation*reg379; reg214=reg251+reg214; reg251=reg146*reg248; reg382=reg98*reg382; reg392=ponderation*reg392;
    reg404=reg143*reg269; reg405=reg146*reg269; reg309=reg274+reg309; reg272=reg253+reg272; reg400=vectors[0][indices[5]+0]*reg400;
    reg340=reg340+reg355; reg368=reg369-reg368; reg296=reg191+reg296; reg385=vectors[0][indices[5]+0]*reg385; reg364=reg218+reg364;
    reg191=reg87*reg198; reg267=2*reg267; reg218=reg108*reg144; reg253=reg146*reg93; reg274=reg137*reg270;
    reg231=vectors[0][indices[5]+0]*reg231; reg369=reg69*reg266; reg383=reg325+reg383; reg325=vectors[0][indices[5]+0]*reg226; reg233=vectors[0][indices[5]+0]*reg233;
    reg370=reg271+reg370; reg373=reg373+reg359; reg188=reg240+reg188; reg324=reg98*reg324; reg240=reg94*reg266;
    reg300=reg347+reg300; reg284=vectors[0][indices[5]+0]*reg284; reg389=vectors[0][indices[5]+0]*reg389; reg367=reg354+reg367; reg271=reg168*reg270;
    reg328=reg328-reg187; reg275=reg98*reg275; reg222=ponderation*reg222; reg347=reg161*reg270; reg354=reg144*reg266;
    reg286=ponderation*reg286; reg245=reg98*reg245; reg308=reg308+reg215; reg339=reg339+reg174; T reg406=reg123*reg266;
    T reg407=reg167*reg270; reg378=ponderation*reg378; reg380=ponderation*reg380; reg176=reg176+reg277; reg90=reg98*reg90;
    reg331=reg351-reg331; reg377=vectors[0][indices[5]+0]*reg377; reg224=reg229+reg224; reg293=reg297-reg293; reg304=reg304-reg265;
    reg205=vectors[0][indices[5]+0]*reg205; reg387=reg386+reg387; reg229=vectors[0][indices[5]+0]*reg192; reg260=reg276+reg260; reg395=ponderation*reg395;
    reg177=ponderation*reg177; reg327=reg98*reg327; reg279=reg319+reg279; reg276=reg168*reg371; reg319=reg170*reg248;
    reg351=reg170*reg269; reg372=reg257+reg372; reg225=vectors[0][indices[5]+0]*reg225; reg332=vectors[0][indices[5]+0]*reg332; reg301=reg273+reg301;
    reg221=reg98*reg221; reg399=reg401+reg399; reg398=reg398+reg397; reg316=vectors[0][indices[5]+0]*reg316; reg290=reg381+reg290;
    reg257=reg154*reg269; reg273=reg105*reg248; reg381=reg154*reg248; reg386=reg137*reg371; reg247=reg216+reg247;
    reg216=reg171*reg371; reg256=reg98*reg256; reg336=reg307+reg336; reg190=reg98*reg190; reg230=ponderation*reg230;
    reg307=reg105*reg269; reg239=reg362-reg239; reg362=vectors[0][indices[5]+0]*reg232; reg219=reg98*reg219; reg180=vectors[0][indices[5]+0]*reg180;
    reg335=reg268+reg335; reg320=reg333+reg320; reg196=reg314+reg196; reg87=reg87*reg88; reg206=vectors[0][indices[5]+0]*reg206;
    reg193=reg157+reg193; reg217=ponderation*reg217; reg299=reg98*reg299; reg280=reg98*reg280; reg227=ponderation*reg227;
    reg402=reg403+reg402; reg228=reg228+reg343; reg283=ponderation*reg283; reg329=reg98*reg329; reg390=reg390+reg288;
    reg179=reg98*reg179; reg360=reg360+reg261; reg294=reg220+reg294; reg148=ponderation*reg148; reg326=ponderation*reg326;
    reg366=reg98*reg366; reg371=reg161*reg371; reg248=reg159*reg248; reg157=reg113*reg266; reg195=reg195+reg183;
    reg393=vectors[0][indices[5]+0]*reg393; reg243=reg334+reg243; reg220=reg166*reg270; reg268=reg159*reg269; reg341=reg98*reg341;
    reg235=ponderation*reg235; reg164=ponderation*reg164; reg375=reg98*reg375; reg203=vectors[0][indices[5]+0]*reg203; reg298=reg298+reg323;
    reg394=reg396+reg394; reg353=reg244+reg353; reg244=reg171*reg270; reg333=reg112*reg266; reg269=reg151*reg269;
    reg334=reg158*reg270; reg181=reg98*reg181; reg254=ponderation*reg254; reg199=reg212+reg199; reg234=ponderation*reg234;
    reg365=ponderation*reg365; reg266=reg135*reg266; reg202=reg98*reg202; reg350=reg98*reg350; reg287=ponderation*reg287;
    reg317=reg237+reg317; reg255=reg98*reg255; reg235=vectors[0][indices[5]+1]*reg235; reg358=reg315+reg358; reg178=ponderation*reg178;
    reg393=reg243+reg393; reg212=reg136*reg218; reg237=reg130*reg253; reg243=reg156*reg267; reg177=vectors[0][indices[5]+1]*reg177;
    reg315=reg94*reg218; reg341=ponderation*reg341; reg207=reg361+reg207; reg379=vectors[0][indices[5]+1]*reg379; reg254=vectors[0][indices[5]+1]*reg254;
    reg184=reg364+reg184; reg334=reg266+reg334; reg190=ponderation*reg190; reg375=ponderation*reg375; reg336=reg98*reg336;
    reg266=reg208*reg270; reg241=reg98*reg241; reg361=reg198*reg282; reg256=ponderation*reg256; reg364=reg135*reg253;
    reg229=reg260-reg229; reg260=reg135*reg218; reg396=reg158*reg267; reg236=reg303+reg236; reg342=reg318-reg342;
    reg303=reg136*reg253; reg227=vectors[0][indices[5]+1]*reg227; reg318=reg94*reg253; reg391=reg249+reg391; reg378=vectors[0][indices[5]+1]*reg378;
    reg240=reg271-reg240; reg249=reg201*reg270; reg271=reg161*reg267; reg176=reg98*reg176; reg401=reg144*reg218;
    reg403=reg168*reg267; reg327=ponderation*reg327; T reg408=vectors[0][indices[5]+1]*reg197; T reg409=reg210*reg270; reg302=reg352+reg302;
    reg279=reg98*reg279; reg319=reg276-reg319; reg374=reg397+reg374; reg326=vectors[0][indices[5]+1]*reg326; reg351=reg265+reg351;
    reg206=reg193+reg206; reg299=ponderation*reg299; reg193=reg133*reg253; reg280=ponderation*reg280; reg265=reg208*reg282;
    reg339=reg98*reg339; reg402=reg98*reg402; reg390=reg261+reg390; reg228=reg359+reg228; reg196=reg277+reg196;
    reg261=reg209*reg282; reg276=reg150*reg253; reg308=reg98*reg308; reg277=reg153*reg282; reg245=ponderation*reg245;
    reg352=reg53*reg253; reg359=reg211*reg270; reg222=vectors[0][indices[5]+1]*reg222; reg397=reg123*reg218; T reg410=reg167*reg267;
    reg362=reg239-reg362; reg164=vectors[0][indices[5]+1]*reg164; reg180=reg335+reg180; reg307=reg343+reg307; reg219=ponderation*reg219;
    reg179=ponderation*reg179; reg320=reg98*reg320; reg239=reg204*reg270; reg335=reg123*reg253; reg87=2*reg87;
    reg343=reg171*reg267; reg407=reg406+reg407; reg406=reg112*reg218; reg230=vectors[0][indices[5]+1]*reg230; T reg411=reg144*reg253;
    T reg412=reg198*reg270; reg328=reg98*reg328; reg220=reg157+reg220; reg389=reg367+reg389; reg157=vectors[0][indices[5]+1]*reg380;
    reg346=vectors[0][indices[5]+1]*reg346; reg316=reg290+reg316; reg290=vectors[0][indices[5]+1]*reg392; reg203=reg353+reg203; reg283=vectors[0][indices[5]+1]*reg283;
    reg284=reg300+reg284; reg257=reg355+reg257; reg381=reg216+reg381; reg247=reg98*reg247; reg298=reg98*reg298;
    reg216=reg134*reg144; reg300=reg201*reg282; reg394=reg98*reg394; reg225=reg372+reg225; reg353=reg112*reg253;
    reg347=reg354+reg347; reg234=vectors[0][indices[5]+1]*reg234; reg332=reg301+reg332; reg301=reg145*reg253; reg221=ponderation*reg221;
    reg399=reg98*reg399; reg354=reg113*reg253; reg398=reg174+reg398; reg275=ponderation*reg275; reg174=reg204*reg282;
    reg355=reg126*reg253; reg338=vectors[0][indices[5]+1]*reg338; reg268=reg183+reg268; reg400=reg272+reg400; reg217=vectors[0][indices[5]+1]*reg217;
    reg312=reg388-reg312; reg250=ponderation*reg250; reg258=reg98*reg258; reg330=reg98*reg330; reg183=reg108*reg130;
    reg272=reg211*reg282; reg329=ponderation*reg329; reg310=ponderation*reg310; reg367=reg119*reg253; reg360=reg98*reg360;
    reg282=reg210*reg282; reg372=reg166*reg267; reg395=vectors[0][indices[5]+1]*reg395; reg274=reg369+reg274; reg369=reg113*reg218;
    reg248=reg371+reg248; reg181=ponderation*reg181; reg405=reg288+reg405; reg324=ponderation*reg324; reg309=reg98*reg309;
    reg368=reg98*reg368; reg382=ponderation*reg382; reg331=reg98*reg331; reg251=reg263+reg251; reg377=reg224+reg377;
    reg373=reg98*reg373; reg366=ponderation*reg366; reg214=reg98*reg214; reg350=ponderation*reg350; reg294=reg98*reg294;
    reg233=reg370+reg233; reg223=vectors[0][indices[5]+1]*reg223; reg286=vectors[0][indices[5]+1]*reg286; reg376=reg293+reg376; reg340=reg323+reg340;
    reg344=reg172+reg344; reg269=reg314+reg269; reg202=ponderation*reg202; reg187=reg304-reg187; reg385=reg296+reg385;
    reg264=vectors[0][indices[5]+1]*reg264; reg148=vectors[0][indices[5]+1]*reg148; reg195=reg215+reg195; reg191=2*reg191; reg199=reg98*reg199;
    reg172=reg137*reg267; reg205=reg387+reg205; reg215=reg115*reg253; reg218=reg69*reg218; reg90=ponderation*reg90;
    reg325=reg383-reg325; reg253=reg69*reg253; reg224=reg153*reg270; reg270=reg209*reg270; reg365=vectors[0][indices[5]+1]*reg365;
    reg404=reg297+reg404; reg273=reg386+reg273; reg231=reg188+reg231; reg244=reg333+reg244; reg341=vectors[0][indices[5]+2]*reg341;
    reg188=reg133*reg183; reg309=ponderation*reg309; reg178=vectors[0][indices[5]+2]*reg178; reg263=reg126*reg216; reg338=reg225+reg338;
    reg320=ponderation*reg320; reg225=reg169*reg87; reg288=reg150*reg183; reg293=reg46*reg267; reg268=reg311+reg268;
    reg405=reg305+reg405; reg195=reg98*reg195; reg199=ponderation*reg199; reg296=reg160*reg87; reg328=ponderation*reg328;
    reg283=reg284+reg283; reg157=reg389-reg157; reg220=reg98*reg220; reg284=reg130*reg93; reg90=vectors[0][indices[5]+2]*reg90;
    reg346=reg316+reg346; reg221=vectors[0][indices[5]+2]*reg221; reg297=reg46*reg87; reg217=reg400+reg217; reg280=vectors[0][indices[5]+2]*reg280;
    reg304=reg126*reg183; reg331=ponderation*reg331; reg108=reg108*reg159; reg355=reg174+reg355; reg174=reg169*reg267;
    reg305=reg150*reg216; reg311=reg83*reg191; reg314=reg209*reg191; reg276=reg261+reg276; reg369=reg369+reg372;
    reg359=reg353+reg359; reg196=reg98*reg196; reg228=reg98*reg228; reg407=reg98*reg407; reg270=reg354+reg270;
    reg402=ponderation*reg402; reg273=reg98*reg273; reg390=reg98*reg390; reg310=vectors[0][indices[5]+2]*reg310; reg193=reg265+reg193;
    reg339=ponderation*reg339; reg264=reg385+reg264; reg261=reg133*reg216; reg265=reg160*reg267; reg230=reg206+reg230;
    reg190=vectors[0][indices[5]+2]*reg190; reg162=reg404-reg162; reg134=reg134*reg130; reg206=reg143*reg216; reg316=reg155*reg191;
    reg398=reg98*reg398; reg244=reg98*reg244; reg323=reg159*reg216; reg333=reg145*reg216; reg353=reg155*reg267;
    reg399=ponderation*reg399; reg251=reg98*reg251; reg382=vectors[0][indices[5]+2]*reg382; reg376=reg98*reg376; reg301=reg300-reg301;
    reg300=reg88*reg191; reg290=reg203-reg290; reg203=reg105*reg216; reg347=reg98*reg347; reg234=reg332+reg234;
    reg181=vectors[0][indices[5]+2]*reg181; reg214=ponderation*reg214; reg394=ponderation*reg394; reg298=ponderation*reg298; reg286=reg377+reg286;
    reg308=ponderation*reg308; reg332=reg83*reg267; reg354=reg53*reg216; reg352=reg277+reg352; reg312=reg98*reg312;
    reg245=vectors[0][indices[5]+2]*reg245; reg266=reg364+reg266; reg366=vectors[0][indices[5]+2]*reg366; reg237=reg361+reg237; reg326=reg358+reg326;
    reg409=reg318+reg409; reg277=reg153*reg191; reg329=vectors[0][indices[5]+2]*reg329; reg373=ponderation*reg373; reg260=reg260+reg396;
    reg318=reg53*reg183; reg227=reg236+reg227; reg362=reg222+reg362; reg299=vectors[0][indices[5]+2]*reg299; reg222=reg208*reg191;
    reg240=reg98*reg240; reg236=vectors[0][indices[5]+2]*reg275; reg256=vectors[0][indices[5]+2]*reg256; reg378=reg391+reg378; reg219=vectors[0][indices[5]+2]*reg219;
    reg223=reg233+reg223; reg233=reg130*reg216; reg294=ponderation*reg294; reg408=reg302-reg408; reg287=vectors[0][indices[5]+2]*reg287;
    reg302=reg83*reg87; reg412=reg411+reg412; reg358=reg88*reg267; reg361=reg211*reg191; reg239=reg335+reg239;
    reg335=reg198*reg191; reg401=reg401+reg271; reg344=reg98*reg344; reg364=reg210*reg191; reg370=reg201*reg191;
    reg202=vectors[0][indices[5]+2]*reg202; reg334=reg98*reg334; reg148=reg231+reg148; reg254=reg184+reg254; reg350=vectors[0][indices[5]+2]*reg350;
    reg315=reg403-reg315; reg212=reg212-reg243; reg218=reg218+reg172; reg249=reg303+reg249; reg258=ponderation*reg258;
    reg397=reg397+reg410; reg184=reg204*reg191; reg231=vectors[0][indices[5]+2]*reg327; reg229=reg177+reg229; reg342=reg98*reg342;
    reg224=reg253+reg224; reg241=ponderation*reg241; reg360=ponderation*reg360; reg365=reg205+reg365; reg274=reg98*reg274;
    reg269=reg289+reg269; reg177=reg163*reg267; reg379=reg207+reg379; reg250=vectors[0][indices[5]+2]*reg250; reg205=reg170*reg216;
    reg207=reg151*reg216; reg253=reg119*reg216; reg282=reg215-reg282; reg272=reg367+reg272; reg215=reg165*reg191;
    reg289=reg169*reg191; reg303=reg145*reg183; reg367=reg155*reg87; reg340=reg98*reg340; reg336=ponderation*reg336;
    reg325=reg395+reg325; reg371=vectors[0][indices[5]+2]*reg324; reg247=ponderation*reg247; reg406=reg406+reg343; reg330=ponderation*reg330;
    reg381=reg98*reg381; reg377=reg130*reg183; reg187=reg98*reg187; reg257=reg285+reg257; reg285=reg88*reg87;
    reg383=reg154*reg216; reg385=reg163*reg191; reg386=reg165*reg87; reg279=ponderation*reg279; reg176=ponderation*reg176;
    reg387=reg115*reg183; reg388=reg46*reg191; reg389=reg147*reg216; reg319=reg98*reg319; reg307=reg384+reg307;
    reg374=reg349+reg374; reg179=vectors[0][indices[5]+2]*reg179; reg164=reg180+reg164; reg180=reg165*reg267; reg317=reg98*reg317;
    reg183=reg119*reg183; reg349=reg146*reg216; reg384=reg163*reg87; reg368=ponderation*reg368; reg248=reg98*reg248;
    reg391=reg160*reg191; reg216=reg115*reg216; reg235=reg393+reg235; reg255=ponderation*reg255; reg375=vectors[0][indices[5]+2]*reg375;
    reg351=reg306-reg351; reg306=reg161*reg87; reg328=vectors[0][indices[6]+0]*reg328; reg399=vectors[0][indices[6]+0]*reg399; reg236=reg362-reg236;
    reg407=ponderation*reg407; reg307=reg98*reg307; reg282=reg98*reg282; reg180=reg216-reg180; reg294=vectors[0][indices[6]+0]*reg294;
    reg319=ponderation*reg319; reg358=reg233+reg358; reg412=reg98*reg412; reg237=reg98*reg237; reg387=reg387-reg386;
    reg240=ponderation*reg240; reg329=reg365+reg329; reg216=vectors[0][indices[6]+0]*reg279; reg231=reg229-reg231; reg409=reg98*reg409;
    reg315=reg315-reg364; reg229=reg168*reg87; reg233=reg94*reg134; reg401=reg401+reg335; reg195=ponderation*reg195;
    reg221=reg283+reg221; reg273=ponderation*reg273; reg339=vectors[0][indices[6]+0]*reg339; reg359=reg98*reg359; reg245=reg286+reg245;
    reg244=ponderation*reg244; reg347=ponderation*reg347; reg220=ponderation*reg220; reg157=reg90+reg157; reg331=vectors[0][indices[6]+0]*reg331;
    reg90=reg144*reg134; reg377=reg377+reg285; reg187=ponderation*reg187; reg283=reg170*reg108; reg286=reg170*reg284;
    reg362=reg168*reg191; reg215=reg205+reg215; reg351=reg98*reg351; reg366=reg326+reg366; reg205=reg146*reg108;
    reg334=ponderation*reg334; reg342=ponderation*reg342; reg326=reg166*reg87; reg365=reg113*reg134; reg249=reg98*reg249;
    reg176=vectors[0][indices[6]+0]*reg176; reg350=reg254+reg350; reg212=reg212+reg370; reg254=reg136*reg134; reg393=reg156*reg87;
    reg330=vectors[0][indices[6]+0]*reg330; reg202=reg148+reg202; reg360=vectors[0][indices[6]+0]*reg360; reg224=reg98*reg224; reg148=reg135*reg134;
    reg374=reg98*reg374; reg375=reg235+reg375; reg388=reg389+reg388; reg235=reg167*reg191; reg389=reg147*reg284;
    reg308=vectors[0][indices[6]+0]*reg308; reg394=vectors[0][indices[6]+0]*reg394; reg408=reg287+reg408; reg241=vectors[0][indices[6]+0]*reg241; reg299=reg227+reg299;
    reg320=vectors[0][indices[6]+0]*reg320; reg219=reg378+reg219; reg260=reg260+reg222; reg227=reg147*reg108; reg218=reg218+reg277;
    reg332=reg354+reg332; reg266=reg98*reg266; reg251=ponderation*reg251; reg300=reg323+reg300; reg287=reg161*reg191;
    reg323=reg159*reg284; reg312=ponderation*reg312; reg369=reg369+reg314; reg270=reg98*reg270; reg354=reg159*reg108;
    reg373=vectors[0][indices[6]+0]*reg373; reg310=reg264+reg310; reg162=reg98*reg162; reg316=reg206+reg316; reg206=reg143*reg284;
    reg264=reg156*reg191; reg378=reg143*reg108; reg269=reg98*reg269; reg344=ponderation*reg344; reg274=ponderation*reg274;
    reg247=vectors[0][indices[6]+0]*reg247; reg256=reg223+reg256; reg318=reg318+reg302; reg223=reg146*reg284; reg183=reg183+reg384;
    reg395=reg158*reg191; reg391=reg349+reg391; reg177=reg253+reg177; reg272=reg98*reg272; reg340=ponderation*reg340;
    reg368=vectors[0][indices[6]+0]*reg368; reg371=reg325-reg371; reg248=ponderation*reg248; reg402=vectors[0][indices[6]+0]*reg402; reg280=reg217+reg280;
    reg405=reg98*reg405; reg268=reg98*reg268; reg390=ponderation*reg390; reg228=ponderation*reg228; reg196=ponderation*reg196;
    reg276=reg98*reg276; reg174=reg305+reg174; reg352=reg98*reg352; reg376=ponderation*reg376; reg309=vectors[0][indices[6]+0]*reg309;
    reg181=reg234+reg181; reg214=vectors[0][indices[6]+0]*reg214; reg290=reg382+reg290; reg301=reg98*reg301; reg217=reg151*reg108;
    reg398=ponderation*reg398; reg288=reg288+reg225; reg178=reg338+reg178; reg255=vectors[0][indices[6]+0]*reg255; reg406=reg406+reg361;
    reg239=reg98*reg239; reg397=reg397+reg184; reg234=reg123*reg134; reg253=reg167*reg87; reg199=vectors[0][indices[6]+0]*reg199;
    reg179=reg164+reg179; reg164=reg112*reg134; reg305=reg171*reg87; reg188=reg188+reg296; reg311=reg203+reg311;
    reg93=reg159*reg93; reg203=reg137*reg87; reg265=reg261+reg265; reg134=reg69*reg134; reg336=vectors[0][indices[6]+0]*reg336;
    reg190=reg230+reg190; reg193=reg98*reg193; reg298=vectors[0][indices[6]+0]*reg298; reg341=reg346+reg341; reg304=reg304+reg297;
    reg230=reg154*reg108; reg261=reg154*reg284; reg325=reg171*reg191; reg385=reg383+reg385; reg257=reg98*reg257;
    reg381=ponderation*reg381; reg338=reg151*reg284; reg346=reg166*reg191; reg333=reg353-reg333; reg289=reg207+reg289;
    reg303=reg367-reg303; reg258=vectors[0][indices[6]+0]*reg258; reg250=reg379+reg250; reg207=reg158*reg87; reg317=ponderation*reg317;
    reg293=reg263+reg293; reg355=reg98*reg355; reg191=reg137*reg191; reg284=reg105*reg284; reg108=reg105*reg108;
    reg398=vectors[0][indices[6]+1]*reg398; reg326=reg365+reg326; reg307=ponderation*reg307; reg284=reg191+reg284; reg270=ponderation*reg270;
    reg330=reg202+reg330; reg251=vectors[0][indices[6]+1]*reg251; reg308=reg299+reg308; reg347=vectors[0][indices[6]+1]*reg347; reg199=reg179+reg199;
    reg195=vectors[0][indices[6]+1]*reg195; reg390=vectors[0][indices[6]+1]*reg390; reg317=vectors[0][indices[6]+1]*reg317; reg255=reg178+reg255; reg294=reg329+reg294;
    reg334=vectors[0][indices[6]+1]*reg334; reg248=vectors[0][indices[6]+1]*reg248; reg394=reg375+reg394; reg214=reg290+reg214; reg312=vectors[0][indices[6]+1]*reg312;
    reg360=reg366+reg360; reg108=reg302+reg108; reg371=reg368+reg371; reg376=vectors[0][indices[6]+1]*reg376; reg178=reg209*reg87;
    reg369=reg98*reg369; reg342=vectors[0][indices[6]+1]*reg342; reg241=reg408+reg241; reg179=reg113*reg93; reg311=reg98*reg311;
    reg399=reg221+reg399; reg266=ponderation*reg266; reg260=reg98*reg260; reg207=reg148+reg207; reg148=reg135*reg93;
    reg191=reg208*reg87; reg344=vectors[0][indices[6]+1]*reg344; reg258=reg250+reg258; reg180=reg98*reg180; reg193=ponderation*reg193;
    reg265=reg98*reg265; reg188=reg222+reg188; reg202=reg208*reg267; reg221=reg133*reg93; reg222=reg211*reg87;
    reg250=reg112*reg93; reg305=reg164+reg305; reg406=reg98*reg406; reg359=ponderation*reg359; reg405=ponderation*reg405;
    reg164=reg136*reg93; reg263=reg209*reg267; reg290=reg150*reg93; reg299=reg201*reg87; reg224=ponderation*reg224;
    reg318=reg277+reg318; reg277=reg153*reg267; reg302=reg53*reg93; reg329=reg211*reg267; reg349=reg119*reg93;
    reg183=reg361+reg183; reg177=reg98*reg177; reg272=ponderation*reg272; reg162=ponderation*reg162; reg316=reg98*reg316;
    reg264=reg206-reg264; reg378=reg367+reg378; reg244=vectors[0][indices[6]+1]*reg244; reg298=reg341+reg298; reg282=ponderation*reg282;
    reg237=ponderation*reg237; reg358=reg98*reg358; reg377=reg335+reg377; reg206=reg198*reg267; reg335=reg130*reg93;
    reg217=reg225+reg217; reg338=reg346+reg338; reg225=reg115*reg93; reg228=vectors[0][indices[6]+1]*reg228; reg402=reg280+reg402;
    reg280=reg210*reg267; reg289=reg98*reg289; reg268=ponderation*reg268; reg300=reg98*reg300; reg323=reg287+reg323;
    reg354=reg285+reg354; reg274=vectors[0][indices[6]+1]*reg274; reg373=reg310+reg373; reg269=ponderation*reg269; reg196=vectors[0][indices[6]+1]*reg196;
    reg391=reg98*reg391; reg320=reg219+reg320; reg364=reg387-reg364; reg223=reg395+reg223; reg205=reg296+reg205;
    reg219=reg145*reg93; reg285=reg201*reg267; reg370=reg303+reg370; reg220=vectors[0][indices[6]+1]*reg220; reg176=reg350+reg176;
    reg333=reg98*reg333; reg301=ponderation*reg301; reg412=ponderation*reg412; reg401=reg98*reg401; reg306=reg90+reg306;
    reg90=reg144*reg93; reg273=vectors[0][indices[6]+1]*reg273; reg247=reg256+reg247; reg256=reg198*reg87; reg230=reg384+reg230;
    reg261=reg325+reg261; reg187=vectors[0][indices[6]+1]*reg187; reg331=reg157+reg331; reg385=reg98*reg385; reg257=ponderation*reg257;
    reg374=ponderation*reg374; reg388=reg98*reg388; reg389=reg235+reg389; reg227=reg297+reg227; reg283=reg386+reg283;
    reg286=reg362-reg286; reg240=vectors[0][indices[6]+1]*reg240; reg236=reg328+reg236; reg215=reg98*reg215; reg351=ponderation*reg351;
    reg409=ponderation*reg409; reg315=reg98*reg315; reg239=ponderation*reg239; reg397=reg98*reg397; reg253=reg234+reg253;
    reg157=reg123*reg93; reg234=reg204*reg87; reg407=vectors[0][indices[6]+1]*reg407; reg339=reg245+reg339; reg235=reg153*reg87;
    reg245=reg69*reg93; reg203=reg134+reg203; reg352=ponderation*reg352; reg355=ponderation*reg355; reg293=reg98*reg293;
    reg216=reg231-reg216; reg319=vectors[0][indices[6]+1]*reg319; reg304=reg184+reg304; reg267=reg204*reg267; reg134=reg126*reg93;
    reg288=reg314+reg288; reg309=reg181+reg309; reg340=vectors[0][indices[6]+1]*reg340; reg393=reg254-reg393; reg212=reg98*reg212;
    reg249=ponderation*reg249; reg332=reg98*reg332; reg218=reg98*reg218; reg174=reg98*reg174; reg276=ponderation*reg276;
    reg336=reg190+reg336; reg381=vectors[0][indices[6]+1]*reg381; reg87=reg210*reg87; reg93=reg94*reg93; reg233=reg229-reg233;
    reg217=reg372+reg217; reg312=reg214+reg312; reg162=vectors[0][indices[6]+2]*reg162; reg335=reg206+reg335; reg203=reg98*reg203;
    reg207=reg98*reg207; reg377=reg98*reg377; reg318=reg98*reg318; reg358=ponderation*reg358; reg212=ponderation*reg212;
    reg256=reg90+reg256; reg293=ponderation*reg293; reg302=reg277+reg302; reg329=reg349+reg329; reg233=reg98*reg233;
    reg306=reg98*reg306; reg304=reg98*reg304; reg315=ponderation*reg315; reg237=vectors[0][indices[6]+2]*reg237; reg195=reg199+reg195;
    reg354=reg271+reg354; reg393=reg98*reg393; reg323=reg98*reg323; reg397=ponderation*reg397; reg300=ponderation*reg300;
    reg251=reg330+reg251; reg253=reg98*reg253; reg260=ponderation*reg260; reg390=reg394+reg390; reg405=vectors[0][indices[6]+2]*reg405;
    reg299=reg164+reg299; reg289=ponderation*reg289; reg234=reg157+reg234; reg87=reg93+reg87; reg338=reg98*reg338;
    reg332=ponderation*reg332; reg316=ponderation*reg316; reg391=ponderation*reg391; reg412=vectors[0][indices[6]+2]*reg412; reg347=reg308+reg347;
    reg286=reg98*reg286; reg388=ponderation*reg388; reg264=reg98*reg264; reg406=ponderation*reg406; reg389=reg98*reg389;
    reg305=reg98*reg305; reg265=ponderation*reg265; reg227=reg410+reg227; reg222=reg250+reg222; reg221=reg202+reg221;
    reg235=reg245+reg235; reg283=reg403-reg283; reg188=reg98*reg188; reg243=reg378-reg243; reg401=ponderation*reg401;
    reg183=reg98*reg183; reg134=reg267+reg134; reg230=reg343+reg230; reg333=ponderation*reg333; reg193=vectors[0][indices[6]+2]*reg193;
    reg261=reg98*reg261; reg177=ponderation*reg177; reg370=reg98*reg370; reg218=ponderation*reg218; reg215=ponderation*reg215;
    reg219=reg285-reg219; reg205=reg396+reg205; reg385=ponderation*reg385; reg223=reg98*reg223; reg191=reg148+reg191;
    reg334=reg360+reg334; reg266=vectors[0][indices[6]+2]*reg266; reg276=vectors[0][indices[6]+2]*reg276; reg196=reg320+reg196; reg342=reg241+reg342;
    reg249=vectors[0][indices[6]+2]*reg249; reg355=vectors[0][indices[6]+2]*reg355; reg398=reg399+reg398; reg180=ponderation*reg180; reg178=reg179+reg178;
    reg187=reg331+reg187; reg326=reg98*reg326; reg282=vectors[0][indices[6]+2]*reg282; reg369=ponderation*reg369; reg270=vectors[0][indices[6]+2]*reg270;
    reg220=reg176+reg220; reg364=reg98*reg364; reg307=vectors[0][indices[6]+2]*reg307; reg273=reg247+reg273; reg216=reg319+reg216;
    reg351=vectors[0][indices[6]+2]*reg351; reg272=vectors[0][indices[6]+2]*reg272; reg340=reg309+reg340; reg174=ponderation*reg174; reg288=reg98*reg288;
    reg290=reg263+reg290; reg317=reg255+reg317; reg374=vectors[0][indices[6]+2]*reg374; reg381=reg336+reg381; reg257=vectors[0][indices[6]+2]*reg257;
    reg268=vectors[0][indices[6]+2]*reg268; reg311=ponderation*reg311; reg248=reg294+reg248; reg284=reg98*reg284; reg240=reg236+reg240;
    reg90=vectors[0][indices[6]+2]*reg409; reg108=reg172+reg108; reg359=vectors[0][indices[6]+2]*reg359; reg244=reg298+reg244; reg269=vectors[0][indices[6]+2]*reg269;
    reg344=reg258+reg344; reg407=reg339+reg407; reg239=vectors[0][indices[6]+2]*reg239; reg274=reg373+reg274; reg224=vectors[0][indices[6]+2]*reg224;
    reg301=vectors[0][indices[6]+2]*reg301; reg376=reg371+reg376; reg352=vectors[0][indices[6]+2]*reg352; reg228=reg402+reg228; reg280=reg225-reg280;
    reg193=reg390+reg193; reg239=reg407+reg239; reg388=vectors[0][indices[7]+0]*reg388; reg283=reg98*reg283; reg374=reg317+reg374;
    reg323=ponderation*reg323; reg235=reg98*reg235; reg289=vectors[0][indices[7]+0]*reg289; reg269=reg344+reg269; reg207=ponderation*reg207;
    reg253=ponderation*reg253; reg217=reg98*reg217; reg191=reg98*reg191; reg299=reg98*reg299; reg227=reg98*reg227;
    reg222=reg98*reg222; reg389=ponderation*reg389; reg329=reg98*reg329; reg385=vectors[0][indices[7]+0]*reg385; reg174=vectors[0][indices[7]+0]*reg174;
    reg276=reg196+reg276; reg188=ponderation*reg188; reg257=reg381+reg257; reg233=ponderation*reg233; reg237=reg195+reg237;
    reg218=vectors[0][indices[7]+0]*reg218; reg224=reg274+reg224; reg284=ponderation*reg284; reg300=vectors[0][indices[7]+0]*reg300; reg183=ponderation*reg183;
    reg290=reg98*reg290; reg358=vectors[0][indices[7]+0]*reg358; reg302=reg98*reg302; reg318=ponderation*reg318; reg397=vectors[0][indices[7]+0]*reg397;
    reg108=reg98*reg108; reg264=ponderation*reg264; reg406=vectors[0][indices[7]+0]*reg406; reg359=reg244+reg359; reg338=ponderation*reg338;
    reg243=reg98*reg243; reg87=reg98*reg87; reg268=reg248+reg268; reg315=vectors[0][indices[7]+0]*reg315; reg286=ponderation*reg286;
    reg90=reg240-reg90; reg265=vectors[0][indices[7]+0]*reg265; reg405=reg251+reg405; reg261=ponderation*reg261; reg223=ponderation*reg223;
    reg282=reg187+reg282; reg391=vectors[0][indices[7]+0]*reg391; reg205=reg98*reg205; reg180=vectors[0][indices[7]+0]*reg180; reg230=reg98*reg230;
    reg219=reg98*reg219; reg369=vectors[0][indices[7]+0]*reg369; reg270=reg220+reg270; reg370=ponderation*reg370; reg134=reg98*reg134;
    reg177=vectors[0][indices[7]+0]*reg177; reg272=reg340+reg272; reg304=ponderation*reg304; reg311=vectors[0][indices[7]+0]*reg311; reg307=reg273+reg307;
    reg377=ponderation*reg377; reg306=ponderation*reg306; reg352=reg228+reg352; reg364=ponderation*reg364; reg332=vectors[0][indices[7]+0]*reg332;
    reg256=reg98*reg256; reg93=vectors[0][indices[7]+0]*reg215; reg351=reg216+reg351; reg335=reg98*reg335; reg221=reg98*reg221;
    reg293=vectors[0][indices[7]+0]*reg293; reg333=vectors[0][indices[7]+0]*reg333; reg249=reg342+reg249; reg212=vectors[0][indices[7]+0]*reg212; reg305=ponderation*reg305;
    reg355=reg398+reg355; reg301=reg376+reg301; reg162=reg312+reg162; reg412=reg347+reg412; reg316=vectors[0][indices[7]+0]*reg316;
    reg401=vectors[0][indices[7]+0]*reg401; reg178=reg98*reg178; reg288=ponderation*reg288; reg234=reg98*reg234; reg393=ponderation*reg393;
    reg354=reg98*reg354; reg280=reg98*reg280; reg260=vectors[0][indices[7]+0]*reg260; reg266=reg334+reg266; reg326=ponderation*reg326;
    reg203=ponderation*reg203; reg183=vectors[0][indices[7]+1]*reg183; reg177=reg272+reg177; reg377=vectors[0][indices[7]+1]*reg377; reg230=ponderation*reg230;
    reg364=vectors[0][indices[7]+1]*reg364; reg180=reg282+reg180; reg134=ponderation*reg134; reg286=vectors[0][indices[7]+1]*reg286; reg93=reg351-reg93;
    reg234=ponderation*reg234; reg323=vectors[0][indices[7]+1]*reg323; reg233=vectors[0][indices[7]+1]*reg233; reg306=vectors[0][indices[7]+1]*reg306; reg401=reg412+reg401;
    reg293=reg355+reg293; reg304=vectors[0][indices[7]+1]*reg304; reg227=ponderation*reg227; reg300=reg268+reg300; reg235=ponderation*reg235;
    reg283=ponderation*reg283; reg90=reg315+reg90; reg108=ponderation*reg108; reg397=reg239+reg397; reg253=vectors[0][indices[7]+1]*reg253;
    reg261=vectors[0][indices[7]+1]*reg261; reg385=reg257+reg385; reg358=reg237+reg358; reg338=vectors[0][indices[7]+1]*reg338; reg289=reg269+reg289;
    reg335=ponderation*reg335; reg191=ponderation*reg191; reg222=ponderation*reg222; reg316=reg162+reg316; reg264=vectors[0][indices[7]+1]*reg264;
    reg288=vectors[0][indices[7]+1]*reg288; reg174=reg276+reg174; reg221=ponderation*reg221; reg212=reg249+reg212; reg393=vectors[0][indices[7]+1]*reg393;
    reg178=ponderation*reg178; reg87=ponderation*reg87; reg280=ponderation*reg280; reg332=reg352+reg332; reg318=vectors[0][indices[7]+1]*reg318;
    reg207=vectors[0][indices[7]+1]*reg207; reg260=reg266+reg260; reg256=ponderation*reg256; reg326=vectors[0][indices[7]+1]*reg326; reg205=ponderation*reg205;
    reg219=ponderation*reg219; reg369=reg270+reg369; reg284=vectors[0][indices[7]+1]*reg284; reg311=reg307+reg311; reg389=vectors[0][indices[7]+1]*reg389;
    reg203=vectors[0][indices[7]+1]*reg203; reg388=reg374+reg388; reg302=ponderation*reg302; reg218=reg224+reg218; reg329=ponderation*reg329;
    reg290=ponderation*reg290; reg354=ponderation*reg354; reg299=ponderation*reg299; reg391=reg405+reg391; reg223=vectors[0][indices[7]+1]*reg223;
    reg305=vectors[0][indices[7]+1]*reg305; reg406=reg359+reg406; reg370=vectors[0][indices[7]+1]*reg370; reg188=vectors[0][indices[7]+1]*reg188; reg265=reg193+reg265;
    reg333=reg301+reg333; reg243=ponderation*reg243; reg217=ponderation*reg217; reg323=reg300+reg323; reg280=vectors[0][indices[7]+2]*reg280;
    reg377=reg358+reg377; reg335=vectors[0][indices[7]+2]*reg335; reg302=vectors[0][indices[7]+2]*reg302; reg318=reg332+reg318; reg203=reg218+reg203;
    reg243=vectors[0][indices[7]+2]*reg243; reg264=reg316+reg264; reg234=vectors[0][indices[7]+2]*reg234; reg93=reg286+reg93; reg283=vectors[0][indices[7]+2]*reg283;
    reg253=reg397+reg253; reg235=vectors[0][indices[7]+2]*reg235; reg219=vectors[0][indices[7]+2]*reg219; reg370=reg333+reg370; reg354=vectors[0][indices[7]+2]*reg354;
    reg205=vectors[0][indices[7]+2]*reg205; reg223=reg391+reg223; reg183=reg177+reg183; reg329=vectors[0][indices[7]+2]*reg329; reg389=reg388+reg389;
    reg227=vectors[0][indices[7]+2]*reg227; reg222=vectors[0][indices[7]+2]*reg222; reg261=reg385+reg261; reg230=vectors[0][indices[7]+2]*reg230; reg305=reg406+reg305;
    reg221=vectors[0][indices[7]+2]*reg221; reg188=reg265+reg188; reg217=vectors[0][indices[7]+2]*reg217; reg338=reg289+reg338; reg290=vectors[0][indices[7]+2]*reg290;
    reg364=reg180+reg364; reg284=reg311+reg284; reg108=vectors[0][indices[7]+2]*reg108; reg326=reg369+reg326; reg178=vectors[0][indices[7]+2]*reg178;
    reg148=vectors[0][indices[7]+2]*reg87; reg233=reg90+reg233; reg207=reg260+reg207; reg191=vectors[0][indices[7]+2]*reg191; reg256=vectors[0][indices[7]+2]*reg256;
    reg306=reg401+reg306; reg299=vectors[0][indices[7]+2]*reg299; reg393=reg212+reg393; reg288=reg174+reg288; reg304=reg293+reg304;
    reg134=vectors[0][indices[7]+2]*reg134; reg354=reg323+reg354; reg205=reg223+reg205; reg221=reg188+reg221; reg191=reg207+reg191;
    reg243=reg264+reg243; reg235=reg203+reg235; reg219=reg370+reg219; reg302=reg318+reg302; reg108=reg284+reg108;
    reg178=reg326+reg178; reg299=reg393+reg299; reg290=reg288+reg290; reg217=reg338+reg217; reg222=reg305+reg222;
    reg227=reg389+reg227; reg329=reg183+reg329; reg230=reg261+reg230; reg134=reg304+reg134; reg148=reg233-reg148;
    reg280=reg364+reg280; reg283=reg93+reg283; reg234=reg253+reg234; reg335=reg377+reg335; reg256=reg306+reg256;
    sollicitation[indices[7]+2]+=-reg354; sollicitation[indices[7]+1]+=-reg335; sollicitation[indices[7]+0]+=-reg256; sollicitation[indices[6]+2]+=-reg205; sollicitation[indices[6]+1]+=-reg221;
    sollicitation[indices[6]+0]+=-reg191; sollicitation[indices[5]+2]+=-reg243; sollicitation[indices[5]+1]+=-reg219; sollicitation[indices[5]+0]+=-reg299; sollicitation[indices[4]+2]+=-reg227;
    sollicitation[indices[4]+1]+=-reg134; sollicitation[indices[4]+0]+=-reg234; sollicitation[indices[3]+2]+=-reg283; sollicitation[indices[3]+1]+=-reg280; sollicitation[indices[3]+0]+=-reg148;
    sollicitation[indices[0]+1]+=-reg302; sollicitation[indices[0]+0]+=-reg235; sollicitation[indices[2]+2]+=-reg230; sollicitation[indices[2]+1]+=-reg329; sollicitation[indices[2]+0]+=-reg222;
    sollicitation[indices[1]+2]+=-reg217; sollicitation[indices[0]+2]+=-reg108; sollicitation[indices[1]+0]+=-reg178; sollicitation[indices[1]+1]+=-reg290;
  #undef PNODE
}
// 
#ifndef ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
#define ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz>
void add_nodal_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const typename TM::TNode &node,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) node
  /* (*f.m).poisson_ratio */  #undef PNODE
}
#endif
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}

#ifndef elasticity_dep_read_material_to_mesh
#define elasticity_dep_read_material_to_mesh
template<class TM, class T, bool wont_add_nz>
void read_material_to_mesh_(const XmlNode &n, Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f){ 
    if(n.has_attribute("f_vol"))  
        n.get_attribute("f_vol", f.m->f_vol ); 
    else  
        std::cerr << "Warning using default value of f_vol : " << f.m->f_vol << std::endl; 

    if(n.has_attribute("lim_cond_0"))  
        n.get_attribute("lim_cond_0", f.m->lim_cond_0 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_0 : " << f.m->lim_cond_0 << std::endl; 

    if(n.has_attribute("lim_cond_1"))  
        n.get_attribute("lim_cond_1", f.m->lim_cond_1 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_1 : " << f.m->lim_cond_1 << std::endl; 

    if(n.has_attribute("poisson_ratio"))  
        n.get_attribute("poisson_ratio", f.m->poisson_ratio ); 
    else  
        std::cerr << "Warning using default value of poisson_ratio : " << f.m->poisson_ratio << std::endl; 

    if(n.has_attribute("elastic_modulus"))  
        n.get_attribute("elastic_modulus", f.m->elastic_modulus ); 
    else  
        std::cerr << "Warning using default value of elastic_modulus : " << f.m->elastic_modulus << std::endl; 

    if(n.has_attribute("density"))  
        n.get_attribute("density", f.m->density ); 
    else  
        std::cerr << "Warning using default value of density : " << f.m->density << std::endl; 

  };
#endif // elasticity_dep_read_material_to_mesh
} // namespace LMT


#endif // PROBLEM_pb_dep_cor
