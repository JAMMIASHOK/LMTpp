#ifndef PROBLEM_pb_dep_cor
#define PROBLEM_pb_dep_cor

#include "formulation/formulation.h"

#ifndef Mesh_carac_pb_dep_cor_HEADER
#define Mesh_carac_pb_dep_cor_HEADER
#include "mesh/displayparaview.h"
#include "mesh/triangle.h"
#include "mesh/quad.h"
#include "mesh/tetra.h"
#include "mesh/hexa.h"
namespace LMT {

template<class TP,unsigned dim> struct Mesh_carac_pb_dep_cor {};
#ifndef IFNDEF_p_DM
#define IFNDEF_p_DM
    struct p_DM { static std::string name() { return "p"; } };
#endif // IFNDEF_p_DM

#ifndef IFNDEF_dep_sv_DM
#define IFNDEF_dep_sv_DM
    struct dep_sv_DM { static std::string name() { return "dep_sv"; } };
#endif // IFNDEF_dep_sv_DM

#ifndef IFNDEF_pos_DM
#define IFNDEF_pos_DM
    struct pos_DM { static std::string name() { return "pos"; } };
#endif // IFNDEF_pos_DM

#ifndef IFNDEF_dep_imp_coef_0_DM
#define IFNDEF_dep_imp_coef_0_DM
    struct dep_imp_coef_0_DM { static std::string name() { return "dep_imp_coef_0"; } };
#endif // IFNDEF_dep_imp_coef_0_DM

#ifndef IFNDEF_f_nodal_DM
#define IFNDEF_f_nodal_DM
    struct f_nodal_DM { static std::string name() { return "f_nodal"; } };
#endif // IFNDEF_f_nodal_DM

#ifndef IFNDEF_proute_DM
#define IFNDEF_proute_DM
    struct proute_DM { static std::string name() { return "proute"; } };
#endif // IFNDEF_proute_DM

#ifndef IFNDEF_f_vol_DM
#define IFNDEF_f_vol_DM
    struct f_vol_DM { static std::string name() { return "f_vol"; } };
#endif // IFNDEF_f_vol_DM

#ifndef IFNDEF_temperature_DM
#define IFNDEF_temperature_DM
    struct temperature_DM { static std::string name() { return "temperature"; } };
#endif // IFNDEF_temperature_DM

#ifndef IFNDEF_tr_epsilon_DM
#define IFNDEF_tr_epsilon_DM
    struct tr_epsilon_DM { static std::string name() { return "tr_epsilon"; } };
#endif // IFNDEF_tr_epsilon_DM

#ifndef IFNDEF_dep_imp_val_0_0_DM
#define IFNDEF_dep_imp_val_0_0_DM
    struct dep_imp_val_0_0_DM { static std::string name() { return "dep_imp_val_0_0"; } };
#endif // IFNDEF_dep_imp_val_0_0_DM

#ifndef IFNDEF_lum_DM
#define IFNDEF_lum_DM
    struct lum_DM { static std::string name() { return "lum"; } };
#endif // IFNDEF_lum_DM

#ifndef IFNDEF_dep_imp_val_0_1_DM
#define IFNDEF_dep_imp_val_0_1_DM
    struct dep_imp_val_0_1_DM { static std::string name() { return "dep_imp_val_0_1"; } };
#endif // IFNDEF_dep_imp_val_0_1_DM

#ifndef IFNDEF_normal_DM
#define IFNDEF_normal_DM
    struct normal_DM { static std::string name() { return "normal"; } };
#endif // IFNDEF_normal_DM

#ifndef IFNDEF_epsilon_DM
#define IFNDEF_epsilon_DM
    struct epsilon_DM { static std::string name() { return "epsilon"; } };
#endif // IFNDEF_epsilon_DM

#ifndef IFNDEF_lim_cond_0_DM
#define IFNDEF_lim_cond_0_DM
    struct lim_cond_0_DM { static std::string name() { return "lim_cond_0"; } };
#endif // IFNDEF_lim_cond_0_DM

#ifndef IFNDEF_lim_cond_1_DM
#define IFNDEF_lim_cond_1_DM
    struct lim_cond_1_DM { static std::string name() { return "lim_cond_1"; } };
#endif // IFNDEF_lim_cond_1_DM

#ifndef IFNDEF_poisson_ratio_DM
#define IFNDEF_poisson_ratio_DM
    struct poisson_ratio_DM { static std::string name() { return "poisson_ratio"; } };
#endif // IFNDEF_poisson_ratio_DM

#ifndef IFNDEF_eps_11_DM
#define IFNDEF_eps_11_DM
    struct eps_11_DM { static std::string name() { return "eps_11"; } };
#endif // IFNDEF_eps_11_DM

#ifndef IFNDEF_elastic_modulus_DM
#define IFNDEF_elastic_modulus_DM
    struct elastic_modulus_DM { static std::string name() { return "elastic_modulus"; } };
#endif // IFNDEF_elastic_modulus_DM

#ifndef IFNDEF_pouet_DM
#define IFNDEF_pouet_DM
    struct pouet_DM { static std::string name() { return "pouet"; } };
#endif // IFNDEF_pouet_DM

#ifndef IFNDEF_density_DM
#define IFNDEF_density_DM
    struct density_DM { static std::string name() { return "density"; } };
#endif // IFNDEF_density_DM

#ifndef IFNDEF_dep_DM
#define IFNDEF_dep_DM
    struct dep_DM { static std::string name() { return "dep"; } };
#endif // IFNDEF_dep_DM

#ifndef IFNDEF_is_on_skin_DM
#define IFNDEF_is_on_skin_DM
    struct is_on_skin_DM { static std::string name() { return "is_on_skin"; } };
#endif // IFNDEF_is_on_skin_DM

#ifndef IFNDEF_f_surf_DM
#define IFNDEF_f_surf_DM
    struct f_surf_DM { static std::string name() { return "f_surf"; } };
#endif // IFNDEF_f_surf_DM

#ifndef IFNDEF_sigma_DM
#define IFNDEF_sigma_DM
    struct sigma_DM { static std::string name() { return "sigma"; } };
#endif // IFNDEF_sigma_DM

template<class TP>
struct Mesh_carac_pb_dep_cor<TP,2> {
    typedef TP Tpos;
    static const unsigned dim = 2;
    typedef Vec<TP,2> Pvec;
    struct NodalStaticData {
        typedef Tpos T1;
        typedef Vec<Tpos,2> T0;
        NodalStaticData():dep_sv(0.0),dep_imp_coef_0(0),f_nodal(0.0,0.0),temperature(0.0),dep_imp_val_0_0(0),lum(1.0),dep_imp_val_0_1(0),normal(0.0),dep(0.0),is_on_skin(0) {}
        CARACDMEXTNAME( 0, T0, dep_sv, "m" );
        CARACDMEXTNAME( 1, T0, pos, "m" );
        CARACDMEXTNAME( 2, T1, dep_imp_coef_0, "1" );
        CARACDMEXTNAME( 3, T0, f_nodal, "N" );
        CARACDMEXTNAME( 4, T1, temperature, "K" );
        CARACDMEXTNAME( 5, T0, dep_imp_val_0_0, "1" );
        CARACDMEXTNAME( 6, T1, lum, "1" );
        CARACDMEXTNAME( 7, T0, dep_imp_val_0_1, "1" );
        CARACDMEXTNAME( 8, T0, normal, "1" );
        CARACDMEXTNAME( 9, T0, dep, "m" );
        CARACDMEXTNAME( 10, T1, is_on_skin, "" );
        static const unsigned nb_params = 11;
        void dm_data_set_field( const std::string field_name, Tpos value ) {
            if ( field_name == "dep_sv" ) { dep_sv = value; return; }
            if ( field_name == "pos" ) { pos = value; return; }
            if ( field_name == "dep_imp_coef_0" ) { dep_imp_coef_0 = value; return; }
            if ( field_name == "f_nodal" ) { f_nodal = value; return; }
            if ( field_name == "temperature" ) { temperature = value; return; }
            if ( field_name == "dep_imp_val_0_0" ) { dep_imp_val_0_0 = value; return; }
            if ( field_name == "lum" ) { lum = value; return; }
            if ( field_name == "dep_imp_val_0_1" ) { dep_imp_val_0_1 = value; return; }
            if ( field_name == "normal" ) { normal = value; return; }
            if ( field_name == "dep" ) { dep = value; return; }
            if ( field_name == "is_on_skin" ) { is_on_skin = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
            if ( field_name == "dep_sv" ) { dep_sv = value; return; }
            if ( field_name == "pos" ) { pos = value; return; }
            if ( field_name == "f_nodal" ) { f_nodal = value; return; }
            if ( field_name == "dep_imp_val_0_0" ) { dep_imp_val_0_0 = value; return; }
            if ( field_name == "dep_imp_val_0_1" ) { dep_imp_val_0_1 = value; return; }
            if ( field_name == "normal" ) { normal = value; return; }
            if ( field_name == "dep" ) { dep = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
            if ( field_name == "dep_imp_coef_0" ) { return dep_imp_coef_0; }
            if ( field_name == "temperature" ) { return temperature; }
            if ( field_name == "lum" ) { return lum; }
            if ( field_name == "is_on_skin" ) { return is_on_skin; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Tpos(0);
        }
        Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,1>();
        }
        Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
            if ( field_name == "dep_sv" ) { return dep_sv; }
            if ( field_name == "pos" ) { return pos; }
            if ( field_name == "f_nodal" ) { return f_nodal; }
            if ( field_name == "dep_imp_val_0_0" ) { return dep_imp_val_0_0; }
            if ( field_name == "dep_imp_val_0_1" ) { return dep_imp_val_0_1; }
            if ( field_name == "normal" ) { return normal; }
            if ( field_name == "dep" ) { return dep; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,2>();
        }
        Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,3>();
        }
        Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,4>();
        }
        Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,5>();
        }
        Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,6>();
        }
        Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<1,1> >();
        }
        Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<2,2> >();
        }
        Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<3,3> >();
        }
        Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<4,4> >();
        }
        Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<5,5> >();
        }
        Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<6,6> >();
        }
        Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<1> >();
        }
        Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<2> >();
        }
        Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<3> >();
        }
    };
    struct GlobalStaticData {
        typedef Tpos T1;
        typedef Vec<Tpos,2> T0;
        GlobalStaticData():f_vol(0.0,0.0),lim_cond_0(1),lim_cond_1(0),poisson_ratio(0.33),elastic_modulus(1),density(7800) {}
        CARACDMEXTNAME( 0, T0, f_vol, "N/m^3" );
        CARACDMEXTNAME( 1, T1, lim_cond_0, "1" );
        CARACDMEXTNAME( 2, T1, lim_cond_1, "1" );
        CARACDMEXTNAME( 3, T1, poisson_ratio, "1" );
        CARACDMEXTNAME( 4, T1, elastic_modulus, "N/m^2" );
        CARACDMEXTNAME( 5, T1, density, "kg/m^3" );
        static const unsigned nb_params = 6;
        void dm_data_set_field( const std::string field_name, Tpos value ) {
            if ( field_name == "f_vol" ) { f_vol = value; return; }
            if ( field_name == "lim_cond_0" ) { lim_cond_0 = value; return; }
            if ( field_name == "lim_cond_1" ) { lim_cond_1 = value; return; }
            if ( field_name == "poisson_ratio" ) { poisson_ratio = value; return; }
            if ( field_name == "elastic_modulus" ) { elastic_modulus = value; return; }
            if ( field_name == "density" ) { density = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
            if ( field_name == "f_vol" ) { f_vol = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
            if ( field_name == "lim_cond_0" ) { return lim_cond_0; }
            if ( field_name == "lim_cond_1" ) { return lim_cond_1; }
            if ( field_name == "poisson_ratio" ) { return poisson_ratio; }
            if ( field_name == "elastic_modulus" ) { return elastic_modulus; }
            if ( field_name == "density" ) { return density; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Tpos(0);
        }
        Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,1>();
        }
        Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
            if ( field_name == "f_vol" ) { return f_vol; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,2>();
        }
        Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,3>();
        }
        Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,4>();
        }
        Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,5>();
        }
        Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,6>();
        }
        Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<1,1> >();
        }
        Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<2,2> >();
        }
        Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<3,3> >();
        }
        Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<4,4> >();
        }
        Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<5,5> >();
        }
        Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<6,6> >();
        }
        Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<1> >();
        }
        Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<2> >();
        }
        Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<3> >();
        }
    };
    typedef Node<dim,Tpos,NodalStaticData> TNode;
    typedef ElementAncestor<TNode> EA;
    template<unsigned nvi_to_subs,unsigned skin,unsigned num_sub_element,unsigned inner=0> struct ElementChoice { typedef void NE; typedef DefaultBehavior BE; typedef VoidDMSet TData; };
    template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,0,inner> { typedef Triangle NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Vec<Tpos,1> T1;
            typedef Vec<Vec<Tpos,3>,1> T2;
            typedef Tpos T3;
            typedef Vec<Mat<Tpos,Gen<3,3> >,2> T0;
            TData():proute(0),tr_epsilon(0),epsilon(0),eps_11(0),pouet(0),sigma(0) {}
            CARACDMEXTNAME( 0, T0, proute, "K" );
            CARACDMEXTNAME( 1, T1, tr_epsilon, "1" );
            CARACDMEXTNAME( 2, T2, epsilon, "1" );
            CARACDMEXTNAME( 3, T1, eps_11, "1" );
            CARACDMEXTNAME( 4, T3, pouet, "1" );
            CARACDMEXTNAME( 5, T2, sigma, "N/m^2" );
            static const unsigned nb_params = 6;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "tr_epsilon" ) { tr_epsilon[0] = value; } // hum
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "eps_11" ) { eps_11[0] = value; } // hum
                if ( field_name == "pouet" ) { pouet = value; return; }
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                if ( field_name == "proute" ) { proute[0] = value; } // hum
                if ( field_name == "proute" ) { proute[1] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "tr_epsilon" ) { return tr_epsilon[0]; } // hum
                if ( field_name == "eps_11" ) { return eps_11[0]; } // hum
                if ( field_name == "pouet" ) { return pouet; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                if ( field_name == "epsilon" ) { return epsilon[0]; } // hum
                if ( field_name == "sigma" ) { return sigma[0]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                if ( field_name == "proute" ) { return proute[0]; } // hum
                if ( field_name == "proute" ) { return proute[1]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,1,inner> { typedef Quad NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Vec<Vec<Tpos,3>,1> T2;
            typedef Vec<Tpos,1> T1;
            typedef Vec<Mat<Tpos,Gen<3,3> >,4> T0;
            typedef Tpos T3;
            TData():proute(0),tr_epsilon(0),epsilon(0),eps_11(0),pouet(0),sigma(0) {}
            CARACDMEXTNAME( 0, T0, proute, "K" );
            CARACDMEXTNAME( 1, T1, tr_epsilon, "1" );
            CARACDMEXTNAME( 2, T2, epsilon, "1" );
            CARACDMEXTNAME( 3, T1, eps_11, "1" );
            CARACDMEXTNAME( 4, T3, pouet, "1" );
            CARACDMEXTNAME( 5, T2, sigma, "N/m^2" );
            static const unsigned nb_params = 6;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "tr_epsilon" ) { tr_epsilon[0] = value; } // hum
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "eps_11" ) { eps_11[0] = value; } // hum
                if ( field_name == "pouet" ) { pouet = value; return; }
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                if ( field_name == "proute" ) { proute[0] = value; } // hum
                if ( field_name == "proute" ) { proute[1] = value; } // hum
                if ( field_name == "proute" ) { proute[2] = value; } // hum
                if ( field_name == "proute" ) { proute[3] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "tr_epsilon" ) { return tr_epsilon[0]; } // hum
                if ( field_name == "eps_11" ) { return eps_11[0]; } // hum
                if ( field_name == "pouet" ) { return pouet; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                if ( field_name == "epsilon" ) { return epsilon[0]; } // hum
                if ( field_name == "sigma" ) { return sigma[0]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                if ( field_name == "proute" ) { return proute[0]; } // hum
                if ( field_name == "proute" ) { return proute[1]; } // hum
                if ( field_name == "proute" ) { return proute[2]; } // hum
                if ( field_name == "proute" ) { return proute[3]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<1,skin,0,inner> { typedef Bar NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Tpos T0;
            typedef Vec<Tpos,2> T1;
            TData():p(0.0),f_surf(0.0,0.0) {}
            CARACDMEXTNAME( 0, T0, p, "N/m^2" );
            CARACDMEXTNAME( 1, T1, f_surf, "N/m^2" );
            static const unsigned nb_params = 2;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "p" ) { p = value; return; }
                if ( field_name == "f_surf" ) { f_surf = value; return; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                if ( field_name == "f_surf" ) { f_surf = value; return; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "p" ) { return p; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                if ( field_name == "f_surf" ) { return f_surf; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<2,skin,0,inner> { typedef NodalElement NE; typedef DefaultBehavior BE; typedef VoidDMSet TData;    };
};
#ifndef IFNDEF_p_DM
#define IFNDEF_p_DM
    struct p_DM { static std::string name() { return "p"; } };
#endif // IFNDEF_p_DM

#ifndef IFNDEF_dep_sv_DM
#define IFNDEF_dep_sv_DM
    struct dep_sv_DM { static std::string name() { return "dep_sv"; } };
#endif // IFNDEF_dep_sv_DM

#ifndef IFNDEF_pos_DM
#define IFNDEF_pos_DM
    struct pos_DM { static std::string name() { return "pos"; } };
#endif // IFNDEF_pos_DM

#ifndef IFNDEF_dep_imp_coef_0_DM
#define IFNDEF_dep_imp_coef_0_DM
    struct dep_imp_coef_0_DM { static std::string name() { return "dep_imp_coef_0"; } };
#endif // IFNDEF_dep_imp_coef_0_DM

#ifndef IFNDEF_f_nodal_DM
#define IFNDEF_f_nodal_DM
    struct f_nodal_DM { static std::string name() { return "f_nodal"; } };
#endif // IFNDEF_f_nodal_DM

#ifndef IFNDEF_proute_DM
#define IFNDEF_proute_DM
    struct proute_DM { static std::string name() { return "proute"; } };
#endif // IFNDEF_proute_DM

#ifndef IFNDEF_f_vol_DM
#define IFNDEF_f_vol_DM
    struct f_vol_DM { static std::string name() { return "f_vol"; } };
#endif // IFNDEF_f_vol_DM

#ifndef IFNDEF_temperature_DM
#define IFNDEF_temperature_DM
    struct temperature_DM { static std::string name() { return "temperature"; } };
#endif // IFNDEF_temperature_DM

#ifndef IFNDEF_tr_epsilon_DM
#define IFNDEF_tr_epsilon_DM
    struct tr_epsilon_DM { static std::string name() { return "tr_epsilon"; } };
#endif // IFNDEF_tr_epsilon_DM

#ifndef IFNDEF_dep_imp_val_0_0_DM
#define IFNDEF_dep_imp_val_0_0_DM
    struct dep_imp_val_0_0_DM { static std::string name() { return "dep_imp_val_0_0"; } };
#endif // IFNDEF_dep_imp_val_0_0_DM

#ifndef IFNDEF_lum_DM
#define IFNDEF_lum_DM
    struct lum_DM { static std::string name() { return "lum"; } };
#endif // IFNDEF_lum_DM

#ifndef IFNDEF_dep_imp_val_0_1_DM
#define IFNDEF_dep_imp_val_0_1_DM
    struct dep_imp_val_0_1_DM { static std::string name() { return "dep_imp_val_0_1"; } };
#endif // IFNDEF_dep_imp_val_0_1_DM

#ifndef IFNDEF_normal_DM
#define IFNDEF_normal_DM
    struct normal_DM { static std::string name() { return "normal"; } };
#endif // IFNDEF_normal_DM

#ifndef IFNDEF_epsilon_DM
#define IFNDEF_epsilon_DM
    struct epsilon_DM { static std::string name() { return "epsilon"; } };
#endif // IFNDEF_epsilon_DM

#ifndef IFNDEF_lim_cond_0_DM
#define IFNDEF_lim_cond_0_DM
    struct lim_cond_0_DM { static std::string name() { return "lim_cond_0"; } };
#endif // IFNDEF_lim_cond_0_DM

#ifndef IFNDEF_lim_cond_1_DM
#define IFNDEF_lim_cond_1_DM
    struct lim_cond_1_DM { static std::string name() { return "lim_cond_1"; } };
#endif // IFNDEF_lim_cond_1_DM

#ifndef IFNDEF_poisson_ratio_DM
#define IFNDEF_poisson_ratio_DM
    struct poisson_ratio_DM { static std::string name() { return "poisson_ratio"; } };
#endif // IFNDEF_poisson_ratio_DM

#ifndef IFNDEF_eps_11_DM
#define IFNDEF_eps_11_DM
    struct eps_11_DM { static std::string name() { return "eps_11"; } };
#endif // IFNDEF_eps_11_DM

#ifndef IFNDEF_elastic_modulus_DM
#define IFNDEF_elastic_modulus_DM
    struct elastic_modulus_DM { static std::string name() { return "elastic_modulus"; } };
#endif // IFNDEF_elastic_modulus_DM

#ifndef IFNDEF_pouet_DM
#define IFNDEF_pouet_DM
    struct pouet_DM { static std::string name() { return "pouet"; } };
#endif // IFNDEF_pouet_DM

#ifndef IFNDEF_density_DM
#define IFNDEF_density_DM
    struct density_DM { static std::string name() { return "density"; } };
#endif // IFNDEF_density_DM

#ifndef IFNDEF_dep_DM
#define IFNDEF_dep_DM
    struct dep_DM { static std::string name() { return "dep"; } };
#endif // IFNDEF_dep_DM

#ifndef IFNDEF_is_on_skin_DM
#define IFNDEF_is_on_skin_DM
    struct is_on_skin_DM { static std::string name() { return "is_on_skin"; } };
#endif // IFNDEF_is_on_skin_DM

#ifndef IFNDEF_f_surf_DM
#define IFNDEF_f_surf_DM
    struct f_surf_DM { static std::string name() { return "f_surf"; } };
#endif // IFNDEF_f_surf_DM

#ifndef IFNDEF_sigma_DM
#define IFNDEF_sigma_DM
    struct sigma_DM { static std::string name() { return "sigma"; } };
#endif // IFNDEF_sigma_DM

template<class TP>
struct Mesh_carac_pb_dep_cor<TP,3> {
    typedef TP Tpos;
    static const unsigned dim = 3;
    typedef Vec<TP,3> Pvec;
    struct NodalStaticData {
        typedef Vec<Tpos,3> T0;
        typedef Tpos T1;
        NodalStaticData():dep_sv(0.0),dep_imp_coef_0(0),f_nodal(0.0,0.0,0.0),temperature(0.0),dep_imp_val_0_0(0),lum(1.0),dep_imp_val_0_1(0),normal(0.0),dep(0.0),is_on_skin(0) {}
        CARACDMEXTNAME( 0, T0, dep_sv, "m" );
        CARACDMEXTNAME( 1, T0, pos, "m" );
        CARACDMEXTNAME( 2, T1, dep_imp_coef_0, "1" );
        CARACDMEXTNAME( 3, T0, f_nodal, "N" );
        CARACDMEXTNAME( 4, T1, temperature, "K" );
        CARACDMEXTNAME( 5, T0, dep_imp_val_0_0, "1" );
        CARACDMEXTNAME( 6, T1, lum, "1" );
        CARACDMEXTNAME( 7, T0, dep_imp_val_0_1, "1" );
        CARACDMEXTNAME( 8, T0, normal, "1" );
        CARACDMEXTNAME( 9, T0, dep, "m" );
        CARACDMEXTNAME( 10, T1, is_on_skin, "" );
        static const unsigned nb_params = 11;
        void dm_data_set_field( const std::string field_name, Tpos value ) {
            if ( field_name == "dep_sv" ) { dep_sv = value; return; }
            if ( field_name == "pos" ) { pos = value; return; }
            if ( field_name == "dep_imp_coef_0" ) { dep_imp_coef_0 = value; return; }
            if ( field_name == "f_nodal" ) { f_nodal = value; return; }
            if ( field_name == "temperature" ) { temperature = value; return; }
            if ( field_name == "dep_imp_val_0_0" ) { dep_imp_val_0_0 = value; return; }
            if ( field_name == "lum" ) { lum = value; return; }
            if ( field_name == "dep_imp_val_0_1" ) { dep_imp_val_0_1 = value; return; }
            if ( field_name == "normal" ) { normal = value; return; }
            if ( field_name == "dep" ) { dep = value; return; }
            if ( field_name == "is_on_skin" ) { is_on_skin = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
            if ( field_name == "dep_sv" ) { dep_sv = value; return; }
            if ( field_name == "pos" ) { pos = value; return; }
            if ( field_name == "f_nodal" ) { f_nodal = value; return; }
            if ( field_name == "dep_imp_val_0_0" ) { dep_imp_val_0_0 = value; return; }
            if ( field_name == "dep_imp_val_0_1" ) { dep_imp_val_0_1 = value; return; }
            if ( field_name == "normal" ) { normal = value; return; }
            if ( field_name == "dep" ) { dep = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
            if ( field_name == "dep_imp_coef_0" ) { return dep_imp_coef_0; }
            if ( field_name == "temperature" ) { return temperature; }
            if ( field_name == "lum" ) { return lum; }
            if ( field_name == "is_on_skin" ) { return is_on_skin; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Tpos(0);
        }
        Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,1>();
        }
        Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,2>();
        }
        Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
            if ( field_name == "dep_sv" ) { return dep_sv; }
            if ( field_name == "pos" ) { return pos; }
            if ( field_name == "f_nodal" ) { return f_nodal; }
            if ( field_name == "dep_imp_val_0_0" ) { return dep_imp_val_0_0; }
            if ( field_name == "dep_imp_val_0_1" ) { return dep_imp_val_0_1; }
            if ( field_name == "normal" ) { return normal; }
            if ( field_name == "dep" ) { return dep; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,3>();
        }
        Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,4>();
        }
        Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,5>();
        }
        Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,6>();
        }
        Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<1,1> >();
        }
        Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<2,2> >();
        }
        Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<3,3> >();
        }
        Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<4,4> >();
        }
        Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<5,5> >();
        }
        Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<6,6> >();
        }
        Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<1> >();
        }
        Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<2> >();
        }
        Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<3> >();
        }
    };
    struct GlobalStaticData {
        typedef Vec<Tpos,3> T0;
        typedef Tpos T1;
        GlobalStaticData():f_vol(0.0,0.0,0.0),lim_cond_0(1),lim_cond_1(0),poisson_ratio(0.33),elastic_modulus(1),density(7800) {}
        CARACDMEXTNAME( 0, T0, f_vol, "N/m^3" );
        CARACDMEXTNAME( 1, T1, lim_cond_0, "1" );
        CARACDMEXTNAME( 2, T1, lim_cond_1, "1" );
        CARACDMEXTNAME( 3, T1, poisson_ratio, "1" );
        CARACDMEXTNAME( 4, T1, elastic_modulus, "N/m^2" );
        CARACDMEXTNAME( 5, T1, density, "kg/m^3" );
        static const unsigned nb_params = 6;
        void dm_data_set_field( const std::string field_name, Tpos value ) {
            if ( field_name == "f_vol" ) { f_vol = value; return; }
            if ( field_name == "lim_cond_0" ) { lim_cond_0 = value; return; }
            if ( field_name == "lim_cond_1" ) { lim_cond_1 = value; return; }
            if ( field_name == "poisson_ratio" ) { poisson_ratio = value; return; }
            if ( field_name == "elastic_modulus" ) { elastic_modulus = value; return; }
            if ( field_name == "density" ) { density = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
            if ( field_name == "f_vol" ) { f_vol = value; return; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
        }
        Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
            if ( field_name == "lim_cond_0" ) { return lim_cond_0; }
            if ( field_name == "lim_cond_1" ) { return lim_cond_1; }
            if ( field_name == "poisson_ratio" ) { return poisson_ratio; }
            if ( field_name == "elastic_modulus" ) { return elastic_modulus; }
            if ( field_name == "density" ) { return density; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Tpos(0);
        }
        Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,1>();
        }
        Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,2>();
        }
        Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
            if ( field_name == "f_vol" ) { return f_vol; }
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,3>();
        }
        Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,4>();
        }
        Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,5>();
        }
        Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Vec<Tpos,6>();
        }
        Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<1,1> >();
        }
        Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<2,2> >();
        }
        Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<3,3> >();
        }
        Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<4,4> >();
        }
        Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<5,5> >();
        }
        Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
            std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            return Mat<Tpos,Gen<6,6> >();
        }
        Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<1> >();
        }
        Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<2> >();
        }
        Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
            assert( 0 /*TODO*/ );
            return Mat<Tpos,Sym<3> >();
        }
    };
    typedef Node<dim,Tpos,NodalStaticData> TNode;
    typedef ElementAncestor<TNode> EA;
    template<unsigned nvi_to_subs,unsigned skin,unsigned num_sub_element,unsigned inner=0> struct ElementChoice { typedef void NE; typedef DefaultBehavior BE; typedef VoidDMSet TData; };
    template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,0,inner> { typedef Tetra NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Vec<Vec<Tpos,6>,1> T2;
            typedef Vec<Tpos,1> T1;
            typedef Tpos T3;
            typedef Vec<Mat<Tpos,Gen<3,3> >,5> T0;
            TData():proute(0),tr_epsilon(0),epsilon(0),eps_11(0),pouet(0),sigma(0) {}
            CARACDMEXTNAME( 0, T0, proute, "K" );
            CARACDMEXTNAME( 1, T1, tr_epsilon, "1" );
            CARACDMEXTNAME( 2, T2, epsilon, "1" );
            CARACDMEXTNAME( 3, T1, eps_11, "1" );
            CARACDMEXTNAME( 4, T3, pouet, "1" );
            CARACDMEXTNAME( 5, T2, sigma, "N/m^2" );
            static const unsigned nb_params = 6;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "tr_epsilon" ) { tr_epsilon[0] = value; } // hum
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "eps_11" ) { eps_11[0] = value; } // hum
                if ( field_name == "pouet" ) { pouet = value; return; }
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                if ( field_name == "proute" ) { proute[0] = value; } // hum
                if ( field_name == "proute" ) { proute[1] = value; } // hum
                if ( field_name == "proute" ) { proute[2] = value; } // hum
                if ( field_name == "proute" ) { proute[3] = value; } // hum
                if ( field_name == "proute" ) { proute[4] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "tr_epsilon" ) { return tr_epsilon[0]; } // hum
                if ( field_name == "eps_11" ) { return eps_11[0]; } // hum
                if ( field_name == "pouet" ) { return pouet; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                if ( field_name == "epsilon" ) { return epsilon[0]; } // hum
                if ( field_name == "sigma" ) { return sigma[0]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                if ( field_name == "proute" ) { return proute[0]; } // hum
                if ( field_name == "proute" ) { return proute[1]; } // hum
                if ( field_name == "proute" ) { return proute[2]; } // hum
                if ( field_name == "proute" ) { return proute[3]; } // hum
                if ( field_name == "proute" ) { return proute[4]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<0,skin,1,inner> { typedef Hexa NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Vec<Mat<Tpos,Gen<3,3> >,8> T0;
            typedef Vec<Vec<Tpos,6>,1> T2;
            typedef Vec<Tpos,1> T1;
            typedef Tpos T3;
            TData():proute(0),tr_epsilon(0),epsilon(0),eps_11(0),pouet(0),sigma(0) {}
            CARACDMEXTNAME( 0, T0, proute, "K" );
            CARACDMEXTNAME( 1, T1, tr_epsilon, "1" );
            CARACDMEXTNAME( 2, T2, epsilon, "1" );
            CARACDMEXTNAME( 3, T1, eps_11, "1" );
            CARACDMEXTNAME( 4, T3, pouet, "1" );
            CARACDMEXTNAME( 5, T2, sigma, "N/m^2" );
            static const unsigned nb_params = 6;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "tr_epsilon" ) { tr_epsilon[0] = value; } // hum
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "eps_11" ) { eps_11[0] = value; } // hum
                if ( field_name == "pouet" ) { pouet = value; return; }
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                if ( field_name == "epsilon" ) { epsilon[0] = value; } // hum
                if ( field_name == "sigma" ) { sigma[0] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                if ( field_name == "proute" ) { proute[0] = value; } // hum
                if ( field_name == "proute" ) { proute[1] = value; } // hum
                if ( field_name == "proute" ) { proute[2] = value; } // hum
                if ( field_name == "proute" ) { proute[3] = value; } // hum
                if ( field_name == "proute" ) { proute[4] = value; } // hum
                if ( field_name == "proute" ) { proute[5] = value; } // hum
                if ( field_name == "proute" ) { proute[6] = value; } // hum
                if ( field_name == "proute" ) { proute[7] = value; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "tr_epsilon" ) { return tr_epsilon[0]; } // hum
                if ( field_name == "eps_11" ) { return eps_11[0]; } // hum
                if ( field_name == "pouet" ) { return pouet; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                if ( field_name == "epsilon" ) { return epsilon[0]; } // hum
                if ( field_name == "sigma" ) { return sigma[0]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                if ( field_name == "proute" ) { return proute[0]; } // hum
                if ( field_name == "proute" ) { return proute[1]; } // hum
                if ( field_name == "proute" ) { return proute[2]; } // hum
                if ( field_name == "proute" ) { return proute[3]; } // hum
                if ( field_name == "proute" ) { return proute[4]; } // hum
                if ( field_name == "proute" ) { return proute[5]; } // hum
                if ( field_name == "proute" ) { return proute[6]; } // hum
                if ( field_name == "proute" ) { return proute[7]; } // hum
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<1,skin,0,inner> { typedef Triangle NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Vec<Tpos,3> T1;
            typedef Tpos T0;
            TData():p(0.0),f_surf(0.0,0.0,0.0) {}
            CARACDMEXTNAME( 0, T0, p, "N/m^2" );
            CARACDMEXTNAME( 1, T1, f_surf, "N/m^2" );
            static const unsigned nb_params = 2;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "p" ) { p = value; return; }
                if ( field_name == "f_surf" ) { f_surf = value; return; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                if ( field_name == "f_surf" ) { f_surf = value; return; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "p" ) { return p; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                if ( field_name == "f_surf" ) { return f_surf; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<1,skin,1,inner> { typedef Quad NE; typedef DefaultBehavior BE; 
        struct TData {
            typedef Vec<Tpos,3> T1;
            typedef Tpos T0;
            TData():p(0.0),f_surf(0.0,0.0,0.0) {}
            CARACDMEXTNAME( 0, T0, p, "N/m^2" );
            CARACDMEXTNAME( 1, T1, f_surf, "N/m^2" );
            static const unsigned nb_params = 2;
            void dm_data_set_field( const std::string field_name, Tpos value ) {
                if ( field_name == "p" ) { p = value; return; }
                if ( field_name == "f_surf" ) { f_surf = value; return; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,1> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,2> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,3> &value ) {
                if ( field_name == "f_surf" ) { f_surf = value; return; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,4> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,5> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Vec<Tpos,6> &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<1> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<2> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<3> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<4> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<5> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            void dm_data_set_field( const std::string field_name, const Mat<Tpos,Gen<6> > &value ) {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
            }
            Tpos dm_data_get_field( const std::string field_name, StructForType<Tpos> ) const {
                if ( field_name == "p" ) { return p; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Tpos(0);
            }
            Vec<Tpos,1> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,1> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,1>();
            }
            Vec<Tpos,2> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,2> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,2>();
            }
            Vec<Tpos,3> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,3> > ) const {
                if ( field_name == "f_surf" ) { return f_surf; }
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,3>();
            }
            Vec<Tpos,4> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,4> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,4>();
            }
            Vec<Tpos,5> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,5> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,5>();
            }
            Vec<Tpos,6> dm_data_get_field( const std::string field_name, StructForType<Vec<Tpos,6> > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Vec<Tpos,6>();
            }
            Mat<Tpos,Gen<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<1,1> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<1,1> >();
            }
            Mat<Tpos,Gen<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<2,2> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<2,2> >();
            }
            Mat<Tpos,Gen<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<3,3> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<3,3> >();
            }
            Mat<Tpos,Gen<4> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<4,4> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<4,4> >();
            }
            Mat<Tpos,Gen<5> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<5,5> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<5,5> >();
            }
            Mat<Tpos,Gen<6> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Gen<6,6> > > ) const {
                std::cerr << "There is no variable named " << field_name << " in data struct" << std::endl;
                return Mat<Tpos,Gen<6,6> >();
            }
            Mat<Tpos,Sym<1> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<1> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<1> >();
            }
            Mat<Tpos,Sym<2> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<2> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<2> >();
            }
            Mat<Tpos,Sym<3> > dm_data_get_field( const std::string field_name, StructForType<Mat<Tpos,Sym<3> > > ) const {
                assert( 0 /*TODO*/ );
                return Mat<Tpos,Sym<3> >();
            }
        };
    };
    template<unsigned skin,unsigned inner> struct ElementChoice<2,skin,0,inner> { typedef Bar NE; typedef DefaultBehavior BE; typedef VoidDMSet TData;    };
    template<unsigned skin,unsigned inner> struct ElementChoice<3,skin,0,inner> { typedef NodalElement NE; typedef DefaultBehavior BE; typedef VoidDMSet TData;    };
};
} // namespace LMT
#endif // Mesh_carac_pb_dep_cor_HEADER


#include "formulation/formulation.h"
namespace LMT {
#ifndef ELASTICITY_DEP_2_NUM_0_CARAC_H
#define ELASTICITY_DEP_2_NUM_0_CARAC_H
#ifndef STRUCT_ELASTICITY_DEP
#define STRUCT_ELASTICITY_DEP
struct elasticity_dep {
  static const char *name() { return "elasticity_dep"; }
};
#endif // ELASTICITY_DEP

template<class P_T>
class CaracFormulation<elasticity_dep,2,P_T>  {
public:
  typedef P_T T;
  static const char *name() { return "elasticity_dep"; }
  static const bool matrix_will_be_definite_positive=true;
  static const bool has_nodal_matrix = true;
  static const bool has_IS_contact_matrix=false;
  static const bool need_skin_assembly=false;
  typedef Norm1_is_inf Name_convergence_criterium;
  static const unsigned nb_vectors = 4;
  static const unsigned nb_matrices = 1;
  static const unsigned auto_contact = false;
  static const bool friction_coeff_is_a_nodal_variable = 0;
  static const unsigned offset_of_pos_unknown=3;
  static const unsigned pos_is_an_unknown = false;
  static const unsigned nb_der_var = 1;
  template<class TF> static void add_to_der_vars( TF &f, const Vec<T> &v ) {
      (*f.m).poisson_ratio += v[ 0 ];
  }
  static bool is_unknown(const std::string &s) { return (s=="dep"); }
  static unsigned num_in_vec_unknown(const std::string &s) { if ( s=="dep" )return 0; return 0;  }
  template<unsigned num_mat,unsigned inner=0> struct NodalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  template<unsigned num_mat,unsigned inner=0> struct GlobalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  
  static const unsigned nb_nodal_unknowns = 2;
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
    node.dep[1]=vecs[0][indice+1]; node.dep[0]=vecs[0][indice+0];
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
    node.dep[0]=vecs[0][indice+0]; node.dep[1]=vecs[0][indice+1];
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
    vecs[0][indice+0]=node.dep[0]; vecs[1][indice+0]=node.dep[0]; vecs[2][indice+0]=node.dep[0]; vecs[3][indice+0]=node.dep[0]; vecs[4][indice+0]=node.dep[0];
    vecs[0][indice+1]=node.dep[1]; vecs[1][indice+1]=node.dep[1]; vecs[2][indice+1]=node.dep[1]; vecs[3][indice+1]=node.dep[1]; vecs[4][indice+1]=node.dep[1];
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    T reg0=vecs[1][indice+0]-vecs[0][indice+0]; T reg1=vecs[1][indice+1]-vecs[0][indice+1]; reg0=abs(reg0); reg1=abs(reg1); return max(reg1,reg0);
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
    old_vec[indice+0]=vecs[1][indice+0]; old_vec[indice+1]=vecs[1][indice+1];
  }
  
  static const unsigned nb_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_nodal_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};
#endif // ELASTICITY_DEP_2_NUM_0_CARAC_H
extern "C" void apply_on_elements_after_solve_0_elasticity_dep_Triangle_0( double * );
extern "C" void apply_on_elements_after_solve_1_elasticity_dep_Triangle_1( double * );
extern "C" void apply_on_elements_after_solve_2_elasticity_dep_Triangle_2( double * );
extern "C" void apply_on_elements_after_solve_3_elasticity_dep_Triangle_3( double * );
extern "C" void apply_on_elements_after_solve_4_elasticity_dep_Triangle_4( double * );
extern "C" void apply_on_elements_after_solve_5_elasticity_dep_Triangle_5( double * );
class Triangle;
template<unsigned A,class B,class C> class Node;
template<class A,class B,class C,class D,unsigned E> class Element;

// Carac for ...
template<class P_T_pos,class P_ND,class TED,unsigned nim,class TM,class T>
class CaracFormulationForElement<elasticity_dep,Element<Triangle,DefaultBehavior,Node<2,P_T_pos,P_ND>,TED,nim>,TM,T> {
public:
    template<unsigned num_mat,unsigned inner=0> struct ElemMatricesCarac {
        static const bool symm = true;
        static const bool herm = false;
        static const bool diag = false;
        static const bool linear = true;
    };
    static const unsigned order_integration = 0;
    static const bool has_elementary_matrix = true;
    static const bool has_skin_elementary_matrix = true;
    template<class TE,class TF, class TVEVE> static void after_solve(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=elem.pos(2)[0]-elem.pos(0)[0]; T reg3=elem.pos(1)[1]-elem.pos(0)[1]; T reg4=1+(*f.m).poisson_ratio;
    T reg5=reg1*reg0; T reg6=reg3*reg2; reg4=reg4/(*f.m).elastic_modulus; T reg7=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg8=1.0/(*f.m).elastic_modulus;
    reg6=reg5-reg6; reg5=vectors[0][indices[1]+1]-vectors[0][indices[0]+1]; T reg9=vectors[0][indices[1]+0]-vectors[0][indices[0]+0]; T reg10=vectors[0][indices[2]+0]-vectors[0][indices[0]+0]; T reg11=reg7*reg4;
    T reg12=reg8*reg4; T reg13=vectors[0][indices[2]+1]-vectors[0][indices[0]+1]; reg1=reg1/reg6; reg0=reg0/reg6; reg2=reg2/reg6;
    reg6=reg3/reg6; reg3=reg6*reg13; T reg14=reg0*reg5; T reg15=reg2*reg9; T reg16=reg1*reg10;
    T reg17=reg8*reg12; T reg18=reg7*reg11; T reg19=pow(reg7,2); reg10=reg6*reg10; reg9=reg0*reg9;
    reg3=reg14-reg3; reg15=reg16-reg15; reg18=reg17-reg18; reg5=reg2*reg5; reg14=pow(reg8,2);
    reg13=reg1*reg13; reg11=reg11/reg18; reg10=reg9-reg10; elem.epsilon[0][0]=reg10; reg12=reg12/reg18;
    reg3=reg15+reg3; reg19=reg14-reg19; reg5=reg13-reg5; elem.epsilon[0][1]=reg5; reg9=reg12*reg10;
    reg13=reg11*reg5; reg3=0.5*reg3; elem.epsilon[0][2]=reg3; reg18=reg19/reg18; reg14=reg12*reg5;
    reg15=reg11*reg10; elem.tr_epsilon=reg5+reg10; elem.sigma[0][2]=reg18*reg3; elem.sigma[0][0]=reg13+reg9; elem.sigma[0][1]=reg14+reg15;
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_2(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_3(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_4(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_5(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_6(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
  
  static const unsigned nb_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};

// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; T reg1=elem.pos(2)[1]-elem.pos(0)[1]; T reg2=elem.pos(2)[0]-elem.pos(0)[0]; T reg3=elem.pos(1)[1]-elem.pos(0)[1]; T reg4=elem.pos(1)[0]-elem.pos(0)[0];
    reg0=reg0/(*f.m).elastic_modulus; T reg5=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg6=1.0/(*f.m).elastic_modulus; T reg7=reg6*reg0; T reg8=reg4*reg1;
    T reg9=reg3*reg2; T reg10=reg5*reg0; reg9=reg8-reg9; reg8=reg6*reg7; T reg11=pow(reg5,2);
    T reg12=reg5*reg10; T reg13=pow(reg6,2); reg1=reg1/reg9; reg2=reg2/reg9; T reg14=reg3/reg9;
    T reg15=reg4/reg9; reg11=reg13-reg11; reg12=reg8-reg12; reg11=reg11/reg12; reg8=0.5*reg2;
    reg13=reg14-reg1; T reg16=0.5*reg14; T reg17=reg2-reg15; T reg18=0.5*reg15; T reg19=0.5*reg1;
    T reg20=reg11*reg18; T reg21=0.5*reg17; reg7=reg7/reg12; T reg22=reg11*reg19; reg12=reg10/reg12;
    reg10=reg11*reg8; T reg23=reg11*reg16; T reg24=0.5*reg13; T reg25=reg2*reg12; T reg26=2*reg10;
    T reg27=reg1*reg7; T reg28=reg11*reg24; reg22=2*reg22; T reg29=reg14*reg7; reg20=2*reg20;
    T reg30=reg14*reg12; T reg31=reg2*reg7; T reg32=reg1*reg12; T reg33=reg15*reg7; T reg34=reg15*reg12;
    T reg35=2*reg23; T reg36=1-var_inter[0]; T reg37=reg11*reg21; T reg38=elem.proute[0](1,1)+elem.proute[1](1,1); T reg39=reg2*reg33;
    T reg40=reg38+(*f.m).f_vol[1]; reg38=reg38+(*f.m).f_vol[0]; T reg41=reg19*reg35; T reg42=reg15*reg30; T reg43=reg20*reg16;
    T reg44=reg7*reg17; T reg45=reg2*reg32; T reg46=reg26*reg19; T reg47=reg12*reg13; T reg48=reg8*reg20;
    T reg49=reg36-var_inter[1]; T reg50=reg1*reg29; T reg51=reg8*reg22; T reg52=reg1*reg25; T reg53=reg18*reg35;
    reg28=2*reg28; T reg54=reg14*reg27; T reg55=reg26*reg18; T reg56=reg22*reg16; reg37=2*reg37;
    T reg57=reg14*reg34; T reg58=reg12*reg17; T reg59=reg7*reg13; T reg60=reg15*reg31; reg48=reg50+reg48;
    T reg61=reg15*reg33; T reg62=reg14*reg25; T reg63=reg1*reg34; T reg64=reg8*reg35; T reg65=var_inter[0]*reg40;
    T reg66=reg16*reg35; reg51=reg52+reg51; T reg67=reg18*reg20; T reg68=reg14*reg29; T reg69=reg26*reg16;
    T reg70=reg8*reg26; T reg71=reg1*reg27; T reg72=reg28*reg8; T reg73=reg37*reg8; T reg74=reg1*reg59;
    T reg75=var_inter[0]*reg38; T reg76=reg1*reg58; T reg77=reg24*reg35; reg33=reg17*reg33; T reg78=reg37*reg18;
    T reg79=var_inter[1]*reg38; reg39=reg41+reg39; T reg80=reg15*reg44; T reg81=reg28*reg18; T reg82=reg28*reg16;
    T reg83=reg37*reg16; T reg84=reg14*reg58; T reg85=reg2*reg30; T reg86=reg19*reg20; reg54=reg55+reg54;
    reg56=reg60+reg56; T reg87=reg15*reg32; T reg88=reg2*reg31; T reg89=reg19*reg22; reg43=reg42+reg43;
    reg45=reg46+reg45; T reg90=reg15*reg47; T reg91=var_inter[1]*reg40; reg57=reg53+reg57; T reg92=reg22*reg18;
    T reg93=reg2*reg44; T reg94=reg28*reg19; T reg95=reg2*reg47; T reg96=reg37*reg19; T reg97=reg17*reg31;
    T reg98=reg24*reg26; reg32=reg17*reg32; T reg99=reg24*reg28; reg44=reg17*reg44; T reg100=reg37*reg24;
    reg47=reg17*reg47; T reg101=reg49*reg40; T reg102=reg21*reg35; reg34=reg13*reg34; T reg103=reg21*reg20;
    T reg104=reg13*reg29; T reg105=reg21*reg22; T reg106=reg13*reg25; T reg107=reg21*reg26; reg27=reg13*reg27;
    reg28=reg21*reg28; reg58=reg13*reg58; reg37=reg21*reg37; T reg108=reg13*reg59; T reg109=reg49*reg38;
    reg59=reg14*reg59; reg20=reg24*reg20; T reg110=reg17*reg30; reg22=reg24*reg22; T reg111=reg9*reg56;
    reg84=reg81-reg84; reg75=(*f.m).density*reg75; reg59=reg78-reg59; reg105=reg105-reg106; reg79=(*f.m).density*reg79;
    reg78=reg9*reg39; reg73=reg74-reg73; reg103=reg103-reg104; reg86=reg86+reg85; reg89=reg89+reg88;
    reg34=reg34-reg102; reg74=reg9*reg45; reg27=reg27-reg107; reg81=reg9*reg54; reg20=reg20-reg110;
    reg92=reg92+reg62; reg28=reg58+reg28; reg67=reg67+reg68; reg58=reg9*reg57; reg37=reg108+reg37;
    reg91=(*f.m).density*reg91; reg33=reg33-reg77; reg83=reg90-reg83; reg109=(*f.m).density*reg109; reg82=reg80-reg82;
    reg87=reg87+reg69; reg63=reg63+reg64; reg22=reg22-reg97; reg99=reg44+reg99; reg65=(*f.m).density*reg65;
    reg100=reg47+reg100; reg95=reg96-reg95; reg44=reg9*reg48; reg72=reg76-reg72; reg71=reg71+reg70;
    reg93=reg94-reg93; reg61=reg61+reg66; reg47=reg9*reg51; reg101=(*f.m).density*reg101; reg32=reg32-reg98;
    reg76=reg9*reg43; reg80=ponderation*reg81; reg61=reg9*reg61; reg71=reg9*reg71; reg90=reg9*reg91;
    reg82=reg9*reg82; reg92=reg9*reg92; reg28=reg9*reg28; reg94=ponderation*reg44; reg32=reg9*reg32;
    reg96=reg9*reg109; reg67=reg9*reg67; reg33=reg9*reg33; reg37=reg9*reg37; reg99=reg9*reg99;
    reg108=ponderation*reg58; T reg112=reg9*reg75; reg87=reg9*reg87; reg83=reg9*reg83; T reg113=ponderation*reg47;
    reg20=reg9*reg20; reg22=reg9*reg22; T reg114=reg9*reg65; T reg115=ponderation*reg74; reg34=reg9*reg34;
    reg93=reg9*reg93; reg89=reg9*reg89; reg73=reg9*reg73; reg103=reg9*reg103; reg86=reg9*reg86;
    reg72=reg9*reg72; T reg116=reg9*reg101; T reg117=reg9*reg79; T reg118=ponderation*reg76; reg63=reg9*reg63;
    reg27=reg9*reg27; reg84=reg9*reg84; reg100=reg9*reg100; T reg119=ponderation*reg111; reg59=reg9*reg59;
    reg95=reg9*reg95; reg105=reg9*reg105; T reg120=ponderation*reg78; matrix(indices[2]+1,indices[1]+0)+=ponderation*reg87; reg87=ponderation*reg114;
    sollicitation[indices[1]+1]+=reg87; T reg121=ponderation*reg112; sollicitation[indices[1]+0]+=reg121; matrix(indices[2]+1,indices[1]+1)+=-reg119; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg61;
    reg61=ponderation*reg96; sollicitation[indices[0]+0]+=reg61; matrix(indices[2]+1,indices[2]+0)+=-reg118; reg118=ponderation*reg117; sollicitation[indices[2]+0]+=reg118;
    reg119=ponderation*reg116; sollicitation[indices[0]+1]+=reg119; T reg122=ponderation*reg90; sollicitation[indices[2]+1]+=reg122; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg37;
    matrix(indices[0]+0,indices[0]+1)+=ponderation*reg28; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg27; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg105; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg103; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg34;
    matrix(indices[0]+1,indices[0]+0)+=ponderation*reg100; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg99; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg32; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg22; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg20;
    matrix(indices[0]+1,indices[2]+1)+=ponderation*reg33; matrix(indices[1]+0,indices[0]+0)+=ponderation*reg73; matrix(indices[1]+0,indices[0]+1)+=ponderation*reg72; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg71; matrix(indices[1]+0,indices[1]+1)+=-reg113;
    matrix(indices[1]+0,indices[2]+0)+=-reg94; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg63; matrix(indices[1]+1,indices[0]+0)+=ponderation*reg95; matrix(indices[1]+1,indices[0]+1)+=ponderation*reg93; matrix(indices[1]+1,indices[1]+0)+=-reg115;
    matrix(indices[1]+1,indices[1]+1)+=ponderation*reg89; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg86; matrix(indices[1]+1,indices[2]+1)+=-reg120; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg59; matrix(indices[2]+0,indices[0]+1)+=ponderation*reg84;
    matrix(indices[2]+0,indices[1]+0)+=-reg80; matrix(indices[2]+0,indices[1]+1)+=ponderation*reg92; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg67; matrix(indices[2]+0,indices[2]+1)+=-reg108; matrix(indices[2]+1,indices[0]+0)+=ponderation*reg83;
    matrix(indices[2]+1,indices[0]+1)+=ponderation*reg82;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; reg0=reg0/(*f.m).elastic_modulus; T reg2=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg3=elem.pos(1)[1]-elem.pos(0)[1];
    T reg4=elem.pos(2)[0]-elem.pos(0)[0]; T reg5=elem.pos(2)[1]-elem.pos(0)[1]; T reg6=1.0/(*f.m).elastic_modulus; T reg7=reg6*reg0; T reg8=reg1*reg5;
    T reg9=reg3*reg4; T reg10=reg2*reg0; reg9=reg8-reg9; reg8=reg6*reg7; T reg11=pow(reg2,2);
    T reg12=reg2*reg10; T reg13=pow(reg6,2); reg5=reg5/reg9; reg4=reg4/reg9; T reg14=reg3/reg9;
    T reg15=reg1/reg9; reg11=reg13-reg11; reg12=reg8-reg12; reg11=reg11/reg12; reg8=reg14-reg5;
    reg13=0.5*reg15; T reg16=reg4-reg15; T reg17=0.5*reg14; T reg18=0.5*reg5; T reg19=0.5*reg16;
    T reg20=reg11*reg18; reg7=reg7/reg12; T reg21=0.5*reg4; T reg22=0.5*reg8; reg12=reg10/reg12;
    reg10=reg11*reg13; T reg23=reg11*reg17; T reg24=reg14*reg7; T reg25=reg15*reg7; reg20=2*reg20;
    T reg26=2*reg23; T reg27=reg4*reg12; T reg28=reg11*reg21; reg10=2*reg10; T reg29=reg11*reg22;
    T reg30=reg15*reg12; T reg31=1-var_inter[0]; T reg32=reg11*reg19; T reg33=elem.proute[0](1,1)+elem.proute[1](1,1); T reg34=reg7*reg8;
    T reg35=reg4*reg7; T reg36=reg14*reg30; T reg37=reg33+(*f.m).f_vol[1]; T reg38=reg5*reg27; T reg39=reg18*reg26;
    reg33=reg33+(*f.m).f_vol[0]; T reg40=reg5*reg12; T reg41=reg21*reg20; T reg42=reg31-var_inter[1]; T reg43=reg21*reg10;
    T reg44=reg7*reg16; T reg45=reg5*reg24; T reg46=reg4*reg25; T reg47=reg13*reg26; T reg48=reg14*reg12;
    T reg49=2*reg28; T reg50=reg12*reg16; T reg51=reg5*reg7; reg29=2*reg29; reg32=2*reg32;
    T reg52=var_inter[0]*reg33; T reg53=var_inter[1]*reg33; T reg54=reg5*reg51; T reg55=reg22*reg26; T reg56=reg16*reg25;
    T reg57=reg42*reg37; reg46=reg39+reg46; T reg58=reg16*reg44; T reg59=reg22*reg29; reg41=reg38+reg41;
    T reg60=reg13*reg10; T reg61=reg14*reg24; T reg62=reg21*reg49; T reg63=reg16*reg40; T reg64=reg22*reg10;
    T reg65=reg22*reg49; T reg66=reg16*reg48; reg36=reg47+reg36; T reg67=reg22*reg20; T reg68=reg16*reg35;
    T reg69=reg18*reg10; T reg70=reg4*reg35; T reg71=reg8*reg50; T reg72=reg19*reg32; T reg73=reg19*reg29;
    T reg74=reg18*reg20; T reg75=var_inter[0]*reg37; T reg76=reg8*reg51; T reg77=reg8*reg34; T reg78=reg19*reg49;
    T reg79=reg4*reg48; T reg80=reg8*reg27; T reg81=reg21*reg26; T reg82=var_inter[1]*reg37; T reg83=reg19*reg26;
    T reg84=reg8*reg30; reg25=reg15*reg25; T reg85=reg17*reg26; reg43=reg45+reg43; T reg86=reg19*reg10;
    T reg87=reg8*reg24; reg30=reg5*reg30; T reg88=reg19*reg20; T reg89=reg42*reg33; reg54=reg54+reg62;
    T reg90=reg9*reg46; T reg91=reg9*reg41; reg75=(*f.m).density*reg75; T reg92=reg9*reg43; reg69=reg69+reg79;
    reg30=reg30+reg81; reg52=(*f.m).density*reg52; reg74=reg74+reg70; reg72=reg77+reg72; reg73=reg71+reg73;
    reg76=reg76-reg78; reg89=(*f.m).density*reg89; reg88=reg88-reg80; reg25=reg25+reg85; reg86=reg86-reg87;
    reg84=reg84-reg83; reg82=(*f.m).density*reg82; reg57=(*f.m).density*reg57; reg53=(*f.m).density*reg53; reg56=reg56-reg55;
    reg64=reg64-reg66; reg60=reg60+reg61; reg67=reg67-reg68; reg63=reg63-reg65; reg71=reg9*reg36;
    reg59=reg58+reg59; reg60=reg9*reg60; reg25=reg9*reg25; reg69=reg9*reg69; reg58=ponderation*reg90;
    reg77=reg9*reg89; T reg93=reg9*reg57; T reg94=reg9*reg52; T reg95=reg9*reg75; T reg96=ponderation*reg71;
    T reg97=reg9*reg53; T reg98=reg9*reg82; reg86=reg9*reg86; reg84=reg9*reg84; reg88=reg9*reg88;
    reg59=reg9*reg59; reg63=reg9*reg63; reg67=reg9*reg67; reg76=reg9*reg76; reg64=reg9*reg64;
    reg56=reg9*reg56; reg54=reg9*reg54; reg73=reg9*reg73; reg74=reg9*reg74; T reg99=ponderation*reg91;
    reg72=reg9*reg72; T reg100=ponderation*reg92; reg30=reg9*reg30; T reg101=ponderation*reg98; sollicitation[indices[2]+1]+=reg101;
    matrix(indices[0]+0,indices[1]+1)+=ponderation*reg88; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg25; reg25=ponderation*reg97; sollicitation[indices[2]+0]+=reg25; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg76;
    reg76=ponderation*reg77; sollicitation[indices[0]+0]+=reg76; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg72; reg72=ponderation*reg95; sollicitation[indices[1]+1]+=reg72;
    reg88=ponderation*reg93; sollicitation[indices[0]+1]+=reg88; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg73; reg73=ponderation*reg94; sollicitation[indices[1]+0]+=reg73;
    matrix(indices[0]+0,indices[2]+0)+=ponderation*reg86; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg84; matrix(indices[2]+0,indices[2]+1)+=-reg96; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg59; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg63;
    matrix(indices[2]+0,indices[2]+0)+=ponderation*reg60; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg67; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg64; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg56; matrix(indices[1]+1,indices[2]+1)+=-reg58;
    matrix(indices[1]+0,indices[1]+0)+=ponderation*reg54; matrix(indices[1]+0,indices[1]+1)+=-reg99; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg69; matrix(indices[1]+0,indices[2]+0)+=-reg100; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg30;
    matrix(indices[1]+1,indices[1]+1)+=ponderation*reg74;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=elem.pos(1)[1]-elem.pos(0)[1]; reg0=reg0/(*f.m).elastic_modulus; T reg3=(*f.m).poisson_ratio/(*f.m).elastic_modulus;
    T reg4=elem.pos(2)[0]-elem.pos(0)[0]; T reg5=1.0/(*f.m).elastic_modulus; T reg6=elem.pos(2)[1]-elem.pos(0)[1]; T reg7=reg1*reg6; T reg8=reg5*reg0;
    T reg9=reg2*reg4; T reg10=reg3*reg0; T reg11=pow(reg3,2); T reg12=reg5*reg8; T reg13=reg3*reg10;
    T reg14=pow(reg5,2); reg9=reg7-reg9; reg7=reg2/reg9; reg11=reg14-reg11; reg4=reg4/reg9;
    reg6=reg6/reg9; reg14=reg1/reg9; reg13=reg12-reg13; reg12=0.5*reg14; T reg15=0.5*reg4;
    T reg16=0.5*reg7; T reg17=0.5*reg6; T reg18=reg4-reg14; T reg19=reg7-reg6; reg11=reg11/reg13;
    reg10=reg10/reg13; T reg20=reg11*reg12; T reg21=reg11*reg15; reg13=reg8/reg13; reg8=reg11*reg16;
    T reg22=0.5*reg19; T reg23=0.5*reg18; T reg24=reg11*reg17; T reg25=reg7*reg10; T reg26=2*reg21;
    T reg27=reg11*reg23; reg20=2*reg20; T reg28=reg6*reg13; T reg29=reg14*reg10; T reg30=reg7*reg13;
    reg24=2*reg24; T reg31=reg6*reg10; T reg32=2*reg8; T reg33=reg11*reg22; T reg34=reg14*reg13;
    T reg35=reg4*reg10; T reg36=reg4*reg13; T reg37=reg15*reg24; T reg38=reg6*reg35; T reg39=reg12*reg32;
    T reg40=reg17*reg32; T reg41=reg4*reg34; T reg42=reg13*reg18; T reg43=reg10*reg19; T reg44=reg7*reg29;
    T reg45=reg26*reg12; T reg46=reg7*reg28; T reg47=reg13*reg19; reg27=2*reg27; T reg48=reg10*reg18;
    T reg49=reg26*reg17; reg33=2*reg33; T reg50=reg4*reg31; T reg51=reg20*reg16; T reg52=reg14*reg25;
    T reg53=reg14*reg36; T reg54=reg15*reg20; T reg55=reg6*reg30; T reg56=reg24*reg16; T reg57=reg7*reg48;
    T reg58=reg22*reg32; T reg59=reg18*reg34; T reg60=reg15*reg32; T reg61=reg7*reg47; T reg62=reg4*reg42;
    T reg63=reg33*reg17; reg37=reg38+reg37; T reg64=reg27*reg17; T reg65=reg22*reg20; T reg66=reg18*reg25;
    T reg67=reg4*reg43; reg46=reg45+reg46; T reg68=reg24*reg12; T reg69=reg33*reg12; T reg70=reg6*reg48;
    T reg71=reg6*reg47; T reg72=reg27*reg15; T reg73=reg6*reg29; T reg74=reg4*reg36; T reg75=reg27*reg12;
    reg41=reg40+reg41; T reg76=reg33*reg15; T reg77=reg17*reg24; reg50=reg49+reg50; reg54=reg55+reg54;
    T reg78=reg6*reg28; T reg79=reg15*reg26; T reg80=reg4*reg25; T reg81=reg17*reg20; T reg82=reg18*reg43;
    T reg83=reg27*reg16; reg48=reg19*reg48; T reg84=reg14*reg42; T reg85=reg23*reg32; reg29=reg19*reg29;
    T reg86=reg23*reg33; T reg87=reg33*reg16; reg51=reg52+reg51; T reg88=reg14*reg31; T reg89=reg23*reg20;
    reg28=reg19*reg28; T reg90=reg19*reg30; T reg91=reg26*reg16; T reg92=reg23*reg26; T reg93=reg23*reg24;
    T reg94=reg19*reg35; reg56=reg53+reg56; reg24=reg22*reg24; T reg95=reg18*reg36; T reg96=reg7*reg35;
    reg47=reg19*reg47; reg20=reg12*reg20; T reg97=reg22*reg26; reg31=reg18*reg31; T reg98=reg23*reg27;
    T reg99=reg7*reg30; T reg100=reg16*reg32; reg33=reg22*reg33; reg42=reg18*reg42; reg44=reg39+reg44;
    reg34=reg14*reg34; reg43=reg14*reg43; reg27=reg27*reg22; reg62=reg63-reg62; reg63=reg9*reg51;
    reg34=reg34+reg100; T reg101=reg9*reg56; T reg102=reg9*reg50; reg88=reg88+reg91; reg77=reg77+reg74;
    reg87=reg84-reg87; reg81=reg81+reg80; reg83=reg43-reg83; reg43=reg9*reg41; reg61=reg75-reg61;
    reg75=reg9*reg44; reg20=reg20+reg99; reg57=reg69-reg57; reg68=reg68+reg96; reg69=reg9*reg46;
    reg29=reg29-reg85; reg27=reg82+reg27; reg33=reg42+reg33; reg89=reg89-reg90; reg31=reg31-reg97;
    reg24=reg24-reg95; reg93=reg93-reg94; reg65=reg65-reg66; reg59=reg59-reg58; reg28=reg28-reg92;
    reg72=reg71-reg72; reg76=reg70-reg76; reg86=reg48+reg86; reg78=reg78+reg79; reg42=reg9*reg37;
    reg67=reg64-reg67; reg73=reg73+reg60; reg98=reg47+reg98; reg47=reg9*reg54; reg62=reg9*reg62;
    reg24=reg9*reg24; reg48=ponderation*reg69; reg64=ponderation*reg63; reg88=reg9*reg88; reg31=reg9*reg31;
    reg68=reg9*reg68; reg93=reg9*reg93; reg73=reg9*reg73; reg33=reg9*reg33; reg20=reg9*reg20;
    reg34=reg9*reg34; reg27=reg9*reg27; reg70=ponderation*reg75; reg87=reg9*reg87; reg67=reg9*reg67;
    reg89=reg9*reg89; reg29=reg9*reg29; reg83=reg9*reg83; reg71=ponderation*reg42; reg72=reg9*reg72;
    reg98=reg9*reg98; reg76=reg9*reg76; reg82=ponderation*reg43; reg86=reg9*reg86; reg78=reg9*reg78;
    reg81=reg9*reg81; reg84=ponderation*reg101; reg61=reg9*reg61; T reg103=ponderation*reg47; reg59=reg9*reg59;
    T reg104=ponderation*reg102; reg28=reg9*reg28; reg57=reg9*reg57; reg65=reg9*reg65; reg77=reg9*reg77;
    matrix(indices[0]+0,indices[2]+0)+=ponderation*reg89; matrix(indices[2]+1,indices[2]+0)+=-reg64; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg86; matrix(indices[2]+1,indices[0]+1)+=ponderation*reg87; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg34;
    matrix(indices[2]+1,indices[1]+1)+=-reg84; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg93; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg98; matrix(indices[2]+1,indices[1]+0)+=ponderation*reg88; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg28;
    matrix(indices[1]+1,indices[0]+0)+=ponderation*reg67; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg73; matrix(indices[1]+1,indices[0]+1)+=ponderation*reg62; matrix(indices[1]+0,indices[2]+0)+=-reg103; matrix(indices[1]+0,indices[1]+1)+=-reg71;
    matrix(indices[1]+1,indices[1]+0)+=-reg104; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg78; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg77; matrix(indices[1]+0,indices[0]+1)+=ponderation*reg76; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg81;
    matrix(indices[1]+0,indices[0]+0)+=ponderation*reg72; matrix(indices[1]+1,indices[2]+1)+=-reg82; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg59; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg61; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg65;
    matrix(indices[2]+0,indices[0]+1)+=ponderation*reg57; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg24; matrix(indices[2]+0,indices[1]+0)+=-reg48; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg31; matrix(indices[2]+0,indices[1]+1)+=ponderation*reg68;
    matrix(indices[0]+1,indices[0]+1)+=ponderation*reg33; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg20; matrix(indices[0]+1,indices[0]+0)+=ponderation*reg27; matrix(indices[2]+0,indices[2]+1)+=-reg70; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg29;
    matrix(indices[2]+1,indices[0]+0)+=ponderation*reg83;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; T reg1=elem.pos(2)[1]-elem.pos(0)[1]; T reg2=elem.pos(2)[0]-elem.pos(0)[0]; T reg3=elem.pos(1)[1]-elem.pos(0)[1]; T reg4=elem.pos(1)[0]-elem.pos(0)[0];
    reg0=reg0/(*f.m).elastic_modulus; T reg5=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg6=1.0/(*f.m).elastic_modulus; T reg7=reg5*reg0; T reg8=reg6*reg0;
    T reg9=reg3*reg2; T reg10=reg4*reg1; T reg11=pow(reg6,2); T reg12=reg5*reg7; T reg13=reg6*reg8;
    T reg14=pow(reg5,2); reg9=reg10-reg9; reg14=reg11-reg14; reg10=reg4/reg9; reg11=reg3/reg9;
    reg1=reg1/reg9; reg2=reg2/reg9; reg12=reg13-reg12; reg13=0.5*reg11; reg14=reg14/reg12;
    T reg15=reg11-reg1; T reg16=reg2-reg10; T reg17=0.5*reg10; T reg18=0.5*reg1; T reg19=0.5*reg15;
    T reg20=0.5*reg2; T reg21=reg14*reg18; T reg22=reg14*reg17; T reg23=reg14*reg13; T reg24=0.5*reg16;
    reg8=reg8/reg12; reg12=reg7/reg12; reg7=reg2*reg12; T reg25=reg14*reg20; T reg26=reg14*reg24;
    T reg27=reg10*reg12; reg21=2*reg21; T reg28=reg14*reg19; T reg29=reg10*reg8; reg22=2*reg22;
    T reg30=reg11*reg8; T reg31=2*reg23; T reg32=reg20*reg21; T reg33=reg2*reg8; T reg34=reg1*reg12;
    T reg35=reg8*reg15; T reg36=reg1*reg30; T reg37=reg20*reg22; T reg38=reg1*reg7; T reg39=reg17*reg31;
    T reg40=reg11*reg12; T reg41=2*reg25; T reg42=reg1*reg8; T reg43=reg18*reg31; T reg44=reg11*reg27;
    reg28=2*reg28; reg26=2*reg26; T reg45=reg12*reg16; T reg46=reg2*reg29; T reg47=reg8*reg16;
    T reg48=reg19*reg28; T reg49=reg16*reg47; reg37=reg36+reg37; T reg50=reg16*reg34; T reg51=reg19*reg41;
    reg32=reg38+reg32; T reg52=reg16*reg33; T reg53=reg19*reg21; reg44=reg39+reg44; T reg54=reg16*reg40;
    T reg55=reg19*reg22; T reg56=reg20*reg41; T reg57=reg16*reg29; T reg58=reg19*reg31; T reg59=reg1*reg42;
    T reg60=reg24*reg26; reg46=reg43+reg46; T reg61=reg15*reg45; T reg62=reg24*reg28; T reg63=reg2*reg40;
    T reg64=reg15*reg42; T reg65=reg24*reg41; T reg66=reg18*reg22; T reg67=reg2*reg33; T reg68=reg15*reg7;
    T reg69=reg15*reg35; T reg70=reg24*reg21; T reg71=reg18*reg21; T reg72=reg11*reg30; T reg73=reg24*reg31;
    T reg74=reg1*reg27; reg27=reg15*reg27; reg29=reg10*reg29; T reg75=reg20*reg31; T reg76=reg24*reg22;
    T reg77=reg15*reg30; T reg78=reg13*reg31; T reg79=reg17*reg22; reg71=reg71+reg67; reg74=reg74+reg75;
    reg79=reg79+reg72; reg59=reg59+reg56; reg66=reg66+reg63; T reg80=reg9*reg32; T reg81=reg9*reg37;
    T reg82=reg9*reg46; reg60=reg69+reg60; reg62=reg61+reg62; reg64=reg64-reg65; reg29=reg29+reg78;
    reg70=reg70-reg68; reg76=reg76-reg77; reg27=reg27-reg73; reg48=reg49+reg48; reg50=reg50-reg51;
    reg49=reg9*reg44; reg53=reg53-reg52; reg57=reg57-reg58; reg55=reg55-reg54; reg57=reg9*reg57;
    reg60=reg9*reg60; reg61=ponderation*reg82; reg66=reg9*reg66; reg62=reg9*reg62; reg29=reg9*reg29;
    reg71=reg9*reg71; reg64=reg9*reg64; reg55=reg9*reg55; reg70=reg9*reg70; reg74=reg9*reg74;
    reg59=reg9*reg59; reg76=reg9*reg76; reg79=reg9*reg79; reg53=reg9*reg53; reg69=ponderation*reg81;
    reg27=reg9*reg27; reg48=reg9*reg48; T reg83=ponderation*reg49; T reg84=ponderation*reg80; reg50=reg9*reg50;
    matrix(indices[1]+1,indices[2]+1)+=-reg61; matrix(indices[2]+0,indices[2]+1)+=-reg83; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg79; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg29; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg60;
    matrix(indices[0]+0,indices[0]+1)+=ponderation*reg62; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg64; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg70; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg76; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg27;
    matrix(indices[0]+1,indices[0]+1)+=ponderation*reg48; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg50; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg53; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg55; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg57;
    matrix(indices[1]+0,indices[1]+0)+=ponderation*reg59; matrix(indices[1]+0,indices[1]+1)+=-reg84; matrix(indices[1]+0,indices[2]+0)+=-reg69; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg74; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg71;
    matrix(indices[1]+1,indices[2]+0)+=ponderation*reg66;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=elem.proute[0](1,1)+elem.proute[1](1,1); T reg1=1-var_inter[0]; T reg2=reg0+(*f.m).f_vol[1]; reg0=reg0+(*f.m).f_vol[0]; T reg3=elem.pos(2)[1]-elem.pos(0)[1];
    T reg4=elem.pos(2)[0]-elem.pos(0)[0]; T reg5=elem.pos(1)[1]-elem.pos(0)[1]; T reg6=elem.pos(1)[0]-elem.pos(0)[0]; T reg7=reg1-var_inter[1]; T reg8=reg6*reg3;
    T reg9=reg5*reg4; T reg10=var_inter[1]*reg2; T reg11=reg7*reg0; T reg12=reg7*reg2; T reg13=var_inter[1]*reg0;
    T reg14=var_inter[0]*reg0; T reg15=var_inter[0]*reg2; reg10=(*f.m).density*reg10; reg13=(*f.m).density*reg13; reg15=(*f.m).density*reg15;
    reg14=(*f.m).density*reg14; reg12=(*f.m).density*reg12; reg11=(*f.m).density*reg11; reg9=reg8-reg9; reg8=reg9*reg11;
    T reg16=reg9*reg12; T reg17=reg9*reg10; T reg18=reg9*reg14; T reg19=reg9*reg15; T reg20=reg9*reg13;
    T reg21=ponderation*reg17; sollicitation[indices[2]+1]+=reg21; T reg22=ponderation*reg20; sollicitation[indices[2]+0]+=reg22; T reg23=ponderation*reg19;
    sollicitation[indices[1]+1]+=reg23; T reg24=ponderation*reg18; sollicitation[indices[1]+0]+=reg24; T reg25=ponderation*reg16; sollicitation[indices[0]+1]+=reg25;
    T reg26=ponderation*reg8; sollicitation[indices[0]+0]+=reg26;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0]; T reg1=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[0]; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg3=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[1]; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0;
    matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; T reg4=reg1+reg0; T reg5=reg3+reg2; T reg6=PNODE(0).dep_imp_coef_0*reg4; T reg7=PNODE(0).dep_imp_coef_0*reg5;
    T reg8=PNODE(0).f_nodal[0]+reg6; sollicitation[indices[0]+0]+=reg8; T reg9=PNODE(0).f_nodal[1]+reg7; sollicitation[indices[0]+1]+=reg9;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0]; T reg1=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[0]; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg3=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[1]; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0;
    matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; T reg4=reg1+reg0; T reg5=reg3+reg2; T reg6=PNODE(0).dep_imp_coef_0*reg4; T reg7=PNODE(0).dep_imp_coef_0*reg5;
    T reg8=PNODE(0).f_nodal[0]+reg6; sollicitation[indices[0]+0]+=reg8; T reg9=PNODE(0).f_nodal[1]+reg7; sollicitation[indices[0]+1]+=reg9;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0]; T reg1=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[0]; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg3=(*f.m).lim_cond_0*PNODE(0).dep_imp_val_0_0[1]; T reg4=reg1+reg0;
    T reg5=reg3+reg2; T reg6=PNODE(0).dep_imp_coef_0*reg4; T reg7=PNODE(0).dep_imp_coef_0*reg5; T reg8=PNODE(0).f_nodal[0]+reg6; sollicitation[indices[0]+0]+=reg8;
    T reg9=PNODE(0).f_nodal[1]+reg7; sollicitation[indices[0]+1]+=reg9;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
  #undef PNODE
}
#endif
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[0]-elem.pos(0)[0]; T reg1=elem.pos(1)[1]-elem.pos(0)[1]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg3=reg2+reg3;
    reg3=pow(reg3,0.5); reg2=reg1/reg3; reg3=reg0/reg3; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    reg3=reg0*reg3; reg2=reg1*reg2; T reg6=0.5*skin_elem.f_surf[0]; T reg7=0.5*reg5; T reg8=0.5*skin_elem.f_surf[1];
    T reg9=0.5*reg4; reg2=reg3+reg2; reg3=reg6-reg7; reg9=reg8+reg9; reg3=reg2*reg3;
    sollicitation[indices[0]+0]+=reg3; sollicitation[indices[1]+0]+=reg3; reg9=reg2*reg9; sollicitation[indices[0]+1]+=reg9; sollicitation[indices[1]+1]+=reg9;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[0]-elem.pos(0)[0]; T reg1=elem.pos(1)[1]-elem.pos(0)[1]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg3=reg2+reg3;
    reg3=pow(reg3,0.5); reg2=reg1/reg3; reg3=reg0/reg3; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    reg3=reg0*reg3; reg2=reg1*reg2; T reg6=0.5*skin_elem.f_surf[0]; T reg7=0.5*reg5; T reg8=0.5*skin_elem.f_surf[1];
    T reg9=0.5*reg4; reg2=reg3+reg2; reg3=reg6-reg7; reg9=reg8+reg9; reg3=reg2*reg3;
    sollicitation[indices[0]+0]+=reg3; sollicitation[indices[1]+0]+=reg3; reg9=reg2*reg9; sollicitation[indices[0]+1]+=reg9; sollicitation[indices[1]+1]+=reg9;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[0]-elem.pos(0)[0]; T reg1=elem.pos(1)[1]-elem.pos(0)[1]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg3=reg2+reg3;
    reg3=pow(reg3,0.5); reg2=reg1/reg3; reg3=reg0/reg3; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    reg3=reg0*reg3; reg2=reg1*reg2; T reg6=0.5*skin_elem.f_surf[0]; T reg7=0.5*reg5; T reg8=0.5*skin_elem.f_surf[1];
    T reg9=0.5*reg4; reg2=reg3+reg2; reg3=reg6-reg7; reg9=reg8+reg9; reg3=reg2*reg3;
    sollicitation[indices[0]+0]+=reg3; sollicitation[indices[1]+0]+=reg3; reg9=reg2*reg9; sollicitation[indices[0]+1]+=reg9; sollicitation[indices[1]+1]+=reg9;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(1)[1]; T reg1=elem.pos(2)[0]-elem.pos(1)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*reg4; reg2=reg0*reg2; reg3=reg1*reg3; reg0=0.5*skin_elem.f_surf[0];
    reg1=0.5*skin_elem.f_surf[1]; reg2=reg3+reg2; reg3=reg0-reg7; reg6=reg1+reg6; reg3=reg2*reg3;
    sollicitation[indices[1]+0]+=reg3; sollicitation[indices[2]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[1]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(1)[1]; T reg1=elem.pos(2)[0]-elem.pos(1)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*reg4; reg2=reg0*reg2; reg3=reg1*reg3; reg0=0.5*skin_elem.f_surf[0];
    reg1=0.5*skin_elem.f_surf[1]; reg2=reg3+reg2; reg3=reg0-reg7; reg6=reg1+reg6; reg3=reg2*reg3;
    sollicitation[indices[1]+0]+=reg3; sollicitation[indices[2]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[1]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(1)[1]; T reg1=elem.pos(2)[0]-elem.pos(1)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*reg4; reg2=reg0*reg2; reg3=reg1*reg3; reg0=0.5*skin_elem.f_surf[0];
    reg1=0.5*skin_elem.f_surf[1]; reg2=reg3+reg2; reg3=reg0-reg7; reg6=reg1+reg6; reg3=reg2*reg3;
    sollicitation[indices[1]+0]+=reg3; sollicitation[indices[2]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[1]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(0)[1]-elem.pos(2)[1]; T reg1=elem.pos(0)[0]-elem.pos(2)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*reg4; reg2=reg0*reg2; reg3=reg1*reg3; reg0=0.5*skin_elem.f_surf[1];
    reg1=0.5*skin_elem.f_surf[0]; reg2=reg3+reg2; reg3=reg1-reg7; reg6=reg0+reg6; reg3=reg2*reg3;
    sollicitation[indices[0]+0]+=reg3; sollicitation[indices[2]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(0)[1]-elem.pos(2)[1]; T reg1=elem.pos(0)[0]-elem.pos(2)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*reg4; reg2=reg0*reg2; reg3=reg1*reg3; reg0=0.5*skin_elem.f_surf[1];
    reg1=0.5*skin_elem.f_surf[0]; reg2=reg3+reg2; reg3=reg1-reg7; reg6=reg0+reg6; reg3=reg2*reg3;
    sollicitation[indices[0]+0]+=reg3; sollicitation[indices[2]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(0)[1]-elem.pos(2)[1]; T reg1=elem.pos(0)[0]-elem.pos(2)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg2; T reg5=skin_elem.p*reg3;
    T reg6=0.5*reg5; T reg7=0.5*reg4; reg2=reg0*reg2; reg3=reg1*reg3; reg0=0.5*skin_elem.f_surf[1];
    reg1=0.5*skin_elem.f_surf[0]; reg2=reg3+reg2; reg3=reg1-reg7; reg6=reg0+reg6; reg3=reg2*reg3;
    sollicitation[indices[0]+0]+=reg3; sollicitation[indices[2]+0]+=reg3; reg6=reg2*reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[2]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_vector_der_var(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */    T reg0=1+(*f.m).poisson_ratio; reg0=reg0/(*f.m).elastic_modulus; T reg1=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg2=1.0/(*f.m).elastic_modulus; T reg3=reg2*reg1;
    T reg4=reg2*reg0; T reg5=reg1*reg0; reg3=reg4+reg3; T reg6=elem.pos(2)[1]-elem.pos(0)[1]; T reg7=elem.pos(2)[0]-elem.pos(0)[0];
    T reg8=elem.pos(1)[1]-elem.pos(0)[1]; T reg9=elem.pos(1)[0]-elem.pos(0)[0]; T reg10=pow(reg2,2); T reg11=reg2*reg5; T reg12=reg3*reg1;
    T reg13=reg9*reg6; T reg14=reg8*reg7; T reg15=pow(reg1,2); reg12=reg11+reg12; reg11=reg2*reg4;
    T reg16=reg2*reg10; T reg17=reg1*reg5; reg14=reg13-reg14; reg15=reg10-reg15; reg17=reg11-reg17;
    reg11=2*reg2; reg12=reg16-reg12; reg13=reg15*reg12; reg16=pow(reg17,2); reg11=reg1*reg11;
    T reg18=reg9/reg14; T reg19=reg8/reg14; reg7=reg7/reg14; reg6=reg6/reg14; T reg20=reg4*reg12;
    reg13=reg13/reg16; T reg21=reg7-reg18; T reg22=reg19-reg6; T reg23=reg11/reg17; reg12=reg5*reg12;
    T reg24=0.5*reg22; T reg25=0.5*reg21; reg3=reg3/reg17; reg10=reg10/reg17; reg20=reg20/reg16;
    reg16=reg12/reg16; reg23=reg13+reg23; reg12=reg25*reg23; reg16=reg3-reg16; reg3=reg24*reg23;
    reg13=0.5*reg7; reg20=reg10-reg20; reg10=reg21*reg20; T reg26=reg22*reg20; T reg27=0.5*reg6;
    T reg28=0.5*reg18; T reg29=0.5*reg19; T reg30=2*reg12; T reg31=reg13*reg23; T reg32=reg21*reg16;
    T reg33=reg22*reg16; T reg34=2*reg3; T reg35=reg7*reg33; T reg36=reg24*reg30; T reg37=reg19*reg26;
    T reg38=reg28*reg30; T reg39=reg6*reg32; T reg40=reg13*reg30; T reg41=reg27*reg23; T reg42=reg27*reg30;
    T reg43=reg28*reg34; T reg44=reg19*reg32; T reg45=reg13*reg34; T reg46=reg29*reg34; T reg47=reg18*reg10;
    T reg48=reg27*reg34; T reg49=reg25*reg30; reg32=reg22*reg32; T reg50=reg25*reg34; T reg51=reg29*reg30;
    T reg52=reg6*reg20; T reg53=2*reg31; T reg54=reg18*reg33; T reg55=reg7*reg10; reg33=reg21*reg33;
    T reg56=reg6*reg16; T reg57=reg6*reg26; T reg58=reg24*reg34; reg26=reg22*reg26; reg10=reg21*reg10;
    reg35=reg42+reg35; reg55=reg48+reg55; reg39=reg39+reg45; reg33=reg33-reg36; reg57=reg57+reg40;
    reg10=reg10-reg58; T reg59=reg21*reg56; T reg60=reg24*reg53; T reg61=reg7*reg20; reg26=reg26-reg49;
    T reg62=reg19*reg52; T reg63=reg28*reg53; T reg64=reg25*reg53; reg44=reg43+reg44; T reg65=2*reg41;
    T reg66=reg22*reg52; T reg67=reg7*reg16; reg37=reg38+reg37; reg54=reg54+reg51; reg32=reg32-reg50;
    T reg68=reg28*reg23; reg52=reg6*reg52; reg47=reg47+reg46; T reg69=reg13*reg53; T reg70=reg7*reg56;
    reg56=reg18*reg56; T reg71=reg27*reg53; T reg72=reg29*reg53; reg54=reg14*reg54; reg47=reg14*reg47;
    T reg73=reg19*reg67; reg56=reg56-reg72; T reg74=reg21*reg61; T reg75=reg18*reg61; T reg76=reg28*reg65;
    reg62=reg62-reg63; T reg77=reg19*reg16; T reg78=reg14*reg44; T reg79=reg14*reg37; reg61=reg7*reg61;
    reg57=reg14*reg57; T reg80=reg27*reg65; reg70=reg70-reg71; reg39=reg14*reg39; T reg81=reg29*reg65;
    T reg82=reg14*reg35; T reg83=reg14*reg55; T reg84=reg29*reg23; T reg85=reg19*reg20; T reg86=2*reg68;
    reg33=reg14*reg33; reg10=reg14*reg10; reg32=reg14*reg32; T reg87=reg22*reg67; T reg88=reg25*reg65;
    T reg89=reg24*reg65; reg52=reg52-reg69; reg59=reg59+reg60; reg26=reg14*reg26; reg67=reg6*reg67;
    reg66=reg66+reg64; T reg90=reg13*reg65; reg16=reg18*reg16; T reg91=ponderation*reg82; reg47=ponderation*reg47;
    T reg92=reg6*reg85; T reg93=reg22*reg85; T reg94=ponderation*reg83; reg67=reg67-reg90; T reg95=reg25*reg86;
    reg70=reg14*reg70; T reg96=reg13*reg86; reg54=ponderation*reg54; reg62=reg14*reg62; reg61=reg61-reg80;
    T reg97=ponderation*reg78; reg52=reg14*reg52; T reg98=reg27*reg86; T reg99=reg7*reg77; reg32=ponderation*reg32;
    reg85=reg19*reg85; T reg100=reg28*reg86; reg73=reg73-reg76; reg87=reg88+reg87; T reg101=ponderation*reg79;
    reg66=reg14*reg66; reg26=ponderation*reg26; reg59=reg14*reg59; reg74=reg89+reg74; T reg102=reg24*reg86;
    reg10=ponderation*reg10; T reg103=reg21*reg77; reg20=reg18*reg20; reg33=ponderation*reg33; reg57=ponderation*reg57;
    reg56=reg14*reg56; reg75=reg75-reg81; reg77=reg18*reg77; T reg104=reg29*reg86; T reg105=2*reg84;
    reg39=ponderation*reg39; reg47=vectors[0][indices[0]+1]*reg47; reg62=ponderation*reg62; reg56=ponderation*reg56; reg54=vectors[0][indices[0]+0]*reg54;
    T reg106=vectors[0][indices[0]+1]*reg97; reg52=ponderation*reg52; reg77=reg77-reg104; T reg107=reg18*reg20; reg75=reg14*reg75;
    T reg108=vectors[0][indices[0]+0]*reg101; T reg109=vectors[0][indices[0]+1]*reg94; reg73=reg14*reg73; T reg110=vectors[0][indices[0]+0]*reg91; T reg111=reg29*reg105;
    reg85=reg85-reg100; T reg112=reg28*reg105; T reg113=reg19*reg16; reg67=reg14*reg67; reg39=vectors[0][indices[0]+1]*reg39;
    reg57=vectors[0][indices[0]+0]*reg57; reg10=vectors[0][indices[0]+1]*reg10; reg33=vectors[0][indices[0]+0]*reg33; reg32=vectors[0][indices[0]+1]*reg32; reg26=vectors[0][indices[0]+0]*reg26;
    reg59=ponderation*reg59; T reg114=reg14*reg74; T reg115=reg21*reg20; T reg116=reg24*reg105; reg103=reg102+reg103;
    T reg117=reg25*reg105; reg92=reg92-reg96; T reg118=reg6*reg16; T reg119=reg13*reg105; reg16=reg22*reg16;
    reg93=reg95+reg93; reg70=ponderation*reg70; reg61=reg14*reg61; reg99=reg99-reg98; reg66=ponderation*reg66;
    T reg120=reg27*reg105; T reg121=reg14*reg87; reg20=reg7*reg20; reg73=ponderation*reg73; T reg122=vectors[0][indices[1]+0]*reg62;
    reg77=reg14*reg77; reg16=reg16+reg117; reg107=reg107-reg111; reg32=reg26+reg32; reg66=vectors[0][indices[1]+0]*reg66;
    reg109=reg110+reg109; reg26=vectors[0][indices[1]+0]*reg70; reg115=reg115+reg116; reg10=reg33+reg10; reg59=vectors[0][indices[1]+0]*reg59;
    reg33=reg14*reg103; reg56=vectors[0][indices[1]+0]*reg56; reg47=reg54+reg47; reg67=ponderation*reg67; reg39=reg57+reg39;
    reg52=vectors[0][indices[1]+0]*reg52; reg106=reg108+reg106; reg92=reg14*reg92; reg75=ponderation*reg75; reg113=reg113-reg112;
    reg85=reg14*reg85; reg20=reg20-reg120; reg118=reg118-reg119; reg54=reg14*reg93; reg57=ponderation*reg114;
    reg99=reg14*reg99; reg61=ponderation*reg61; reg108=ponderation*reg121; reg73=vectors[0][indices[1]+1]*reg73; reg59=reg10+reg59;
    reg10=vectors[0][indices[1]+1]*reg57; reg85=ponderation*reg85; reg61=vectors[0][indices[1]+1]*reg61; reg56=reg47+reg56; reg99=ponderation*reg99;
    reg113=reg14*reg113; reg52=reg39+reg52; reg39=vectors[0][indices[1]+1]*reg67; reg47=ponderation*reg33; reg115=reg14*reg115;
    reg110=vectors[0][indices[1]+1]*reg75; reg109=reg26+reg109; reg26=vectors[0][indices[1]+1]*reg108; reg66=reg32+reg66; reg32=ponderation*reg54;
    reg106=reg122+reg106; reg92=ponderation*reg92; reg20=reg14*reg20; reg118=reg14*reg118; reg107=reg14*reg107;
    reg16=reg14*reg16; reg77=ponderation*reg77; reg106=reg73-reg106; reg85=vectors[0][indices[2]+0]*reg85; reg99=vectors[0][indices[2]+0]*reg99;
    reg109=reg61-reg109; reg20=ponderation*reg20; reg113=ponderation*reg113; reg118=ponderation*reg118; reg107=ponderation*reg107;
    reg16=ponderation*reg16; reg115=ponderation*reg115; reg61=vectors[0][indices[2]+0]*reg32; reg26=reg66-reg26; reg110=reg56-reg110;
    reg56=vectors[0][indices[2]+0]*reg77; reg66=vectors[0][indices[2]+0]*reg47; reg10=reg59-reg10; reg59=vectors[0][indices[2]+0]*reg92; reg39=reg52-reg39;
    reg85=reg106+reg85; reg52=vectors[0][indices[2]+1]*reg113; reg107=vectors[0][indices[2]+1]*reg107; reg56=reg110-reg56; reg73=vectors[0][indices[2]+1]*reg20;
    reg99=reg109+reg99; reg59=reg39-reg59; reg118=vectors[0][indices[2]+1]*reg118; reg66=reg10-reg66; reg115=vectors[0][indices[2]+1]*reg115;
    reg61=reg26-reg61; reg16=vectors[0][indices[2]+1]*reg16; reg73=reg99-reg73; reg59=reg118+reg59; reg52=reg85-reg52;
    reg66=reg115+reg66; reg61=reg16+reg61; reg56=reg107+reg56; sollicitation[indices[1]+1]+=-reg73; sollicitation[indices[2]+0]+=-reg52;
    sollicitation[indices[2]+1]+=-reg56; sollicitation[indices[1]+0]+=-reg59; sollicitation[indices[0]+1]+=-reg66; sollicitation[indices[0]+0]+=-reg61;
  #undef PNODE
}
// 
#ifndef ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
#define ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz>
void add_nodal_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const typename TM::TNode &node,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) node
  /* (*f.m).poisson_ratio */  #undef PNODE
}
#endif
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Triangle,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}

#ifndef elasticity_dep_read_material_to_mesh
#define elasticity_dep_read_material_to_mesh
template<class TM, class T, bool wont_add_nz>
void read_material_to_mesh_(const XmlNode &n, Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f){ 
    if(n.has_attribute("f_vol"))  
        n.get_attribute("f_vol", f.m->f_vol ); 
    else  
        std::cerr << "Warning using default value of f_vol : " << f.m->f_vol << std::endl; 

    if(n.has_attribute("lim_cond_0"))  
        n.get_attribute("lim_cond_0", f.m->lim_cond_0 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_0 : " << f.m->lim_cond_0 << std::endl; 

    if(n.has_attribute("lim_cond_1"))  
        n.get_attribute("lim_cond_1", f.m->lim_cond_1 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_1 : " << f.m->lim_cond_1 << std::endl; 

    if(n.has_attribute("poisson_ratio"))  
        n.get_attribute("poisson_ratio", f.m->poisson_ratio ); 
    else  
        std::cerr << "Warning using default value of poisson_ratio : " << f.m->poisson_ratio << std::endl; 

    if(n.has_attribute("elastic_modulus"))  
        n.get_attribute("elastic_modulus", f.m->elastic_modulus ); 
    else  
        std::cerr << "Warning using default value of elastic_modulus : " << f.m->elastic_modulus << std::endl; 

    if(n.has_attribute("density"))  
        n.get_attribute("density", f.m->density ); 
    else  
        std::cerr << "Warning using default value of density : " << f.m->density << std::endl; 

  };
#endif // elasticity_dep_read_material_to_mesh
} // namespace LMT


#include "formulation/formulation.h"
namespace LMT {
#ifndef ELASTICITY_DEP_2_NUM_0_CARAC_H
#define ELASTICITY_DEP_2_NUM_0_CARAC_H
#ifndef STRUCT_ELASTICITY_DEP
#define STRUCT_ELASTICITY_DEP
struct elasticity_dep {
  static const char *name() { return "elasticity_dep"; }
};
#endif // ELASTICITY_DEP

template<class P_T>
class CaracFormulation<elasticity_dep,2,P_T>  {
public:
  typedef P_T T;
  static const char *name() { return "elasticity_dep"; }
  static const bool matrix_will_be_definite_positive=true;
  static const bool has_nodal_matrix = true;
  static const bool has_IS_contact_matrix=false;
  static const bool need_skin_assembly=false;
  typedef Norm1_is_inf Name_convergence_criterium;
  static const unsigned nb_vectors = 4;
  static const unsigned nb_matrices = 1;
  static const unsigned auto_contact = false;
  static const bool friction_coeff_is_a_nodal_variable = 0;
  static const unsigned offset_of_pos_unknown=3;
  static const unsigned pos_is_an_unknown = false;
  static const unsigned nb_der_var = 1;
  template<class TF> static void add_to_der_vars( TF &f, const Vec<T> &v ) {
      (*f.m).poisson_ratio += v[ 0 ];
  }
  static bool is_unknown(const std::string &s) { return (s=="dep"); }
  static unsigned num_in_vec_unknown(const std::string &s) { if ( s=="dep" )return 0; return 0;  }
  template<unsigned num_mat,unsigned inner=0> struct NodalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  template<unsigned num_mat,unsigned inner=0> struct GlobalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  
  static const unsigned nb_nodal_unknowns = 2;
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
    node.dep[0]=vecs[0][indice+0]; node.dep[1]=vecs[0][indice+1];
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
    node.dep[1]=vecs[0][indice+1]; node.dep[0]=vecs[0][indice+0];
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
    vecs[0][indice+1]=node.dep[1]; vecs[1][indice+1]=node.dep[1]; vecs[2][indice+1]=node.dep[1]; vecs[3][indice+1]=node.dep[1]; vecs[4][indice+1]=node.dep[1];
    vecs[0][indice+0]=node.dep[0]; vecs[1][indice+0]=node.dep[0]; vecs[2][indice+0]=node.dep[0]; vecs[3][indice+0]=node.dep[0]; vecs[4][indice+0]=node.dep[0];
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    T reg0=vecs[1][indice+0]-vecs[0][indice+0]; T reg1=vecs[1][indice+1]-vecs[0][indice+1]; reg1=abs(reg1); reg0=abs(reg0); return max(reg1,reg0);
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
    old_vec[indice+1]=vecs[1][indice+1]; old_vec[indice+0]=vecs[1][indice+0];
  }
  
  static const unsigned nb_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_nodal_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};
#endif // ELASTICITY_DEP_2_NUM_0_CARAC_H
extern "C" void apply_on_elements_after_solve_0_elasticity_dep_Quad_0( double * );
extern "C" void apply_on_elements_after_solve_1_elasticity_dep_Quad_1( double * );
extern "C" void apply_on_elements_after_solve_2_elasticity_dep_Quad_2( double * );
extern "C" void apply_on_elements_after_solve_3_elasticity_dep_Quad_3( double * );
extern "C" void apply_on_elements_after_solve_4_elasticity_dep_Quad_4( double * );
extern "C" void apply_on_elements_after_solve_5_elasticity_dep_Quad_5( double * );
class Quad;
template<unsigned A,class B,class C> class Node;
template<class A,class B,class C,class D,unsigned E> class Element;

// Carac for ...
template<class P_T_pos,class P_ND,class TED,unsigned nim,class TM,class T>
class CaracFormulationForElement<elasticity_dep,Element<Quad,DefaultBehavior,Node<2,P_T_pos,P_ND>,TED,nim>,TM,T> {
public:
    template<unsigned num_mat,unsigned inner=0> struct ElemMatricesCarac {
        static const bool symm = true;
        static const bool herm = false;
        static const bool diag = false;
        static const bool linear = true;
    };
    static const unsigned order_integration = 2;
    static const bool has_elementary_matrix = true;
    static const bool has_skin_elementary_matrix = true;
    template<class TE,class TF, class TVEVE> static void after_solve(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
    T reg0=0.5*elem.pos(1)[0]; T reg1=0.5*elem.pos(0)[0]; T reg2=0.5*elem.pos(1)[1]; T reg3=0.5*elem.pos(0)[1]; T reg4=reg0-reg1;
    T reg5=0.5*elem.pos(2)[0]; T reg6=0.5*elem.pos(2)[1]; T reg7=reg2+reg3; reg3=reg2-reg3; reg1=reg0+reg1;
    reg3=reg6+reg3; reg0=0.5*elem.pos(3)[1]; reg7=reg6-reg7; reg1=reg5-reg1; reg2=0.5*elem.pos(3)[0];
    reg5=reg4+reg5; reg4=0.5*vectors[0][indices[0]+0]; reg6=0.5*vectors[0][indices[1]+0]; reg1=reg2+reg1; reg2=reg5-reg2;
    reg5=0.5*vectors[0][indices[1]+1]; T reg8=0.5*vectors[0][indices[0]+1]; reg7=reg7+reg0; reg0=reg3-reg0; reg3=0.5*vectors[0][indices[2]+1];
    T reg9=1+(*f.m).poisson_ratio; T reg10=reg2*reg7; T reg11=reg0*reg1; T reg12=reg5-reg8; T reg13=reg6-reg4;
    T reg14=0.5*vectors[0][indices[2]+0]; reg4=reg6+reg4; reg5=reg8+reg5; reg12=reg3+reg12; reg11=reg10-reg11;
    reg13=reg13+reg14; reg9=reg9/(*f.m).elastic_modulus; reg6=0.5*vectors[0][indices[3]+0]; reg4=reg14-reg4; reg8=1.0/(*f.m).elastic_modulus;
    reg10=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg5=reg3-reg5; reg3=0.5*vectors[0][indices[3]+1]; reg4=reg6+reg4; reg0=reg0/reg11;
    reg6=reg13-reg6; reg5=reg5+reg3; reg7=reg7/reg11; reg3=reg12-reg3; reg1=reg1/reg11;
    reg12=reg9*reg8; reg13=reg9*reg10; reg11=reg2/reg11; reg2=reg1*reg6; reg14=reg11*reg4;
    T reg15=reg5*reg0; T reg16=reg3*reg7; T reg17=reg8*reg12; T reg18=reg10*reg13; reg2=reg14-reg2;
    reg15=reg16-reg15; reg4=reg0*reg4; reg6=reg7*reg6; reg0=pow(reg10,2); reg7=pow(reg8,2);
    reg18=reg17-reg18; reg3=reg1*reg3; reg11=reg5*reg11; reg12=reg12/reg18; reg0=reg7-reg0;
    reg13=reg13/reg18; reg4=reg6-reg4; elem.epsilon[0][0]=reg4; reg2=reg15+reg2; reg3=reg11-reg3;
    elem.epsilon[0][1]=reg3; reg2=0.5*reg2; elem.epsilon[0][2]=reg2; reg1=reg13*reg3; reg5=reg12*reg3;
    reg6=reg13*reg4; reg7=reg12*reg4; reg18=reg0/reg18; elem.sigma[0][2]=reg18*reg2; elem.tr_epsilon=reg3+reg4;
    elem.sigma[0][1]=reg6+reg5; elem.sigma[0][0]=reg1+reg7;
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_2(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_3(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_4(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_5(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_6(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
  
  static const unsigned nb_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};

// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=elem.pos(1)[1]*var_inter[0]; T reg3=elem.pos(0)[0]*reg1; T reg4=reg0*elem.pos(0)[1];
    T reg5=reg1*elem.pos(1)[0]; T reg6=reg1*elem.pos(1)[1]; T reg7=reg1*elem.pos(0)[1]; T reg8=elem.pos(0)[0]*reg0; T reg9=elem.pos(1)[0]*var_inter[0];
    reg6=reg6-reg7; T reg10=var_inter[1]*elem.pos(2)[0]; reg5=reg5-reg3; T reg11=var_inter[1]*elem.pos(2)[1]; T reg12=reg8+reg9;
    T reg13=elem.pos(2)[0]*var_inter[0]; T reg14=elem.pos(2)[1]*var_inter[0]; T reg15=reg2+reg4; T reg16=elem.pos(3)[0]*reg0; reg13=reg13-reg12;
    T reg17=var_inter[1]*elem.pos(3)[1]; reg11=reg6+reg11; reg14=reg14-reg15; reg6=elem.pos(3)[1]*reg0; reg10=reg5+reg10;
    reg5=var_inter[1]*elem.pos(3)[0]; reg16=reg13+reg16; reg11=reg11-reg17; reg6=reg14+reg6; reg10=reg10-reg5;
    reg13=1+(*f.m).poisson_ratio; reg14=reg11*reg16; T reg18=reg10*reg6; T reg19=1.0/(*f.m).elastic_modulus; reg14=reg18-reg14;
    reg18=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg13=reg13/(*f.m).elastic_modulus; reg16=reg16/reg14; reg11=reg11/reg14; reg10=reg10/reg14;
    reg6=reg6/reg14; T reg20=reg13*reg19; T reg21=reg13*reg18; T reg22=reg18*reg21; T reg23=pow(reg19,2);
    T reg24=pow(reg18,2); T reg25=reg1*reg6; T reg26=reg19*reg20; T reg27=reg0*reg11; T reg28=reg0*reg10;
    T reg29=reg1*reg16; T reg30=var_inter[0]*reg10; T reg31=var_inter[0]*reg11; T reg32=var_inter[1]*reg16; T reg33=var_inter[1]*reg6;
    T reg34=reg29+reg30; T reg35=reg25+reg31; reg24=reg23-reg24; reg22=reg26-reg22; reg23=reg28+reg32;
    reg26=reg27+reg33; T reg36=reg33-reg31; T reg37=0.5*reg26; T reg38=0.5*reg35; T reg39=0.5*reg34;
    reg24=reg24/reg22; T reg40=0.5*reg23; T reg41=elem.proute[0](1,1)+elem.proute[1](1,1); T reg42=reg27-reg25; T reg43=reg30-reg32;
    T reg44=reg29-reg28; T reg45=reg24*reg39; T reg46=reg24*reg37; T reg47=0.5*reg42; T reg48=reg24*reg40;
    T reg49=0.5*reg44; T reg50=0.5*reg43; reg41=elem.proute[2](1,1)+reg41; reg21=reg21/reg22; reg22=reg20/reg22;
    reg20=0.5*reg36; T reg51=reg24*reg38; T reg52=2*reg45; T reg53=reg21*reg34; T reg54=reg22*reg26;
    T reg55=reg22*reg35; T reg56=reg24*reg50; T reg57=reg24*reg20; reg51=2*reg51; reg41=elem.proute[3](1,1)+reg41;
    T reg58=reg22*reg23; T reg59=reg21*reg26; T reg60=reg24*reg49; T reg61=reg22*reg34; reg48=2*reg48;
    T reg62=reg21*reg23; T reg63=reg24*reg47; T reg64=2*reg46; T reg65=reg21*reg35; T reg66=reg22*reg44;
    T reg67=reg21*reg36; T reg68=reg34*reg65; T reg69=reg52*reg38; T reg70=reg39*reg48; reg56=2*reg56;
    T reg71=reg21*reg43; T reg72=reg35*reg54; T reg73=reg39*reg51; T reg74=reg35*reg53; T reg75=reg22*reg43;
    T reg76=reg21*reg42; T reg77=reg38*reg64; reg57=2*reg57; T reg78=reg55*reg26; T reg79=reg52*reg40;
    T reg80=reg34*reg58; T reg81=reg1*reg0; T reg82=reg23*reg61; T reg83=reg51*reg37; T reg84=reg41+(*f.m).f_vol[0];
    T reg85=reg23*reg59; T reg86=reg22*reg42; T reg87=reg48*reg37; T reg88=var_inter[1]*reg0; T reg89=reg26*reg62;
    T reg90=var_inter[1]*var_inter[0]; T reg91=reg40*reg64; reg63=2*reg63; reg60=2*reg60; T reg92=reg21*reg44;
    T reg93=reg1*var_inter[0]; T reg94=reg22*reg36; reg41=reg41+(*f.m).f_vol[1]; reg87=reg85+reg87; T reg95=reg34*reg59;
    T reg96=reg34*reg75; reg80=reg77+reg80; T reg97=reg90*reg84; T reg98=reg86*reg36; T reg99=reg60*reg50;
    T reg100=reg92*reg36; T reg101=reg63*reg50; T reg102=reg55*reg36; T reg103=reg52*reg50; T reg104=reg53*reg36;
    T reg105=reg51*reg50; T reg106=reg36*reg94; T reg107=reg50*reg56; T reg108=reg36*reg71; T reg109=reg37*reg64;
    reg73=reg74+reg73; T reg110=reg35*reg94; T reg111=reg39*reg56; T reg112=reg35*reg71; T reg113=reg39*reg57;
    reg70=reg72+reg70; T reg114=reg35*reg62; T reg115=reg39*reg64; T reg116=reg93*reg41; T reg117=reg60*reg38;
    T reg118=reg34*reg76; T reg119=reg63*reg38; T reg120=reg26*reg54; T reg121=reg23*reg58; reg68=reg69+reg68;
    T reg122=reg38*reg51; T reg123=reg34*reg61; T reg124=reg38*reg56; T reg125=reg34*reg67; T reg126=reg38*reg57;
    T reg127=reg20*reg48; T reg128=reg43*reg58; T reg129=reg20*reg64; T reg130=reg88*reg84; T reg131=reg60*reg40;
    T reg132=reg52*reg37; T reg133=reg23*reg65; T reg134=reg86*reg26; T reg135=reg63*reg37; T reg136=reg23*reg66;
    T reg137=reg63*reg40; T reg138=reg92*reg26; T reg139=reg60*reg37; T reg140=reg23*reg76; T reg141=reg88*reg41;
    reg89=reg91+reg89; reg78=reg79+reg78; T reg142=reg51*reg40; T reg143=reg53*reg26; T reg144=reg56*reg40;
    T reg145=reg94*reg26; T reg146=reg40*reg48; T reg147=reg71*reg26; T reg148=reg57*reg40; T reg149=reg50*reg57;
    T reg150=reg36*reg54; T reg151=reg50*reg48; T reg152=reg57*reg37; T reg153=reg36*reg62; T reg154=reg50*reg64;
    T reg155=reg90*reg41; T reg156=reg43*reg76; T reg157=reg60*reg20; T reg158=reg23*reg75; T reg159=reg43*reg66;
    T reg160=reg63*reg20; T reg161=reg43*reg65; T reg162=reg52*reg20; T reg163=reg43*reg61; T reg164=reg56*reg37;
    T reg165=reg51*reg20; T reg166=reg43*reg67; T reg167=reg56*reg20; T reg168=reg43*reg75; T reg169=reg20*reg57;
    T reg170=reg43*reg59; T reg171=reg23*reg67; reg83=reg82+reg83; T reg172=reg81*reg41; reg76=reg44*reg76;
    T reg173=reg60*reg47; T reg174=reg44*reg66; T reg175=reg47*reg63; reg65=reg44*reg65; T reg176=reg47*reg52;
    reg66=reg34*reg66; T reg177=reg44*reg61; T reg178=reg47*reg51; reg67=reg44*reg67; T reg179=reg47*reg56;
    reg75=reg44*reg75; T reg180=reg47*reg57; T reg181=reg44*reg59; T reg182=reg47*reg48; reg58=reg44*reg58;
    T reg183=reg47*reg64; T reg184=reg81*reg84; T reg185=reg42*reg86; T reg186=reg49*reg60; T reg187=reg42*reg92;
    T reg188=reg49*reg63; T reg189=reg42*reg55; T reg190=reg49*reg52; T reg191=reg42*reg53; reg51=reg49*reg51;
    reg94=reg42*reg94; reg56=reg49*reg56; reg71=reg42*reg71; reg57=reg49*reg57; T reg192=reg42*reg54;
    T reg193=reg49*reg48; reg62=reg42*reg62; T reg194=reg49*reg64; T reg195=reg39*reg52; reg60=reg60*reg39;
    reg55=reg35*reg55; reg48=reg38*reg48; reg63=reg63*reg39; reg86=reg86*reg35; T reg196=reg93*reg84;
    reg92=reg92*reg35; reg121=reg121+reg109; reg138=reg137-reg138; reg105=reg105-reg104; reg196=(*f.m).density*reg196;
    reg57=reg71+reg57; reg102=reg102-reg103; reg178=reg178-reg177; reg111=reg110-reg111; reg71=reg14*reg78;
    reg173=reg76+reg173; reg101=reg100+reg101; reg188=reg187+reg188; reg114=reg114+reg115; reg127=reg127-reg170;
    reg142=reg142+reg143; reg184=(*f.m).density*reg184; reg157=reg156+reg157; reg60=reg86-reg60; reg155=(*f.m).density*reg155;
    reg175=reg174+reg175; reg55=reg55+reg195; reg193=reg193-reg192; reg153=reg153-reg154; reg130=(*f.m).density*reg130;
    reg76=reg14*reg87; reg128=reg128-reg129; reg151=reg151-reg150; reg86=reg14*reg70; reg134=reg131-reg134;
    reg100=reg14*reg83; reg149=reg108+reg149; reg65=reg65-reg176; reg160=reg159+reg160; reg107=reg106+reg107;
    reg51=reg51-reg191; reg125=reg124-reg125; reg116=(*f.m).density*reg116; reg169=reg168+reg169; reg122=reg122+reg123;
    reg182=reg182-reg181; reg106=reg14*reg89; reg186=reg185+reg186; reg135=reg136-reg135; reg108=reg14*reg68;
    reg167=reg166+reg167; reg141=(*f.m).density*reg141; reg118=reg117-reg118; reg62=reg62-reg194; reg189=reg189-reg190;
    reg66=reg119-reg66; reg146=reg120+reg146; reg58=reg58-reg183; reg139=reg140-reg139; reg110=reg14*reg73;
    reg99=reg98+reg99; reg161=reg161-reg162; reg179=reg67+reg179; reg97=(*f.m).density*reg97; reg164=reg171-reg164;
    reg56=reg94+reg56; reg67=reg14*reg80; reg145=reg144-reg145; reg113=reg112-reg113; reg133=reg133+reg132;
    reg63=reg92-reg63; reg48=reg48+reg95; reg180=reg75+reg180; reg152=reg158-reg152; reg147=reg148-reg147;
    reg96=reg126-reg96; reg172=(*f.m).density*reg172; reg165=reg165-reg163; reg127=reg14*reg127; reg193=reg14*reg193;
    reg186=reg14*reg186; reg169=reg14*reg169; reg62=reg14*reg62; reg164=reg14*reg164; reg139=reg14*reg139;
    reg189=reg14*reg189; reg63=reg14*reg63; reg75=ponderation*reg106; reg92=ponderation*reg110; reg135=reg14*reg135;
    reg146=reg14*reg146; reg51=reg14*reg51; reg147=reg14*reg147; reg188=reg14*reg188; reg145=reg14*reg145;
    reg133=reg14*reg133; reg142=reg14*reg142; reg56=reg14*reg56; reg94=ponderation*reg71; reg111=reg14*reg111;
    reg138=reg14*reg138; reg57=reg14*reg57; reg134=reg14*reg134; reg98=ponderation*reg100; reg128=reg14*reg128;
    reg121=reg14*reg121; reg105=reg14*reg105; reg112=reg14*reg130; reg117=ponderation*reg108; reg102=reg14*reg102;
    reg178=reg14*reg178; reg119=reg14*reg184; reg101=reg14*reg101; reg182=reg14*reg182; reg124=reg14*reg172;
    reg99=reg14*reg99; reg114=reg14*reg114; reg179=reg14*reg179; reg122=reg14*reg122; reg126=ponderation*reg67;
    reg131=reg14*reg196; reg136=reg14*reg155; reg137=reg14*reg116; reg48=reg14*reg48; reg125=reg14*reg125;
    reg96=reg14*reg96; reg180=reg14*reg180; reg140=reg14*reg97; reg118=reg14*reg118; reg167=reg14*reg167;
    reg113=reg14*reg113; reg165=reg14*reg165; reg152=reg14*reg152; reg161=reg14*reg161; reg60=reg14*reg60;
    reg58=reg14*reg58; reg160=reg14*reg160; reg66=reg14*reg66; reg173=reg14*reg173; reg55=reg14*reg55;
    reg157=reg14*reg157; reg144=reg14*reg141; reg153=reg14*reg153; reg175=reg14*reg175; reg148=ponderation*reg76;
    reg151=reg14*reg151; reg156=ponderation*reg86; reg149=reg14*reg149; reg65=reg14*reg65; reg107=reg14*reg107;
    reg158=ponderation*reg136; sollicitation[indices[2]+1]+=reg158; reg159=ponderation*reg112; sollicitation[indices[3]+0]+=reg159; reg166=ponderation*reg144;
    sollicitation[indices[3]+1]+=reg166; matrix(indices[3]+1,indices[0]+1)+=ponderation*reg135; reg135=ponderation*reg140; sollicitation[indices[2]+0]+=reg135; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg188;
    reg168=ponderation*reg137; sollicitation[indices[1]+1]+=reg168; reg171=ponderation*reg131; sollicitation[indices[1]+0]+=reg171; reg174=ponderation*reg124;
    sollicitation[indices[0]+1]+=reg174; matrix(indices[3]+1,indices[1]+0)+=ponderation*reg133; reg133=ponderation*reg119; sollicitation[indices[0]+0]+=reg133; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg121;
    matrix(indices[1]+0,indices[0]+1)+=ponderation*reg63; matrix(indices[3]+1,indices[3]+0)+=-reg148; matrix(indices[3]+1,indices[1]+1)+=-reg98; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg186; matrix(indices[3]+1,indices[2]+1)+=ponderation*reg152;
    matrix(indices[1]+0,indices[1]+0)+=ponderation*reg55; matrix(indices[3]+1,indices[2]+0)+=ponderation*reg164; matrix(indices[2]+1,indices[0]+0)+=ponderation*reg157; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg153; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg175;
    matrix(indices[2]+0,indices[3]+0)+=ponderation*reg151; matrix(indices[2]+0,indices[2]+1)+=ponderation*reg149; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg107; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg65; matrix(indices[1]+0,indices[3]+0)+=-reg156;
    matrix(indices[2]+0,indices[1]+1)+=ponderation*reg105; matrix(indices[2]+0,indices[1]+0)+=ponderation*reg102; matrix(indices[2]+0,indices[0]+1)+=ponderation*reg101; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg178; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg99;
    matrix(indices[1]+1,indices[3]+1)+=-reg126; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg179; matrix(indices[1]+0,indices[3]+1)+=ponderation*reg114; matrix(indices[1]+1,indices[3]+0)+=ponderation*reg48; matrix(indices[1]+1,indices[2]+1)+=ponderation*reg96;
    matrix(indices[0]+1,indices[2]+1)+=ponderation*reg180; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg125; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg122; matrix(indices[1]+1,indices[1]+0)+=-reg117; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg182;
    matrix(indices[0]+1,indices[3]+1)+=ponderation*reg58; matrix(indices[1]+1,indices[0]+1)+=ponderation*reg66; matrix(indices[1]+1,indices[0]+0)+=ponderation*reg118; matrix(indices[3]+1,indices[0]+0)+=ponderation*reg139; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg189;
    matrix(indices[3]+0,indices[3]+1)+=-reg75; matrix(indices[1]+0,indices[1]+1)+=-reg92; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg146; matrix(indices[3]+0,indices[2]+1)+=ponderation*reg147; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg51;
    matrix(indices[3]+0,indices[2]+0)+=ponderation*reg145; matrix(indices[3]+0,indices[1]+1)+=ponderation*reg142; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg56; matrix(indices[3]+0,indices[1]+0)+=-reg94; matrix(indices[3]+0,indices[0]+1)+=ponderation*reg138;
    matrix(indices[0]+0,indices[2]+1)+=ponderation*reg57; matrix(indices[3]+0,indices[0]+0)+=ponderation*reg134; matrix(indices[1]+0,indices[2]+0)+=ponderation*reg111; matrix(indices[2]+1,indices[3]+1)+=ponderation*reg128; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg193;
    matrix(indices[2]+1,indices[3]+0)+=ponderation*reg127; matrix(indices[1]+0,indices[0]+0)+=ponderation*reg60; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg169; matrix(indices[2]+1,indices[2]+0)+=ponderation*reg167; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg62;
    matrix(indices[2]+1,indices[1]+1)+=ponderation*reg165; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg113; matrix(indices[2]+1,indices[1]+0)+=ponderation*reg161; matrix(indices[2]+1,indices[0]+1)+=ponderation*reg160; matrix(indices[0]+1,indices[0]+0)+=ponderation*reg173;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=elem.pos(1)[1]*var_inter[0]; T reg3=elem.pos(0)[0]*reg1; T reg4=reg0*elem.pos(0)[1];
    T reg5=reg1*elem.pos(1)[0]; T reg6=reg1*elem.pos(1)[1]; T reg7=reg1*elem.pos(0)[1]; T reg8=elem.pos(0)[0]*reg0; T reg9=elem.pos(1)[0]*var_inter[0];
    reg6=reg6-reg7; T reg10=var_inter[1]*elem.pos(2)[0]; reg5=reg5-reg3; T reg11=var_inter[1]*elem.pos(2)[1]; T reg12=reg8+reg9;
    T reg13=elem.pos(2)[0]*var_inter[0]; T reg14=elem.pos(2)[1]*var_inter[0]; T reg15=reg2+reg4; T reg16=elem.pos(3)[0]*reg0; reg13=reg13-reg12;
    T reg17=var_inter[1]*elem.pos(3)[1]; reg11=reg6+reg11; reg14=reg14-reg15; reg6=elem.pos(3)[1]*reg0; reg10=reg5+reg10;
    reg5=var_inter[1]*elem.pos(3)[0]; reg16=reg13+reg16; reg11=reg11-reg17; reg6=reg14+reg6; reg10=reg10-reg5;
    reg13=1+(*f.m).poisson_ratio; reg14=reg11*reg16; T reg18=reg10*reg6; T reg19=1.0/(*f.m).elastic_modulus; reg14=reg18-reg14;
    reg18=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg13=reg13/(*f.m).elastic_modulus; T reg20=reg13*reg18; T reg21=reg13*reg19; reg11=reg11/reg14;
    reg6=reg6/reg14; reg16=reg16/reg14; reg10=reg10/reg14; T reg22=reg0*reg10; T reg23=reg0*reg11;
    T reg24=reg1*reg6; T reg25=pow(reg18,2); T reg26=pow(reg19,2); T reg27=reg18*reg20; T reg28=reg19*reg21;
    T reg29=var_inter[0]*reg11; T reg30=var_inter[1]*reg6; T reg31=var_inter[1]*reg16; T reg32=reg22+reg31; T reg33=reg1*reg16;
    reg25=reg26-reg25; reg27=reg28-reg27; reg26=reg23+reg30; reg28=var_inter[0]*reg10; T reg34=reg24+reg29;
    T reg35=0.5*reg26; T reg36=0.5*reg32; T reg37=reg33-reg22; T reg38=reg33+reg28; T reg39=reg23-reg24;
    T reg40=reg30-reg29; reg25=reg25/reg27; T reg41=0.5*reg34; T reg42=elem.proute[0](1,1)+elem.proute[1](1,1); T reg43=reg28-reg31;
    T reg44=0.5*reg40; T reg45=reg25*reg41; T reg46=0.5*reg38; T reg47=0.5*reg39; T reg48=0.5*reg43;
    T reg49=reg25*reg36; T reg50=reg25*reg35; reg42=elem.proute[2](1,1)+reg42; T reg51=0.5*reg37; reg20=reg20/reg27;
    reg27=reg21/reg27; reg45=2*reg45; reg42=elem.proute[3](1,1)+reg42; reg21=reg20*reg38; T reg52=reg27*reg32;
    T reg53=reg25*reg48; T reg54=reg25*reg46; T reg55=reg25*reg51; T reg56=2*reg50; T reg57=reg20*reg32;
    reg49=2*reg49; T reg58=reg25*reg47; T reg59=reg27*reg26; T reg60=reg25*reg44; T reg61=reg46*reg45;
    T reg62=reg27*reg40; T reg63=reg46*reg49; T reg64=reg34*reg21; T reg65=reg20*reg40; T reg66=reg34*reg59;
    T reg67=reg27*reg37; T reg68=reg20*reg34; T reg69=reg20*reg43; T reg70=reg41*reg56; reg53=2*reg53;
    T reg71=reg38*reg52; reg60=2*reg60; T reg72=reg27*reg38; T reg73=reg20*reg26; T reg74=reg27*reg43;
    T reg75=reg42+(*f.m).f_vol[1]; reg42=reg42+(*f.m).f_vol[0]; reg58=2*reg58; T reg76=reg27*reg34; T reg77=reg20*reg37;
    T reg78=2*reg54; T reg79=reg1*reg0; T reg80=var_inter[1]*reg0; T reg81=var_inter[1]*var_inter[0]; T reg82=reg27*reg39;
    T reg83=reg26*reg57; T reg84=reg1*var_inter[0]; reg55=2*reg55; T reg85=reg36*reg56; T reg86=reg46*reg60;
    reg83=reg85+reg83; T reg87=reg34*reg69; T reg88=reg46*reg53; T reg89=reg34*reg62; reg61=reg64+reg61;
    T reg90=reg80*reg75; T reg91=reg46*reg78; T reg92=reg34*reg76; T reg93=reg84*reg42; T reg94=reg32*reg52;
    T reg95=reg41*reg49; T reg96=reg47*reg56; T reg97=reg37*reg52; T reg98=reg47*reg49; T reg99=reg37*reg73;
    T reg100=reg47*reg60; T reg101=reg37*reg74; T reg102=reg35*reg56; T reg103=reg47*reg53; T reg104=reg81*reg42;
    T reg105=reg40*reg62; T reg106=reg48*reg53; T reg107=reg40*reg69; reg71=reg70+reg71; T reg108=reg48*reg60;
    T reg109=reg40*reg59; T reg110=reg48*reg49; T reg111=reg40*reg57; T reg112=reg48*reg56; T reg113=reg81*reg75;
    T reg114=reg38*reg73; T reg115=reg38*reg74; T reg116=reg41*reg60; T reg117=reg43*reg74; T reg118=reg44*reg60;
    T reg119=reg43*reg73; T reg120=reg38*reg65; T reg121=reg41*reg53; T reg122=reg38*reg72; T reg123=reg41*reg45;
    T reg124=reg44*reg49; T reg125=reg26*reg59; reg52=reg43*reg52; T reg126=reg44*reg56; T reg127=reg80*reg42;
    T reg128=reg84*reg75; T reg129=reg46*reg56; T reg130=reg34*reg57; reg63=reg66+reg63; T reg131=reg36*reg49;
    T reg132=reg47*reg78; T reg133=reg37*reg68; T reg134=reg39*reg21; T reg135=reg51*reg45; T reg136=reg79*reg42;
    T reg137=reg47*reg58; T reg138=reg37*reg67; T reg139=reg39*reg62; T reg140=reg51*reg53; T reg141=reg79*reg75;
    T reg142=reg39*reg69; T reg143=reg51*reg60; T reg144=reg51*reg56; reg57=reg39*reg57; T reg145=reg39*reg59;
    T reg146=reg51*reg49; T reg147=reg51*reg58; T reg148=reg51*reg55; T reg149=reg47*reg45; T reg150=reg37*reg72;
    T reg151=reg39*reg77; T reg152=reg39*reg76; T reg153=reg39*reg82; T reg154=reg51*reg78; T reg155=reg37*reg65;
    reg143=reg142+reg143; reg123=reg123+reg122; reg52=reg52-reg126; reg148=reg153+reg148; reg131=reg125+reg131;
    reg120=reg121-reg120; reg127=(*f.m).density*reg127; reg128=(*f.m).density*reg128; reg124=reg124-reg119; reg94=reg94+reg102;
    reg115=reg116-reg115; reg95=reg95+reg114; reg140=reg139+reg140; reg147=reg151+reg147; reg118=reg117+reg118;
    reg116=reg14*reg71; reg90=(*f.m).density*reg90; reg113=(*f.m).density*reg113; reg104=(*f.m).density*reg104; reg135=reg135-reg134;
    reg106=reg105+reg106; reg108=reg107+reg108; reg111=reg111-reg112; reg105=reg14*reg83; reg110=reg110-reg109;
    reg136=(*f.m).density*reg136; reg152=reg152-reg154; reg103=reg155+reg103; reg149=reg149-reg150; reg100=reg101+reg100;
    reg98=reg98-reg99; reg133=reg133-reg132; reg97=reg97-reg96; reg93=(*f.m).density*reg93; reg137=reg138+reg137;
    reg92=reg92+reg91; reg141=(*f.m).density*reg141; reg101=reg14*reg61; reg88=reg89-reg88; reg57=reg57-reg144;
    reg86=reg87-reg86; reg130=reg130+reg129; reg87=reg14*reg63; reg146=reg146-reg145; reg108=reg14*reg108;
    reg89=ponderation*reg105; reg107=reg14*reg113; reg152=reg14*reg152; reg97=reg14*reg97; reg110=reg14*reg110;
    reg117=reg14*reg141; reg146=reg14*reg146; reg133=reg14*reg133; reg111=reg14*reg111; reg98=reg14*reg98;
    reg121=reg14*reg127; reg147=reg14*reg147; reg100=reg14*reg100; reg118=reg14*reg118; reg130=reg14*reg130;
    reg149=reg14*reg149; reg124=reg14*reg124; reg131=reg14*reg131; reg138=reg14*reg90; reg103=reg14*reg103;
    reg52=reg14*reg52; reg148=reg14*reg148; reg86=reg14*reg86; reg120=reg14*reg120; reg94=reg14*reg94;
    reg139=reg14*reg93; reg57=reg14*reg57; reg115=reg14*reg115; reg140=reg14*reg140; reg88=reg14*reg88;
    reg95=reg14*reg95; reg142=reg14*reg128; reg151=ponderation*reg101; reg123=reg14*reg123; reg153=ponderation*reg87;
    reg137=reg14*reg137; reg106=reg14*reg106; reg155=reg14*reg136; reg143=reg14*reg143; reg135=reg14*reg135;
    reg92=reg14*reg92; T reg156=reg14*reg104; T reg157=ponderation*reg116; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg94; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg131;
    reg94=ponderation*reg155; sollicitation[indices[0]+0]+=reg94; reg131=ponderation*reg121; sollicitation[indices[3]+0]+=reg131; T reg158=ponderation*reg139;
    sollicitation[indices[1]+0]+=reg158; T reg159=ponderation*reg142; sollicitation[indices[1]+1]+=reg159; T reg160=ponderation*reg117; sollicitation[indices[0]+1]+=reg160;
    T reg161=ponderation*reg138; sollicitation[indices[3]+1]+=reg161; matrix(indices[3]+0,indices[3]+1)+=-reg89; reg89=ponderation*reg156; sollicitation[indices[2]+0]+=reg89;
    T reg162=ponderation*reg107; sollicitation[indices[2]+1]+=reg162; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg103; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg149; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg100;
    matrix(indices[0]+1,indices[1]+0)+=ponderation*reg133; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg98; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg97; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg137; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg92;
    matrix(indices[1]+0,indices[1]+1)+=-reg151; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg57; matrix(indices[1]+0,indices[2]+0)+=ponderation*reg88; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg86; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg146;
    matrix(indices[1]+0,indices[3]+0)+=-reg153; matrix(indices[1]+0,indices[3]+1)+=ponderation*reg130; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg143; matrix(indices[2]+1,indices[3]+1)+=ponderation*reg52; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg148;
    matrix(indices[2]+1,indices[3]+0)+=ponderation*reg124; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg118; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg147; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg111; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg110;
    matrix(indices[0]+0,indices[1]+0)+=ponderation*reg152; matrix(indices[2]+0,indices[2]+1)+=ponderation*reg108; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg106; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg135; matrix(indices[1]+1,indices[3]+1)+=-reg157;
    matrix(indices[1]+1,indices[3]+0)+=ponderation*reg95; matrix(indices[1]+1,indices[2]+1)+=ponderation*reg115; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg140; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg120; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg123;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[1]; T reg1=1-var_inter[0]; T reg2=elem.pos(0)[0]*reg1; T reg3=elem.pos(1)[0]*var_inter[0]; T reg4=reg0*elem.pos(0)[1];
    T reg5=reg0*elem.pos(1)[1]; T reg6=reg0*elem.pos(1)[0]; T reg7=elem.pos(0)[0]*reg0; T reg8=elem.pos(1)[1]*var_inter[0]; T reg9=reg1*elem.pos(0)[1];
    reg6=reg6-reg7; T reg10=var_inter[1]*elem.pos(2)[0]; T reg11=elem.pos(2)[0]*var_inter[0]; T reg12=reg2+reg3; T reg13=reg8+reg9;
    T reg14=elem.pos(2)[1]*var_inter[0]; reg5=reg5-reg4; T reg15=var_inter[1]*elem.pos(2)[1]; T reg16=elem.pos(3)[0]*reg1; reg11=reg11-reg12;
    reg14=reg14-reg13; T reg17=elem.pos(3)[1]*reg1; T reg18=var_inter[1]*elem.pos(3)[1]; reg15=reg5+reg15; reg5=var_inter[1]*elem.pos(3)[0];
    reg10=reg6+reg10; reg17=reg14+reg17; reg16=reg11+reg16; reg10=reg10-reg5; reg15=reg15-reg18;
    reg6=reg10*reg17; reg11=1+(*f.m).poisson_ratio; reg14=reg15*reg16; reg11=reg11/(*f.m).elastic_modulus; T reg19=(*f.m).poisson_ratio/(*f.m).elastic_modulus;
    T reg20=1.0/(*f.m).elastic_modulus; reg14=reg6-reg14; reg6=reg11*reg19; T reg21=reg11*reg20; reg15=reg15/reg14;
    reg16=reg16/reg14; reg10=reg10/reg14; reg17=reg17/reg14; T reg22=var_inter[1]*reg17; T reg23=var_inter[0]*reg10;
    T reg24=var_inter[0]*reg15; T reg25=var_inter[1]*reg16; T reg26=reg0*reg16; T reg27=reg1*reg10; T reg28=reg1*reg15;
    T reg29=reg0*reg17; T reg30=pow(reg19,2); T reg31=reg20*reg21; T reg32=pow(reg20,2); T reg33=reg19*reg6;
    T reg34=reg29+reg24; T reg35=reg26+reg23; T reg36=reg28+reg22; reg30=reg32-reg30; reg32=reg27+reg25;
    reg33=reg31-reg33; reg30=reg30/reg33; reg31=0.5*reg35; T reg37=0.5*reg34; T reg38=0.5*reg36;
    T reg39=reg22-reg24; T reg40=reg28-reg29; T reg41=reg23-reg25; T reg42=0.5*reg32; T reg43=reg26-reg27;
    T reg44=reg30*reg38; T reg45=reg30*reg37; T reg46=reg30*reg31; T reg47=0.5*reg41; T reg48=reg30*reg42;
    T reg49=0.5*reg39; reg21=reg21/reg33; T reg50=0.5*reg43; T reg51=0.5*reg40; reg33=reg6/reg33;
    reg6=reg33*reg32; reg48=2*reg48; T reg52=reg30*reg50; T reg53=2*reg44; reg45=2*reg45;
    T reg54=reg30*reg47; T reg55=reg33*reg35; T reg56=reg33*reg34; T reg57=reg21*reg36; T reg58=reg21*reg35;
    T reg59=2*reg46; T reg60=reg30*reg51; T reg61=reg30*reg49; T reg62=reg21*reg34; T reg63=reg21*reg32;
    T reg64=reg33*reg36; T reg65=reg37*reg53; reg61=2*reg61; T reg66=reg59*reg42; T reg67=reg62*reg36;
    T reg68=reg35*reg63; T reg69=reg35*reg56; T reg70=reg59*reg37; T reg71=reg31*reg48; T reg72=reg34*reg57;
    T reg73=reg33*reg40; T reg74=reg42*reg53; T reg75=reg31*reg45; T reg76=reg21*reg43; T reg77=reg45*reg38;
    T reg78=reg32*reg58; T reg79=reg34*reg55; T reg80=reg36*reg6; T reg81=reg33*reg39; T reg82=reg21*reg41;
    T reg83=reg33*reg41; T reg84=reg21*reg40; reg52=2*reg52; reg60=2*reg60; T reg85=reg32*reg64;
    T reg86=reg33*reg43; reg54=2*reg54; T reg87=reg48*reg38; T reg88=reg21*reg39; T reg89=reg35*reg73;
    T reg90=reg54*reg42; T reg91=reg60*reg37; T reg92=reg36*reg57; T reg93=reg55*reg36; T reg94=reg50*reg52;
    reg69=reg70+reg69; T reg95=reg45*reg42; T reg96=reg37*reg45; T reg97=reg35*reg58; reg67=reg66+reg67;
    T reg98=reg37*reg54; T reg99=reg35*reg81; T reg100=reg40*reg84; T reg101=reg37*reg61; T reg102=reg35*reg82;
    T reg103=reg60*reg31; T reg104=reg34*reg62; T reg105=reg31*reg59; reg80=reg74+reg80; T reg106=reg50*reg60;
    T reg107=reg40*reg86; reg75=reg79+reg75; T reg108=reg34*reg88; T reg109=reg31*reg54; T reg110=reg42*reg48;
    T reg111=reg34*reg83; T reg112=reg31*reg61; T reg113=reg83*reg36; reg71=reg72+reg71; T reg114=reg61*reg42;
    T reg115=reg34*reg6; T reg116=reg31*reg53; T reg117=reg88*reg36; T reg118=reg52*reg37; T reg119=reg41*reg64;
    T reg120=reg39*reg83; T reg121=reg47*reg61; T reg122=reg39*reg57; T reg123=reg47*reg48; T reg124=reg49*reg61;
    T reg125=reg41*reg82; T reg126=reg39*reg6; T reg127=reg47*reg53; T reg128=reg41*reg73; T reg129=reg52*reg49;
    T reg130=reg54*reg49; T reg131=reg41*reg81; T reg132=reg41*reg76; T reg133=reg60*reg49; T reg134=reg41*reg56;
    T reg135=reg59*reg49; T reg136=reg45*reg49; T reg137=reg41*reg58; T reg138=reg35*reg64; T reg139=reg86*reg36;
    T reg140=reg60*reg42; reg68=reg65+reg68; T reg141=reg84*reg39; T reg142=reg52*reg47; T reg143=reg84*reg36;
    T reg144=reg52*reg42; T reg145=reg86*reg39; T reg146=reg60*reg47; T reg147=reg62*reg39; T reg148=reg59*reg47;
    T reg149=reg49*reg53; T reg150=reg41*reg63; T reg151=reg55*reg39; T reg152=reg45*reg47; T reg153=reg39*reg88;
    T reg154=reg47*reg54; T reg155=reg49*reg48; T reg156=reg43*reg76; T reg157=reg51*reg60; reg77=reg78+reg77;
    T reg158=reg43*reg56; T reg159=reg51*reg59; T reg160=reg50*reg59; T reg161=reg35*reg76; T reg162=reg43*reg58;
    T reg163=reg51*reg45; reg62=reg40*reg62; T reg164=reg43*reg81; T reg165=reg51*reg54; T reg166=reg59*reg38;
    reg56=reg32*reg56; T reg167=reg32*reg63; T reg168=reg43*reg82; T reg169=reg51*reg61; reg83=reg40*reg83;
    T reg170=reg50*reg61; reg61=reg61*reg38; T reg171=reg40*reg57; T reg172=reg50*reg54; reg88=reg40*reg88;
    T reg173=reg50*reg48; reg82=reg32*reg82; reg6=reg40*reg6; reg87=reg85+reg87; T reg174=reg50*reg53;
    reg54=reg54*reg38; reg45=reg50*reg45; T reg175=reg43*reg73; T reg176=reg52*reg51; reg81=reg32*reg81;
    T reg177=reg40*reg55; reg86=reg86*reg34; reg73=reg32*reg73; T reg178=reg52*reg38; reg52=reg52*reg31;
    reg84=reg84*reg34; T reg179=reg37*reg48; T reg180=reg51*reg53; reg63=reg43*reg63; reg76=reg32*reg76;
    reg60=reg60*reg38; reg48=reg51*reg48; T reg181=reg38*reg53; T reg182=reg43*reg64; reg124=reg125+reg124;
    reg121=reg120+reg121; reg45=reg45-reg177; reg115=reg115+reg116; reg6=reg6-reg174; reg54=reg81-reg54;
    reg154=reg153+reg154; reg178=reg73-reg178; reg73=reg14*reg75; reg155=reg155-reg119; reg152=reg152-reg151;
    reg176=reg175+reg176; reg63=reg63-reg180; reg147=reg147-reg148; reg150=reg150-reg149; reg146=reg145+reg146;
    reg109=reg108-reg109; reg117=reg90-reg117; reg103=reg86-reg103; reg134=reg134-reg135; reg170=reg83+reg170;
    reg61=reg82-reg61; reg136=reg136-reg137; reg133=reg132+reg133; reg81=reg14*reg80; reg172=reg88+reg172;
    reg129=reg128+reg129; reg60=reg76-reg60; reg130=reg131+reg130; reg126=reg126-reg127; reg104=reg104+reg105;
    reg173=reg173-reg171; reg52=reg84-reg52; reg123=reg123-reg122; reg169=reg168+reg169; reg89=reg118-reg89;
    reg62=reg62-reg160; reg139=reg140-reg139; reg102=reg101-reg102; reg112=reg111-reg112; reg113=reg114-reg113;
    reg110=reg92+reg110; reg167=reg167+reg181; reg99=reg98-reg99; reg163=reg163-reg162; reg56=reg56+reg166;
    reg76=reg14*reg67; reg96=reg96+reg97; reg48=reg48-reg182; reg82=reg14*reg71; reg83=reg14*reg69;
    reg165=reg164+reg165; reg161=reg91-reg161; reg94=reg100+reg94; reg95=reg95+reg93; reg157=reg156+reg157;
    reg84=reg14*reg77; reg142=reg141+reg142; reg86=reg14*reg87; reg143=reg144-reg143; reg88=reg14*reg68;
    reg179=reg179+reg138; reg158=reg158-reg159; reg106=reg107+reg106; reg117=reg14*reg117; reg90=ponderation*reg86;
    reg139=reg14*reg139; reg150=reg14*reg150; reg113=reg14*reg113; reg136=reg14*reg136; reg95=reg14*reg95;
    reg91=ponderation*reg81; reg61=reg14*reg61; reg98=ponderation*reg76; reg100=ponderation*reg84; reg167=reg14*reg167;
    reg155=reg14*reg155; reg60=reg14*reg60; reg124=reg14*reg124; reg130=reg14*reg130; reg143=reg14*reg143;
    reg56=reg14*reg56; reg110=reg14*reg110; reg178=reg14*reg178; reg54=reg14*reg54; reg142=reg14*reg142;
    reg101=ponderation*reg88; reg6=reg14*reg6; reg179=reg14*reg179; reg102=reg14*reg102; reg176=reg14*reg176;
    reg99=reg14*reg99; reg96=reg14*reg96; reg157=reg14*reg157; reg107=ponderation*reg83; reg158=reg14*reg158;
    reg161=reg14*reg161; reg89=reg14*reg89; reg163=reg14*reg163; reg115=reg14*reg115; reg165=reg14*reg165;
    reg108=ponderation*reg82; reg112=reg14*reg112; reg169=reg14*reg169; reg109=reg14*reg109; reg48=reg14*reg48;
    reg111=ponderation*reg73; reg104=reg14*reg104; reg103=reg14*reg103; reg63=reg14*reg63; reg52=reg14*reg52;
    reg134=reg14*reg134; reg94=reg14*reg94; reg133=reg14*reg133; reg106=reg14*reg106; reg129=reg14*reg129;
    reg126=reg14*reg126; reg62=reg14*reg62; reg123=reg14*reg123; reg121=reg14*reg121; reg45=reg14*reg45;
    reg154=reg14*reg154; reg172=reg14*reg172; reg152=reg14*reg152; reg173=reg14*reg173; reg147=reg14*reg147;
    reg146=reg14*reg146; reg170=reg14*reg170; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg167; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg63; matrix(indices[3]+1,indices[2]+0)+=ponderation*reg54;
    matrix(indices[3]+1,indices[0]+0)+=ponderation*reg178; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg170; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg48; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg94; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg173;
    matrix(indices[0]+1,indices[2]+1)+=ponderation*reg169; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg106; matrix(indices[3]+1,indices[0]+1)+=ponderation*reg60; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg165; matrix(indices[3]+1,indices[3]+0)+=-reg90;
    matrix(indices[0]+0,indices[3]+1)+=ponderation*reg6; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg163; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg62; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg172; matrix(indices[3]+1,indices[1]+0)+=ponderation*reg56;
    matrix(indices[0]+1,indices[1]+0)+=ponderation*reg158; matrix(indices[3]+1,indices[1]+1)+=-reg100; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg45; matrix(indices[3]+1,indices[2]+1)+=ponderation*reg61; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg157;
    matrix(indices[0]+1,indices[0]+0)+=ponderation*reg176; matrix(indices[1]+1,indices[2]+1)+=ponderation*reg102; matrix(indices[1]+1,indices[3]+0)+=ponderation*reg179; matrix(indices[3]+0,indices[0]+0)+=ponderation*reg143; matrix(indices[1]+1,indices[3]+1)+=-reg101;
    matrix(indices[2]+0,indices[0]+0)+=ponderation*reg142; matrix(indices[2]+1,indices[3]+1)+=ponderation*reg150; matrix(indices[2]+0,indices[0]+1)+=ponderation*reg146; matrix(indices[2]+0,indices[1]+0)+=ponderation*reg147; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg155;
    matrix(indices[2]+0,indices[1]+1)+=ponderation*reg152; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg154; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg124; matrix(indices[2]+0,indices[2]+1)+=ponderation*reg121; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg123;
    matrix(indices[2]+1,indices[2]+0)+=ponderation*reg130; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg126; matrix(indices[2]+1,indices[0]+0)+=ponderation*reg129; matrix(indices[2]+1,indices[1]+1)+=ponderation*reg136; matrix(indices[2]+1,indices[0]+1)+=ponderation*reg133;
    matrix(indices[2]+1,indices[1]+0)+=ponderation*reg134; matrix(indices[1]+0,indices[0]+0)+=ponderation*reg52; matrix(indices[3]+0,indices[3]+1)+=-reg91; matrix(indices[1]+0,indices[0]+1)+=ponderation*reg103; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg104;
    matrix(indices[3]+0,indices[3]+0)+=ponderation*reg110; matrix(indices[1]+0,indices[1]+1)+=-reg111; matrix(indices[3]+0,indices[2]+1)+=ponderation*reg113; matrix(indices[1]+0,indices[2]+0)+=ponderation*reg109; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg112;
    matrix(indices[3]+0,indices[2]+0)+=ponderation*reg117; matrix(indices[1]+0,indices[3]+0)+=-reg108; matrix(indices[1]+0,indices[3]+1)+=ponderation*reg115; matrix(indices[3]+0,indices[1]+1)+=ponderation*reg95; matrix(indices[1]+1,indices[0]+0)+=ponderation*reg89;
    matrix(indices[1]+1,indices[0]+1)+=ponderation*reg161; matrix(indices[3]+0,indices[1]+0)+=-reg98; matrix(indices[1]+1,indices[1]+0)+=-reg107; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg96; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg99;
    matrix(indices[3]+0,indices[0]+1)+=ponderation*reg139;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[1]; T reg1=1-var_inter[0]; T reg2=reg1*elem.pos(0)[1]; T reg3=elem.pos(1)[1]*var_inter[0]; T reg4=elem.pos(1)[0]*var_inter[0];
    T reg5=elem.pos(0)[0]*reg1; T reg6=reg0*elem.pos(0)[1]; T reg7=reg0*elem.pos(1)[1]; T reg8=reg0*elem.pos(1)[0]; T reg9=elem.pos(0)[0]*reg0;
    T reg10=elem.pos(2)[0]*var_inter[0]; T reg11=reg5+reg4; reg8=reg8-reg9; T reg12=var_inter[1]*elem.pos(2)[0]; T reg13=reg3+reg2;
    T reg14=elem.pos(2)[1]*var_inter[0]; reg7=reg7-reg6; T reg15=var_inter[1]*elem.pos(2)[1]; reg10=reg10-reg11; T reg16=elem.pos(3)[0]*reg1;
    T reg17=var_inter[1]*elem.pos(3)[1]; reg15=reg7+reg15; reg7=var_inter[1]*elem.pos(3)[0]; reg12=reg8+reg12; reg14=reg14-reg13;
    reg8=elem.pos(3)[1]*reg1; reg16=reg10+reg16; reg8=reg14+reg8; reg15=reg15-reg17; reg12=reg12-reg7;
    reg10=reg15*reg16; reg14=1+(*f.m).poisson_ratio; T reg18=reg12*reg8; T reg19=1.0/(*f.m).elastic_modulus; T reg20=(*f.m).poisson_ratio/(*f.m).elastic_modulus;
    reg10=reg18-reg10; reg14=reg14/(*f.m).elastic_modulus; reg15=reg15/reg10; reg18=reg14*reg19; T reg21=reg14*reg20;
    reg16=reg16/reg10; reg12=reg12/reg10; reg8=reg8/reg10; T reg22=var_inter[0]*reg15; T reg23=var_inter[1]*reg8;
    T reg24=var_inter[1]*reg16; T reg25=reg1*reg12; T reg26=reg1*reg15; T reg27=reg0*reg8; T reg28=pow(reg20,2);
    T reg29=reg19*reg18; T reg30=pow(reg19,2); T reg31=reg20*reg21; T reg32=reg27+reg22; T reg33=var_inter[0]*reg12;
    T reg34=reg0*reg16; reg28=reg30-reg28; reg30=reg26+reg23; reg31=reg29-reg31; reg29=reg25+reg24;
    T reg35=0.5*reg29; T reg36=reg33-reg24; T reg37=reg23-reg22; T reg38=0.5*reg30; T reg39=0.5*reg32;
    T reg40=reg34+reg33; T reg41=reg34-reg25; T reg42=reg26-reg27; reg28=reg28/reg31; T reg43=0.5*reg40;
    reg21=reg21/reg31; reg31=reg18/reg31; reg18=reg28*reg35; T reg44=0.5*reg37; T reg45=reg28*reg39;
    T reg46=reg28*reg38; T reg47=0.5*reg42; T reg48=0.5*reg36; T reg49=0.5*reg41; reg45=2*reg45;
    T reg50=reg21*reg40; T reg51=reg28*reg44; T reg52=reg31*reg29; T reg53=reg28*reg48; T reg54=reg31*reg30;
    T reg55=reg28*reg43; T reg56=reg28*reg49; reg18=2*reg18; T reg57=reg21*reg29; T reg58=reg28*reg47;
    T reg59=2*reg46; T reg60=reg21*reg32; T reg61=reg31*reg40; T reg62=reg31*reg41; T reg63=reg40*reg52;
    reg53=2*reg53; T reg64=reg39*reg59; T reg65=reg21*reg37; T reg66=reg21*reg36; T reg67=reg31*reg36;
    reg51=2*reg51; T reg68=reg21*reg30; T reg69=reg30*reg57; T reg70=reg32*reg50; T reg71=reg35*reg59;
    reg58=2*reg58; T reg72=reg32*reg54; T reg73=reg43*reg45; T reg74=2*reg55; T reg75=reg21*reg41;
    reg56=2*reg56; T reg76=reg31*reg32; T reg77=reg31*reg42; T reg78=reg31*reg37; T reg79=reg43*reg18;
    T reg80=reg47*reg53; T reg81=reg40*reg68; T reg82=reg40*reg67; T reg83=reg41*reg65; T reg84=reg32*reg78;
    T reg85=reg43*reg53; T reg86=reg47*reg45; T reg87=reg41*reg61; T reg88=reg43*reg51; reg63=reg64+reg63;
    T reg89=reg37*reg78; T reg90=reg47*reg74; T reg91=reg41*reg60; T reg92=reg32*reg66; T reg93=reg41*reg52;
    T reg94=reg47*reg59; T reg95=reg39*reg45; T reg96=reg30*reg54; T reg97=reg39*reg18; T reg98=reg40*reg61;
    T reg99=reg39*reg53; T reg100=reg47*reg18; T reg101=reg32*reg76; T reg102=reg41*reg68; T reg103=reg43*reg74;
    T reg104=reg43*reg59; T reg105=reg32*reg57; T reg106=reg40*reg65; T reg107=reg39*reg51; T reg108=reg47*reg51;
    T reg109=reg41*reg67; reg73=reg70+reg73; reg79=reg72+reg79; T reg110=reg36*reg67; T reg111=reg49*reg51;
    T reg112=reg42*reg66; T reg113=reg44*reg51; T reg114=reg36*reg68; T reg115=reg49*reg53; T reg116=reg42*reg78;
    T reg117=reg44*reg18; T reg118=reg36*reg52; T reg119=reg49*reg45; T reg120=reg42*reg77; T reg121=reg42*reg50;
    T reg122=reg44*reg59; T reg123=reg35*reg18; T reg124=reg49*reg74; T reg125=reg42*reg76; T reg126=reg49*reg56;
    T reg127=reg38*reg59; reg69=reg71+reg69; T reg128=reg49*reg58; T reg129=reg42*reg75; reg52=reg29*reg52;
    T reg130=reg37*reg54; T reg131=reg49*reg59; T reg132=reg48*reg51; T reg133=reg42*reg57; T reg134=reg48*reg18;
    T reg135=reg41*reg62; T reg136=reg47*reg58; T reg137=reg37*reg66; reg57=reg37*reg57; T reg138=reg49*reg18;
    T reg139=reg42*reg54; T reg140=reg48*reg59; T reg141=reg48*reg53; T reg142=reg10*reg63; reg141=reg89+reg141;
    reg88=reg92-reg88; reg89=reg10*reg79; reg132=reg137+reg132; reg92=reg10*reg69; reg118=reg118-reg122;
    reg105=reg105+reg104; reg97=reg97+reg81; reg52=reg52+reg127; reg123=reg96+reg123; reg117=reg117-reg114;
    reg134=reg134-reg130; reg82=reg107-reg82; reg95=reg95+reg98; reg113=reg110+reg113; reg57=reg57-reg140;
    reg106=reg99-reg106; reg91=reg91-reg90; reg108=reg109+reg108; reg93=reg93-reg94; reg136=reg135+reg136;
    reg133=reg133-reg131; reg128=reg129+reg128; reg100=reg100-reg102; reg101=reg101+reg103; reg119=reg119-reg121;
    reg138=reg138-reg139; reg126=reg120+reg126; reg115=reg116+reg115; reg99=reg10*reg73; reg80=reg83+reg80;
    reg85=reg84-reg85; reg125=reg125-reg124; reg111=reg112+reg111; reg86=reg86-reg87; reg136=reg10*reg136;
    reg125=reg10*reg125; reg83=ponderation*reg142; reg91=reg10*reg91; reg118=reg10*reg118; reg86=reg10*reg86;
    reg141=reg10*reg141; reg133=reg10*reg133; reg132=reg10*reg132; reg117=reg10*reg117; reg119=reg10*reg119;
    reg138=reg10*reg138; reg134=reg10*reg134; reg111=reg10*reg111; reg57=reg10*reg57; reg113=reg10*reg113;
    reg115=reg10*reg115; reg126=reg10*reg126; reg101=reg10*reg101; reg105=reg10*reg105; reg84=ponderation*reg89;
    reg107=ponderation*reg92; reg93=reg10*reg93; reg109=ponderation*reg99; reg100=reg10*reg100; reg52=reg10*reg52;
    reg95=reg10*reg95; reg128=reg10*reg128; reg108=reg10*reg108; reg106=reg10*reg106; reg88=reg10*reg88;
    reg85=reg10*reg85; reg80=reg10*reg80; reg82=reg10*reg82; reg123=reg10*reg123; reg97=reg10*reg97;
    matrix(indices[2]+1,indices[2]+1)+=ponderation*reg113; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg52; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg119; matrix(indices[3]+0,indices[3]+1)+=-reg107; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg126;
    matrix(indices[2]+1,indices[3]+0)+=ponderation*reg117; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg125; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg128; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg123; matrix(indices[2]+1,indices[3]+1)+=ponderation*reg118;
    matrix(indices[1]+0,indices[2]+0)+=ponderation*reg85; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg88; matrix(indices[1]+0,indices[1]+1)+=-reg109; matrix(indices[1]+0,indices[3]+0)+=-reg84; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg101;
    matrix(indices[1]+0,indices[3]+1)+=ponderation*reg105; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg93; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg100; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg95; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg108;
    matrix(indices[1]+1,indices[2]+0)+=ponderation*reg106; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg80; matrix(indices[1]+1,indices[2]+1)+=ponderation*reg82; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg86; matrix(indices[1]+1,indices[3]+0)+=ponderation*reg97;
    matrix(indices[0]+1,indices[1]+0)+=ponderation*reg91; matrix(indices[1]+1,indices[3]+1)+=-reg83; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg136; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg141; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg133;
    matrix(indices[2]+0,indices[2]+1)+=ponderation*reg132; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg138; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg134; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg111; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg57;
    matrix(indices[0]+0,indices[2]+0)+=ponderation*reg115;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=elem.pos(0)[0]*reg1; T reg3=reg1*elem.pos(1)[0]; T reg4=elem.proute[0](1,1)+elem.proute[1](1,1);
    T reg5=elem.pos(1)[0]*var_inter[0]; T reg6=elem.pos(0)[0]*reg0; T reg7=elem.pos(1)[1]*var_inter[0]; T reg8=reg1*elem.pos(1)[1]; T reg9=reg1*elem.pos(0)[1];
    T reg10=reg0*elem.pos(0)[1]; reg8=reg8-reg9; T reg11=reg6+reg5; T reg12=var_inter[1]*elem.pos(2)[1]; T reg13=var_inter[1]*elem.pos(2)[0];
    reg3=reg3-reg2; T reg14=elem.pos(2)[0]*var_inter[0]; reg4=elem.proute[2](1,1)+reg4; T reg15=elem.pos(2)[1]*var_inter[0]; T reg16=reg7+reg10;
    reg14=reg14-reg11; T reg17=elem.pos(3)[0]*reg0; T reg18=elem.pos(3)[1]*reg0; reg15=reg15-reg16; T reg19=var_inter[1]*elem.pos(3)[1];
    reg12=reg8+reg12; reg8=var_inter[1]*elem.pos(3)[0]; reg13=reg3+reg13; reg4=elem.proute[3](1,1)+reg4; reg3=reg4+(*f.m).f_vol[1];
    reg4=reg4+(*f.m).f_vol[0]; reg18=reg15+reg18; reg15=reg1*var_inter[0]; T reg20=var_inter[1]*var_inter[0]; reg12=reg12-reg19;
    reg13=reg13-reg8; reg17=reg14+reg17; reg14=reg1*reg0; T reg21=var_inter[1]*reg0; T reg22=reg13*reg18;
    T reg23=reg12*reg17; T reg24=reg21*reg3; T reg25=reg14*reg4; T reg26=reg14*reg3; T reg27=reg21*reg4;
    T reg28=reg15*reg4; T reg29=reg15*reg3; T reg30=reg20*reg3; T reg31=reg20*reg4; reg24=(*f.m).density*reg24;
    reg27=(*f.m).density*reg27; reg30=(*f.m).density*reg30; reg31=(*f.m).density*reg31; reg29=(*f.m).density*reg29; reg28=(*f.m).density*reg28;
    reg26=(*f.m).density*reg26; reg25=(*f.m).density*reg25; reg23=reg22-reg23; reg22=reg23*reg24; T reg32=reg23*reg27;
    T reg33=reg23*reg30; T reg34=reg23*reg31; T reg35=reg23*reg29; T reg36=reg23*reg28; T reg37=reg23*reg26;
    T reg38=reg23*reg25; T reg39=ponderation*reg36; sollicitation[indices[1]+0]+=reg39; T reg40=ponderation*reg37; sollicitation[indices[0]+1]+=reg40;
    T reg41=ponderation*reg35; sollicitation[indices[1]+1]+=reg41; T reg42=ponderation*reg34; sollicitation[indices[2]+0]+=reg42; T reg43=ponderation*reg38;
    sollicitation[indices[0]+0]+=reg43; T reg44=ponderation*reg33; sollicitation[indices[2]+1]+=reg44; T reg45=ponderation*reg32; sollicitation[indices[3]+0]+=reg45;
    T reg46=ponderation*reg22; sollicitation[indices[3]+1]+=reg46;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg1=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0]; T reg3=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0;
    matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; T reg4=reg2+reg1; T reg5=reg3+reg0; T reg6=PNODE(0).dep_imp_coef_0*reg5; T reg7=PNODE(0).dep_imp_coef_0*reg4;
    T reg8=PNODE(0).f_nodal[1]+reg6; sollicitation[indices[0]+1]+=reg8; T reg9=PNODE(0).f_nodal[0]+reg7; sollicitation[indices[0]+0]+=reg9;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg1=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0]; T reg3=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0;
    matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; T reg4=reg2+reg1; T reg5=reg3+reg0; T reg6=PNODE(0).dep_imp_coef_0*reg5; T reg7=PNODE(0).dep_imp_coef_0*reg4;
    T reg8=PNODE(0).f_nodal[1]+reg6; sollicitation[indices[0]+1]+=reg8; T reg9=PNODE(0).f_nodal[0]+reg7; sollicitation[indices[0]+0]+=reg9;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg1=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg2=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0]; T reg3=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg4=reg2+reg1;
    T reg5=reg3+reg0; T reg6=PNODE(0).dep_imp_coef_0*reg5; T reg7=PNODE(0).dep_imp_coef_0*reg4; T reg8=PNODE(0).f_nodal[1]+reg6; sollicitation[indices[0]+1]+=reg8;
    T reg9=PNODE(0).f_nodal[0]+reg7; sollicitation[indices[0]+0]+=reg9;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
  #undef PNODE
}
#endif
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.21132486540518713447*reg5; T reg7=0.21132486540518713447*skin_elem.f_surf[1]; T reg8=0.78867513459481286553*reg5; T reg9=0.78867513459481286553*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*reg4;
    T reg11=0.21132486540518713447*skin_elem.f_surf[0]; T reg12=0.78867513459481286553*skin_elem.f_surf[0]; reg3=reg0*reg3; reg2=reg1*reg2; reg0=0.78867513459481286553*reg4;
    reg6=reg7+reg6; reg8=reg9+reg8; reg1=reg12-reg0; T reg13=reg11-reg10; reg3=reg2+reg3;
    reg13=reg3*reg13; reg8=reg3*reg8; reg1=reg1*reg3; reg6=reg3*reg6; reg13=0.5*reg13;
    reg8=0.5*reg8; reg1=0.5*reg1; reg6=0.5*reg6; reg13=reg1+reg13; sollicitation[indices[0]+0]+=reg13;
    sollicitation[indices[1]+0]+=reg13; reg6=reg8+reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[1]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.21132486540518713447*reg5; T reg7=0.21132486540518713447*skin_elem.f_surf[1]; T reg8=0.78867513459481286553*reg5; T reg9=0.78867513459481286553*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*reg4;
    T reg11=0.21132486540518713447*skin_elem.f_surf[0]; T reg12=0.78867513459481286553*skin_elem.f_surf[0]; reg3=reg0*reg3; reg2=reg1*reg2; reg0=0.78867513459481286553*reg4;
    reg6=reg7+reg6; reg8=reg9+reg8; reg1=reg12-reg0; T reg13=reg11-reg10; reg3=reg2+reg3;
    reg13=reg3*reg13; reg8=reg3*reg8; reg1=reg1*reg3; reg6=reg3*reg6; reg13=0.5*reg13;
    reg8=0.5*reg8; reg1=0.5*reg1; reg6=0.5*reg6; reg13=reg1+reg13; sollicitation[indices[0]+0]+=reg13;
    sollicitation[indices[1]+0]+=reg13; reg6=reg8+reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[1]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg0/reg2; reg2=reg1/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.21132486540518713447*reg5; T reg7=0.21132486540518713447*skin_elem.f_surf[1]; T reg8=0.78867513459481286553*reg5; T reg9=0.78867513459481286553*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*reg4;
    T reg11=0.21132486540518713447*skin_elem.f_surf[0]; T reg12=0.78867513459481286553*skin_elem.f_surf[0]; reg3=reg0*reg3; reg2=reg1*reg2; reg0=0.78867513459481286553*reg4;
    reg6=reg7+reg6; reg8=reg9+reg8; reg1=reg12-reg0; T reg13=reg11-reg10; reg3=reg2+reg3;
    reg13=reg3*reg13; reg8=reg3*reg8; reg1=reg1*reg3; reg6=reg3*reg6; reg13=0.5*reg13;
    reg8=0.5*reg8; reg1=0.5*reg1; reg6=0.5*reg6; reg13=reg1+reg13; sollicitation[indices[0]+0]+=reg13;
    sollicitation[indices[1]+0]+=reg13; reg6=reg8+reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[1]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[0]-elem.pos(1)[0]; T reg1=elem.pos(2)[1]-elem.pos(1)[1]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.78867513459481286553*reg4; T reg7=0.21132486540518713447*reg5; T reg8=0.78867513459481286553*reg5; reg3=reg1*reg3; reg2=reg0*reg2;
    reg0=0.21132486540518713447*reg4; reg1=0.21132486540518713447*skin_elem.f_surf[1]; T reg9=0.78867513459481286553*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*skin_elem.f_surf[0]; T reg11=0.78867513459481286553*skin_elem.f_surf[0];
    reg3=reg2+reg3; reg2=reg10-reg0; T reg12=reg11-reg6; reg8=reg9+reg8; reg7=reg1+reg7;
    reg2=reg3*reg2; reg12=reg3*reg12; reg8=reg3*reg8; reg7=reg3*reg7; reg8=0.5*reg8;
    reg7=0.5*reg7; reg12=0.5*reg12; reg2=0.5*reg2; reg12=reg2+reg12; sollicitation[indices[1]+0]+=reg12;
    sollicitation[indices[2]+0]+=reg12; reg8=reg7+reg8; sollicitation[indices[1]+1]+=reg8; sollicitation[indices[2]+1]+=reg8;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[0]-elem.pos(1)[0]; T reg1=elem.pos(2)[1]-elem.pos(1)[1]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.78867513459481286553*reg4; T reg7=0.21132486540518713447*reg5; T reg8=0.78867513459481286553*reg5; reg3=reg1*reg3; reg2=reg0*reg2;
    reg0=0.21132486540518713447*reg4; reg1=0.21132486540518713447*skin_elem.f_surf[1]; T reg9=0.78867513459481286553*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*skin_elem.f_surf[0]; T reg11=0.78867513459481286553*skin_elem.f_surf[0];
    reg3=reg2+reg3; reg2=reg10-reg0; T reg12=reg11-reg6; reg8=reg9+reg8; reg7=reg1+reg7;
    reg2=reg3*reg2; reg12=reg3*reg12; reg8=reg3*reg8; reg7=reg3*reg7; reg8=0.5*reg8;
    reg7=0.5*reg7; reg12=0.5*reg12; reg2=0.5*reg2; reg12=reg2+reg12; sollicitation[indices[1]+0]+=reg12;
    sollicitation[indices[2]+0]+=reg12; reg8=reg7+reg8; sollicitation[indices[1]+1]+=reg8; sollicitation[indices[2]+1]+=reg8;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[0]-elem.pos(1)[0]; T reg1=elem.pos(2)[1]-elem.pos(1)[1]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.78867513459481286553*reg4; T reg7=0.21132486540518713447*reg5; T reg8=0.78867513459481286553*reg5; reg3=reg1*reg3; reg2=reg0*reg2;
    reg0=0.21132486540518713447*reg4; reg1=0.21132486540518713447*skin_elem.f_surf[1]; T reg9=0.78867513459481286553*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*skin_elem.f_surf[0]; T reg11=0.78867513459481286553*skin_elem.f_surf[0];
    reg3=reg2+reg3; reg2=reg10-reg0; T reg12=reg11-reg6; reg8=reg9+reg8; reg7=reg1+reg7;
    reg2=reg3*reg2; reg12=reg3*reg12; reg8=reg3*reg8; reg7=reg3*reg7; reg8=0.5*reg8;
    reg7=0.5*reg7; reg12=0.5*reg12; reg2=0.5*reg2; reg12=reg2+reg12; sollicitation[indices[1]+0]+=reg12;
    sollicitation[indices[2]+0]+=reg12; reg8=reg7+reg8; sollicitation[indices[1]+1]+=reg8; sollicitation[indices[2]+1]+=reg8;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(3)[0]-elem.pos(2)[0]; T reg1=elem.pos(3)[1]-elem.pos(2)[1]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.21132486540518713447*reg4; T reg7=0.78867513459481286553*reg5; T reg8=0.21132486540518713447*reg5; reg3=reg1*reg3; reg2=reg0*reg2;
    reg0=0.78867513459481286553*reg4; reg1=0.21132486540518713447*skin_elem.f_surf[1]; T reg9=0.78867513459481286553*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*skin_elem.f_surf[0]; T reg11=0.78867513459481286553*skin_elem.f_surf[0];
    reg3=reg2+reg3; reg2=reg11-reg0; T reg12=reg10-reg6; reg8=reg1+reg8; reg7=reg9+reg7;
    reg2=reg3*reg2; reg12=reg3*reg12; reg8=reg3*reg8; reg7=reg3*reg7; reg8=0.5*reg8;
    reg7=0.5*reg7; reg12=0.5*reg12; reg2=0.5*reg2; reg12=reg2+reg12; sollicitation[indices[2]+0]+=reg12;
    sollicitation[indices[3]+0]+=reg12; reg8=reg7+reg8; sollicitation[indices[2]+1]+=reg8; sollicitation[indices[3]+1]+=reg8;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(3)[0]-elem.pos(2)[0]; T reg1=elem.pos(3)[1]-elem.pos(2)[1]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.21132486540518713447*reg4; T reg7=0.78867513459481286553*reg5; T reg8=0.21132486540518713447*reg5; reg3=reg1*reg3; reg2=reg0*reg2;
    reg0=0.78867513459481286553*reg4; reg1=0.21132486540518713447*skin_elem.f_surf[1]; T reg9=0.78867513459481286553*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*skin_elem.f_surf[0]; T reg11=0.78867513459481286553*skin_elem.f_surf[0];
    reg3=reg2+reg3; reg2=reg11-reg0; T reg12=reg10-reg6; reg8=reg1+reg8; reg7=reg9+reg7;
    reg2=reg3*reg2; reg12=reg3*reg12; reg8=reg3*reg8; reg7=reg3*reg7; reg8=0.5*reg8;
    reg7=0.5*reg7; reg12=0.5*reg12; reg2=0.5*reg2; reg12=reg2+reg12; sollicitation[indices[2]+0]+=reg12;
    sollicitation[indices[3]+0]+=reg12; reg8=reg7+reg8; sollicitation[indices[2]+1]+=reg8; sollicitation[indices[3]+1]+=reg8;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(3)[0]-elem.pos(2)[0]; T reg1=elem.pos(3)[1]-elem.pos(2)[1]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.21132486540518713447*reg4; T reg7=0.78867513459481286553*reg5; T reg8=0.21132486540518713447*reg5; reg3=reg1*reg3; reg2=reg0*reg2;
    reg0=0.78867513459481286553*reg4; reg1=0.21132486540518713447*skin_elem.f_surf[1]; T reg9=0.78867513459481286553*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*skin_elem.f_surf[0]; T reg11=0.78867513459481286553*skin_elem.f_surf[0];
    reg3=reg2+reg3; reg2=reg11-reg0; T reg12=reg10-reg6; reg8=reg1+reg8; reg7=reg9+reg7;
    reg2=reg3*reg2; reg12=reg3*reg12; reg8=reg3*reg8; reg7=reg3*reg7; reg8=0.5*reg8;
    reg7=0.5*reg7; reg12=0.5*reg12; reg2=0.5*reg2; reg12=reg2+reg12; sollicitation[indices[2]+0]+=reg12;
    sollicitation[indices[3]+0]+=reg12; reg8=reg7+reg8; sollicitation[indices[2]+1]+=reg8; sollicitation[indices[3]+1]+=reg8;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(0)[0]-elem.pos(3)[0]; T reg1=elem.pos(0)[1]-elem.pos(3)[1]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.78867513459481286553*reg5; T reg7=0.78867513459481286553*reg4; reg3=reg1*reg3; reg2=reg0*reg2; reg0=0.78867513459481286553*skin_elem.f_surf[0];
    reg1=0.21132486540518713447*skin_elem.f_surf[0]; T reg8=0.78867513459481286553*skin_elem.f_surf[1]; T reg9=0.21132486540518713447*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*reg5; T reg11=0.21132486540518713447*reg4;
    reg3=reg2+reg3; reg10=reg9+reg10; reg2=reg1-reg11; reg6=reg8+reg6; T reg12=reg0-reg7;
    reg6=reg3*reg6; reg12=reg3*reg12; reg10=reg10*reg3; reg2=reg3*reg2; reg12=0.5*reg12;
    reg10=0.5*reg10; reg2=0.5*reg2; reg6=0.5*reg6; reg12=reg2+reg12; sollicitation[indices[0]+0]+=reg12;
    sollicitation[indices[3]+0]+=reg12; reg6=reg10+reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[3]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(0)[0]-elem.pos(3)[0]; T reg1=elem.pos(0)[1]-elem.pos(3)[1]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.78867513459481286553*reg5; T reg7=0.78867513459481286553*reg4; reg3=reg1*reg3; reg2=reg0*reg2; reg0=0.78867513459481286553*skin_elem.f_surf[0];
    reg1=0.21132486540518713447*skin_elem.f_surf[0]; T reg8=0.78867513459481286553*skin_elem.f_surf[1]; T reg9=0.21132486540518713447*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*reg5; T reg11=0.21132486540518713447*reg4;
    reg3=reg2+reg3; reg10=reg9+reg10; reg2=reg1-reg11; reg6=reg8+reg6; T reg12=reg0-reg7;
    reg6=reg3*reg6; reg12=reg3*reg12; reg10=reg10*reg3; reg2=reg3*reg2; reg12=0.5*reg12;
    reg10=0.5*reg10; reg2=0.5*reg2; reg6=0.5*reg6; reg12=reg2+reg12; sollicitation[indices[0]+0]+=reg12;
    sollicitation[indices[3]+0]+=reg12; reg6=reg10+reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[3]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(0)[0]-elem.pos(3)[0]; T reg1=elem.pos(0)[1]-elem.pos(3)[1]; T reg2=pow(reg0,2); T reg3=pow(reg1,2); reg2=reg3+reg2;
    reg2=pow(reg2,0.5); reg3=reg1/reg2; reg2=reg0/reg2; T reg4=skin_elem.p*reg3; T reg5=skin_elem.p*reg2;
    T reg6=0.78867513459481286553*reg5; T reg7=0.78867513459481286553*reg4; reg3=reg1*reg3; reg2=reg0*reg2; reg0=0.78867513459481286553*skin_elem.f_surf[0];
    reg1=0.21132486540518713447*skin_elem.f_surf[0]; T reg8=0.78867513459481286553*skin_elem.f_surf[1]; T reg9=0.21132486540518713447*skin_elem.f_surf[1]; T reg10=0.21132486540518713447*reg5; T reg11=0.21132486540518713447*reg4;
    reg3=reg2+reg3; reg10=reg9+reg10; reg2=reg1-reg11; reg6=reg8+reg6; T reg12=reg0-reg7;
    reg6=reg3*reg6; reg12=reg3*reg12; reg10=reg10*reg3; reg2=reg3*reg2; reg12=0.5*reg12;
    reg10=0.5*reg10; reg2=0.5*reg2; reg6=0.5*reg6; reg12=reg2+reg12; sollicitation[indices[0]+0]+=reg12;
    sollicitation[indices[3]+0]+=reg12; reg6=reg10+reg6; sollicitation[indices[0]+1]+=reg6; sollicitation[indices[3]+1]+=reg6;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_vector_der_var(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */    T reg0=1-var_inter[1]; T reg1=1-var_inter[0]; T reg2=elem.pos(0)[0]*reg0; T reg3=reg0*elem.pos(1)[0]; T reg4=reg0*elem.pos(1)[1];
    T reg5=reg0*elem.pos(0)[1]; T reg6=elem.pos(0)[0]*reg1; T reg7=elem.pos(1)[0]*var_inter[0]; T reg8=elem.pos(1)[1]*var_inter[0]; T reg9=reg1*elem.pos(0)[1];
    T reg10=1+(*f.m).poisson_ratio; T reg11=var_inter[1]*elem.pos(2)[0]; reg3=reg3-reg2; reg10=reg10/(*f.m).elastic_modulus; reg4=reg4-reg5;
    T reg12=var_inter[1]*elem.pos(2)[1]; T reg13=reg6+reg7; T reg14=elem.pos(2)[0]*var_inter[0]; T reg15=reg8+reg9; T reg16=elem.pos(2)[1]*var_inter[0];
    T reg17=1.0/(*f.m).elastic_modulus; T reg18=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg14=reg14-reg13; T reg19=var_inter[1]*elem.pos(3)[1]; reg12=reg4+reg12;
    reg4=elem.pos(3)[0]*reg1; reg16=reg16-reg15; T reg20=elem.pos(3)[1]*reg1; T reg21=reg10*reg17; T reg22=var_inter[1]*elem.pos(3)[0];
    reg11=reg3+reg11; reg3=reg17*reg18; reg11=reg11-reg22; T reg23=reg10*reg18; reg3=reg21+reg3;
    reg12=reg12-reg19; reg20=reg16+reg20; reg4=reg14+reg4; reg14=reg18*reg3; reg16=reg12*reg4;
    T reg24=reg11*reg20; T reg25=reg17*reg23; T reg26=pow(reg17,2); T reg27=reg17*reg21; T reg28=reg17*reg26;
    reg14=reg25+reg14; reg25=reg18*reg23; reg16=reg24-reg16; reg24=pow(reg18,2); reg12=reg12/reg16;
    reg4=reg4/reg16; reg11=reg11/reg16; reg25=reg27-reg25; reg20=reg20/reg16; reg24=reg26-reg24;
    reg27=2*reg17; reg14=reg28-reg14; reg28=reg0*reg4; T reg29=reg1*reg11; T reg30=reg1*reg12;
    T reg31=reg14*reg24; T reg32=pow(reg25,2); T reg33=reg0*reg20; reg27=reg27*reg18; T reg34=reg14*reg23;
    T reg35=reg27/reg25; reg31=reg31/reg32; T reg36=reg30-reg33; reg14=reg14*reg21; T reg37=reg28-reg29;
    T reg38=var_inter[0]*reg11; reg26=reg26/reg25; reg14=reg14/reg32; T reg39=0.5*reg37; T reg40=0.5*reg36;
    T reg41=var_inter[0]*reg12; reg32=reg34/reg32; reg34=reg28+reg38; T reg42=var_inter[1]*reg20; reg3=reg3/reg25;
    reg35=reg31+reg35; reg31=var_inter[1]*reg4; T reg43=reg33+reg41; T reg44=0.5*reg34; T reg45=reg38-reg31;
    T reg46=reg42-reg41; T reg47=reg30+reg42; T reg48=reg29+reg31; reg32=reg3-reg32; reg3=reg35*reg40;
    reg14=reg26-reg14; reg26=reg35*reg39; T reg49=0.5*reg46; T reg50=0.5*reg45; T reg51=0.5*reg48;
    T reg52=0.5*reg47; T reg53=2*reg26; T reg54=2*reg3; T reg55=reg14*reg37; T reg56=reg32*reg36;
    T reg57=reg35*reg44; T reg58=reg14*reg36; T reg59=reg32*reg37; T reg60=0.5*reg43; T reg61=reg53*reg52;
    T reg62=reg53*reg60; T reg63=reg35*reg60; T reg64=reg48*reg56; T reg65=reg59*reg47; T reg66=reg54*reg51;
    T reg67=reg58*reg47; T reg68=reg53*reg51; T reg69=reg54*reg49; T reg70=reg34*reg56; T reg71=reg54*reg60;
    T reg72=reg34*reg55; T reg73=reg37*reg56; T reg74=reg53*reg40; T reg75=reg54*reg44; T reg76=reg53*reg49;
    T reg77=reg45*reg55; T reg78=reg59*reg43; T reg79=reg37*reg55; T reg80=reg54*reg40; T reg81=reg32*reg43;
    T reg82=reg53*reg44; T reg83=reg58*reg43; T reg84=reg58*reg46; T reg85=reg53*reg50; T reg86=reg59*reg46;
    T reg87=reg54*reg50; reg56=reg45*reg56; reg59=reg59*reg36; T reg88=reg53*reg39; T reg89=2*reg57;
    reg58=reg58*reg36; T reg90=reg54*reg39; T reg91=reg14*reg43; T reg92=reg54*reg52; reg55=reg48*reg55;
    reg77=reg77-reg69; reg86=reg86-reg87; T reg93=reg45*reg81; T reg94=reg49*reg89; reg84=reg84-reg85;
    T reg95=reg48*reg81; T reg96=reg52*reg89; reg83=reg83+reg82; reg67=reg68+reg67; reg58=reg58-reg88;
    reg59=reg59-reg90; reg73=reg73-reg74; T reg97=reg46*reg91; T reg98=reg50*reg89; reg79=reg79-reg80;
    reg55=reg55+reg92; T reg99=reg37*reg81; T reg100=reg40*reg89; reg56=reg56-reg76; T reg101=reg14*reg34;
    T reg102=reg39*reg89; reg70=reg62+reg70; reg64=reg64+reg61; T reg103=reg36*reg91; T reg104=2*reg63;
    T reg105=reg32*reg34; reg72=reg71+reg72; T reg106=reg35*reg50; T reg107=reg60*reg89; reg81=reg34*reg81;
    T reg108=reg47*reg91; T reg109=reg51*reg89; T reg110=reg44*reg89; reg91=reg43*reg91; reg78=reg78+reg75;
    reg65=reg66+reg65; T reg111=reg48*reg101; reg83=reg16*reg83; reg95=reg95-reg96; T reg112=reg32*reg46;
    T reg113=reg60*reg104; T reg114=reg16*reg70; T reg115=reg34*reg101; T reg116=reg46*reg105; T reg117=reg50*reg104;
    T reg118=reg52*reg104; reg78=reg16*reg78; T reg119=reg16*reg72; reg97=reg97+reg98; T reg120=reg44*reg104;
    T reg121=reg43*reg105; reg81=reg81-reg107; reg84=reg16*reg84; reg86=reg16*reg86; reg91=reg91-reg110;
    reg55=reg16*reg55; reg59=reg16*reg59; T reg122=reg16*reg67; reg64=reg16*reg64; T reg123=reg35*reg49;
    reg58=reg16*reg58; T reg124=reg16*reg65; reg108=reg108-reg109; T reg125=2*reg106; T reg126=reg14*reg46;
    T reg127=reg45*reg101; T reg128=reg49*reg104; reg93=reg93+reg94; T reg129=reg36*reg105; reg77=reg16*reg77;
    reg101=reg37*reg101; T reg130=reg40*reg104; reg56=reg16*reg56; reg99=reg99+reg100; reg103=reg103+reg102;
    T reg131=reg39*reg104; reg79=reg16*reg79; T reg132=reg51*reg104; reg105=reg47*reg105; reg73=reg16*reg73;
    T reg133=ponderation*reg114; T reg134=ponderation*reg119; reg105=reg105-reg132; reg108=reg16*reg108; T reg135=reg51*reg125;
    T reg136=ponderation*reg124; T reg137=reg48*reg112; T reg138=reg47*reg126; reg111=reg111-reg118; T reg139=reg52*reg125;
    T reg140=reg50*reg125; T reg141=reg46*reg126; reg116=reg117+reg116; reg56=ponderation*reg56; reg97=reg16*reg97;
    reg86=ponderation*reg86; reg77=ponderation*reg77; reg55=ponderation*reg55; reg84=ponderation*reg84; reg93=reg16*reg93;
    T reg142=reg34*reg112; T reg143=reg60*reg125; reg115=reg115-reg113; reg127=reg128+reg127; T reg144=reg45*reg112;
    T reg145=reg49*reg125; reg95=reg16*reg95; reg64=ponderation*reg64; reg81=reg16*reg81; T reg146=ponderation*reg122;
    reg112=reg37*reg112; T reg147=reg36*reg126; T reg148=reg40*reg125; T reg149=reg39*reg125; reg83=ponderation*reg83;
    reg78=ponderation*reg78; reg91=reg16*reg91; reg121=reg121-reg120; T reg150=reg32*reg45; reg126=reg43*reg126;
    T reg151=reg44*reg125; T reg152=reg14*reg45; reg101=reg130+reg101; reg99=reg16*reg99; reg79=ponderation*reg79;
    reg73=ponderation*reg73; T reg153=2*reg123; T reg154=reg35*reg51; reg58=ponderation*reg58; reg129=reg131+reg129;
    reg59=ponderation*reg59; reg103=reg16*reg103; T reg155=reg51*reg153; reg141=reg141-reg140; T reg156=reg47*reg150;
    T reg157=reg16*reg116; T reg158=reg32*reg47; reg103=ponderation*reg103; reg112=reg112-reg148; T reg159=vectors[0][indices[0]+0]*reg146;
    reg97=ponderation*reg97; T reg160=reg40*reg153; T reg161=reg37*reg152; T reg162=reg45*reg152; reg144=reg144-reg145;
    T reg163=reg14*reg47; T reg164=reg49*reg153; T reg165=reg16*reg127; reg93=ponderation*reg93; T reg166=vectors[0][indices[0]+1]*reg136;
    T reg167=reg35*reg52; T reg168=2*reg154; T reg169=reg39*reg153; reg99=ponderation*reg99; T reg170=reg16*reg101;
    T reg171=reg36*reg150; reg147=reg147-reg149; reg64=vectors[0][indices[0]+0]*reg64; reg108=ponderation*reg108; reg105=reg16*reg105;
    T reg172=reg16*reg129; reg138=reg135+reg138; T reg173=reg50*reg153; T reg174=reg46*reg150; reg78=vectors[0][indices[0]+1]*reg78;
    reg83=vectors[0][indices[0]+0]*reg83; reg142=reg143+reg142; reg77=vectors[0][indices[0]+1]*reg77; reg58=vectors[0][indices[0]+0]*reg58; reg59=vectors[0][indices[0]+1]*reg59;
    reg84=vectors[0][indices[0]+0]*reg84; reg86=vectors[0][indices[0]+1]*reg86; reg115=reg16*reg115; reg56=vectors[0][indices[0]+0]*reg56; reg81=ponderation*reg81;
    reg91=ponderation*reg91; reg121=reg16*reg121; reg73=vectors[0][indices[0]+0]*reg73; reg126=reg126+reg151; reg79=vectors[0][indices[0]+1]*reg79;
    reg150=reg43*reg150; T reg175=reg44*reg153; T reg176=vectors[0][indices[0]+0]*reg133; reg55=vectors[0][indices[0]+1]*reg55; T reg177=vectors[0][indices[0]+1]*reg134;
    reg95=ponderation*reg95; reg111=reg16*reg111; reg137=reg137+reg139; T reg178=reg48*reg152; T reg179=reg52*reg153;
    reg152=reg34*reg152; T reg180=reg60*reg153; reg162=reg162-reg164; reg91=vectors[0][indices[1]+0]*reg91; reg171=reg171-reg169;
    reg86=reg84+reg86; reg177=reg176+reg177; reg84=reg49*reg168; reg176=vectors[0][indices[1]+0]*reg81; reg97=vectors[0][indices[1]+0]*reg97;
    reg166=reg159+reg166; reg159=vectors[0][indices[1]+0]*reg108; reg78=reg83+reg78; reg83=reg39*reg168; reg99=vectors[0][indices[1]+0]*reg99;
    T reg181=reg45*reg158; reg111=ponderation*reg111; reg137=reg16*reg137; T reg182=reg51*reg168; T reg183=reg47*reg163;
    reg178=reg178+reg179; T reg184=reg48*reg158; T reg185=reg52*reg168; reg156=reg155+reg156; reg93=vectors[0][indices[1]+0]*reg93;
    reg77=reg56+reg77; reg56=reg16*reg138; T reg186=ponderation*reg172; reg105=ponderation*reg105; reg59=reg58+reg59;
    reg103=vectors[0][indices[1]+0]*reg103; reg147=reg16*reg147; reg79=reg73+reg79; reg121=ponderation*reg121; reg115=ponderation*reg115;
    reg58=reg46*reg163; reg73=reg50*reg168; T reg187=reg16*reg142; reg174=reg174-reg173; reg141=reg16*reg141;
    T reg188=ponderation*reg170; T reg189=ponderation*reg157; reg152=reg180+reg152; reg112=reg16*reg112; T reg190=reg60*reg168;
    T reg191=reg34*reg158; reg161=reg161-reg160; T reg192=reg40*reg168; reg158=reg37*reg158; reg95=vectors[0][indices[1]+0]*reg95;
    reg55=reg64+reg55; reg14=reg14*reg48; reg126=reg16*reg126; reg150=reg150+reg175; reg144=reg16*reg144;
    reg64=reg36*reg163; T reg193=ponderation*reg165; T reg194=reg44*reg168; reg32=reg32*reg48; reg163=reg43*reg163;
    T reg195=2*reg167; T reg196=reg16*reg152; reg178=reg16*reg178; reg177=reg176+reg177; reg137=ponderation*reg137;
    reg191=reg191-reg190; reg93=reg77+reg93; reg150=reg16*reg150; reg77=vectors[0][indices[1]+1]*reg193; reg95=reg55+reg95;
    reg55=reg60*reg195; reg115=vectors[0][indices[1]+1]*reg115; reg176=reg34*reg14; reg126=ponderation*reg126; reg97=reg86+reg97;
    reg86=vectors[0][indices[1]+1]*reg189; T reg197=vectors[0][indices[1]+1]*reg186; reg103=reg59+reg103; reg59=vectors[0][indices[1]+1]*reg111; reg99=reg79+reg99;
    reg79=reg40*reg195; T reg198=reg37*reg14; T reg199=vectors[0][indices[1]+1]*reg188; T reg200=reg44*reg195; T reg201=reg52*reg195;
    T reg202=reg43*reg32; T reg203=reg48*reg14; T reg204=ponderation*reg187; reg163=reg163-reg194; reg184=reg184-reg185;
    reg91=reg78+reg91; reg78=vectors[0][indices[1]+1]*reg121; reg166=reg159+reg166; reg171=reg16*reg171; reg147=ponderation*reg147;
    reg159=reg50*reg195; T reg205=reg46*reg32; reg58=reg73+reg58; T reg206=reg39*reg195; reg174=reg16*reg174;
    reg141=ponderation*reg141; T reg207=ponderation*reg56; T reg208=reg36*reg32; T reg209=reg16*reg156; reg112=ponderation*reg112;
    reg183=reg183-reg182; reg105=vectors[0][indices[1]+1]*reg105; T reg210=reg51*reg195; reg32=reg47*reg32; reg158=reg192+reg158;
    T reg211=reg49*reg195; reg144=ponderation*reg144; reg14=reg45*reg14; reg64=reg83+reg64; reg161=reg16*reg161;
    reg162=reg16*reg162; reg181=reg181+reg84; reg112=vectors[0][indices[2]+0]*reg112; reg162=ponderation*reg162; reg171=ponderation*reg171;
    reg59=reg95-reg59; reg208=reg208+reg206; reg95=vectors[0][indices[2]+0]*reg207; reg141=vectors[0][indices[2]+0]*reg141; reg150=ponderation*reg150;
    reg199=reg99-reg199; reg202=reg202-reg200; reg177=reg115-reg177; reg99=reg16*reg64; reg78=reg91-reg78;
    reg126=vectors[0][indices[2]+0]*reg126; reg91=vectors[0][indices[2]+0]*reg204; reg163=reg16*reg163; reg166=reg105-reg166; reg14=reg14+reg211;
    reg105=reg16*reg158; reg115=reg16*reg181; reg176=reg176-reg55; reg77=reg93-reg77; reg144=vectors[0][indices[2]+0]*reg144;
    reg161=ponderation*reg161; reg32=reg32-reg210; reg191=reg16*reg191; reg183=reg16*reg183; reg93=ponderation*reg196;
    reg178=ponderation*reg178; T reg212=ponderation*reg209; reg184=reg16*reg184; reg86=reg97-reg86; reg137=vectors[0][indices[2]+0]*reg137;
    reg197=reg103-reg197; reg147=vectors[0][indices[2]+0]*reg147; reg205=reg205+reg159; reg198=reg198+reg79; reg97=reg16*reg58;
    reg174=ponderation*reg174; reg203=reg203-reg201; reg59=reg137+reg59; reg178=vectors[0][indices[2]+1]*reg178; reg162=vectors[0][indices[2]+1]*reg162;
    reg103=vectors[0][indices[2]+1]*reg93; reg91=reg177-reg91; reg174=vectors[0][indices[2]+1]*reg174; reg77=reg144+reg77; reg86=reg141+reg86;
    reg137=vectors[0][indices[2]+1]*reg212; reg95=reg166-reg95; reg171=vectors[0][indices[2]+1]*reg171; reg197=reg147+reg197; reg203=reg16*reg203;
    reg184=ponderation*reg184; reg163=ponderation*reg163; reg202=reg16*reg202; reg32=reg16*reg32; reg183=ponderation*reg183;
    reg14=reg16*reg14; reg141=ponderation*reg115; reg144=ponderation*reg99; reg208=reg16*reg208; reg205=reg16*reg205;
    reg147=ponderation*reg97; reg198=reg16*reg198; reg166=ponderation*reg105; reg176=reg16*reg176; reg191=ponderation*reg191;
    reg78=reg126+reg78; reg150=vectors[0][indices[2]+1]*reg150; reg199=reg112+reg199; reg161=vectors[0][indices[2]+1]*reg161; reg202=ponderation*reg202;
    reg32=ponderation*reg32; reg162=reg77+reg162; reg77=vectors[0][indices[3]+0]*reg141; reg137=reg95-reg137; reg183=vectors[0][indices[3]+0]*reg183;
    reg198=ponderation*reg198; reg103=reg91-reg103; reg191=vectors[0][indices[3]+0]*reg191; reg14=ponderation*reg14; reg205=ponderation*reg205;
    reg208=ponderation*reg208; reg91=vectors[0][indices[3]+0]*reg166; reg150=reg78+reg150; reg161=reg199+reg161; reg203=ponderation*reg203;
    reg178=reg59+reg178; reg59=vectors[0][indices[3]+0]*reg163; reg78=vectors[0][indices[3]+0]*reg147; reg174=reg86+reg174; reg171=reg197+reg171;
    reg86=vectors[0][indices[3]+0]*reg144; reg176=ponderation*reg176; reg95=vectors[0][indices[3]+0]*reg184; reg112=vectors[0][indices[3]+1]*reg32; reg137=reg183+reg137;
    reg202=vectors[0][indices[3]+1]*reg202; reg59=reg150-reg59; reg95=reg178-reg95; reg91=reg161-reg91; reg198=vectors[0][indices[3]+1]*reg198;
    reg77=reg162-reg77; reg14=vectors[0][indices[3]+1]*reg14; reg103=reg191+reg103; reg126=vectors[0][indices[3]+1]*reg176; reg203=vectors[0][indices[3]+1]*reg203;
    reg78=reg174-reg78; reg205=vectors[0][indices[3]+1]*reg205; reg208=vectors[0][indices[3]+1]*reg208; reg86=reg171-reg86; reg95=reg203+reg95;
    reg112=reg137-reg112; reg77=reg14+reg77; reg78=reg205+reg78; reg86=reg208+reg86; reg126=reg103-reg126;
    reg91=reg198+reg91; reg59=reg202+reg59; sollicitation[indices[1]+0]+=-reg59; sollicitation[indices[0]+1]+=-reg91; sollicitation[indices[0]+0]+=-reg86;
    sollicitation[indices[1]+1]+=-reg126; sollicitation[indices[2]+0]+=-reg78; sollicitation[indices[2]+1]+=-reg77; sollicitation[indices[3]+0]+=-reg112; sollicitation[indices[3]+1]+=-reg95;
  #undef PNODE
}
// 
#ifndef ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
#define ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz>
void add_nodal_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const typename TM::TNode &node,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) node
  /* (*f.m).poisson_ratio */  #undef PNODE
}
#endif
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Quad,DefaultBehavior,Node<2,T_pos,ND>,ED,nim> &elem,
      const Element<Bar,DefaultBehavior,Node<2,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}

#ifndef elasticity_dep_read_material_to_mesh
#define elasticity_dep_read_material_to_mesh
template<class TM, class T, bool wont_add_nz>
void read_material_to_mesh_(const XmlNode &n, Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f){ 
    if(n.has_attribute("f_vol"))  
        n.get_attribute("f_vol", f.m->f_vol ); 
    else  
        std::cerr << "Warning using default value of f_vol : " << f.m->f_vol << std::endl; 

    if(n.has_attribute("lim_cond_0"))  
        n.get_attribute("lim_cond_0", f.m->lim_cond_0 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_0 : " << f.m->lim_cond_0 << std::endl; 

    if(n.has_attribute("lim_cond_1"))  
        n.get_attribute("lim_cond_1", f.m->lim_cond_1 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_1 : " << f.m->lim_cond_1 << std::endl; 

    if(n.has_attribute("poisson_ratio"))  
        n.get_attribute("poisson_ratio", f.m->poisson_ratio ); 
    else  
        std::cerr << "Warning using default value of poisson_ratio : " << f.m->poisson_ratio << std::endl; 

    if(n.has_attribute("elastic_modulus"))  
        n.get_attribute("elastic_modulus", f.m->elastic_modulus ); 
    else  
        std::cerr << "Warning using default value of elastic_modulus : " << f.m->elastic_modulus << std::endl; 

    if(n.has_attribute("density"))  
        n.get_attribute("density", f.m->density ); 
    else  
        std::cerr << "Warning using default value of density : " << f.m->density << std::endl; 

  };
#endif // elasticity_dep_read_material_to_mesh
} // namespace LMT


#include "formulation/formulation.h"
namespace LMT {
#ifndef ELASTICITY_DEP_3_NUM_0_CARAC_H
#define ELASTICITY_DEP_3_NUM_0_CARAC_H
#ifndef STRUCT_ELASTICITY_DEP
#define STRUCT_ELASTICITY_DEP
struct elasticity_dep {
  static const char *name() { return "elasticity_dep"; }
};
#endif // ELASTICITY_DEP

template<class P_T>
class CaracFormulation<elasticity_dep,3,P_T>  {
public:
  typedef P_T T;
  static const char *name() { return "elasticity_dep"; }
  static const bool matrix_will_be_definite_positive=true;
  static const bool has_nodal_matrix = true;
  static const bool has_IS_contact_matrix=false;
  static const bool need_skin_assembly=false;
  typedef Norm1_is_inf Name_convergence_criterium;
  static const unsigned nb_vectors = 4;
  static const unsigned nb_matrices = 1;
  static const unsigned auto_contact = false;
  static const bool friction_coeff_is_a_nodal_variable = 0;
  static const unsigned offset_of_pos_unknown=3;
  static const unsigned pos_is_an_unknown = false;
  static const unsigned nb_der_var = 1;
  template<class TF> static void add_to_der_vars( TF &f, const Vec<T> &v ) {
      (*f.m).poisson_ratio += v[ 0 ];
  }
  static bool is_unknown(const std::string &s) { return (s=="dep"); }
  static unsigned num_in_vec_unknown(const std::string &s) { if ( s=="dep" )return 0; return 0;  }
  template<unsigned num_mat,unsigned inner=0> struct NodalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  template<unsigned num_mat,unsigned inner=0> struct GlobalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  
  static const unsigned nb_nodal_unknowns = 3;
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
    node.dep[2]=vecs[0][indice+2]; node.dep[1]=vecs[0][indice+1]; node.dep[0]=vecs[0][indice+0];
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
    node.dep[2]=vecs[0][indice+2]; node.dep[1]=vecs[0][indice+1]; node.dep[0]=vecs[0][indice+0];
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
    vecs[0][indice+0]=node.dep[0]; vecs[1][indice+0]=node.dep[0]; vecs[2][indice+0]=node.dep[0]; vecs[3][indice+0]=node.dep[0]; vecs[4][indice+0]=node.dep[0];
    vecs[0][indice+2]=node.dep[2]; vecs[1][indice+2]=node.dep[2]; vecs[2][indice+2]=node.dep[2]; vecs[3][indice+2]=node.dep[2]; vecs[4][indice+2]=node.dep[2];
    vecs[0][indice+1]=node.dep[1]; vecs[1][indice+1]=node.dep[1]; vecs[2][indice+1]=node.dep[1]; vecs[3][indice+1]=node.dep[1]; vecs[4][indice+1]=node.dep[1];
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    T reg0=vecs[1][indice+1]-vecs[0][indice+1]; T reg1=vecs[1][indice+0]-vecs[0][indice+0]; T reg2=vecs[1][indice+2]-vecs[0][indice+2]; reg0=abs(reg0); reg1=abs(reg1);
    reg1=max(reg0,reg1); reg2=abs(reg2); return max(reg2,reg1);
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
    old_vec[indice+2]=vecs[1][indice+2]; old_vec[indice+0]=vecs[1][indice+0]; old_vec[indice+1]=vecs[1][indice+1];
  }
  
  static const unsigned nb_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_nodal_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};
#endif // ELASTICITY_DEP_3_NUM_0_CARAC_H
extern "C" void apply_on_elements_after_solve_0_elasticity_dep_Tetra_0( double * );
extern "C" void apply_on_elements_after_solve_1_elasticity_dep_Tetra_1( double * );
extern "C" void apply_on_elements_after_solve_2_elasticity_dep_Tetra_2( double * );
extern "C" void apply_on_elements_after_solve_3_elasticity_dep_Tetra_3( double * );
extern "C" void apply_on_elements_after_solve_4_elasticity_dep_Tetra_4( double * );
extern "C" void apply_on_elements_after_solve_5_elasticity_dep_Tetra_5( double * );
class Tetra;
template<unsigned A,class B,class C> class Node;
template<class A,class B,class C,class D,unsigned E> class Element;

// Carac for ...
template<class P_T_pos,class P_ND,class TED,unsigned nim,class TM,class T>
class CaracFormulationForElement<elasticity_dep,Element<Tetra,DefaultBehavior,Node<3,P_T_pos,P_ND>,TED,nim>,TM,T> {
public:
    template<unsigned num_mat,unsigned inner=0> struct ElemMatricesCarac {
        static const bool symm = true;
        static const bool herm = false;
        static const bool diag = false;
        static const bool linear = true;
    };
    static const unsigned order_integration = 0;
    static const bool has_elementary_matrix = true;
    static const bool has_skin_elementary_matrix = true;
    template<class TE,class TF, class TVEVE> static void after_solve(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; T reg1=elem.pos(2)[1]-elem.pos(0)[1]; T reg2=elem.pos(2)[2]-elem.pos(0)[2]; T reg3=elem.pos(3)[1]-elem.pos(0)[1]; T reg4=elem.pos(3)[2]-elem.pos(0)[2];
    reg0=reg0/(*f.m).elastic_modulus; T reg5=elem.pos(1)[1]-elem.pos(0)[1]; T reg6=elem.pos(1)[2]-elem.pos(0)[2]; T reg7=reg1*reg4; T reg8=reg4*reg5;
    T reg9=reg2*reg3; T reg10=reg3*reg6; T reg11=pow(reg0,2); T reg12=elem.pos(1)[0]-elem.pos(0)[0]; T reg13=1.0/(*f.m).elastic_modulus;
    T reg14=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg0=reg0*reg11; T reg15=reg1*reg6; T reg16=elem.pos(2)[0]-elem.pos(0)[0]; reg9=reg7-reg9;
    reg10=reg8-reg10; reg7=reg2*reg5; reg8=elem.pos(3)[0]-elem.pos(0)[0]; T reg17=reg9*reg12; T reg18=reg16*reg10;
    T reg19=reg13*reg0; reg0=reg14*reg0; reg15=reg7-reg15; reg18=reg17-reg18; reg7=reg8*reg15;
    reg17=reg16*reg4; T reg20=reg2*reg8; T reg21=reg8*reg5; T reg22=reg16*reg3; T reg23=reg13*reg19;
    reg19=reg14*reg19; T reg24=reg8*reg6; reg3=reg3*reg12; T reg25=reg14*reg0; reg8=reg1*reg8;
    reg4=reg4*reg12; T reg26=reg13*reg11; reg19=reg25+reg19; reg11=reg14*reg11; reg23=reg23-reg25;
    reg0=reg13*reg0; reg20=reg17-reg20; reg8=reg22-reg8; reg7=reg18+reg7; reg24=reg4-reg24;
    reg21=reg3-reg21; reg2=reg2*reg12; reg6=reg16*reg6; reg12=reg1*reg12; reg5=reg16*reg5;
    reg0=reg25+reg0; reg1=vectors[0][indices[2]+0]-vectors[0][indices[0]+0]; reg3=reg13*reg26; reg26=reg14*reg26; reg4=vectors[0][indices[1]+0]-vectors[0][indices[0]+0];
    reg16=reg14*reg11; reg17=vectors[0][indices[1]+1]-vectors[0][indices[0]+1]; reg18=vectors[0][indices[2]+1]-vectors[0][indices[0]+1]; reg22=vectors[0][indices[2]+2]-vectors[0][indices[0]+2]; reg25=vectors[0][indices[1]+2]-vectors[0][indices[0]+2];
    reg6=reg2-reg6; reg5=reg12-reg5; reg2=reg14*reg19; reg12=reg13*reg23; reg21=reg21/reg7;
    reg24=reg24/reg7; reg9=reg9/reg7; reg10=reg10/reg7; reg8=reg8/reg7; reg20=reg20/reg7;
    T reg27=reg10*reg18; T reg28=reg24*reg22; T reg29=reg9*reg17; T reg30=reg24*reg1; T reg31=reg9*reg4;
    T reg32=vectors[0][indices[3]+2]-vectors[0][indices[0]+2]; T reg33=reg24*reg18; T reg34=reg20*reg17; T reg35=reg20*reg4; reg15=reg15/reg7;
    T reg36=vectors[0][indices[3]+1]-vectors[0][indices[0]+1]; reg17=reg8*reg17; T reg37=vectors[0][indices[3]+0]-vectors[0][indices[0]+0]; reg2=reg12-reg2; reg12=reg10*reg22;
    T reg38=reg14*reg0; reg11=reg13*reg11; reg3=reg3-reg16; T reg39=reg9*reg25; T reg40=reg10*reg1;
    reg26=reg26+reg16; reg1=reg21*reg1; reg4=reg8*reg4; T reg41=reg20*reg25; reg18=reg21*reg18;
    reg5=reg5/reg7; reg7=reg6/reg7; reg41=reg28-reg41; reg6=reg7*reg32; reg35=reg30-reg35;
    reg28=reg7*reg37; reg27=reg29-reg27; reg29=reg15*reg36; reg18=reg17-reg18; reg17=reg5*reg37;
    reg1=reg4-reg1; reg12=reg39-reg12; reg4=reg15*reg32; reg30=reg5*reg36; reg22=reg21*reg22;
    reg38=reg2-reg38; reg25=reg8*reg25; reg3=reg13*reg3; reg37=reg15*reg37; reg40=reg31-reg40;
    reg26=reg14*reg26; reg34=reg33-reg34; reg36=reg7*reg36; reg2=reg16+reg11; reg29=reg27+reg29;
    reg32=reg5*reg32; reg2=reg14*reg2; reg26=reg3-reg26; reg1=reg17+reg1; reg19=reg19/reg38;
    reg23=reg23/reg38; reg4=reg12+reg4; reg0=reg0/reg38; reg37=reg40+reg37; elem.epsilon[0][0]=reg37;
    reg6=reg41-reg6; reg18=reg30+reg18; reg36=reg34-reg36; elem.epsilon[0][1]=reg36; reg28=reg35-reg28;
    reg22=reg25-reg22; reg2=reg26-reg2; reg29=reg28+reg29; reg3=reg19*reg36; reg12=reg0*reg36;
    reg13=reg23*reg36; reg14=reg19*reg37; reg22=reg32+reg22; elem.epsilon[0][2]=reg22; reg6=reg18+reg6;
    reg4=reg1+reg4; reg1=reg23*reg37; reg6=0.5*reg6; elem.epsilon[0][5]=reg6; reg37=reg36+reg37;
    reg4=0.5*reg4; elem.epsilon[0][4]=reg4; reg29=0.5*reg29; elem.epsilon[0][3]=reg29; reg17=reg23*reg22;
    reg12=reg14+reg12; reg13=reg14+reg13; reg1=reg3+reg1; reg3=reg0*reg22; reg38=reg2/reg38;
    elem.sigma[0][4]=reg38*reg4; elem.sigma[0][3]=reg38*reg29; elem.sigma[0][2]=reg12+reg17; elem.sigma[0][1]=reg3+reg13; elem.sigma[0][0]=reg3+reg1;
    elem.sigma[0][5]=reg38*reg6; elem.tr_epsilon=reg22+reg37;
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_2(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_3(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_4(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_5(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_6(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
  
  static const unsigned nb_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};

// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; T reg1=var_inter[0]-0.5; T reg2=var_inter[0]-0.16666666666666665741; T reg3=var_inter[0]-0.25; reg0=reg0/(*f.m).elastic_modulus;
    T reg4=reg2*reg1; reg1=reg3*reg1; T reg5=elem.pos(2)[1]-elem.pos(0)[1]; T reg6=elem.pos(2)[2]-elem.pos(0)[2]; T reg7=elem.pos(3)[1]-elem.pos(0)[1];
    T reg8=elem.pos(3)[2]-elem.pos(0)[2]; T reg9=elem.pos(1)[1]-elem.pos(0)[1]; T reg10=elem.pos(1)[2]-elem.pos(0)[2]; T reg11=pow(reg0,2); T reg12=var_inter[1]-0.25;
    reg1=reg1/0.027777777777777783175; T reg13=var_inter[1]-0.16666666666666665741; reg4=reg4/0.020833333333333335646; reg2=reg3*reg2; reg4=reg13*reg4;
    reg3=reg5*reg8; T reg14=reg8*reg9; T reg15=reg6*reg7; T reg16=reg7*reg10; T reg17=1.0/(*f.m).elastic_modulus;
    reg2=reg2/0.083333333333333342585; T reg18=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg19=var_inter[1]-0.5; reg1=reg1*reg12; reg0=reg0*reg11;
    T reg20=reg18*reg11; T reg21=reg19*reg1; reg4=reg19*reg4; reg15=reg3-reg15; reg11=reg17*reg11;
    reg16=reg14-reg16; reg3=reg6*reg9; reg14=reg5*reg10; T reg22=reg17*reg0; T reg23=elem.pos(1)[0]-elem.pos(0)[0];
    reg0=reg18*reg0; T reg24=elem.pos(2)[0]-elem.pos(0)[0]; reg2=reg12*reg2; reg12=elem.pos(3)[0]-elem.pos(0)[0]; T reg25=reg18*reg22;
    T reg26=reg17*reg11; T reg27=reg18*reg0; T reg28=reg15*reg23; T reg29=reg24*reg16; reg11=reg18*reg11;
    reg14=reg3-reg14; reg22=reg17*reg22; reg3=reg18*reg20; T reg30=var_inter[2]-0.16666666666666665741; reg21=reg21/0.027777777777777783175;
    reg4=reg4/0.020833333333333335646; T reg31=var_inter[2]-0.25; reg2=reg19*reg2; reg19=reg6*reg12; T reg32=reg24*reg8;
    T reg33=reg7*reg23; T reg34=reg12*reg10; T reg35=reg12*reg14; T reg36=reg24*reg7; reg1=reg13*reg1;
    reg29=reg28-reg29; reg13=reg12*reg9; reg28=var_inter[2]-0.5; T reg37=reg4*reg30; T reg38=reg5*reg12;
    T reg39=reg8*reg23; reg21=reg21*reg31; reg11=reg11+reg3; reg2=reg2/0.027777777777777783175; reg26=reg26-reg3;
    reg0=reg17*reg0; reg25=reg27+reg25; reg20=reg17*reg20; reg22=reg22-reg27; reg34=reg39-reg34;
    reg39=reg24*reg9; reg13=reg33-reg13; reg33=reg5*reg23; reg2=reg31*reg2; T reg40=reg6*reg23;
    reg38=reg36-reg38; reg36=reg24*reg10; T reg41=reg28*reg21; T reg42=reg18*reg25; reg0=reg27+reg0;
    reg26=reg17*reg26; reg27=reg3+reg20; reg11=reg18*reg11; reg17=reg17*reg22; reg35=reg29+reg35;
    reg1=reg1/0.083333333333333342585; reg19=reg32-reg19; reg37=reg37*reg28; reg38=reg38/reg35; reg19=reg19/reg35;
    reg41=reg41/0.027777777777777783175; reg27=reg18*reg27; reg11=reg26-reg11; reg16=reg16/reg35; reg2=reg28*reg2;
    reg39=reg33-reg39; reg42=reg17-reg42; reg36=reg40-reg36; reg18=reg18*reg0; reg15=reg15/reg35;
    reg37=reg37/0.020833333333333335646; reg1=reg31*reg1; reg13=reg13/reg35; reg34=reg34/reg35; reg18=reg42-reg18;
    reg27=reg11-reg27; reg11=reg16-reg15; reg17=reg37*elem.proute[0](1,1); reg26=reg41*elem.proute[1](1,1); reg29=reg19-reg34;
    reg31=reg13-reg38; reg1=reg28*reg1; reg2=reg2/0.027777777777777783175; reg14=reg14/reg35; reg36=reg36/reg35;
    reg39=reg39/reg35; reg31=reg31-reg39; reg28=0.5*reg19; reg32=0.5*reg15; reg29=reg36+reg29;
    reg11=reg11-reg14; reg27=reg27/reg18; reg33=0.5*reg34; reg40=0.5*reg16; reg42=0.5*reg36;
    T reg43=0.5*reg14; reg21=reg30*reg21; reg17=reg26-reg17; reg26=reg2*elem.proute[2](1,1); reg1=reg1/0.027777777777777783175;
    reg30=0.5*reg13; T reg44=reg27*reg33; T reg45=reg27*reg40; T reg46=0.5*reg31; reg21=reg21/0.083333333333333342585;
    T reg47=reg27*reg32; T reg48=0.5*reg29; T reg49=reg27*reg42; T reg50=0.5*reg39; reg26=reg17+reg26;
    reg17=reg1*elem.proute[3](1,1); T reg51=reg27*reg43; T reg52=0.5*reg38; T reg53=reg27*reg28; T reg54=0.5*reg11;
    reg22=reg22/reg18; T reg55=reg27*reg52; T reg56=2*reg53; reg47=2*reg47; T reg57=reg16*reg22;
    reg44=2*reg44; T reg58=reg15*reg22; T reg59=reg27*reg30; T reg60=1-var_inter[0]; T reg61=2*reg45;
    T reg62=reg39*reg22; T reg63=reg14*reg22; T reg64=2*reg49; T reg65=reg27*reg50; reg51=2*reg51;
    T reg66=reg13*reg22; T reg67=reg38*reg22; T reg68=reg19*reg22; T reg69=reg36*reg22; T reg70=reg34*reg22;
    T reg71=reg21*elem.proute[4](1,1); reg17=reg26+reg17; reg26=reg27*reg54; T reg72=reg27*reg46; reg0=reg0/reg18;
    T reg73=reg27*reg48; reg18=reg25/reg18; reg25=reg36*reg18; T reg74=reg16*reg63; reg65=2*reg65;
    reg73=2*reg73; T reg75=reg36*reg0; T reg76=reg33*reg64; T reg77=reg13*reg0; T reg78=reg61*reg43;
    T reg79=reg36*reg70; T reg80=reg32*reg61; T reg81=reg56*reg33; T reg82=reg22*reg11; T reg83=reg19*reg70;
    T reg84=reg34*reg18; T reg85=reg16*reg58; T reg86=2*reg59; T reg87=reg13*reg62; T reg88=reg16*reg18;
    T reg89=reg14*reg18; T reg90=reg13*reg67; T reg91=reg14*reg57; T reg92=reg44*reg42; T reg93=reg15*reg18;
    T reg94=reg40*reg51; T reg95=reg34*reg69; T reg96=reg22*reg31; T reg97=reg22*reg29; T reg98=reg19*reg0;
    T reg99=reg18*reg11; T reg100=reg47*reg40; T reg101=reg34*reg68; T reg102=reg34*reg0; T reg103=reg39*reg0;
    reg71=reg17+reg71; reg55=2*reg55; reg17=reg28*reg44; T reg104=reg15*reg57; T reg105=reg19*reg18;
    T reg106=reg38*reg66; reg72=2*reg72; T reg107=reg39*reg66; T reg108=reg0*reg31; T reg109=reg38*reg0;
    reg26=2*reg26; reg60=reg60-var_inter[1]; T reg110=reg38*reg67; T reg111=reg38*reg96; T reg112=reg28*reg51;
    T reg113=reg15*reg25; T reg114=reg31*reg96; T reg115=reg44*reg30; T reg116=reg34*reg77; T reg117=reg40*reg61;
    T reg118=reg52*reg64; T reg119=reg34*reg70; reg87=reg94+reg87; T reg120=reg54*reg61; T reg121=reg38*reg88;
    reg70=reg29*reg70; T reg122=reg44*reg40; T reg123=reg34*reg88; T reg124=reg32*reg86; T reg125=reg19*reg103;
    T reg126=reg31*reg67; T reg127=reg101+reg100; T reg128=reg13*reg66; T reg129=reg28*reg64; T reg130=reg13*reg102;
    T reg131=reg33*reg86; T reg132=reg15*reg63; T reg133=reg19*reg93; T reg134=reg29*reg69; T reg135=reg13*reg89;
    T reg136=reg54*reg51; reg90=reg100+reg90; reg100=reg40*reg65; T reg137=reg38*reg98; T reg138=reg55*reg40;
    T reg139=reg13*reg93; T reg140=reg13*reg96; T reg141=reg52*reg61; T reg142=reg15*reg77; T reg143=reg28*reg55;
    T reg144=reg72*reg40; T reg145=reg13*reg99; T reg146=reg0*reg29; reg94=reg95+reg94; T reg147=reg26*reg32;
    T reg148=reg31*reg62; T reg149=reg33*reg61; T reg150=reg16*reg57; T reg151=reg33*reg44; T reg152=reg15*reg82;
    T reg153=reg28*reg65; T reg154=reg38*reg62; T reg155=reg73*reg28; T reg156=reg47*reg30; T reg157=reg28*reg47;
    T reg158=reg15*reg105; T reg159=reg73*reg33; T reg160=reg16*reg109; T reg161=reg16*reg82; T reg162=reg55*reg30;
    reg85=reg81+reg85; T reg163=reg28*reg56; T reg164=reg15*reg58; T reg165=reg32*reg64; reg83=reg80+reg83;
    T reg166=reg26*reg30; T reg167=reg16*reg108; T reg168=reg19*reg69; T reg169=reg31*reg88; T reg170=reg54*reg86;
    T reg171=reg52*reg86; T reg172=reg104+reg17; T reg173=reg26*reg40; T reg174=reg34*reg97; T reg175=reg31*reg66;
    T reg176=reg56*reg32; T reg177=reg30*reg51; T reg178=reg16*reg103; T reg179=reg30*reg65; reg74=reg76+reg74;
    T reg180=reg32*reg51; T reg181=reg19*reg89; T reg182=reg19*reg109; T reg183=reg80+reg106; T reg184=reg38*reg75;
    T reg185=reg56*reg52; T reg186=reg19*reg97; T reg187=reg32*reg47; T reg188=reg16*reg84; T reg189=reg19*reg68;
    T reg190=reg78+reg107; T reg191=reg56*reg50; T reg192=reg91+reg92; T reg193=reg86*reg50; T reg194=reg36*reg109;
    T reg195=reg18*reg29; T reg196=reg11*reg63; T reg197=reg36*reg103; T reg198=reg48*reg64; T reg199=reg14*reg77;
    T reg200=reg61*reg50; T reg201=reg36*reg68; T reg202=reg86*reg43; T reg203=reg47*reg43; reg63=reg14*reg63;
    T reg204=reg54*reg26; T reg205=reg64*reg50; T reg206=reg29*reg97; T reg207=reg42*reg64; T reg208=reg39*reg88;
    T reg209=reg14*reg25; reg67=reg39*reg67; T reg210=reg36*reg93; T reg211=reg42*reg51; T reg212=reg55*reg42;
    T reg213=reg56*reg43; T reg214=reg48*reg56; T reg215=reg39*reg98; reg96=reg39*reg96; T reg216=reg26*reg43;
    reg97=reg36*reg97; T reg217=reg64*reg43; T reg218=reg36*reg89; T reg219=reg14*reg82; T reg220=reg73*reg42;
    T reg221=reg60-var_inter[2]; reg62=reg39*reg62; T reg222=reg71+(*f.m).f_vol[0]; T reg223=reg71+(*f.m).f_vol[1]; T reg224=reg43*reg51;
    T reg225=reg48*reg44; reg71=reg71+(*f.m).f_vol[2]; T reg226=reg14*reg58; T reg227=reg56*reg42; T reg228=reg42*reg65;
    reg82=reg11*reg82; T reg229=reg48*reg73; T reg230=reg36*reg69; T reg231=reg11*reg57; T reg232=reg46*reg61;
    reg58=reg11*reg58; T reg233=reg39*reg75; T reg234=reg47*reg42; T reg235=reg29*reg68; reg79=reg78+reg79;
    T reg236=reg11*reg77; T reg237=reg14*reg105; T reg238=reg54*reg47; T reg239=reg16*reg195; reg161=reg159-reg161;
    reg154=reg180+reg154; T reg240=reg39*reg146; reg17=reg17+reg183; T reg241=reg38*reg89; T reg242=reg32*reg65;
    T reg243=reg72*reg43; T reg244=reg39*reg99; T reg245=reg72*reg30; T reg246=reg197+reg205; T reg247=reg224+reg230;
    reg218=reg217+reg218; T reg248=var_inter[2]*reg71; T reg249=reg26*reg33; reg153=reg184+reg153; reg166=reg167+reg166;
    T reg250=var_inter[1]*reg222; T reg251=reg36*reg88; T reg252=reg86*reg42; T reg253=var_inter[0]*reg71; T reg254=reg125+reg118;
    reg92=reg92+reg190; reg180=reg180+reg168; T reg255=reg39*reg89; T reg256=reg65*reg43; reg181=reg165+reg181;
    T reg257=reg52*reg44; T reg258=reg19*reg77; T reg259=reg171+reg83; reg228=reg233+reg228; T reg260=reg19*reg88;
    T reg261=reg32*reg44; T reg262=reg182+reg185; T reg263=reg187+reg189; T reg264=reg26*reg50; reg62=reg224+reg62;
    reg224=reg72*reg42; reg96=reg216+reg96; T reg265=reg39*reg93; T reg266=reg55*reg43; T reg267=reg28*reg86;
    T reg268=reg38*reg102; T reg269=reg121+reg124; reg110=reg187+reg110; reg143=reg137+reg143; reg212=reg215+reg212;
    reg67=reg203+reg67; reg187=reg55*reg32; T reg270=reg38*reg93; reg111=reg147+reg111; T reg271=reg208+reg202;
    T reg272=reg39*reg102; T reg273=reg72*reg28; T reg274=reg38*reg146; T reg275=reg72*reg32; T reg276=reg14*reg109;
    reg140=reg173+reg140; T reg277=reg47*reg50; T reg278=reg13*reg146; T reg279=reg72*reg33; reg144=reg145+reg144;
    reg145=var_inter[1]*reg71; T reg280=reg30*reg64; T reg281=reg192+reg193; T reg282=reg34*reg103; T reg283=reg179+reg94;
    T reg284=reg14*reg84; T reg285=reg61*reg42; T reg286=reg199+reg200; T reg287=reg40*reg64; T reg288=reg34*reg89;
    reg115=reg116+reg115; reg119=reg119+reg117; reg122=reg123+reg122; reg63=reg63+reg207; reg87=reg76+reg87;
    T reg289=var_inter[2]*reg222; reg219=reg219-reg220; T reg290=reg13*reg75; T reg291=reg33*reg65; reg100=reg135+reg100;
    reg135=reg72*reg50; T reg292=reg14*reg195; T reg293=reg117+reg128; T reg294=reg26*reg42; T reg295=reg14*reg108;
    reg130=reg131+reg130; T reg296=reg86*reg40; T reg297=reg13*reg88; reg226=reg226+reg227; T reg298=reg55*reg50;
    reg90=reg81+reg90; T reg299=reg13*reg98; T reg300=reg55*reg33; reg138=reg139+reg138; reg234=reg237+reg234;
    reg177=reg178+reg177; reg139=reg16*reg25; T reg301=reg33*reg51; reg179=reg74+reg179; reg210=reg213+reg210;
    reg203=reg203+reg201; T reg302=reg30*reg61; T reg303=reg16*reg77; reg188=reg149+reg188; T reg304=reg194+reg191;
    T reg305=reg30*reg86; T reg306=reg151+reg150; T reg307=reg44*reg43; reg156=reg160+reg156; T reg308=reg193+reg79;
    T reg309=reg36*reg77; T reg310=reg16*reg105; T reg311=reg47*reg33; T reg312=reg85+reg162; T reg313=reg44*reg50;
    T reg314=reg50*reg65; T reg315=reg56*reg30; T reg316=reg34*reg109; reg162=reg162+reg127; reg211=reg209+reg211;
    T reg317=reg14*reg103; T reg318=reg50*reg51; T reg319=var_inter[2]*reg223; T reg320=reg56*reg40; T reg321=reg73*reg43;
    T reg322=reg36*reg99; T reg323=reg34*reg93; T reg324=reg73*reg30; T reg325=reg34*reg108; reg173=reg174-reg173;
    reg97=reg216-reg97; reg174=reg73*reg40; reg216=reg34*reg99; T reg326=var_inter[1]*reg223; T reg327=reg36*reg108;
    T reg328=reg73*reg50; T reg329=reg73*reg54; T reg330=reg29*reg99; T reg331=reg120+reg175; T reg332=reg142+reg141;
    T reg333=reg48*reg55; T reg334=reg31*reg98; T reg335=reg46*reg56; T reg336=reg221*reg223; T reg337=reg54*reg55;
    reg132=reg132+reg129; T reg338=reg31*reg89; T reg339=reg26*reg52; T reg340=reg31*reg93; T reg341=reg52*reg65;
    T reg342=reg15*reg108; T reg343=reg48*reg26; T reg344=reg29*reg109; T reg345=reg29*reg77; T reg346=reg46*reg51;
    reg93=reg29*reg93; reg114=reg204+reg114; T reg347=reg46*reg72; T reg348=reg46*reg44; reg112=reg113+reg112;
    reg58=reg58-reg214; T reg349=reg11*reg103; T reg350=reg48*reg86; reg102=reg31*reg102; T reg351=reg38*reg99;
    T reg352=reg225-reg231; T reg353=reg29*reg88; T reg354=reg15*reg109; T reg355=reg52*reg47; reg44=reg54*reg44;
    reg157=reg158+reg157; T reg356=reg221*reg222; T reg357=reg11*reg108; T reg358=reg169+reg170; T reg359=reg29*reg108;
    T reg360=reg172+reg171; T reg361=reg46*reg73; reg204=reg206+reg204; reg126=reg238+reg126; reg206=reg52*reg55;
    T reg362=reg15*reg84; reg164=reg164+reg163; T reg363=reg46*reg26; reg70=reg70-reg120; T reg364=reg28*reg61;
    reg82=reg82+reg229; T reg365=reg46*reg86; T reg366=reg19*reg99; T reg367=reg221*reg71; T reg368=reg48*reg65;
    reg89=reg29*reg89; T reg369=reg46*reg65; T reg370=reg54*reg64; reg186=reg147-reg186; reg147=reg72*reg52;
    reg196=reg196-reg198; reg152=reg152-reg155; T reg371=reg11*reg105; reg108=reg19*reg108; T reg372=reg48*reg61;
    T reg373=reg46*reg64; T reg374=reg29*reg103; T reg375=reg73*reg52; T reg376=reg46*reg47; T reg377=reg11*reg195;
    T reg378=var_inter[0]*reg222; reg148=reg136+reg148; reg238=reg238-reg235; reg136=reg136-reg134; T reg379=reg236+reg232;
    reg133=reg133+reg176; reg55=reg46*reg55; T reg380=reg48*reg51; reg47=reg48*reg47; reg51=reg52*reg51;
    reg109=reg11*reg109; reg103=reg15*reg103; reg65=reg54*reg65; reg146=reg31*reg146; T reg381=var_inter[0]*reg223;
    reg84=reg11*reg84; reg195=reg15*reg195; T reg382=reg11*reg25; reg26=reg26*reg28; T reg383=reg72*reg54;
    reg99=reg31*reg99; reg72=reg48*reg72; reg73=reg73*reg32; T reg384=reg54*reg56; T reg385=reg31*reg75;
    reg102=reg102-reg350; reg174=reg216-reg174; reg216=reg35*reg179; reg65=reg338+reg65; reg326=(*f.m).density*reg326;
    reg376=reg109+reg376; reg109=reg35*reg271; reg338=reg35*reg188; reg226=reg226+reg298; reg344=reg344-reg335;
    reg272=reg272+reg252; reg294=reg292-reg294; reg343=reg377+reg343; reg301=reg301+reg139; reg368=reg368-reg385;
    reg292=reg35*reg246; reg377=reg35*reg177; T reg386=reg303+reg302; reg238=reg55+reg238; reg225=reg225-reg331;
    reg114=reg229+reg114; reg288=reg288+reg287; reg348=reg348-reg345; reg72=reg146+reg72; reg146=reg35*reg283;
    reg151=reg151+reg293; reg266=reg265+reg266; reg282=reg282+reg280; reg145=(*f.m).density*reg145; reg383=reg99+reg383;
    reg99=reg35*reg144; reg55=reg58+reg55; reg367=(*f.m).density*reg367; reg278=reg279-reg278; reg58=reg35*reg130;
    reg89=reg89-reg370; reg140=reg159-reg140; reg220=reg96-reg220; reg374=reg374-reg373; reg96=reg35*reg138;
    reg159=reg297+reg296; reg224=reg240-reg224; reg300=reg300+reg299; reg136=reg369+reg136; reg229=reg35*reg90;
    reg173=reg173-reg245; reg219=reg219+reg135; reg240=reg35*reg358; reg324=reg325-reg324; reg44=reg44-reg353;
    reg289=(*f.m).density*reg289; reg323=reg323+reg320; reg265=reg35*reg87; reg126=reg126-reg214; reg67=reg227+reg67;
    reg279=reg35*reg162; reg248=(*f.m).density*reg248; reg333=reg333-reg334; reg316=reg316+reg315; reg70=reg70-reg365;
    reg363=reg357+reg363; reg325=reg35*reg122; reg291=reg291+reg290; reg337=reg340+reg337; reg119=reg305+reg119;
    reg47=reg47-reg371; reg340=reg35*reg212; reg243=reg244+reg243; reg244=reg35*reg115; reg357=reg35*reg100;
    reg366=reg73-reg366; reg73=reg35*reg332; reg187=reg270+reg187; reg270=reg35*reg211; reg336=(*f.m).density*reg336;
    T reg387=reg35*reg143; reg362=reg362+reg364; reg110=reg163+reg110; reg369=reg196+reg369; reg63=reg63+reg314;
    reg329=reg330+reg329; reg261=reg261+reg260; reg196=reg35*reg269; reg330=reg35*reg218; T reg388=reg35*reg360;
    reg186=reg147+reg186; reg203=reg298+reg203; reg268=reg268+reg267; reg298=reg35*reg262; reg62=reg207+reg62;
    reg355=reg354+reg355; reg354=reg35*reg17; reg51=reg103+reg51; reg180=reg341+reg180; reg97=reg135+reg97;
    reg380=reg380-reg382; reg103=reg35*reg181; reg313=reg309+reg313; reg135=reg35*reg112; reg328=reg328-reg327;
    T reg389=reg35*reg254; reg253=(*f.m).density*reg253; reg257=reg258+reg257; reg307=reg251+reg307; reg322=reg321-reg322;
    reg275=reg351+reg275; reg346=reg349+reg346; reg319=(*f.m).density*reg319; reg381=(*f.m).density*reg381; reg341=reg132+reg341;
    reg273=reg274-reg273; reg318=reg317+reg318; reg155=reg111-reg155; reg111=reg35*reg210; reg132=reg35*reg259;
    reg352=reg352-reg365; reg339=reg342+reg339; reg239=reg249-reg239; reg249=reg35*reg304; reg256=reg255+reg256;
    reg255=reg35*reg166; reg26=reg195-reg26; reg82=reg82+reg347; reg195=reg35*reg312; reg247=reg314+reg247;
    reg277=reg276+reg277; reg147=reg152+reg147; reg311=reg311+reg310; reg93=reg93-reg384; reg152=reg35*reg133;
    reg378=(*f.m).density*reg378; reg84=reg84-reg372; reg274=reg35*reg156; reg295=reg264+reg295; reg264=reg35*reg92;
    reg276=reg35*reg234; reg148=reg148-reg198; reg306=reg306+reg305; reg314=reg35*reg286; reg242=reg241+reg242;
    reg204=reg347+reg204; reg241=reg35*reg308; reg317=reg35*reg157; reg321=reg35*reg153; reg263=reg206+reg263;
    reg375=reg375-reg108; reg284=reg284+reg285; reg342=reg35*reg228; reg154=reg129+reg154; reg356=(*f.m).density*reg356;
    reg361=reg359+reg361; reg347=reg35*reg281; reg349=reg35*reg379; reg245=reg161-reg245; reg206=reg164+reg206;
    reg250=(*f.m).density*reg250; reg161=ponderation*reg58; reg164=ponderation*reg229; reg351=reg35*reg159; reg224=reg35*reg224;
    reg328=reg35*reg328; reg359=ponderation*reg249; reg369=reg35*reg369; T reg390=ponderation*reg349; reg89=reg35*reg89;
    T reg391=ponderation*reg241; reg84=reg35*reg84; reg203=reg35*reg203; reg348=reg35*reg348; T reg392=ponderation*reg111;
    T reg393=ponderation*reg330; T reg394=ponderation*reg314; reg204=reg35*reg204; reg284=reg35*reg284; reg219=reg35*reg219;
    T reg395=ponderation*reg292; reg344=reg35*reg344; T reg396=ponderation*reg347; reg294=reg35*reg294; reg361=reg35*reg361;
    reg376=reg35*reg376; reg277=reg35*reg277; reg238=reg35*reg238; reg93=reg35*reg93; reg226=reg35*reg226;
    reg247=reg35*reg247; T reg397=ponderation*reg276; reg97=reg35*reg97; reg151=reg35*reg151; reg380=reg35*reg380;
    reg243=reg35*reg243; reg313=reg35*reg313; reg322=reg35*reg322; T reg398=ponderation*reg357; reg346=reg35*reg346;
    reg318=reg35*reg318; reg352=reg35*reg352; reg70=reg35*reg70; reg291=reg35*reg291; reg47=reg35*reg47;
    T reg399=ponderation*reg270; reg63=reg35*reg63; reg329=reg35*reg329; T reg400=ponderation*reg265; reg44=reg35*reg44;
    T reg401=ponderation*reg317; T reg402=ponderation*reg321; reg154=reg35*reg154; reg206=reg35*reg206; T reg403=reg35*reg381;
    reg245=reg35*reg245; T reg404=ponderation*reg132; reg339=reg35*reg339; reg239=reg35*reg239; reg256=reg35*reg256;
    T reg405=ponderation*reg255; reg26=reg35*reg26; T reg406=ponderation*reg195; reg366=reg35*reg366; reg147=reg35*reg147;
    reg311=reg35*reg311; T reg407=ponderation*reg264; T reg408=ponderation*reg274; reg82=reg35*reg82; reg148=reg35*reg148;
    T reg409=reg35*reg145; reg306=reg35*reg306; reg180=reg35*reg180; reg368=reg35*reg368; T reg410=ponderation*reg338;
    reg261=reg35*reg261; reg275=reg35*reg275; reg273=reg35*reg273; T reg411=reg35*reg250; T reg412=reg35*reg378;
    T reg413=ponderation*reg103; reg155=reg35*reg155; T reg414=reg35*reg367; T reg415=ponderation*reg73; reg187=reg35*reg187;
    reg51=reg35*reg51; T reg416=reg35*reg336; reg362=reg35*reg362; T reg417=ponderation*reg387; reg341=reg35*reg341;
    reg110=reg35*reg110; T reg418=reg35*reg356; T reg419=reg35*reg326; T reg420=ponderation*reg388; T reg421=ponderation*reg196;
    reg62=reg35*reg62; reg268=reg35*reg268; reg355=reg35*reg355; T reg422=ponderation*reg354; reg242=reg35*reg242;
    reg257=reg35*reg257; reg307=reg35*reg307; T reg423=ponderation*reg342; T reg424=ponderation*reg340; reg337=reg35*reg337;
    reg119=reg35*reg119; reg363=reg35*reg363; reg114=reg35*reg114; T reg425=ponderation*reg244; reg375=reg35*reg375;
    reg288=reg35*reg288; T reg426=ponderation*reg135; reg72=reg35*reg72; T reg427=ponderation*reg146; reg266=reg35*reg266;
    reg282=reg35*reg282; T reg428=ponderation*reg152; reg383=reg35*reg383; T reg429=ponderation*reg99; reg278=reg35*reg278;
    T reg430=reg35*reg248; reg220=reg35*reg220; reg374=reg35*reg374; reg140=reg35*reg140; T reg431=ponderation*reg96;
    reg55=reg35*reg55; reg295=reg35*reg295; reg136=reg35*reg136; reg300=reg35*reg300; T reg432=reg35*reg253;
    reg386=reg35*reg386; reg272=reg35*reg272; reg65=reg35*reg65; T reg433=ponderation*reg216; reg301=reg35*reg301;
    T reg434=reg35*reg289; reg225=reg35*reg225; T reg435=ponderation*reg377; T reg436=ponderation*reg109; reg102=reg35*reg102;
    reg174=reg35*reg174; reg343=reg35*reg343; reg173=reg35*reg173; T reg437=ponderation*reg298; reg186=reg35*reg186;
    T reg438=ponderation*reg240; reg324=reg35*reg324; T reg439=ponderation*reg389; reg323=reg35*reg323; T reg440=reg35*reg319;
    reg67=reg35*reg67; reg126=reg35*reg126; T reg441=ponderation*reg279; reg333=reg35*reg333; reg316=reg35*reg316;
    reg263=reg35*reg263; T reg442=ponderation*reg325; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg352; reg352=ponderation*reg411; sollicitation[indices[2]+0]+=reg352;
    matrix(indices[3]+1,indices[2]+1)+=-reg391; reg391=ponderation*reg419; sollicitation[indices[2]+1]+=reg391; T reg443=ponderation*reg409; sollicitation[indices[2]+2]+=reg443;
    T reg444=ponderation*reg434; sollicitation[indices[3]+0]+=reg444; T reg445=ponderation*reg440; sollicitation[indices[3]+1]+=reg445; T reg446=ponderation*reg430;
    sollicitation[indices[3]+2]+=reg446; matrix(indices[3]+2,indices[0]+1)+=ponderation*reg224; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg55; matrix(indices[3]+2,indices[0]+2)+=ponderation*reg220; matrix(indices[3]+2,indices[0]+0)+=ponderation*reg243;
    matrix(indices[3]+2,indices[1]+0)+=ponderation*reg266; matrix(indices[0]+0,indices[0]+2)+=ponderation*reg363; matrix(indices[3]+2,indices[1]+1)+=-reg424; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg47; matrix(indices[3]+2,indices[1]+2)+=ponderation*reg67;
    matrix(indices[0]+0,indices[0]+1)+=ponderation*reg343; matrix(indices[3]+1,indices[3]+2)+=-reg395; matrix(indices[3]+2,indices[2]+0)+=-reg436; matrix(indices[3]+2,indices[2]+1)+=ponderation*reg272; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg82;
    matrix(indices[3]+1,indices[3]+1)+=ponderation*reg247; matrix(indices[3]+2,indices[2]+2)+=-reg407; matrix(indices[3]+2,indices[3]+0)+=ponderation*reg256; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg376; matrix(indices[3]+1,indices[3]+0)+=-reg393;
    matrix(indices[3]+2,indices[3]+1)+=-reg423; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg62; reg47=ponderation*reg418; sollicitation[indices[0]+0]+=reg47; reg55=ponderation*reg416;
    sollicitation[indices[0]+1]+=reg55; reg62=ponderation*reg414; sollicitation[indices[0]+2]+=reg62; matrix(indices[3]+1,indices[2]+2)+=ponderation*reg313; reg67=ponderation*reg412;
    sollicitation[indices[1]+0]+=reg67; reg82=ponderation*reg403; sollicitation[indices[1]+1]+=reg82; reg220=ponderation*reg432; sollicitation[indices[1]+2]+=reg220;
    matrix(indices[1]+0,indices[1]+1)+=-reg401; matrix(indices[1]+2,indices[3]+1)+=-reg402; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg206; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg154; matrix(indices[1]+0,indices[0]+2)+=ponderation*reg339;
    matrix(indices[2]+0,indices[0]+0)+=ponderation*reg245; matrix(indices[2]+0,indices[0]+1)+=ponderation*reg239; matrix(indices[1]+0,indices[0]+1)+=ponderation*reg26; matrix(indices[2]+0,indices[0]+2)+=-reg405; matrix(indices[1]+0,indices[0]+0)+=ponderation*reg147;
    matrix(indices[2]+0,indices[1]+0)+=-reg406; matrix(indices[2]+0,indices[1]+1)+=ponderation*reg311; matrix(indices[2]+0,indices[1]+2)+=-reg408; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg148; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg306;
    matrix(indices[0]+2,indices[3]+1)+=ponderation*reg368; matrix(indices[2]+0,indices[2]+1)+=-reg410; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg386; matrix(indices[0]+2,indices[3]+0)+=ponderation*reg65; matrix(indices[2]+0,indices[3]+0)+=-reg433;
    matrix(indices[0]+2,indices[2]+2)+=ponderation*reg225; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg301; matrix(indices[2]+0,indices[3]+2)+=-reg435; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg102; matrix(indices[2]+1,indices[0]+0)+=ponderation*reg174;
    matrix(indices[2]+1,indices[0]+1)+=ponderation*reg173; matrix(indices[2]+1,indices[0]+2)+=ponderation*reg324; matrix(indices[0]+2,indices[1]+2)+=ponderation*reg126; matrix(indices[2]+1,indices[1]+0)+=ponderation*reg323; matrix(indices[0]+2,indices[1]+1)+=ponderation*reg333;
    matrix(indices[1]+1,indices[0]+2)+=ponderation*reg375; matrix(indices[3]+0,indices[0]+2)+=ponderation*reg295; matrix(indices[1]+1,indices[1]+0)+=-reg428; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg263; matrix(indices[1]+1,indices[0]+1)+=ponderation*reg186;
    matrix(indices[1]+1,indices[1]+2)+=-reg437; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg261; matrix(indices[1]+1,indices[0]+0)+=ponderation*reg366; matrix(indices[1]+1,indices[2]+1)+=-reg404; matrix(indices[1]+1,indices[2]+2)+=ponderation*reg257;
    matrix(indices[1]+0,indices[3]+2)+=ponderation*reg51; matrix(indices[1]+1,indices[3]+0)+=-reg413; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg180; matrix(indices[1]+0,indices[3]+1)+=-reg426; matrix(indices[1]+1,indices[3]+2)+=-reg439;
    matrix(indices[1]+0,indices[3]+0)+=ponderation*reg341; matrix(indices[1]+2,indices[0]+0)+=ponderation*reg275; matrix(indices[1]+2,indices[0]+1)+=ponderation*reg273; matrix(indices[1]+0,indices[2]+2)+=-reg415; matrix(indices[1]+2,indices[0]+2)+=ponderation*reg155;
    matrix(indices[1]+2,indices[1]+0)+=ponderation*reg187; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg362; matrix(indices[1]+2,indices[1]+1)+=-reg417; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg110; matrix(indices[1]+0,indices[2]+0)+=-reg420;
    matrix(indices[1]+2,indices[2]+0)+=-reg421; matrix(indices[1]+2,indices[2]+1)+=ponderation*reg268; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg355; matrix(indices[1]+2,indices[2]+2)+=-reg422; matrix(indices[1]+2,indices[3]+0)+=ponderation*reg242;
    matrix(indices[0]+1,indices[1]+2)+=ponderation*reg344; matrix(indices[3]+0,indices[0]+0)+=ponderation*reg219; matrix(indices[3]+0,indices[0]+1)+=ponderation*reg294; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg238; matrix(indices[3]+0,indices[1]+0)+=ponderation*reg226;
    matrix(indices[0]+2,indices[2]+0)+=-reg438; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg93; matrix(indices[3]+0,indices[1]+1)+=-reg397; matrix(indices[3]+0,indices[1]+2)+=ponderation*reg277; matrix(indices[0]+1,indices[0]+2)+=ponderation*reg361;
    matrix(indices[3]+0,indices[2]+0)+=-reg396; matrix(indices[3]+0,indices[2]+1)+=ponderation*reg284; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg204; matrix(indices[3]+0,indices[2]+2)+=-reg394; matrix(indices[0]+1,indices[0]+0)+=ponderation*reg329;
    matrix(indices[3]+0,indices[3]+0)+=ponderation*reg63; matrix(indices[3]+0,indices[3]+1)+=-reg399; matrix(indices[0]+0,indices[3]+2)+=ponderation*reg346; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg318; matrix(indices[3]+1,indices[0]+0)+=ponderation*reg322;
    matrix(indices[0]+0,indices[3]+1)+=ponderation*reg380; matrix(indices[3]+1,indices[0]+1)+=ponderation*reg97; matrix(indices[3]+1,indices[0]+2)+=ponderation*reg328; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg369; matrix(indices[3]+1,indices[1]+0)+=-reg392;
    matrix(indices[3]+1,indices[1]+1)+=ponderation*reg203; matrix(indices[0]+0,indices[2]+2)+=-reg390; matrix(indices[3]+1,indices[1]+2)+=-reg359; matrix(indices[3]+1,indices[2]+0)+=ponderation*reg307; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg84;
    matrix(indices[2]+1,indices[1]+1)+=-reg441; matrix(indices[2]+1,indices[1]+2)+=ponderation*reg316; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg337; matrix(indices[2]+1,indices[2]+0)+=-reg442; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg119;
    matrix(indices[0]+2,indices[0]+2)+=ponderation*reg114; matrix(indices[2]+1,indices[2]+2)+=-reg425; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg288; matrix(indices[0]+2,indices[0]+1)+=ponderation*reg72; matrix(indices[2]+1,indices[3]+1)+=-reg427;
    matrix(indices[0]+2,indices[0]+0)+=ponderation*reg383; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg282; matrix(indices[2]+2,indices[0]+0)+=-reg429; matrix(indices[2]+2,indices[0]+1)+=ponderation*reg278; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg374;
    matrix(indices[2]+2,indices[0]+2)+=ponderation*reg140; matrix(indices[2]+2,indices[1]+0)+=-reg431; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg136; matrix(indices[2]+2,indices[1]+1)+=ponderation*reg300; matrix(indices[2]+2,indices[1]+2)+=-reg164;
    matrix(indices[0]+1,indices[3]+0)+=ponderation*reg89; matrix(indices[2]+2,indices[2]+0)+=ponderation*reg351; matrix(indices[2]+2,indices[2]+1)+=-reg161; matrix(indices[0]+1,indices[2]+2)+=ponderation*reg348; matrix(indices[2]+2,indices[2]+2)+=ponderation*reg151;
    matrix(indices[2]+2,indices[3]+0)+=-reg398; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg70; matrix(indices[2]+2,indices[3]+1)+=ponderation*reg291; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg44; matrix(indices[2]+2,indices[3]+2)+=-reg400;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; T reg1=var_inter[0]-0.5; T reg2=var_inter[0]-0.16666666666666665741; T reg3=var_inter[0]-0.25; reg0=reg0/(*f.m).elastic_modulus;
    T reg4=reg2*reg1; reg1=reg3*reg1; T reg5=elem.pos(2)[1]-elem.pos(0)[1]; T reg6=elem.pos(2)[2]-elem.pos(0)[2]; T reg7=elem.pos(3)[1]-elem.pos(0)[1];
    T reg8=elem.pos(3)[2]-elem.pos(0)[2]; T reg9=elem.pos(1)[1]-elem.pos(0)[1]; T reg10=elem.pos(1)[2]-elem.pos(0)[2]; T reg11=pow(reg0,2); T reg12=var_inter[1]-0.25;
    reg1=reg1/0.027777777777777783175; T reg13=var_inter[1]-0.16666666666666665741; reg4=reg4/0.020833333333333335646; reg2=reg3*reg2; reg4=reg13*reg4;
    reg3=reg5*reg8; T reg14=reg8*reg9; T reg15=reg6*reg7; T reg16=reg7*reg10; T reg17=1.0/(*f.m).elastic_modulus;
    reg2=reg2/0.083333333333333342585; T reg18=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg19=var_inter[1]-0.5; reg1=reg1*reg12; reg0=reg0*reg11;
    T reg20=elem.pos(2)[0]-elem.pos(0)[0]; T reg21=reg17*reg0; reg4=reg19*reg4; T reg22=reg19*reg1; reg15=reg3-reg15;
    reg3=reg18*reg11; reg16=reg14-reg16; reg11=reg17*reg11; reg2=reg12*reg2; reg0=reg18*reg0;
    reg12=elem.pos(1)[0]-elem.pos(0)[0]; reg14=reg5*reg10; T reg23=reg6*reg9; T reg24=reg15*reg12; reg14=reg23-reg14;
    reg23=reg18*reg0; T reg25=reg18*reg3; T reg26=reg18*reg11; T reg27=reg18*reg21; reg21=reg17*reg21;
    T reg28=elem.pos(3)[0]-elem.pos(0)[0]; reg11=reg17*reg11; T reg29=reg20*reg16; reg2=reg19*reg2; reg19=var_inter[2]-0.16666666666666665741;
    T reg30=var_inter[2]-0.25; reg4=reg4/0.020833333333333335646; reg22=reg22/0.027777777777777783175; T reg31=reg20*reg8; T reg32=reg6*reg28;
    T reg33=reg28*reg14; reg1=reg13*reg1; reg29=reg24-reg29; reg22=reg22*reg30; reg13=reg8*reg12;
    reg0=reg17*reg0; reg2=reg2/0.027777777777777783175; reg27=reg23+reg27; reg24=var_inter[2]-0.5; T reg34=reg4*reg19;
    reg21=reg21-reg23; T reg35=reg28*reg10; reg3=reg17*reg3; reg26=reg26+reg25; reg11=reg11-reg25;
    T reg36=reg6*reg12; T reg37=reg20*reg10; T reg38=reg28*reg9; reg35=reg13-reg35; reg13=reg20*reg7;
    reg32=reg31-reg32; reg31=reg5*reg28; T reg39=reg7*reg12; reg2=reg30*reg2; T reg40=reg25+reg3;
    reg26=reg18*reg26; reg11=reg17*reg11; reg17=reg17*reg21; reg34=reg34*reg24; reg0=reg23+reg0;
    reg23=reg18*reg27; reg33=reg29+reg33; reg1=reg1/0.083333333333333342585; reg29=reg24*reg22; reg34=reg34/0.020833333333333335646;
    reg2=reg24*reg2; T reg41=reg20*reg9; reg37=reg36-reg37; reg36=reg18*reg0; T reg42=reg5*reg12;
    reg23=reg17-reg23; reg29=reg29/0.027777777777777783175; reg1=reg30*reg1; reg15=reg15/reg33; reg32=reg32/reg33;
    reg31=reg13-reg31; reg16=reg16/reg33; reg35=reg35/reg33; reg26=reg11-reg26; reg40=reg18*reg40;
    reg38=reg39-reg38; reg11=reg34*elem.proute[0](1,1); reg40=reg26-reg40; reg13=reg29*elem.proute[1](1,1); reg17=reg16-reg15;
    reg18=reg32-reg35; reg1=reg24*reg1; reg2=reg2/0.027777777777777783175; reg31=reg31/reg33; reg41=reg42-reg41;
    reg36=reg23-reg36; reg38=reg38/reg33; reg14=reg14/reg33; reg37=reg37/reg33; reg17=reg17-reg14;
    reg23=0.5*reg16; reg40=reg40/reg36; reg24=0.5*reg14; reg26=0.5*reg35; reg30=reg2*elem.proute[2](1,1);
    reg11=reg13-reg11; reg13=reg38-reg31; reg18=reg37+reg18; reg22=reg19*reg22; reg1=reg1/0.027777777777777783175;
    reg41=reg41/reg33; reg19=0.5*reg37; reg39=0.5*reg18; reg42=reg40*reg23; reg13=reg13-reg41;
    T reg43=0.5*reg38; T reg44=reg40*reg26; T reg45=0.5*reg15; T reg46=0.5*reg32; T reg47=0.5*reg17;
    reg30=reg11+reg30; reg11=reg1*elem.proute[3](1,1); T reg48=reg40*reg24; reg21=reg21/reg36; reg22=reg22/0.083333333333333342585;
    T reg49=reg40*reg19; T reg50=0.5*reg41; T reg51=reg40*reg47; T reg52=reg40*reg46; T reg53=0.5*reg31;
    T reg54=reg40*reg45; T reg55=reg16*reg21; T reg56=reg40*reg50; reg44=2*reg44; T reg57=2*reg49;
    T reg58=reg40*reg43; reg48=2*reg48; T reg59=reg14*reg21; T reg60=reg35*reg21; T reg61=reg37*reg21;
    T reg62=reg41*reg21; T reg63=2*reg42; T reg64=reg38*reg21; reg27=reg27/reg36; reg11=reg30+reg11;
    reg30=reg22*elem.proute[4](1,1); reg36=reg0/reg36; reg0=0.5*reg13; T reg65=1-var_inter[0]; T reg66=reg40*reg39;
    T reg67=reg38*reg62; T reg68=reg32*reg27; reg66=2*reg66; reg54=2*reg54; T reg69=reg31*reg36;
    T reg70=reg31*reg64; T reg71=reg14*reg27; T reg72=reg45*reg63; T reg73=reg32*reg60; T reg74=reg38*reg36;
    T reg75=reg32*reg21; T reg76=reg21*reg17; reg65=reg65-var_inter[1]; T reg77=2*reg58; T reg78=reg23*reg48;
    T reg79=reg35*reg61; T reg80=reg16*reg27; T reg81=reg35*reg27; T reg82=reg26*reg57; T reg83=reg37*reg36;
    T reg84=reg16*reg59; T reg85=reg41*reg36; reg51=2*reg51; T reg86=reg37*reg27; T reg87=reg31*reg21;
    T reg88=reg21*reg18; reg56=2*reg56; T reg89=reg15*reg55; T reg90=reg46*reg44; reg30=reg11+reg30;
    reg11=reg15*reg21; T reg91=reg40*reg53; T reg92=reg40*reg0; T reg93=reg21*reg13; T reg94=2*reg52;
    T reg95=reg53*reg57; T reg96=reg31*reg87; T reg97=reg47*reg51; T reg98=reg16*reg81; T reg99=reg31*reg62;
    T reg100=reg31*reg80; T reg101=reg47*reg54; T reg102=reg18*reg88; T reg103=reg18*reg75; T reg104=reg26*reg63;
    T reg105=reg16*reg55; T reg106=reg26*reg44; T reg107=reg46*reg56; T reg108=reg45*reg77; T reg109=reg31*reg83;
    T reg110=reg72+reg70; T reg111=reg15*reg27; T reg112=reg53*reg63; T reg113=reg13*reg93; T reg114=reg15*reg74;
    T reg115=reg53*reg77; T reg116=reg89+reg90; T reg117=reg32*reg36; T reg118=reg46*reg54; T reg119=reg15*reg68;
    T reg120=reg13*reg87; T reg121=reg46*reg94; T reg122=reg15*reg11; T reg123=reg13*reg80; T reg124=reg47*reg77;
    T reg125=reg13*reg62; T reg126=reg65-var_inter[2]; T reg127=reg35*reg36; T reg128=reg13*reg64; T reg129=reg32*reg85;
    T reg130=reg32*reg61; T reg131=reg45*reg48; T reg132=reg32*reg71; T reg133=reg45*reg57; T reg134=reg18*reg60;
    T reg135=reg47*reg63; reg73=reg72+reg73; T reg136=reg94*reg53; T reg137=reg32*reg69; T reg138=reg32*reg75;
    T reg139=reg45*reg54; T reg140=reg18*reg61; T reg141=reg47*reg48; T reg142=reg46*reg48; T reg143=reg15*reg86;
    T reg144=reg46*reg57; T reg145=reg15*reg59; T reg146=reg35*reg60; T reg147=reg0*reg63; reg91=2*reg91;
    T reg148=reg19*reg48; T reg149=reg17*reg74; T reg150=reg23*reg63; T reg151=reg57*reg50; T reg152=reg35*reg74;
    T reg153=reg44*reg43; T reg154=reg36*reg13; T reg155=reg30+(*f.m).f_vol[0]; T reg156=reg14*reg86; T reg157=reg30+(*f.m).f_vol[1];
    reg30=reg30+(*f.m).f_vol[2]; T reg158=reg39*reg94; T reg159=reg17*reg55; T reg160=reg19*reg57; T reg161=reg14*reg59;
    T reg162=reg79+reg78; T reg163=reg17*reg11; T reg164=reg39*reg44; T reg165=reg17*reg76; T reg166=reg37*reg61;
    T reg167=reg43*reg56; T reg168=reg38*reg71; reg84=reg82+reg84; T reg169=reg24*reg48; T reg170=reg16*reg85;
    T reg171=reg39*reg57; T reg172=reg27*reg18; T reg173=reg23*reg56; reg59=reg17*reg59; reg62=reg41*reg62;
    T reg174=reg43*reg48; T reg175=reg37*reg85; reg92=2*reg92; T reg176=reg39*reg66; T reg177=reg38*reg64;
    reg67=reg78+reg67; reg78=reg15*reg81; T reg178=reg26*reg56; reg142=reg143+reg142; T reg179=reg46*reg63;
    T reg180=reg38*reg83; T reg181=var_inter[2]*reg155; T reg182=reg53*reg56; reg145=reg145+reg144; T reg183=reg114+reg112;
    reg67=reg82+reg67; T reg184=reg169+reg166; reg62=reg169+reg62; reg169=reg13*reg71; T reg185=reg47*reg56;
    T reg186=reg13*reg83; T reg187=reg39*reg56; T reg188=var_inter[2]*reg157; reg125=reg141+reg125; T reg189=var_inter[0]*reg155;
    T reg190=reg50*reg48; T reg191=reg14*reg85; reg122=reg122+reg121; reg148=reg156+reg148; T reg192=reg53*reg91;
    reg118=reg119+reg118; T reg193=reg15*reg69; T reg194=reg50*reg56; T reg195=reg53*reg54; reg161=reg161+reg160;
    T reg196=reg116+reg115; T reg197=reg129+reg95; T reg198=var_inter[0]*reg30; reg96=reg139+reg96; reg146=reg146+reg150;
    T reg199=reg100+reg108; T reg200=reg31*reg127; T reg201=reg46*reg77; T reg202=var_inter[1]*reg157; reg90=reg90+reg110;
    T reg203=reg31*reg71; T reg204=reg45*reg56; reg174=reg170+reg174; reg107=reg109+reg107; reg99=reg131+reg99;
    T reg205=var_inter[1]*reg155; T reg206=reg16*reg86; T reg207=reg26*reg48; T reg208=reg84+reg167; T reg209=reg106+reg105;
    T reg210=reg43*reg77; reg98=reg104+reg98; T reg211=reg16*reg74; T reg212=reg43*reg63; T reg213=reg15*reg85;
    T reg214=reg53*reg48; reg173=reg168+reg173; reg168=var_inter[0]*reg157; T reg215=reg150+reg177; reg139=reg139+reg138;
    T reg216=var_inter[1]*reg30; T reg217=reg43*reg57; T reg218=reg137+reg136; T reg219=reg45*reg44; T reg220=reg32*reg80;
    T reg221=reg35*reg85; reg167=reg167+reg162; T reg222=reg115+reg73; T reg223=reg32*reg74; T reg224=reg175+reg151;
    T reg225=reg53*reg44; T reg226=var_inter[2]*reg30; reg132=reg133+reg132; T reg227=reg23*reg57; T reg228=reg35*reg71;
    reg153=reg152+reg153; reg131=reg131+reg130; reg141=reg141-reg140; T reg229=reg39*reg48; T reg230=reg17*reg86;
    T reg231=reg18*reg85; T reg232=reg0*reg56; T reg233=reg0*reg57; reg59=reg59-reg171; T reg234=reg149+reg147;
    T reg235=reg126*reg30; reg113=reg97+reg113; T reg236=reg39*reg63; T reg237=reg17*reg81; T reg238=reg0*reg77;
    T reg239=reg164-reg159; T reg240=reg13*reg111; T reg241=reg47*reg91; T reg242=reg0*reg54; T reg243=reg17*reg69;
    T reg244=reg47*reg44; T reg245=reg18*reg80; T reg246=reg0*reg94; T reg247=reg18*reg69; reg134=reg134-reg135;
    T reg248=reg101-reg103; T reg249=reg18*reg74; T reg250=reg47*reg94; T reg251=reg18*reg111; T reg252=reg0*reg44;
    T reg253=reg0*reg66; T reg254=reg18*reg154; T reg255=reg18*reg71; reg97=reg102+reg97; reg102=reg47*reg57;
    T reg256=reg126*reg157; reg48=reg0*reg48; reg85=reg17*reg85; T reg257=reg135+reg128; T reg258=reg126*reg155;
    reg165=reg165+reg176; T reg259=reg0*reg92; T reg260=reg39*reg77; T reg261=reg13*reg127; T reg262=reg17*reg172;
    T reg263=reg123+reg124; T reg264=reg39*reg51; T reg265=reg17*reg154; T reg266=reg0*reg51; reg120=reg101+reg120;
    reg163=reg163-reg158; reg101=reg0*reg91; T reg267=reg13*reg117; T reg268=reg17*reg68; T reg269=reg39*reg91;
    T reg270=reg39*reg54; reg165=reg165+reg259; reg99=reg144+reg99; reg97=reg259+reg97; reg184=reg194+reg184;
    reg259=reg33*reg107; reg221=reg221+reg217; T reg271=reg33*reg173; reg204=reg203+reg204; reg253=reg254+reg253;
    reg203=reg33*reg90; reg216=(*f.m).density*reg216; reg258=(*f.m).density*reg258; reg200=reg200+reg201; reg254=reg33*reg224;
    reg251=reg251-reg250; T reg272=reg33*reg199; reg106=reg106+reg215; reg96=reg121+reg96; reg248=reg101+reg248;
    reg198=(*f.m).density*reg198; reg226=(*f.m).density*reg226; T reg273=reg33*reg197; reg270=reg270-reg268; reg247=reg247-reg246;
    reg131=reg182+reg131; reg62=reg160+reg62; T reg274=reg33*reg153; reg228=reg228+reg227; T reg275=reg33*reg67;
    reg239=reg239-reg238; reg237=reg237-reg236; reg181=(*f.m).density*reg181; reg146=reg210+reg146; reg101=reg163+reg101;
    reg202=(*f.m).density*reg202; reg163=reg33*reg234; T reg276=reg33*reg174; reg266=reg265+reg266; reg178=reg178+reg180;
    reg207=reg207+reg206; reg194=reg161+reg194; reg59=reg59+reg232; reg161=reg33*reg167; reg265=reg33*reg208;
    T reg277=reg33*reg148; reg264=reg262+reg264; reg229=reg229-reg230; reg262=reg211+reg212; T reg278=reg33*reg98;
    reg242=reg243+reg242; reg190=reg191+reg190; reg48=reg85+reg48; reg209=reg209+reg210; reg256=(*f.m).density*reg256;
    reg205=(*f.m).density*reg205; reg188=(*f.m).density*reg188; reg241=reg240+reg241; reg85=reg33*reg196; reg125=reg125-reg171;
    reg219=reg219+reg220; reg252=reg252-reg249; reg191=reg33*reg263; reg113=reg176+reg113; reg176=reg33*reg218;
    reg78=reg78+reg179; reg235=(*f.m).density*reg235; reg240=reg33*reg183; reg139=reg192+reg139; reg255=reg255-reg102;
    reg187=reg187-reg186; reg168=(*f.m).density*reg168; reg164=reg164-reg257; reg231=reg231-reg233; reg261=reg261-reg260;
    reg214=reg213+reg214; reg141=reg232+reg141; reg182=reg145+reg182; reg185=reg169+reg185; reg145=reg33*reg142;
    reg169=reg33*reg132; reg192=reg122+reg192; reg244=reg244-reg245; reg120=reg120-reg158; reg225=reg223+reg225;
    reg269=reg269-reg267; reg189=(*f.m).density*reg189; reg122=reg33*reg118; reg213=reg33*reg222; reg195=reg193+reg195;
    reg134=reg134-reg238; reg178=reg33*reg178; reg120=reg33*reg120; reg101=reg33*reg101; reg184=reg33*reg184;
    reg193=ponderation*reg276; reg231=reg33*reg231; reg232=ponderation*reg163; reg269=reg33*reg269; reg243=ponderation*reg277;
    reg192=reg33*reg192; T reg279=ponderation*reg275; reg241=reg33*reg241; reg207=reg33*reg207; reg266=reg33*reg266;
    reg182=reg33*reg182; reg185=reg33*reg185; T reg280=ponderation*reg265; reg195=reg33*reg195; reg59=reg33*reg59;
    T reg281=ponderation*reg254; reg264=reg33*reg264; reg106=reg33*reg106; T reg282=ponderation*reg161; T reg283=ponderation*reg85;
    reg270=reg33*reg270; T reg284=ponderation*reg122; reg113=reg33*reg113; reg190=reg33*reg190; reg228=reg33*reg228;
    T reg285=ponderation*reg271; reg239=reg33*reg239; T reg286=ponderation*reg191; reg194=reg33*reg194; T reg287=ponderation*reg274;
    reg125=reg33*reg125; reg78=reg33*reg78; reg242=reg33*reg242; reg146=reg33*reg146; reg237=reg33*reg237;
    reg165=reg33*reg165; T reg288=ponderation*reg240; reg187=reg33*reg187; reg221=reg33*reg221; reg252=reg33*reg252;
    reg204=reg33*reg204; T reg289=ponderation*reg176; T reg290=reg33*reg189; reg253=reg33*reg253; T reg291=ponderation*reg203;
    T reg292=reg33*reg168; reg219=reg33*reg219; reg200=reg33*reg200; T reg293=reg33*reg198; reg251=reg33*reg251;
    T reg294=reg33*reg205; T reg295=ponderation*reg272; reg134=reg33*reg134; T reg296=reg33*reg202; reg96=reg33*reg96;
    T reg297=ponderation*reg213; reg248=reg33*reg248; T reg298=reg33*reg216; T reg299=reg33*reg181; T reg300=ponderation*reg273;
    reg225=reg33*reg225; T reg301=reg33*reg188; reg131=reg33*reg131; reg244=reg33*reg244; reg247=reg33*reg247;
    T reg302=reg33*reg226; T reg303=ponderation*reg169; reg141=reg33*reg141; T reg304=ponderation*reg145; reg262=reg33*reg262;
    reg261=reg33*reg261; reg229=reg33*reg229; T reg305=ponderation*reg278; reg214=reg33*reg214; reg164=reg33*reg164;
    reg209=reg33*reg209; reg62=reg33*reg62; reg48=reg33*reg48; reg255=reg33*reg255; T reg306=reg33*reg258;
    T reg307=ponderation*reg259; T reg308=reg33*reg256; reg97=reg33*reg97; reg139=reg33*reg139; T reg309=reg33*reg235;
    reg99=reg33*reg99; T reg310=ponderation*reg302; sollicitation[indices[3]+2]+=reg310; T reg311=ponderation*reg308; sollicitation[indices[0]+1]+=reg311;
    matrix(indices[3]+1,indices[3]+2)+=-reg281; reg281=ponderation*reg309; sollicitation[indices[0]+2]+=reg281; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg190; reg190=ponderation*reg301;
    sollicitation[indices[3]+1]+=reg190; matrix(indices[0]+2,indices[3]+1)+=ponderation*reg187; matrix(indices[0]+2,indices[3]+0)+=ponderation*reg185; reg185=ponderation*reg299; sollicitation[indices[3]+0]+=reg185;
    matrix(indices[0]+0,indices[0]+2)+=ponderation*reg266; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg261; matrix(indices[0]+2,indices[2]+2)+=ponderation*reg164; reg164=ponderation*reg298; sollicitation[indices[2]+2]+=reg164;
    matrix(indices[0]+0,indices[0]+0)+=ponderation*reg165; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg194; matrix(indices[0]+2,indices[1]+2)+=ponderation*reg120; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg264; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg184;
    reg120=ponderation*reg296; sollicitation[indices[2]+1]+=reg120; reg165=ponderation*reg290; sollicitation[indices[1]+0]+=reg165; reg184=ponderation*reg294;
    sollicitation[indices[2]+0]+=reg184; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg125; reg125=ponderation*reg306; sollicitation[indices[0]+0]+=reg125; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg62;
    matrix(indices[3]+0,indices[3]+1)+=-reg243; reg62=ponderation*reg293; sollicitation[indices[1]+2]+=reg62; reg187=ponderation*reg292; sollicitation[indices[1]+1]+=reg187;
    matrix(indices[1]+0,indices[3]+1)+=-reg304; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg229; matrix(indices[2]+0,indices[2]+1)+=-reg305; matrix(indices[1]+0,indices[3]+2)+=ponderation*reg214; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg209;
    matrix(indices[0]+1,indices[3]+0)+=ponderation*reg255; matrix(indices[0]+0,indices[3]+2)+=ponderation*reg48; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg99; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg139; matrix(indices[1]+2,indices[3]+1)+=-reg307;
    matrix(indices[0]+1,indices[2]+2)+=ponderation*reg252; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg97; matrix(indices[1]+2,indices[3]+0)+=ponderation*reg204; matrix(indices[1]+1,indices[1]+2)+=-reg289; matrix(indices[1]+2,indices[2]+2)+=-reg291;
    matrix(indices[0]+1,indices[0]+2)+=ponderation*reg253; matrix(indices[1]+2,indices[2]+1)+=ponderation*reg200; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg219; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg134; matrix(indices[1]+2,indices[2]+0)+=-reg295;
    matrix(indices[0]+1,indices[1]+0)+=ponderation*reg251; matrix(indices[0]+2,indices[2]+0)+=-reg286; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg96; matrix(indices[1]+1,indices[2]+1)+=-reg297; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg248;
    matrix(indices[1]+1,indices[3]+2)+=-reg300; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg244; matrix(indices[1]+1,indices[2]+2)+=ponderation*reg225; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg131; matrix(indices[0]+1,indices[1]+2)+=ponderation*reg247;
    matrix(indices[1]+1,indices[3]+0)+=-reg303; matrix(indices[0]+2,indices[1]+1)+=ponderation*reg269; matrix(indices[2]+2,indices[3]+2)+=-reg279; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg192; matrix(indices[2]+2,indices[3]+1)+=ponderation*reg178;
    matrix(indices[0]+0,indices[1]+0)+=ponderation*reg101; matrix(indices[2]+2,indices[3]+0)+=-reg285; matrix(indices[1]+0,indices[1]+1)+=-reg284; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg241; matrix(indices[2]+2,indices[2]+2)+=ponderation*reg106;
    matrix(indices[0]+0,indices[1]+1)+=ponderation*reg270; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg195; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg221; matrix(indices[0]+2,indices[0]+2)+=ponderation*reg113; matrix(indices[2]+1,indices[3]+1)+=-reg282;
    matrix(indices[0]+0,indices[1]+2)+=ponderation*reg242; matrix(indices[1]+0,indices[2]+0)+=-reg283; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg228; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg239; matrix(indices[2]+1,indices[2]+2)+=-reg287;
    matrix(indices[1]+0,indices[2]+1)+=ponderation*reg78; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg146; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg237; matrix(indices[1]+0,indices[2]+2)+=-reg288; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg231;
    matrix(indices[2]+0,indices[3]+2)+=-reg193; matrix(indices[0]+0,indices[2]+2)+=-reg232; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg207; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg182; matrix(indices[2]+0,indices[3]+0)+=-reg280;
    matrix(indices[0]+1,indices[3]+1)+=ponderation*reg141; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg59; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg262;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; reg0=reg0/(*f.m).elastic_modulus; T reg1=elem.pos(2)[2]-elem.pos(0)[2]; T reg2=elem.pos(2)[1]-elem.pos(0)[1]; T reg3=elem.pos(1)[2]-elem.pos(0)[2];
    T reg4=elem.pos(3)[2]-elem.pos(0)[2]; T reg5=elem.pos(1)[1]-elem.pos(0)[1]; T reg6=pow(reg0,2); T reg7=elem.pos(3)[1]-elem.pos(0)[1]; T reg8=reg7*reg3;
    T reg9=reg1*reg7; T reg10=1.0/(*f.m).elastic_modulus; T reg11=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg0=reg0*reg6; T reg12=reg4*reg5;
    T reg13=reg2*reg4; T reg14=reg10*reg6; reg6=reg11*reg6; T reg15=elem.pos(1)[0]-elem.pos(0)[0]; T reg16=elem.pos(2)[0]-elem.pos(0)[0];
    T reg17=reg10*reg0; reg0=reg11*reg0; reg9=reg13-reg9; reg13=reg2*reg3; T reg18=reg1*reg5;
    reg8=reg12-reg8; reg12=reg9*reg15; T reg19=reg11*reg6; T reg20=reg16*reg8; T reg21=elem.pos(3)[0]-elem.pos(0)[0];
    T reg22=reg11*reg14; reg14=reg10*reg14; T reg23=reg11*reg17; reg17=reg10*reg17; reg13=reg18-reg13;
    reg18=reg11*reg0; reg0=reg10*reg0; reg23=reg18+reg23; reg17=reg17-reg18; reg20=reg12-reg20;
    reg12=reg21*reg13; T reg24=reg16*reg4; T reg25=reg1*reg21; T reg26=reg16*reg7; T reg27=reg4*reg15;
    T reg28=reg2*reg21; reg22=reg22+reg19; T reg29=reg7*reg15; T reg30=reg21*reg3; reg6=reg10*reg6;
    reg14=reg14-reg19; T reg31=reg21*reg5; reg12=reg20+reg12; reg0=reg18+reg0; reg31=reg29-reg31;
    reg18=reg19+reg6; reg20=reg1*reg15; reg29=reg10*reg17; T reg32=reg16*reg3; reg25=reg24-reg25;
    reg24=reg2*reg15; T reg33=reg11*reg23; reg14=reg10*reg14; reg10=reg16*reg5; reg28=reg26-reg28;
    reg30=reg27-reg30; reg22=reg11*reg22; reg18=reg11*reg18; reg22=reg14-reg22; reg9=reg9/reg12;
    reg25=reg25/reg12; reg33=reg29-reg33; reg28=reg28/reg12; reg11=reg11*reg0; reg8=reg8/reg12;
    reg30=reg30/reg12; reg10=reg24-reg10; reg31=reg31/reg12; reg32=reg20-reg32; reg18=reg22-reg18;
    reg13=reg13/reg12; reg32=reg32/reg12; reg10=reg10/reg12; reg14=reg8-reg9; reg20=reg31-reg28;
    reg11=reg33-reg11; reg22=reg25-reg30; reg24=0.5*reg13; reg20=reg20-reg10; reg26=0.5*reg30;
    reg27=0.5*reg8; reg29=0.5*reg9; reg33=0.5*reg32; reg22=reg32+reg22; reg14=reg14-reg13;
    reg18=reg18/reg11; T reg34=0.5*reg25; T reg35=0.5*reg14; T reg36=0.5*reg10; T reg37=0.5*reg28;
    T reg38=reg18*reg24; T reg39=reg18*reg34; T reg40=reg18*reg29; T reg41=reg18*reg33; T reg42=0.5*reg31;
    reg17=reg17/reg11; T reg43=reg18*reg27; T reg44=reg18*reg26; T reg45=0.5*reg20; T reg46=0.5*reg22;
    T reg47=reg9*reg17; T reg48=2*reg39; reg38=2*reg38; reg44=2*reg44; T reg49=reg18*reg42;
    T reg50=reg18*reg37; T reg51=reg10*reg17; T reg52=reg18*reg36; T reg53=2*reg41; T reg54=reg8*reg17;
    reg40=2*reg40; T reg55=2*reg43; T reg56=reg13*reg17; T reg57=reg25*reg17; T reg58=reg18*reg45;
    T reg59=reg18*reg35; T reg60=reg28*reg17; T reg61=reg32*reg17; T reg62=reg18*reg46; T reg63=reg30*reg17;
    reg0=reg0/reg11; T reg64=reg31*reg17; reg11=reg23/reg11; reg23=reg13*reg11; T reg65=reg30*reg11;
    T reg66=2*reg49; T reg67=reg8*reg11; T reg68=reg31*reg60; T reg69=reg48*reg26; T reg70=reg8*reg47;
    T reg71=reg31*reg0; T reg72=reg32*reg63; T reg73=reg55*reg24; T reg74=reg31*reg51; T reg75=reg8*reg56;
    T reg76=reg26*reg53; T reg77=reg32*reg0; T reg78=reg10*reg0; T reg79=reg11*reg14; T reg80=reg30*reg0;
    T reg81=reg30*reg57; T reg82=reg40*reg27; T reg83=reg17*reg22; T reg84=reg32*reg11; reg52=2*reg52;
    T reg85=reg25*reg0; T reg86=reg9*reg11; T reg87=reg30*reg61; T reg88=reg27*reg38; T reg89=reg44*reg33;
    T reg90=reg13*reg54; T reg91=reg17*reg20; reg50=2*reg50; T reg92=reg28*reg0; T reg93=reg28*reg64;
    reg59=2*reg59; T reg94=reg34*reg44; T reg95=reg9*reg54; reg62=2*reg62; reg58=2*reg58;
    T reg96=reg25*reg11; T reg97=reg25*reg63; T reg98=reg17*reg14; T reg99=reg0*reg20; T reg100=reg10*reg64;
    T reg101=reg29*reg55; reg97=reg101+reg97; T reg102=reg25*reg83; T reg103=reg44*reg42; T reg104=reg59*reg29;
    T reg105=reg30*reg71; T reg106=reg29*reg53; T reg107=reg27*reg55; T reg108=reg30*reg63; T reg109=reg44*reg27;
    T reg110=reg30*reg67; T reg111=reg20*reg60; T reg112=reg81+reg82; T reg113=reg20*reg67; T reg114=reg35*reg66;
    T reg115=reg25*reg23; T reg116=reg29*reg38; T reg117=reg25*reg61; T reg118=reg29*reg40; T reg119=reg27*reg52;
    T reg120=reg31*reg23; T reg121=reg31*reg64; T reg122=reg25*reg57; T reg123=reg31*reg80; T reg124=reg26*reg66;
    T reg125=reg25*reg86; T reg126=reg22*reg61; T reg127=reg48*reg29; T reg128=reg35*reg38; reg68=reg82+reg68;
    reg82=reg25*reg92; T reg129=reg50*reg27; T reg130=reg31*reg86; T reg131=reg31*reg91; T reg132=reg0*reg22;
    T reg133=reg58*reg27; T reg134=reg31*reg79; T reg135=reg48*reg37; T reg136=reg20*reg91; T reg137=reg87+reg88;
    T reg138=reg8*reg54; T reg139=reg9*reg71; T reg140=reg28*reg67; T reg141=reg29*reg66; T reg142=reg26*reg44;
    T reg143=reg40*reg42; T reg144=reg8*reg92; T reg145=reg101+reg93; T reg146=reg50*reg42; reg70=reg69+reg70;
    T reg147=reg37*reg66; T reg148=reg95+reg94; T reg149=reg59*reg42; T reg150=reg9*reg47; T reg151=reg28*reg77;
    T reg152=reg34*reg52; T reg153=reg34*reg48; T reg154=reg28*reg51; T reg155=reg8*reg99; T reg156=reg9*reg96;
    T reg157=reg34*reg40; T reg158=reg8*reg98; T reg159=reg62*reg26; T reg160=reg59*reg27; T reg161=reg30*reg83;
    T reg162=reg25*reg78; T reg163=reg20*reg64; T reg164=reg42*reg38; T reg165=reg8*reg78; T reg166=reg42*reg52;
    T reg167=reg37*reg53; T reg168=reg34*reg38; reg75=reg76+reg75; T reg169=reg9*reg84; T reg170=reg28*reg91;
    T reg171=reg34*reg53; T reg172=reg9*reg56; T reg173=reg28*reg85; T reg174=reg34*reg50; T reg175=reg20*reg51;
    T reg176=reg8*reg65; T reg177=reg26*reg55; T reg178=reg9*reg98; T reg179=reg28*reg60; T reg180=reg37*reg55;
    T reg181=reg62*reg34; T reg182=reg24*reg38; T reg183=reg32*reg57; T reg184=reg32*reg61; T reg185=reg40*reg24;
    T reg186=reg35*reg40; T reg187=reg22*reg57; T reg188=reg90+reg89; T reg189=reg66*reg36; T reg190=reg66*reg24;
    T reg191=reg10*reg67; T reg192=reg46*reg44; T reg193=reg32*reg86; T reg194=reg48*reg24; T reg195=reg13*reg71;
    T reg196=reg55*reg36; T reg197=reg46*reg48; reg60=reg10*reg60; T reg198=reg13*reg56; T reg199=reg33*reg53;
    T reg200=reg14*reg54; T reg201=reg50*reg33; T reg202=reg32*reg78; T reg203=reg10*reg85; T reg204=reg35*reg59;
    T reg205=reg22*reg83; T reg206=reg13*reg84; T reg207=reg33*reg38; T reg208=reg53*reg36; reg83=reg32*reg83;
    reg91=reg10*reg91; T reg209=reg59*reg24; reg74=reg88+reg74; reg88=reg14*reg98; reg72=reg73+reg72;
    T reg210=reg46*reg62; reg98=reg13*reg98; T reg211=reg35*reg55; reg51=reg10*reg51; reg63=reg22*reg63;
    T reg212=reg14*reg47; T reg213=reg62*reg33; T reg214=reg14*reg71; T reg215=reg45*reg55; T reg216=reg53*reg24;
    T reg217=reg33*reg52; T reg218=reg10*reg77; T reg219=reg32*reg23; T reg220=reg48*reg36; T reg221=reg73+reg100;
    reg47=reg13*reg47; T reg222=reg48*reg33; T reg223=reg13*reg96; T reg224=reg11*reg22; T reg225=reg40*reg33;
    T reg226=reg32*reg92; reg56=reg14*reg56; T reg227=reg46*reg53; T reg228=reg28*reg23; reg219=reg216+reg219;
    T reg229=reg32*reg71; T reg230=reg202+reg208; T reg231=reg10*reg79; T reg232=reg58*reg24; reg94=reg94+reg145;
    reg158=reg159-reg158; T reg233=reg29*reg52; T reg234=reg182+reg184; T reg235=reg58*reg42; T reg236=reg59*reg26;
    T reg237=reg44*reg36; reg154=reg116+reg154; reg152=reg151+reg152; T reg238=reg8*reg224; T reg239=reg162+reg167;
    T reg240=reg191+reg190; T reg241=reg10*reg80; reg116=reg116+reg117; T reg242=reg66*reg33; reg115=reg106+reg115;
    reg89=reg89+reg221; T reg243=reg10*reg23; T reg244=reg37*reg44; T reg245=reg25*reg71; T reg246=reg52*reg24;
    T reg247=reg147+reg97; reg217=reg218+reg217; T reg248=reg25*reg67; T reg249=reg29*reg44; T reg250=reg82+reg135;
    T reg251=reg118+reg122; reg51=reg182+reg51; reg182=reg10*reg132; T reg252=reg58*reg33; T reg253=reg34*reg66;
    T reg254=reg28*reg80; T reg255=reg140+reg141; reg91=reg209+reg91; reg179=reg118+reg179; reg118=reg10*reg86;
    T reg256=reg50*reg24; reg174=reg173+reg174; reg201=reg203+reg201; T reg257=reg50*reg29; T reg258=reg28*reg86;
    reg170=reg104+reg170; reg60=reg185+reg60; T reg259=reg58*reg34; T reg260=reg28*reg132; T reg261=reg58*reg29;
    T reg262=reg32*reg67; reg131=reg160+reg131; T reg263=reg31*reg132; T reg264=reg58*reg26; reg133=reg134+reg133;
    reg225=reg223+reg225; reg134=reg13*reg92; T reg265=reg42*reg53; T reg266=reg30*reg78; T reg267=reg166+reg137;
    T reg268=reg40*reg36; T reg269=reg27*reg53; T reg270=reg30*reg23; reg103=reg105+reg103; T reg271=reg188+reg189;
    T reg272=reg13*reg65; reg108=reg108+reg107; T reg273=reg55*reg33; reg109=reg110+reg109; T reg274=reg195+reg196;
    T reg275=reg31*reg77; T reg276=reg26*reg52; reg119=reg120+reg119; reg74=reg76+reg74; reg120=reg107+reg121;
    reg123=reg124+reg123; reg98=reg98-reg213; T reg277=reg58*reg36; T reg278=reg13*reg224; T reg279=reg66*reg27;
    T reg280=reg59*reg33; T reg281=reg13*reg99; T reg282=reg31*reg67; reg68=reg69+reg68; T reg283=reg31*reg85;
    T reg284=reg50*reg26; reg129=reg130+reg129; reg47=reg47+reg222; reg130=reg50*reg36; reg166=reg75+reg166;
    reg83=reg209-reg83; reg209=reg32*reg99; T reg285=reg62*reg36; T reg286=reg42*reg55; T reg287=reg8*reg71;
    reg193=reg194+reg193; reg176=reg177+reg176; reg185=reg185+reg183; T reg288=reg42*reg66; T reg289=reg142+reg138;
    reg143=reg144+reg143; T reg290=reg226+reg220; T reg291=reg44*reg24; T reg292=reg8*reg96; T reg293=reg40*reg26;
    T reg294=reg70+reg146; T reg295=reg189+reg72; reg149=reg155+reg149; reg198=reg198+reg199; T reg296=reg48*reg42;
    T reg297=reg30*reg92; reg146=reg146+reg112; T reg298=reg36*reg52; T reg299=reg48*reg27; T reg300=reg30*reg86;
    reg207=reg206+reg207; T reg301=reg62*reg42; T reg302=reg30*reg99; reg160=reg161-reg160; reg161=reg13*reg78;
    T reg303=reg36*reg38; T reg304=reg62*reg24; T reg305=reg32*reg79; T reg306=reg62*reg27; T reg307=reg30*reg79;
    reg164=reg165+reg164; T reg308=reg8*reg84; T reg309=reg26*reg38; T reg310=reg35*reg48; T reg311=reg22*reg86;
    reg56=reg56-reg227; T reg312=reg148+reg147; T reg313=reg22*reg71; T reg314=reg14*reg99; T reg315=reg46*reg66;
    reg80=reg20*reg80; T reg316=reg9*reg65; T reg317=reg45*reg44; T reg318=reg45*reg52; T reg319=reg34*reg55;
    T reg320=reg28*reg79; T reg321=reg46*reg55; T reg322=reg45*reg62; T reg323=reg22*reg99; T reg324=reg139+reg180;
    T reg325=reg113+reg114; T reg326=reg46*reg59; reg111=reg186+reg111; reg172=reg172+reg171; T reg327=reg37*reg52;
    reg205=reg205+reg204; T reg328=reg22*reg23; T reg329=reg35*reg53; T reg330=reg14*reg92; T reg331=reg46*reg50;
    reg168=reg169+reg168; T reg332=reg58*reg37; reg178=reg178-reg181; T reg333=reg214+reg215; T reg334=reg45*reg50;
    T reg335=reg9*reg224; T reg336=reg45*reg48; T reg337=reg59*reg34; T reg338=reg22*reg67; T reg339=reg22*reg92;
    reg175=reg128+reg175; reg44=reg35*reg44; T reg340=reg9*reg99; T reg341=reg59*reg37; reg212=reg212-reg197;
    reg150=reg150+reg153; T reg342=reg46*reg52; T reg343=reg20*reg77; T reg344=reg14*reg96; T reg345=reg37*reg50;
    reg186=reg186-reg187; reg63=reg63-reg211; reg52=reg35*reg52; reg157=reg156+reg157; reg23=reg20*reg23;
    T reg346=reg45*reg59; T reg347=reg46*reg40; reg92=reg9*reg92; T reg348=reg37*reg40; T reg349=reg211+reg163;
    T reg350=reg37*reg38; T reg351=reg20*reg79; T reg352=reg14*reg84; T reg353=reg62*reg35; T reg354=reg22*reg79;
    T reg355=reg58*reg35; T reg356=reg192-reg200; reg136=reg204+reg136; reg125=reg125+reg127; reg204=reg62*reg29;
    reg79=reg25*reg79; reg88=reg88+reg210; reg128=reg128-reg126; reg62=reg62*reg37; reg99=reg25*reg99;
    T reg357=reg45*reg58; T reg358=reg14*reg78; reg58=reg46*reg58; T reg359=reg45*reg38; reg132=reg20*reg132;
    reg102=reg104-reg102; reg38=reg46*reg38; reg104=reg22*reg78; reg50=reg35*reg50; reg59=reg59*reg36;
    T reg360=reg45*reg53; reg40=reg45*reg40; reg65=reg14*reg65; T reg361=reg20*reg85; reg86=reg20*reg86;
    T reg362=reg45*reg66; reg224=reg14*reg224; reg78=reg9*reg78; reg178=reg178+reg332; reg309=reg309+reg308;
    T reg363=reg12*reg129; reg52=reg23+reg52; reg23=reg12*reg133; T reg364=reg12*reg219; reg234=reg298+reg234;
    T reg365=reg12*reg295; T reg366=reg12*reg166; reg213=reg91-reg213; reg355=reg351+reg355; reg104=reg104-reg360;
    reg289=reg289+reg288; reg263=reg264-reg263; reg356=reg356-reg362; reg280=reg278-reg280; reg342=reg342-reg343;
    reg44=reg44-reg338; reg98=reg98+reg277; reg91=reg287+reg286; reg256=reg118+reg256; reg284=reg284+reg283;
    reg175=reg175-reg227; reg131=reg159-reg131; reg118=reg12*reg176; reg270=reg270+reg269; reg159=reg12*reg230;
    reg300=reg300+reg299; reg264=reg12*reg119; reg278=reg12*reg325; reg317=reg317-reg313; reg351=reg12*reg146;
    reg237=reg229+reg237; reg111=reg111-reg197; reg297=reg297+reg296; T reg367=reg12*reg103; reg142=reg142+reg120;
    reg50=reg86+reg50; reg232=reg231+reg232; reg328=reg328-reg329; reg331=reg331-reg361; reg86=reg12*reg109;
    reg231=reg12*reg123; reg108=reg288+reg108; T reg368=reg12*reg74; T reg369=reg12*reg164; reg63=reg63-reg362;
    reg192=reg192-reg349; reg128=reg318+reg128; reg306=reg307-reg306; reg307=reg12*reg68; reg347=reg347-reg344;
    reg266=reg266+reg265; reg65=reg65-reg321; reg80=reg80-reg315; reg58=reg132+reg58; reg160=reg160-reg235;
    reg276=reg276+reg275; reg132=reg12*reg267; reg301=reg302-reg301; reg136=reg210+reg136; reg210=reg282+reg279;
    reg252=reg182-reg252; reg40=reg330+reg40; reg182=reg12*reg239; reg302=reg12*reg207; reg291=reg262+reg291;
    reg353=reg354+reg353; reg330=reg12*reg168; reg261=reg320+reg261; reg318=reg56+reg318; reg259=reg260-reg259;
    reg185=reg130+reg185; reg298=reg198+reg298; reg172=reg172+reg327; reg181=reg170-reg181; reg56=reg12*reg89;
    reg257=reg258+reg257; reg205=reg357+reg205; reg326=reg224+reg326; reg170=reg12*reg324; reg198=reg12*reg174;
    reg224=reg12*reg274; reg179=reg153+reg179; reg322=reg323+reg322; reg316=reg316+reg319; reg258=reg12*reg255;
    reg241=reg241+reg242; reg38=reg38-reg352; reg260=reg12*reg125; reg285=reg285-reg209; reg281=reg59+reg281;
    reg251=reg345+reg251; reg51=reg199+reg51; reg62=reg62-reg99; reg59=reg12*reg250; reg320=reg12*reg193;
    reg249=reg249+reg248; reg83=reg277+reg83; reg102=reg332+reg102; reg277=reg12*reg247; reg359=reg358+reg359;
    reg323=reg12*reg217; reg244=reg245+reg244; reg357=reg88+reg357; reg79=reg204-reg79; reg88=reg12*reg115;
    reg305=reg304-reg305; reg303=reg161+reg303; reg350=reg78+reg350; reg116=reg327+reg116; reg246=reg243+reg246;
    reg346=reg314+reg346; reg154=reg171+reg154; reg78=reg12*reg290; reg161=reg12*reg157; reg268=reg134+reg268;
    reg235=reg158-reg235; reg345=reg150+reg345; reg238=reg236-reg238; reg60=reg222+reg60; reg134=reg12*reg225;
    reg186=reg334+reg186; reg150=reg12*reg149; reg341=reg340+reg341; reg158=reg12*reg333; reg204=reg12*reg294;
    reg130=reg47+reg130; reg337=reg335-reg337; reg293=reg293+reg292; reg47=reg12*reg201; reg339=reg339-reg336;
    reg236=reg12*reg143; reg334=reg212+reg334; reg254=reg254+reg253; reg272=reg272+reg273; reg212=reg12*reg312;
    reg243=reg12*reg94; reg304=reg12*reg271; reg233=reg228+reg233; reg228=reg12*reg240; reg348=reg92+reg348;
    reg311=reg311-reg310; reg92=reg12*reg152; reg314=ponderation*reg320; reg186=reg12*reg186; reg98=reg12*reg98;
    reg327=ponderation*reg224; reg128=reg12*reg128; reg65=reg12*reg65; reg276=reg12*reg276; reg83=reg12*reg83;
    reg332=ponderation*reg364; reg130=reg12*reg130; reg335=ponderation*reg264; reg284=reg12*reg284; reg340=ponderation*reg304;
    reg298=reg12*reg298; reg280=reg12*reg280; reg38=reg12*reg38; reg322=reg12*reg322; reg311=reg12*reg311;
    reg272=reg12*reg272; reg285=reg12*reg285; reg339=reg12*reg339; reg354=ponderation*reg365; reg358=ponderation*reg231;
    T reg370=ponderation*reg368; reg268=reg12*reg268; reg353=reg12*reg353; T reg371=ponderation*reg302; reg318=reg12*reg318;
    reg328=reg12*reg328; reg63=reg12*reg63; T reg372=ponderation*reg158; reg237=reg12*reg237; reg44=reg12*reg44;
    T reg373=reg12*reg210; reg205=reg12*reg205; reg303=reg12*reg303; reg359=reg12*reg359; T reg374=ponderation*reg134;
    T reg375=ponderation*reg78; reg317=reg12*reg317; reg142=reg12*reg142; reg356=reg12*reg356; T reg376=ponderation*reg307;
    reg305=reg12*reg305; reg185=reg12*reg185; T reg377=ponderation*reg92; T reg378=ponderation*reg161; reg154=reg12*reg154;
    reg346=reg12*reg346; reg345=reg12*reg345; reg235=reg12*reg235; reg60=reg12*reg60; reg238=reg12*reg238;
    reg341=reg12*reg341; T reg379=ponderation*reg150; reg357=reg12*reg357; T reg380=ponderation*reg88; reg337=reg12*reg337;
    T reg381=ponderation*reg204; T reg382=ponderation*reg47; reg293=reg12*reg293; reg178=reg12*reg178; T reg383=ponderation*reg236;
    reg334=reg12*reg334; reg244=reg12*reg244; reg289=reg12*reg289; reg79=reg12*reg79; reg175=reg12*reg175;
    T reg384=ponderation*reg118; reg256=reg12*reg256; reg291=reg12*reg291; reg261=reg12*reg261; T reg385=ponderation*reg330;
    reg259=reg12*reg259; T reg386=ponderation*reg56; reg172=reg12*reg172; reg181=reg12*reg181; reg257=reg12*reg257;
    T reg387=ponderation*reg170; T reg388=ponderation*reg198; reg326=reg12*reg326; T reg389=ponderation*reg182; reg179=reg12*reg179;
    reg241=reg12*reg241; reg316=reg12*reg316; T reg390=ponderation*reg258; reg246=reg12*reg246; reg254=reg12*reg254;
    T reg391=ponderation*reg212; T reg392=ponderation*reg243; reg116=reg12*reg116; reg350=reg12*reg350; T reg393=ponderation*reg228;
    reg348=reg12*reg348; reg233=reg12*reg233; reg297=reg12*reg297; reg232=reg12*reg232; reg331=reg12*reg331;
    T reg394=ponderation*reg86; reg62=reg12*reg62; reg108=reg12*reg108; reg251=reg12*reg251; reg50=reg12*reg50;
    T reg395=ponderation*reg367; T reg396=ponderation*reg159; reg281=reg12*reg281; reg270=reg12*reg270; reg136=reg12*reg136;
    reg40=reg12*reg40; T reg397=ponderation*reg132; reg51=reg12*reg51; reg58=reg12*reg58; reg266=reg12*reg266;
    T reg398=ponderation*reg260; reg234=reg12*reg234; T reg399=ponderation*reg23; reg355=reg12*reg355; reg263=reg12*reg263;
    reg131=reg12*reg131; reg104=reg12*reg104; T reg400=ponderation*reg363; T reg401=ponderation*reg366; reg102=reg12*reg102;
    reg309=reg12*reg309; reg213=reg12*reg213; reg192=reg12*reg192; reg52=reg12*reg52; T reg402=ponderation*reg369;
    reg306=reg12*reg306; T reg403=ponderation*reg323; T reg404=ponderation*reg277; reg80=reg12*reg80; reg160=reg12*reg160;
    reg252=reg12*reg252; reg301=reg12*reg301; T reg405=ponderation*reg278; reg91=reg12*reg91; reg300=reg12*reg300;
    reg347=reg12*reg347; reg249=reg12*reg249; reg342=reg12*reg342; reg111=reg12*reg111; T reg406=ponderation*reg351;
    T reg407=ponderation*reg59; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg51; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg357; matrix(indices[3]+2,indices[3]+1)+=-reg403; matrix(indices[3]+1,indices[1]+0)+=-reg314;
    matrix(indices[0]+0,indices[3]+0)+=ponderation*reg318; matrix(indices[3]+2,indices[3]+0)+=ponderation*reg246; matrix(indices[3]+1,indices[3]+0)+=-reg332; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg234; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg40;
    matrix(indices[0]+0,indices[2]+0)+=ponderation*reg356; matrix(indices[3]+1,indices[3]+2)+=-reg396; matrix(indices[3]+1,indices[2]+2)+=ponderation*reg237; matrix(indices[3]+2,indices[0]+0)+=ponderation*reg232; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg347;
    matrix(indices[3]+2,indices[0]+1)+=ponderation*reg252; matrix(indices[3]+1,indices[2]+1)+=-reg354; matrix(indices[3]+2,indices[0]+2)+=ponderation*reg213; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg334; matrix(indices[3]+2,indices[1]+0)+=ponderation*reg256;
    matrix(indices[0]+0,indices[2]+1)+=ponderation*reg65; matrix(indices[3]+2,indices[1]+1)+=-reg382; matrix(indices[3]+1,indices[2]+0)+=ponderation*reg291; matrix(indices[0]+0,indices[0]+2)+=ponderation*reg346; matrix(indices[3]+1,indices[1]+2)+=-reg375;
    matrix(indices[3]+2,indices[1]+2)+=ponderation*reg60; matrix(indices[3]+2,indices[2]+0)+=-reg393; matrix(indices[0]+0,indices[2]+2)+=-reg372; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg326; matrix(indices[3]+2,indices[2]+1)+=ponderation*reg241;
    matrix(indices[3]+1,indices[1]+1)+=ponderation*reg185; matrix(indices[3]+2,indices[2]+2)+=-reg386; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg348; matrix(indices[1]+2,indices[3]+0)+=ponderation*reg233; matrix(indices[1]+2,indices[3]+1)+=-reg377;
    matrix(indices[1]+0,indices[1]+1)+=-reg378; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg154; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg345; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg235; matrix(indices[2]+0,indices[0]+1)+=ponderation*reg238;
    matrix(indices[1]+0,indices[0]+2)+=ponderation*reg341; matrix(indices[2]+0,indices[0]+2)+=-reg379; matrix(indices[1]+0,indices[0]+1)+=ponderation*reg337; matrix(indices[2]+0,indices[1]+0)+=-reg381; matrix(indices[2]+0,indices[1]+1)+=ponderation*reg293;
    matrix(indices[1]+0,indices[0]+0)+=ponderation*reg178; matrix(indices[2]+0,indices[1]+2)+=-reg383; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg175; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg289; matrix(indices[2]+0,indices[2]+1)+=-reg384;
    matrix(indices[0]+2,indices[3]+1)+=ponderation*reg342; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg91; matrix(indices[0]+2,indices[3]+0)+=ponderation*reg52; matrix(indices[2]+0,indices[3]+0)+=-reg401; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg309;
    matrix(indices[0]+2,indices[2]+2)+=ponderation*reg192; matrix(indices[2]+0,indices[3]+2)+=-reg402; matrix(indices[2]+1,indices[0]+0)+=ponderation*reg306; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg80; matrix(indices[2]+1,indices[0]+1)+=ponderation*reg160;
    matrix(indices[3]+0,indices[0]+2)+=ponderation*reg281; matrix(indices[1]+1,indices[1]+0)+=-reg398; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg251; matrix(indices[1]+1,indices[0]+2)+=ponderation*reg62; matrix(indices[1]+1,indices[1]+2)+=-reg407;
    matrix(indices[1]+1,indices[2]+0)+=ponderation*reg249; matrix(indices[1]+1,indices[0]+1)+=ponderation*reg102; matrix(indices[1]+1,indices[2]+1)+=-reg404; matrix(indices[1]+1,indices[0]+0)+=ponderation*reg79; matrix(indices[1]+1,indices[2]+2)+=ponderation*reg244;
    matrix(indices[1]+1,indices[3]+0)+=-reg380; matrix(indices[1]+0,indices[3]+2)+=ponderation*reg350; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg116; matrix(indices[1]+0,indices[3]+1)+=-reg385; matrix(indices[1]+1,indices[3]+2)+=-reg389;
    matrix(indices[1]+2,indices[0]+0)+=ponderation*reg261; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg172; matrix(indices[1]+2,indices[0]+1)+=ponderation*reg259; matrix(indices[1]+2,indices[0]+2)+=ponderation*reg181; matrix(indices[1]+2,indices[1]+0)+=ponderation*reg257;
    matrix(indices[1]+0,indices[2]+2)+=-reg387; matrix(indices[1]+2,indices[1]+1)+=-reg388; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg316; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg179; matrix(indices[1]+2,indices[2]+0)+=-reg390;
    matrix(indices[1]+0,indices[2]+0)+=-reg391; matrix(indices[1]+2,indices[2]+1)+=ponderation*reg254; matrix(indices[1]+2,indices[2]+2)+=-reg392; matrix(indices[2]+2,indices[3]+0)+=-reg335; matrix(indices[2]+2,indices[3]+1)+=ponderation*reg276;
    matrix(indices[0]+1,indices[2]+1)+=ponderation*reg63; matrix(indices[2]+2,indices[3]+2)+=-reg370; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg44; matrix(indices[3]+0,indices[0]+0)+=ponderation*reg98; matrix(indices[3]+0,indices[0]+1)+=ponderation*reg280;
    matrix(indices[0]+1,indices[1]+2)+=ponderation*reg339; matrix(indices[3]+0,indices[1]+0)+=ponderation*reg130; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg186; matrix(indices[3]+0,indices[1]+1)+=-reg374; matrix(indices[0]+2,indices[2]+0)+=-reg405;
    matrix(indices[3]+0,indices[1]+2)+=ponderation*reg268; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg311; matrix(indices[3]+0,indices[2]+0)+=-reg340; matrix(indices[0]+1,indices[0]+2)+=ponderation*reg322; matrix(indices[3]+0,indices[2]+1)+=ponderation*reg272;
    matrix(indices[3]+0,indices[2]+2)+=-reg327; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg205; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg298; matrix(indices[0]+1,indices[0]+0)+=ponderation*reg353; matrix(indices[3]+0,indices[3]+1)+=-reg371;
    matrix(indices[3]+0,indices[3]+2)+=ponderation*reg303; matrix(indices[0]+0,indices[3]+2)+=ponderation*reg359; matrix(indices[3]+1,indices[0]+0)+=ponderation*reg305; matrix(indices[3]+1,indices[0]+1)+=ponderation*reg83; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg38;
    matrix(indices[3]+1,indices[0]+2)+=ponderation*reg285; matrix(indices[2]+1,indices[0]+2)+=ponderation*reg301; matrix(indices[2]+1,indices[1]+0)+=ponderation*reg300; matrix(indices[0]+2,indices[1]+2)+=ponderation*reg111; matrix(indices[2]+1,indices[1]+1)+=-reg406;
    matrix(indices[2]+1,indices[1]+2)+=ponderation*reg297; matrix(indices[0]+2,indices[1]+1)+=ponderation*reg331; matrix(indices[2]+1,indices[2]+0)+=-reg394; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg50; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg108;
    matrix(indices[2]+1,indices[2]+2)+=-reg395; matrix(indices[0]+2,indices[0]+2)+=ponderation*reg136; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg270; matrix(indices[0]+2,indices[0]+1)+=ponderation*reg58; matrix(indices[2]+1,indices[3]+1)+=-reg397;
    matrix(indices[2]+1,indices[3]+2)+=ponderation*reg266; matrix(indices[0]+2,indices[0]+0)+=ponderation*reg355; matrix(indices[2]+2,indices[0]+0)+=-reg399; matrix(indices[2]+2,indices[0]+1)+=ponderation*reg263; matrix(indices[2]+2,indices[0]+2)+=ponderation*reg131;
    matrix(indices[0]+1,indices[3]+2)+=ponderation*reg104; matrix(indices[2]+2,indices[1]+0)+=-reg400; matrix(indices[2]+2,indices[1]+1)+=ponderation*reg284; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg128; matrix(indices[2]+2,indices[1]+2)+=-reg376;
    matrix(indices[2]+2,indices[2]+0)+=ponderation*reg373; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg328; matrix(indices[2]+2,indices[2]+1)+=-reg358; matrix(indices[2]+2,indices[2]+2)+=ponderation*reg142; matrix(indices[0]+1,indices[2]+2)+=ponderation*reg317;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1+(*f.m).poisson_ratio; reg0=reg0/(*f.m).elastic_modulus; T reg1=elem.pos(3)[2]-elem.pos(0)[2]; T reg2=elem.pos(1)[2]-elem.pos(0)[2]; T reg3=pow(reg0,2);
    T reg4=elem.pos(1)[1]-elem.pos(0)[1]; T reg5=elem.pos(3)[1]-elem.pos(0)[1]; T reg6=elem.pos(2)[1]-elem.pos(0)[1]; T reg7=elem.pos(2)[2]-elem.pos(0)[2]; T reg8=reg7*reg5;
    T reg9=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg10=reg5*reg2; reg0=reg0*reg3; T reg11=reg1*reg4; T reg12=reg6*reg1;
    T reg13=1.0/(*f.m).elastic_modulus; T reg14=elem.pos(1)[0]-elem.pos(0)[0]; T reg15=reg13*reg0; reg0=reg9*reg0; T reg16=reg9*reg3;
    T reg17=elem.pos(2)[0]-elem.pos(0)[0]; reg8=reg12-reg8; reg10=reg11-reg10; reg11=reg7*reg4; reg12=reg6*reg2;
    reg3=reg13*reg3; T reg18=reg13*reg3; T reg19=reg9*reg15; T reg20=reg9*reg0; reg3=reg9*reg3;
    reg15=reg13*reg15; T reg21=reg9*reg16; T reg22=reg17*reg10; reg12=reg11-reg12; reg11=reg8*reg14;
    T reg23=elem.pos(3)[0]-elem.pos(0)[0]; reg3=reg3+reg21; reg18=reg18-reg21; reg16=reg13*reg16; reg15=reg15-reg20;
    reg19=reg20+reg19; reg0=reg13*reg0; T reg24=reg1*reg14; T reg25=reg23*reg12; T reg26=reg17*reg1;
    reg22=reg11-reg22; reg11=reg23*reg2; T reg27=reg7*reg23; reg27=reg26-reg27; reg26=reg6*reg23;
    T reg28=reg13*reg15; reg3=reg9*reg3; T reg29=reg17*reg5; T reg30=reg5*reg14; T reg31=reg9*reg19;
    reg25=reg22+reg25; reg11=reg24-reg11; reg22=reg23*reg4; reg0=reg20+reg0; reg20=reg7*reg14;
    reg24=reg21+reg16; T reg32=reg17*reg2; reg18=reg13*reg18; reg31=reg28-reg31; reg27=reg27/reg25;
    reg8=reg8/reg25; reg13=reg9*reg0; reg3=reg18-reg3; reg26=reg29-reg26; reg10=reg10/reg25;
    reg11=reg11/reg25; reg24=reg9*reg24; reg22=reg30-reg22; reg9=reg17*reg4; reg32=reg20-reg32;
    reg18=reg6*reg14; reg20=reg27-reg11; reg24=reg3-reg24; reg3=reg10-reg8; reg13=reg31-reg13;
    reg26=reg26/reg25; reg22=reg22/reg25; reg12=reg12/reg25; reg9=reg18-reg9; reg32=reg32/reg25;
    reg20=reg32+reg20; reg18=0.5*reg10; reg28=reg22-reg26; reg3=reg3-reg12; reg29=0.5*reg32;
    reg24=reg24/reg13; reg30=0.5*reg12; reg31=0.5*reg11; reg9=reg9/reg25; T reg33=0.5*reg3;
    T reg34=reg24*reg30; T reg35=0.5*reg9; T reg36=reg24*reg29; T reg37=0.5*reg27; T reg38=reg24*reg18;
    T reg39=0.5*reg22; T reg40=reg24*reg31; T reg41=0.5*reg8; T reg42=0.5*reg20; reg28=reg28-reg9;
    reg15=reg15/reg13; T reg43=0.5*reg26; T reg44=2*reg38; T reg45=reg24*reg37; T reg46=0.5*reg28;
    T reg47=reg12*reg15; T reg48=reg11*reg15; T reg49=2*reg36; T reg50=reg24*reg42; T reg51=reg24*reg35;
    T reg52=reg24*reg39; reg40=2*reg40; reg0=reg0/reg13; T reg53=reg24*reg33; T reg54=reg32*reg15;
    reg13=reg19/reg13; reg34=2*reg34; reg19=reg9*reg15; T reg55=reg24*reg41; T reg56=reg10*reg15;
    T reg57=reg22*reg15; T reg58=reg27*reg15; T reg59=2*reg52; T reg60=reg11*reg13; T reg61=reg27*reg48;
    T reg62=reg26*reg57; T reg63=reg26*reg0; T reg64=reg41*reg44; T reg65=reg22*reg0; T reg66=reg10*reg13;
    reg51=2*reg51; T reg67=reg37*reg40; T reg68=reg8*reg56; T reg69=reg32*reg13; T reg70=reg12*reg13;
    T reg71=reg15*reg28; T reg72=reg32*reg0; T reg73=reg9*reg0; T reg74=reg15*reg20; T reg75=reg26*reg15;
    T reg76=reg11*reg54; T reg77=reg18*reg34; reg53=2*reg53; T reg78=reg22*reg19; T reg79=reg8*reg15;
    T reg80=2*reg45; T reg81=reg24*reg43; T reg82=reg24*reg46; T reg83=reg10*reg47; T reg84=reg31*reg49;
    T reg85=reg27*reg13; T reg86=reg15*reg3; reg55=2*reg55; reg50=2*reg50; T reg87=reg29*reg49;
    T reg88=reg12*reg47; T reg89=reg28*reg19; T reg90=reg8*reg79; reg78=reg77+reg78; T reg91=reg18*reg51;
    T reg92=reg37*reg80; T reg93=reg33*reg55; T reg94=reg8*reg85; T reg95=reg37*reg55; T reg96=reg22*reg70;
    T reg97=reg22*reg57; reg77=reg76+reg77; T reg98=reg20*reg58; T reg99=reg9*reg19; T reg100=reg20*reg54;
    T reg101=reg33*reg34; T reg102=reg32*reg54; T reg103=reg28*reg71; T reg104=reg27*reg0; T reg105=reg32*reg73;
    T reg106=reg28*reg75; T reg107=reg30*reg34; T reg108=reg28*reg66; T reg109=reg33*reg59; T reg110=reg33*reg44;
    T reg111=reg11*reg0; T reg112=reg29*reg34; T reg113=reg20*reg48; T reg114=reg49*reg35; T reg115=reg28*reg57;
    T reg116=reg12*reg69; reg83=reg84+reg83; reg61=reg64+reg61; T reg117=reg41*reg49; T reg118=reg27*reg70;
    T reg119=reg41*reg34; T reg120=reg10*reg60; T reg121=reg27*reg54; T reg122=reg27*reg73; T reg123=reg31*reg44;
    T reg124=reg10*reg56; T reg125=reg43*reg49; T reg126=reg26*reg75; T reg127=reg26*reg66; T reg128=reg41*reg59;
    T reg129=reg31*reg40; T reg130=reg64+reg62; reg19=reg26*reg19; T reg131=reg26*reg72; T reg132=reg37*reg51;
    T reg133=reg68+reg67; T reg134=reg43*reg59; T reg135=reg40*reg39; T reg136=reg11*reg65; T reg137=reg18*reg44;
    T reg138=reg8*reg65; T reg139=reg11*reg48; T reg140=reg43*reg44; T reg141=reg8*reg47; T reg142=reg37*reg49;
    T reg143=reg8*reg69; T reg144=reg37*reg34; T reg145=reg41*reg55; T reg146=reg39*reg34; T reg147=reg27*reg58;
    T reg148=reg27*reg63; T reg149=reg80*reg43; T reg150=reg10*reg73; T reg151=reg39*reg51; T reg152=reg46*reg44;
    T reg153=reg20*reg74; T reg154=reg3*reg79; T reg155=reg33*reg53; reg47=reg3*reg47; T reg156=reg3*reg65;
    T reg157=reg8*reg13; T reg158=reg42*reg49; reg81=2*reg81; T reg159=reg3*reg86; reg82=2*reg82;
    T reg160=reg13*reg20; T reg161=reg0*reg28; T reg162=reg42*reg40; T reg163=reg3*reg56; T reg164=reg42*reg50;
    T reg165=reg42*reg80; T reg166=reg3*reg60; T reg167=reg41*reg40; T reg168=reg148+reg149; T reg169=reg145+reg147;
    T reg170=reg42*reg44; reg78=reg84+reg78; T reg171=reg43*reg34; T reg172=reg134+reg61; T reg173=reg8*reg73;
    reg88=reg88+reg87; T reg174=reg27*reg65; T reg175=reg43*reg40; T reg176=reg27*reg66; reg144=reg143+reg144;
    T reg177=reg42*reg51; T reg178=reg12*reg73; reg89=reg101+reg89; T reg179=reg42*reg34; T reg180=reg3*reg69;
    reg90=reg90+reg92; T reg181=reg43*reg81; reg95=reg94+reg95; reg112=reg116+reg112; T reg182=reg8*reg63;
    T reg183=reg43*reg55; T reg184=reg46*reg51; reg47=reg47-reg158; T reg185=reg133+reg134; T reg186=reg46*reg82;
    T reg187=reg8*reg60; T reg188=reg37*reg44; T reg189=reg138+reg140; reg141=reg141+reg142; T reg190=reg43*reg51;
    T reg191=reg35*reg51; T reg192=reg156+reg152; T reg193=reg3*reg85; T reg194=reg129+reg124; T reg195=reg39*reg59;
    reg120=reg123+reg120; T reg196=reg137+reg97; T reg197=reg10*reg65; T reg198=reg39*reg44; T reg199=reg46*reg81;
    reg154=reg154-reg165; T reg200=reg83+reg151; T reg201=reg31*reg34; T reg202=reg10*reg69; reg146=reg150+reg146;
    T reg203=reg39*reg49; reg139=reg139+reg137; T reg204=reg11*reg73; T reg205=reg46*reg53; T reg206=reg3*reg161;
    reg135=reg136+reg135; T reg207=reg11*reg70; T reg208=reg18*reg49; reg151=reg151+reg77; reg118=reg117+reg118;
    T reg209=reg46*reg59; T reg210=reg162-reg163; T reg211=reg119+reg121; T reg212=reg122+reg125; T reg213=reg22*reg72;
    reg126=reg145+reg126; reg145=reg31*reg51; T reg214=reg127+reg128; T reg215=reg26*reg111; T reg216=reg37*reg59;
    T reg217=reg46*reg55; T reg218=reg3*reg63; reg67=reg67+reg130; T reg219=reg26*reg70; T reg220=reg41*reg51;
    reg91=reg96+reg91; reg96=reg3*reg160; reg132=reg131+reg132; T reg221=reg42*reg53; reg19=reg119+reg19;
    reg119=reg42*reg55; T reg222=reg93-reg98; T reg223=reg3*reg73; T reg224=reg46*reg34; reg101=reg101-reg100;
    reg113=reg113-reg110; T reg225=reg42*reg59; T reg226=reg28*reg111; reg73=reg20*reg73; T reg227=reg46*reg49;
    T reg228=reg20*reg63; T reg229=reg108+reg109; reg103=reg155+reg103; T reg230=reg46*reg80; reg159=reg159+reg164;
    reg106=reg93+reg106; reg93=reg107+reg102; T reg231=reg28*reg157; T reg232=reg33*reg81; T reg233=reg42*reg81;
    T reg234=reg28*reg104; T reg235=reg33*reg40; reg99=reg107+reg99; reg107=reg20*reg66; reg155=reg153+reg155;
    reg153=reg20*reg157; T reg236=reg33*reg51; T reg237=reg28*reg70; T reg238=reg33*reg49; T reg239=reg20*reg70;
    T reg240=reg20*reg65; T reg241=reg46*reg40; T reg242=reg105+reg114; reg34=reg35*reg34; T reg243=reg46*reg50;
    T reg244=reg28*reg72; T reg245=reg110+reg115; T reg246=reg20*reg161; T reg247=reg33*reg80; reg175=reg174+reg175;
    reg119=reg119-reg193; reg103=reg164+reg103; reg221=reg96+reg221; reg96=reg25*reg91; reg154=reg154+reg199;
    reg164=reg25*reg172; reg235=reg235-reg107; reg93=reg191+reg93; reg243=reg246+reg243; reg220=reg219+reg220;
    reg232=reg231+reg232; reg241=reg241-reg240; reg219=reg25*reg78; reg231=reg25*reg242; reg246=reg25*reg132;
    reg167=reg167+reg176; reg217=reg218+reg217; reg113=reg113-reg209; reg218=reg25*reg214; reg126=reg92+reg126;
    reg101=reg184+reg101; reg194=reg194+reg195; reg215=reg215+reg216; reg145=reg145+reg213; T reg248=reg25*reg212;
    reg19=reg142+reg19; reg73=reg73-reg227; reg129=reg129+reg196; reg211=reg190+reg211; T reg249=reg25*reg120;
    reg239=reg239-reg238; T reg250=reg25*reg118; reg155=reg186+reg155; reg210=reg210-reg209; T reg251=reg25*reg67;
    T reg252=reg197+reg198; T reg253=reg25*reg229; reg205=reg206+reg205; reg99=reg87+reg99; reg139=reg195+reg139;
    reg187=reg187+reg188; reg224=reg223+reg224; reg206=reg25*reg185; reg226=reg226-reg225; reg222=reg199+reg222;
    reg184=reg47+reg184; reg183=reg182+reg183; reg162=reg162-reg245; reg47=reg25*reg135; reg182=reg25*reg95;
    reg153=reg153-reg247; reg199=reg25*reg112; reg207=reg207+reg208; reg90=reg90+reg181; reg236=reg237+reg236;
    reg89=reg89-reg158; reg34=reg178+reg34; reg179=reg179-reg180; reg178=reg25*reg151; reg177=reg177-reg244;
    reg223=reg25*reg200; reg237=reg25*reg168; reg166=reg166-reg170; reg169=reg181+reg169; reg201=reg201+reg202;
    reg186=reg159+reg186; reg171=reg173+reg171; reg233=reg233-reg234; reg228=reg228-reg230; reg159=reg25*reg144;
    reg106=reg106-reg165; reg204=reg204+reg203; reg190=reg141+reg190; reg141=reg25*reg189; reg173=reg25*reg146;
    reg181=reg25*reg192; reg191=reg88+reg191; reg221=reg25*reg221; reg88=ponderation*reg246; reg243=reg25*reg243;
    reg154=reg25*reg154; T reg254=ponderation*reg223; reg228=reg25*reg228; reg99=reg25*reg99; T reg255=ponderation*reg178;
    reg207=reg25*reg207; T reg256=ponderation*reg249; reg205=reg25*reg205; reg129=reg25*reg129; reg153=reg25*reg153;
    reg201=reg25*reg201; reg19=reg25*reg19; T reg257=ponderation*reg47; T reg258=ponderation*reg173; T reg259=ponderation*reg231;
    reg113=reg25*reg113; reg204=reg25*reg204; reg252=reg25*reg252; reg194=reg25*reg194; reg222=reg25*reg222;
    reg235=reg25*reg235; reg139=reg25*reg139; reg167=reg25*reg167; reg232=reg25*reg232; T reg260=ponderation*reg219;
    T reg261=ponderation*reg237; reg166=reg25*reg166; reg90=reg25*reg90; T reg262=ponderation*reg199; reg169=reg25*reg169;
    reg186=reg25*reg186; reg171=reg25*reg171; reg233=reg25*reg233; T reg263=ponderation*reg159; reg106=reg25*reg106;
    reg190=reg25*reg190; reg224=reg25*reg224; T reg264=ponderation*reg181; T reg265=ponderation*reg141; reg191=reg25*reg191;
    T reg266=ponderation*reg253; reg184=reg25*reg184; reg187=reg25*reg187; T reg267=ponderation*reg206; reg226=reg25*reg226;
    reg183=reg25*reg183; reg162=reg25*reg162; T reg268=ponderation*reg182; reg34=reg25*reg34; reg119=reg25*reg119;
    reg241=reg25*reg241; reg220=reg25*reg220; T reg269=ponderation*reg251; reg239=reg25*reg239; T reg270=ponderation*reg96;
    reg215=reg25*reg215; reg177=reg25*reg177; T reg271=ponderation*reg218; reg217=reg25*reg217; reg126=reg25*reg126;
    reg101=reg25*reg101; T reg272=ponderation*reg248; reg145=reg25*reg145; reg211=reg25*reg211; reg73=reg25*reg73;
    reg179=reg25*reg179; reg155=reg25*reg155; reg89=reg25*reg89; T reg273=ponderation*reg250; reg210=reg25*reg210;
    reg175=reg25*reg175; reg103=reg25*reg103; reg236=reg25*reg236; T reg274=ponderation*reg164; reg93=reg25*reg93;
    matrix(indices[3]+0,indices[3]+1)+=-reg262; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg99; matrix(indices[2]+1,indices[3]+1)+=-reg255; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg34; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg191;
    matrix(indices[2]+2,indices[3]+2)+=-reg260; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg204; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg186; matrix(indices[3]+1,indices[3]+2)+=-reg259; matrix(indices[2]+2,indices[3]+1)+=ponderation*reg145;
    matrix(indices[3]+1,indices[3]+1)+=ponderation*reg93; matrix(indices[2]+2,indices[3]+0)+=-reg270; matrix(indices[2]+2,indices[2]+2)+=ponderation*reg129; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg190; matrix(indices[1]+0,indices[2]+2)+=-reg265;
    matrix(indices[0]+0,indices[2]+2)+=-reg264; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg187; matrix(indices[1]+0,indices[2]+0)+=-reg267; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg183; matrix(indices[1]+0,indices[1]+1)+=-reg268;
    matrix(indices[0]+0,indices[3]+0)+=ponderation*reg184; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg90; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg89; matrix(indices[0]+2,indices[3]+1)+=ponderation*reg177; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg179;
    matrix(indices[0]+2,indices[3]+0)+=ponderation*reg236; matrix(indices[0]+2,indices[2]+2)+=ponderation*reg162; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg226; matrix(indices[0]+0,indices[3]+2)+=ponderation*reg224; matrix(indices[0]+2,indices[1]+2)+=ponderation*reg106;
    matrix(indices[0]+2,indices[1]+1)+=ponderation*reg233; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg232; matrix(indices[0]+2,indices[0]+2)+=ponderation*reg103; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg73; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg101;
    matrix(indices[0]+1,indices[0]+1)+=ponderation*reg155; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg239; matrix(indices[0]+1,indices[2]+2)+=ponderation*reg241; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg113; matrix(indices[0]+1,indices[0]+2)+=ponderation*reg243;
    matrix(indices[0]+1,indices[2]+0)+=ponderation*reg235; matrix(indices[0]+1,indices[1]+2)+=ponderation*reg228; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg222; matrix(indices[0]+2,indices[2]+0)+=-reg266; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg153;
    matrix(indices[0]+0,indices[0]+1)+=ponderation*reg221; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg207; matrix(indices[2]+1,indices[2]+2)+=-reg257; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg139; matrix(indices[2]+0,indices[3]+2)+=-reg258;
    matrix(indices[0]+0,indices[0]+2)+=ponderation*reg205; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg201; matrix(indices[2]+0,indices[3]+0)+=-reg254; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg252; matrix(indices[2]+0,indices[2]+1)+=-reg256;
    matrix(indices[0]+0,indices[1]+0)+=ponderation*reg154; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg194; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg19; matrix(indices[1]+2,indices[3]+1)+=-reg88; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg119;
    matrix(indices[1]+2,indices[3]+0)+=ponderation*reg220; matrix(indices[1]+0,indices[3]+1)+=-reg263; matrix(indices[1]+0,indices[3]+2)+=ponderation*reg171; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg166; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg169;
    matrix(indices[1]+1,indices[1]+2)+=-reg261; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg167; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg210; matrix(indices[1]+1,indices[2]+1)+=-reg274; matrix(indices[1]+1,indices[2]+2)+=ponderation*reg175;
    matrix(indices[1]+1,indices[3]+0)+=-reg273; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg211; matrix(indices[1]+1,indices[3]+2)+=-reg272; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg217; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg126;
    matrix(indices[1]+2,indices[2]+0)+=-reg271; matrix(indices[1]+2,indices[2]+1)+=ponderation*reg215; matrix(indices[1]+2,indices[2]+2)+=-reg269;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=var_inter[0]-0.16666666666666665741; T reg1=var_inter[0]-0.25; T reg2=var_inter[0]-0.5; T reg3=reg1*reg2; reg2=reg0*reg2;
    reg0=reg1*reg0; reg2=reg2/0.020833333333333335646; reg3=reg3/0.027777777777777783175; reg1=var_inter[1]-0.16666666666666665741; T reg4=var_inter[1]-0.25;
    reg0=reg0/0.083333333333333342585; reg3=reg3*reg4; T reg5=var_inter[1]-0.5; reg2=reg1*reg2; reg2=reg5*reg2;
    reg0=reg4*reg0; reg4=reg5*reg3; reg4=reg4/0.027777777777777783175; T reg6=var_inter[2]-0.16666666666666665741; reg2=reg2/0.020833333333333335646;
    T reg7=var_inter[2]-0.25; reg0=reg5*reg0; reg5=var_inter[2]-0.5; T reg8=reg2*reg6; reg4=reg4*reg7;
    reg3=reg1*reg3; reg0=reg0/0.027777777777777783175; reg3=reg3/0.083333333333333342585; reg0=reg7*reg0; reg1=reg5*reg4;
    reg8=reg8*reg5; reg1=reg1/0.027777777777777783175; reg0=reg5*reg0; reg3=reg7*reg3; reg8=reg8/0.020833333333333335646;
    reg3=reg5*reg3; reg5=reg1*elem.proute[1](1,1); reg0=reg0/0.027777777777777783175; reg7=reg8*elem.proute[0](1,1); reg4=reg6*reg4;
    reg3=reg3/0.027777777777777783175; reg6=reg0*elem.proute[2](1,1); reg7=reg5-reg7; reg6=reg7+reg6; reg5=reg3*elem.proute[3](1,1);
    reg7=elem.pos(2)[1]-elem.pos(0)[1]; T reg9=elem.pos(2)[2]-elem.pos(0)[2]; reg4=reg4/0.083333333333333342585; T reg10=elem.pos(3)[1]-elem.pos(0)[1]; T reg11=elem.pos(3)[2]-elem.pos(0)[2];
    T reg12=elem.pos(1)[1]-elem.pos(0)[1]; T reg13=elem.pos(1)[2]-elem.pos(0)[2]; T reg14=reg7*reg11; T reg15=reg11*reg12; T reg16=reg9*reg10;
    T reg17=reg10*reg13; T reg18=reg4*elem.proute[4](1,1); reg5=reg6+reg5; reg6=1-var_inter[0]; T reg19=elem.pos(1)[0]-elem.pos(0)[0];
    T reg20=reg7*reg13; T reg21=reg9*reg12; reg17=reg15-reg17; reg16=reg14-reg16; reg6=reg6-var_inter[1];
    reg18=reg5+reg18; reg5=elem.pos(2)[0]-elem.pos(0)[0]; reg14=reg18+(*f.m).f_vol[1]; reg15=reg18+(*f.m).f_vol[0]; reg18=reg18+(*f.m).f_vol[2];
    reg20=reg21-reg20; reg21=reg5*reg17; T reg22=elem.pos(3)[0]-elem.pos(0)[0]; T reg23=reg16*reg19; T reg24=reg6-var_inter[2];
    T reg25=var_inter[0]*reg18; T reg26=var_inter[1]*reg15; T reg27=var_inter[0]*reg14; T reg28=var_inter[0]*reg15; T reg29=var_inter[1]*reg14;
    T reg30=var_inter[1]*reg18; T reg31=var_inter[2]*reg15; T reg32=var_inter[2]*reg14; T reg33=var_inter[2]*reg18; T reg34=reg24*reg18;
    T reg35=reg24*reg14; reg21=reg23-reg21; reg23=reg24*reg15; T reg36=reg22*reg20; reg33=(*f.m).density*reg33;
    reg32=(*f.m).density*reg32; reg36=reg21+reg36; reg31=(*f.m).density*reg31; reg30=(*f.m).density*reg30; reg29=(*f.m).density*reg29;
    reg26=(*f.m).density*reg26; reg25=(*f.m).density*reg25; reg23=(*f.m).density*reg23; reg27=(*f.m).density*reg27; reg28=(*f.m).density*reg28;
    reg35=(*f.m).density*reg35; reg34=(*f.m).density*reg34; reg21=reg36*reg33; T reg37=reg36*reg32; T reg38=reg36*reg31;
    T reg39=reg36*reg30; T reg40=reg36*reg29; T reg41=reg36*reg26; T reg42=reg36*reg25; T reg43=reg36*reg27;
    T reg44=reg36*reg28; T reg45=reg36*reg23; T reg46=reg36*reg34; T reg47=reg36*reg35; T reg48=ponderation*reg21;
    sollicitation[indices[3]+2]+=reg48; T reg49=ponderation*reg37; sollicitation[indices[3]+1]+=reg49; T reg50=ponderation*reg38; sollicitation[indices[3]+0]+=reg50;
    T reg51=ponderation*reg45; sollicitation[indices[0]+0]+=reg51; T reg52=ponderation*reg39; sollicitation[indices[2]+2]+=reg52; T reg53=ponderation*reg40;
    sollicitation[indices[2]+1]+=reg53; T reg54=ponderation*reg47; sollicitation[indices[0]+1]+=reg54; T reg55=ponderation*reg41; sollicitation[indices[2]+0]+=reg55;
    T reg56=ponderation*reg42; sollicitation[indices[1]+2]+=reg56; T reg57=ponderation*reg46; sollicitation[indices[0]+2]+=reg57; T reg58=ponderation*reg43;
    sollicitation[indices[1]+1]+=reg58; T reg59=ponderation*reg44; sollicitation[indices[1]+0]+=reg59;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg1=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0]; T reg2=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg3=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg4=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[2];
    T reg5=PNODE(0).dep_imp_val_0_0[2]*(*f.m).lim_cond_0; T reg6=reg5+reg4; T reg7=reg3+reg2; T reg8=reg1+reg0; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0;
    matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0; T reg9=PNODE(0).dep_imp_coef_0*reg6; T reg10=PNODE(0).dep_imp_coef_0*reg8; T reg11=PNODE(0).dep_imp_coef_0*reg7;
    T reg12=PNODE(0).f_nodal[0]+reg10; sollicitation[indices[0]+0]+=reg12; T reg13=PNODE(0).f_nodal[2]+reg9; sollicitation[indices[0]+2]+=reg13; T reg14=PNODE(0).f_nodal[1]+reg11;
    sollicitation[indices[0]+1]+=reg14;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg1=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0]; T reg2=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg3=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg4=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[2];
    T reg5=PNODE(0).dep_imp_val_0_0[2]*(*f.m).lim_cond_0; T reg6=reg5+reg4; T reg7=reg3+reg2; T reg8=reg1+reg0; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0;
    matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0; T reg9=PNODE(0).dep_imp_coef_0*reg6; T reg10=PNODE(0).dep_imp_coef_0*reg8; T reg11=PNODE(0).dep_imp_coef_0*reg7;
    T reg12=PNODE(0).f_nodal[0]+reg10; sollicitation[indices[0]+0]+=reg12; T reg13=PNODE(0).f_nodal[2]+reg9; sollicitation[indices[0]+2]+=reg13; T reg14=PNODE(0).f_nodal[1]+reg11;
    sollicitation[indices[0]+1]+=reg14;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg1=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0]; T reg2=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg3=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg4=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[2];
    T reg5=PNODE(0).dep_imp_val_0_0[2]*(*f.m).lim_cond_0; T reg6=reg5+reg4; T reg7=reg3+reg2; T reg8=reg1+reg0; T reg9=PNODE(0).dep_imp_coef_0*reg6;
    T reg10=PNODE(0).dep_imp_coef_0*reg8; T reg11=PNODE(0).dep_imp_coef_0*reg7; T reg12=PNODE(0).f_nodal[0]+reg10; sollicitation[indices[0]+0]+=reg12; T reg13=PNODE(0).f_nodal[2]+reg9;
    sollicitation[indices[0]+2]+=reg13; T reg14=PNODE(0).f_nodal[1]+reg11; sollicitation[indices[0]+1]+=reg14;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
  #undef PNODE
}
#endif
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(0)[1]; T reg1=elem.pos(2)[0]-elem.pos(0)[0]; T reg2=elem.pos(2)[2]-elem.pos(0)[2]; T reg3=pow(reg0,2); T reg4=pow(reg1,2);
    T reg5=pow(reg2,2); reg3=reg4+reg3; reg5=reg3+reg5; reg5=pow(reg5,0.5); reg3=reg0/reg5;
    reg4=reg1/reg5; T reg6=elem.pos(1)[1]-elem.pos(0)[1]; T reg7=elem.pos(1)[0]-elem.pos(0)[0]; T reg8=elem.pos(1)[2]-elem.pos(0)[2]; T reg9=reg6*reg3;
    T reg10=reg7*reg4; reg5=reg2/reg5; reg9=reg10+reg9; reg10=reg8*reg5; reg10=reg9+reg10;
    reg9=reg3*reg10; T reg11=reg4*reg10; reg11=reg7-reg11; reg9=reg6-reg9; T reg12=reg5*reg10;
    T reg13=pow(reg9,2); T reg14=pow(reg11,2); reg12=reg8-reg12; reg13=reg14+reg13; reg14=pow(reg12,2);
    reg14=reg13+reg14; reg14=pow(reg14,0.5); reg11=reg11/reg14; reg9=reg9/reg14; reg14=reg12/reg14;
    reg12=reg3*reg14; reg13=reg5*reg9; T reg15=reg0*reg9; T reg16=reg1*reg11; T reg17=reg5*reg11;
    T reg18=reg6*reg9; T reg19=reg4*reg14; T reg20=reg7*reg11; reg9=reg4*reg9; reg11=reg3*reg11;
    reg4=reg1*reg4; reg3=reg0*reg3; reg19=reg17-reg19; reg11=reg9-reg11; reg18=reg20+reg18;
    reg9=reg8*reg14; reg5=reg2*reg5; reg13=reg12-reg13; reg3=reg4+reg3; reg15=reg16+reg15;
    reg14=reg2*reg14; reg11=skin_elem.p*reg11; reg13=skin_elem.p*reg13; reg19=skin_elem.p*reg19; reg14=reg15+reg14;
    reg9=reg18+reg9; reg5=reg3+reg5; reg3=0.33333333333333337034*reg11; reg4=0.33333333333333337034*skin_elem.f_surf[2]; reg12=0.33333333333333331483*skin_elem.f_surf[0];
    reg15=0.33333333333333331483*reg13; reg16=0.33333333333333337034*reg19; reg17=0.33333333333333337034*skin_elem.f_surf[1]; reg18=0.33333333333333331483*reg19; reg20=0.33333333333333331483*skin_elem.f_surf[1];
    T reg21=0.33333333333333337034*reg13; T reg22=0.33333333333333337034*skin_elem.f_surf[0]; T reg23=0.33333333333333331483*skin_elem.f_surf[2]; T reg24=0.33333333333333331483*reg11; reg9=reg5*reg9;
    reg14=reg10*reg14; reg18=reg18+reg20; reg15=reg12+reg15; reg24=reg23+reg24; reg3=reg4+reg3;
    reg16=reg17+reg16; reg21=reg22+reg21; reg14=reg9-reg14; reg16=reg14*reg16; reg15=reg14*reg15;
    reg21=reg14*reg21; reg18=reg14*reg18; reg3=reg14*reg3; reg24=reg14*reg24; reg16=0.5*reg16;
    sollicitation[indices[0]+1]+=reg16; reg15=0.5*reg15; sollicitation[indices[1]+0]+=reg15; sollicitation[indices[2]+0]+=reg15; reg21=0.5*reg21;
    sollicitation[indices[0]+0]+=reg21; reg18=0.5*reg18; sollicitation[indices[1]+1]+=reg18; sollicitation[indices[2]+1]+=reg18; reg3=0.5*reg3;
    sollicitation[indices[0]+2]+=reg3; reg24=0.5*reg24; sollicitation[indices[1]+2]+=reg24; sollicitation[indices[2]+2]+=reg24;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(0)[1]; T reg1=elem.pos(2)[0]-elem.pos(0)[0]; T reg2=elem.pos(2)[2]-elem.pos(0)[2]; T reg3=pow(reg0,2); T reg4=pow(reg1,2);
    T reg5=pow(reg2,2); reg3=reg4+reg3; reg5=reg3+reg5; reg5=pow(reg5,0.5); reg3=reg0/reg5;
    reg4=reg1/reg5; T reg6=elem.pos(1)[1]-elem.pos(0)[1]; T reg7=elem.pos(1)[0]-elem.pos(0)[0]; T reg8=elem.pos(1)[2]-elem.pos(0)[2]; T reg9=reg6*reg3;
    T reg10=reg7*reg4; reg5=reg2/reg5; reg9=reg10+reg9; reg10=reg8*reg5; reg10=reg9+reg10;
    reg9=reg3*reg10; T reg11=reg4*reg10; reg11=reg7-reg11; reg9=reg6-reg9; T reg12=reg5*reg10;
    T reg13=pow(reg9,2); T reg14=pow(reg11,2); reg12=reg8-reg12; reg13=reg14+reg13; reg14=pow(reg12,2);
    reg14=reg13+reg14; reg14=pow(reg14,0.5); reg11=reg11/reg14; reg9=reg9/reg14; reg14=reg12/reg14;
    reg12=reg3*reg14; reg13=reg5*reg9; T reg15=reg0*reg9; T reg16=reg1*reg11; T reg17=reg5*reg11;
    T reg18=reg6*reg9; T reg19=reg4*reg14; T reg20=reg7*reg11; reg9=reg4*reg9; reg11=reg3*reg11;
    reg4=reg1*reg4; reg3=reg0*reg3; reg19=reg17-reg19; reg11=reg9-reg11; reg18=reg20+reg18;
    reg9=reg8*reg14; reg5=reg2*reg5; reg13=reg12-reg13; reg3=reg4+reg3; reg15=reg16+reg15;
    reg14=reg2*reg14; reg11=skin_elem.p*reg11; reg13=skin_elem.p*reg13; reg19=skin_elem.p*reg19; reg14=reg15+reg14;
    reg9=reg18+reg9; reg5=reg3+reg5; reg3=0.33333333333333337034*reg11; reg4=0.33333333333333337034*skin_elem.f_surf[2]; reg12=0.33333333333333331483*skin_elem.f_surf[0];
    reg15=0.33333333333333331483*reg13; reg16=0.33333333333333337034*reg19; reg17=0.33333333333333337034*skin_elem.f_surf[1]; reg18=0.33333333333333331483*reg19; reg20=0.33333333333333331483*skin_elem.f_surf[1];
    T reg21=0.33333333333333337034*reg13; T reg22=0.33333333333333337034*skin_elem.f_surf[0]; T reg23=0.33333333333333331483*skin_elem.f_surf[2]; T reg24=0.33333333333333331483*reg11; reg9=reg5*reg9;
    reg14=reg10*reg14; reg18=reg18+reg20; reg15=reg12+reg15; reg24=reg23+reg24; reg3=reg4+reg3;
    reg16=reg17+reg16; reg21=reg22+reg21; reg14=reg9-reg14; reg16=reg14*reg16; reg15=reg14*reg15;
    reg21=reg14*reg21; reg18=reg14*reg18; reg3=reg14*reg3; reg24=reg14*reg24; reg16=0.5*reg16;
    sollicitation[indices[0]+1]+=reg16; reg15=0.5*reg15; sollicitation[indices[1]+0]+=reg15; sollicitation[indices[2]+0]+=reg15; reg21=0.5*reg21;
    sollicitation[indices[0]+0]+=reg21; reg18=0.5*reg18; sollicitation[indices[1]+1]+=reg18; sollicitation[indices[2]+1]+=reg18; reg3=0.5*reg3;
    sollicitation[indices[0]+2]+=reg3; reg24=0.5*reg24; sollicitation[indices[1]+2]+=reg24; sollicitation[indices[2]+2]+=reg24;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[1]-elem.pos(0)[1]; T reg1=elem.pos(2)[0]-elem.pos(0)[0]; T reg2=elem.pos(2)[2]-elem.pos(0)[2]; T reg3=pow(reg0,2); T reg4=pow(reg1,2);
    T reg5=pow(reg2,2); reg3=reg4+reg3; reg5=reg3+reg5; reg5=pow(reg5,0.5); reg3=reg0/reg5;
    reg4=reg1/reg5; T reg6=elem.pos(1)[1]-elem.pos(0)[1]; T reg7=elem.pos(1)[0]-elem.pos(0)[0]; T reg8=elem.pos(1)[2]-elem.pos(0)[2]; T reg9=reg6*reg3;
    T reg10=reg7*reg4; reg5=reg2/reg5; reg9=reg10+reg9; reg10=reg8*reg5; reg10=reg9+reg10;
    reg9=reg3*reg10; T reg11=reg4*reg10; reg11=reg7-reg11; reg9=reg6-reg9; T reg12=reg5*reg10;
    T reg13=pow(reg9,2); T reg14=pow(reg11,2); reg12=reg8-reg12; reg13=reg14+reg13; reg14=pow(reg12,2);
    reg14=reg13+reg14; reg14=pow(reg14,0.5); reg11=reg11/reg14; reg9=reg9/reg14; reg14=reg12/reg14;
    reg12=reg3*reg14; reg13=reg5*reg9; T reg15=reg0*reg9; T reg16=reg1*reg11; T reg17=reg5*reg11;
    T reg18=reg6*reg9; T reg19=reg4*reg14; T reg20=reg7*reg11; reg9=reg4*reg9; reg11=reg3*reg11;
    reg4=reg1*reg4; reg3=reg0*reg3; reg19=reg17-reg19; reg11=reg9-reg11; reg18=reg20+reg18;
    reg9=reg8*reg14; reg5=reg2*reg5; reg13=reg12-reg13; reg3=reg4+reg3; reg15=reg16+reg15;
    reg14=reg2*reg14; reg11=skin_elem.p*reg11; reg13=skin_elem.p*reg13; reg19=skin_elem.p*reg19; reg14=reg15+reg14;
    reg9=reg18+reg9; reg5=reg3+reg5; reg3=0.33333333333333337034*reg11; reg4=0.33333333333333337034*skin_elem.f_surf[2]; reg12=0.33333333333333331483*skin_elem.f_surf[0];
    reg15=0.33333333333333331483*reg13; reg16=0.33333333333333337034*reg19; reg17=0.33333333333333337034*skin_elem.f_surf[1]; reg18=0.33333333333333331483*reg19; reg20=0.33333333333333331483*skin_elem.f_surf[1];
    T reg21=0.33333333333333337034*reg13; T reg22=0.33333333333333337034*skin_elem.f_surf[0]; T reg23=0.33333333333333331483*skin_elem.f_surf[2]; T reg24=0.33333333333333331483*reg11; reg9=reg5*reg9;
    reg14=reg10*reg14; reg18=reg18+reg20; reg15=reg12+reg15; reg24=reg23+reg24; reg3=reg4+reg3;
    reg16=reg17+reg16; reg21=reg22+reg21; reg14=reg9-reg14; reg16=reg14*reg16; reg15=reg14*reg15;
    reg21=reg14*reg21; reg18=reg14*reg18; reg3=reg14*reg3; reg24=reg14*reg24; reg16=0.5*reg16;
    sollicitation[indices[0]+1]+=reg16; reg15=0.5*reg15; sollicitation[indices[1]+0]+=reg15; sollicitation[indices[2]+0]+=reg15; reg21=0.5*reg21;
    sollicitation[indices[0]+0]+=reg21; reg18=0.5*reg18; sollicitation[indices[1]+1]+=reg18; sollicitation[indices[2]+1]+=reg18; reg3=0.5*reg3;
    sollicitation[indices[0]+2]+=reg3; reg24=0.5*reg24; sollicitation[indices[1]+2]+=reg24; sollicitation[indices[2]+2]+=reg24;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); T reg4=elem.pos(1)[2]-elem.pos(0)[2];
    reg2=reg3+reg2; reg3=pow(reg4,2); reg2=reg3+reg2; reg2=pow(reg2,0.5); reg3=elem.pos(3)[0]-elem.pos(0)[0];
    T reg5=elem.pos(3)[1]-elem.pos(0)[1]; T reg6=reg0/reg2; T reg7=reg1/reg2; T reg8=reg5*reg6; reg2=reg4/reg2;
    T reg9=elem.pos(3)[2]-elem.pos(0)[2]; T reg10=reg3*reg7; T reg11=reg9*reg2; reg10=reg8+reg10; reg11=reg10+reg11;
    reg8=reg7*reg11; reg10=reg6*reg11; T reg12=reg2*reg11; reg8=reg3-reg8; reg10=reg5-reg10;
    reg12=reg9-reg12; T reg13=pow(reg8,2); T reg14=pow(reg10,2); reg14=reg13+reg14; reg13=pow(reg12,2);
    reg13=reg14+reg13; reg13=pow(reg13,0.5); reg8=reg8/reg13; reg10=reg10/reg13; reg13=reg12/reg13;
    reg12=reg7*reg13; reg14=reg2*reg8; T reg15=reg1*reg8; T reg16=reg0*reg10; T reg17=reg3*reg8;
    T reg18=reg6*reg13; T reg19=reg2*reg10; T reg20=reg5*reg10; reg10=reg7*reg10; reg7=reg1*reg7;
    T reg21=reg0*reg6; reg8=reg6*reg8; reg6=reg4*reg13; reg8=reg10-reg8; reg16=reg15+reg16;
    reg20=reg17+reg20; reg13=reg9*reg13; reg21=reg7+reg21; reg2=reg4*reg2; reg12=reg14-reg12;
    reg19=reg18-reg19; reg6=reg16+reg6; reg2=reg21+reg2; reg13=reg20+reg13; reg19=skin_elem.p*reg19;
    reg12=skin_elem.p*reg12; reg8=skin_elem.p*reg8; reg7=0.33333333333333331483*reg12; reg6=reg11*reg6; reg10=0.33333333333333331483*reg19;
    reg11=0.33333333333333331483*reg8; reg14=0.33333333333333331483*skin_elem.f_surf[2]; reg2=reg13*reg2; reg13=0.33333333333333337034*reg12; reg15=0.33333333333333337034*skin_elem.f_surf[0];
    reg16=0.33333333333333337034*reg19; reg17=0.33333333333333331483*skin_elem.f_surf[1]; reg18=0.33333333333333337034*reg8; reg20=0.33333333333333331483*skin_elem.f_surf[0]; reg21=0.33333333333333337034*skin_elem.f_surf[1];
    T reg22=0.33333333333333337034*skin_elem.f_surf[2]; reg16=reg15+reg16; reg10=reg20+reg10; reg7=reg17+reg7; reg13=reg21+reg13;
    reg6=reg2-reg6; reg18=reg22+reg18; reg11=reg14+reg11; reg11=reg11*reg6; reg10=reg10*reg6;
    reg7=reg7*reg6; reg13=reg13*reg6; reg18=reg18*reg6; reg16=reg16*reg6; reg10=0.5*reg10;
    sollicitation[indices[1]+0]+=reg10; sollicitation[indices[3]+0]+=reg10; reg18=0.5*reg18; sollicitation[indices[0]+2]+=reg18; reg13=0.5*reg13;
    sollicitation[indices[0]+1]+=reg13; reg16=0.5*reg16; sollicitation[indices[0]+0]+=reg16; reg7=0.5*reg7; sollicitation[indices[1]+1]+=reg7;
    sollicitation[indices[3]+1]+=reg7; reg11=0.5*reg11; sollicitation[indices[1]+2]+=reg11; sollicitation[indices[3]+2]+=reg11;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); T reg4=elem.pos(1)[2]-elem.pos(0)[2];
    reg2=reg3+reg2; reg3=pow(reg4,2); reg2=reg3+reg2; reg2=pow(reg2,0.5); reg3=elem.pos(3)[0]-elem.pos(0)[0];
    T reg5=elem.pos(3)[1]-elem.pos(0)[1]; T reg6=reg0/reg2; T reg7=reg1/reg2; T reg8=reg5*reg6; reg2=reg4/reg2;
    T reg9=elem.pos(3)[2]-elem.pos(0)[2]; T reg10=reg3*reg7; T reg11=reg9*reg2; reg10=reg8+reg10; reg11=reg10+reg11;
    reg8=reg7*reg11; reg10=reg6*reg11; T reg12=reg2*reg11; reg8=reg3-reg8; reg10=reg5-reg10;
    reg12=reg9-reg12; T reg13=pow(reg8,2); T reg14=pow(reg10,2); reg14=reg13+reg14; reg13=pow(reg12,2);
    reg13=reg14+reg13; reg13=pow(reg13,0.5); reg8=reg8/reg13; reg10=reg10/reg13; reg13=reg12/reg13;
    reg12=reg7*reg13; reg14=reg2*reg8; T reg15=reg1*reg8; T reg16=reg0*reg10; T reg17=reg3*reg8;
    T reg18=reg6*reg13; T reg19=reg2*reg10; T reg20=reg5*reg10; reg10=reg7*reg10; reg7=reg1*reg7;
    T reg21=reg0*reg6; reg8=reg6*reg8; reg6=reg4*reg13; reg8=reg10-reg8; reg16=reg15+reg16;
    reg20=reg17+reg20; reg13=reg9*reg13; reg21=reg7+reg21; reg2=reg4*reg2; reg12=reg14-reg12;
    reg19=reg18-reg19; reg6=reg16+reg6; reg2=reg21+reg2; reg13=reg20+reg13; reg19=skin_elem.p*reg19;
    reg12=skin_elem.p*reg12; reg8=skin_elem.p*reg8; reg7=0.33333333333333331483*reg12; reg6=reg11*reg6; reg10=0.33333333333333331483*reg19;
    reg11=0.33333333333333331483*reg8; reg14=0.33333333333333331483*skin_elem.f_surf[2]; reg2=reg13*reg2; reg13=0.33333333333333337034*reg12; reg15=0.33333333333333337034*skin_elem.f_surf[0];
    reg16=0.33333333333333337034*reg19; reg17=0.33333333333333331483*skin_elem.f_surf[1]; reg18=0.33333333333333337034*reg8; reg20=0.33333333333333331483*skin_elem.f_surf[0]; reg21=0.33333333333333337034*skin_elem.f_surf[1];
    T reg22=0.33333333333333337034*skin_elem.f_surf[2]; reg16=reg15+reg16; reg10=reg20+reg10; reg7=reg17+reg7; reg13=reg21+reg13;
    reg6=reg2-reg6; reg18=reg22+reg18; reg11=reg14+reg11; reg11=reg11*reg6; reg10=reg10*reg6;
    reg7=reg7*reg6; reg13=reg13*reg6; reg18=reg18*reg6; reg16=reg16*reg6; reg10=0.5*reg10;
    sollicitation[indices[1]+0]+=reg10; sollicitation[indices[3]+0]+=reg10; reg18=0.5*reg18; sollicitation[indices[0]+2]+=reg18; reg13=0.5*reg13;
    sollicitation[indices[0]+1]+=reg13; reg16=0.5*reg16; sollicitation[indices[0]+0]+=reg16; reg7=0.5*reg7; sollicitation[indices[1]+1]+=reg7;
    sollicitation[indices[3]+1]+=reg7; reg11=0.5*reg11; sollicitation[indices[1]+2]+=reg11; sollicitation[indices[3]+2]+=reg11;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(1)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[0]-elem.pos(0)[0]; T reg2=pow(reg1,2); T reg3=pow(reg0,2); T reg4=elem.pos(1)[2]-elem.pos(0)[2];
    reg2=reg3+reg2; reg3=pow(reg4,2); reg2=reg3+reg2; reg2=pow(reg2,0.5); reg3=elem.pos(3)[0]-elem.pos(0)[0];
    T reg5=elem.pos(3)[1]-elem.pos(0)[1]; T reg6=reg0/reg2; T reg7=reg1/reg2; T reg8=reg5*reg6; reg2=reg4/reg2;
    T reg9=elem.pos(3)[2]-elem.pos(0)[2]; T reg10=reg3*reg7; T reg11=reg9*reg2; reg10=reg8+reg10; reg11=reg10+reg11;
    reg8=reg7*reg11; reg10=reg6*reg11; T reg12=reg2*reg11; reg8=reg3-reg8; reg10=reg5-reg10;
    reg12=reg9-reg12; T reg13=pow(reg8,2); T reg14=pow(reg10,2); reg14=reg13+reg14; reg13=pow(reg12,2);
    reg13=reg14+reg13; reg13=pow(reg13,0.5); reg8=reg8/reg13; reg10=reg10/reg13; reg13=reg12/reg13;
    reg12=reg7*reg13; reg14=reg2*reg8; T reg15=reg1*reg8; T reg16=reg0*reg10; T reg17=reg3*reg8;
    T reg18=reg6*reg13; T reg19=reg2*reg10; T reg20=reg5*reg10; reg10=reg7*reg10; reg7=reg1*reg7;
    T reg21=reg0*reg6; reg8=reg6*reg8; reg6=reg4*reg13; reg8=reg10-reg8; reg16=reg15+reg16;
    reg20=reg17+reg20; reg13=reg9*reg13; reg21=reg7+reg21; reg2=reg4*reg2; reg12=reg14-reg12;
    reg19=reg18-reg19; reg6=reg16+reg6; reg2=reg21+reg2; reg13=reg20+reg13; reg19=skin_elem.p*reg19;
    reg12=skin_elem.p*reg12; reg8=skin_elem.p*reg8; reg7=0.33333333333333331483*reg12; reg6=reg11*reg6; reg10=0.33333333333333331483*reg19;
    reg11=0.33333333333333331483*reg8; reg14=0.33333333333333331483*skin_elem.f_surf[2]; reg2=reg13*reg2; reg13=0.33333333333333337034*reg12; reg15=0.33333333333333337034*skin_elem.f_surf[0];
    reg16=0.33333333333333337034*reg19; reg17=0.33333333333333331483*skin_elem.f_surf[1]; reg18=0.33333333333333337034*reg8; reg20=0.33333333333333331483*skin_elem.f_surf[0]; reg21=0.33333333333333337034*skin_elem.f_surf[1];
    T reg22=0.33333333333333337034*skin_elem.f_surf[2]; reg16=reg15+reg16; reg10=reg20+reg10; reg7=reg17+reg7; reg13=reg21+reg13;
    reg6=reg2-reg6; reg18=reg22+reg18; reg11=reg14+reg11; reg11=reg11*reg6; reg10=reg10*reg6;
    reg7=reg7*reg6; reg13=reg13*reg6; reg18=reg18*reg6; reg16=reg16*reg6; reg10=0.5*reg10;
    sollicitation[indices[1]+0]+=reg10; sollicitation[indices[3]+0]+=reg10; reg18=0.5*reg18; sollicitation[indices[0]+2]+=reg18; reg13=0.5*reg13;
    sollicitation[indices[0]+1]+=reg13; reg16=0.5*reg16; sollicitation[indices[0]+0]+=reg16; reg7=0.5*reg7; sollicitation[indices[1]+1]+=reg7;
    sollicitation[indices[3]+1]+=reg7; reg11=0.5*reg11; sollicitation[indices[1]+2]+=reg11; sollicitation[indices[3]+2]+=reg11;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(3)[1]-elem.pos(0)[1]; T reg1=elem.pos(3)[0]-elem.pos(0)[0]; T reg2=elem.pos(3)[2]-elem.pos(0)[2]; T reg3=pow(reg1,2); T reg4=pow(reg0,2);
    T reg5=pow(reg2,2); reg4=reg3+reg4; reg4=reg5+reg4; reg4=pow(reg4,0.5); reg3=reg0/reg4;
    reg5=reg1/reg4; T reg6=elem.pos(2)[0]-elem.pos(0)[0]; T reg7=elem.pos(2)[1]-elem.pos(0)[1]; T reg8=reg7*reg3; T reg9=elem.pos(2)[2]-elem.pos(0)[2];
    reg4=reg2/reg4; T reg10=reg6*reg5; reg8=reg10+reg8; reg10=reg9*reg4; reg10=reg8+reg10;
    reg8=reg3*reg10; T reg11=reg5*reg10; reg8=reg7-reg8; reg11=reg6-reg11; T reg12=reg4*reg10;
    T reg13=pow(reg11,2); T reg14=pow(reg8,2); reg12=reg9-reg12; reg14=reg13+reg14; reg13=pow(reg12,2);
    reg13=reg14+reg13; reg13=pow(reg13,0.5); reg11=reg11/reg13; reg8=reg8/reg13; reg13=reg12/reg13;
    reg12=reg3*reg13; reg14=reg8*reg4; T reg15=reg0*reg8; T reg16=reg1*reg11; T reg17=reg5*reg13;
    T reg18=reg11*reg4; T reg19=reg1*reg5; T reg20=reg7*reg8; T reg21=reg0*reg3; T reg22=reg6*reg11;
    reg8=reg5*reg8; reg3=reg11*reg3; reg21=reg19+reg21; reg17=reg18-reg17; reg4=reg2*reg4;
    reg3=reg8-reg3; reg5=reg2*reg13; reg15=reg16+reg15; reg14=reg12-reg14; reg13=reg9*reg13;
    reg20=reg22+reg20; reg17=skin_elem.p*reg17; reg14=skin_elem.p*reg14; reg3=skin_elem.p*reg3; reg13=reg20+reg13;
    reg4=reg21+reg4; reg5=reg15+reg5; reg8=0.33333333333333337034*reg3; reg11=0.33333333333333331483*reg14; reg12=0.33333333333333337034*reg17;
    reg15=0.33333333333333331483*reg17; reg16=0.33333333333333331483*reg3; reg18=0.33333333333333337034*reg14; reg4=reg13*reg4; reg10=reg5*reg10;
    reg5=0.33333333333333331483*skin_elem.f_surf[2]; reg13=0.33333333333333331483*skin_elem.f_surf[1]; reg19=0.33333333333333331483*skin_elem.f_surf[0]; reg20=0.33333333333333337034*skin_elem.f_surf[2]; reg21=0.33333333333333337034*skin_elem.f_surf[1];
    reg22=0.33333333333333337034*skin_elem.f_surf[0]; reg16=reg5+reg16; reg15=reg13+reg15; reg11=reg19+reg11; reg8=reg20+reg8;
    reg12=reg21+reg12; reg18=reg22+reg18; reg10=reg4-reg10; reg8=reg10*reg8; reg12=reg10*reg12;
    reg11=reg10*reg11; reg18=reg10*reg18; reg15=reg10*reg15; reg16=reg10*reg16; reg12=0.5*reg12;
    sollicitation[indices[0]+1]+=reg12; reg8=0.5*reg8; sollicitation[indices[0]+2]+=reg8; reg11=0.5*reg11; sollicitation[indices[2]+0]+=reg11;
    sollicitation[indices[3]+0]+=reg11; reg18=0.5*reg18; sollicitation[indices[0]+0]+=reg18; reg15=0.5*reg15; sollicitation[indices[2]+1]+=reg15;
    sollicitation[indices[3]+1]+=reg15; reg16=0.5*reg16; sollicitation[indices[2]+2]+=reg16; sollicitation[indices[3]+2]+=reg16;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(3)[1]-elem.pos(0)[1]; T reg1=elem.pos(3)[0]-elem.pos(0)[0]; T reg2=elem.pos(3)[2]-elem.pos(0)[2]; T reg3=pow(reg1,2); T reg4=pow(reg0,2);
    T reg5=pow(reg2,2); reg4=reg3+reg4; reg4=reg5+reg4; reg4=pow(reg4,0.5); reg3=reg0/reg4;
    reg5=reg1/reg4; T reg6=elem.pos(2)[0]-elem.pos(0)[0]; T reg7=elem.pos(2)[1]-elem.pos(0)[1]; T reg8=reg7*reg3; T reg9=elem.pos(2)[2]-elem.pos(0)[2];
    reg4=reg2/reg4; T reg10=reg6*reg5; reg8=reg10+reg8; reg10=reg9*reg4; reg10=reg8+reg10;
    reg8=reg3*reg10; T reg11=reg5*reg10; reg8=reg7-reg8; reg11=reg6-reg11; T reg12=reg4*reg10;
    T reg13=pow(reg11,2); T reg14=pow(reg8,2); reg12=reg9-reg12; reg14=reg13+reg14; reg13=pow(reg12,2);
    reg13=reg14+reg13; reg13=pow(reg13,0.5); reg11=reg11/reg13; reg8=reg8/reg13; reg13=reg12/reg13;
    reg12=reg3*reg13; reg14=reg8*reg4; T reg15=reg0*reg8; T reg16=reg1*reg11; T reg17=reg5*reg13;
    T reg18=reg11*reg4; T reg19=reg1*reg5; T reg20=reg7*reg8; T reg21=reg0*reg3; T reg22=reg6*reg11;
    reg8=reg5*reg8; reg3=reg11*reg3; reg21=reg19+reg21; reg17=reg18-reg17; reg4=reg2*reg4;
    reg3=reg8-reg3; reg5=reg2*reg13; reg15=reg16+reg15; reg14=reg12-reg14; reg13=reg9*reg13;
    reg20=reg22+reg20; reg17=skin_elem.p*reg17; reg14=skin_elem.p*reg14; reg3=skin_elem.p*reg3; reg13=reg20+reg13;
    reg4=reg21+reg4; reg5=reg15+reg5; reg8=0.33333333333333337034*reg3; reg11=0.33333333333333331483*reg14; reg12=0.33333333333333337034*reg17;
    reg15=0.33333333333333331483*reg17; reg16=0.33333333333333331483*reg3; reg18=0.33333333333333337034*reg14; reg4=reg13*reg4; reg10=reg5*reg10;
    reg5=0.33333333333333331483*skin_elem.f_surf[2]; reg13=0.33333333333333331483*skin_elem.f_surf[1]; reg19=0.33333333333333331483*skin_elem.f_surf[0]; reg20=0.33333333333333337034*skin_elem.f_surf[2]; reg21=0.33333333333333337034*skin_elem.f_surf[1];
    reg22=0.33333333333333337034*skin_elem.f_surf[0]; reg16=reg5+reg16; reg15=reg13+reg15; reg11=reg19+reg11; reg8=reg20+reg8;
    reg12=reg21+reg12; reg18=reg22+reg18; reg10=reg4-reg10; reg8=reg10*reg8; reg12=reg10*reg12;
    reg11=reg10*reg11; reg18=reg10*reg18; reg15=reg10*reg15; reg16=reg10*reg16; reg12=0.5*reg12;
    sollicitation[indices[0]+1]+=reg12; reg8=0.5*reg8; sollicitation[indices[0]+2]+=reg8; reg11=0.5*reg11; sollicitation[indices[2]+0]+=reg11;
    sollicitation[indices[3]+0]+=reg11; reg18=0.5*reg18; sollicitation[indices[0]+0]+=reg18; reg15=0.5*reg15; sollicitation[indices[2]+1]+=reg15;
    sollicitation[indices[3]+1]+=reg15; reg16=0.5*reg16; sollicitation[indices[2]+2]+=reg16; sollicitation[indices[3]+2]+=reg16;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(3)[1]-elem.pos(0)[1]; T reg1=elem.pos(3)[0]-elem.pos(0)[0]; T reg2=elem.pos(3)[2]-elem.pos(0)[2]; T reg3=pow(reg1,2); T reg4=pow(reg0,2);
    T reg5=pow(reg2,2); reg4=reg3+reg4; reg4=reg5+reg4; reg4=pow(reg4,0.5); reg3=reg0/reg4;
    reg5=reg1/reg4; T reg6=elem.pos(2)[0]-elem.pos(0)[0]; T reg7=elem.pos(2)[1]-elem.pos(0)[1]; T reg8=reg7*reg3; T reg9=elem.pos(2)[2]-elem.pos(0)[2];
    reg4=reg2/reg4; T reg10=reg6*reg5; reg8=reg10+reg8; reg10=reg9*reg4; reg10=reg8+reg10;
    reg8=reg3*reg10; T reg11=reg5*reg10; reg8=reg7-reg8; reg11=reg6-reg11; T reg12=reg4*reg10;
    T reg13=pow(reg11,2); T reg14=pow(reg8,2); reg12=reg9-reg12; reg14=reg13+reg14; reg13=pow(reg12,2);
    reg13=reg14+reg13; reg13=pow(reg13,0.5); reg11=reg11/reg13; reg8=reg8/reg13; reg13=reg12/reg13;
    reg12=reg3*reg13; reg14=reg8*reg4; T reg15=reg0*reg8; T reg16=reg1*reg11; T reg17=reg5*reg13;
    T reg18=reg11*reg4; T reg19=reg1*reg5; T reg20=reg7*reg8; T reg21=reg0*reg3; T reg22=reg6*reg11;
    reg8=reg5*reg8; reg3=reg11*reg3; reg21=reg19+reg21; reg17=reg18-reg17; reg4=reg2*reg4;
    reg3=reg8-reg3; reg5=reg2*reg13; reg15=reg16+reg15; reg14=reg12-reg14; reg13=reg9*reg13;
    reg20=reg22+reg20; reg17=skin_elem.p*reg17; reg14=skin_elem.p*reg14; reg3=skin_elem.p*reg3; reg13=reg20+reg13;
    reg4=reg21+reg4; reg5=reg15+reg5; reg8=0.33333333333333337034*reg3; reg11=0.33333333333333331483*reg14; reg12=0.33333333333333337034*reg17;
    reg15=0.33333333333333331483*reg17; reg16=0.33333333333333331483*reg3; reg18=0.33333333333333337034*reg14; reg4=reg13*reg4; reg10=reg5*reg10;
    reg5=0.33333333333333331483*skin_elem.f_surf[2]; reg13=0.33333333333333331483*skin_elem.f_surf[1]; reg19=0.33333333333333331483*skin_elem.f_surf[0]; reg20=0.33333333333333337034*skin_elem.f_surf[2]; reg21=0.33333333333333337034*skin_elem.f_surf[1];
    reg22=0.33333333333333337034*skin_elem.f_surf[0]; reg16=reg5+reg16; reg15=reg13+reg15; reg11=reg19+reg11; reg8=reg20+reg8;
    reg12=reg21+reg12; reg18=reg22+reg18; reg10=reg4-reg10; reg8=reg10*reg8; reg12=reg10*reg12;
    reg11=reg10*reg11; reg18=reg10*reg18; reg15=reg10*reg15; reg16=reg10*reg16; reg12=0.5*reg12;
    sollicitation[indices[0]+1]+=reg12; reg8=0.5*reg8; sollicitation[indices[0]+2]+=reg8; reg11=0.5*reg11; sollicitation[indices[2]+0]+=reg11;
    sollicitation[indices[3]+0]+=reg11; reg18=0.5*reg18; sollicitation[indices[0]+0]+=reg18; reg15=0.5*reg15; sollicitation[indices[2]+1]+=reg15;
    sollicitation[indices[3]+1]+=reg15; reg16=0.5*reg16; sollicitation[indices[2]+2]+=reg16; sollicitation[indices[3]+2]+=reg16;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[0]-elem.pos(1)[0]; T reg1=elem.pos(2)[1]-elem.pos(1)[1]; T reg2=elem.pos(2)[2]-elem.pos(1)[2]; T reg3=pow(reg1,2); T reg4=pow(reg0,2);
    reg4=reg3+reg4; reg3=pow(reg2,2); reg4=reg3+reg4; reg4=pow(reg4,0.5); reg3=elem.pos(3)[1]-elem.pos(1)[1];
    T reg5=reg1/reg4; T reg6=reg0/reg4; T reg7=elem.pos(3)[0]-elem.pos(1)[0]; T reg8=reg7*reg6; T reg9=reg3*reg5;
    T reg10=elem.pos(3)[2]-elem.pos(1)[2]; reg4=reg2/reg4; T reg11=reg10*reg4; reg9=reg8+reg9; reg11=reg9+reg11;
    reg8=reg6*reg11; reg9=reg5*reg11; reg8=reg7-reg8; T reg12=reg4*reg11; reg9=reg3-reg9;
    reg12=reg10-reg12; T reg13=pow(reg8,2); T reg14=pow(reg9,2); T reg15=pow(reg12,2); reg13=reg14+reg13;
    reg13=reg15+reg13; reg13=pow(reg13,0.5); reg9=reg9/reg13; reg12=reg12/reg13; reg13=reg8/reg13;
    reg8=reg6*reg9; reg14=reg13*reg5; reg15=reg6*reg12; T reg16=reg13*reg4; reg3=reg3*reg9;
    reg6=reg0*reg6; T reg17=reg1*reg5; reg0=reg13*reg0; reg1=reg1*reg9; reg9=reg4*reg9;
    reg5=reg5*reg12; reg7=reg13*reg7; reg9=reg5-reg9; reg5=reg2*reg12; reg1=reg0+reg1;
    reg15=reg16-reg15; reg4=reg2*reg4; reg17=reg6+reg17; reg12=reg10*reg12; reg14=reg8-reg14;
    reg3=reg7+reg3; reg15=skin_elem.p*reg15; reg9=skin_elem.p*reg9; reg14=skin_elem.p*reg14; reg5=reg1+reg5;
    reg4=reg17+reg4; reg12=reg3+reg12; reg0=0.33333333333333337034*reg14; reg1=0.33333333333333331483*reg14; reg2=0.33333333333333337034*reg15;
    reg3=0.33333333333333331483*reg15; reg6=0.33333333333333331483*reg9; reg7=0.33333333333333337034*reg9; reg8=0.33333333333333331483*skin_elem.f_surf[2]; reg10=0.33333333333333331483*skin_elem.f_surf[1];
    reg13=0.33333333333333331483*skin_elem.f_surf[0]; reg16=0.33333333333333337034*skin_elem.f_surf[2]; reg4=reg12*reg4; reg12=0.33333333333333337034*skin_elem.f_surf[1]; reg17=0.33333333333333337034*skin_elem.f_surf[0];
    reg5=reg11*reg5; reg3=reg10+reg3; reg0=reg16+reg0; reg6=reg13+reg6; reg2=reg12+reg2;
    reg1=reg8+reg1; reg7=reg17+reg7; reg5=reg4-reg5; reg3=reg5*reg3; reg1=reg5*reg1;
    reg6=reg5*reg6; reg0=reg5*reg0; reg2=reg5*reg2; reg7=reg5*reg7; reg6=0.5*reg6;
    sollicitation[indices[2]+0]+=reg6; sollicitation[indices[3]+0]+=reg6; reg0=0.5*reg0; sollicitation[indices[1]+2]+=reg0; reg2=0.5*reg2;
    sollicitation[indices[1]+1]+=reg2; reg3=0.5*reg3; sollicitation[indices[2]+1]+=reg3; sollicitation[indices[3]+1]+=reg3; reg7=0.5*reg7;
    sollicitation[indices[1]+0]+=reg7; reg1=0.5*reg1; sollicitation[indices[2]+2]+=reg1; sollicitation[indices[3]+2]+=reg1;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[0]-elem.pos(1)[0]; T reg1=elem.pos(2)[1]-elem.pos(1)[1]; T reg2=elem.pos(2)[2]-elem.pos(1)[2]; T reg3=pow(reg1,2); T reg4=pow(reg0,2);
    reg4=reg3+reg4; reg3=pow(reg2,2); reg4=reg3+reg4; reg4=pow(reg4,0.5); reg3=elem.pos(3)[1]-elem.pos(1)[1];
    T reg5=reg1/reg4; T reg6=reg0/reg4; T reg7=elem.pos(3)[0]-elem.pos(1)[0]; T reg8=reg7*reg6; T reg9=reg3*reg5;
    T reg10=elem.pos(3)[2]-elem.pos(1)[2]; reg4=reg2/reg4; T reg11=reg10*reg4; reg9=reg8+reg9; reg11=reg9+reg11;
    reg8=reg6*reg11; reg9=reg5*reg11; reg8=reg7-reg8; T reg12=reg4*reg11; reg9=reg3-reg9;
    reg12=reg10-reg12; T reg13=pow(reg8,2); T reg14=pow(reg9,2); T reg15=pow(reg12,2); reg13=reg14+reg13;
    reg13=reg15+reg13; reg13=pow(reg13,0.5); reg9=reg9/reg13; reg12=reg12/reg13; reg13=reg8/reg13;
    reg8=reg6*reg9; reg14=reg13*reg5; reg15=reg6*reg12; T reg16=reg13*reg4; reg3=reg3*reg9;
    reg6=reg0*reg6; T reg17=reg1*reg5; reg0=reg13*reg0; reg1=reg1*reg9; reg9=reg4*reg9;
    reg5=reg5*reg12; reg7=reg13*reg7; reg9=reg5-reg9; reg5=reg2*reg12; reg1=reg0+reg1;
    reg15=reg16-reg15; reg4=reg2*reg4; reg17=reg6+reg17; reg12=reg10*reg12; reg14=reg8-reg14;
    reg3=reg7+reg3; reg15=skin_elem.p*reg15; reg9=skin_elem.p*reg9; reg14=skin_elem.p*reg14; reg5=reg1+reg5;
    reg4=reg17+reg4; reg12=reg3+reg12; reg0=0.33333333333333337034*reg14; reg1=0.33333333333333331483*reg14; reg2=0.33333333333333337034*reg15;
    reg3=0.33333333333333331483*reg15; reg6=0.33333333333333331483*reg9; reg7=0.33333333333333337034*reg9; reg8=0.33333333333333331483*skin_elem.f_surf[2]; reg10=0.33333333333333331483*skin_elem.f_surf[1];
    reg13=0.33333333333333331483*skin_elem.f_surf[0]; reg16=0.33333333333333337034*skin_elem.f_surf[2]; reg4=reg12*reg4; reg12=0.33333333333333337034*skin_elem.f_surf[1]; reg17=0.33333333333333337034*skin_elem.f_surf[0];
    reg5=reg11*reg5; reg3=reg10+reg3; reg0=reg16+reg0; reg6=reg13+reg6; reg2=reg12+reg2;
    reg1=reg8+reg1; reg7=reg17+reg7; reg5=reg4-reg5; reg3=reg5*reg3; reg1=reg5*reg1;
    reg6=reg5*reg6; reg0=reg5*reg0; reg2=reg5*reg2; reg7=reg5*reg7; reg6=0.5*reg6;
    sollicitation[indices[2]+0]+=reg6; sollicitation[indices[3]+0]+=reg6; reg0=0.5*reg0; sollicitation[indices[1]+2]+=reg0; reg2=0.5*reg2;
    sollicitation[indices[1]+1]+=reg2; reg3=0.5*reg3; sollicitation[indices[2]+1]+=reg3; sollicitation[indices[3]+1]+=reg3; reg7=0.5*reg7;
    sollicitation[indices[1]+0]+=reg7; reg1=0.5*reg1; sollicitation[indices[2]+2]+=reg1; sollicitation[indices[3]+2]+=reg1;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=elem.pos(2)[0]-elem.pos(1)[0]; T reg1=elem.pos(2)[1]-elem.pos(1)[1]; T reg2=elem.pos(2)[2]-elem.pos(1)[2]; T reg3=pow(reg1,2); T reg4=pow(reg0,2);
    reg4=reg3+reg4; reg3=pow(reg2,2); reg4=reg3+reg4; reg4=pow(reg4,0.5); reg3=elem.pos(3)[1]-elem.pos(1)[1];
    T reg5=reg1/reg4; T reg6=reg0/reg4; T reg7=elem.pos(3)[0]-elem.pos(1)[0]; T reg8=reg7*reg6; T reg9=reg3*reg5;
    T reg10=elem.pos(3)[2]-elem.pos(1)[2]; reg4=reg2/reg4; T reg11=reg10*reg4; reg9=reg8+reg9; reg11=reg9+reg11;
    reg8=reg6*reg11; reg9=reg5*reg11; reg8=reg7-reg8; T reg12=reg4*reg11; reg9=reg3-reg9;
    reg12=reg10-reg12; T reg13=pow(reg8,2); T reg14=pow(reg9,2); T reg15=pow(reg12,2); reg13=reg14+reg13;
    reg13=reg15+reg13; reg13=pow(reg13,0.5); reg9=reg9/reg13; reg12=reg12/reg13; reg13=reg8/reg13;
    reg8=reg6*reg9; reg14=reg13*reg5; reg15=reg6*reg12; T reg16=reg13*reg4; reg3=reg3*reg9;
    reg6=reg0*reg6; T reg17=reg1*reg5; reg0=reg13*reg0; reg1=reg1*reg9; reg9=reg4*reg9;
    reg5=reg5*reg12; reg7=reg13*reg7; reg9=reg5-reg9; reg5=reg2*reg12; reg1=reg0+reg1;
    reg15=reg16-reg15; reg4=reg2*reg4; reg17=reg6+reg17; reg12=reg10*reg12; reg14=reg8-reg14;
    reg3=reg7+reg3; reg15=skin_elem.p*reg15; reg9=skin_elem.p*reg9; reg14=skin_elem.p*reg14; reg5=reg1+reg5;
    reg4=reg17+reg4; reg12=reg3+reg12; reg0=0.33333333333333337034*reg14; reg1=0.33333333333333331483*reg14; reg2=0.33333333333333337034*reg15;
    reg3=0.33333333333333331483*reg15; reg6=0.33333333333333331483*reg9; reg7=0.33333333333333337034*reg9; reg8=0.33333333333333331483*skin_elem.f_surf[2]; reg10=0.33333333333333331483*skin_elem.f_surf[1];
    reg13=0.33333333333333331483*skin_elem.f_surf[0]; reg16=0.33333333333333337034*skin_elem.f_surf[2]; reg4=reg12*reg4; reg12=0.33333333333333337034*skin_elem.f_surf[1]; reg17=0.33333333333333337034*skin_elem.f_surf[0];
    reg5=reg11*reg5; reg3=reg10+reg3; reg0=reg16+reg0; reg6=reg13+reg6; reg2=reg12+reg2;
    reg1=reg8+reg1; reg7=reg17+reg7; reg5=reg4-reg5; reg3=reg5*reg3; reg1=reg5*reg1;
    reg6=reg5*reg6; reg0=reg5*reg0; reg2=reg5*reg2; reg7=reg5*reg7; reg6=0.5*reg6;
    sollicitation[indices[2]+0]+=reg6; sollicitation[indices[3]+0]+=reg6; reg0=0.5*reg0; sollicitation[indices[1]+2]+=reg0; reg2=0.5*reg2;
    sollicitation[indices[1]+1]+=reg2; reg3=0.5*reg3; sollicitation[indices[2]+1]+=reg3; sollicitation[indices[3]+1]+=reg3; reg7=0.5*reg7;
    sollicitation[indices[1]+0]+=reg7; reg1=0.5*reg1; sollicitation[indices[2]+2]+=reg1; sollicitation[indices[3]+2]+=reg1;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_vector_der_var(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */    T reg0=1+(*f.m).poisson_ratio; T reg1=1.0/(*f.m).elastic_modulus; T reg2=2*reg1; reg0=reg0/(*f.m).elastic_modulus; T reg3=pow(reg0,2);
    reg2=reg0*reg2; T reg4=reg0*reg2; T reg5=reg1*reg3; reg0=reg0*reg3; T reg6=(*f.m).poisson_ratio/(*f.m).elastic_modulus;
    reg4=reg4+reg5; T reg7=reg1*reg0; T reg8=reg6*reg4; reg0=reg6*reg0; T reg9=reg6*reg2;
    reg8=reg7+reg8; reg4=reg1*reg4; T reg10=elem.pos(1)[2]-elem.pos(0)[2]; T reg11=elem.pos(2)[1]-elem.pos(0)[1]; T reg12=elem.pos(1)[1]-elem.pos(0)[1];
    T reg13=elem.pos(2)[2]-elem.pos(0)[2]; T reg14=elem.pos(3)[1]-elem.pos(0)[1]; T reg15=elem.pos(3)[2]-elem.pos(0)[2]; T reg16=reg6*reg8; T reg17=reg6*reg4;
    reg9=reg5+reg9; reg3=reg6*reg3; T reg18=reg1*reg0; T reg19=reg1*reg7; reg2=reg1*reg2;
    T reg20=reg1*reg5; reg7=reg6*reg7; T reg21=reg1*reg3; T reg22=reg14*reg10; reg0=reg6*reg0;
    T reg23=reg13*reg14; T reg24=reg15*reg12; T reg25=reg6*reg2; T reg26=reg11*reg15; T reg27=reg6*reg9;
    reg17=reg19+reg17; reg16=reg18+reg16; reg8=reg1*reg8; reg3=reg6*reg3; reg5=reg6*reg5;
    reg25=reg20+reg25; reg7=reg0+reg7; reg27=reg21+reg27; T reg28=reg11*reg10; T reg29=reg13*reg12;
    reg22=reg24-reg22; reg4=reg1*reg4; reg23=reg26-reg23; reg17=reg16+reg17; reg24=elem.pos(2)[0]-elem.pos(0)[0];
    reg26=elem.pos(1)[0]-elem.pos(0)[0]; reg19=reg19-reg0; reg18=reg0+reg18; reg4=reg4-reg16; reg20=reg20-reg3;
    reg5=reg5+reg3; reg0=elem.pos(3)[0]-elem.pos(0)[0]; T reg30=reg6*reg17; T reg31=reg23*reg26; T reg32=reg24*reg22;
    T reg33=reg1*reg7; reg28=reg29-reg28; reg8=reg16+reg8; reg9=reg1*reg9; reg25=reg27+reg25;
    reg2=reg1*reg2; reg20=reg1*reg20; reg9=reg9+reg27; reg30=reg33+reg30; reg16=reg1*reg18;
    reg29=reg6*reg5; reg33=reg6*reg8; T reg34=reg1*reg19; reg5=reg1*reg5; reg27=reg2-reg27;
    reg2=reg1*reg4; T reg35=reg3+reg21; T reg36=reg6*reg7; reg25=reg6*reg25; T reg37=reg0*reg10;
    T reg38=reg13*reg0; T reg39=reg15*reg26; reg32=reg31-reg32; reg31=reg24*reg15; T reg40=reg0*reg28;
    reg29=reg20-reg29; reg37=reg39-reg37; reg25=reg5+reg25; reg5=reg1*reg35; reg20=reg0*reg12;
    reg39=reg14*reg26; reg35=reg6*reg35; T reg41=reg13*reg26; reg27=reg1*reg27; reg1=reg11*reg0;
    reg36=reg34-reg36; reg34=reg6*reg18; T reg42=reg24*reg10; reg40=reg32+reg40; reg30=reg2-reg30;
    reg2=reg24*reg14; reg9=reg6*reg9; reg16=reg33+reg16; reg38=reg31-reg38; reg35=reg29-reg35;
    reg25=reg27-reg25; reg23=reg23/reg40; reg22=reg22/reg40; reg1=reg2-reg1; reg38=reg38/reg40;
    reg37=reg37/reg40; reg5=reg9+reg5; reg20=reg39-reg20; reg34=reg36-reg34; reg2=reg11*reg26;
    reg42=reg41-reg42; reg6=reg24*reg12; reg16=reg30-reg16; reg1=reg1/reg40; reg9=reg38-reg37;
    reg27=reg22-reg23; reg5=reg25-reg5; reg20=reg20/reg40; reg28=reg28/reg40; reg42=reg42/reg40;
    reg6=reg2-reg6; reg2=reg35*reg16; reg25=pow(reg34,2); reg5=reg5/reg34; reg29=reg20-reg1;
    reg9=reg42+reg9; reg2=reg2/reg25; reg27=reg27-reg28; reg30=reg19*reg16; reg6=reg6/reg40;
    reg31=0.5*reg27; reg32=reg18*reg16; reg33=0.5*reg9; reg4=reg4/reg34; reg29=reg29-reg6;
    reg2=reg5-reg2; reg16=reg7*reg16; reg30=reg30/reg25; reg17=reg17/reg34; reg8=reg8/reg34;
    reg5=reg31*reg2; reg36=reg33*reg2; reg16=reg16/reg25; reg39=0.5*reg29; reg30=reg4-reg30;
    reg25=reg32/reg25; reg5=2*reg5; reg36=2*reg36; reg25=reg8-reg25; reg4=reg27*reg30;
    reg16=reg17-reg16; reg8=reg9*reg30; reg17=0.5*reg38; reg32=0.5*reg23; reg41=0.5*reg37;
    T reg43=0.5*reg28; T reg44=reg39*reg2; T reg45=0.5*reg42; T reg46=0.5*reg22; T reg47=reg27*reg4;
    T reg48=reg42*reg8; reg44=2*reg44; T reg49=reg9*reg16; T reg50=reg36*reg45; T reg51=reg36*reg17;
    T reg52=reg28*reg4; T reg53=reg23*reg4; T reg54=0.5*reg1; T reg55=0.5*reg6; T reg56=reg5*reg43;
    T reg57=0.5*reg20; T reg58=reg37*reg8; T reg59=reg5*reg46; reg4=reg22*reg4; T reg60=reg17*reg2;
    T reg61=reg36*reg41; T reg62=reg29*reg30; T reg63=reg36*reg33; T reg64=reg27*reg16; T reg65=reg9*reg25;
    T reg66=reg5*reg31; T reg67=reg38*reg8; reg8=reg9*reg8; T reg68=reg5*reg32; T reg69=reg29*reg62;
    T reg70=reg23*reg30; reg8=reg8+reg66; T reg71=reg54*reg2; T reg72=reg36*reg46; T reg73=reg6*reg62;
    T reg74=reg45*reg44; T reg75=reg6*reg65; T reg76=reg5*reg33; T reg77=reg1*reg62; T reg78=reg20*reg64;
    reg60=2*reg60; reg4=reg61-reg4; T reg79=reg57*reg44; T reg80=reg5*reg41; T reg81=reg22*reg49;
    T reg82=reg33*reg44; T reg83=reg29*reg65; T reg84=reg42*reg64; T reg85=reg31*reg44; reg53=reg53-reg51;
    T reg86=reg36*reg43; T reg87=reg5*reg17; T reg88=reg23*reg49; T reg89=reg29*reg64; reg48=reg56-reg48;
    T reg90=reg54*reg44; T reg91=reg6*reg64; T reg92=reg37*reg64; T reg93=reg39*reg44; T reg94=reg20*reg65;
    reg58=reg58-reg59; reg47=reg47+reg63; T reg95=reg32*reg2; T reg96=reg27*reg49; reg67=reg68-reg67;
    reg52=reg52-reg50; T reg97=reg55*reg44; reg62=reg20*reg62; T reg98=reg29*reg25; T reg99=reg36*reg32;
    reg49=reg28*reg49; T reg100=reg5*reg45; T reg101=reg38*reg64; T reg102=reg46*reg44; T reg103=reg43*reg44;
    T reg104=reg1*reg64; T reg105=reg32*reg44; reg64=reg9*reg64; T reg106=reg36*reg31; reg65=reg1*reg65;
    T reg107=reg17*reg44; reg44=reg41*reg44; reg106=reg64+reg106; reg102=reg78+reg102; reg64=reg38*reg30;
    reg78=reg36*reg55; T reg108=reg42*reg98; reg85=reg89+reg85; reg8=reg93+reg8; reg89=reg27*reg98;
    reg48=reg97+reg48; reg73=reg56+reg73; reg69=reg66+reg69; reg56=reg23*reg16; reg95=2*reg95;
    reg82=reg83+reg82; reg84=reg86-reg84; reg94=reg44-reg94; reg44=reg9*reg98; reg66=reg36*reg39;
    reg83=reg5*reg39; reg86=reg22*reg98; reg97=reg52+reg97; reg81=reg80-reg81; reg52=reg36*reg57;
    reg100=reg49-reg100; reg49=reg5*reg55; reg67=reg90+reg67; reg36=reg36*reg54; reg80=reg38*reg98;
    reg4=reg4-reg79; reg74=reg75-reg74; reg75=reg28*reg98; T reg109=reg70*reg27; T reg110=reg70*reg28;
    T reg111=reg60*reg45; T reg112=reg37*reg98; reg79=reg58-reg79; reg72=reg92-reg72; reg103=reg91+reg103;
    reg96=reg76+reg96; reg105=reg104+reg105; reg107=reg65-reg107; reg90=reg53+reg90; reg87=reg88-reg87;
    reg98=reg23*reg98; reg62=reg59+reg62; reg53=reg60*reg33; reg93=reg47+reg93; reg47=reg5*reg57;
    reg71=2*reg71; reg58=reg70*reg23; reg77=reg68+reg77; reg59=reg60*reg17; reg101=reg99-reg101;
    reg5=reg5*reg54; reg70=reg70*reg22; reg65=reg60*reg41; reg86=reg47+reg86; reg47=reg43*reg95;
    reg107=reg40*reg107; reg68=reg29*reg56; reg69=reg63+reg69; reg63=reg1*reg56; reg81=reg40*reg81;
    reg76=reg42*reg64; reg85=reg40*reg85; reg88=reg32*reg71; reg91=reg43*reg71; reg92=reg6*reg56;
    reg50=reg73-reg50; reg4=reg40*reg4; reg70=reg65+reg70; reg74=reg40*reg74; reg73=reg46*reg71;
    reg82=reg40*reg82; reg99=reg57*reg71; reg90=reg40*reg90; reg87=reg40*reg87; reg98=reg5+reg98;
    reg58=reg58+reg59; reg102=reg40*reg102; reg5=reg54*reg71; reg104=reg46*reg95; reg94=reg40*reg94;
    T reg113=reg37*reg64; T reg114=reg60*reg46; T reg115=reg37*reg56; reg52=reg112-reg52; reg101=reg40*reg101;
    reg67=reg40*reg67; reg62=reg61-reg62; reg80=reg36-reg80; reg36=reg38*reg56; reg61=reg60*reg32;
    reg112=reg32*reg95; T reg116=reg38*reg64; reg79=reg40*reg79; reg72=reg40*reg72; reg103=reg40*reg103;
    T reg117=reg1*reg30; T reg118=reg20*reg56; T reg119=reg38*reg25; T reg120=reg31*reg71; reg105=reg40*reg105;
    reg96=reg40*reg96; T reg121=reg38*reg16; T reg122=reg55*reg71; reg110=reg110+reg111; reg64=reg9*reg64;
    T reg123=reg31*reg95; T reg124=reg60*reg31; T reg125=reg9*reg56; reg100=reg40*reg100; reg66=reg44+reg66;
    reg97=reg40*reg97; reg8=reg40*reg8; reg106=reg40*reg106; reg51=reg77-reg51; reg109=reg109-reg53;
    reg93=reg40*reg93; reg75=reg49+reg75; reg84=reg40*reg84; reg89=reg83+reg89; reg48=reg40*reg48;
    reg44=reg39*reg71; reg108=reg78-reg108; reg56=reg42*reg56; reg49=reg60*reg43; reg77=reg41*reg2;
    reg91=reg92+reg91; reg52=reg40*reg52; reg114=reg115+reg114; reg109=reg109+reg44; reg50=reg40*reg50;
    reg113=reg113+reg104; reg78=reg17*reg95; reg83=reg23*reg121; reg58=reg58+reg5; reg89=reg40*reg89;
    reg98=reg40*reg98; reg74=ponderation*reg74; reg103=ponderation*reg103; reg87=ponderation*reg87; reg93=ponderation*reg93;
    reg92=reg22*reg30; reg77=2*reg77; reg84=ponderation*reg84; reg90=ponderation*reg90; reg4=ponderation*reg4;
    reg48=ponderation*reg48; reg115=reg1*reg25; reg81=ponderation*reg81; reg102=ponderation*reg102; reg108=reg40*reg108;
    reg86=reg40*reg86; reg51=reg40*reg51; reg107=ponderation*reg107; reg105=ponderation*reg105; T reg126=reg45*reg95;
    T reg127=reg46*reg2; T reg128=reg28*reg121; reg88=reg63+reg88; reg96=ponderation*reg96; reg63=reg1*reg119;
    T reg129=reg27*reg121; reg72=ponderation*reg72; reg79=ponderation*reg79; reg110=reg110+reg122; reg116=reg112+reg116;
    T reg130=reg17*reg71; T reg131=reg1*reg117; reg61=reg36+reg61; reg75=reg40*reg75; reg36=reg6*reg117;
    reg121=reg22*reg121; reg80=reg40*reg80; reg67=ponderation*reg67; T reg132=reg57*reg2; reg100=ponderation*reg100;
    T reg133=reg41*reg95; reg70=reg70+reg99; T reg134=reg45*reg71; reg101=ponderation*reg101; reg97=ponderation*reg97;
    T reg135=reg6*reg119; reg76=reg47+reg76; reg62=reg40*reg62; T reg136=reg20*reg117; reg117=reg29*reg117;
    T reg137=reg29*reg119; T reg138=reg33*reg71; reg119=reg20*reg119; reg71=reg41*reg71; reg120=reg68+reg120;
    reg73=reg118+reg73; reg64=reg123-reg64; reg85=ponderation*reg85; reg124=reg125-reg124; reg66=reg40*reg66;
    reg82=ponderation*reg82; reg8=ponderation*reg8; reg106=ponderation*reg106; reg69=reg40*reg69; reg56=reg49+reg56;
    reg94=ponderation*reg94; reg49=reg33*reg95; reg75=ponderation*reg75; reg56=reg40*reg56; reg61=reg40*reg61;
    reg105=vectors[0][indices[0]+0]*reg105; reg107=vectors[0][indices[0]+1]*reg107; reg116=reg5+reg116; reg5=reg115*reg38; reg68=reg60*reg54;
    reg73=reg40*reg73; reg84=vectors[0][indices[0]+0]*reg84; reg48=vectors[0][indices[0]+1]*reg48; reg129=reg49-reg129; reg96=vectors[0][indices[0]+1]*reg96;
    reg49=reg77*reg33; reg118=reg115*reg27; reg80=ponderation*reg80; reg124=reg40*reg124; reg125=reg60*reg39;
    reg132=2*reg132; T reg139=reg115*reg9; reg66=ponderation*reg66; reg100=vectors[0][indices[0]+1]*reg100; reg97=vectors[0][indices[0]+0]*reg97;
    reg86=ponderation*reg86; reg127=2*reg127; reg52=ponderation*reg52; T reg140=reg39*reg95; reg106=vectors[0][indices[0]+0]*reg106;
    reg8=vectors[0][indices[0]+1]*reg8; reg91=reg40*reg91; reg134=reg135+reg134; reg70=reg40*reg70; reg135=reg37*reg30;
    reg121=reg133+reg121; reg133=reg115*reg22; T reg141=reg57*reg95; reg131=reg112+reg131; reg130=reg63+reg130;
    reg50=ponderation*reg50; reg88=reg40*reg88; reg136=reg104+reg136; reg51=ponderation*reg51; reg64=reg44+reg64;
    reg103=vectors[0][indices[0]+0]*reg103; reg44=reg55*reg95; reg74=vectors[0][indices[0]+1]*reg74; reg63=reg115*reg28; reg126=reg128+reg126;
    reg81=vectors[0][indices[0]+1]*reg81; reg4=vectors[0][indices[0]+0]*reg4; reg104=reg92*reg28; reg36=reg47+reg36; reg47=reg77*reg41;
    reg112=reg92*reg22; reg128=reg77*reg45; reg110=reg40*reg110; reg119=reg71+reg119; reg71=reg92*reg27;
    reg93=vectors[0][indices[0]+0]*reg93; T reg142=reg22*reg16; T reg143=reg77*reg17; reg92=reg92*reg23; reg95=reg54*reg95;
    T reg144=reg115*reg23; reg78=reg83+reg78; reg120=reg40*reg120; reg58=reg40*reg58; reg89=ponderation*reg89;
    reg79=vectors[0][indices[0]+1]*reg79; reg98=ponderation*reg98; reg137=reg138-reg137; reg117=reg123+reg117; reg62=ponderation*reg62;
    reg94=vectors[0][indices[0]+1]*reg94; reg83=vectors[0][indices[0]+0]*reg102; reg90=vectors[0][indices[0]+0]*reg90; reg87=vectors[0][indices[0]+1]*reg87; reg123=reg60*reg55;
    reg138=reg115*reg42; reg76=reg122+reg76; reg101=vectors[0][indices[0]+0]*reg101; reg67=vectors[0][indices[0]+1]*reg67; reg108=ponderation*reg108;
    reg85=vectors[0][indices[0]+0]*reg85; reg82=vectors[0][indices[0]+1]*reg82; reg113=reg99+reg113; reg115=reg115*reg37; reg72=vectors[0][indices[0]+0]*reg72;
    reg109=reg40*reg109; reg60=reg60*reg57; reg69=ponderation*reg69; reg114=reg40*reg114; reg70=ponderation*reg70;
    reg123=reg138+reg123; reg99=reg132*reg46; reg121=reg40*reg121; reg122=reg132*reg32; reg138=reg1*reg142;
    T reg145=reg42*reg142; T reg146=reg77*reg43; reg131=reg59+reg131; reg59=reg20*reg142; reg141=reg133+reg141;
    reg130=reg40*reg130; reg133=reg37*reg135; T reg147=reg132*reg31; reg136=reg65+reg136; reg88=ponderation*reg88;
    reg65=reg20*reg30; T reg148=reg37*reg25; reg62=vectors[0][indices[0]+2]*reg62; reg113=reg40*reg113; reg44=reg63+reg44;
    reg83=reg94-reg83; reg53=reg117-reg53; reg63=vectors[0][indices[0]+2]*reg86; reg80=vectors[0][indices[0]+2]*reg80; reg67=reg101+reg67;
    reg56=ponderation*reg56; reg94=reg77*reg31; reg66=vectors[0][indices[0]+2]*reg66; reg8=reg106+reg8; reg101=reg127*reg46;
    reg104=reg104+reg128; reg114=ponderation*reg114; reg106=reg9*reg142; reg76=reg40*reg76; reg50=vectors[0][indices[0]+2]*reg50;
    reg74=reg103+reg74; reg64=reg40*reg64; reg125=reg139-reg125; reg140=reg118+reg140; reg98=vectors[0][indices[0]+2]*reg98;
    reg103=reg9*reg135; reg87=reg90+reg87; reg91=ponderation*reg91; reg90=reg132*reg55; reg117=reg127*reg31;
    reg118=reg29*reg142; reg129=reg40*reg129; reg134=reg40*reg134; reg58=ponderation*reg58; reg139=reg39*reg132;
    reg73=ponderation*reg73; reg96=reg93+reg96; reg78=reg40*reg78; reg108=vectors[0][indices[0]+2]*reg108; reg93=reg38*reg135;
    T reg149=reg127*reg32; reg89=vectors[0][indices[0]+2]*reg89; reg48=reg84+reg48; reg84=reg127*reg43; T reg150=reg38*reg142;
    T reg151=reg77*reg32; reg60=reg115+reg60; reg68=reg5+reg68; reg95=reg144+reg95; reg135=reg42*reg135;
    reg51=vectors[0][indices[0]+2]*reg51; reg116=reg40*reg116; reg107=reg105+reg107; reg71=reg49-reg71; reg100=reg97+reg100;
    reg61=ponderation*reg61; reg92=reg92+reg143; reg5=reg132*reg54; reg97=reg77*reg46; reg105=reg37*reg142;
    reg124=ponderation*reg124; reg75=vectors[0][indices[0]+2]*reg75; reg115=reg45*reg2; reg52=vectors[0][indices[0]+2]*reg52; reg126=reg40*reg126;
    reg81=reg4+reg81; reg79=reg72+reg79; reg4=reg37*reg16; reg137=reg40*reg137; reg36=reg111+reg36;
    reg142=reg6*reg142; reg72=reg132*reg43; reg82=reg85+reg82; reg112=reg47+reg112; reg85=reg132*reg57;
    reg69=vectors[0][indices[0]+2]*reg69; reg120=ponderation*reg120; reg119=reg40*reg119; reg109=ponderation*reg109; reg110=ponderation*reg110;
    reg112=reg112+reg85; reg76=ponderation*reg76; reg111=reg127*reg45; reg144=reg28*reg4; reg126=ponderation*reg126;
    T reg152=reg132*reg41; reg104=reg104+reg90; reg97=reg105+reg97; reg105=reg20*reg65; T reg153=reg20*reg148;
    reg99=reg59+reg99; reg123=reg40*reg123; reg113=ponderation*reg113; reg119=ponderation*reg119; reg135=reg84+reg135;
    reg141=reg40*reg141; reg136=reg40*reg136; reg146=reg145+reg146; reg121=ponderation*reg121; reg59=reg22*reg4;
    reg60=reg40*reg60; reg145=reg127*reg41; reg44=reg40*reg44; T reg154=reg55*reg2; reg124=vectors[0][indices[1]+0]*reg124;
    reg66=reg8+reg66; reg103=reg103-reg117; reg115=2*reg115; reg80=reg67+reg80; reg8=reg28*reg30;
    reg109=vectors[0][indices[1]+0]*reg109; reg89=reg96+reg89; reg116=ponderation*reg116; reg68=reg40*reg68; reg150=reg151+reg150;
    reg67=reg29*reg65; reg93=reg149+reg93; reg71=reg71-reg139; reg75=reg100+reg75; reg110=vectors[0][indices[1]+0]*reg110;
    reg96=vectors[0][indices[1]+0]*reg61; reg120=vectors[0][indices[1]+0]*reg120; reg114=vectors[0][indices[1]+0]*reg114; reg52=reg79+reg52; reg78=ponderation*reg78;
    reg95=reg40*reg95; reg64=ponderation*reg64; reg125=reg40*reg125; reg92=reg92+reg5; reg69=reg82+reg69;
    reg133=reg133+reg101; reg79=reg23*reg4; reg82=reg127*reg17; reg83=reg62+reg83; reg62=vectors[0][indices[1]+0]*reg73;
    reg98=reg87+reg98; reg58=vectors[0][indices[1]+0]*reg58; reg106=reg94-reg106; reg140=reg40*reg140; reg51=reg107+reg51;
    reg131=reg40*reg131; reg130=ponderation*reg130; reg36=reg40*reg36; reg87=reg127*reg33; reg63=reg81-reg63;
    reg72=reg142+reg72; reg122=reg138+reg122; reg137=ponderation*reg137; reg81=reg6*reg148; reg88=vectors[0][indices[1]+0]*reg88;
    reg94=reg20*reg25; reg100=reg132*reg45; reg129=ponderation*reg129; reg53=reg40*reg53; reg107=reg1*reg148;
    reg138=reg1*reg65; reg2=reg43*reg2; reg108=reg48+reg108; reg48=vectors[0][indices[1]+0]*reg56; reg142=reg33*reg132;
    reg4=reg4*reg27; reg148=reg29*reg148; reg134=ponderation*reg134; reg151=vectors[0][indices[1]+0]*reg70; reg132=reg132*reg17;
    reg50=reg74+reg50; reg147=reg118+reg147; reg91=vectors[0][indices[1]+0]*reg91; reg65=reg6*reg65; reg125=ponderation*reg125;
    reg74=reg28*reg16; reg105=reg101+reg105; reg121=vectors[0][indices[1]+1]*reg121; reg106=reg40*reg106; reg153=reg152+reg153;
    reg136=ponderation*reg136; reg101=reg94*reg9; reg139=reg103-reg139; reg103=reg77*reg39; reg99=reg40*reg99;
    reg151=reg63-reg151; reg63=reg28*reg8; reg118=reg115*reg45; reg152=reg127*reg55; T reg155=reg94*reg28;
    reg111=reg144+reg111; reg87=reg4-reg87; reg104=reg40*reg104; reg4=vectors[0][indices[1]+1]*reg134; reg91=reg50+reg91;
    reg44=ponderation*reg44; reg48=reg108-reg48; reg71=reg40*reg71; reg76=vectors[0][indices[1]+1]*reg76; reg2=2*reg2;
    reg50=vectors[0][indices[1]+1]*reg126; reg110=reg75+reg110; reg75=reg94*reg27; reg108=reg127*reg39; reg144=reg27*reg8;
    T reg156=reg33*reg115; reg154=2*reg154; reg140=ponderation*reg140; T reg157=reg22*reg8; reg62=reg83-reg62;
    reg119=vectors[0][indices[1]+1]*reg119; reg85=reg133+reg85; reg83=vectors[0][indices[1]+1]*reg113; reg133=reg94*reg37; T reg158=reg77*reg57;
    reg114=reg52+reg114; reg60=ponderation*reg60; reg82=reg79+reg82; reg52=reg94*reg23; reg79=reg127*reg54;
    reg8=reg23*reg8; T reg159=reg115*reg17; reg64=vectors[0][indices[1]+1]*reg64; reg124=reg66+reg124; reg129=reg129*vectors[0][indices[1]+1];
    reg109=reg89+reg109; reg68=ponderation*reg68; reg150=reg40*reg150; reg93=reg5+reg93; reg5=reg94*reg38;
    reg66=reg77*reg54; reg89=reg94*reg42; reg77=reg77*reg55; T reg160=reg115*reg41; reg127=reg127*reg57;
    reg94=reg94*reg22; reg65=reg84+reg65; reg59=reg145+reg59; reg100=reg81+reg100; reg112=reg40*reg112;
    reg72=reg40*reg72; reg36=ponderation*reg36; reg141=ponderation*reg141; reg131=ponderation*reg131; reg122=reg40*reg122;
    reg132=reg107+reg132; reg138=reg149+reg138; reg81=reg42*reg30; reg84=vectors[0][indices[1]+1]*reg130; reg88=reg51+reg88;
    reg53=ponderation*reg53; reg147=reg40*reg147; reg96=reg80-reg96; reg142=reg148-reg142; reg116=vectors[0][indices[1]+1]*reg116;
    reg67=reg117+reg67; reg51=vectors[0][indices[1]+1]*reg78; reg58=reg98+reg58; reg123=ponderation*reg123; reg137=vectors[0][indices[1]+1]*reg137;
    reg92=reg40*reg92; reg95=ponderation*reg95; reg120=reg69+reg120; reg146=reg40*reg146; reg135=reg90+reg135;
    reg97=reg40*reg97; reg69=vectors[0][indices[1]+2]*reg123; reg65=reg128+reg65; reg151=reg121+reg151; reg146=ponderation*reg146;
    reg125=vectors[0][indices[1]+2]*reg125; reg100=reg40*reg100; reg72=ponderation*reg72; reg36=vectors[0][indices[1]+2]*reg36; reg4=reg91-reg4;
    reg96=reg116+reg96; reg80=vectors[0][indices[1]+2]*reg68; reg60=vectors[0][indices[1]+2]*reg60; reg90=reg154*reg55; reg83=reg114-reg83;
    reg84=reg88-reg84; reg63=reg63+reg118; reg131=vectors[0][indices[1]+2]*reg131; reg129=reg109+reg129; reg140=vectors[0][indices[1]+2]*reg140;
    reg62=reg119+reg62; reg88=vectors[0][indices[1]+2]*reg136; reg137=reg120+reg137; reg53=vectors[0][indices[1]+2]*reg53; reg91=vectors[0][indices[1]+2]*reg141;
    reg98=reg154*reg43; reg107=reg6*reg74; reg44=vectors[0][indices[1]+2]*reg44; reg50=reg110-reg50; reg135=reg40*reg135;
    reg95=vectors[0][indices[1]+2]*reg95; reg51=reg58-reg51; reg77=reg89+reg77; reg58=reg115*reg43; reg89=reg42*reg74;
    reg64=reg124+reg64; reg109=reg2*reg43; reg110=reg42*reg81; reg48=reg76+reg48; reg76=reg2*reg32;
    reg114=reg38*reg74; reg116=reg115*reg32; reg117=reg39*reg154; reg92=ponderation*reg92; reg97=ponderation*reg97;
    reg119=reg37*reg74; reg120=reg115*reg46; reg121=reg37*reg81; reg124=reg2*reg46; reg82=reg40*reg82;
    reg71=ponderation*reg71; reg79=reg52+reg79; reg52=reg2*reg31; reg99=ponderation*reg99; reg153=reg40*reg153;
    reg144=reg144-reg156; reg139=reg40*reg139; reg128=reg154*reg32; reg145=reg1*reg74; reg101=reg103-reg101;
    reg106=ponderation*reg106; reg138=reg143+reg138; reg16=reg42*reg16; reg132=reg40*reg132; reg122=ponderation*reg122;
    reg112=ponderation*reg112; reg59=reg40*reg59; reg127=reg94+reg127; reg94=reg9*reg74; reg103=reg115*reg31;
    reg30=reg6*reg30; reg108=reg75+reg108; reg75=reg38*reg81; reg143=reg42*reg25; reg87=reg87*reg40;
    reg85=reg40*reg85; reg67=reg49-reg67; reg147=ponderation*reg147; reg104=ponderation*reg104; reg49=reg154*reg57;
    reg8=reg8+reg159; reg111=reg40*reg111; reg148=reg29*reg74; reg157=reg157+reg160; reg150=ponderation*reg150;
    reg149=reg154*reg31; reg158=reg133+reg158; reg93=reg40*reg93; reg142=reg40*reg142; reg152=reg155+reg152;
    reg133=reg154*reg54; reg155=reg154*reg46; reg74=reg20*reg74; reg81=reg9*reg81; reg66=reg5+reg66;
    reg105=reg47+reg105; reg85=ponderation*reg85; reg108=reg40*reg108; reg112=vectors[0][indices[2]+0]*reg112; reg5=reg2*reg41;
    reg25=reg6*reg25; reg47=reg22*reg16; reg106=vectors[0][indices[2]+0]*reg106; reg125=reg64+reg125; reg64=vectors[0][indices[2]+0]*reg97;
    reg83=reg60+reg83; reg132=ponderation*reg132; reg138=reg40*reg138; reg60=reg2*reg17; T reg161=reg23*reg16;
    reg128=reg145+reg128; reg8=reg8+reg133; reg79=reg40*reg79; reg99=vectors[0][indices[2]+0]*reg99; reg93=ponderation*reg93;
    reg145=reg6*reg30; reg88=reg62-reg88; reg82=ponderation*reg82; reg62=reg154*reg45; T reg162=reg6*reg143;
    reg157=reg157+reg49; reg158=reg40*reg158; reg98=reg107+reg98; reg140=reg129+reg140; reg66=reg40*reg66;
    reg91=reg151-reg91; reg65=reg40*reg65; reg71=reg71*vectors[0][indices[2]+0]; reg114=reg116+reg114; reg100=ponderation*reg100;
    reg107=reg29*reg30; reg75=reg76+reg75; reg53=reg137+reg53; reg116=vectors[0][indices[2]+0]*reg147; reg77=reg40*reg77;
    reg129=reg2*reg45; reg144=reg117+reg144; reg135=ponderation*reg135; reg120=reg119+reg120; reg121=reg121+reg124;
    reg80=reg96-reg80; reg96=vectors[0][indices[2]+0]*reg122; reg84=reg131+reg84; reg146=vectors[0][indices[2]+0]*reg146; reg69=reg48-reg69;
    reg153=ponderation*reg153; reg105=reg40*reg105; reg155=reg74+reg155; reg81=reg52-reg81; reg48=reg154*reg41;
    reg74=reg20*reg143; reg150=vectors[0][indices[2]+0]*reg150; reg67=reg40*reg67; reg119=vectors[0][indices[2]+0]*reg72; reg131=reg20*reg30;
    reg142=ponderation*reg142; reg87=ponderation*reg87; reg4=reg36+reg4; reg139=ponderation*reg139; reg36=reg1*reg143;
    reg137=reg154*reg17; reg101=reg40*reg101; reg151=reg27*reg16; reg30=reg1*reg30; T reg163=reg33*reg2;
    reg50=reg44+reg50; reg59=ponderation*reg59; reg44=vectors[0][indices[2]+0]*reg104; reg103=reg94-reg103; reg152=reg40*reg152;
    reg111=ponderation*reg111; reg63=reg63+reg90; reg94=vectors[0][indices[2]+0]*reg92; reg143=reg29*reg143; reg110=reg109+reg110;
    reg51=reg95+reg51; reg127=reg40*reg127; reg154=reg33*reg154; reg149=reg148+reg149; reg89=reg58+reg89;
    reg16=reg28*reg16; reg79=ponderation*reg79; reg81=reg117+reg81; reg58=reg39*reg115; reg80=reg150+reg80;
    reg95=vectors[0][indices[2]+1]*reg93; reg106=reg125+reg106; reg139=vectors[0][indices[2]+1]*reg139; reg117=reg9*reg25; reg158=ponderation*reg158;
    reg125=reg39*reg2; reg67=ponderation*reg67; reg132=vectors[0][indices[2]+1]*reg132; reg96=reg84-reg96; reg94=reg51-reg94;
    reg51=vectors[0][indices[2]+1]*reg59; reg91=reg112+reg91; reg82=vectors[0][indices[2]+1]*reg82; reg107=reg52+reg107; reg149=reg40*reg149;
    reg143=reg154-reg143; reg103=reg40*reg103; reg142=vectors[0][indices[2]+1]*reg142; reg116=reg53-reg116; reg101=ponderation*reg101;
    reg128=reg40*reg128; reg137=reg36+reg137; reg151=reg163-reg151; reg30=reg76+reg30; reg111=vectors[0][indices[2]+1]*reg111;
    reg44=reg50-reg44; reg36=reg115*reg55; reg50=reg42*reg25; reg110=reg90+reg110; reg127=ponderation*reg127;
    reg89=reg40*reg89; reg144=reg40*reg144; reg52=reg22*reg25; reg77=ponderation*reg77; reg53=reg2*reg57;
    reg120=reg40*reg120; reg152=ponderation*reg152; reg63=reg40*reg63; reg129=reg16+reg129; reg119=reg4-reg119;
    reg4=reg28*reg25; reg16=reg2*reg55; reg100=vectors[0][indices[2]+1]*reg100; reg131=reg124+reg131; reg74=reg48+reg74;
    reg48=vectors[0][indices[2]+1]*reg135; reg155=reg40*reg155; reg105=ponderation*reg105; reg69=reg146+reg69; reg76=reg115*reg57;
    reg84=reg37*reg25; reg121=reg49+reg121; reg87=reg87*vectors[0][indices[2]+1]; reg71=reg140+reg71; reg157=reg40*reg157;
    reg49=reg23*reg25; reg2=reg2*reg54; reg47=reg5+reg47; reg64=reg83-reg64; reg108=ponderation*reg108;
    reg145=reg109+reg145; reg88=reg99+reg88; reg62=reg162+reg62; reg5=vectors[0][indices[2]+1]*reg153; reg98=reg40*reg98;
    reg85=vectors[0][indices[2]+1]*reg85; reg66=ponderation*reg66; reg65=ponderation*reg65; reg60=reg161+reg60; reg138=ponderation*reg138;
    reg114=reg40*reg114; reg83=reg27*reg25; reg75=reg133+reg75; reg115=reg115*reg54; reg25=reg38*reg25;
    reg8=reg40*reg8; reg48=reg69-reg48; reg58=reg117-reg58; reg157=ponderation*reg157; reg69=vectors[0][indices[2]+2]*reg158;
    reg64=reg85+reg64; reg81=reg40*reg81; reg47=reg40*reg47; reg85=vectors[0][indices[2]+2]*reg65; reg119=reg100+reg119;
    reg77=vectors[0][indices[2]+2]*reg77; reg103=ponderation*reg103; reg125=reg83+reg125; reg51=reg91-reg51; reg127=vectors[0][indices[2]+2]*reg127;
    reg96=reg132+reg96; reg83=vectors[0][indices[2]+2]*reg138; reg144=ponderation*reg144; reg90=vectors[0][indices[2]+2]*reg152; reg44=reg111+reg44;
    reg105=vectors[0][indices[2]+2]*reg105; reg5=reg88-reg5; reg151=reg40*reg151; reg149=ponderation*reg149; reg2=reg49+reg2;
    reg121=reg40*reg121; reg120=ponderation*reg120; reg53=reg52+reg53; reg89=ponderation*reg89; reg143=reg40*reg143;
    reg145=reg118+reg145; reg110=reg40*reg110; reg62=reg40*reg62; reg36=reg50+reg36; reg98=ponderation*reg98;
    reg114=ponderation*reg114; reg30=reg159+reg30; reg67=vectors[0][indices[2]+2]*reg67; reg116=reg142+reg116; reg156=reg107-reg156;
    reg75=reg40*reg75; reg137=reg40*reg137; reg128=ponderation*reg128; reg115=reg25+reg115; reg63=ponderation*reg63;
    reg129=reg40*reg129; reg16=reg4+reg16; reg4=vectors[0][indices[2]+2]*reg108; reg95=reg80-reg95; reg66=vectors[0][indices[2]+2]*reg66;
    reg87=reg71+reg87; reg131=reg160+reg131; reg60=reg40*reg60; reg94=reg82+reg94; reg25=vectors[0][indices[2]+2]*reg79;
    reg101=vectors[0][indices[2]+2]*reg101; reg76=reg84+reg76; reg139=reg106+reg139; reg155=ponderation*reg155; reg74=reg40*reg74;
    reg8=ponderation*reg8; reg145=reg40*reg145; reg2=reg40*reg2; reg60=ponderation*reg60; reg144=vectors[0][indices[3]+0]*reg144;
    reg62=ponderation*reg62; reg4=reg87-reg4; reg5=reg105+reg5; reg49=vectors[0][indices[3]+0]*reg155; reg69=reg64-reg69;
    reg85=reg119-reg85; reg98=vectors[0][indices[3]+0]*reg98; reg129=ponderation*reg129; reg16=reg40*reg16; reg131=reg40*reg131;
    reg50=vectors[0][indices[3]+0]*reg89; reg48=reg77+reg48; reg74=ponderation*reg74; reg76=reg40*reg76; reg121=ponderation*reg121;
    reg53=reg40*reg53; reg47=ponderation*reg47; reg90=reg44-reg90; reg63=vectors[0][indices[3]+0]*reg63; reg110=ponderation*reg110;
    reg36=reg40*reg36; reg30=reg40*reg30; reg137=ponderation*reg137; reg151=ponderation*reg151; reg115=reg40*reg115;
    reg75=ponderation*reg75; reg81=ponderation*reg81; reg95=reg66+reg95; reg58=reg40*reg58; reg25=reg94-reg25;
    reg8=vectors[0][indices[3]+0]*reg8; reg128=vectors[0][indices[3]+0]*reg128; reg83=reg96-reg83; reg143=ponderation*reg143; reg44=vectors[0][indices[3]+0]*reg114;
    reg149=vectors[0][indices[3]+0]*reg149; reg67=reg116+reg67; reg156=reg40*reg156; reg51=reg127+reg51; reg52=vectors[0][indices[3]+0]*reg157;
    reg125=reg40*reg125; reg120=vectors[0][indices[3]+0]*reg120; reg101=reg139+reg101; reg103=vectors[0][indices[3]+0]*reg103; reg149=reg67+reg149;
    reg143=vectors[0][indices[3]+1]*reg143; reg151=vectors[0][indices[3]+1]*reg151; reg90=reg63+reg90; reg63=vectors[0][indices[3]+1]*reg129; reg75=vectors[0][indices[3]+1]*reg75;
    reg44=reg95-reg44; reg64=vectors[0][indices[3]+1]*reg137; reg53=ponderation*reg53; reg83=reg128+reg83; reg4=reg144+reg4;
    reg25=reg8+reg25; reg76=ponderation*reg76; reg8=vectors[0][indices[3]+1]*reg60; reg58=ponderation*reg58; reg110=vectors[0][indices[3]+1]*reg110;
    reg50=reg48-reg50; reg48=vectors[0][indices[3]+1]*reg121; reg69=reg120+reg69; reg16=ponderation*reg16; reg131=ponderation*reg131;
    reg103=reg101+reg103; reg81=vectors[0][indices[3]+1]*reg81; reg145=ponderation*reg145; reg125=ponderation*reg125; reg52=reg51-reg52;
    reg74=vectors[0][indices[3]+1]*reg74; reg49=reg5-reg49; reg47=vectors[0][indices[3]+1]*reg47; reg5=vectors[0][indices[3]+1]*reg62; reg2=ponderation*reg2;
    reg115=ponderation*reg115; reg36=ponderation*reg36; reg30=ponderation*reg30; reg85=reg98+reg85; reg156=ponderation*reg156;
    reg81=reg103+reg81; reg125=vectors[0][indices[3]+2]*reg125; reg51=vectors[0][indices[3]+2]*reg115; reg145=vectors[0][indices[3]+2]*reg145; reg66=vectors[0][indices[3]+2]*reg36;
    reg50=reg110+reg50; reg143=reg149+reg143; reg67=vectors[0][indices[3]+2]*reg53; reg52=reg47+reg52; reg44=reg75+reg44;
    reg8=reg25-reg8; reg2=vectors[0][indices[3]+2]*reg2; reg156=vectors[0][indices[3]+2]*reg156; reg151=reg4+reg151; reg5=reg85-reg5;
    reg76=vectors[0][indices[3]+2]*reg76; reg48=reg69-reg48; reg49=reg74+reg49; reg4=vectors[0][indices[3]+2]*reg131; reg16=vectors[0][indices[3]+2]*reg16;
    reg30=vectors[0][indices[3]+2]*reg30; reg64=reg83-reg64; reg63=reg90-reg63; reg58=vectors[0][indices[3]+2]*reg58; reg5=reg145+reg5;
    reg51=reg44-reg51; reg48=reg76+reg48; reg125=reg151+reg125; reg66=reg50-reg66; reg8=reg2+reg8;
    reg64=reg30+reg64; reg63=reg16+reg63; reg156=reg143+reg156; reg58=reg81+reg58; reg4=reg49-reg4;
    reg67=reg52-reg67; sollicitation[indices[3]+2]+=-reg5; sollicitation[indices[3]+1]+=-reg66; sollicitation[indices[3]+0]+=-reg63; sollicitation[indices[2]+2]+=-reg4;
    sollicitation[indices[2]+1]+=-reg48; sollicitation[indices[2]+0]+=-reg67; sollicitation[indices[1]+2]+=-reg64; sollicitation[indices[1]+1]+=-reg51; sollicitation[indices[1]+0]+=-reg8;
    sollicitation[indices[0]+2]+=-reg156; sollicitation[indices[0]+0]+=-reg125; sollicitation[indices[0]+1]+=-reg58;
  #undef PNODE
}
// 
#ifndef ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
#define ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz>
void add_nodal_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const typename TM::TNode &node,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) node
  /* (*f.m).poisson_ratio */  #undef PNODE
}
#endif
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Tetra,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Triangle,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}

#ifndef elasticity_dep_read_material_to_mesh
#define elasticity_dep_read_material_to_mesh
template<class TM, class T, bool wont_add_nz>
void read_material_to_mesh_(const XmlNode &n, Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f){ 
    if(n.has_attribute("f_vol"))  
        n.get_attribute("f_vol", f.m->f_vol ); 
    else  
        std::cerr << "Warning using default value of f_vol : " << f.m->f_vol << std::endl; 

    if(n.has_attribute("lim_cond_0"))  
        n.get_attribute("lim_cond_0", f.m->lim_cond_0 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_0 : " << f.m->lim_cond_0 << std::endl; 

    if(n.has_attribute("lim_cond_1"))  
        n.get_attribute("lim_cond_1", f.m->lim_cond_1 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_1 : " << f.m->lim_cond_1 << std::endl; 

    if(n.has_attribute("poisson_ratio"))  
        n.get_attribute("poisson_ratio", f.m->poisson_ratio ); 
    else  
        std::cerr << "Warning using default value of poisson_ratio : " << f.m->poisson_ratio << std::endl; 

    if(n.has_attribute("elastic_modulus"))  
        n.get_attribute("elastic_modulus", f.m->elastic_modulus ); 
    else  
        std::cerr << "Warning using default value of elastic_modulus : " << f.m->elastic_modulus << std::endl; 

    if(n.has_attribute("density"))  
        n.get_attribute("density", f.m->density ); 
    else  
        std::cerr << "Warning using default value of density : " << f.m->density << std::endl; 

  };
#endif // elasticity_dep_read_material_to_mesh
} // namespace LMT


#include "formulation/formulation.h"
namespace LMT {
#ifndef ELASTICITY_DEP_3_NUM_0_CARAC_H
#define ELASTICITY_DEP_3_NUM_0_CARAC_H
#ifndef STRUCT_ELASTICITY_DEP
#define STRUCT_ELASTICITY_DEP
struct elasticity_dep {
  static const char *name() { return "elasticity_dep"; }
};
#endif // ELASTICITY_DEP

template<class P_T>
class CaracFormulation<elasticity_dep,3,P_T>  {
public:
  typedef P_T T;
  static const char *name() { return "elasticity_dep"; }
  static const bool matrix_will_be_definite_positive=true;
  static const bool has_nodal_matrix = true;
  static const bool has_IS_contact_matrix=false;
  static const bool need_skin_assembly=false;
  typedef Norm1_is_inf Name_convergence_criterium;
  static const unsigned nb_vectors = 4;
  static const unsigned nb_matrices = 1;
  static const unsigned auto_contact = false;
  static const bool friction_coeff_is_a_nodal_variable = 0;
  static const unsigned offset_of_pos_unknown=3;
  static const unsigned pos_is_an_unknown = false;
  static const unsigned nb_der_var = 1;
  template<class TF> static void add_to_der_vars( TF &f, const Vec<T> &v ) {
      (*f.m).poisson_ratio += v[ 0 ];
  }
  static bool is_unknown(const std::string &s) { return (s=="dep"); }
  static unsigned num_in_vec_unknown(const std::string &s) { if ( s=="dep" )return 0; return 0;  }
  template<unsigned num_mat,unsigned inner=0> struct NodalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  template<unsigned num_mat,unsigned inner=0> struct GlobalMatricesCarac {
      static const bool symm = 1;
      static const bool herm = false;
      static const bool diag = false;
  };
  
  static const unsigned nb_nodal_unknowns = 3;
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
    node.dep[1]=vecs[0][indice+1]; node.dep[0]=vecs[0][indice+0]; node.dep[2]=vecs[0][indice+2];
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
    node.dep[0]=vecs[0][indice+0]; node.dep[2]=vecs[0][indice+2]; node.dep[1]=vecs[0][indice+1];
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
    vecs[0][indice+1]=node.dep[1]; vecs[1][indice+1]=node.dep[1]; vecs[2][indice+1]=node.dep[1]; vecs[3][indice+1]=node.dep[1]; vecs[4][indice+1]=node.dep[1];
    vecs[0][indice+2]=node.dep[2]; vecs[1][indice+2]=node.dep[2]; vecs[2][indice+2]=node.dep[2]; vecs[3][indice+2]=node.dep[2]; vecs[4][indice+2]=node.dep[2];
    vecs[0][indice+0]=node.dep[0]; vecs[1][indice+0]=node.dep[0]; vecs[2][indice+0]=node.dep[0]; vecs[3][indice+0]=node.dep[0]; vecs[4][indice+0]=node.dep[0];
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    T reg0=vecs[1][indice+1]-vecs[0][indice+1]; T reg1=vecs[1][indice+0]-vecs[0][indice+0]; reg0=abs(reg0); reg1=abs(reg1); T reg2=vecs[1][indice+2]-vecs[0][indice+2];
    reg2=abs(reg2); reg1=max(reg0,reg1); return max(reg2,reg1);
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
    old_vec[indice+0]=vecs[1][indice+0]; old_vec[indice+1]=vecs[1][indice+1]; old_vec[indice+2]=vecs[1][indice+2];
  }
  
  static const unsigned nb_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_nodal_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_nodal_unknowns(TE &node,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_nodal_initial_conditions(const TE &node,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_nodal_error(const TE &node,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_nodal(const TE &node,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_global_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_global_unknowns(TE &mesh,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_global_initial_conditions(const TE &mesh,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_global_error(const TE &mesh,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_global(const TE &mesh,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};
#endif // ELASTICITY_DEP_3_NUM_0_CARAC_H
extern "C" void apply_on_elements_after_solve_0_elasticity_dep_Hexa_0( double * );
extern "C" void apply_on_elements_after_solve_1_elasticity_dep_Hexa_1( double * );
extern "C" void apply_on_elements_after_solve_2_elasticity_dep_Hexa_2( double * );
extern "C" void apply_on_elements_after_solve_3_elasticity_dep_Hexa_3( double * );
extern "C" void apply_on_elements_after_solve_4_elasticity_dep_Hexa_4( double * );
extern "C" void apply_on_elements_after_solve_5_elasticity_dep_Hexa_5( double * );
class Hexa;
template<unsigned A,class B,class C> class Node;
template<class A,class B,class C,class D,unsigned E> class Element;

// Carac for ...
template<class P_T_pos,class P_ND,class TED,unsigned nim,class TM,class T>
class CaracFormulationForElement<elasticity_dep,Element<Hexa,DefaultBehavior,Node<3,P_T_pos,P_ND>,TED,nim>,TM,T> {
public:
    template<unsigned num_mat,unsigned inner=0> struct ElemMatricesCarac {
        static const bool symm = true;
        static const bool herm = false;
        static const bool diag = false;
        static const bool linear = true;
    };
    static const unsigned order_integration = 2;
    static const bool has_elementary_matrix = true;
    static const bool has_skin_elementary_matrix = true;
    template<class TE,class TF, class TVEVE> static void after_solve(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
    T reg0=0.25*elem.pos(0)[2]; T reg1=0.25*elem.pos(1)[1]; T reg2=0.25*elem.pos(0)[1]; T reg3=0.25*elem.pos(1)[2]; T reg4=reg0+reg3;
    T reg5=0.25*elem.pos(2)[2]; T reg6=reg1-reg2; reg0=reg3-reg0; reg2=reg1+reg2; reg1=0.25*elem.pos(2)[1];
    reg3=reg5-reg4; T reg7=reg1+reg2; T reg8=0.25*elem.pos(3)[2]; reg6=reg1+reg6; reg4=reg4+reg5;
    reg0=reg5+reg0; reg5=0.25*elem.pos(3)[1]; reg2=reg1-reg2; reg1=0.25*elem.pos(1)[0]; T reg9=0.25*elem.pos(0)[0];
    T reg10=reg1+reg9; reg9=reg1-reg9; reg1=0.25*elem.pos(2)[0]; reg2=reg2+reg5; T reg11=0.25*elem.pos(4)[1];
    reg0=reg0-reg8; reg3=reg8+reg3; reg7=reg5+reg7; T reg12=0.25*elem.pos(4)[2]; reg5=reg6-reg5;
    reg8=reg4+reg8; reg5=reg5-reg11; reg9=reg9+reg1; reg2=reg2-reg11; reg4=0.25*elem.pos(5)[1];
    reg0=reg0-reg12; reg6=reg1-reg10; reg8=reg12-reg8; reg12=reg3-reg12; reg3=0.25*elem.pos(3)[0];
    T reg13=0.25*elem.pos(5)[2]; reg7=reg11-reg7; reg9=reg9-reg3; reg11=0.25*elem.pos(6)[2]; reg8=reg8+reg13;
    T reg14=0.25*elem.pos(4)[0]; reg5=reg4+reg5; reg6=reg3+reg6; reg7=reg4+reg7; reg12=reg12-reg13;
    reg0=reg13+reg0; reg10=reg1+reg10; reg1=0.25*elem.pos(6)[1]; reg4=reg2-reg4; reg2=0.25*vectors[0][indices[0]+2];
    reg13=0.25*vectors[0][indices[1]+2]; reg0=reg11+reg0; T reg15=0.25*vectors[0][indices[0]+0]; T reg16=0.25*vectors[0][indices[1]+0]; reg9=reg9-reg14;
    T reg17=0.25*elem.pos(5)[0]; reg10=reg3+reg10; reg3=0.25*vectors[0][indices[0]+1]; T reg18=0.25*vectors[0][indices[1]+1]; reg5=reg1+reg5;
    reg6=reg6-reg14; reg4=reg4+reg1; reg7=reg1+reg7; reg1=0.25*elem.pos(7)[1]; reg12=reg11+reg12;
    T reg19=0.25*elem.pos(7)[2]; reg11=reg8+reg11; reg8=1+(*f.m).poisson_ratio; reg11=reg11+reg19; T reg20=reg13-reg2;
    reg0=reg0-reg19; T reg21=reg18+reg3; reg10=reg14-reg10; reg14=0.25*vectors[0][indices[2]+1]; reg5=reg5-reg1;
    reg8=reg8/(*f.m).elastic_modulus; reg6=reg6-reg17; reg4=reg4+reg1; reg7=reg1+reg7; reg12=reg19+reg12;
    reg1=reg16-reg15; reg2=reg13+reg2; reg13=0.25*vectors[0][indices[2]+0]; reg9=reg9+reg17; reg19=0.25*vectors[0][indices[2]+2];
    reg15=reg16+reg15; reg3=reg18-reg3; reg16=0.25*elem.pos(6)[0]; reg18=reg13-reg15; reg10=reg17+reg10;
    reg17=reg0*reg7; T reg22=reg11*reg5; T reg23=0.25*vectors[0][indices[3]+2]; T reg24=pow(reg8,2); reg6=reg16+reg6;
    T reg25=reg11*reg4; T reg26=reg12*reg7; reg20=reg19+reg20; reg1=reg1+reg13; T reg27=0.25*vectors[0][indices[3]+0];
    T reg28=0.25*elem.pos(7)[0]; reg9=reg9+reg16; T reg29=reg19-reg2; reg3=reg3+reg14; T reg30=reg14-reg21;
    T reg31=0.25*vectors[0][indices[3]+1]; reg26=reg25-reg26; reg18=reg27+reg18; reg25=0.25*vectors[0][indices[4]+2]; reg8=reg8*reg24;
    reg1=reg1-reg27; T reg32=0.25*vectors[0][indices[4]+0]; reg6=reg28+reg6; reg21=reg14+reg21; reg19=reg2+reg19;
    reg2=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg15=reg13+reg15; reg13=1.0/(*f.m).elastic_modulus; reg14=reg0*reg4; T reg33=0.25*vectors[0][indices[4]+1];
    reg30=reg30+reg31; reg17=reg22-reg17; reg22=reg12*reg5; reg9=reg9-reg28; reg10=reg16+reg10;
    reg29=reg23+reg29; reg3=reg3-reg31; reg20=reg20-reg23; reg29=reg29-reg25; reg10=reg28+reg10;
    reg16=0.25*vectors[0][indices[5]+2]; reg14=reg22-reg14; reg21=reg31+reg21; reg23=reg19+reg23; reg19=reg6*reg17;
    reg15=reg27+reg15; reg30=reg30-reg33; reg22=0.25*vectors[0][indices[5]+1]; reg1=reg1-reg32; reg18=reg18-reg32;
    reg27=0.25*vectors[0][indices[5]+0]; reg3=reg3-reg33; reg28=reg13*reg8; reg8=reg2*reg8; reg20=reg20-reg25;
    reg31=reg9*reg26; reg18=reg18-reg27; reg30=reg30-reg22; T reg34=0.25*vectors[0][indices[6]+1]; T reg35=0.25*vectors[0][indices[6]+2];
    T reg36=reg11*reg6; T reg37=reg10*reg12; reg11=reg9*reg11; T reg38=0.25*vectors[0][indices[6]+0]; reg1=reg1+reg27;
    reg21=reg33-reg21; reg33=reg10*reg4; T reg39=reg7*reg6; reg15=reg32-reg15; reg32=reg2*reg28;
    T reg40=reg2*reg8; reg20=reg16+reg20; reg28=reg13*reg28; reg7=reg9*reg7; reg3=reg3+reg22;
    T reg41=reg10*reg5; reg19=reg31-reg19; reg31=reg10*reg14; reg29=reg29-reg16; reg10=reg0*reg10;
    reg23=reg25-reg23; reg25=reg2*reg24; reg3=reg3+reg34; reg8=reg13*reg8; reg20=reg35+reg20;
    T reg42=0.25*vectors[0][indices[7]+1]; reg1=reg1+reg38; T reg43=0.25*vectors[0][indices[7]+0]; reg16=reg23+reg16; reg23=0.25*vectors[0][indices[7]+2];
    reg30=reg30+reg34; reg32=reg40+reg32; reg29=reg35+reg29; reg28=reg28-reg40; reg18=reg38+reg18;
    reg5=reg6*reg5; reg31=reg19+reg31; reg4=reg9*reg4; reg24=reg13*reg24; reg37=reg36-reg37;
    reg41=reg7-reg41; reg33=reg39-reg33; reg15=reg27+reg15; reg21=reg22+reg21; reg12=reg9*reg12;
    reg6=reg0*reg6; reg10=reg11-reg10; reg35=reg16+reg35; reg15=reg38+reg15; reg29=reg23+reg29;
    reg37=reg37/reg31; reg3=reg3-reg42; reg5=reg4-reg5; reg0=reg13*reg28; reg20=reg20-reg23;
    reg8=reg40+reg8; reg4=reg2*reg32; reg7=reg2*reg25; reg9=reg13*reg24; reg24=reg2*reg24;
    reg41=reg41/reg31; reg10=reg10/reg31; reg6=reg12-reg6; reg33=reg33/reg31; reg21=reg34+reg21;
    reg26=reg26/reg31; reg30=reg30+reg42; reg1=reg1-reg43; reg17=reg17/reg31; reg18=reg43+reg18;
    reg23=reg35+reg23; reg11=reg37*reg1; reg12=reg10*reg18; reg9=reg9-reg7; reg25=reg13*reg25;
    reg16=reg3*reg33; reg19=reg30*reg41; reg22=reg17*reg29; reg27=reg26*reg20; reg4=reg0-reg4;
    reg0=reg2*reg8; reg34=reg30*reg10; reg6=reg6/reg31; reg21=reg42+reg21; reg24=reg7+reg24;
    reg10=reg10*reg29; reg35=reg37*reg20; reg36=reg18*reg41; reg38=reg26*reg1; reg18=reg17*reg18;
    reg1=reg1*reg33; reg14=reg14/reg31; reg15=reg43+reg15; reg37=reg37*reg3; reg17=reg30*reg17;
    reg26=reg3*reg26; reg31=reg5/reg31; reg35=reg10-reg35; reg19=reg16-reg19; reg3=reg6*reg23;
    reg5=reg21*reg31; reg10=reg14*reg23; reg22=reg27-reg22; reg16=reg15*reg31; reg36=reg1-reg36;
    reg11=reg12-reg11; reg1=reg21*reg14; reg17=reg26-reg17; reg12=reg6*reg15; reg21=reg6*reg21;
    reg18=reg38-reg18; reg37=reg34-reg37; reg0=reg4-reg0; reg4=reg7+reg25; reg20=reg33*reg20;
    reg29=reg41*reg29; reg24=reg2*reg24; reg9=reg13*reg9; reg15=reg14*reg15; reg8=reg8/reg0;
    reg15=reg18+reg15; elem.epsilon[0][0]=reg15; reg1=reg17+reg1; reg28=reg28/reg0; reg32=reg32/reg0;
    reg16=reg36+reg16; reg21=reg37-reg21; elem.epsilon[0][1]=reg21; reg12=reg11-reg12; reg10=reg22+reg10;
    reg23=reg31*reg23; reg24=reg9-reg24; reg19=reg5+reg19; reg4=reg2*reg4; reg3=reg35-reg3;
    reg29=reg20-reg29; reg10=reg16+reg10; reg4=reg24-reg4; reg3=reg19+reg3; reg2=reg32*reg21;
    reg1=reg12+reg1; reg5=reg28*reg15; reg29=reg23+reg29; elem.epsilon[0][2]=reg29; reg6=reg32*reg15;
    reg9=reg28*reg21; reg11=reg8*reg21; reg15=reg21+reg15; reg3=0.5*reg3; elem.epsilon[0][5]=reg3;
    reg12=reg8*reg29; reg9=reg6+reg9; reg0=reg4/reg0; reg11=reg6+reg11; reg4=reg28*reg29;
    reg10=0.5*reg10; elem.epsilon[0][4]=reg10; reg5=reg2+reg5; reg1=0.5*reg1; elem.epsilon[0][3]=reg1;
    elem.sigma[0][1]=reg12+reg9; elem.sigma[0][4]=reg0*reg10; elem.sigma[0][0]=reg5+reg12; elem.sigma[0][2]=reg11+reg4; elem.sigma[0][5]=reg0*reg3;
    elem.sigma[0][3]=reg0*reg1; elem.tr_epsilon=reg29+reg15;
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_2(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_3(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_4(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_5(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
    template<class TE,class TF, class TVEVE> static void after_solve_6(TE &elem,TF &f,TVEVE &vectors,const unsigned *indices) {
      #define PNODE(N) (*elem.node(N))
      #undef PNODE
    }
  
  static const unsigned nb_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
  
  static const unsigned nb_skin_elementary_unknowns = 0;
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void set_skin_elementary_unknowns(TE &elem,const TTs &f,const Tvec &vecs,unsigned indice,T partial_ts) {
  }
  template<class TE,class TTs,class Tvec>
  inline static void get_skin_elementary_initial_conditions(const TE &elem,const TTs &f,Tvec &vecs,unsigned indice) {
  }
  template<class TE,class TTs,class Tvec>
  inline static T max_skin_elementary_error(const TE &elem,const TTs &f,const Tvec &vecs,int indice) {
    return 0;
  }
  template<class TE,class TTs,class Tvecs,class Tvec>
  inline static void set_old_vec_skin_elementary(const TE &elem,const TTs &f,const Tvecs &vecs,Tvec &old_vec,int indice) {
  }
};

// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[0]; T reg1=1-var_inter[2]; T reg2=1-var_inter[1]; T reg3=var_inter[0]*reg1; T reg4=reg0*reg1;
    T reg5=reg2*reg1; T reg6=reg0*reg2; T reg7=reg2*var_inter[0]; T reg8=var_inter[1]*var_inter[0]; T reg9=elem.pos(0)[2]*reg5;
    T reg10=elem.pos(1)[1]*reg3; T reg11=elem.pos(0)[1]*reg4; T reg12=elem.pos(1)[2]*reg5; T reg13=reg6*elem.pos(0)[2]; T reg14=reg7*elem.pos(1)[2];
    T reg15=reg7*elem.pos(1)[1]; T reg16=elem.pos(0)[1]*reg6; T reg17=elem.pos(0)[1]*reg5; T reg18=elem.pos(1)[1]*reg5; T reg19=var_inter[1]*reg1;
    T reg20=elem.pos(1)[2]*reg3; T reg21=elem.pos(0)[2]*reg4; T reg22=reg15+reg16; T reg23=reg10+reg11; T reg24=elem.pos(2)[2]*reg3;
    T reg25=elem.pos(2)[1]*reg3; T reg26=reg21+reg20; T reg27=elem.pos(2)[2]*reg8; T reg28=reg13+reg14; reg18=reg18-reg17;
    T reg29=elem.pos(2)[1]*reg19; T reg30=var_inter[1]*reg0; reg12=reg12-reg9; T reg31=elem.pos(2)[2]*reg19; T reg32=elem.pos(2)[1]*reg8;
    T reg33=elem.pos(0)[0]*reg4; T reg34=elem.pos(1)[0]*reg5; T reg35=var_inter[2]*reg0; T reg36=elem.pos(3)[1]*reg19; reg29=reg18+reg29;
    reg18=elem.pos(1)[0]*reg3; T reg37=elem.pos(3)[2]*reg19; reg31=reg12+reg31; reg25=reg25-reg23; reg12=var_inter[2]*reg2;
    T reg38=elem.pos(3)[1]*reg4; T reg39=elem.pos(0)[0]*reg5; T reg40=reg28+reg27; T reg41=reg22+reg32; reg24=reg24-reg26;
    T reg42=elem.pos(3)[2]*reg4; T reg43=elem.pos(3)[1]*reg30; T reg44=elem.pos(3)[2]*reg30; T reg45=elem.pos(4)[2]*reg12; reg31=reg31-reg37;
    T reg46=reg41+reg43; T reg47=elem.pos(4)[1]*reg12; reg29=reg29-reg36; T reg48=elem.pos(4)[1]*reg6; T reg49=elem.pos(2)[0]*reg19;
    reg34=reg34-reg39; T reg50=var_inter[2]*var_inter[0]; T reg51=elem.pos(4)[2]*reg35; reg42=reg24+reg42; reg24=reg40+reg44;
    T reg52=elem.pos(2)[0]*reg3; T reg53=elem.pos(4)[2]*reg6; T reg54=reg18+reg33; T reg55=reg7*elem.pos(1)[0]; reg38=reg25+reg38;
    reg25=elem.pos(4)[1]*reg35; T reg56=elem.pos(0)[0]*reg6; T reg57=elem.pos(3)[0]*reg19; reg49=reg34+reg49; reg34=var_inter[1]*var_inter[2];
    reg38=reg38-reg25; T reg58=elem.pos(5)[1]*reg7; reg48=reg48-reg46; T reg59=elem.pos(5)[1]*reg50; T reg60=elem.pos(3)[0]*reg4;
    reg52=reg52-reg54; reg29=reg29-reg47; T reg61=elem.pos(5)[1]*reg12; reg42=reg42-reg51; T reg62=elem.pos(5)[2]*reg50;
    T reg63=reg8*elem.pos(2)[0]; T reg64=reg55+reg56; reg53=reg53-reg24; reg31=reg31-reg45; T reg65=elem.pos(5)[2]*reg12;
    T reg66=elem.pos(5)[2]*reg7; T reg67=elem.pos(6)[1]*reg8; T reg68=elem.pos(6)[1]*reg34; reg61=reg29+reg61; reg65=reg31+reg65;
    reg66=reg53+reg66; reg29=elem.pos(6)[2]*reg8; reg31=elem.pos(6)[2]*reg34; reg58=reg48+reg58; reg48=elem.pos(3)[0]*reg30;
    reg53=elem.pos(6)[1]*reg50; reg38=reg38-reg59; reg42=reg42-reg62; T reg69=elem.pos(6)[2]*reg50; reg49=reg49-reg57;
    T reg70=elem.pos(4)[0]*reg12; T reg71=elem.pos(4)[0]*reg35; reg60=reg52+reg60; reg52=reg64+reg63; reg31=reg65+reg31;
    reg60=reg60-reg71; reg65=elem.pos(5)[0]*reg50; T reg72=elem.pos(7)[2]*reg35; T reg73=elem.pos(7)[2]*reg34; reg69=reg42+reg69;
    reg42=elem.pos(4)[0]*reg6; reg67=reg58+reg67; reg58=elem.pos(7)[1]*reg30; T reg74=elem.pos(7)[1]*reg35; T reg75=reg52+reg48;
    reg53=reg38+reg53; reg38=elem.pos(7)[1]*reg34; reg68=reg61+reg68; reg29=reg66+reg29; reg61=elem.pos(7)[2]*reg30;
    reg49=reg49-reg70; reg66=elem.pos(5)[0]*reg12; T reg76=elem.pos(5)[0]*reg7; reg42=reg42-reg75; T reg77=elem.pos(6)[0]*reg34;
    reg66=reg49+reg66; reg60=reg60-reg65; reg49=elem.pos(6)[0]*reg50; reg72=reg69+reg72; reg74=reg53+reg74;
    reg53=1+(*f.m).poisson_ratio; reg58=reg67+reg58; reg68=reg68-reg38; reg61=reg29+reg61; reg31=reg31-reg73;
    reg53=reg53/(*f.m).elastic_modulus; reg29=reg0-0.21132486540518707896; reg67=reg74*reg61; reg69=elem.pos(7)[0]*reg35; reg49=reg60+reg49;
    reg60=reg68*reg61; reg76=reg42+reg76; reg42=elem.pos(6)[0]*reg8; T reg78=reg72*reg58; T reg79=elem.pos(7)[0]*reg34;
    reg77=reg66+reg77; reg66=var_inter[1]-0.21132486540518707896; T reg80=reg31*reg58; T reg81=var_inter[0]-0.21132486540518707896; reg42=reg76+reg42;
    reg80=reg60-reg80; reg60=reg68*reg72; reg76=reg31*reg74; T reg82=var_inter[2]-0.21132486540518707896; reg81=reg81/0.57735026918962573106;
    reg78=reg67-reg78; reg67=elem.pos(7)[0]*reg30; reg66=reg66/0.57735026918962573106; T reg83=pow(reg53,2); reg29=reg29/0.57735026918962573106;
    reg77=reg77-reg79; T reg84=reg2-0.21132486540518707896; reg69=reg49+reg69; reg49=reg77*reg78; T reg85=reg69*reg80;
    reg76=reg60-reg76; reg67=reg42+reg67; reg42=1.0/(*f.m).elastic_modulus; reg60=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg53=reg53*reg83;
    reg81=1-reg81; reg29=1-reg29; reg84=reg84/0.57735026918962573106; reg66=1-reg66; reg82=reg82/0.57735026918962573106;
    T reg86=reg42*reg83; reg85=reg49-reg85; reg49=reg67*reg76; T reg87=reg66*reg29; T reg88=reg77*reg61;
    T reg89=reg31*reg67; T reg90=reg72*reg67; reg61=reg69*reg61; reg84=1-reg84; reg82=1-reg82;
    reg66=reg81*reg66; reg83=reg60*reg83; T reg91=reg42*reg53; reg53=reg60*reg53; T reg92=reg60*reg86;
    reg86=reg42*reg86; reg49=reg85+reg49; reg85=reg60*reg91; T reg93=reg60*reg53; reg90=reg61-reg90;
    reg91=reg42*reg91; reg61=reg74*reg67; T reg94=reg77*reg58; T reg95=reg60*reg83; reg89=reg88-reg89;
    reg67=reg68*reg67; reg72=reg77*reg72; reg31=reg31*reg69; reg58=reg69*reg58; reg88=reg1-0.21132486540518707896;
    reg29=reg29*reg84; T reg96=reg82*reg87; T reg97=reg66*reg82; reg61=reg58-reg61; reg80=reg80/reg49;
    reg89=reg89/reg49; reg90=reg90/reg49; reg67=reg94-reg67; reg78=reg78/reg49; reg92=reg95+reg92;
    reg74=reg77*reg74; reg31=reg72-reg31; reg69=reg68*reg69; reg88=reg88/0.57735026918962573106; reg86=reg86-reg95;
    reg84=reg81*reg84; reg91=reg91-reg93; reg58=reg82*reg29; reg85=reg93+reg85; reg53=reg42*reg53;
    reg83=reg42*reg83; reg68=reg96*elem.proute[1](1,1); reg72=reg97*elem.proute[0](1,1); reg76=reg76/reg49; reg92=reg60*reg92;
    reg31=reg31/reg49; reg86=reg42*reg86; reg69=reg74-reg69; reg53=reg93+reg53; reg74=reg4*reg80;
    reg77=reg60*reg85; reg88=1-reg88; reg81=reg58*elem.proute[2](1,1); reg82=reg82*reg84; reg42=reg42*reg91;
    reg68=reg72+reg68; reg67=reg67/reg49; reg72=reg19*reg78; reg93=reg50*reg89; reg94=reg12*reg90;
    T reg98=reg12*reg78; T reg99=reg50*reg80; T reg100=reg4*reg89; reg61=reg61/reg49; T reg101=reg95+reg83;
    T reg102=reg19*reg90; T reg103=reg30*reg76; T reg104=reg60*reg53; T reg105=reg72+reg74; T reg106=reg19*reg61;
    reg77=reg42-reg77; reg42=reg3*reg67; T reg107=reg34*reg61; T reg108=reg7*reg76; T reg109=reg3*reg80;
    T reg110=reg34*reg78; T reg111=reg94+reg93; reg101=reg60*reg101; reg60=reg34*reg90; reg92=reg86-reg92;
    reg86=reg7*reg31; T reg112=reg78*reg5; T reg113=reg35*reg80; T reg114=reg90*reg5; T reg115=reg50*reg67;
    T reg116=reg35*reg89; T reg117=reg12*reg61; T reg118=reg98+reg99; T reg119=reg35*reg67; T reg120=reg3*reg89;
    T reg121=reg82*elem.proute[3](1,1); reg69=reg69/reg49; T reg122=reg100+reg102; reg81=reg68+reg81; reg68=reg30*reg31;
    T reg123=reg66*reg88; T reg124=reg4*reg67; T reg125=reg5*reg61; reg122=reg122+reg68; T reg126=reg7*reg69;
    T reg127=reg42+reg125; T reg128=reg8*reg69; T reg129=reg106-reg42; T reg130=reg106+reg124; T reg131=reg113-reg98;
    T reg132=reg107-reg115; T reg133=reg30*reg69; T reg134=reg8*reg31; T reg135=reg93-reg60; T reg136=reg94-reg116;
    T reg137=reg120+reg114; T reg138=reg109+reg112; T reg139=reg119-reg117; T reg140=reg117+reg115; T reg141=reg105+reg103;
    T reg142=reg110-reg99; T reg143=reg123*elem.proute[4](1,1); reg118=reg108+reg118; T reg144=reg86+reg111; T reg145=reg6*reg31;
    T reg146=reg6*reg76; reg101=reg92-reg101; reg121=reg81+reg121; reg81=reg74-reg112; reg92=reg114-reg100;
    reg104=reg77-reg104; reg77=reg8*reg76; T reg147=reg119+reg107; T reg148=reg87*reg88; T reg149=reg116+reg60;
    T reg150=reg124-reg125; T reg151=reg72-reg109; T reg152=reg113+reg110; T reg153=reg120-reg102; T reg154=reg6*reg69;
    reg139=reg139+reg154; reg143=reg121+reg143; reg121=reg148*elem.proute[5](1,1); T reg155=reg29*reg88; reg136=reg136-reg145;
    T reg156=0.5*reg144; reg131=reg131+reg146; reg92=reg92+reg145; reg150=reg150-reg154; T reg157=reg86-reg137;
    reg132=reg132+reg128; reg127=reg127-reg126; reg129=reg129-reg128; T reg158=reg103-reg152; reg149=reg149-reg68;
    reg153=reg153+reg134; T reg159=reg133-reg147; reg151=reg151-reg77; reg135=reg135-reg134; reg101=reg101/reg104;
    reg142=reg77+reg142; T reg160=0.5*reg118; reg140=reg126+reg140; T reg161=0.5*reg141; T reg162=reg130+reg133;
    reg81=reg81-reg146; reg138=reg138-reg108; T reg163=0.5*reg122; T reg164=0.5*reg81; T reg165=0.5*reg138;
    T reg166=0.5*reg131; T reg167=0.5*reg150; T reg168=0.5*reg92; T reg169=reg101*reg156; T reg170=0.5*reg159;
    T reg171=0.5*reg149; T reg172=0.5*reg142; T reg173=0.5*reg132; T reg174=0.5*reg151; T reg175=0.5*reg129;
    T reg176=0.5*reg153; T reg177=0.5*reg135; T reg178=reg101*reg160; T reg179=0.5*reg140; T reg180=reg101*reg161;
    T reg181=0.5*reg162; T reg182=reg101*reg163; T reg183=0.5*reg139; T reg184=0.5*reg136; reg91=reg91/reg104;
    T reg185=0.5*reg127; T reg186=0.5*reg157; T reg187=0.5*reg158; T reg188=reg155*elem.proute[6](1,1); reg88=reg84*reg88;
    reg121=reg143+reg121; reg143=reg101*reg170; reg178=2*reg178; T reg189=reg101*reg174; T reg190=reg101*reg164;
    reg53=reg53/reg104; reg104=reg85/reg104; reg85=reg101*reg179; T reg191=reg91*reg118; T reg192=2*reg180;
    T reg193=reg101*reg175; T reg194=reg101*reg186; T reg195=reg101*reg181; T reg196=reg91*reg162; T reg197=reg88*elem.proute[7](1,1);
    T reg198=reg91*reg140; reg182=2*reg182; T reg199=reg91*reg141; T reg200=reg101*reg176; reg188=reg121+reg188;
    reg121=reg101*reg166; T reg201=reg101*reg183; T reg202=2*reg169; T reg203=reg101*reg184; T reg204=reg101*reg172;
    T reg205=reg101*reg165; T reg206=reg91*reg144; T reg207=reg101*reg173; T reg208=reg101*reg187; T reg209=reg91*reg122;
    T reg210=reg101*reg171; T reg211=reg101*reg185; T reg212=reg101*reg177; T reg213=reg101*reg168; T reg214=reg101*reg167;
    T reg215=reg53*reg144; T reg216=reg122*reg206; T reg217=reg91*reg92; T reg218=reg162*reg198; T reg219=reg91*reg136;
    reg201=2*reg201; T reg220=reg104*reg118; T reg221=reg91*reg157; T reg222=reg141*reg191; T reg223=reg163*reg202;
    T reg224=reg91*reg149; reg203=2*reg203; T reg225=reg104*reg158; T reg226=reg91*reg129; T reg227=reg104*reg142;
    T reg228=reg91*reg139; T reg229=reg91*reg135; T reg230=reg53*reg140; T reg231=reg182*reg156; T reg232=reg161*reg178;
    T reg233=reg104*reg81; reg85=2*reg85; T reg234=reg91*reg142; T reg235=reg91*reg132; T reg236=reg199*reg118;
    T reg237=reg104*reg144; T reg238=reg53*reg122; T reg239=reg104*reg122; T reg240=2*reg195; reg212=2*reg212;
    T reg241=reg91*reg127; T reg242=reg104*reg141; T reg243=reg91*reg159; T reg244=reg91*reg150; T reg245=reg140*reg196;
    T reg246=reg104*reg131; T reg247=reg104*reg138; T reg248=reg91*reg138; T reg249=reg91*reg153; reg194=2*reg194;
    reg197=reg188+reg197; reg193=2*reg193; reg188=reg53*reg150; reg190=2*reg190; reg143=2*reg143;
    reg189=2*reg189; reg214=2*reg214; reg213=2*reg213; T reg250=reg53*reg129; T reg251=reg91*reg81;
    reg210=2*reg210; T reg252=reg91*reg151; reg211=2*reg211; T reg253=reg53*reg159; T reg254=reg91*reg158;
    T reg255=reg53*reg127; reg207=2*reg207; reg208=2*reg208; T reg256=reg53*reg132; reg205=2*reg205;
    reg204=2*reg204; T reg257=reg53*reg162; T reg258=reg209*reg144; T reg259=reg104*reg151; T reg260=reg91*reg131;
    reg200=2*reg200; T reg261=reg192*reg160; reg121=2*reg121; T reg262=reg53*reg139; T reg263=reg254*reg81;
    T reg264=var_inter[2]*reg8; T reg265=reg204*reg166; T reg266=reg234*reg118; T reg267=reg212*reg171; T reg268=reg136*reg206;
    T reg269=reg178*reg166; T reg270=reg234*reg158; T reg271=reg186*reg210; T reg272=reg136*reg229; T reg273=reg138*reg234;
    T reg274=reg186*reg212; T reg275=reg208*reg166; T reg276=reg136*reg224; T reg277=reg138*reg191; T reg278=reg186*reg202;
    T reg279=reg139*reg244; T reg280=reg139*reg241; T reg281=reg240*reg172; T reg282=reg138*reg260; T reg283=reg186*reg203;
    T reg284=reg139*reg226; T reg285=reg158*reg191; T reg286=reg139*reg242; T reg287=reg104*reg149; T reg288=reg81*reg191;
    T reg289=reg157*reg209; T reg290=reg165*reg192; T reg291=reg184*reg212; T reg292=reg217*reg144; T reg293=reg131*reg234;
    T reg294=reg184*reg210; T reg295=reg131*reg254; T reg296=reg249*reg157; T reg297=reg165*reg189; T reg298=reg158*reg254;
    T reg299=reg171*reg210; T reg300=reg190*reg166; T reg301=reg1*reg6; T reg302=reg217*reg136; T reg303=reg221*reg157;
    T reg304=reg190*reg160; T reg305=reg165*reg205; T reg306=reg205*reg166; T reg307=reg221*reg136; T reg308=reg189*reg166;
    T reg309=var_inter[2]*reg30; T reg310=reg249*reg136; T reg311=reg217*reg157; T reg312=reg165*reg190; T reg313=reg228*reg159;
    T reg314=reg192*reg166; T reg315=reg136*reg209; T reg316=reg166*reg121; T reg317=reg136*reg219; T reg318=reg138*reg254;
    T reg319=reg200*reg156; T reg320=reg150*reg243; T reg321=reg197+(*f.m).f_vol[1]; T reg322=var_inter[2]*reg7; T reg323=reg192*reg170;
    T reg324=reg53*reg149; T reg325=reg210*reg156; T reg326=reg257*reg158; T reg327=reg197+(*f.m).f_vol[0]; T reg328=var_inter[2]*reg6;
    T reg329=reg236+reg231; T reg330=reg1*reg30; T reg331=reg1*reg8; T reg332=reg240*reg179; T reg333=reg150*reg235;
    reg1=reg7*reg1; T reg334=reg104*reg136; T reg335=reg257*reg118; T reg336=reg199*reg158; T reg337=reg192*reg179;
    T reg338=reg182*reg171; T reg339=reg260*reg118; T reg340=reg203*reg156; T reg341=reg53*reg135; T reg342=reg159*reg235;
    T reg343=reg237*reg118; T reg344=reg156*reg202; T reg345=reg118*reg191; T reg346=reg150*reg198; T reg347=reg254*reg118;
    T reg348=reg185*reg192; T reg349=reg138*reg257; T reg350=reg240*reg166; T reg351=reg171*reg202; T reg352=reg159*reg198;
    T reg353=reg139*reg196; T reg354=reg138*reg199; T reg355=reg186*reg182; T reg356=reg202*reg168; T reg357=reg139*reg228;
    T reg358=reg139*reg198; T reg359=reg252*reg138; T reg360=reg186*reg200; T reg361=reg139*reg235; T reg362=reg139*reg243;
    T reg363=reg212*reg156; T reg364=reg178*reg156; T reg365=reg251*reg118; T reg366=reg213*reg156; T reg367=reg138*reg248;
    T reg368=reg210*reg168; T reg369=reg186*reg194; reg197=reg197+(*f.m).f_vol[2]; T reg370=reg260*reg158; T reg371=reg203*reg171;
    T reg372=reg248*reg118; T reg373=reg194*reg156; T reg374=reg251*reg138; T reg375=reg186*reg213; T reg376=reg252*reg118;
    T reg377=reg151*reg257; T reg378=reg192*reg175; T reg379=reg181*reg121; T reg380=reg203*reg176; T reg381=reg151*reg260;
    T reg382=reg141*reg262; T reg383=reg244*reg159; T reg384=reg260*reg141; T reg385=reg203*reg163; T reg386=reg187*reg121;
    T reg387=reg219*reg149; T reg388=reg141*reg239; T reg389=reg163*reg192; T reg390=reg176*reg202; T reg391=reg151*reg191;
    T reg392=reg141*reg199; T reg393=reg163*reg182; T reg394=reg181*reg189; T reg395=reg141*reg250; T reg396=reg252*reg141;
    T reg397=reg163*reg200; T reg398=reg221*reg122; T reg399=reg187*reg192; T reg400=reg194*reg176; T reg401=reg151*reg248;
    T reg402=reg190*reg161; T reg403=reg217*reg122; T reg404=reg209*reg149; T reg405=reg241*reg132; T reg406=reg176*reg200;
    T reg407=reg151*reg252; T reg408=reg141*reg254; T reg409=reg163*reg210; T reg410=reg181*reg204; T reg411=reg141*reg256;
    T reg412=reg141*reg234; T reg413=reg163*reg212; T reg414=reg182*reg176; T reg415=reg151*reg199; T reg416=reg181*reg178;
    T reg417=reg141*reg230; T reg418=reg181*reg85; reg222=reg223+reg222; T reg419=reg196*reg129; T reg420=reg240*reg174;
    T reg421=reg242*reg129; T reg422=reg226*reg129; T reg423=reg174*reg189; T reg424=reg249*reg153; T reg425=reg241*reg129;
    T reg426=reg187*reg204; T reg427=reg229*reg149; T reg428=reg244*reg129; T reg429=reg192*reg174; T reg430=reg209*reg153;
    T reg431=reg224*reg149; T reg432=reg224*reg153; T reg433=reg187*reg208; T reg434=reg208*reg174; T reg435=reg174*reg121;
    T reg436=reg219*reg153; T reg437=reg229*reg153; T reg438=reg174*reg204; T reg439=reg206*reg153; T reg440=reg178*reg174;
    T reg441=reg212*reg176; T reg442=reg151*reg234; T reg443=reg205*reg181; T reg444=reg255*reg141; T reg445=reg248*reg141;
    T reg446=reg194*reg163; T reg447=reg190*reg181; T reg448=reg188*reg141; T reg449=reg176*reg210; T reg450=reg151*reg254;
    T reg451=reg251*reg141; T reg452=reg213*reg163; T reg453=reg129*reg243; T reg454=reg129*reg235; T reg455=reg187*reg178;
    T reg456=reg206*reg149; T reg457=reg190*reg174; T reg458=reg217*reg153; T reg459=reg129*reg198; T reg460=reg228*reg129;
    T reg461=reg205*reg174; T reg462=reg221*reg153; T reg463=reg157*reg224; T reg464=reg213*reg184; T reg465=reg187*reg190;
    T reg466=reg162*reg243; T reg467=reg217*reg149; T reg468=reg161*reg143; T reg469=reg162*reg225; T reg470=reg162*reg235;
    T reg471=reg161*reg207; T reg472=reg162*reg227; T reg473=reg187*reg240; T reg474=reg127*reg244; reg218=reg232+reg218;
    T reg475=reg242*reg159; T reg476=reg161*reg85; T reg477=reg249*reg122; T reg478=reg161*reg189; T reg479=reg162*reg220;
    T reg480=reg162*reg228; T reg481=reg201*reg161; T reg482=reg127*reg241; T reg483=reg131*reg191; T reg484=reg184*reg202;
    T reg485=reg165*reg121; T reg486=reg157*reg219; T reg487=reg131*reg260; T reg488=reg184*reg203; T reg489=reg183*reg192;
    T reg490=reg257*reg131; T reg491=reg196*reg159; T reg492=reg165*reg178; T reg493=reg157*reg206; T reg494=reg131*reg199;
    T reg495=reg184*reg182; T reg496=reg252*reg131; T reg497=reg184*reg200; T reg498=reg165*reg204; T reg499=reg253*reg141;
    T reg500=reg208*reg181; T reg501=reg248*reg131; T reg502=reg194*reg184; T reg503=reg251*reg131; T reg504=reg208*reg165;
    T reg505=reg122*reg224; T reg506=reg161*reg204; T reg507=reg122*reg229; T reg508=reg127*reg198; reg232=reg216+reg232;
    T reg509=reg187*reg189; T reg510=reg249*reg149; T reg511=reg161*reg121; T reg512=reg122*reg219; T reg513=reg127*reg235;
    T reg514=reg182*reg181; T reg515=reg257*reg122; T reg516=reg161*reg192; T reg517=reg122*reg209; T reg518=reg241*reg159;
    T reg519=reg182*reg161; T reg520=reg122*reg242; T reg521=reg127*reg243; T reg522=reg228*reg132; T reg523=reg213*reg176;
    T reg524=reg151*reg251; T reg525=reg205*reg161; T reg526=reg162*reg246; T reg527=reg162*reg196; T reg528=reg162*reg238;
    T reg529=reg163*reg240; T reg530=reg226*reg159; T reg531=reg162*reg226; T reg532=reg187*reg205; T reg533=reg127*reg226;
    T reg534=reg221*reg149; T reg535=reg161*reg193; T reg536=reg127*reg242; T reg537=reg165*reg240; T reg538=reg259*reg162;
    T reg539=reg162*reg241; T reg540=reg211*reg161; T reg541=reg247*reg162; T reg542=reg127*reg196; T reg543=reg162*reg244;
    T reg544=reg214*reg161; T reg545=reg233*reg162; T reg546=reg208*reg161; T reg547=reg127*reg228; T reg548=reg224*reg92;
    T reg549=reg208*reg164; T reg550=reg140*reg198; T reg551=reg140*reg235; T reg552=reg229*reg92; T reg553=reg164*reg204;
    T reg554=reg251*reg158; T reg555=reg140*reg243; T reg556=reg213*reg171; T reg557=reg213*reg177; T reg558=reg251*reg142;
    T reg559=reg206*reg92; T reg560=reg164*reg178; T reg561=reg194*reg177; T reg562=reg248*reg142; T reg563=reg177*reg200;
    T reg564=reg252*reg142; T reg565=reg219*reg92; T reg566=reg164*reg121; T reg567=reg132*reg243; T reg568=reg182*reg177;
    T reg569=reg199*reg142; T reg570=reg257*reg142; T reg571=reg192*reg173; T reg572=reg179*reg202; T reg573=reg160*reg204;
    T reg574=reg229*reg144; T reg575=reg164*reg240; T reg576=reg242*reg150; T reg577=reg226*reg150; T reg578=reg208*reg160;
    T reg579=reg224*reg144; T reg580=reg53*reg153; T reg581=reg140*reg244; T reg582=reg157*reg229; T reg583=reg140*reg241;
    T reg584=reg53*reg157; T reg585=reg248*reg158; T reg586=reg194*reg171; T reg587=reg140*reg226; T reg588=reg140*reg242;
    T reg589=reg244*reg150; T reg590=reg240*reg160; T reg591=reg53*reg92; T reg592=reg261+reg245; T reg593=reg140*reg228;
    T reg594=reg140*reg215; T reg595=reg85*reg156; T reg596=reg135*reg206; T reg597=reg178*reg172; T reg598=reg260*reg81;
    T reg599=reg192*reg167; T reg600=reg257*reg81; T reg601=reg190*reg172; T reg602=reg217*reg135; T reg603=reg135*reg219;
    T reg604=reg172*reg121; T reg605=reg164*reg189; reg248=reg248*reg81; T reg606=reg205*reg172; T reg607=reg221*reg135;
    T reg608=reg194*reg168; T reg609=reg104*reg92; T reg610=reg189*reg172; T reg611=reg249*reg135; T reg612=reg213*reg168;
    reg251=reg251*reg81; reg198=reg132*reg198; T reg613=reg252*reg81; T reg614=reg192*reg172; T reg615=reg135*reg209;
    T reg616=reg104*reg157; reg209=reg209*reg92; T reg617=reg164*reg192; T reg618=reg203*reg177; reg260=reg260*reg142;
    T reg619=reg177*reg202; reg191=reg142*reg191; T reg620=reg249*reg92; T reg621=reg212*reg168; T reg622=reg234*reg81;
    T reg623=reg164*reg190; T reg624=reg177*reg212; reg234=reg142*reg234; reg217=reg217*reg92; T reg625=reg177*reg210;
    reg224=reg135*reg224; T reg626=reg208*reg172; reg254=reg142*reg254; reg235=reg132*reg235; T reg627=reg182*reg168;
    reg229=reg135*reg229; T reg628=reg172*reg204; T reg629=reg199*reg81; T reg630=reg205*reg164; T reg631=reg221*reg92;
    T reg632=reg203*reg168; reg219=reg219*reg144; reg252=reg252*reg158; T reg633=reg160*reg121; reg258=reg261+reg258;
    T reg634=reg196*reg132; reg226=reg226*reg132; reg228=reg228*reg150; reg243=reg159*reg243; T reg635=reg196*reg150;
    T reg636=reg220*reg144; T reg637=reg160*reg202; T reg638=reg230*reg144; T reg639=reg160*reg189; reg221=reg221*reg144;
    T reg640=reg205*reg160; T reg641=reg104*reg153; reg249=reg249*reg144; T reg642=reg200*reg168; T reg643=reg200*reg171;
    reg244=reg244*reg132; reg241=reg241*reg150; T reg644=reg160*reg178; T reg645=reg104*reg135; T reg646=reg206*reg144;
    T reg647=reg53*reg136; T reg648=reg242*reg132; reg224=reg626+reg224; reg403=reg403-reg402; T reg649=reg177*reg204;
    T reg650=reg188*reg122; T reg651=reg213*reg181; T reg652=reg247*reg122; reg519=reg520+reg519; T reg653=reg250*reg144;
    T reg654=reg194*reg161; reg249=reg639-reg249; reg235=reg628+reg235; T reg655=reg142*reg645; T reg656=reg201*reg177;
    T reg657=reg647*reg132; T reg658=reg142*reg256; reg522=reg522+reg604; T reg659=reg173*reg204; T reg660=reg187*reg182;
    T reg661=reg161*reg200; T reg662=reg259*reg122; T reg663=reg242*reg149; T reg664=reg194*reg181; T reg665=reg220*reg132;
    T reg666=reg255*reg122; T reg667=reg85*reg172; reg398=reg398-reg525; T reg668=reg246*reg132; T reg669=reg200*reg170;
    T reg670=reg208*reg177; T reg671=reg172*reg210; T reg672=reg182*reg170; reg410=reg411+reg410; T reg673=reg212*reg173;
    T reg674=reg135*reg256; T reg675=reg141*reg645; T reg676=reg163*reg204; T reg677=reg181*reg207; reg412=reg413-reg412;
    reg229=reg628+reg229; reg628=reg287*reg142; reg347=reg347-reg325; T reg678=reg179*reg143; reg416=reg417+reg416;
    T reg679=reg135*reg227; T reg680=reg187*reg203; T reg681=reg141*reg237; T reg682=reg201*reg172; T reg683=reg135*reg225;
    T reg684=reg213*reg161; T reg685=reg233*reg122; T reg686=reg330*reg321; reg404=reg404-reg399; T reg687=reg193*reg172;
    T reg688=reg259*reg132; reg405=reg405+reg606; reg254=reg625+reg254; T reg689=reg211*reg177; T reg690=reg584*reg132;
    T reg691=reg211*reg172; T reg692=reg208*reg163; T reg693=reg173*reg143; T reg694=reg189*reg171; T reg695=reg257*reg149;
    T reg696=reg181*reg143; reg408=reg409-reg408; T reg697=reg142*reg262; T reg698=reg162*reg584; T reg699=reg211*reg163;
    reg540=reg541+reg540; reg541=reg173*reg121; T reg700=reg256*reg118; T reg701=reg179*reg204; reg543=reg402+reg543;
    reg191=reg191-reg619; reg402=reg255*reg149; T reg702=reg162*reg591; T reg703=reg214*reg163; T reg704=reg194*reg170;
    reg544=reg545+reg544; reg545=reg85*reg173; reg244=reg601+reg244; T reg705=reg330*reg197; T reg706=reg181*reg210;
    T reg707=reg253*reg122; reg505=reg505-reg546; T reg708=reg247*reg149; T reg709=reg516+reg527; T reg710=reg214*reg177;
    reg528=reg529+reg528; T reg711=reg645*reg118; T reg712=reg240*reg161; T reg713=reg162*reg242; reg531=reg478+reg531;
    T reg714=reg570+reg571; T reg715=reg132*reg324; T reg716=reg162*reg580; T reg717=reg204*reg156; T reg718=reg163*reg193;
    T reg719=reg182*reg160; reg535=reg538+reg535; reg260=reg618+reg260; reg538=reg201*reg173; T reg720=reg177*reg121;
    T reg721=reg142*reg334; reg534=reg532+reg534; reg539=reg525+reg539; reg525=reg161*reg202; T reg722=reg122*reg220;
    T reg723=reg178*reg177; T reg724=reg203*reg181; T reg725=reg122*reg262; reg510=reg509+reg510; reg512=reg512-reg511;
    T reg726=reg237*reg142; T reg727=reg225*reg132; T reg728=reg230*reg142; T reg729=reg203*reg161; T reg730=reg122*reg246;
    reg514=reg515+reg514; T reg731=reg178*reg173; T reg732=reg580*reg132; reg517=reg517+reg516; T reg733=reg179*reg200;
    reg234=reg624+reg234; T reg734=reg173*reg207; T reg735=reg250*reg149; T reg736=reg591*reg132; T reg737=reg214*reg172;
    T reg738=reg172*reg143; T reg739=reg161*reg210; T reg740=reg122*reg225; T reg741=reg187*reg200; T reg742=reg181*reg212;
    T reg743=reg122*reg256; T reg744=reg259*reg149; reg507=reg507-reg506; T reg745=reg614+reg634; T reg746=reg233*reg132;
    T reg747=reg161*reg212; T reg748=reg122*reg227; T reg749=reg181*reg202; T reg750=reg122*reg230; T reg751=reg264*reg197;
    T reg752=reg418+reg232; T reg753=reg173*reg210; T reg754=reg247*reg132; T reg755=reg253*reg135; T reg756=reg259*reg135;
    T reg757=reg429+reg419; T reg758=reg207*reg172; T reg759=reg240*reg176; T reg760=reg238*reg129; T reg761=reg421+reg420;
    T reg762=reg213*reg160; T reg763=reg213*reg179; T reg764=reg187*reg212; reg422=reg423+reg422; T reg765=reg233*reg144;
    T reg766=reg227*reg149; T reg767=reg176*reg193; T reg768=reg580*reg129; T reg769=reg193*reg174; T reg770=reg189*reg170;
    T reg771=reg188*reg144; T reg772=reg259*reg129; reg425=reg461+reg425; T reg773=reg250*reg158; T reg774=reg174*reg207;
    T reg775=reg227*reg129; T reg776=reg455-reg456; T reg777=reg255*reg135; T reg778=reg208*reg179; reg459=reg440+reg459;
    T reg779=reg194*reg173; T reg780=reg85*reg176; T reg781=reg129*reg215; T reg782=reg85*reg174; T reg783=reg220*reg129;
    reg460=reg435+reg460; T reg784=reg322*reg321; T reg785=reg230*reg149; T reg786=reg201*reg176; T reg787=reg647*reg129;
    T reg788=reg170*reg202; T reg789=reg201*reg174; T reg790=reg246*reg129; T reg791=reg200*reg172; T reg792=reg200*reg173;
    T reg793=reg182*reg172; T reg794=reg135*reg242; T reg795=reg256*reg149; T reg796=reg225*reg153; T reg797=reg174*reg210;
    T reg798=reg212*reg170; reg292=reg304-reg292; T reg799=reg212*reg175; T reg800=reg153*reg256; reg437=reg438+reg437;
    reg615=reg615-reg614; T reg801=reg182*reg173; T reg802=reg227*reg153; T reg803=reg212*reg174; T reg804=reg175*reg202;
    T reg805=reg230*reg153; T reg806=reg187*reg210; reg440=reg440-reg439; T reg807=reg257*reg135; T reg808=reg211*reg176;
    T reg809=reg584*reg129; T reg810=reg135*reg246; T reg811=reg211*reg174; T reg812=reg247*reg129; T reg813=reg203*reg172;
    reg428=reg457+reg428; reg198=reg597+reg198; reg427=reg426+reg427; T reg814=reg214*reg176; T reg815=reg591*reg129;
    reg611=reg610+reg611; T reg816=reg227*reg132; T reg817=reg214*reg174; T reg818=reg233*reg129; T reg819=reg331*reg197;
    T reg820=reg135*reg250; T reg821=reg175*reg210; T reg822=reg253*reg153; reg432=reg434+reg432; T reg823=reg194*reg179;
    T reg824=reg135*reg220; T reg825=reg181*reg192; T reg826=reg257*reg141; T reg827=reg255*reg144; reg388=reg389+reg388;
    T reg828=reg172*reg202; T reg829=reg203*reg173; T reg830=reg135*reg262; T reg831=reg208*reg173; reg387=reg386+reg387;
    T reg832=reg181*reg240; T reg833=reg393+reg392; T reg834=reg264*reg321; T reg835=reg213*reg172; reg394=reg395+reg394;
    T reg836=reg233*reg135; reg221=reg640-reg221; T reg837=reg141*reg641; T reg838=reg163*reg189; T reg839=reg163*reg178;
    T reg840=reg246*reg149; reg418=reg222+reg418; T reg841=reg212*reg172; T reg842=reg259*reg144; T reg843=reg160*reg200;
    T reg844=reg641*reg158; T reg845=reg132*reg215; T reg846=reg173*reg202; reg379=reg382+reg379; T reg847=reg230*reg135;
    T reg848=reg253*reg142; T reg849=reg648+reg281; T reg850=reg85*reg177; T reg851=reg141*reg334; T reg852=reg163*reg121;
    T reg853=reg201*reg181; reg597=reg597-reg596; reg384=reg385-reg384; T reg854=reg287*reg118; T reg855=reg213*reg173;
    T reg856=reg187*reg202; T reg857=reg214*reg181; reg451=reg452-reg451; T reg858=reg132*reg341; T reg859=reg194*reg172;
    T reg860=reg330*reg327; T reg861=reg220*reg149; reg453=reg434+reg453; reg434=reg247*reg135; T reg862=reg176*reg143;
    T reg863=reg129*reg324; T reg864=reg174*reg143; T reg865=reg225*reg129; reg454=reg438+reg454; reg438=reg208*reg156;
    T reg866=reg253*reg118; T reg867=reg176*reg207; T reg868=reg129*reg341; reg607=reg606+reg607; reg606=reg181*reg193;
    reg396=reg397-reg396; T reg869=reg149*reg262; T reg870=reg247*reg144; reg602=reg601+reg602; reg443=reg444+reg443;
    reg601=reg177*reg207; reg603=reg604+reg603; reg604=reg203*reg170; T reg871=reg616*reg141; T reg872=reg205*reg163;
    T reg873=reg211*reg181; reg445=reg446-reg445; T reg874=reg177*reg193; reg447=reg448+reg447; reg226=reg610+reg226;
    reg610=reg194*reg160; T reg875=reg609*reg141; T reg876=reg190*reg163; T reg877=reg188*reg135; T reg878=reg184*reg193;
    T reg879=reg139*reg580; T reg880=reg85*reg170; T reg881=reg193*reg166; T reg882=reg259*reg139; reg280=reg306+reg280;
    reg587=reg639+reg587; reg639=reg211*reg184; T reg883=reg139*reg584; T reg884=reg211*reg166; T reg885=reg247*reg139;
    T reg886=reg178*reg171; reg279=reg300+reg279; T reg887=reg240*reg177; T reg888=reg237*reg158; T reg889=reg214*reg184;
    T reg890=reg139*reg591; T reg891=reg214*reg166; T reg892=reg233*reg139; T reg893=reg328*reg197; T reg894=reg139*reg647;
    T reg895=reg140*reg584; T reg896=reg211*reg156; T reg897=reg201*reg166; T reg898=reg139*reg246; T reg899=reg314+reg353;
    reg585=reg586+reg585; T reg900=reg184*reg240; T reg901=reg139*reg238; reg583=reg640+reg583; reg640=reg286+reg350;
    reg345=reg345+reg344; T reg902=reg179*reg85; T reg903=reg259*reg140; T reg904=reg160*reg193; reg284=reg308+reg284;
    T reg905=reg140*reg580; T reg906=reg193*reg156; reg636=reg637+reg636; reg285=reg285-reg351; T reg907=reg269-reg268;
    T reg908=reg188*reg158; T reg909=reg140*reg246; T reg910=reg201*reg160; T reg911=reg136*reg220; T reg912=reg140*reg647;
    T reg913=reg201*reg156; T reg914=reg166*reg202; reg270=reg267+reg270; T reg915=reg203*reg183; T reg916=reg136*reg262;
    T reg917=reg207*reg170; reg317=reg316+reg317; reg593=reg633+reg593; T reg918=reg136*reg246; T reg919=reg203*reg166;
    T reg920=reg183*reg182; T reg921=reg257*reg136; reg315=reg315-reg314; T reg922=reg140*reg220; T reg923=reg183*reg210;
    T reg924=reg253*reg136; reg276=reg275+reg276; T reg925=reg588+reg590; T reg926=reg140*reg238; T reg927=reg230*reg158;
    T reg928=reg136*reg225; T reg929=reg210*reg166; T reg930=reg178*reg170; T reg931=reg240*reg156; T reg932=reg190*reg170;
    T reg933=reg183*reg212; T reg934=reg136*reg256; reg272=reg265+reg272; T reg935=reg203*reg179; T reg936=reg136*reg227;
    T reg937=reg212*reg166; T reg938=reg183*reg202; T reg939=reg136*reg230; reg231=reg231+reg592; T reg940=reg225*reg144;
    T reg941=reg189*reg156; T reg942=reg641*reg118; T reg943=reg326+reg323; T reg944=reg192*reg171; T reg945=reg262*reg118;
    T reg946=reg179*reg193; reg376=reg376-reg319; T reg947=reg179*reg121; reg579=reg578-reg579; T reg948=reg205*reg179;
    T reg949=reg255*reg118; T reg950=reg616*reg158; T reg951=reg253*reg144; T reg952=reg205*reg156; T reg953=reg616*reg118;
    T reg954=reg211*reg179; reg372=reg372-reg373; T reg955=reg179*reg210; T reg956=reg205*reg171; reg339=reg339-reg340;
    T reg957=reg638+reg572; T reg958=reg205*reg170; T reg959=reg160*reg212; T reg960=reg335+reg337; T reg961=reg227*reg144;
    T reg962=reg255*reg158; T reg963=reg201*reg179; T reg964=reg239*reg158; T reg965=reg192*reg156; T reg966=reg239*reg118;
    T reg967=reg329+reg332; reg574=reg573-reg574; T reg968=reg334*reg118; T reg969=reg121*reg156; T reg970=reg256*reg144;
    T reg971=reg179*reg212; T reg972=reg179*reg189; T reg973=reg160*reg210; T reg974=reg250*reg118; reg581=reg304+reg581;
    reg304=reg171*reg121; T reg975=reg184*reg207; T reg976=reg139*reg341; T reg977=reg247*reg140; T reg978=reg211*reg160;
    T reg979=reg158*reg334; T reg980=reg207*reg166; T reg981=reg139*reg227; reg358=reg269+reg358; reg269=reg211*reg170;
    T reg982=reg184*reg85; T reg983=reg139*reg215; T reg984=reg85*reg166; T reg985=reg139*reg220; T reg986=reg158*reg262;
    reg357=reg316+reg357; reg316=reg644+reg646; T reg987=reg170*reg121; T reg988=reg184*reg201; T reg989=reg190*reg179;
    T reg990=reg188*reg118; T reg991=reg322*reg197; T reg992=reg190*reg156; T reg993=reg609*reg118; reg370=reg371+reg370;
    T reg994=reg214*reg179; reg365=reg365-reg366; T reg995=reg233*reg140; T reg996=reg214*reg160; T reg997=reg140*reg591;
    T reg998=reg214*reg156; T reg999=reg322*reg327; T reg1000=reg201*reg170; reg362=reg275+reg362; reg275=reg184*reg143;
    T reg1001=reg139*reg324; T reg1002=reg143*reg166; T reg1003=reg139*reg225; reg361=reg265+reg361; reg265=reg616*reg131;
    T reg1004=reg205*reg184; T reg1005=reg233*reg149; T reg1006=reg211*reg183; T reg1007=reg230*reg118; T reg1008=reg190*reg173;
    reg501=reg502+reg501; T reg1009=reg179*reg178; T reg1010=reg240*reg170; T reg1011=reg190*reg183; T reg1012=reg188*reg131;
    T reg1013=reg609*reg131; T reg1014=reg190*reg184; T reg1015=reg214*reg183; reg503=reg464+reg503; reg562=reg561+reg562;
    T reg1016=reg211*reg173; T reg1017=reg205*reg177; T reg1018=reg616*reg142; T reg1019=reg328*reg327; T reg1020=reg183*reg240;
    T reg1021=reg495-reg494; T reg1022=reg257*reg144; reg558=reg557+reg558; T reg1023=reg214*reg173; T reg1024=reg190*reg177;
    T reg1025=reg609*reg142; T reg1026=reg183*reg189; T reg1027=reg131*reg250; T reg1028=reg131*reg641; T reg1029=reg184*reg189;
    T reg1030=reg309*reg321; T reg1031=reg183*reg193; reg496=reg497+reg496; T reg1032=reg309*reg327; T reg1033=reg188*reg142;
    T reg1034=reg205*reg183; T reg1035=reg255*reg131; T reg1036=reg187*reg213; reg364=reg343+reg364; T reg1037=reg177*reg189;
    T reg1038=reg142*reg641; T reg1039=reg142*reg250; T reg1040=reg213*reg170; T reg1041=reg162*reg215; T reg1042=reg163*reg85;
    reg476=reg479+reg476; reg479=reg189*reg173; T reg1043=reg338-reg336; T reg1044=reg242*reg144; T reg1045=reg568-reg569;
    reg480=reg511+reg480; reg511=reg240*reg173; T reg1046=reg162*reg647; T reg1047=reg201*reg163; T reg1048=reg187*reg194;
    reg481=reg526+reg481; reg526=reg192*reg177; T reg1049=reg239*reg142; T reg1050=reg177*reg143; T reg1051=reg255*reg142;
    reg466=reg546+reg466; reg546=reg205*reg173; reg567=reg626+reg567; reg626=reg162*reg324; T reg1052=reg163*reg143;
    reg467=reg465+reg467; reg468=reg469+reg468; reg469=reg193*reg170; T reg1053=reg332+reg258; reg470=reg506+reg470;
    reg564=reg563+reg564; reg506=reg162*reg341; T reg1054=reg163*reg207; reg471=reg472+reg471; reg472=reg193*reg173;
    T reg1055=reg188*reg149; reg266=reg266-reg363; T reg1056=reg179*reg207; reg218=reg223+reg218; T reg1057=reg247*reg136;
    T reg1058=reg194*reg166; reg550=reg644+reg550; reg644=reg213*reg183; T reg1059=reg188*reg136; reg302=reg300+reg302;
    reg300=reg140*reg227; T reg1060=reg160*reg207; T reg1061=reg233*reg136; T reg1062=reg213*reg166; T reg1063=reg328*reg321;
    T reg1064=reg140*reg341; T reg1065=reg208*reg183; T reg1066=reg253*reg131; T reg1067=reg207*reg156; T reg1068=reg287*reg131;
    T reg1069=reg208*reg184; T reg1070=reg238*reg132; reg551=reg573+reg551; reg298=reg299+reg298; reg573=reg85*reg160;
    T reg1071=reg204*reg171; T reg1072=reg136*reg242; T reg1073=reg182*reg166; T reg1074=reg645*reg158; T reg1075=reg183*reg200;
    T reg1076=reg136*reg250; T reg1077=reg609*reg158; T reg1078=reg262*reg144; reg310=reg308+reg310; reg595=reg594+reg595;
    reg219=reg633-reg219; reg308=reg259*reg136; reg633=reg200*reg166; T reg1079=reg194*reg183; T reg1080=reg255*reg136;
    T reg1081=reg256*reg158; reg307=reg306+reg307; reg306=reg190*reg171; T reg1082=reg204*reg170; T reg1083=reg183*reg85;
    reg483=reg483-reg484; T reg1084=reg143*reg156; T reg1085=reg183*reg121; T reg1086=reg131*reg262; T reg1087=reg131*reg334;
    T reg1088=reg184*reg121; T reg1089=reg246*reg144; T reg1090=reg203*reg160; T reg1091=reg183*reg201; reg487=reg488+reg487;
    reg555=reg578+reg555; reg252=reg643+reg252; reg578=reg253*reg158; T reg1092=reg490+reg489; T reg1093=reg264*reg327;
    T reg1094=reg182*reg179; T reg1095=reg208*reg170; T reg1096=reg131*reg239; T reg1097=reg184*reg192; T reg1098=reg183*reg143;
    reg295=reg294+reg295; T reg1099=reg214*reg170; T reg1100=reg140*reg225; T reg1101=reg170*reg143; T reg1102=reg183*reg204;
    T reg1103=reg131*reg256; T reg1104=reg131*reg645; T reg1105=reg184*reg204; T reg1106=reg183*reg207; reg293=reg291+reg293;
    T reg1107=reg160*reg143; reg554=reg556+reg554; T reg1108=reg140*reg324; T reg1109=reg183*reg178; T reg1110=reg131*reg230;
    T reg1111=reg208*reg171; T reg1112=reg131*reg237; T reg1113=reg184*reg178; T reg1114=reg287*reg158; T reg1115=reg259*reg157;
    T reg1116=reg165*reg200; T reg1117=reg647*reg159; T reg1118=reg194*reg185; T reg1119=reg255*reg157; T reg1120=reg201*reg171;
    reg303=reg305+reg303; T reg1121=reg247*reg157; T reg1122=reg194*reg165; T reg1123=reg185*reg213; T reg1124=reg188*reg157;
    reg311=reg312+reg311; T reg1125=reg233*reg157; T reg1126=reg165*reg213; T reg1127=reg1*reg321; reg313=reg386+reg313;
    reg386=reg208*reg185; T reg1128=reg253*reg138; T reg1129=reg287*reg138; T reg1130=reg492-reg493; T reg1131=reg157*reg220;
    T reg1132=reg165*reg202; T reg1133=reg399+reg491; T reg1134=reg185*reg203; T reg1135=reg157*reg262; reg486=reg485+reg486;
    T reg1136=reg157*reg246; T reg1137=reg165*reg203; T reg1138=reg185*reg182; T reg1139=reg157*reg257; T reg1140=reg246*reg159;
    reg289=reg289-reg290; T reg1141=reg187*reg201; T reg1142=reg157*reg242; T reg1143=reg165*reg182; T reg1144=reg185*reg200;
    T reg1145=reg157*reg250; reg296=reg297+reg296; T reg1146=reg85*reg171; T reg1147=reg138*reg334; T reg1148=reg186*reg121;
    T reg1149=reg185*reg201; reg282=reg283+reg282; T reg1150=reg349+reg348; T reg1151=reg138*reg239; T reg1152=reg186*reg192;
    T reg1153=reg185*reg240; T reg1154=reg355-reg354; reg352=reg455+reg352; reg455=reg185*reg189; T reg1155=reg138*reg250;
    T reg1156=reg138*reg641; T reg1157=reg186*reg189; T reg1158=reg185*reg193; reg359=reg360+reg359; T reg1159=reg185*reg205;
    T reg1160=reg255*reg138; T reg1161=reg208*reg186; T reg1162=reg185*reg143; reg318=reg271+reg318; T reg1163=reg185*reg204;
    T reg1164=reg138*reg256; T reg1165=reg220*reg159; T reg1166=reg138*reg645; T reg1167=reg186*reg204; T reg1168=reg187*reg85;
    T reg1169=reg185*reg207; reg273=reg274+reg273; T reg1170=reg185*reg178; T reg1171=reg138*reg230; T reg1172=reg138*reg237;
    T reg1173=reg186*reg178; T reg1174=reg185*reg85; reg277=reg277-reg278; T reg1175=reg159*reg215; T reg1176=reg185*reg121;
    T reg1177=reg138*reg262; T reg1178=reg127*reg225; reg518=reg532+reg518; reg513=reg498+reg513; reg532=reg186*reg207;
    T reg1179=reg127*reg341; T reg1180=reg165*reg207; T reg1181=reg127*reg227; reg508=reg492+reg508; reg492=reg259*reg159;
    T reg1182=reg186*reg85; T reg1183=reg127*reg215; T reg1184=reg187*reg193; T reg1185=reg165*reg85; T reg1186=reg127*reg220;
    reg547=reg485+reg547; reg485=reg186*reg201; T reg1187=reg127*reg647; T reg1188=reg165*reg201; T reg1189=reg127*reg246;
    T reg1190=reg205*reg175; T reg1191=reg255*reg151; T reg1192=reg616*reg151; T reg1193=reg205*reg176; T reg1194=reg211*reg175;
    reg401=reg400+reg401; T reg1195=reg584*reg159; T reg1196=reg190*reg175; T reg1197=reg151*reg188; T reg1198=reg211*reg171;
    T reg1199=reg151*reg609; T reg1200=reg190*reg176; T reg1201=reg214*reg175; reg524=reg523+reg524; T reg1202=reg331*reg327;
    reg521=reg504+reg521; T reg1203=reg186*reg143; T reg1204=reg127*reg324; T reg1205=reg165*reg143; T reg1206=reg127*reg591;
    T reg1207=reg475+reg473; T reg1208=reg165*reg214; T reg1209=reg233*reg127; T reg1210=reg1*reg197; T reg1211=reg185*reg210;
    T reg1212=reg253*reg157; reg463=reg504+reg463; reg504=reg157*reg225; T reg1213=reg165*reg210; T reg1214=reg238*reg159;
    T reg1215=reg185*reg212; reg500=reg499+reg500; T reg1216=reg240*reg171; T reg1217=reg287*reg141; T reg1218=reg157*reg227;
    T reg1219=reg165*reg212; T reg1220=reg185*reg202; T reg1221=reg157*reg230; T reg1222=reg580*reg159; T reg1223=reg290+reg542;
    T reg1224=reg193*reg171; T reg1225=reg186*reg240; T reg1226=reg127*reg238; T reg1227=reg536+reg537; reg533=reg297+reg533;
    reg297=reg186*reg193; T reg1228=reg127*reg580; T reg1229=reg165*reg193; T reg1230=reg259*reg127; reg530=reg509+reg530;
    reg482=reg305+reg482; reg305=reg181*reg200; reg509=reg122*reg250; reg478=reg477-reg478; reg477=reg211*reg165;
    T reg1231=reg247*reg127; reg474=reg312+reg474; reg312=reg186*reg214; T reg1232=reg220*reg92; T reg1233=reg164*reg202;
    T reg1234=reg203*reg167; T reg1235=reg262*reg92; reg565=reg566+reg565; T reg1236=reg246*reg92; T reg1237=reg164*reg203;
    T reg1238=reg182*reg167; T reg1239=reg257*reg92; reg209=reg209-reg617; T reg1240=reg242*reg92; T reg1241=reg164*reg182;
    T reg1242=reg200*reg167; T reg1243=reg220*reg150; reg620=reg605+reg620; reg622=reg622+reg621; T reg1244=reg178*reg167;
    T reg1245=reg230*reg81; T reg1246=reg250*reg92; reg589=reg623+reg589; T reg1247=reg214*reg168; T reg1248=reg591*reg150;
    T reg1249=reg214*reg164; T reg1250=reg233*reg150; T reg1251=reg301*reg197; T reg1252=reg210*reg167; T reg1253=reg253*reg92;
    reg548=reg549+reg548; T reg1254=reg225*reg92; T reg1255=reg164*reg210; T reg1256=reg212*reg167; T reg1257=reg256*reg92;
    reg552=reg553+reg552; T reg1258=reg227*reg92; reg212=reg164*reg212; T reg1259=reg167*reg202; T reg1260=reg230*reg92;
    T reg1261=reg560-reg559; reg248=reg608+reg248; T reg1262=reg259*reg92; T reg1263=reg164*reg200; T reg1264=reg194*reg167;
    T reg1265=reg255*reg92; reg631=reg630+reg631; T reg1266=reg247*reg92; T reg1267=reg194*reg164; T reg1268=reg213*reg167;
    T reg1269=reg188*reg92; reg217=reg623+reg217; reg623=reg233*reg92; T reg1270=reg213*reg164; T reg1271=reg301*reg321;
    T reg1272=reg208*reg167; reg630=reg241+reg630; reg241=reg208*reg168; T reg1273=reg287*reg81; T reg1274=reg178*reg168;
    T reg1275=reg237*reg81; T reg1276=reg85*reg167; T reg1277=reg239*reg81; T reg1278=reg240*reg167; T reg1279=reg627-reg629;
    reg598=reg598+reg632; T reg1280=reg600+reg599; T reg1281=reg192*reg168; T reg1282=reg190*reg167; T reg1283=reg188*reg81;
    T reg1284=reg190*reg168; T reg1285=reg609*reg81; T reg1286=reg214*reg167; reg251=reg251+reg612; T reg1287=reg205*reg167;
    T reg1288=reg255*reg81; T reg1289=reg205*reg168; T reg1290=reg616*reg81; T reg1291=reg211*reg167; reg333=reg553+reg333;
    reg553=reg207*reg168; T reg1292=reg150*reg341; T reg1293=reg164*reg207; T reg1294=reg227*reg150; reg342=reg426+reg342;
    reg346=reg560+reg346; reg426=reg85*reg168; reg560=reg150*reg215; reg288=reg288-reg356; T reg1295=reg167*reg121;
    T reg1296=reg81*reg262; T reg1297=reg121*reg168; T reg1298=reg81*reg334; T reg1299=reg225*reg159; T reg1300=reg201*reg167;
    T reg1301=reg301*reg327; T reg1302=reg143*reg167; reg263=reg263+reg368; reg227=reg227*reg159; reg616=reg616*reg138;
    reg205=reg186*reg205; T reg1303=reg187*reg207; T reg1304=reg185*reg211; reg367=reg369+reg367; T reg1305=reg185*reg190;
    T reg1306=reg188*reg138; reg609=reg609*reg138; reg190=reg186*reg190; T reg1307=reg185*reg214; reg374=reg375+reg374;
    T reg1308=reg1*reg327; reg341=reg159*reg341; reg320=reg549+reg320; reg549=reg207*reg171; T reg1309=reg143*reg168;
    T reg1310=reg150*reg324; T reg1311=reg164*reg143; T reg1312=reg225*reg150; reg647=reg647*reg150; T reg1313=reg164*reg201;
    T reg1314=reg246*reg150; reg243=reg433+reg243; T reg1315=reg617+reg635; T reg1316=reg240*reg168; reg238=reg238*reg150;
    T reg1317=reg576+reg575; reg577=reg605+reg577; reg605=reg193*reg168; reg580=reg580*reg150; T reg1318=reg164*reg193;
    T reg1319=reg259*reg150; T reg1320=reg157*reg256; reg498=reg582+reg498; reg582=reg211*reg168; T reg1321=reg584*reg150;
    T reg1322=reg211*reg164; T reg1323=reg247*reg150; T reg1324=reg187*reg143; T reg1325=reg204*reg167; T reg1326=reg256*reg81;
    T reg1327=reg204*reg168; T reg1328=reg645*reg81; T reg1329=reg207*reg167; T reg1330=reg189*reg167; T reg1331=reg250*reg81;
    reg324=reg159*reg324; T reg1332=reg189*reg168; T reg1333=reg641*reg81; T reg1334=reg253*reg81; T reg1335=reg171*reg143;
    T reg1336=reg193*reg167; reg613=reg613+reg642; T reg1337=reg164*reg85; T reg1338=reg186*reg211; reg584=reg127*reg584;
    reg228=reg566+reg228; reg566=reg201*reg168; T reg1339=reg213*reg175; T reg1340=reg175*reg121; T reg1341=reg233*reg159;
    reg450=reg449+reg450; T reg1342=reg175*reg189; reg259=reg259*reg153; reg436=reg435+reg436; reg435=reg200*reg174;
    T reg1343=reg377+reg378; reg121=reg176*reg121; T reg1344=reg253*reg151; T reg1345=reg214*reg171; T reg1346=reg309*reg197;
    reg253=reg253*reg149; reg189=reg176*reg189; reg211=reg187*reg211; T reg1347=reg175*reg204; reg431=reg433+reg431;
    reg433=reg208*reg175; T reg1348=reg153*reg262; T reg1349=reg153*reg250; T reg1350=reg247*reg159; T reg1351=reg257*reg153;
    reg250=reg151*reg250; T reg1352=reg182*reg175; reg424=reg423+reg424; reg423=reg178*reg176; reg262=reg151*reg262;
    T reg1353=reg151*reg237; reg287=reg287*reg151; reg208=reg208*reg176; reg458=reg457+reg458; reg457=reg203*reg174;
    reg246=reg246*reg153; reg239=reg151*reg239; T reg1354=reg192*reg176; reg214=reg187*reg214; reg188=reg188*reg153;
    reg430=reg430-reg429; reg641=reg151*reg641; reg334=reg151*reg334; reg143=reg175*reg143; reg233=reg233*reg153;
    reg407=reg406+reg407; T reg1355=reg242*reg153; reg591=reg591*reg159; reg182=reg182*reg174; reg210=reg210*reg170;
    reg204=reg176*reg204; T reg1356=reg174*reg202; reg213=reg213*reg174; T reg1357=reg240*reg175; reg383=reg465+reg383;
    reg391=reg391-reg390; reg201=reg201*reg175; reg381=reg380+reg381; reg220=reg220*reg153; reg465=reg331*reg321;
    reg462=reg461+reg462; reg207=reg175*reg207; reg442=reg441+reg442; reg461=reg414-reg415; reg225=reg225*reg149;
    reg230=reg151*reg230; reg178=reg178*reg175; reg256=reg151*reg256; T reg1358=reg194*reg174; reg203=reg203*reg175;
    reg193=reg175*reg193; reg247=reg247*reg153; reg85=reg85*reg175; reg200=reg200*reg175; reg194=reg194*reg175;
    reg645=reg151*reg645; reg255=reg255*reg153; reg867=reg868+reg867; reg868=reg49*reg967; T reg1359=reg49*reg943;
    reg941=reg942-reg941; reg339=reg339+reg963; reg1293=reg1294+reg1293; reg1309=reg1310+reg1309; reg465=(*f.m).density*reg465;
    reg774=reg775+reg774; reg952=reg953-reg952; reg458=reg1201+reg458; reg233=reg213+reg233; reg376=reg376+reg946;
    reg964=reg964-reg944; reg549=reg341+reg549; reg972=reg974+reg972; reg1308=(*f.m).density*reg1308; reg213=reg49*reg960;
    reg553=reg1292+reg553; reg966=reg966+reg965; reg459=reg459-reg390; reg320=reg368+reg320; reg1311=reg1312+reg1311;
    reg948=reg949+reg948; reg333=reg621+reg333; reg778=reg866+reg778; reg770=reg773+reg770; reg786=reg787+reg786;
    reg784=(*f.m).density*reg784; reg1324=reg1299+reg1324; reg765=reg762-reg765; reg1327=reg1328+reg1327; reg247=reg1358+reg247;
    reg292=reg994+reg292; reg622=reg622+reg1329; reg763=reg763-reg771; reg870=reg610-reg870; reg1330=reg1331+reg1330;
    reg789=reg790+reg789; reg221=reg954+reg221; reg844=reg694+reg844; reg210=reg253+reg210; reg823=reg823-reg827;
    reg1332=reg1333+reg1332; reg785=reg785-reg788; reg842=reg843-reg842; reg414=reg414-reg757; reg249=reg946+reg249;
    reg613=reg613+reg1336; reg776=reg880+reg776; reg780=reg780-reg781; reg969=reg968-reg969; reg346=reg346-reg356;
    reg947=reg945+reg947; reg342=reg267+reg342; reg426=reg426-reg560; reg345=reg345+reg902; reg253=reg49*reg364;
    reg1043=reg1043-reg1010; reg1295=reg1296+reg1295; reg1009=reg1007+reg1009; reg782=reg783+reg782; reg1297=reg1298+reg1297;
    reg266=reg266+reg1056; reg717=reg711-reg717; reg598=reg598+reg1300; reg460=reg380+reg460; reg701=reg700+reg701;
    reg1301=(*f.m).density*reg1301; reg1339=reg188+reg1339; reg263=reg263+reg1302; reg347=reg347+reg678; reg438=reg854-reg438;
    reg1325=reg1326+reg1325; reg272=reg1106+reg272; reg930=reg927+reg930; reg188=reg49*reg447; reg933=reg934+reg933;
    reg1168=reg1165+reg1168; reg1170=reg1171+reg1170; reg928=reg929+reg928; reg1347=reg256+reg1347; reg276=reg1098+reg276;
    reg1173=reg1173-reg1172; reg923=reg924+reg923; reg893=(*f.m).density*reg893; reg891=reg892+reg891; reg886=reg886-reg888;
    reg277=reg277+reg1174; reg875=reg876-reg875; reg889=reg890+reg889; reg214=reg1341+reg214; reg279=reg464+reg279;
    reg1176=reg1177+reg1176; reg884=reg885+reg884; reg451=reg451-reg857; reg639=reg883+reg639; reg1147=reg1148+reg1147;
    reg280=reg502+reg280; reg880=reg285+reg880; reg1125=reg1126+reg1125; reg1075=reg1076+reg1075; reg442=reg442+reg207;
    reg1127=(*f.m).density*reg1127; reg1073=reg1073-reg1072; reg386=reg1128+reg386; reg315=reg315-reg1020; reg871=reg872-reg871;
    reg920=reg920-reg921; reg313=reg371+reg313; reg918=reg919+reg918; reg270=reg270+reg917; reg1129=reg1161+reg1129;
    reg604=reg869+reg604; reg317=reg1091+reg317; reg318=reg318+reg1162; reg915=reg916+reg915; reg445=reg445-reg873;
    reg911=reg911-reg914; reg1163=reg1164+reg1163; reg645=reg204+reg645; reg907=reg1083+reg907; reg1166=reg1167+reg1166;
    reg939=reg939-reg938; reg936=reg937+reg936; reg273=reg273+reg1169; reg358=reg358-reg484; reg979=reg304+reg979;
    reg359=reg359+reg1158; reg980=reg981+reg980; reg975=reg976+reg975; reg1159=reg1160+reg1159; reg361=reg291+reg361;
    reg864=reg865+reg864; reg1002=reg1003+reg1002; reg616=reg205+reg616; reg275=reg1001+reg275; reg370=reg370+reg1000;
    reg433=reg1344+reg433; reg362=reg294+reg362; reg367=reg367+reg1304; reg999=(*f.m).density*reg999; reg454=reg441+reg454;
    reg1303=reg227+reg1303; reg994=reg365+reg994; reg1305=reg1306+reg1305; reg1346=(*f.m).density*reg1346; reg992=reg993-reg992;
    reg609=reg190+reg609; reg989=reg990+reg989; reg374=reg374+reg1307; reg954=reg372+reg954; reg450=reg450+reg143;
    reg1146=reg1146-reg1175; reg881=reg882+reg881; reg282=reg282+reg1149; reg878=reg879+reg878; reg284=reg497+reg284;
    reg190=reg49*reg1150; reg860=(*f.m).density*reg860; reg204=reg49*reg640; reg1151=reg1151-reg1152; reg901=reg901-reg900;
    reg1154=reg1154-reg1153; reg495=reg495-reg899; reg453=reg449+reg453; reg897=reg898+reg897; reg987=reg986+reg987;
    reg287=reg208+reg287; reg988=reg894+reg988; reg455=reg1155+reg455; reg861=reg861-reg856; reg357=reg488+reg357;
    reg352=reg352-reg351; reg1156=reg1157+reg1156; reg984=reg985+reg984; reg862=reg863+reg862; reg982=reg982-reg983;
    reg235=reg624+reg235; reg659=reg658+reg659; reg288=reg1276+reg288; reg432=reg143+reg432; reg1352=reg1352-reg1351;
    reg254=reg254+reg693; reg1279=reg1279-reg1278; reg628=reg670+reg628; reg831=reg848+reg831; reg834=(*f.m).density*reg834;
    reg143=reg49*reg1280; reg836=reg835+reg836; reg601=reg858+reg601; reg1277=reg1277-reg1281; reg602=reg1023+reg602;
    reg796=reg797+reg796; reg855=reg877+reg855; reg1282=reg1283+reg1282; reg246=reg457+reg246; reg434=reg859+reg434;
    reg1284=reg1285+reg1284; reg607=reg1016+reg607; reg779=reg777+reg779; reg758=reg816+reg758; reg756=reg791+reg756;
    reg251=reg251+reg1286; reg1038=reg1037+reg1038; reg479=reg1039+reg479; reg1238=reg1238-reg1239; reg427=reg917+reg427;
    reg1045=reg1045-reg511; reg1050=reg715+reg1050; reg1049=reg1049-reg526; reg209=reg209-reg1278; reg817=reg818+reg817;
    reg205=reg49*reg714; reg1241=reg1241-reg1240; reg430=reg430-reg1357; reg260=reg260+reg538; reg1242=reg1246+reg1242;
    reg721=reg720+reg721; reg819=(*f.m).density*reg819; reg541=reg697+reg541; reg738=reg727+reg738; reg1336=reg620+reg1336;
    reg191=reg191+reg545; reg723=reg723-reg726; reg1244=reg1245+reg1244; reg821=reg822+reg821; reg731=reg728+reg731;
    reg1274=reg1274-reg1275; reg234=reg234+reg734; reg655=reg649+reg655; reg229=reg734+reg229; reg673=reg674+reg673;
    reg682=reg668+reg682; reg1268=reg1269+reg1268; reg683=reg671+reg683; reg805=reg805-reg804; reg1286=reg217+reg1286;
    reg224=reg693+reg224; reg753=reg755+reg753; reg623=reg1270+reg623; reg751=(*f.m).density*reg751; reg225=reg806+reg225;
    reg737=reg746+reg737; reg1271=(*f.m).density*reg1271; reg710=reg736+reg710; reg568=reg568-reg745; reg244=reg557+reg244;
    reg1334=reg1272+reg1334; reg440=reg85+reg440; reg608=reg630+reg608; reg874=reg732+reg874; reg241=reg1273+reg241;
    reg226=reg563+reg226; reg220=reg220-reg1356; reg208=reg49*reg849; reg1070=reg1070-reg887; reg799=reg800+reg799;
    reg611=reg472+reg611; reg1287=reg1288+reg1287; reg436=reg201+reg436; reg792=reg820+reg792; reg798=reg795+reg798;
    reg793=reg793-reg794; reg1289=reg1290+reg1289; reg615=reg615-reg511; reg198=reg198-reg619; reg437=reg207+reg437;
    reg801=reg801-reg807; reg248=reg248+reg1291; reg810=reg813+reg810; reg1262=reg1263+reg1262; reg603=reg538+reg603;
    reg829=reg830+reg829; reg824=reg824-reg828; reg850=reg850-reg845; reg1264=reg1265+reg1264; reg802=reg803+reg802;
    reg597=reg545+reg597; reg1291=reg631+reg1291; reg847=reg847-reg846; reg679=reg841+reg679; reg1266=reg1267+reg1266;
    reg203=reg1348+reg203; reg422=reg406+reg422; reg574=reg1056+reg574; reg971=reg971-reg970; reg642=reg577+reg642;
    reg940=reg973-reg940; reg950=reg956+reg950; reg605=reg580+reg605; reg579=reg678+reg579; reg955=reg955-reg951;
    reg1318=reg1319+reg1318; reg991=(*f.m).density*reg991; reg767=reg768+reg767; reg996=reg995+reg996; reg998=reg997-reg998;
    reg259=reg435+reg259; reg366=reg581-reg366; reg585=reg585+reg269; reg1169=reg498+reg1169; reg978=reg977+reg978;
    reg896=reg895-reg896; reg582=reg1321+reg582; reg766=reg764+reg766; reg373=reg583-reg373; reg1322=reg1323+reg1322;
    reg904=reg903+reg904; reg769=reg772+reg769; reg906=reg905-reg906; reg462=reg1194+reg462; reg733=reg733-reg653;
    reg1335=reg324+reg1335; reg719=reg719+reg1044; reg252=reg252+reg469; reg1337=reg1243+reg1337; reg207=reg49*reg1053;
    reg1338=reg584+reg1338; reg760=reg760-reg759; reg1094=reg1022+reg1094; reg228=reg632+reg228; reg1089=reg1090-reg1089;
    reg566=reg647+reg566; reg219=reg963+reg219; reg935=reg935-reg1078; reg1313=reg1314+reg1313; reg217=reg49*reg761;
    reg227=reg49*reg636; reg627=reg627-reg1315; reg316=reg902+reg316; reg958=reg962+reg958; reg194=reg255+reg194;
    reg243=reg299+reg243; reg255=reg49*reg957; reg238=reg238-reg1316; reg961=reg959-reg961; reg256=reg49*reg1317;
    reg1107=reg1100+reg1107; reg1329=reg552+reg1329; reg811=reg812+reg811; reg1084=reg1108-reg1084; reg1258=reg212+reg1258;
    reg200=reg1349+reg200; reg325=reg555-reg325; reg1093=(*f.m).density*reg1093; reg1260=reg1260-reg1259; reg431=reg1101+reg431;
    reg1023=reg558+reg1023; reg1032=(*f.m).density*reg1032; reg1025=reg1024+reg1025; reg1261=reg1276+reg1261; reg428=reg523+reg428;
    reg1008=reg1033+reg1008; reg1232=reg1232-reg1233; reg1016=reg562+reg1016; reg1018=reg1017+reg1018; reg567=reg625+reg567;
    reg1234=reg1235+reg1234; reg182=reg182-reg1355; reg546=reg1051+reg546; reg1300=reg565+reg1300; reg814=reg815+reg814;
    reg472=reg564+reg472; reg1236=reg1237+reg1236; reg589=reg612+reg589; reg319=reg587-reg319; reg212=reg49*reg925;
    reg932=reg908+reg932; reg1247=reg1248+reg1247; reg926=reg926+reg931; reg1249=reg1250+reg1249; reg267=reg49*reg231;
    reg425=reg400+reg425; reg424=reg193+reg424; reg1251=(*f.m).density*reg1251; reg910=reg909+reg910; reg913=reg912-reg913;
    reg1252=reg1253+reg1252; reg340=reg593-reg340; reg1077=reg306+reg1077; reg573=reg922+reg573; reg1302=reg548+reg1302;
    reg808=reg809+reg808; reg285=reg49*reg595; reg1254=reg1255+reg1254; reg550=reg344+reg550; reg1060=reg300+reg1060;
    reg1067=reg1064-reg1067; reg554=reg554+reg1099; reg1256=reg1257+reg1256; reg363=reg551-reg363; reg480=reg385-reg480;
    reg291=reg49*reg476; reg1040=reg1055+reg1040; reg477=reg1231+reg477; reg1042=reg1042+reg1041; reg474=reg375+reg474;
    reg294=reg49*reg218; reg312=reg1206+reg312; reg851=reg852-reg851; reg299=reg49*reg471; reg506=reg1054-reg506;
    reg1208=reg1209+reg1208; reg201=reg381+reg201; reg470=reg413-reg470; reg467=reg1099+reg467; reg1210=(*f.m).density*reg1210;
    reg300=reg49*reg468; reg304=reg49*reg1207; reg1211=reg1212+reg1211; reg626=reg1052-reg626; reg533=reg360+reg533;
    reg306=reg49*reg418; reg716=reg718-reg716; reg297=reg1228+reg297; reg239=reg239-reg1354; reg531=reg397-reg531;
    reg324=reg713+reg712; reg1229=reg1230+reg1229; reg383=reg556+reg383; reg341=reg49*reg528; reg708=reg1048+reg708;
    reg360=reg49*reg1343; reg393=reg393+reg709; reg482=reg369+reg482; reg840=reg680+reg840; reg530=reg643+reg530;
    reg305=reg509-reg305; reg365=reg49*reg481; reg368=reg49*reg379; reg1046=reg1047-reg1046; reg478=reg478-reg606;
    reg369=reg49*reg388; reg1340=reg262+reg1340; reg1028=reg1029+reg1028; reg1026=reg1027+reg1026; reg1130=reg1174+reg1130;
    reg1131=reg1131-reg1132; reg1021=reg1021-reg1020; reg1095=reg578+reg1095; reg1096=reg1096-reg1097; reg1134=reg1135+reg1134;
    reg833=reg833+reg832; reg262=reg49*reg1092; reg338=reg338-reg1133; reg486=reg1149+reg486; reg85=reg391+reg85;
    reg1091=reg487+reg1091; reg1087=reg1088+reg1087; reg1136=reg1137+reg1136; reg1085=reg1086+reg1085; reg1114=reg1111+reg1114;
    reg1345=reg591+reg1345; reg384=reg384-reg853; reg466=reg409-reg466; reg463=reg1162+reg463; reg1019=(*f.m).density*reg1019;
    reg504=reg1213+reg504; reg503=reg503+reg1015; reg334=reg121+reg334; reg1013=reg1014+reg1013; reg1011=reg1012+reg1011;
    reg1005=reg1036+reg1005; reg1215=reg1320+reg1215; reg121=reg826+reg825; reg501=reg501+reg1006; reg1217=reg692-reg1217;
    reg265=reg1004+reg265; reg1214=reg1214-reg1216; reg1218=reg1219+reg1218; reg1034=reg1035+reg1034; reg1030=(*f.m).density*reg1030;
    reg496=reg496+reg1031; reg1221=reg1221-reg1220; reg1198=reg1195+reg1198; reg664=reg666-reg664; reg1201=reg524+reg1201;
    reg661=reg662-reg661; reg1202=(*f.m).density*reg1202; reg656=reg657+reg656; reg618=reg522+reg618; reg521=reg271+reg521;
    reg271=reg49*reg410; reg667=reg665+reg667; reg669=reg735+reg669; reg1203=reg1204+reg1203; reg371=reg49*reg519;
    reg641=reg189+reg641; reg1205=reg1178+reg1205; reg517=reg832+reg517; reg672=reg672-reg695; reg189=reg49*reg514;
    reg513=reg274+reg513; reg675=reg676-reg675; reg729=reg730-reg729; reg1190=reg1191+reg1190; reg689=reg690+reg689;
    reg561=reg405+reg561; reg404=reg404-reg1010; reg1192=reg1193+reg1192; reg687=reg688+reg687; reg274=reg49*reg500;
    reg754=reg691+reg754; reg686=(*f.m).density*reg686; reg684=reg685-reg684; reg1194=reg401+reg1194; reg211=reg1350+reg211;
    reg857=reg403-reg857; reg1196=reg1197+reg1196; reg651=reg650-reg651; reg408=reg408-reg696; reg654=reg652-reg654;
    reg1199=reg1200+reg1199; reg193=reg407+reg193; reg873=reg398-reg873; reg660=reg660-reg663; reg372=reg49*reg416;
    reg696=reg505-reg696; reg485=reg1187+reg485; reg706=reg707-reg706; reg704=reg402+reg704; reg705=(*f.m).density*reg705;
    reg1188=reg1189+reg1188; reg375=reg49*reg544; reg461=reg461-reg1357; reg702=reg703-reg702; reg355=reg355-reg1223;
    reg839=reg839+reg681; reg543=reg452-reg543; reg1226=reg1226-reg1225; reg380=reg49*reg540; reg698=reg699-reg698;
    reg534=reg269+reg534; reg1224=reg1222+reg1224; reg539=reg446-reg539; reg269=reg49*reg1227; reg381=reg49*reg535;
    reg510=reg469+reg510; reg518=reg586+reg518; reg532=reg1179+reg532; reg853=reg512-reg853; reg724=reg725-reg724;
    reg1180=reg1181+reg1180; reg722=reg722+reg525; reg508=reg508-reg278; reg412=reg412-reg677; reg385=reg49*reg752;
    reg750=reg750+reg749; reg1182=reg1182-reg1183; reg1342=reg250+reg1342; reg747=reg748-reg747; reg744=reg741+reg744;
    reg677=reg507-reg677; reg1185=reg1186+reg1185; reg742=reg743-reg742; reg1184=reg492+reg1184; reg547=reg283+reg547;
    reg739=reg740-reg739; reg1120=reg1117+reg1120; reg1104=reg1105+reg1104; reg1057=reg1058+reg1057; reg1141=reg1140+reg1141;
    reg1121=reg1122+reg1121; reg1106=reg293+reg1106; reg307=reg1006+reg307; reg423=reg423-reg1353; reg1143=reg1143-reg1142;
    reg1123=reg1124+reg1123; reg1079=reg1080+reg1079; reg1109=reg1110+reg1109; reg250=reg49*reg443; reg289=reg289-reg1153;
    reg1113=reg1113-reg1112; reg308=reg633+reg308; reg283=reg49*reg394; reg1065=reg1066+reg1065; reg1063=(*f.m).density*reg1063;
    reg1118=reg1119+reg1118; reg1115=reg1116+reg1115; reg1068=reg1069+reg1068; reg606=reg396-reg606; reg1061=reg1062+reg1061;
    reg302=reg1015+reg302; reg1098=reg295+reg1098; reg296=reg1158+reg296; reg303=reg1304+reg303; reg178=reg230+reg178;
    reg837=reg838-reg837; reg644=reg1059+reg644; reg1102=reg1103+reg1102; reg1144=reg1145+reg1144; reg1101=reg298+reg1101;
    reg1082=reg1081+reg1082; reg310=reg1031+reg310; reg1074=reg1071+reg1074; reg311=reg1307+reg311; reg1138=reg1138-reg1139;
    reg387=reg1000+reg387; reg1083=reg483+reg1083; reg230=reg49*reg860; reg1234=reg49*reg1234; reg293=ponderation*reg188;
    reg1018=reg49*reg1018; reg295=ponderation*reg372; reg930=reg49*reg930; reg677=reg49*reg677; reg546=reg49*reg546;
    reg814=reg49*reg814; reg1300=reg49*reg1300; reg936=reg49*reg936; reg1185=reg49*reg1185; reg472=reg49*reg472;
    reg298=reg49*reg686; reg1236=reg49*reg1236; reg1342=reg49*reg1342; reg241=reg49*reg241; reg1038=reg49*reg1038;
    reg302=reg49*reg302; reg428=reg49*reg428; reg485=reg49*reg485; reg1023=reg49*reg1023; reg1184=reg49*reg1184;
    reg391=reg49*reg819; reg1261=reg49*reg1261; reg272=reg49*reg272; reg1025=reg49*reg1025; reg739=reg49*reg739;
    reg1082=reg49*reg1082; reg1008=reg49*reg1008; reg1232=reg49*reg1232; reg310=reg49*reg310; reg547=reg49*reg547;
    reg273=reg49*reg273; reg742=reg49*reg742; reg1016=reg49*reg1016; reg567=reg49*reg567; reg1241=reg49*reg1241;
    reg561=reg49*reg561; reg644=reg49*reg644; reg1166=reg49*reg1166; reg396=reg49*reg1019; reg508=reg49*reg508;
    reg260=reg49*reg260; reg397=reg49*reg1346; reg1242=reg49*reg1242; reg412=reg49*reg412; reg721=reg49*reg721;
    reg738=reg49*reg738; reg722=reg49*reg722; reg430=reg49*reg430; reg645=reg49*reg645; reg541=reg49*reg541;
    reg672=reg49*reg672; reg1336=reg49*reg1336; reg907=reg49*reg907; reg182=reg49*reg182; reg747=reg49*reg747;
    reg604=reg49*reg604; reg479=reg49*reg479; reg1050=reg49*reg1050; reg1238=reg49*reg1238; reg214=reg49*reg214;
    reg744=reg49*reg744; reg1045=reg49*reg1045; reg750=reg49*reg750; reg817=reg49*reg817; reg874=reg49*reg874;
    reg398=reg49*reg705; reg939=reg49*reg939; reg1049=reg49*reg1049; reg209=reg49*reg209; reg1182=reg49*reg1182;
    reg400=ponderation*reg385; reg401=ponderation*reg205; reg402=ponderation*reg267; reg1118=reg49*reg1118; reg534=reg49*reg534;
    reg403=ponderation*reg380; reg1173=reg49*reg1173; reg910=reg49*reg910; reg424=reg49*reg424; reg1168=reg49*reg1168;
    reg913=reg49*reg913; reg1077=reg49*reg1077; reg1252=reg49*reg1252; reg1226=reg49*reg1226; reg383=reg49*reg383;
    reg340=reg49*reg340; reg808=reg49*reg808; reg543=reg49*reg543; reg573=reg49*reg573; reg405=reg49*reg1210;
    reg1302=reg49*reg1302; reg1125=reg49*reg1125; reg406=reg49*reg1308; reg533=reg49*reg533; reg906=reg49*reg906;
    reg589=reg49*reg589; reg1224=reg49*reg1224; reg407=ponderation*reg306; reg319=reg49*reg319; reg932=reg49*reg932;
    reg1247=reg49*reg1247; reg539=reg49*reg539; reg409=ponderation*reg212; reg606=reg49*reg606; reg413=ponderation*reg269;
    reg766=reg49*reg766; reg926=reg49*reg926; reg425=reg49*reg425; reg435=reg49*reg1127; reg1249=reg49*reg1249;
    reg276=reg49*reg276; reg698=reg49*reg698; reg1170=reg49*reg1170; reg1061=reg49*reg1061; reg363=reg49*reg363;
    reg811=reg49*reg811; reg1329=reg49*reg1329; reg1188=reg49*reg1188; reg1107=reg49*reg1107; reg933=reg49*reg933;
    reg441=reg49*reg465; reg1084=reg49*reg1084; reg1258=reg49*reg1258; reg706=reg49*reg706; reg303=reg49*reg303;
    reg226=reg49*reg226; reg325=reg49*reg325; reg200=reg49*reg200; reg704=reg49*reg704; reg211=reg49*reg211;
    reg1260=reg49*reg1260; reg696=reg49*reg696; reg689=reg49*reg689; reg928=reg49*reg928; reg446=ponderation*reg208;
    reg449=ponderation*reg285; reg1254=reg49*reg1254; reg355=reg49*reg355; reg702=reg49*reg702; reg550=reg49*reg550;
    reg404=reg49*reg404; reg431=reg49*reg431; reg220=reg49*reg220; reg839=reg49*reg839; reg1060=reg49*reg1060;
    reg554=reg49*reg554; reg452=reg49*reg1202; reg1256=reg49*reg1256; reg461=reg49*reg461; reg1067=reg49*reg1067;
    reg1070=reg49*reg1070; reg457=ponderation*reg375; reg1129=reg49*reg1129; reg801=reg49*reg801; reg248=reg49*reg248;
    reg1201=reg49*reg1201; reg436=reg49*reg436; reg664=reg49*reg664; reg810=reg49*reg810; reg568=reg49*reg568;
    reg225=reg49*reg225; reg464=reg49*reg834; reg1262=reg49*reg1262; reg1079=reg49*reg1079; reg270=reg49*reg270;
    reg603=reg49*reg603; reg193=reg49*reg193; reg798=reg49*reg798; reg920=reg49*reg920; reg829=reg49*reg829;
    reg850=reg49*reg850; reg669=reg49*reg669; reg618=reg49*reg618; reg440=reg49*reg440; reg611=reg49*reg611;
    reg1287=reg49*reg1287; reg521=reg49*reg521; reg1198=reg49*reg1198; reg792=reg49*reg792; reg656=reg49*reg656;
    reg469=reg49*reg1093; reg483=ponderation*reg250; reg793=reg49*reg793; reg198=reg49*reg198; reg1289=reg49*reg1289;
    reg487=ponderation*reg271; reg437=reg49*reg437; reg918=reg49*reg918; reg615=reg49*reg615; reg661=reg49*reg661;
    reg1074=reg49*reg1074; reg1268=reg49*reg1268; reg408=reg49*reg408; reg1194=reg49*reg1194; reg673=reg49*reg673;
    reg1073=reg49*reg1073; reg1196=reg49*reg1196; reg805=reg49*reg805; reg857=reg49*reg857; reg683=reg49*reg683;
    reg386=reg49*reg386; reg1286=reg49*reg1286; reg871=reg49*reg871; reg1190=reg49*reg1190; reg224=reg49*reg224;
    reg203=reg49*reg203; reg488=reg49*reg1030; reg623=reg49*reg623; reg442=reg49*reg442; reg753=reg49*reg753;
    reg684=reg49*reg684; reg1264=reg49*reg1264; reg873=reg49*reg873; reg824=reg49*reg824; reg802=reg49*reg802;
    reg737=reg49*reg737; reg308=reg49*reg308; reg1199=reg49*reg1199; reg597=reg49*reg597; reg492=reg49*reg751;
    reg1291=reg49*reg1291; reg660=reg49*reg660; reg654=reg49*reg654; reg847=reg49*reg847; reg1266=reg49*reg1266;
    reg315=reg49*reg315; reg679=reg49*reg679; reg651=reg49*reg651; reg229=reg49*reg229; reg682=reg49*reg682;
    reg497=reg49*reg1032; reg1163=reg49*reg1163; reg655=reg49*reg655; reg729=reg49*reg729; reg498=reg49*reg893;
    reg288=reg49*reg288; reg911=reg49*reg911; reg659=reg49*reg659; reg244=reg49*reg244; reg1057=reg49*reg1057;
    reg510=reg49*reg510; reg1279=reg49*reg1279; reg502=ponderation*reg189; reg254=reg49*reg254; reg311=reg49*reg311;
    reg1352=reg49*reg1352; reg513=reg49*reg513; reg675=reg49*reg675; reg628=reg49*reg628; reg445=reg49*reg445;
    reg427=reg49*reg427; reg1180=reg49*reg1180; reg191=reg49*reg191; reg821=reg49*reg821; reg505=reg49*reg1063;
    reg1244=reg49*reg1244; reg724=reg49*reg724; reg723=reg49*reg723; reg1192=reg49*reg1192; reg518=reg49*reg518;
    reg853=reg49*reg853; reg687=reg49*reg687; reg1075=reg49*reg1075; reg731=reg49*reg731; reg1121=reg49*reg1121;
    reg1274=reg49*reg1274; reg532=reg49*reg532; reg234=reg49*reg234; reg235=reg49*reg235; reg432=reg49*reg432;
    reg1203=reg49*reg1203; reg246=reg49*reg246; reg434=reg49*reg434; reg1284=reg49*reg1284; reg305=reg49*reg305;
    reg317=reg49*reg317; reg607=reg49*reg607; reg758=reg49*reg758; reg1334=reg49*reg1334; reg799=reg49*reg799;
    reg667=reg49*reg667; reg779=reg49*reg779; reg507=ponderation*reg274; reg509=reg49*reg991; reg251=reg49*reg251;
    reg307=reg49*reg307; reg756=reg49*reg756; reg710=reg49*reg710; reg1123=reg49*reg1123; reg754=reg49*reg754;
    reg512=reg49*reg999; reg831=reg49*reg831; reg601=reg49*reg601; reg522=ponderation*reg143; reg517=reg49*reg517;
    reg915=reg49*reg915; reg796=reg49*reg796; reg641=reg49*reg641; reg836=reg49*reg836; reg178=reg49*reg178;
    reg1277=reg49*reg1277; reg1205=reg49*reg1205; reg1120=reg49*reg1120; reg602=reg49*reg602; reg523=ponderation*reg371;
    reg524=reg49*reg784; reg1282=reg49*reg1282; reg318=reg49*reg318; reg855=reg49*reg855; reg313=reg49*reg313;
    reg1151=reg49*reg1151; reg426=reg49*reg426; reg1011=reg49*reg1011; reg345=reg49*reg345; reg1043=reg49*reg1043;
    reg776=reg49*reg776; reg782=reg49*reg782; reg342=reg49*reg342; reg1106=reg49*reg1106; reg538=ponderation*reg253;
    reg1215=reg49*reg1215; reg1295=reg49*reg1295; reg334=reg49*reg334; reg1005=reg49*reg1005; reg1009=reg49*reg1009;
    reg1013=reg49*reg1013; reg1101=reg49*reg1101; reg1297=reg49*reg1297; reg284=reg49*reg284; reg266=reg49*reg266;
    reg545=ponderation*reg868; reg1034=reg49*reg1034; reg901=reg49*reg901; reg966=reg49*reg966; reg964=reg49*reg964;
    reg553=reg49*reg553; reg1218=reg49*reg1218; reg548=ponderation*reg213; reg1143=reg49*reg1143; reg265=reg49*reg265;
    reg1293=reg49*reg1293; reg1217=reg49*reg1217; reg339=reg49*reg339; reg501=reg49*reg501; reg780=reg49*reg780;
    reg551=ponderation*reg204; reg969=reg49*reg969; reg346=reg49*reg346; reg458=reg49*reg458; reg121=reg49*reg121;
    reg947=reg49*reg947; reg201=reg49*reg201; reg778=reg49*reg778; reg626=reg49*reg626; reg450=reg49*reg450;
    reg1104=reg49*reg1104; reg1211=reg49*reg1211; reg282=reg49*reg282; reg765=reg49*reg765; reg1327=reg49*reg1327;
    reg552=ponderation*reg300; reg881=reg49*reg881; reg384=reg49*reg384; reg292=reg49*reg292; reg1324=reg49*reg1324;
    reg622=reg49*reg622; reg1144=reg49*reg1144; reg763=reg49*reg763; reg789=reg49*reg789; reg470=reg49*reg470;
    reg870=reg49*reg870; reg844=reg49*reg844; reg503=reg49*reg503; reg460=reg49*reg460; reg387=reg49*reg387;
    reg717=reg49*reg717; reg598=reg49*reg598; reg555=ponderation*reg190; reg504=reg49*reg504; reg701=reg49*reg701;
    reg1146=reg49*reg1146; reg263=reg49*reg263; reg463=reg49*reg463; reg1339=reg49*reg1339; reg466=reg49*reg466;
    reg347=reg49*reg347; reg210=reg49*reg210; reg786=reg49*reg786; reg878=reg49*reg878; reg438=reg49*reg438;
    reg770=reg49*reg770; reg1325=reg49*reg1325; reg556=ponderation*reg304; reg338=reg49*reg338; reg616=reg49*reg616;
    reg1002=reg49*reg1002; reg370=reg49*reg370; reg1091=reg49*reg1091; reg1083=reg49*reg1083; reg275=reg49*reg275;
    reg287=reg49*reg287; reg486=reg49*reg486; reg557=ponderation*reg283; reg362=reg49*reg362; reg367=reg49*reg367;
    reg558=ponderation*reg262; reg988=reg49*reg988; reg454=reg49*reg454; reg455=reg49*reg455; reg1305=reg49*reg1305;
    reg1134=reg49*reg1134; reg994=reg49*reg994; reg833=reg49*reg833; reg433=reg49*reg433; reg984=reg49*reg984;
    reg862=reg49*reg862; reg1138=reg49*reg1138; reg982=reg49*reg982; reg979=reg49*reg979; reg352=reg49*reg352;
    reg359=reg49*reg359; reg358=reg49*reg358; reg1085=reg49*reg1085; reg1156=reg49*reg1156; reg85=reg49*reg85;
    reg980=reg49*reg980; reg1114=reg49*reg1114; reg1159=reg49*reg1159; reg1087=reg49*reg1087; reg975=reg49*reg975;
    reg357=reg49*reg357; reg861=reg49*reg861; reg864=reg49*reg864; reg1136=reg49*reg1136; reg361=reg49*reg361;
    reg1130=reg49*reg1130; reg320=reg49*reg320; reg774=reg49*reg774; reg1028=reg49*reg1028; reg376=reg49*reg376;
    reg987=reg49*reg987; reg1309=reg49*reg1309; reg495=reg49*reg495; reg941=reg49*reg941; reg1109=reg49*reg1109;
    reg233=reg49*reg233; reg496=reg49*reg496; reg1154=reg49*reg1154; reg972=reg49*reg972; reg1311=reg49*reg1311;
    reg1221=reg49*reg1221; reg1214=reg49*reg1214; reg459=reg49*reg459; reg549=reg49*reg549; reg333=reg49*reg333;
    reg562=ponderation*reg369; reg1096=reg49*reg1096; reg992=reg49*reg992; reg1303=reg49*reg1303; reg609=reg49*reg609;
    reg1345=reg49*reg1345; reg1113=reg49*reg1113; reg989=reg49*reg989; reg1021=reg49*reg1021; reg867=reg49*reg867;
    reg374=reg49*reg374; reg897=reg49*reg897; reg289=reg49*reg289; reg954=reg49*reg954; reg1131=reg49*reg1131;
    reg1340=reg49*reg1340; reg952=reg49*reg952; reg563=ponderation*reg1359; reg1095=reg49*reg1095; reg1026=reg49*reg1026;
    reg453=reg49*reg453; reg948=reg49*reg948; reg480=reg49*reg480; reg955=reg49*reg955; reg935=reg49*reg935;
    reg1040=reg49*reg1040; reg998=reg49*reg998; reg708=reg49*reg708; reg1313=reg49*reg1313; reg585=reg49*reg585;
    reg564=ponderation*reg217; reg531=reg49*reg531; reg642=reg49*reg642; reg277=reg49*reg277; reg366=reg49*reg366;
    reg219=reg49*reg219; reg393=reg49*reg393; reg1169=reg49*reg1169; reg565=ponderation*reg360; reg971=reg49*reg971;
    reg566=reg49*reg566; reg297=reg49*reg297; reg477=reg49*reg477; reg1089=reg49*reg1089; reg884=reg49*reg884;
    reg577=ponderation*reg291; reg228=reg49*reg228; reg1335=reg49*reg1335; reg978=reg49*reg978; reg1094=reg49*reg1094;
    reg259=reg49*reg259; reg462=reg49*reg462; reg243=reg49*reg243; reg961=reg49*reg961; reg423=reg49*reg423;
    reg578=reg49*reg324; reg422=reg49*reg422; reg767=reg49*reg767; reg194=reg49*reg194; reg580=ponderation*reg256;
    reg279=reg49*reg279; reg581=ponderation*reg255; reg583=ponderation*reg365; reg238=reg49*reg238; reg584=ponderation*reg368;
    reg1176=reg49*reg1176; reg1229=reg49*reg1229; reg1098=reg49*reg1098; reg530=reg49*reg530; reg239=reg49*reg239;
    reg996=reg49*reg996; reg316=reg49*reg316; reg1318=reg49*reg1318; reg1347=reg49*reg1347; reg1046=reg49*reg1046;
    reg586=reg49*reg1271; reg627=reg49*reg627; reg608=reg49*reg608; reg574=reg49*reg574; reg958=reg49*reg958;
    reg587=ponderation*reg227; reg478=reg49*reg478; reg451=reg49*reg451; reg1115=reg49*reg1115; reg940=reg49*reg940;
    reg312=reg49*reg312; reg880=reg49*reg880; reg373=reg49*reg373; reg579=reg49*reg579; reg249=reg49*reg249;
    reg1322=reg49*reg1322; reg851=reg49*reg851; reg923=reg49*reg923; reg613=reg49*reg613; reg837=reg49*reg837;
    reg414=reg49*reg414; reg842=reg49*reg842; reg591=ponderation*reg299; reg593=ponderation*reg381; reg610=reg49*reg1301;
    reg1208=reg49*reg1208; reg1332=reg49*reg1332; reg823=reg49*reg823; reg1102=reg49*reg1102; reg506=reg49*reg506;
    reg247=reg49*reg247; reg605=reg49*reg605; reg904=reg49*reg904; reg467=reg49*reg467; reg221=reg49*reg221;
    reg612=ponderation*reg341; reg280=reg49*reg280; reg1065=reg49*reg1065; reg1068=reg49*reg1068; reg1330=reg49*reg1330;
    reg950=reg49*reg950; reg582=reg49*reg582; reg889=reg49*reg889; reg620=ponderation*reg207; reg1042=reg49*reg1042;
    reg716=reg49*reg716; reg896=reg49*reg896; reg1338=reg49*reg1338; reg875=reg49*reg875; reg760=reg49*reg760;
    reg474=reg49*reg474; reg1337=reg49*reg1337; reg1141=reg49*reg1141; reg482=reg49*reg482; reg1147=reg49*reg1147;
    reg621=reg49*reg1251; reg719=reg49*reg719; reg769=reg49*reg769; reg840=reg49*reg840; reg296=reg49*reg296;
    reg886=reg49*reg886; reg639=reg49*reg639; reg785=reg49*reg785; reg252=reg49*reg252; reg733=reg49*reg733;
    reg891=reg49*reg891; reg624=ponderation*reg294; matrix(indices[7]+1,indices[3]+0)+=ponderation*reg660; reg625=ponderation*reg492; sollicitation[indices[6]+2]+=reg625;
    matrix(indices[7]+2,indices[6]+0)+=ponderation*reg1303; reg630=ponderation*reg610; sollicitation[indices[0]+0]+=reg630; matrix(indices[6]+2,indices[4]+0)+=ponderation*reg682; matrix(indices[7]+1,indices[6]+2)+=ponderation*reg798;
    matrix(indices[7]+2,indices[4]+1)+=ponderation*reg1120; matrix(indices[7]+1,indices[7]+1)+=ponderation*reg431; matrix(indices[7]+0,indices[4]+1)+=ponderation*reg979; matrix(indices[7]+2,indices[3]+2)+=ponderation*reg338; reg338=ponderation*reg397;
    sollicitation[indices[7]+2]+=reg338; matrix(indices[7]+0,indices[0]+2)+=ponderation*reg932; matrix(indices[7]+1,indices[3]+1)+=ponderation*reg404; reg404=ponderation*reg621; sollicitation[indices[0]+2]+=reg404;
    matrix(indices[6]+2,indices[3]+1)+=ponderation*reg1070; matrix(indices[7]+1,indices[4]+2)+=ponderation*reg604; reg431=ponderation*reg406; sollicitation[indices[1]+0]+=reg431; matrix(indices[7]+2,indices[5]+2)+=ponderation*reg352;
    matrix(indices[7]+2,indices[2]+1)+=ponderation*reg1224; matrix(indices[7]+0,indices[5]+1)+=ponderation*reg886; reg352=ponderation*reg488; sollicitation[indices[7]+1]+=reg352; matrix(indices[7]+0,indices[4]+0)+=ponderation*reg370;
    matrix(indices[7]+0,indices[7]+1)+=ponderation*reg1114; matrix(indices[7]+2,indices[5]+0)+=ponderation*reg1168; matrix(indices[7]+2,indices[1]+0)+=ponderation*reg211; reg211=ponderation*reg586; sollicitation[indices[0]+1]+=reg211;
    matrix(indices[6]+2,indices[3]+2)+=ponderation*reg568; matrix(indices[7]+1,indices[5]+0)+=ponderation*reg861; matrix(indices[7]+0,indices[0]+1)+=ponderation*reg1077; reg370=ponderation*reg435; sollicitation[indices[1]+1]+=reg370;
    matrix(indices[7]+1,indices[1]+0)+=ponderation*reg708; reg568=ponderation*reg497; sollicitation[indices[7]+0]+=reg568; matrix(indices[7]+0,indices[1]+0)+=ponderation*reg585; matrix(indices[7]+1,indices[1]+1)+=ponderation*reg534;
    matrix(indices[7]+1,indices[6]+0)+=ponderation*reg766; matrix(indices[7]+1,indices[4]+1)+=ponderation*reg387; reg387=ponderation*reg498; sollicitation[indices[4]+2]+=reg387; matrix(indices[7]+2,indices[3]+0)+=-reg556;
    matrix(indices[7]+2,indices[0]+2)+=ponderation*reg383; matrix(indices[7]+1,indices[5]+1)+=ponderation*reg776; matrix(indices[6]+2,indices[6]+1)+=ponderation*reg601; matrix(indices[7]+1,indices[2]+1)+=ponderation*reg510; matrix(indices[7]+1,indices[0]+0)+=ponderation*reg1005;
    reg383=ponderation*reg230; sollicitation[indices[3]+0]+=reg383; matrix(indices[7]+2,indices[6]+2)+=ponderation*reg342; matrix(indices[7]+0,indices[5]+0)+=ponderation*reg880; matrix(indices[7]+1,indices[3]+2)+=ponderation*reg672;
    reg342=ponderation*reg512; sollicitation[indices[5]+0]+=reg342; matrix(indices[7]+2,indices[7]+1)+=ponderation*reg1335; matrix(indices[7]+2,indices[2]+2)+=ponderation*reg530; matrix(indices[7]+1,indices[7]+2)+=ponderation*reg210;
    matrix(indices[7]+2,indices[5]+1)+=ponderation*reg1146; matrix(indices[7]+2,indices[1]+1)+=ponderation*reg1198; matrix(indices[7]+2,indices[1]+2)+=ponderation*reg518; matrix(indices[6]+2,indices[7]+0)+=ponderation*reg738; matrix(indices[7]+2,indices[7]+0)+=ponderation*reg1324;
    matrix(indices[7]+0,indices[2]+1)+=ponderation*reg844; reg210=ponderation*reg396; sollicitation[indices[4]+0]+=reg210; matrix(indices[7]+1,indices[4]+0)+=ponderation*reg840; reg510=ponderation*reg398;
    sollicitation[indices[3]+2]+=reg510; matrix(indices[7]+1,indices[2]+0)+=ponderation*reg744; matrix(indices[7]+1,indices[0]+1)+=ponderation*reg467; matrix(indices[6]+2,indices[6]+2)+=ponderation*reg235; reg235=ponderation*reg505;
    sollicitation[indices[4]+1]+=reg235; matrix(indices[7]+0,indices[2]+0)+=ponderation*reg252; matrix(indices[7]+0,indices[5]+2)+=ponderation*reg930; matrix(indices[7]+1,indices[6]+1)+=ponderation*reg427; reg252=ponderation*reg298;
    sollicitation[indices[3]+1]+=reg252; matrix(indices[7]+0,indices[2]+2)+=ponderation*reg770; matrix(indices[6]+2,indices[7]+1)+=ponderation*reg1050; matrix(indices[7]+2,indices[4]+2)+=ponderation*reg313; matrix(indices[7]+0,indices[3]+1)+=ponderation*reg964;
    matrix(indices[7]+0,indices[6]+2)+=ponderation*reg1082; reg313=ponderation*reg469; sollicitation[indices[6]+0]+=reg313; matrix(indices[7]+2,indices[2]+0)+=ponderation*reg1184; reg427=ponderation*reg452;
    sollicitation[indices[2]+0]+=reg427; matrix(indices[7]+2,indices[4]+0)+=ponderation*reg1141; matrix(indices[7]+0,indices[1]+1)+=ponderation*reg950; matrix(indices[7]+2,indices[7]+2)+=ponderation*reg243; matrix(indices[6]+2,indices[5]+1)+=ponderation*reg850;
    matrix(indices[7]+0,indices[7]+2)+=ponderation*reg1095; matrix(indices[7]+2,indices[3]+1)+=ponderation*reg1214; reg243=ponderation*reg464; sollicitation[indices[6]+1]+=reg243; matrix(indices[7]+0,indices[6]+1)+=ponderation*reg1074;
    matrix(indices[7]+2,indices[0]+0)+=ponderation*reg214; matrix(indices[7]+0,indices[0]+0)+=ponderation*reg554; matrix(indices[7]+0,indices[3]+2)+=-reg563; reg214=ponderation*reg405; sollicitation[indices[1]+2]+=reg214;
    matrix(indices[7]+0,indices[6]+0)+=ponderation*reg270; matrix(indices[6]+2,indices[6]+0)+=ponderation*reg758; reg270=ponderation*reg524; sollicitation[indices[5]+1]+=reg270; matrix(indices[6]+2,indices[7]+2)+=ponderation*reg567;
    matrix(indices[7]+0,indices[3]+0)+=ponderation*reg1043; matrix(indices[7]+1,indices[5]+2)+=ponderation*reg785; reg467=ponderation*reg391; sollicitation[indices[2]+2]+=reg467; matrix(indices[7]+1,indices[7]+0)+=ponderation*reg225;
    matrix(indices[7]+1,indices[1]+2)+=ponderation*reg704; matrix(indices[7]+2,indices[0]+1)+=ponderation*reg1345; matrix(indices[7]+0,indices[1]+2)+=ponderation*reg958; reg225=ponderation*reg509; sollicitation[indices[5]+2]+=reg225;
    matrix(indices[7]+1,indices[0]+2)+=ponderation*reg1040; matrix(indices[7]+0,indices[7]+0)+=ponderation*reg1101; matrix(indices[7]+2,indices[6]+1)+=ponderation*reg549; matrix(indices[7]+1,indices[2]+2)+=ponderation*reg669; matrix(indices[6]+2,indices[5]+2)+=ponderation*reg198;
    reg198=ponderation*reg441; sollicitation[indices[2]+1]+=reg198; matrix(indices[7]+0,indices[4]+2)+=ponderation*reg987; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg1342; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg461;
    matrix(indices[2]+0,indices[3]+1)+=ponderation*reg239; matrix(indices[2]+0,indices[3]+2)+=-reg565; matrix(indices[2]+0,indices[4]+0)+=ponderation*reg201; matrix(indices[2]+0,indices[4]+1)+=ponderation*reg334; matrix(indices[2]+0,indices[4]+2)+=ponderation*reg1340;
    matrix(indices[2]+0,indices[5]+0)+=ponderation*reg85; matrix(indices[2]+0,indices[5]+1)+=ponderation*reg423; matrix(indices[2]+0,indices[5]+2)+=ponderation*reg178; matrix(indices[2]+0,indices[6]+0)+=ponderation*reg442; matrix(indices[2]+0,indices[6]+1)+=ponderation*reg645;
    matrix(indices[2]+0,indices[6]+2)+=ponderation*reg1347; matrix(indices[2]+0,indices[7]+0)+=ponderation*reg450; matrix(indices[2]+0,indices[7]+1)+=ponderation*reg287; matrix(indices[2]+0,indices[7]+2)+=ponderation*reg433; matrix(indices[2]+1,indices[0]+0)+=ponderation*reg233;
    matrix(indices[2]+1,indices[0]+1)+=ponderation*reg458; matrix(indices[2]+1,indices[0]+2)+=ponderation*reg1339; matrix(indices[2]+1,indices[1]+0)+=ponderation*reg247; matrix(indices[2]+1,indices[1]+1)+=ponderation*reg462; matrix(indices[2]+1,indices[1]+2)+=ponderation*reg194;
    matrix(indices[2]+1,indices[2]+0)+=ponderation*reg259; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg424; matrix(indices[2]+1,indices[2]+2)+=ponderation*reg200; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg182; matrix(indices[2]+1,indices[3]+1)+=ponderation*reg430;
    matrix(indices[2]+1,indices[3]+2)+=ponderation*reg1352; matrix(indices[2]+1,indices[4]+0)+=ponderation*reg246; matrix(indices[2]+1,indices[4]+1)+=ponderation*reg436; matrix(indices[1]+2,indices[0]+2)+=ponderation*reg474; matrix(indices[1]+2,indices[1]+0)+=ponderation*reg477;
    matrix(indices[3]+1,indices[2]+1)+=ponderation*reg478; matrix(indices[1]+2,indices[1]+1)+=ponderation*reg1338; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg482; matrix(indices[1]+2,indices[2]+0)+=ponderation*reg1229; matrix(indices[1]+2,indices[2]+1)+=ponderation*reg297;
    matrix(indices[1]+2,indices[2]+2)+=ponderation*reg533; matrix(indices[1]+2,indices[3]+0)+=-reg413; matrix(indices[1]+2,indices[3]+1)+=ponderation*reg1226; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg355; matrix(indices[1]+2,indices[4]+0)+=ponderation*reg1188;
    matrix(indices[1]+2,indices[4]+1)+=ponderation*reg485; matrix(indices[1]+2,indices[4]+2)+=ponderation*reg547; matrix(indices[1]+2,indices[5]+0)+=ponderation*reg1185; matrix(indices[1]+2,indices[5]+1)+=ponderation*reg1182; matrix(indices[1]+2,indices[5]+2)+=ponderation*reg508;
    matrix(indices[1]+2,indices[6]+0)+=ponderation*reg1180; matrix(indices[1]+2,indices[6]+1)+=ponderation*reg532; matrix(indices[1]+2,indices[6]+2)+=ponderation*reg513; matrix(indices[1]+2,indices[7]+0)+=ponderation*reg1205; matrix(indices[1]+2,indices[7]+1)+=ponderation*reg1203;
    matrix(indices[1]+2,indices[7]+2)+=ponderation*reg521; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg1201; matrix(indices[2]+0,indices[0]+1)+=ponderation*reg1199; matrix(indices[2]+0,indices[0]+2)+=ponderation*reg1196; matrix(indices[2]+0,indices[1]+0)+=ponderation*reg1194;
    matrix(indices[2]+0,indices[1]+1)+=ponderation*reg1192; matrix(indices[2]+0,indices[1]+2)+=ponderation*reg1190; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg193; matrix(indices[2]+0,indices[2]+1)+=ponderation*reg641; matrix(indices[2]+2,indices[7]+0)+=ponderation*reg864;
    matrix(indices[2]+2,indices[7]+1)+=ponderation*reg862; matrix(indices[2]+2,indices[7]+2)+=ponderation*reg453; matrix(indices[3]+0,indices[0]+0)+=ponderation*reg451; matrix(indices[3]+0,indices[0]+1)+=ponderation*reg875; matrix(indices[3]+0,indices[0]+2)+=-reg293;
    matrix(indices[3]+0,indices[1]+0)+=ponderation*reg445; matrix(indices[3]+0,indices[1]+1)+=ponderation*reg871; matrix(indices[3]+0,indices[1]+2)+=-reg483; matrix(indices[3]+0,indices[2]+0)+=ponderation*reg606; matrix(indices[3]+0,indices[2]+1)+=ponderation*reg837;
    matrix(indices[3]+0,indices[2]+2)+=-reg557; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg833; matrix(indices[3]+0,indices[3]+1)+=-reg562; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg121; matrix(indices[3]+0,indices[4]+0)+=ponderation*reg384;
    matrix(indices[3]+0,indices[4]+1)+=ponderation*reg851; matrix(indices[3]+0,indices[4]+2)+=-reg584; matrix(indices[3]+0,indices[5]+0)+=-reg407; matrix(indices[3]+0,indices[5]+1)+=ponderation*reg839; matrix(indices[3]+0,indices[5]+2)+=-reg295;
    matrix(indices[3]+0,indices[6]+0)+=ponderation*reg412; matrix(indices[3]+0,indices[6]+1)+=ponderation*reg675; matrix(indices[3]+0,indices[6]+2)+=-reg487; matrix(indices[3]+0,indices[7]+0)+=ponderation*reg408; matrix(indices[6]+2,indices[1]+0)+=ponderation*reg754;
    matrix(indices[6]+2,indices[1]+1)+=ponderation*reg689; matrix(indices[6]+2,indices[1]+2)+=ponderation*reg561; matrix(indices[3]+0,indices[7]+2)+=-reg507; matrix(indices[3]+1,indices[0]+0)+=ponderation*reg684; matrix(indices[3]+1,indices[0]+1)+=ponderation*reg857;
    matrix(indices[2]+1,indices[4]+2)+=ponderation*reg203; matrix(indices[2]+1,indices[5]+0)+=ponderation*reg220; matrix(indices[2]+1,indices[5]+1)+=ponderation*reg440; matrix(indices[2]+1,indices[5]+2)+=ponderation*reg805; matrix(indices[2]+1,indices[6]+0)+=ponderation*reg802;
    matrix(indices[2]+1,indices[6]+1)+=ponderation*reg437; matrix(indices[2]+1,indices[6]+2)+=ponderation*reg799; matrix(indices[2]+1,indices[7]+0)+=ponderation*reg796; matrix(indices[2]+1,indices[7]+1)+=ponderation*reg432; matrix(indices[2]+1,indices[7]+2)+=ponderation*reg821;
    matrix(indices[2]+2,indices[0]+0)+=ponderation*reg817; matrix(indices[2]+2,indices[0]+1)+=ponderation*reg814; matrix(indices[2]+2,indices[0]+2)+=ponderation*reg428; matrix(indices[2]+2,indices[1]+0)+=ponderation*reg811; matrix(indices[2]+2,indices[1]+1)+=ponderation*reg808;
    matrix(indices[2]+2,indices[1]+2)+=ponderation*reg425; matrix(indices[2]+2,indices[2]+0)+=ponderation*reg769; matrix(indices[2]+2,indices[2]+1)+=ponderation*reg767; matrix(indices[2]+2,indices[2]+2)+=ponderation*reg422; matrix(indices[2]+2,indices[3]+0)+=-reg564;
    matrix(indices[2]+2,indices[3]+1)+=ponderation*reg760; matrix(indices[2]+2,indices[3]+2)+=ponderation*reg414; matrix(indices[2]+2,indices[4]+0)+=ponderation*reg789; matrix(indices[2]+2,indices[4]+1)+=ponderation*reg786; matrix(indices[2]+2,indices[4]+2)+=ponderation*reg460;
    matrix(indices[2]+2,indices[5]+0)+=ponderation*reg782; matrix(indices[2]+2,indices[5]+1)+=ponderation*reg780; matrix(indices[2]+2,indices[5]+2)+=ponderation*reg459; matrix(indices[2]+2,indices[6]+0)+=ponderation*reg774; matrix(indices[2]+2,indices[6]+1)+=ponderation*reg867;
    matrix(indices[2]+2,indices[6]+2)+=ponderation*reg454; matrix(indices[0]+1,indices[5]+1)+=ponderation*reg1261; matrix(indices[0]+1,indices[5]+2)+=ponderation*reg1260; matrix(indices[0]+1,indices[6]+0)+=ponderation*reg1258; matrix(indices[0]+1,indices[6]+1)+=ponderation*reg1329;
    matrix(indices[0]+1,indices[6]+2)+=ponderation*reg1256; matrix(indices[0]+1,indices[7]+0)+=ponderation*reg1254; matrix(indices[0]+1,indices[7]+1)+=ponderation*reg1302; matrix(indices[0]+1,indices[7]+2)+=ponderation*reg1252; matrix(indices[0]+2,indices[0]+0)+=ponderation*reg1249;
    matrix(indices[0]+2,indices[0]+1)+=ponderation*reg1247; matrix(indices[0]+2,indices[0]+2)+=ponderation*reg589; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg1322; matrix(indices[0]+2,indices[1]+1)+=ponderation*reg582; matrix(indices[1]+1,indices[6]+1)+=ponderation*reg1169;
    matrix(indices[0]+2,indices[1]+2)+=ponderation*reg608; matrix(indices[0]+2,indices[2]+0)+=ponderation*reg1318; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg605; matrix(indices[0]+2,indices[2]+2)+=ponderation*reg642; matrix(indices[0]+2,indices[3]+0)+=-reg580;
    matrix(indices[0]+2,indices[3]+1)+=ponderation*reg238; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg627; matrix(indices[0]+2,indices[4]+0)+=ponderation*reg1313; matrix(indices[0]+2,indices[4]+1)+=ponderation*reg566; matrix(indices[0]+2,indices[4]+2)+=ponderation*reg228;
    matrix(indices[0]+2,indices[5]+0)+=ponderation*reg1337; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg613; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg1332; matrix(indices[0]+0,indices[2]+2)+=ponderation*reg1330; matrix(indices[0]+0,indices[6]+0)+=ponderation*reg622;
    matrix(indices[0]+0,indices[6]+1)+=ponderation*reg1327; matrix(indices[0]+0,indices[7]+0)+=ponderation*reg263; matrix(indices[0]+0,indices[7]+1)+=ponderation*reg241; matrix(indices[0]+0,indices[7]+2)+=ponderation*reg1334; matrix(indices[0]+1,indices[0]+0)+=ponderation*reg623;
    matrix(indices[0]+1,indices[0]+1)+=ponderation*reg1286; matrix(indices[0]+1,indices[0]+2)+=ponderation*reg1268; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg1266; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg1291; matrix(indices[0]+1,indices[1]+2)+=ponderation*reg1264;
    matrix(indices[0]+1,indices[2]+0)+=ponderation*reg1262; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg248; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg1289; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg1287; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg251;
    matrix(indices[0]+0,indices[0]+1)+=ponderation*reg1284; matrix(indices[0]+0,indices[0]+2)+=ponderation*reg1282; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg1277; matrix(indices[0]+0,indices[3]+2)+=-reg522; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg1279;
    matrix(indices[0]+0,indices[5]+0)+=ponderation*reg288; matrix(indices[0]+0,indices[5]+1)+=ponderation*reg1274; matrix(indices[0]+0,indices[5]+2)+=ponderation*reg1244; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg1336; matrix(indices[0]+1,indices[2]+2)+=ponderation*reg1242;
    matrix(indices[0]+1,indices[3]+0)+=ponderation*reg1241; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg209; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg1238; matrix(indices[0]+1,indices[4]+0)+=ponderation*reg1236; matrix(indices[0]+1,indices[4]+1)+=ponderation*reg1300;
    matrix(indices[0]+1,indices[4]+2)+=ponderation*reg1234; matrix(indices[0]+1,indices[5]+0)+=ponderation*reg1232; matrix(indices[1]+0,indices[6]+1)+=ponderation*reg1166; matrix(indices[1]+0,indices[6]+2)+=ponderation*reg1163; matrix(indices[1]+0,indices[7]+0)+=ponderation*reg318;
    matrix(indices[1]+0,indices[7]+1)+=ponderation*reg1129; matrix(indices[1]+0,indices[7]+2)+=ponderation*reg386; matrix(indices[1]+1,indices[0]+0)+=ponderation*reg1125; matrix(indices[1]+1,indices[0]+1)+=ponderation*reg311; matrix(indices[1]+1,indices[0]+2)+=ponderation*reg1123;
    matrix(indices[1]+1,indices[1]+0)+=ponderation*reg1121; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg303; matrix(indices[1]+1,indices[1]+2)+=ponderation*reg1118; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg1115; matrix(indices[1]+1,indices[2]+1)+=ponderation*reg296;
    matrix(indices[1]+1,indices[2]+2)+=ponderation*reg1144; matrix(indices[1]+1,indices[3]+0)+=ponderation*reg1143; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg289; matrix(indices[1]+1,indices[3]+2)+=ponderation*reg1138; matrix(indices[1]+1,indices[4]+0)+=ponderation*reg1136;
    matrix(indices[1]+1,indices[4]+1)+=ponderation*reg486; matrix(indices[1]+1,indices[4]+2)+=ponderation*reg1134; matrix(indices[1]+1,indices[5]+0)+=ponderation*reg1131; matrix(indices[1]+1,indices[5]+1)+=ponderation*reg1130; matrix(indices[1]+1,indices[5]+2)+=ponderation*reg1221;
    matrix(indices[1]+1,indices[6]+0)+=ponderation*reg1218; matrix(indices[3]+0,indices[7]+1)+=ponderation*reg1217; matrix(indices[1]+1,indices[6]+2)+=ponderation*reg1215; matrix(indices[1]+1,indices[7]+0)+=ponderation*reg504; matrix(indices[1]+1,indices[7]+1)+=ponderation*reg463;
    matrix(indices[1]+1,indices[7]+2)+=ponderation*reg1211; matrix(indices[1]+2,indices[0]+0)+=ponderation*reg1208; matrix(indices[1]+2,indices[0]+1)+=ponderation*reg312; matrix(indices[0]+0,indices[6]+2)+=ponderation*reg1325; matrix(indices[0]+0,indices[4]+0)+=ponderation*reg598;
    matrix(indices[0]+0,indices[4]+1)+=ponderation*reg1297; matrix(indices[0]+0,indices[4]+2)+=ponderation*reg1295; matrix(indices[0]+2,indices[5]+1)+=ponderation*reg426; matrix(indices[0]+2,indices[5]+2)+=ponderation*reg346; matrix(indices[0]+2,indices[6]+0)+=ponderation*reg1293;
    matrix(indices[0]+2,indices[6]+1)+=ponderation*reg553; matrix(indices[0]+2,indices[6]+2)+=ponderation*reg333; matrix(indices[0]+2,indices[7]+0)+=ponderation*reg1311; matrix(indices[0]+2,indices[7]+1)+=ponderation*reg1309; matrix(indices[0]+2,indices[7]+2)+=ponderation*reg320;
    matrix(indices[1]+0,indices[0]+0)+=ponderation*reg374; matrix(indices[1]+0,indices[0]+1)+=ponderation*reg609; matrix(indices[1]+0,indices[0]+2)+=ponderation*reg1305; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg367; matrix(indices[1]+0,indices[1]+1)+=ponderation*reg616;
    matrix(indices[1]+0,indices[1]+2)+=ponderation*reg1159; matrix(indices[1]+0,indices[2]+0)+=ponderation*reg359; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg1156; matrix(indices[1]+0,indices[2]+2)+=ponderation*reg455; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg1154;
    matrix(indices[1]+0,indices[3]+1)+=ponderation*reg1151; matrix(indices[1]+0,indices[3]+2)+=-reg555; matrix(indices[1]+0,indices[4]+0)+=ponderation*reg282; matrix(indices[1]+0,indices[4]+1)+=ponderation*reg1147; matrix(indices[1]+0,indices[4]+2)+=ponderation*reg1176;
    matrix(indices[1]+0,indices[5]+0)+=ponderation*reg277; matrix(indices[1]+0,indices[5]+1)+=ponderation*reg1173; matrix(indices[1]+0,indices[5]+2)+=ponderation*reg1170; matrix(indices[1]+0,indices[6]+0)+=ponderation*reg273; matrix(indices[5]+1,indices[3]+2)+=ponderation*reg1094;
    matrix(indices[5]+1,indices[4]+0)+=ponderation*reg1089; matrix(indices[5]+1,indices[4]+1)+=ponderation*reg219; matrix(indices[5]+1,indices[4]+2)+=ponderation*reg935; matrix(indices[5]+1,indices[5]+0)+=-reg587; matrix(indices[5]+1,indices[5]+1)+=ponderation*reg316;
    matrix(indices[5]+1,indices[5]+2)+=-reg581; matrix(indices[5]+1,indices[6]+0)+=ponderation*reg961; matrix(indices[5]+1,indices[6]+1)+=ponderation*reg574; matrix(indices[5]+1,indices[6]+2)+=ponderation*reg971; matrix(indices[5]+1,indices[7]+0)+=ponderation*reg940;
    matrix(indices[5]+1,indices[7]+1)+=ponderation*reg579; matrix(indices[5]+1,indices[7]+2)+=ponderation*reg955; matrix(indices[5]+2,indices[0]+0)+=ponderation*reg996; matrix(indices[5]+2,indices[0]+1)+=ponderation*reg998; matrix(indices[5]+2,indices[0]+2)+=ponderation*reg366;
    matrix(indices[5]+2,indices[1]+0)+=ponderation*reg978; matrix(indices[5]+2,indices[1]+1)+=ponderation*reg896; matrix(indices[5]+2,indices[1]+2)+=ponderation*reg373; matrix(indices[5]+2,indices[2]+0)+=ponderation*reg904; matrix(indices[5]+2,indices[2]+1)+=ponderation*reg906;
    matrix(indices[5]+2,indices[2]+2)+=ponderation*reg319; matrix(indices[5]+2,indices[3]+0)+=-reg409; matrix(indices[5]+2,indices[3]+1)+=ponderation*reg926; matrix(indices[5]+2,indices[3]+2)+=-reg402; matrix(indices[5]+2,indices[4]+0)+=ponderation*reg910;
    matrix(indices[5]+2,indices[4]+1)+=ponderation*reg913; matrix(indices[5]+2,indices[4]+2)+=ponderation*reg340; matrix(indices[5]+2,indices[5]+0)+=ponderation*reg573; matrix(indices[5]+2,indices[5]+1)+=-reg449; matrix(indices[5]+0,indices[1]+1)+=ponderation*reg952;
    matrix(indices[5]+0,indices[1]+2)+=ponderation*reg948; matrix(indices[5]+0,indices[2]+0)+=ponderation*reg376; matrix(indices[5]+0,indices[2]+1)+=ponderation*reg941; matrix(indices[5]+0,indices[2]+2)+=ponderation*reg972; matrix(indices[5]+0,indices[3]+0)+=-reg545;
    matrix(indices[5]+0,indices[3]+1)+=ponderation*reg966; matrix(indices[5]+0,indices[3]+2)+=-reg548; matrix(indices[5]+0,indices[4]+0)+=ponderation*reg339; matrix(indices[5]+0,indices[4]+1)+=ponderation*reg969; matrix(indices[5]+0,indices[4]+2)+=ponderation*reg947;
    matrix(indices[5]+0,indices[5]+0)+=ponderation*reg345; matrix(indices[5]+0,indices[5]+1)+=-reg538; matrix(indices[5]+0,indices[5]+2)+=ponderation*reg1009; matrix(indices[5]+0,indices[6]+0)+=ponderation*reg266; matrix(indices[5]+0,indices[6]+1)+=ponderation*reg717;
    matrix(indices[5]+0,indices[6]+2)+=ponderation*reg701; matrix(indices[5]+0,indices[7]+0)+=ponderation*reg347; matrix(indices[5]+0,indices[7]+1)+=ponderation*reg438; matrix(indices[5]+0,indices[7]+2)+=ponderation*reg778; matrix(indices[5]+1,indices[0]+0)+=ponderation*reg765;
    matrix(indices[5]+1,indices[0]+1)+=ponderation*reg292; matrix(indices[5]+1,indices[0]+2)+=ponderation*reg763; matrix(indices[5]+1,indices[1]+0)+=ponderation*reg870; matrix(indices[5]+1,indices[1]+1)+=ponderation*reg221; matrix(indices[5]+1,indices[1]+2)+=ponderation*reg823;
    matrix(indices[5]+1,indices[2]+0)+=ponderation*reg842; matrix(indices[5]+1,indices[2]+1)+=ponderation*reg249; matrix(indices[5]+1,indices[2]+2)+=ponderation*reg733; matrix(indices[5]+1,indices[3]+0)+=ponderation*reg719; matrix(indices[5]+1,indices[3]+1)+=-reg620;
    matrix(indices[6]+1,indices[0]+0)+=ponderation*reg836; matrix(indices[6]+1,indices[0]+1)+=ponderation*reg602; matrix(indices[6]+1,indices[0]+2)+=ponderation*reg855; matrix(indices[6]+1,indices[1]+0)+=ponderation*reg434; matrix(indices[6]+1,indices[1]+1)+=ponderation*reg607;
    matrix(indices[6]+1,indices[1]+2)+=ponderation*reg779; matrix(indices[6]+1,indices[2]+0)+=ponderation*reg756; matrix(indices[6]+1,indices[2]+1)+=ponderation*reg611; matrix(indices[6]+1,indices[2]+2)+=ponderation*reg792; matrix(indices[6]+1,indices[3]+0)+=ponderation*reg793;
    matrix(indices[6]+1,indices[3]+1)+=ponderation*reg615; matrix(indices[6]+1,indices[3]+2)+=ponderation*reg801; matrix(indices[6]+1,indices[4]+0)+=ponderation*reg810; matrix(indices[6]+1,indices[4]+1)+=ponderation*reg603; matrix(indices[6]+1,indices[4]+2)+=ponderation*reg829;
    matrix(indices[6]+1,indices[5]+0)+=ponderation*reg824; matrix(indices[6]+1,indices[5]+1)+=ponderation*reg597; matrix(indices[6]+1,indices[5]+2)+=ponderation*reg847; matrix(indices[6]+1,indices[6]+0)+=ponderation*reg679; matrix(indices[6]+1,indices[6]+1)+=ponderation*reg229;
    matrix(indices[6]+1,indices[6]+2)+=ponderation*reg673; matrix(indices[6]+1,indices[7]+0)+=ponderation*reg683; matrix(indices[6]+1,indices[7]+1)+=ponderation*reg224; matrix(indices[6]+1,indices[7]+2)+=ponderation*reg753; matrix(indices[6]+2,indices[0]+0)+=ponderation*reg737;
    matrix(indices[6]+2,indices[0]+1)+=ponderation*reg710; matrix(indices[6]+2,indices[0]+2)+=ponderation*reg244; matrix(indices[6]+2,indices[2]+0)+=ponderation*reg687; matrix(indices[6]+2,indices[2]+1)+=ponderation*reg874; matrix(indices[6]+2,indices[2]+2)+=ponderation*reg226;
    matrix(indices[6]+2,indices[3]+0)+=-reg446; matrix(indices[5]+2,indices[5]+2)+=ponderation*reg550; matrix(indices[5]+2,indices[6]+0)+=ponderation*reg1060; matrix(indices[5]+2,indices[6]+1)+=ponderation*reg1067; matrix(indices[5]+2,indices[6]+2)+=ponderation*reg363;
    matrix(indices[5]+2,indices[7]+0)+=ponderation*reg1107; matrix(indices[5]+2,indices[7]+1)+=ponderation*reg1084; matrix(indices[5]+2,indices[7]+2)+=ponderation*reg325; matrix(indices[6]+0,indices[0]+0)+=ponderation*reg1023; matrix(indices[6]+0,indices[0]+1)+=ponderation*reg1025;
    matrix(indices[6]+0,indices[0]+2)+=ponderation*reg1008; matrix(indices[6]+0,indices[1]+0)+=ponderation*reg1016; matrix(indices[6]+0,indices[1]+1)+=ponderation*reg1018; matrix(indices[6]+0,indices[1]+2)+=ponderation*reg546; matrix(indices[6]+0,indices[2]+0)+=ponderation*reg472;
    matrix(indices[6]+0,indices[2]+1)+=ponderation*reg1038; matrix(indices[6]+0,indices[2]+2)+=ponderation*reg479; matrix(indices[6]+0,indices[3]+0)+=ponderation*reg1045; matrix(indices[6]+0,indices[3]+1)+=ponderation*reg1049; matrix(indices[6]+0,indices[3]+2)+=-reg401;
    matrix(indices[6]+0,indices[4]+0)+=ponderation*reg260; matrix(indices[6]+0,indices[4]+1)+=ponderation*reg721; matrix(indices[6]+0,indices[4]+2)+=ponderation*reg541; matrix(indices[6]+0,indices[5]+0)+=ponderation*reg191; matrix(indices[6]+0,indices[5]+1)+=ponderation*reg723;
    matrix(indices[6]+0,indices[5]+2)+=ponderation*reg731; matrix(indices[6]+0,indices[6]+0)+=ponderation*reg234; matrix(indices[6]+0,indices[6]+1)+=ponderation*reg655; matrix(indices[6]+0,indices[6]+2)+=ponderation*reg659; matrix(indices[6]+0,indices[7]+0)+=ponderation*reg254;
    matrix(indices[6]+0,indices[7]+1)+=ponderation*reg628; matrix(indices[6]+0,indices[7]+2)+=ponderation*reg831; matrix(indices[3]+2,indices[2]+1)+=ponderation*reg716; matrix(indices[3]+2,indices[2]+2)+=ponderation*reg531; matrix(indices[3]+2,indices[3]+0)+=ponderation*reg578;
    matrix(indices[3]+2,indices[3]+1)+=-reg612; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg393; matrix(indices[3]+2,indices[4]+0)+=-reg583; matrix(indices[3]+2,indices[4]+1)+=ponderation*reg1046; matrix(indices[3]+2,indices[4]+2)+=ponderation*reg480;
    matrix(indices[3]+2,indices[5]+0)+=-reg577; matrix(indices[3]+2,indices[5]+1)+=ponderation*reg1042; matrix(indices[3]+2,indices[5]+2)+=-reg624; matrix(indices[3]+2,indices[6]+0)+=-reg591; matrix(indices[3]+2,indices[6]+1)+=ponderation*reg506;
    matrix(indices[3]+2,indices[6]+2)+=ponderation*reg470; matrix(indices[3]+2,indices[7]+0)+=-reg552; matrix(indices[3]+2,indices[7]+1)+=ponderation*reg626; matrix(indices[3]+2,indices[7]+2)+=ponderation*reg466; matrix(indices[4]+0,indices[0]+0)+=ponderation*reg503;
    matrix(indices[4]+0,indices[0]+1)+=ponderation*reg1013; matrix(indices[4]+0,indices[0]+2)+=ponderation*reg1011; matrix(indices[4]+0,indices[1]+0)+=ponderation*reg501; matrix(indices[4]+0,indices[1]+1)+=ponderation*reg265; matrix(indices[4]+0,indices[1]+2)+=ponderation*reg1034;
    matrix(indices[4]+0,indices[2]+0)+=ponderation*reg496; matrix(indices[4]+0,indices[2]+1)+=ponderation*reg1028; matrix(indices[4]+0,indices[2]+2)+=ponderation*reg1026; matrix(indices[4]+0,indices[3]+0)+=ponderation*reg1021; matrix(indices[4]+0,indices[3]+1)+=ponderation*reg1096;
    matrix(indices[4]+0,indices[3]+2)+=-reg558; matrix(indices[4]+0,indices[4]+0)+=ponderation*reg1091; matrix(indices[4]+0,indices[4]+1)+=ponderation*reg1087; matrix(indices[3]+1,indices[0]+2)+=ponderation*reg651; matrix(indices[3]+1,indices[1]+0)+=ponderation*reg654;
    matrix(indices[3]+1,indices[1]+1)+=ponderation*reg873; matrix(indices[3]+1,indices[1]+2)+=ponderation*reg664; matrix(indices[3]+1,indices[2]+0)+=ponderation*reg661; matrix(indices[6]+2,indices[4]+1)+=ponderation*reg656; matrix(indices[6]+2,indices[4]+2)+=ponderation*reg618;
    matrix(indices[6]+2,indices[5]+0)+=ponderation*reg667; matrix(indices[3]+1,indices[2]+2)+=ponderation*reg305; matrix(indices[3]+1,indices[3]+0)+=-reg523; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg517; matrix(indices[3]+1,indices[3]+2)+=-reg502;
    matrix(indices[3]+1,indices[4]+0)+=ponderation*reg729; matrix(indices[3]+1,indices[4]+1)+=ponderation*reg853; matrix(indices[3]+1,indices[4]+2)+=ponderation*reg724; matrix(indices[3]+1,indices[5]+0)+=ponderation*reg722; matrix(indices[3]+1,indices[5]+1)+=-reg400;
    matrix(indices[3]+1,indices[5]+2)+=ponderation*reg750; matrix(indices[3]+1,indices[6]+0)+=ponderation*reg747; matrix(indices[3]+1,indices[6]+1)+=ponderation*reg677; matrix(indices[3]+1,indices[6]+2)+=ponderation*reg742; matrix(indices[3]+1,indices[7]+0)+=ponderation*reg739;
    matrix(indices[3]+1,indices[7]+1)+=ponderation*reg696; matrix(indices[3]+1,indices[7]+2)+=ponderation*reg706; matrix(indices[3]+2,indices[0]+0)+=-reg457; matrix(indices[3]+2,indices[0]+1)+=ponderation*reg702; matrix(indices[3]+2,indices[0]+2)+=ponderation*reg543;
    matrix(indices[3]+2,indices[1]+0)+=-reg403; matrix(indices[3]+2,indices[1]+1)+=ponderation*reg698; matrix(indices[3]+2,indices[1]+2)+=ponderation*reg539; matrix(indices[3]+2,indices[2]+0)+=-reg593; matrix(indices[4]+1,indices[7]+0)+=ponderation*reg928;
    matrix(indices[4]+1,indices[7]+1)+=ponderation*reg276; matrix(indices[4]+1,indices[7]+2)+=ponderation*reg923; matrix(indices[4]+2,indices[0]+0)+=ponderation*reg891; matrix(indices[4]+2,indices[0]+1)+=ponderation*reg889; matrix(indices[4]+2,indices[0]+2)+=ponderation*reg279;
    matrix(indices[4]+2,indices[1]+0)+=ponderation*reg884; matrix(indices[4]+2,indices[1]+1)+=ponderation*reg639; matrix(indices[4]+2,indices[1]+2)+=ponderation*reg280; matrix(indices[4]+2,indices[2]+0)+=ponderation*reg881; matrix(indices[4]+2,indices[2]+1)+=ponderation*reg878;
    matrix(indices[4]+2,indices[2]+2)+=ponderation*reg284; matrix(indices[4]+2,indices[3]+0)+=-reg551; matrix(indices[4]+2,indices[3]+1)+=ponderation*reg901; matrix(indices[4]+2,indices[3]+2)+=ponderation*reg495; matrix(indices[4]+2,indices[4]+0)+=ponderation*reg897;
    matrix(indices[4]+2,indices[4]+1)+=ponderation*reg988; matrix(indices[4]+2,indices[4]+2)+=ponderation*reg357; matrix(indices[4]+2,indices[5]+0)+=ponderation*reg984; matrix(indices[4]+2,indices[5]+1)+=ponderation*reg982; matrix(indices[4]+2,indices[5]+2)+=ponderation*reg358;
    matrix(indices[4]+2,indices[6]+0)+=ponderation*reg980; matrix(indices[4]+2,indices[6]+1)+=ponderation*reg975; matrix(indices[4]+2,indices[6]+2)+=ponderation*reg361; matrix(indices[4]+2,indices[7]+0)+=ponderation*reg1002; matrix(indices[4]+2,indices[7]+1)+=ponderation*reg275;
    matrix(indices[4]+2,indices[7]+2)+=ponderation*reg362; matrix(indices[5]+0,indices[0]+0)+=ponderation*reg994; matrix(indices[5]+0,indices[0]+1)+=ponderation*reg992; matrix(indices[5]+0,indices[0]+2)+=ponderation*reg989; matrix(indices[5]+0,indices[1]+0)+=ponderation*reg954;
    matrix(indices[4]+0,indices[4]+2)+=ponderation*reg1085; matrix(indices[4]+0,indices[5]+0)+=ponderation*reg1083; matrix(indices[4]+0,indices[5]+1)+=ponderation*reg1113; matrix(indices[4]+0,indices[5]+2)+=ponderation*reg1109; matrix(indices[4]+0,indices[6]+0)+=ponderation*reg1106;
    matrix(indices[4]+0,indices[6]+1)+=ponderation*reg1104; matrix(indices[4]+0,indices[6]+2)+=ponderation*reg1102; matrix(indices[4]+0,indices[7]+0)+=ponderation*reg1098; matrix(indices[4]+0,indices[7]+1)+=ponderation*reg1068; matrix(indices[4]+0,indices[7]+2)+=ponderation*reg1065;
    matrix(indices[4]+1,indices[0]+0)+=ponderation*reg1061; matrix(indices[4]+1,indices[0]+1)+=ponderation*reg302; matrix(indices[4]+1,indices[0]+2)+=ponderation*reg644; matrix(indices[4]+1,indices[1]+0)+=ponderation*reg1057; matrix(indices[4]+1,indices[1]+1)+=ponderation*reg307;
    matrix(indices[4]+1,indices[1]+2)+=ponderation*reg1079; matrix(indices[4]+1,indices[2]+0)+=ponderation*reg308; matrix(indices[4]+1,indices[2]+1)+=ponderation*reg310; matrix(indices[4]+1,indices[2]+2)+=ponderation*reg1075; matrix(indices[4]+1,indices[3]+0)+=ponderation*reg1073;
    matrix(indices[4]+1,indices[3]+1)+=ponderation*reg315; matrix(indices[4]+1,indices[3]+2)+=ponderation*reg920; matrix(indices[4]+1,indices[4]+0)+=ponderation*reg918; matrix(indices[4]+1,indices[4]+1)+=ponderation*reg317; matrix(indices[4]+1,indices[4]+2)+=ponderation*reg915;
    matrix(indices[4]+1,indices[5]+0)+=ponderation*reg911; matrix(indices[4]+1,indices[5]+1)+=ponderation*reg907; matrix(indices[4]+1,indices[5]+2)+=ponderation*reg939; matrix(indices[4]+1,indices[6]+0)+=ponderation*reg936; matrix(indices[4]+1,indices[6]+1)+=ponderation*reg272;
    matrix(indices[4]+1,indices[6]+2)+=ponderation*reg933;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[2]; T reg1=1-var_inter[1]; T reg2=1-var_inter[0]; T reg3=reg2*reg1; T reg4=reg1*var_inter[0];
    T reg5=var_inter[0]*reg0; T reg6=reg2*reg0; T reg7=reg1*reg0; T reg8=elem.pos(1)[2]*reg7; T reg9=var_inter[1]*var_inter[0];
    T reg10=elem.pos(0)[2]*reg7; T reg11=elem.pos(0)[1]*reg7; T reg12=elem.pos(1)[1]*reg7; T reg13=var_inter[1]*reg0; T reg14=elem.pos(0)[1]*reg3;
    T reg15=elem.pos(1)[1]*reg5; T reg16=reg4*elem.pos(1)[1]; T reg17=elem.pos(0)[1]*reg6; T reg18=reg3*elem.pos(0)[2]; T reg19=elem.pos(0)[2]*reg6;
    T reg20=elem.pos(1)[2]*reg5; T reg21=reg4*elem.pos(1)[2]; reg12=reg12-reg11; T reg22=elem.pos(2)[1]*reg13; T reg23=elem.pos(2)[1]*reg9;
    T reg24=elem.pos(2)[2]*reg9; T reg25=reg18+reg21; reg8=reg8-reg10; T reg26=reg16+reg14; T reg27=elem.pos(2)[2]*reg13;
    T reg28=reg15+reg17; T reg29=elem.pos(2)[1]*reg5; T reg30=reg19+reg20; T reg31=elem.pos(2)[2]*reg5; T reg32=var_inter[1]*reg2;
    T reg33=elem.pos(3)[1]*reg32; T reg34=reg26+reg23; reg31=reg31-reg30; T reg35=elem.pos(3)[2]*reg13; reg27=reg8+reg27;
    reg8=elem.pos(1)[0]*reg7; T reg36=elem.pos(0)[0]*reg7; T reg37=elem.pos(3)[2]*reg6; T reg38=reg25+reg24; T reg39=elem.pos(3)[2]*reg32;
    T reg40=var_inter[2]*reg1; T reg41=elem.pos(0)[0]*reg6; T reg42=elem.pos(1)[0]*reg5; T reg43=elem.pos(3)[1]*reg6; reg29=reg29-reg28;
    T reg44=var_inter[2]*reg2; reg22=reg12+reg22; reg12=elem.pos(3)[1]*reg13; reg37=reg31+reg37; reg31=elem.pos(4)[2]*reg44;
    T reg45=reg4*elem.pos(1)[0]; T reg46=elem.pos(0)[0]*reg3; T reg47=elem.pos(4)[2]*reg40; reg27=reg27-reg35; reg8=reg8-reg36;
    T reg48=elem.pos(2)[0]*reg13; T reg49=elem.pos(4)[1]*reg44; reg43=reg29+reg43; reg22=reg22-reg12; reg29=elem.pos(4)[1]*reg40;
    T reg50=elem.pos(4)[2]*reg3; T reg51=reg38+reg39; T reg52=elem.pos(2)[0]*reg5; T reg53=elem.pos(4)[1]*reg3; T reg54=reg34+reg33;
    T reg55=reg42+reg41; T reg56=var_inter[2]*var_inter[0]; reg50=reg50-reg51; T reg57=elem.pos(3)[0]*reg13; reg48=reg8+reg48;
    reg52=reg52-reg55; reg8=var_inter[1]*var_inter[2]; T reg58=elem.pos(5)[2]*reg4; T reg59=elem.pos(5)[1]*reg56; reg43=reg43-reg49;
    T reg60=elem.pos(5)[1]*reg4; reg53=reg53-reg54; T reg61=reg9*elem.pos(2)[0]; T reg62=reg45+reg46; reg22=reg22-reg29;
    T reg63=elem.pos(5)[1]*reg40; reg37=reg37-reg31; T reg64=elem.pos(5)[2]*reg56; T reg65=elem.pos(3)[0]*reg6; reg27=reg27-reg47;
    T reg66=elem.pos(5)[2]*reg40; T reg67=elem.pos(6)[2]*reg9; reg58=reg50+reg58; reg50=elem.pos(4)[0]*reg44; reg65=reg52+reg65;
    reg52=elem.pos(6)[1]*reg8; T reg68=elem.pos(4)[0]*reg40; reg48=reg48-reg57; reg43=reg43-reg59; T reg69=elem.pos(6)[1]*reg56;
    T reg70=elem.pos(6)[1]*reg9; reg60=reg53+reg60; reg63=reg22+reg63; reg37=reg37-reg64; reg22=elem.pos(6)[2]*reg56;
    reg66=reg27+reg66; reg27=reg62+reg61; reg53=elem.pos(3)[0]*reg32; T reg71=elem.pos(6)[2]*reg8; T reg72=elem.pos(7)[1]*reg8;
    reg71=reg66+reg71; reg66=elem.pos(7)[2]*reg8; reg65=reg65-reg50; T reg73=elem.pos(5)[0]*reg56; reg70=reg60+reg70;
    reg60=elem.pos(4)[0]*reg3; T reg74=reg27+reg53; T reg75=elem.pos(7)[1]*reg32; T reg76=elem.pos(7)[2]*reg44; reg22=reg37+reg22;
    reg37=elem.pos(7)[1]*reg44; reg69=reg43+reg69; reg48=reg48-reg68; reg43=elem.pos(5)[0]*reg40; reg67=reg58+reg67;
    reg58=elem.pos(7)[2]*reg32; reg52=reg63+reg52; reg75=reg70+reg75; reg58=reg67+reg58; reg65=reg65-reg73;
    reg63=elem.pos(6)[0]*reg56; reg52=reg52-reg72; reg67=elem.pos(6)[0]*reg8; reg43=reg48+reg43; reg37=reg69+reg37;
    reg76=reg22+reg76; reg60=reg60-reg74; reg71=reg71-reg66; reg22=1+(*f.m).poisson_ratio; reg48=elem.pos(5)[0]*reg4;
    reg63=reg65+reg63; reg65=elem.pos(7)[0]*reg44; reg69=elem.pos(6)[0]*reg9; reg48=reg60+reg48; reg60=reg37*reg58;
    reg70=reg52*reg58; T reg77=reg76*reg75; T reg78=var_inter[0]-0.21132486540518707896; T reg79=reg2-0.21132486540518707896; T reg80=var_inter[1]-0.21132486540518707896;
    reg22=reg22/(*f.m).elastic_modulus; T reg81=reg71*reg75; reg67=reg43+reg67; reg43=elem.pos(7)[0]*reg8; reg78=reg78/0.57735026918962573106;
    reg79=reg79/0.57735026918962573106; T reg82=reg71*reg37; T reg83=reg1-0.21132486540518707896; T reg84=reg52*reg76; reg81=reg70-reg81;
    reg67=reg67-reg43; reg70=var_inter[2]-0.21132486540518707896; reg69=reg48+reg69; reg48=elem.pos(7)[0]*reg32; reg65=reg63+reg65;
    reg77=reg60-reg77; reg60=pow(reg22,2); reg80=reg80/0.57735026918962573106; reg63=1.0/(*f.m).elastic_modulus; reg83=reg83/0.57735026918962573106;
    T reg85=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg48=reg69+reg48; reg79=1-reg79; reg22=reg22*reg60; reg80=1-reg80;
    reg70=reg70/0.57735026918962573106; reg69=reg67*reg77; T reg86=reg65*reg81; reg82=reg84-reg82; reg78=1-reg78;
    reg84=reg67*reg58; T reg87=reg48*reg82; T reg88=reg80*reg79; T reg89=reg85*reg22; reg86=reg69-reg86;
    reg22=reg63*reg22; reg83=1-reg83; reg58=reg65*reg58; reg69=reg71*reg48; reg70=1-reg70;
    T reg90=reg85*reg60; reg60=reg63*reg60; reg80=reg78*reg80; T reg91=reg76*reg48; T reg92=reg0-0.21132486540518707896;
    T reg93=reg85*reg89; reg79=reg79*reg83; T reg94=reg70*reg88; T reg95=reg80*reg70; T reg96=reg85*reg22;
    T reg97=reg65*reg75; T reg98=reg85*reg60; reg60=reg63*reg60; T reg99=reg85*reg90; reg87=reg86+reg87;
    reg91=reg58-reg91; reg58=reg37*reg48; reg75=reg67*reg75; reg69=reg84-reg69; reg48=reg52*reg48;
    reg22=reg63*reg22; reg76=reg67*reg76; reg71=reg71*reg65; reg60=reg60-reg99; reg65=reg52*reg65;
    reg90=reg63*reg90; reg22=reg22-reg93; reg89=reg63*reg89; reg71=reg76-reg71; reg58=reg97-reg58;
    reg81=reg81/reg87; reg96=reg93+reg96; reg37=reg67*reg37; reg69=reg69/reg87; reg98=reg99+reg98;
    reg48=reg75-reg48; reg77=reg77/reg87; reg91=reg91/reg87; reg52=reg95*elem.proute[0](1,1); reg67=reg94*elem.proute[1](1,1);
    reg75=reg70*reg79; reg83=reg78*reg83; reg92=reg92/0.57735026918962573106; reg82=reg82/reg87; reg71=reg71/reg87;
    reg65=reg37-reg65; reg37=reg85*reg96; reg92=1-reg92; reg70=reg70*reg83; reg76=reg63*reg22;
    reg89=reg93+reg89; reg60=reg63*reg60; reg98=reg85*reg98; reg63=reg56*reg81; reg78=reg99+reg90;
    reg84=reg56*reg69; reg58=reg58/reg87; reg86=reg40*reg91; reg93=reg75*elem.proute[2](1,1); reg67=reg52+reg67;
    reg48=reg48/reg87; reg52=reg40*reg77; reg97=reg6*reg81; T reg100=reg4*reg71; T reg101=reg85*reg89;
    reg37=reg76-reg37; reg76=reg77*reg7; T reg102=reg5*reg69; T reg103=reg6*reg48; T reg104=reg91*reg7;
    T reg105=reg56*reg48; T reg106=reg4*reg82; T reg107=reg5*reg81; T reg108=reg44*reg69; T reg109=reg8*reg58;
    reg98=reg60-reg98; reg60=reg44*reg81; T reg110=reg40*reg58; T reg111=reg44*reg48; reg78=reg85*reg78;
    reg85=reg8*reg91; T reg112=reg13*reg77; T reg113=reg52+reg63; T reg114=reg80*reg92; T reg115=reg8*reg77;
    T reg116=reg13*reg91; T reg117=reg6*reg69; T reg118=reg86+reg84; T reg119=reg70*elem.proute[3](1,1); reg65=reg65/reg87;
    T reg120=reg13*reg58; reg93=reg67+reg93; reg67=reg9*reg65; T reg121=reg9*reg71; T reg122=reg112+reg97;
    T reg123=reg102-reg116; T reg124=reg9*reg82; T reg125=reg112-reg107; T reg126=reg32*reg82; T reg127=reg109-reg105;
    T reg128=reg111+reg109; T reg129=reg84-reg85; T reg130=reg117+reg116; T reg131=reg32*reg71; T reg132=reg115-reg63;
    T reg133=reg120+reg103; T reg134=reg32*reg65; T reg135=reg4*reg65; T reg136=reg5*reg48; T reg137=reg108+reg85;
    T reg138=reg110+reg105; T reg139=reg60+reg115; T reg140=reg88*reg92; reg119=reg93+reg119; reg93=reg114*elem.proute[4](1,1);
    T reg141=reg3*reg82; T reg142=reg7*reg58; T reg143=reg97-reg76; T reg144=reg86-reg108; T reg145=reg102+reg104;
    reg101=reg37-reg101; reg37=reg104-reg117; T reg146=reg107+reg76; T reg147=reg3*reg71; T reg148=reg111-reg110;
    T reg149=reg60-reg52; reg78=reg98-reg78; reg113=reg106+reg113; reg98=reg3*reg65; T reg150=reg100+reg118;
    T reg151=reg136+reg142; T reg152=reg133+reg134; reg137=reg137-reg131; reg138=reg135+reg138; T reg153=reg100-reg145;
    reg143=reg143-reg141; reg130=reg130+reg131; reg144=reg144-reg147; reg37=reg37+reg147; reg146=reg146-reg106;
    T reg154=reg103-reg142; T reg155=reg134-reg128; reg125=reg125-reg124; T reg156=reg122+reg126; reg148=reg148+reg98;
    reg149=reg149+reg141; T reg157=0.5*reg150; reg132=reg124+reg132; reg129=reg129-reg121; reg127=reg127+reg67;
    T reg158=reg120-reg136; reg123=reg123+reg121; reg78=reg78/reg101; T reg159=reg79*reg92; T reg160=reg126-reg139;
    T reg161=reg140*elem.proute[5](1,1); reg93=reg119+reg93; reg119=0.5*reg113; T reg162=0.5*reg146; T reg163=reg159*elem.proute[6](1,1);
    T reg164=0.5*reg129; T reg165=0.5*reg37; T reg166=0.5*reg127; reg161=reg93+reg161; reg93=0.5*reg125;
    T reg167=reg78*reg157; reg158=reg158-reg67; T reg168=0.5*reg160; reg92=reg83*reg92; T reg169=0.5*reg148;
    T reg170=0.5*reg123; T reg171=0.5*reg143; T reg172=0.5*reg149; T reg173=0.5*reg155; reg154=reg154-reg98;
    T reg174=0.5*reg144; reg22=reg22/reg101; T reg175=0.5*reg138; T reg176=0.5*reg152; reg151=reg151-reg135;
    T reg177=0.5*reg153; T reg178=0.5*reg156; T reg179=0.5*reg132; T reg180=reg78*reg119; T reg181=0.5*reg130;
    T reg182=0.5*reg137; T reg183=reg78*reg165; T reg184=reg78*reg169; reg89=reg89/reg101; T reg185=reg78*reg176;
    T reg186=reg78*reg170; T reg187=reg22*reg113; T reg188=reg22*reg150; T reg189=reg78*reg178; T reg190=reg78*reg177;
    reg180=2*reg180; T reg191=0.5*reg154; T reg192=reg78*reg171; T reg193=reg78*reg174; reg101=reg96/reg101;
    reg96=reg78*reg172; T reg194=reg78*reg182; T reg195=reg22*reg138; T reg196=reg78*reg181; T reg197=reg78*reg162;
    T reg198=reg78*reg166; T reg199=reg78*reg164; T reg200=0.5*reg151; T reg201=reg78*reg173; T reg202=2*reg167;
    T reg203=reg92*elem.proute[7](1,1); T reg204=reg78*reg168; T reg205=reg78*reg175; T reg206=0.5*reg158; T reg207=reg78*reg179;
    reg163=reg161+reg163; reg161=reg78*reg93; T reg208=reg101*reg132; T reg209=2*reg189; T reg210=reg22*reg149;
    T reg211=reg22*reg151; T reg212=reg22*reg160; T reg213=reg22*reg154; T reg214=reg22*reg129; T reg215=reg22*reg137;
    T reg216=reg101*reg130; T reg217=reg101*reg150; T reg218=reg101*reg160; reg205=2*reg205; T reg219=reg22*reg132;
    reg196=2*reg196; reg198=2*reg198; T reg220=reg89*reg138; reg199=2*reg199; T reg221=reg22*reg156;
    reg161=2*reg161; T reg222=reg101*reg156; T reg223=reg78*reg206; reg207=2*reg207; T reg224=reg22*reg130;
    reg184=2*reg184; T reg225=reg89*reg127; reg186=2*reg186; T reg226=2*reg185; T reg227=reg101*reg149;
    reg194=2*reg194; T reg228=reg22*reg148; T reg229=reg22*reg144; T reg230=reg22*reg152; reg193=2*reg193;
    T reg231=reg101*reg113; T reg232=reg152*reg195; T reg233=reg22*reg158; T reg234=reg22*reg125; reg197=2*reg197;
    T reg235=reg78*reg200; reg190=2*reg190; T reg236=reg22*reg123; T reg237=reg22*reg127; T reg238=reg22*reg155;
    T reg239=reg22*reg153; T reg240=reg130*reg188; T reg241=reg178*reg180; T reg242=reg22*reg37; T reg243=reg89*reg155;
    reg204=2*reg204; reg203=reg163+reg203; reg201=2*reg201; reg163=reg181*reg202; T reg244=reg156*reg187;
    T reg245=reg89*reg152; T reg246=reg22*reg146; reg96=2*reg96; reg192=2*reg192; T reg247=reg89*reg148;
    T reg248=reg78*reg191; reg183=2*reg183; T reg249=reg22*reg143; T reg250=reg228*reg154; T reg251=reg239*reg153;
    T reg252=reg162*reg197; T reg253=reg170*reg194; T reg254=reg125*reg212; T reg255=reg89*reg144; T reg256=reg152*reg238;
    T reg257=reg144*reg229; T reg258=reg148*reg228; T reg259=reg215*reg150; T reg260=reg230*reg154; T reg261=reg127*reg238;
    T reg262=reg93*reg161; T reg263=reg236*reg123; T reg264=reg89*reg130; T reg265=reg171*reg226; T reg266=reg125*reg219;
    reg223=2*reg223; T reg267=reg149*reg212; T reg268=reg153*reg188; T reg269=reg162*reg180; T reg270=reg160*reg212;
    T reg271=reg125*reg234; T reg272=reg125*reg245; T reg273=reg182*reg194; T reg274=reg177*reg199; T reg275=reg186*reg165;
    T reg276=reg146*reg219; T reg277=reg153*reg229; T reg278=reg162*reg96; T reg279=reg153*reg224; T reg280=reg155*reg238;
    T reg281=reg204*reg119; T reg282=reg148*reg195; T reg283=reg152*reg218; T reg284=reg180*reg93; T reg285=reg89*reg153;
    T reg286=reg162*reg209; T reg287=reg188*reg123; T reg288=reg220*reg150; T reg289=reg152*reg237; T reg290=reg213*reg154;
    T reg291=reg202*reg165; T reg292=reg93*reg207; T reg293=reg214*reg123; T reg294=reg215*reg37; T reg295=reg209*reg206;
    T reg296=reg204*reg171; T reg297=reg204*reg93; T reg298=reg215*reg123; T reg299=reg222*reg154; T reg300=reg209*reg93;
    T reg301=reg224*reg123; T reg302=reg172*reg96; T reg303=reg233*reg154; T reg304=reg162*reg161; T reg305=reg236*reg153;
    T reg306=reg89*reg123; T reg307=reg132*reg212; T reg308=reg146*reg212; T reg309=reg93*reg96; T reg310=reg229*reg123;
    T reg311=reg178*reg201; T reg312=reg164*reg194; T reg313=reg175*reg202; T reg314=reg153*reg214; T reg315=reg177*reg194;
    T reg316=reg207*reg172; T reg317=reg154*reg238; T reg318=reg177*reg190; T reg319=reg146*reg246; T reg320=reg151*reg228;
    T reg321=reg204*reg179; T reg322=reg212*reg143; T reg323=reg129*reg215; T reg324=reg174*reg199; T reg325=reg151*reg230;
    T reg326=reg149*reg219; T reg327=reg193*reg170; T reg328=reg125*reg221; T reg329=reg177*reg186; T reg330=reg234*reg146;
    T reg331=reg125*reg210; T reg332=reg162*reg226; T reg333=reg154*reg195; T reg334=reg151*reg238; T reg335=reg179*reg207;
    T reg336=reg194*reg165; T reg337=reg149*reg187; T reg338=reg215*reg137; T reg339=reg143*reg187; T reg340=reg89*reg129;
    T reg341=reg151*reg237; T reg342=reg174*reg202; T reg343=reg170*reg186; T reg344=reg168*reg204; T reg345=reg196*reg170;
    T reg346=reg154*reg237; T reg347=reg89*reg137; T reg348=reg151*reg195; T reg349=reg144*reg214; T reg350=reg89*reg150;
    T reg351=reg146*reg210; T reg352=reg204*reg176; T reg353=reg180*reg172; T reg354=reg214*reg150; T reg355=reg243*reg156;
    T reg356=reg127*reg237; T reg357=reg162*reg207; T reg358=reg125*reg187; T reg359=reg89*reg158; T reg360=reg149*reg210;
    T reg361=reg174*reg194; T reg362=reg177*reg202; T reg363=reg146*reg187; T reg364=reg174*reg193; T reg365=reg101*reg123;
    T reg366=reg199*reg170; T reg367=reg151*reg222; T reg368=reg151*reg233; T reg369=reg119*reg207; T reg370=reg177*reg196;
    T reg371=reg101*reg129; T reg372=reg204*reg172; T reg373=reg144*reg215; T reg374=reg170*reg202; T reg375=reg146*reg221;
    T reg376=reg151*reg211; T reg377=reg153*reg215; T reg378=reg204*reg162; T reg379=reg146*reg245; T reg380=reg200*reg209;
    T reg381=reg101*reg144; T reg382=reg129*reg214; T reg383=reg144*reg188; T reg384=reg177*reg193; T reg385=reg156*reg247;
    T reg386=reg193*reg165; T reg387=reg210*reg143; T reg388=reg176*reg96; T reg389=reg196*reg176; T reg390=reg245*reg130;
    T reg391=reg209*reg191; T reg392=reg245*reg143; reg244=reg163+reg244; T reg393=reg176*reg205; T reg394=reg138*reg195;
    T reg395=reg148*reg238; T reg396=reg240+reg241; T reg397=reg242*reg37; T reg398=reg171*reg192; T reg399=reg188*reg150;
    T reg400=reg101*reg125; T reg401=reg246*reg143; T reg402=reg171*reg96; T reg403=reg204*reg178; T reg404=reg219*reg113;
    T reg405=reg229*reg37; T reg406=reg158*reg195; reg215=reg130*reg215; T reg407=reg178*reg209; T reg408=reg89*reg154;
    T reg409=reg199*reg157; T reg410=reg211*reg154; T reg411=reg156*reg220; T reg412=reg164*reg199; T reg413=reg176*reg180;
    T reg414=reg217*reg113; T reg415=reg152*reg228; T reg416=reg178*reg96; T reg417=reg239*reg37; T reg418=reg156*reg216;
    T reg419=reg181*reg209; T reg420=reg130*reg229; T reg421=reg219*reg143; T reg422=reg199*reg165; T reg423=reg197*reg171;
    T reg424=reg236*reg37; T reg425=reg156*reg221; T reg426=reg181*reg196; T reg427=reg212*reg113; T reg428=reg194*reg157;
    T reg429=reg158*reg238; T reg430=reg152*reg231; T reg431=reg180*reg157; T reg432=reg193*reg181; T reg433=reg157*reg202;
    T reg434=reg113*reg187; T reg435=reg210*reg156; reg238=reg138*reg238; T reg436=reg178*reg205; T reg437=reg101*reg146;
    T reg438=reg171*reg209; T reg439=reg224*reg37; T reg440=reg119*reg180; T reg441=reg158*reg237; T reg442=reg196*reg165;
    T reg443=reg221*reg143; reg248=2*reg248; T reg444=reg230*reg158; T reg445=reg183*reg165; T reg446=reg249*reg143;
    T reg447=reg234*reg143; reg235=2*reg235; T reg448=reg203+(*f.m).f_vol[0]; T reg449=reg0*reg3; T reg450=reg156*reg225;
    T reg451=reg176*reg207; T reg452=var_inter[2]*reg32; T reg453=reg226*reg93; T reg454=reg89*reg151; T reg455=reg222*reg158;
    T reg456=reg171*reg207; T reg457=reg214*reg37; T reg458=reg152*reg208; T reg459=reg181*reg194; reg212=reg156*reg212;
    T reg460=var_inter[2]*reg9; T reg461=var_inter[2]*reg4; T reg462=reg178*reg198; T reg463=reg101*reg153; T reg464=reg148*reg237;
    T reg465=reg233*reg158; T reg466=var_inter[2]*reg3; T reg467=reg138*reg237; T reg468=reg0*reg32; T reg469=reg0*reg9;
    reg0=reg4*reg0; T reg470=reg152*reg230; T reg471=reg130*reg214; T reg472=reg228*reg158; T reg473=reg132*reg219;
    T reg474=reg178*reg207; T reg475=reg184*reg178; T reg476=reg130*reg224; T reg477=reg171*reg161; T reg478=reg190*reg165;
    T reg479=reg101*reg37; T reg480=reg171*reg180; T reg481=reg203+(*f.m).f_vol[1]; reg203=reg203+(*f.m).f_vol[2]; T reg482=reg156*reg219;
    T reg483=reg181*reg199; reg232=reg241+reg232; reg241=reg188*reg37; T reg484=reg101*reg137; T reg485=reg152*reg227;
    T reg486=reg151*reg255; T reg487=reg129*reg218; T reg488=reg198*reg157; T reg489=reg162*reg184; T reg490=reg151*reg208;
    T reg491=reg177*reg201; T reg492=reg204*reg181; T reg493=reg162*reg198; T reg494=reg151*reg350; T reg495=reg177*reg198;
    T reg496=reg151*reg340; T reg497=reg151*reg227; reg323=reg321+reg323; T reg498=reg169*reg205; T reg499=reg199*reg166;
    T reg500=reg162*reg205; reg341=reg357+reg341; T reg501=reg174*reg180; T reg502=reg179*reg194; T reg503=reg151*reg231;
    T reg504=reg149*reg220; T reg505=reg218*reg150; T reg506=reg151*reg218; T reg507=reg169*reg180; T reg508=reg119*reg194;
    T reg509=reg177*reg205; reg320=reg278+reg320; T reg510=reg468*reg481; reg389=reg390+reg389; T reg511=reg162*reg201;
    reg337=reg337-reg342; reg476=reg476+reg407; T reg512=reg468*reg203; reg348=reg269+reg348; T reg513=reg149*reg217;
    T reg514=reg151*reg347; T reg515=reg130*reg227; T reg516=reg193*reg178; T reg517=reg176*reg194; T reg518=reg177*reg184;
    T reg519=reg204*reg174; reg277=reg278+reg277; reg278=reg225*reg150; T reg520=reg176*reg199; T reg521=reg130*reg225;
    T reg522=reg179*reg201; T reg523=reg153*reg247; T reg524=reg200*reg193; T reg525=reg218*reg127; reg471=reg471-reg474;
    T reg526=reg162*reg202; T reg527=reg153*reg231; T reg528=reg169*reg201; reg269=reg269-reg268; reg267=reg361+reg267;
    T reg529=reg138*reg208; T reg530=reg153*reg220; T reg531=reg178*reg199; T reg532=reg200*reg202; T reg533=reg130*reg208;
    T reg534=reg162*reg199; T reg535=reg130*reg218; T reg536=reg454*reg153; T reg537=reg190*reg200; T reg538=reg162*reg186;
    T reg539=reg400*reg153; T reg540=reg466*reg481; reg305=reg304+reg305; T reg541=reg153*reg359; T reg542=reg200*reg186;
    T reg543=reg164*reg201; T reg544=reg162*reg196; T reg545=reg153*reg222; T reg546=reg204*reg169; T reg547=reg178*reg194;
    T reg548=reg127*reg347; reg279=reg279-reg286; T reg549=reg243*reg149; T reg550=reg153*reg245; T reg551=reg200*reg196;
    T reg552=reg484*reg149; T reg553=reg162*reg193; T reg554=reg153*reg227; T reg555=reg0*reg203; T reg556=reg193*reg176;
    reg376=reg252+reg376; T reg557=reg130*reg247; T reg558=reg138*reg340; T reg559=reg149*reg371; T reg560=reg400*reg151;
    T reg561=reg162*reg223; T reg562=reg174*reg207; T reg563=reg166*reg194; T reg564=reg151*reg306; T reg565=reg177*reg223;
    T reg566=reg243*reg129; T reg567=reg243*reg130; reg368=reg304+reg368; reg420=reg420-reg416; reg304=reg367+reg332;
    T reg568=reg169*reg198; reg326=reg324+reg326; T reg569=reg151*reg264; T reg570=reg177*reg226; T reg571=reg286+reg325;
    T reg572=reg153*reg208; T reg573=reg175*reg199; reg356=reg335+reg356; T reg574=reg119*reg198; T reg575=reg484*reg156;
    T reg576=reg176*reg202; T reg577=reg130*reg220; T reg578=reg393+reg396; reg352=reg355+reg352; T reg579=reg200*reg199;
    T reg580=reg162*reg194; T reg581=reg153*reg218; T reg582=reg169*reg207; reg215=reg215-reg403; T reg583=reg178*reg202;
    T reg584=reg460*reg203; T reg585=reg130*reg231; reg394=reg440+reg394; reg377=reg378+reg377; T reg586=reg149*reg225;
    T reg587=reg243*reg153; T reg588=reg200*reg194; T reg589=reg158*reg350; T reg590=reg205*reg93; reg263=reg262+reg263;
    T reg591=reg123*reg359; T reg592=reg231*reg158; T reg593=reg186*reg206; T reg594=reg152*reg347; T reg595=reg181*reg201;
    T reg596=reg196*reg93; T reg597=reg175*reg194; T reg598=reg222*reg123; reg259=reg281-reg259; reg472=reg309+reg472;
    T reg599=reg184*reg170; reg301=reg301-reg300; T reg600=reg166*reg201; T reg601=reg245*reg123; T reg602=reg196*reg206;
    reg307=reg312+reg307; T reg603=reg255*reg158; T reg604=reg170*reg207; T reg605=reg125*reg371; T reg606=reg466*reg448;
    T reg607=reg208*reg158; T reg608=reg125*reg225; T reg609=reg206*reg207; T reg610=reg181*reg205; T reg611=reg152*reg350;
    reg406=reg284+reg406; reg254=reg253+reg254; T reg612=reg206*reg201; reg256=reg403+reg256; reg403=reg204*reg170;
    T reg613=reg484*reg125; T reg614=reg484*reg132; T reg615=reg243*reg125; T reg616=reg204*reg206; T reg617=reg204*reg164;
    T reg618=reg460*reg448; T reg619=reg205*reg170; T reg620=reg469*reg481; T reg621=reg455+reg453; T reg622=reg166*reg207;
    T reg623=reg199*reg93; T reg624=reg208*reg123; T reg625=reg132*reg225; reg293=reg292+reg293; T reg626=reg123*reg225;
    T reg627=reg199*reg206; T reg628=reg152*reg340; T reg629=reg181*reg198; T reg630=reg93*reg194; T reg631=reg218*reg123;
    reg465=reg262+reg465; reg262=reg469*reg203; reg298=reg297+reg298; T reg632=reg132*reg371; T reg633=reg164*reg207;
    T reg634=reg243*reg123; T reg635=reg206*reg194; reg462=reg458+reg462; reg458=reg193*reg93; T reg636=reg227*reg123;
    reg311=reg283+reg311; reg473=reg412+reg473; reg310=reg309+reg310; reg283=reg184*reg93; reg309=reg227*reg158;
    T reg637=reg123*reg247; T reg638=reg193*reg206; T reg639=reg166*reg198; reg232=reg163+reg232; T reg640=reg300+reg444;
    T reg641=reg93*reg202; T reg642=reg231*reg123; T reg643=reg226*reg170; T reg644=reg264*reg158; T reg645=reg243*reg150;
    reg284=reg284-reg287; reg289=reg474+reg289; reg474=reg220*reg123; T reg646=reg206*reg202; T reg647=reg138*reg218;
    T reg648=reg345-reg328; T reg649=reg226*reg206; reg382=reg335+reg382; reg335=reg209*reg170; T reg650=reg125*reg216;
    reg475=reg485+reg475; reg485=reg156*reg217; T reg651=reg181*reg180; T reg652=reg119*reg201; reg393=reg244+reg393;
    reg388=reg385+reg388; T reg653=reg272+reg295; T reg654=reg461*reg203; T reg655=reg184*reg181; T reg656=reg156*reg381;
    T reg657=reg181*reg96; T reg658=reg152*reg255; T reg659=reg184*reg176; reg435=reg432-reg435; T reg660=reg176*reg201;
    reg334=reg378+reg334; reg378=reg129*reg225; T reg661=reg469*reg448; reg212=reg459-reg212; reg467=reg369+reg467;
    T reg662=reg407+reg470; reg451=reg450+reg451; T reg663=reg156*reg371; T reg664=reg181*reg207; T reg665=reg176*reg198;
    reg482=reg483-reg482; reg271=reg343+reg271; T reg666=reg206*reg223; T reg667=reg170*reg161; T reg668=reg125*reg365;
    T reg669=reg169*reg96; T reg670=reg125*reg359; T reg671=reg206*reg161; T reg672=reg149*reg247; reg413=reg411+reg413;
    T reg673=reg468*reg448; T reg674=reg180*reg170; T reg675=reg125*reg217; reg429=reg297+reg429; reg297=reg125*reg220;
    T reg676=reg170*reg201; T reg677=reg180*reg206; T reg678=reg204*reg166; T reg679=reg158*reg347; reg266=reg366+reg266;
    T reg680=reg93*reg201; T reg681=reg218*reg158; reg238=reg281+reg238; reg436=reg430+reg436; reg281=reg206*reg198;
    reg441=reg292+reg441; reg292=reg170*reg198; reg430=reg158*reg340; T reg682=reg93*reg198; T reg683=reg243*reg132;
    T reg684=reg138*reg347; T reg685=reg176*reg209; reg331=reg327+reg331; T reg686=reg184*reg206; T reg687=reg149*reg381;
    T reg688=reg245*reg156; T reg689=reg170*reg96; T reg690=reg125*reg381; T reg691=reg174*reg96; T reg692=reg460*reg481;
    T reg693=reg201*reg157; T reg694=reg125*reg247; reg418=reg419+reg418; T reg695=reg206*reg96; reg415=reg416+reg415;
    reg416=reg176*reg226; T reg696=reg426+reg425; reg358=reg358-reg374; T reg697=reg205*reg206; T reg698=reg169*reg184;
    reg360=reg364+reg360; T reg699=reg400*reg154; T reg700=reg171*reg223; T reg701=reg148*reg350; T reg702=reg288+reg313;
    T reg703=reg306*reg154; T reg704=reg223*reg165; reg303=reg477+reg303; T reg705=reg205*reg172; T reg706=reg148*reg231;
    T reg707=reg299+reg265; T reg708=reg264*reg154; T reg709=reg226*reg165; reg258=reg302+reg258; T reg710=reg438+reg260;
    T reg711=reg227*reg154; T reg712=reg171*reg184; T reg713=reg466*reg203; T reg714=reg255*reg154; T reg715=reg184*reg165;
    reg250=reg402+reg250; reg280=reg344+reg280; reg464=reg316+reg464; T reg716=reg225*reg37; T reg717=reg199*reg191;
    T reg718=reg171*reg194; T reg719=reg218*reg37; T reg720=reg174*reg198; reg294=reg296+reg294; T reg721=reg148*reg340;
    T reg722=reg243*reg37; T reg723=reg194*reg191; T reg724=reg198*reg172; T reg725=reg449*reg203; reg290=reg398+reg290;
    T reg726=reg148*reg208; T reg727=reg437*reg154; T reg728=reg235*reg171; T reg729=reg285*reg154; T reg730=reg235*reg165;
    reg282=reg353+reg282; reg357=reg314+reg357; reg314=reg153*reg225; T reg731=reg174*reg205; T reg732=reg184*reg191;
    T reg733=reg144*reg218; T reg734=reg243*reg137; T reg735=reg143*reg381; T reg736=reg96*reg165; T reg737=reg194*reg172;
    T reg738=reg208*reg150; T reg739=reg143*reg247; T reg740=reg191*reg96; reg339=reg339-reg291; T reg741=reg154*reg350;
    T reg742=reg205*reg165; T reg743=reg169*reg199; reg333=reg480+reg333; T reg744=reg144*reg225; reg338=reg344+reg338;
    reg344=reg208*reg154; T reg745=reg171*reg198; T reg746=reg154*reg340; T reg747=reg198*reg165; reg346=reg456+reg346;
    T reg748=reg218*reg154; T reg749=reg171*reg205; T reg750=reg169*reg194; reg447=reg447+reg275; T reg751=reg223*reg191;
    T reg752=reg243*reg144; T reg753=reg243*reg143; T reg754=reg365*reg143; T reg755=reg161*reg165; T reg756=reg452*reg203;
    T reg757=reg359*reg143; T reg758=reg161*reg191; reg373=reg372+reg373; T reg759=reg198*reg191; T reg760=reg371*reg143;
    T reg761=reg207*reg165; T reg762=reg119*reg199; T reg763=reg225*reg143; T reg764=reg207*reg191; T reg765=reg194*reg173;
    reg322=reg322+reg336; T reg766=reg201*reg191; T reg767=reg449*reg448; T reg768=reg400*reg37; T reg769=reg225*reg113;
    reg401=reg478+reg401; T reg770=reg235*reg191; T reg771=reg463*reg143; T reg772=reg197*reg165; T reg773=reg207*reg157;
    T reg774=reg371*reg113; T reg775=reg454*reg143; T reg776=reg197*reg191; reg446=reg446+reg445; T reg777=reg248*reg191;
    T reg778=reg175*reg198; T reg779=reg479*reg143; T reg780=reg192*reg165; reg404=reg404-reg409; T reg781=reg408*reg143;
    T reg782=reg192*reg191; T reg783=reg209*reg165; T reg784=reg175*reg180; T reg785=reg392+reg391; T reg786=reg484*reg143;
    T reg787=reg204*reg165; T reg788=reg204*reg157; reg410=reg410+reg423; T reg789=reg204*reg191; T reg790=reg484*reg113;
    T reg791=reg243*reg113; T reg792=reg449*reg481; reg397=reg398+reg397; reg398=reg408*reg37; T reg793=reg183*reg191;
    T reg794=reg175*reg201; reg427=reg427-reg428; T reg795=reg190*reg171; T reg796=reg437*reg37; reg417=reg423+reg417;
    reg423=reg204*reg175; T reg797=reg454*reg37; T reg798=reg190*reg191; T reg799=reg175*reg207; T reg800=reg171*reg186;
    reg439=reg439-reg438; T reg801=reg245*reg37; T reg802=reg196*reg191; reg395=reg372+reg395; reg372=reg171*reg193;
    T reg803=reg227*reg37; reg405=reg402+reg405; reg402=reg247*reg37; T reg804=reg193*reg191; T reg805=reg174*reg201;
    T reg806=reg148*reg347; T reg807=reg171*reg202; T reg808=reg231*reg37; reg440=reg440+reg399; reg480=reg480-reg241;
    T reg809=reg201*reg172; T reg810=reg220*reg37; T reg811=reg191*reg202; T reg812=reg148*reg218; T reg813=reg171*reg199;
    T reg814=reg208*reg37; reg457=reg456+reg457; reg456=reg220*reg113; T reg815=reg461*reg481; reg387=reg387+reg386;
    T reg816=reg442-reg443; T reg817=reg226*reg191; T reg818=reg216*reg143; T reg819=reg205*reg191; reg431=reg414+reg431;
    T reg820=reg217*reg143; T reg821=reg180*reg165; T reg822=reg359*reg37; T reg823=reg220*reg143; T reg824=reg180*reg191;
    reg421=reg421+reg422; reg424=reg477+reg424; reg477=reg175*reg205; reg434=reg434+reg433; T reg825=reg231*reg154;
    T reg826=reg186*reg191; T reg827=reg171*reg196; T reg828=reg222*reg37; T reg829=reg461*reg448; T reg830=reg200*reg96;
    T reg831=reg146*reg247; T reg832=reg146*reg381; T reg833=reg177*reg96; T reg834=reg200*reg184; reg351=reg384+reg351;
    reg353=reg353-reg383; T reg835=reg379+reg380; T reg836=reg204*reg182; T reg837=reg146*reg216; T reg838=reg177*reg209;
    T reg839=reg484*reg160; T reg840=reg200*reg226; T reg841=reg370-reg375; T reg842=reg200*reg161; T reg843=reg146*reg359;
    T reg844=reg144*reg220; T reg845=reg169*reg202; T reg846=reg146*reg365; T reg847=reg177*reg161; T reg848=reg200*reg223;
    reg330=reg329+reg330; T reg849=reg243*reg160; T reg850=reg199*reg172; T reg851=reg200*reg197; T reg852=reg454*reg146;
    T reg853=reg204*reg173; T reg854=reg144*reg208; T reg855=reg463*reg146; T reg856=reg177*reg197; reg251=reg252+reg251;
    reg252=reg0*reg481; reg261=reg321+reg261; reg257=reg302+reg257; reg302=reg204*reg200; reg243=reg243*reg146;
    reg484=reg484*reg146; reg204=reg204*reg177; reg321=reg200*reg201; reg308=reg315+reg308; T reg857=reg144*reg247;
    T reg858=reg193*reg169; T reg859=reg200*reg207; T reg860=reg146*reg225; T reg861=reg452*reg448; T reg862=reg146*reg371;
    T reg863=reg177*reg207; T reg864=reg200*reg198; reg276=reg274+reg276; reg354=reg369-reg354; reg369=reg200*reg180;
    T reg865=reg146*reg220; T reg866=reg172*reg202; T reg867=reg146*reg217; T reg868=reg177*reg180; reg270=reg273+reg270;
    T reg869=reg144*reg231; T reg870=reg200*reg205; reg363=reg363-reg362; T reg871=reg173*reg201; reg349=reg316+reg349;
    reg316=reg452*reg481; T reg872=reg154*reg347; T reg873=reg200*reg235; reg319=reg318+reg319; reg317=reg296+reg317;
    reg296=reg0*reg448; T reg874=reg201*reg165; T reg875=reg171*reg201; reg696=reg696+reg416; reg434=reg434+reg477;
    reg693=reg684-reg693; reg501=reg501-reg513; reg491=reg514+reg491; reg424=reg424+reg751; reg673=(*f.m).density*reg673;
    reg824=reg823+reg824; reg868=reg868-reg867; reg415=reg432-reg415; reg429=reg253+reg429; reg527=reg527-reg526;
    reg267=reg267+reg528; reg509=reg509-reg494; reg676=reg679+reg676; reg826=reg822+reg826; reg333=reg333-reg291;
    reg827=reg827-reg828; reg253=reg87*reg785; reg652=reg647+reg652; reg432=reg87*reg388; reg554=reg553+reg554;
    reg861=(*f.m).density*reg861; reg522=reg525+reg522; reg276=reg276+reg864; reg656=reg657-reg656; reg816=reg816-reg817;
    reg514=reg87*reg431; reg658=reg655-reg658; reg435=reg435-reg659; reg511=reg506+reg511; reg277=reg834+reg277;
    reg339=reg819+reg339; reg499=reg378+reg499; reg378=reg688+reg685; reg369=reg865+reg369; reg821=reg821-reg820;
    reg815=(*f.m).density*reg815; reg487=reg502+reg487; reg502=reg87*reg418; reg524=reg523+reg524; reg619=reg619-reg589;
    reg805=reg806+reg805; reg618=(*f.m).density*reg618; reg590=reg592+reg590; reg356=reg412+reg356; reg830=reg831+reg830;
    reg804=reg402+reg804; reg472=reg327+reg472; reg572=reg534+reg572; reg661=(*f.m).density*reg661; reg270=reg270+reg871;
    reg808=reg808-reg807; reg599=reg603+reg599; reg832=reg833+reg832; reg480=reg819+reg480; reg283=reg309+reg283;
    reg809=reg812+reg809; reg575=reg492-reg575; reg345=reg345-reg640; reg810=reg810-reg811; reg500=reg503+reg500;
    reg473=reg473+reg639; reg680=reg681+reg680; reg829=(*f.m).density*reg829; reg338=reg871+reg338; reg269=reg870+reg269;
    reg439=reg439-reg817; reg441=reg366+reg441; reg870=reg363+reg870; reg428=reg238-reg428; reg238=reg87*reg436;
    reg292=reg430+reg292; reg334=reg315+reg334; reg802=reg802-reg801; reg597=reg597-reg645; reg682=reg607+reg682;
    reg395=reg361+reg395; reg874=reg872+reg874; reg742=reg742-reg741; reg530=reg530-reg532; reg406=reg406-reg374;
    reg803=reg372+reg803; reg869=reg869-reg866; reg405=reg405+reg732; reg610=reg610+reg611; reg397=reg397+reg777;
    reg427=reg427+reg794; reg215=reg215-reg660; reg585=reg585+reg583; reg346=reg422+reg346; reg539=reg538+reg539;
    reg793=reg398+reg793; reg556=reg557-reg556; reg261=reg312+reg261; reg257=reg698+reg257; reg484=reg204+reg484;
    reg659=reg420-reg659; reg796=reg795+reg796; reg417=reg417+reg770; reg305=reg848+reg305; reg516=reg515-reg516;
    reg543=reg548+reg543; reg488=reg558-reg488; reg517=reg567-reg517; reg204=reg87*reg389; reg798=reg797+reg798;
    reg799=reg769+reg799; reg520=reg521-reg520; reg251=reg873+reg251; reg547=reg535-reg547; reg471=reg471-reg665;
    reg252=(*f.m).density*reg252; reg787=reg786+reg787; reg788=reg790-reg788; reg875=reg748+reg875; reg394=reg433+reg394;
    reg531=reg533-reg531; reg493=reg490+reg493; reg478=reg410+reg478; reg316=(*f.m).density*reg316; reg753=reg789+reg753;
    reg577=reg577+reg576; reg537=reg536+reg537; reg302=reg243+reg302; reg574=reg529+reg574; reg540=(*f.m).density*reg540;
    reg243=reg87*reg578; reg792=(*f.m).density*reg792; reg349=reg568+reg349; reg663=reg664-reg663; reg654=(*f.m).density*reg654;
    reg665=reg482-reg665; reg341=reg274+reg341; reg279=reg279-reg840; reg777=reg446+reg777; reg404=reg404+reg778;
    reg337=reg337+reg498; reg274=reg87*reg413; reg780=reg779+reg780; reg858=reg857+reg858; reg551=reg551-reg550;
    reg552=reg519+reg552; reg651=reg651+reg485; reg782=reg781+reg782; reg862=reg863+reg862; reg309=reg87*reg475;
    reg312=reg87*reg393; reg818=reg818-reg783; reg784=reg456+reg784; reg738=reg762-reg738; reg745=reg344+reg745;
    reg495=reg496+reg495; reg476=reg416+reg476; reg542=reg541+reg542; reg768=reg800+reg768; reg546=reg549+reg546;
    reg510=(*f.m).density*reg510; reg423=reg791+reg423; reg354=reg778+reg354; reg512=(*f.m).density*reg512; reg315=reg87*reg352;
    reg308=reg308+reg321; reg770=reg401+reg770; reg660=reg212-reg660; reg773=reg774-reg773; reg544=reg544-reg545;
    reg772=reg771+reg772; reg747=reg746+reg747; reg212=reg87*reg451; reg348=reg348-reg362; reg859=reg860+reg859;
    reg776=reg775+reg776; reg409=reg467-reg409; reg426=reg426+reg662; reg263=reg666+reg263; reg565=reg564+reg565;
    reg708=reg708-reg709; reg258=reg364+reg258; reg620=(*f.m).density*reg620; reg382=reg639+reg382; reg442=reg442-reg710;
    reg616=reg615+reg616; reg713=(*f.m).density*reg713; reg320=reg384+reg320; reg844=reg844-reg845; reg712=reg711+reg712;
    reg613=reg403+reg613; reg368=reg329+reg368; reg614=reg617+reg614; reg254=reg254+reg612; reg568=reg326+reg568;
    reg715=reg714+reg715; reg280=reg273+reg280; reg256=reg459-reg256; reg609=reg608+reg609; reg250=reg386+reg250;
    reg376=reg318+reg376; reg700=reg699+reg700; reg636=reg458+reg636; reg839=reg836+reg839; reg563=reg566+reg563;
    reg842=reg843+reg842; reg273=reg87*reg311; reg602=reg602-reg601; reg704=reg703+reg704; reg301=reg301-reg649;
    reg705=reg706+reg705; reg561=reg560+reg561; reg275=reg303+reg275; reg307=reg307+reg600; reg596=reg596-reg598;
    reg671=reg670+reg671; reg736=reg735+reg736; reg303=reg87*reg707; reg318=reg87*reg702; reg593=reg591+reg593;
    reg846=reg847+reg846; reg594=reg595-reg594; reg370=reg370-reg571; reg767=(*f.m).density*reg767; reg698=reg360+reg698;
    reg695=reg694+reg695; reg421=reg421+reg759; reg855=reg856+reg855; reg650=reg650-reg335; reg761=reg760+reg761;
    reg690=reg689+reg690; reg765=reg734+reg765; reg692=(*f.m).density*reg692; reg489=reg497+reg489; reg331=reg331+reg686;
    reg764=reg763+reg764; reg853=reg849+reg853; reg854=reg850+reg854; reg687=reg691+reg687; reg326=reg87*reg653;
    reg873=reg319+reg873; reg322=reg322+reg766; reg733=reg737+reg733; reg518=reg486+reg518; reg750=reg752+reg750;
    reg848=reg330+reg848; reg605=reg604+reg605; reg296=(*f.m).density*reg296; reg749=reg825+reg749; reg319=reg87*reg304;
    reg606=(*f.m).density*reg606; reg266=reg266+reg281; reg751=reg447+reg751; reg648=reg648-reg649; reg756=(*f.m).density*reg756;
    reg851=reg852+reg851; reg677=reg297+reg677; reg569=reg569-reg570; reg678=reg683+reg678; reg755=reg754+reg755;
    reg674=reg674-reg675; reg323=reg600+reg323; reg732=reg387+reg732; reg507=reg504+reg507; reg358=reg358+reg697;
    reg758=reg757+reg758; reg373=reg528+reg373; reg724=reg726+reg724; reg740=reg739+reg740; reg717=reg716+reg717;
    reg377=reg321+reg377; reg584=(*f.m).density*reg584; reg624=reg623+reg624; reg725=(*f.m).density*reg725; reg317=reg336+reg317;
    reg290=reg445+reg290; reg573=reg573-reg278; reg474=reg474-reg646; reg262=(*f.m).density*reg262; reg582=reg586+reg582;
    reg579=reg314+reg579; reg668=reg667+reg668; reg465=reg343+reg465; reg759=reg457+reg759; reg581=reg580+reg581;
    reg720=reg721+reg720; reg632=reg633+reg632; reg719=reg718+reg719; reg631=reg630+reg631; reg505=reg508-reg505;
    reg766=reg294+reg766; reg298=reg612+reg298; reg294=reg87*reg462; reg297=reg87*reg835; reg627=reg626+reg627;
    reg353=reg498+reg353; reg837=reg837-reg838; reg628=reg629-reg628; reg666=reg271+reg666; reg293=reg281+reg293;
    reg723=reg722+reg723; reg635=reg634+reg635; reg814=reg813+reg814; reg730=reg729+reg730; reg271=reg87*reg621;
    reg259=reg794+reg259; reg559=reg562+reg559; reg638=reg637+reg638; reg743=reg744+reg743; reg841=reg841-reg840;
    reg864=reg357+reg864; reg834=reg351+reg834; reg555=(*f.m).density*reg555; reg440=reg477+reg440; reg644=reg644-reg643;
    reg310=reg686+reg310; reg731=reg731-reg701; reg669=reg672+reg669; reg281=reg87*reg232; reg622=reg625+reg622;
    reg728=reg727+reg728; reg284=reg697+reg284; reg282=reg282-reg342; reg464=reg324+reg464; reg588=reg587+reg588;
    reg289=reg483-reg289; reg642=reg642-reg641; reg427=reg87*reg427; reg743=reg87*reg743; reg733=reg87*reg733;
    reg687=reg87*reg687; reg505=reg87*reg505; reg440=reg87*reg440; reg869=reg87*reg869; reg809=reg87*reg809;
    reg788=reg87*reg788; reg698=reg87*reg698; reg354=reg87*reg354; reg373=reg87*reg373; reg314=ponderation*reg281;
    reg501=reg87*reg501; reg547=reg87*reg547; reg582=reg87*reg582; reg805=reg87*reg805; reg507=reg87*reg507;
    reg215=reg87*reg215; reg720=reg87*reg720; reg464=reg87*reg464; reg610=reg87*reg610; reg597=reg87*reg597;
    reg573=reg87*reg573; reg353=reg87*reg353; reg415=reg87*reg415; reg552=reg87*reg552; reg594=reg87*reg594;
    reg282=reg87*reg282; reg258=reg87*reg258; reg289=reg87*reg289; reg784=reg87*reg784; reg434=reg87*reg434;
    reg559=reg87*reg559; reg267=reg87*reg267; reg321=ponderation*reg273; reg324=ponderation*reg309; reg705=reg87*reg705;
    reg854=reg87*reg854; reg858=reg87*reg858; reg731=reg87*reg731; reg658=reg87*reg658; reg327=ponderation*reg514;
    reg738=reg87*reg738; reg799=reg87*reg799; reg546=reg87*reg546; reg329=ponderation*reg294; reg669=reg87*reg669;
    reg330=ponderation*reg238; reg724=reg87*reg724; reg517=reg87*reg517; reg257=reg87*reg257; reg844=reg87*reg844;
    reg628=reg87*reg628; reg256=reg87*reg256; reg395=reg87*reg395; reg750=reg87*reg750; reg773=reg87*reg773;
    reg349=reg87*reg349; reg568=reg87*reg568; reg337=reg87*reg337; reg336=ponderation*reg318; reg259=reg87*reg259;
    reg423=reg87*reg423; reg404=reg87*reg404; reg426=reg87*reg426; reg343=reg87*reg654; reg859=reg87*reg859;
    reg862=reg87*reg862; reg276=reg87*reg276; reg369=reg87*reg369; reg868=reg87*reg868; reg870=reg87*reg870;
    reg830=reg87*reg830; reg832=reg87*reg832; reg270=reg87*reg270; reg834=reg87*reg834; reg782=reg87*reg782;
    reg344=ponderation*reg297; reg837=reg87*reg837; reg841=reg87*reg841; reg842=reg87*reg842; reg338=reg87*reg338;
    reg742=reg87*reg742; reg333=reg87*reg333; reg745=reg87*reg745; reg747=reg87*reg747; reg346=reg87*reg346;
    reg875=reg87*reg875; reg874=reg87*reg874; reg818=reg87*reg818; reg317=reg87*reg317; reg853=reg87*reg853;
    reg873=reg87*reg873; reg855=reg87*reg855; reg851=reg87*reg851; reg848=reg87*reg848; reg846=reg87*reg846;
    reg839=reg87*reg839; reg376=reg87*reg376; reg563=reg87*reg563; reg588=reg87*reg588; reg776=reg87*reg776;
    reg377=reg87*reg377; reg581=reg87*reg581; reg579=reg87*reg579; reg575=reg87*reg575; reg572=reg87*reg572;
    reg530=reg87*reg530; reg356=reg87*reg356; reg269=reg87*reg269; reg351=reg87*reg618; reg527=reg87*reg527;
    reg524=reg87*reg524; reg277=reg87*reg277; reg308=reg87*reg308; reg261=reg87*reg261; reg484=reg87*reg484;
    reg302=reg87*reg302; reg251=reg87*reg251; reg537=reg87*reg537; reg780=reg87*reg780; reg539=reg87*reg539;
    reg543=reg87*reg543; reg305=reg87*reg305; reg542=reg87*reg542; reg544=reg87*reg544; reg279=reg87*reg279;
    reg777=reg87*reg777; reg551=reg87*reg551; reg522=reg87*reg522; reg554=reg87*reg554; reg821=reg87*reg821;
    reg730=reg87*reg730; reg357=reg87*reg252; reg728=reg87*reg728; reg360=reg87*reg713; reg290=reg87*reg290;
    reg361=reg87*reg555; reg723=reg87*reg723; reg824=reg87*reg824; reg766=reg87*reg766; reg363=reg87*reg661;
    reg719=reg87*reg719; reg424=reg87*reg424; reg717=reg87*reg717; reg364=reg87*reg620; reg759=reg87*reg759;
    reg439=reg87*reg439; reg366=reg87*reg606; reg802=reg87*reg802; reg372=reg87*reg512; reg803=reg87*reg803;
    reg827=reg87*reg827; reg405=reg87*reg405; reg384=reg87*reg510; reg804=reg87*reg804; reg808=reg87*reg808;
    reg386=reg87*reg673; reg480=reg87*reg480; reg826=reg87*reg826; reg810=reg87*reg810; reg387=reg87*reg262;
    reg814=reg87*reg814; reg398=reg87*reg540; reg740=reg87*reg740; reg401=reg87*reg815; reg736=reg87*reg736;
    reg732=reg87*reg732; reg322=reg87*reg322; reg764=reg87*reg764; reg761=reg87*reg761; reg765=reg87*reg765;
    reg421=reg87*reg421; reg402=ponderation*reg253; reg758=reg87*reg758; reg755=reg87*reg755; reg751=reg87*reg751;
    reg749=reg87*reg749; reg250=reg87*reg250; reg715=reg87*reg715; reg864=reg87*reg864; reg403=reg87*reg296;
    reg478=reg87*reg478; reg700=reg87*reg700; reg410=reg87*reg725; reg704=reg87*reg704; reg339=reg87*reg339;
    reg275=reg87*reg275; reg412=reg87*reg792; reg420=ponderation*reg303; reg422=reg87*reg829; reg708=reg87*reg708;
    reg430=reg87*reg767; reg442=reg87*reg442; reg816=reg87*reg816; reg712=reg87*reg712; reg280=reg87*reg280;
    reg696=reg87*reg696; reg693=reg87*reg693; reg429=reg87*reg429; reg445=reg87*reg316; reg676=reg87*reg676;
    reg680=reg87*reg680; reg441=reg87*reg441; reg292=reg87*reg292; reg428=reg87*reg428; reg682=reg87*reg682;
    reg793=reg87*reg793; reg406=reg87*reg406; reg619=reg87*reg619; reg590=reg87*reg590; reg472=reg87*reg472;
    reg599=reg87*reg599; reg284=reg87*reg284; reg474=reg87*reg474; reg624=reg87*reg624; reg293=reg87*reg293;
    reg446=reg87*reg861; reg627=reg87*reg627; reg632=reg87*reg632; reg796=reg87*reg796; reg631=reg87*reg631;
    reg298=reg87*reg298; reg635=reg87*reg635; reg465=reg87*reg465; reg447=ponderation*reg271; reg473=reg87*reg473;
    reg644=reg87*reg644; reg345=reg87*reg345; reg283=reg87*reg283; reg394=reg87*reg394; reg520=reg87*reg520;
    reg471=reg87*reg471; reg531=reg87*reg531; reg577=reg87*reg577; reg456=ponderation*reg243; reg574=reg87*reg574;
    reg585=reg87*reg585; reg787=reg87*reg787; reg556=reg87*reg556; reg659=reg87*reg659; reg516=reg87*reg516;
    reg457=ponderation*reg204; reg488=reg87*reg488; reg476=reg87*reg476; reg458=reg87*reg756; reg459=ponderation*reg502;
    reg397=reg87*reg397; reg378=reg87*reg378; reg435=reg87*reg435; reg656=reg87*reg656; reg652=reg87*reg652;
    reg467=ponderation*reg432; reg477=ponderation*reg312; reg651=reg87*reg651; reg482=ponderation*reg274; reg753=reg87*reg753;
    reg665=reg87*reg665; reg409=reg87*reg409; reg663=reg87*reg663; reg483=ponderation*reg212; reg660=reg87*reg660;
    reg486=ponderation*reg315; reg331=reg87*reg331; reg490=ponderation*reg326; reg650=reg87*reg650; reg648=reg87*reg648;
    reg671=reg87*reg671; reg382=reg87*reg382; reg668=reg87*reg668; reg666=reg87*reg666; reg334=reg87*reg334;
    reg491=reg87*reg491; reg511=reg87*reg511; reg499=reg87*reg499; reg341=reg87*reg341; reg770=reg87*reg770;
    reg495=reg87*reg495; reg493=reg87*reg493; reg348=reg87*reg348; reg509=reg87*reg509; reg487=reg87*reg487;
    reg500=reg87*reg500; reg492=reg87*reg692; reg320=reg87*reg320; reg518=reg87*reg518; reg489=reg87*reg489;
    reg772=reg87*reg772; reg370=reg87*reg370; reg569=reg87*reg569; reg323=reg87*reg323; reg496=ponderation*reg319;
    reg368=reg87*reg368; reg565=reg87*reg565; reg561=reg87*reg561; reg622=reg87*reg622; reg642=reg87*reg642;
    reg417=reg87*reg417; reg638=reg87*reg638; reg310=reg87*reg310; reg636=reg87*reg636; reg602=reg87*reg602;
    reg301=reg87*reg301; reg596=reg87*reg596; reg307=reg87*reg307; reg593=reg87*reg593; reg263=reg87*reg263;
    reg616=reg87*reg616; reg613=reg87*reg613; reg254=reg87*reg254; reg614=reg87*reg614; reg690=reg87*reg690;
    reg768=reg87*reg768; reg695=reg87*reg695; reg497=reg87*reg584; reg358=reg87*reg358; reg678=reg87*reg678;
    reg674=reg87*reg674; reg677=reg87*reg677; reg609=reg87*reg609; reg798=reg87*reg798; reg605=reg87*reg605;
    reg266=reg87*reg266; reg498=ponderation*reg398; sollicitation[indices[4]+1]+=reg498; reg503=ponderation*reg458; sollicitation[indices[7]+2]+=reg503;
    reg504=ponderation*reg360; sollicitation[indices[4]+2]+=reg504; reg506=ponderation*reg351; sollicitation[indices[6]+0]+=reg506; reg508=ponderation*reg343;
    sollicitation[indices[5]+2]+=reg508; reg515=ponderation*reg366; sollicitation[indices[4]+0]+=reg515; reg519=ponderation*reg422; sollicitation[indices[5]+0]+=reg519;
    reg521=ponderation*reg445; sollicitation[indices[7]+1]+=reg521; matrix(indices[5]+0,indices[7]+2)+=ponderation*reg423; reg423=ponderation*reg492; sollicitation[indices[6]+1]+=reg423;
    reg523=ponderation*reg401; sollicitation[indices[5]+1]+=reg523; reg525=ponderation*reg446; sollicitation[indices[7]+0]+=reg525; reg528=ponderation*reg497;
    sollicitation[indices[6]+2]+=reg528; matrix(indices[6]+2,indices[7]+0)+=ponderation*reg522; matrix(indices[6]+2,indices[6]+2)+=ponderation*reg356; matrix(indices[6]+1,indices[7]+2)+=ponderation*reg563; matrix(indices[6]+1,indices[7]+1)+=ponderation*reg323;
    matrix(indices[5]+1,indices[6]+2)+=ponderation*reg573; matrix(indices[6]+1,indices[7]+0)+=ponderation*reg487; matrix(indices[6]+1,indices[6]+2)+=ponderation*reg499; matrix(indices[6]+1,indices[6]+1)+=ponderation*reg382; matrix(indices[5]+1,indices[7]+0)+=ponderation*reg505;
    matrix(indices[6]+0,indices[7]+2)+=ponderation*reg678; matrix(indices[6]+0,indices[7]+1)+=ponderation*reg614; matrix(indices[6]+0,indices[7]+0)+=ponderation*reg307; matrix(indices[6]+0,indices[6]+2)+=ponderation*reg622; matrix(indices[6]+0,indices[6]+1)+=ponderation*reg632;
    matrix(indices[5]+1,indices[7]+1)+=ponderation*reg259; matrix(indices[6]+0,indices[6]+0)+=ponderation*reg473; matrix(indices[5]+2,indices[7]+2)+=ponderation*reg428; matrix(indices[5]+2,indices[7]+1)+=ponderation*reg693; matrix(indices[5]+1,indices[7]+2)+=ponderation*reg597;
    matrix(indices[5]+2,indices[7]+0)+=ponderation*reg652; matrix(indices[5]+2,indices[6]+2)+=ponderation*reg409; matrix(indices[5]+2,indices[6]+1)+=ponderation*reg488; matrix(indices[5]+2,indices[6]+0)+=ponderation*reg574; matrix(indices[5]+2,indices[5]+2)+=ponderation*reg394;
    reg259=ponderation*reg372; sollicitation[indices[3]+2]+=reg259; reg307=ponderation*reg384; sollicitation[indices[3]+1]+=reg307; reg323=ponderation*reg386;
    sollicitation[indices[3]+0]+=reg323; reg356=ponderation*reg387; sollicitation[indices[2]+2]+=reg356; reg382=ponderation*reg364; sollicitation[indices[2]+1]+=reg382;
    reg394=ponderation*reg363; sollicitation[indices[2]+0]+=reg394; matrix(indices[5]+1,indices[5]+1)+=ponderation*reg440; reg409=ponderation*reg361; sollicitation[indices[1]+2]+=reg409;
    reg428=ponderation*reg357; sollicitation[indices[1]+1]+=reg428; reg440=ponderation*reg403; sollicitation[indices[1]+0]+=reg440; reg473=ponderation*reg410;
    sollicitation[indices[0]+2]+=reg473; reg487=ponderation*reg412; sollicitation[indices[0]+1]+=reg487; reg488=ponderation*reg430; sollicitation[indices[0]+0]+=reg488;
    matrix(indices[7]+2,indices[7]+2)+=ponderation*reg280; matrix(indices[5]+1,indices[5]+2)+=-reg336; matrix(indices[7]+1,indices[7]+2)+=ponderation*reg765; matrix(indices[7]+1,indices[7]+1)+=ponderation*reg338; matrix(indices[7]+0,indices[7]+2)+=ponderation*reg853;
    matrix(indices[5]+1,indices[6]+0)+=ponderation*reg738; matrix(indices[7]+0,indices[7]+1)+=ponderation*reg839; matrix(indices[7]+0,indices[7]+0)+=ponderation*reg270; matrix(indices[6]+2,indices[7]+2)+=ponderation*reg261; matrix(indices[6]+2,indices[7]+1)+=ponderation*reg543;
    matrix(indices[5]+1,indices[6]+1)+=ponderation*reg354; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg279; matrix(indices[1]+1,indices[3]+0)+=ponderation*reg544; matrix(indices[1]+1,indices[2]+2)+=ponderation*reg542; matrix(indices[1]+1,indices[2]+1)+=ponderation*reg305;
    matrix(indices[1]+1,indices[2]+0)+=ponderation*reg539; matrix(indices[1]+1,indices[1]+2)+=ponderation*reg537; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg251; matrix(indices[1]+0,indices[7]+2)+=ponderation*reg302; matrix(indices[1]+0,indices[7]+1)+=ponderation*reg484;
    matrix(indices[1]+0,indices[7]+0)+=ponderation*reg308; matrix(indices[1]+0,indices[6]+2)+=ponderation*reg859; matrix(indices[1]+0,indices[6]+1)+=ponderation*reg862; matrix(indices[1]+0,indices[6]+0)+=ponderation*reg276; matrix(indices[1]+0,indices[5]+2)+=ponderation*reg369;
    matrix(indices[1]+0,indices[5]+1)+=ponderation*reg868; matrix(indices[1]+0,indices[5]+0)+=ponderation*reg870; matrix(indices[1]+0,indices[4]+2)+=ponderation*reg830; matrix(indices[1]+0,indices[4]+1)+=ponderation*reg832; matrix(indices[1]+0,indices[4]+0)+=ponderation*reg834;
    matrix(indices[1]+0,indices[3]+2)+=-reg344; matrix(indices[1]+0,indices[3]+1)+=ponderation*reg837; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg841; matrix(indices[1]+0,indices[2]+2)+=ponderation*reg842; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg846;
    matrix(indices[1]+0,indices[2]+0)+=ponderation*reg848; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg851; matrix(indices[1]+0,indices[1]+1)+=ponderation*reg855; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg873; matrix(indices[0]+2,indices[7]+2)+=ponderation*reg317;
    matrix(indices[0]+2,indices[7]+1)+=ponderation*reg874; matrix(indices[0]+2,indices[7]+0)+=ponderation*reg875; matrix(indices[0]+2,indices[6]+2)+=ponderation*reg346; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg666; matrix(indices[1]+2,indices[7]+2)+=ponderation*reg334;
    matrix(indices[1]+2,indices[7]+1)+=ponderation*reg491; matrix(indices[1]+2,indices[7]+0)+=ponderation*reg511; matrix(indices[1]+2,indices[6]+2)+=ponderation*reg341; matrix(indices[1]+2,indices[6]+1)+=ponderation*reg495; matrix(indices[1]+2,indices[6]+0)+=ponderation*reg493;
    matrix(indices[1]+2,indices[5]+2)+=ponderation*reg348; matrix(indices[1]+2,indices[5]+1)+=ponderation*reg509; matrix(indices[1]+2,indices[5]+0)+=ponderation*reg500; matrix(indices[1]+2,indices[4]+2)+=ponderation*reg320; matrix(indices[1]+2,indices[4]+1)+=ponderation*reg518;
    matrix(indices[1]+2,indices[4]+0)+=ponderation*reg489; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg370; matrix(indices[1]+2,indices[3]+1)+=ponderation*reg569; matrix(indices[1]+2,indices[3]+0)+=-reg496; matrix(indices[1]+1,indices[3]+2)+=ponderation*reg551;
    matrix(indices[1]+1,indices[4]+0)+=ponderation*reg554; matrix(indices[1]+1,indices[4]+1)+=ponderation*reg277; matrix(indices[1]+1,indices[4]+2)+=ponderation*reg524; matrix(indices[1]+1,indices[5]+0)+=ponderation*reg527; matrix(indices[1]+1,indices[5]+1)+=ponderation*reg269;
    matrix(indices[1]+1,indices[5]+2)+=ponderation*reg530; matrix(indices[1]+1,indices[6]+0)+=ponderation*reg572; matrix(indices[3]+0,indices[7]+1)+=ponderation*reg575; matrix(indices[1]+1,indices[6]+2)+=ponderation*reg579; matrix(indices[1]+1,indices[7]+0)+=ponderation*reg581;
    matrix(indices[1]+1,indices[7]+1)+=ponderation*reg377; matrix(indices[1]+1,indices[7]+2)+=ponderation*reg588; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg376; matrix(indices[1]+2,indices[2]+0)+=ponderation*reg561; matrix(indices[1]+2,indices[2]+1)+=ponderation*reg565;
    matrix(indices[1]+2,indices[2]+2)+=ponderation*reg368; matrix(indices[0]+1,indices[6]+0)+=ponderation*reg814; matrix(indices[0]+1,indices[5]+2)+=ponderation*reg810; matrix(indices[0]+1,indices[5]+1)+=ponderation*reg480; matrix(indices[0]+1,indices[5]+0)+=ponderation*reg808;
    matrix(indices[0]+1,indices[4]+2)+=ponderation*reg804; matrix(indices[0]+1,indices[4]+1)+=ponderation*reg405; matrix(indices[0]+1,indices[4]+0)+=ponderation*reg803; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg802; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg439;
    matrix(indices[0]+1,indices[3]+0)+=ponderation*reg827; matrix(indices[0]+1,indices[2]+2)+=ponderation*reg826; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg424; matrix(indices[0]+0,indices[5]+2)+=ponderation*reg824; matrix(indices[0]+0,indices[5]+1)+=ponderation*reg821;
    matrix(indices[0]+0,indices[5]+0)+=ponderation*reg339; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg816; matrix(indices[0]+0,indices[7]+0)+=ponderation*reg322; matrix(indices[0]+0,indices[7]+1)+=ponderation*reg787; matrix(indices[0]+0,indices[7]+2)+=ponderation*reg753;
    matrix(indices[0]+1,indices[0]+1)+=ponderation*reg397; matrix(indices[0]+1,indices[0]+2)+=ponderation*reg793; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg796; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg417; matrix(indices[0]+1,indices[1]+2)+=ponderation*reg798;
    matrix(indices[0]+1,indices[2]+0)+=ponderation*reg768; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg770; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg772; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg776; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg777;
    matrix(indices[0]+0,indices[0]+1)+=ponderation*reg780; matrix(indices[0]+0,indices[0]+2)+=ponderation*reg782; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg818; matrix(indices[0]+0,indices[3]+2)+=-reg402; matrix(indices[0]+2,indices[6]+1)+=ponderation*reg747;
    matrix(indices[0]+2,indices[6]+0)+=ponderation*reg745; matrix(indices[0]+2,indices[5]+2)+=ponderation*reg333; matrix(indices[0]+2,indices[5]+1)+=ponderation*reg742; matrix(indices[0]+0,indices[4]+2)+=ponderation*reg740; matrix(indices[0]+0,indices[4]+1)+=ponderation*reg736;
    matrix(indices[0]+0,indices[4]+0)+=ponderation*reg732; matrix(indices[0]+0,indices[6]+2)+=ponderation*reg764; matrix(indices[0]+0,indices[6]+1)+=ponderation*reg761; matrix(indices[0]+0,indices[6]+0)+=ponderation*reg421; matrix(indices[0]+0,indices[2]+2)+=ponderation*reg758;
    matrix(indices[0]+0,indices[2]+1)+=ponderation*reg755; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg751; matrix(indices[0]+2,indices[5]+0)+=ponderation*reg749; matrix(indices[0]+2,indices[4]+2)+=ponderation*reg250; matrix(indices[0]+2,indices[4]+1)+=ponderation*reg715;
    matrix(indices[0]+1,indices[6]+1)+=ponderation*reg759; matrix(indices[0]+1,indices[6]+2)+=ponderation*reg717; matrix(indices[0]+1,indices[7]+0)+=ponderation*reg719; matrix(indices[0]+1,indices[7]+1)+=ponderation*reg766; matrix(indices[0]+1,indices[7]+2)+=ponderation*reg723;
    matrix(indices[0]+2,indices[0]+2)+=ponderation*reg290; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg728; matrix(indices[0]+2,indices[1]+1)+=ponderation*reg730; matrix(indices[1]+1,indices[6]+1)+=ponderation*reg864; matrix(indices[0]+2,indices[1]+2)+=ponderation*reg478;
    matrix(indices[0]+2,indices[2]+0)+=ponderation*reg700; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg704; matrix(indices[0]+2,indices[2]+2)+=ponderation*reg275; matrix(indices[0]+2,indices[3]+0)+=-reg420; matrix(indices[0]+2,indices[3]+1)+=ponderation*reg708;
    matrix(indices[0]+2,indices[3]+2)+=ponderation*reg442; matrix(indices[0]+2,indices[4]+0)+=ponderation*reg712; matrix(indices[4]+0,indices[6]+1)+=ponderation*reg559; matrix(indices[4]+0,indices[6]+0)+=ponderation*reg568; matrix(indices[4]+0,indices[5]+2)+=ponderation*reg507;
    matrix(indices[4]+0,indices[5]+1)+=ponderation*reg501; matrix(indices[4]+0,indices[5]+0)+=ponderation*reg337; matrix(indices[4]+0,indices[4]+2)+=ponderation*reg669; matrix(indices[4]+0,indices[4]+1)+=ponderation*reg687; matrix(indices[4]+0,indices[4]+0)+=ponderation*reg698;
    matrix(indices[3]+2,indices[7]+2)+=ponderation*reg256; matrix(indices[3]+2,indices[7]+1)+=ponderation*reg594; matrix(indices[3]+2,indices[7]+0)+=-reg321; matrix(indices[3]+2,indices[6]+2)+=ponderation*reg289; matrix(indices[3]+2,indices[6]+1)+=ponderation*reg628;
    matrix(indices[3]+2,indices[6]+0)+=-reg329; matrix(indices[3]+2,indices[5]+2)+=-reg314; matrix(indices[3]+2,indices[5]+1)+=ponderation*reg610; matrix(indices[3]+1,indices[4]+0)+=ponderation*reg516; matrix(indices[3]+1,indices[4]+1)+=ponderation*reg659;
    matrix(indices[3]+1,indices[4]+2)+=ponderation*reg556; matrix(indices[3]+1,indices[5]+0)+=ponderation*reg585; matrix(indices[3]+1,indices[5]+1)+=-reg456; matrix(indices[3]+1,indices[5]+2)+=ponderation*reg577; matrix(indices[3]+1,indices[6]+0)+=ponderation*reg531;
    matrix(indices[3]+1,indices[6]+1)+=ponderation*reg471; matrix(indices[3]+1,indices[6]+2)+=ponderation*reg520; matrix(indices[3]+1,indices[7]+0)+=ponderation*reg547; matrix(indices[3]+1,indices[7]+1)+=ponderation*reg215; matrix(indices[3]+1,indices[7]+2)+=ponderation*reg517;
    matrix(indices[3]+2,indices[3]+2)+=ponderation*reg426; matrix(indices[3]+2,indices[4]+0)+=-reg324; matrix(indices[3]+2,indices[4]+1)+=ponderation*reg658; matrix(indices[3]+2,indices[4]+2)+=ponderation*reg415; matrix(indices[3]+2,indices[5]+0)+=-reg330;
    matrix(indices[5]+0,indices[7]+1)+=ponderation*reg788; matrix(indices[5]+0,indices[7]+0)+=ponderation*reg427; matrix(indices[5]+0,indices[6]+2)+=ponderation*reg799; matrix(indices[5]+0,indices[6]+1)+=ponderation*reg773; matrix(indices[5]+0,indices[6]+0)+=ponderation*reg404;
    matrix(indices[5]+0,indices[5]+2)+=ponderation*reg784; matrix(indices[5]+0,indices[5]+1)+=-reg327; matrix(indices[5]+0,indices[5]+0)+=ponderation*reg434; matrix(indices[4]+2,indices[7]+2)+=ponderation*reg395; matrix(indices[4]+2,indices[7]+1)+=ponderation*reg805;
    matrix(indices[4]+2,indices[7]+0)+=ponderation*reg809; matrix(indices[4]+2,indices[6]+2)+=ponderation*reg464; matrix(indices[4]+2,indices[6]+1)+=ponderation*reg720; matrix(indices[4]+2,indices[6]+0)+=ponderation*reg724; matrix(indices[4]+2,indices[5]+2)+=ponderation*reg282;
    matrix(indices[4]+2,indices[5]+1)+=ponderation*reg731; matrix(indices[4]+0,indices[6]+2)+=ponderation*reg582; matrix(indices[4]+0,indices[7]+0)+=ponderation*reg267; matrix(indices[4]+0,indices[7]+1)+=ponderation*reg552; matrix(indices[4]+0,indices[7]+2)+=ponderation*reg546;
    matrix(indices[4]+1,indices[4]+1)+=ponderation*reg257; matrix(indices[4]+1,indices[4]+2)+=ponderation*reg858; matrix(indices[4]+1,indices[5]+0)+=ponderation*reg869; matrix(indices[4]+1,indices[5]+1)+=ponderation*reg353; matrix(indices[4]+1,indices[5]+2)+=ponderation*reg844;
    matrix(indices[4]+1,indices[6]+0)+=ponderation*reg854; matrix(indices[4]+1,indices[6]+1)+=ponderation*reg349; matrix(indices[4]+1,indices[6]+2)+=ponderation*reg743; matrix(indices[4]+1,indices[7]+0)+=ponderation*reg733; matrix(indices[4]+1,indices[7]+1)+=ponderation*reg373;
    matrix(indices[4]+1,indices[7]+2)+=ponderation*reg750; matrix(indices[4]+2,indices[4]+2)+=ponderation*reg258; matrix(indices[4]+2,indices[5]+0)+=ponderation*reg705; matrix(indices[2]+1,indices[7]+1)+=ponderation*reg298; matrix(indices[2]+1,indices[7]+0)+=ponderation*reg631;
    matrix(indices[2]+1,indices[6]+2)+=ponderation*reg627; matrix(indices[2]+1,indices[6]+1)+=ponderation*reg293; matrix(indices[2]+1,indices[6]+0)+=ponderation*reg624; matrix(indices[2]+1,indices[5]+2)+=ponderation*reg474; matrix(indices[2]+1,indices[5]+1)+=ponderation*reg284;
    matrix(indices[2]+1,indices[5]+0)+=ponderation*reg642; matrix(indices[2]+1,indices[4]+2)+=ponderation*reg638; matrix(indices[2]+1,indices[4]+1)+=ponderation*reg310; matrix(indices[2]+1,indices[4]+0)+=ponderation*reg636; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg602;
    matrix(indices[2]+1,indices[3]+1)+=ponderation*reg301; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg596; matrix(indices[2]+1,indices[2]+2)+=ponderation*reg593; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg263; matrix(indices[2]+0,indices[2]+1)+=ponderation*reg668;
    matrix(indices[2]+0,indices[2]+2)+=ponderation*reg671; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg648; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg650; matrix(indices[2]+0,indices[3]+2)+=-reg490; matrix(indices[2]+0,indices[4]+0)+=ponderation*reg331;
    matrix(indices[2]+0,indices[4]+1)+=ponderation*reg690; matrix(indices[2]+0,indices[4]+2)+=ponderation*reg695; matrix(indices[2]+0,indices[5]+0)+=ponderation*reg358; matrix(indices[2]+0,indices[5]+1)+=ponderation*reg674; matrix(indices[2]+0,indices[5]+2)+=ponderation*reg677;
    matrix(indices[2]+0,indices[6]+0)+=ponderation*reg266; matrix(indices[2]+0,indices[6]+1)+=ponderation*reg605; matrix(indices[2]+0,indices[6]+2)+=ponderation*reg609; matrix(indices[2]+0,indices[7]+0)+=ponderation*reg254; matrix(indices[2]+0,indices[7]+1)+=ponderation*reg613;
    matrix(indices[2]+0,indices[7]+2)+=ponderation*reg616; matrix(indices[3]+1,indices[3]+2)+=-reg457; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg476; matrix(indices[3]+0,indices[7]+2)+=-reg486; matrix(indices[3]+0,indices[7]+0)+=ponderation*reg660;
    matrix(indices[3]+0,indices[6]+2)+=-reg483; matrix(indices[3]+0,indices[6]+1)+=ponderation*reg663; matrix(indices[3]+0,indices[6]+0)+=ponderation*reg665; matrix(indices[3]+0,indices[5]+2)+=-reg482; matrix(indices[3]+0,indices[5]+1)+=ponderation*reg651;
    matrix(indices[3]+0,indices[5]+0)+=-reg477; matrix(indices[3]+0,indices[4]+2)+=-reg467; matrix(indices[3]+0,indices[4]+1)+=ponderation*reg656; matrix(indices[3]+0,indices[4]+0)+=ponderation*reg435; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg378;
    matrix(indices[3]+0,indices[3]+1)+=-reg459; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg696; matrix(indices[2]+1,indices[7]+2)+=ponderation*reg635; matrix(indices[2]+2,indices[2]+2)+=ponderation*reg465; matrix(indices[2]+2,indices[3]+0)+=-reg447;
    matrix(indices[2]+2,indices[3]+1)+=ponderation*reg644; matrix(indices[2]+2,indices[3]+2)+=ponderation*reg345; matrix(indices[2]+2,indices[4]+0)+=ponderation*reg283; matrix(indices[2]+2,indices[4]+1)+=ponderation*reg599; matrix(indices[2]+2,indices[4]+2)+=ponderation*reg472;
    matrix(indices[2]+2,indices[5]+0)+=ponderation*reg590; matrix(indices[2]+2,indices[5]+1)+=ponderation*reg619; matrix(indices[2]+2,indices[5]+2)+=ponderation*reg406; matrix(indices[2]+2,indices[6]+0)+=ponderation*reg682; matrix(indices[2]+2,indices[6]+1)+=ponderation*reg292;
    matrix(indices[2]+2,indices[6]+2)+=ponderation*reg441; matrix(indices[2]+2,indices[7]+0)+=ponderation*reg680; matrix(indices[2]+2,indices[7]+1)+=ponderation*reg676; matrix(indices[2]+2,indices[7]+2)+=ponderation*reg429;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[2]; T reg1=1-var_inter[1]; T reg2=1-var_inter[0]; T reg3=reg1*reg0; T reg4=reg2*reg0;
    T reg5=var_inter[0]*reg0; T reg6=reg1*var_inter[0]; T reg7=reg2*reg1; T reg8=elem.pos(0)[1]*reg4; T reg9=elem.pos(1)[1]*reg5;
    T reg10=var_inter[1]*var_inter[0]; T reg11=elem.pos(0)[1]*reg7; T reg12=reg6*elem.pos(1)[1]; T reg13=reg7*elem.pos(0)[2]; T reg14=reg6*elem.pos(1)[2];
    T reg15=var_inter[1]*reg0; T reg16=elem.pos(1)[1]*reg3; T reg17=elem.pos(0)[1]*reg3; T reg18=elem.pos(0)[2]*reg3; T reg19=elem.pos(1)[2]*reg3;
    T reg20=elem.pos(1)[2]*reg5; T reg21=elem.pos(0)[2]*reg4; reg16=reg16-reg17; T reg22=elem.pos(2)[1]*reg15; reg19=reg19-reg18;
    T reg23=elem.pos(2)[2]*reg15; T reg24=reg13+reg14; T reg25=elem.pos(2)[2]*reg5; T reg26=reg21+reg20; T reg27=elem.pos(2)[1]*reg5;
    T reg28=var_inter[1]*reg2; T reg29=reg12+reg11; T reg30=elem.pos(2)[1]*reg10; T reg31=reg9+reg8; T reg32=elem.pos(2)[2]*reg10;
    reg27=reg27-reg31; reg22=reg16+reg22; reg16=elem.pos(3)[1]*reg15; T reg33=elem.pos(3)[2]*reg4; reg23=reg19+reg23;
    reg19=elem.pos(3)[2]*reg15; reg25=reg25-reg26; T reg34=reg24+reg32; T reg35=elem.pos(3)[2]*reg28; T reg36=elem.pos(3)[1]*reg4;
    T reg37=elem.pos(1)[0]*reg5; T reg38=elem.pos(0)[0]*reg4; T reg39=var_inter[2]*reg2; T reg40=elem.pos(1)[0]*reg3; T reg41=var_inter[2]*reg1;
    T reg42=elem.pos(0)[0]*reg3; T reg43=elem.pos(3)[1]*reg28; T reg44=reg29+reg30; reg36=reg27+reg36; reg27=elem.pos(4)[1]*reg39;
    T reg45=var_inter[2]*var_inter[0]; T reg46=elem.pos(2)[0]*reg5; T reg47=elem.pos(4)[1]*reg7; T reg48=reg34+reg35; T reg49=elem.pos(4)[2]*reg7;
    T reg50=reg37+reg38; T reg51=reg44+reg43; reg40=reg40-reg42; T reg52=elem.pos(2)[0]*reg15; T reg53=reg6*elem.pos(1)[0];
    reg22=reg22-reg16; T reg54=elem.pos(4)[1]*reg41; T reg55=elem.pos(4)[2]*reg39; reg33=reg25+reg33; reg25=elem.pos(0)[0]*reg7;
    T reg56=elem.pos(4)[2]*reg41; reg23=reg23-reg19; reg23=reg23-reg56; T reg57=elem.pos(5)[2]*reg41; reg22=reg22-reg54;
    T reg58=elem.pos(5)[1]*reg41; reg36=reg36-reg27; T reg59=elem.pos(5)[1]*reg45; T reg60=elem.pos(5)[2]*reg45; T reg61=elem.pos(3)[0]*reg4;
    reg46=reg46-reg50; reg33=reg33-reg55; T reg62=elem.pos(3)[0]*reg15; reg52=reg40+reg52; reg40=var_inter[1]*var_inter[2];
    reg49=reg49-reg48; T reg63=elem.pos(5)[2]*reg6; T reg64=reg53+reg25; T reg65=elem.pos(5)[1]*reg6; T reg66=reg10*elem.pos(2)[0];
    reg47=reg47-reg51; T reg67=elem.pos(6)[1]*reg10; reg33=reg33-reg60; reg65=reg47+reg65; reg47=elem.pos(6)[2]*reg45;
    reg36=reg36-reg59; T reg68=elem.pos(6)[1]*reg45; T reg69=elem.pos(3)[0]*reg28; T reg70=reg64+reg66; T reg71=elem.pos(6)[2]*reg10;
    reg58=reg22+reg58; reg22=elem.pos(6)[1]*reg40; reg57=reg23+reg57; reg23=elem.pos(6)[2]*reg40; T reg72=elem.pos(4)[0]*reg41;
    reg63=reg49+reg63; reg61=reg46+reg61; reg46=elem.pos(4)[0]*reg39; reg52=reg52-reg62; reg52=reg52-reg72;
    reg49=elem.pos(5)[0]*reg41; T reg73=elem.pos(7)[2]*reg28; T reg74=reg70+reg69; T reg75=elem.pos(7)[2]*reg39; T reg76=elem.pos(4)[0]*reg7;
    T reg77=elem.pos(7)[1]*reg28; reg47=reg33+reg47; reg71=reg63+reg71; reg22=reg58+reg22; reg33=elem.pos(7)[1]*reg40;
    reg23=reg57+reg23; reg57=elem.pos(7)[2]*reg40; reg58=elem.pos(7)[1]*reg39; reg68=reg36+reg68; reg61=reg61-reg46;
    reg36=elem.pos(5)[0]*reg45; reg67=reg65+reg67; reg63=1+(*f.m).poisson_ratio; reg77=reg67+reg77; reg73=reg71+reg73;
    reg65=elem.pos(5)[0]*reg6; reg76=reg76-reg74; reg49=reg52+reg49; reg52=elem.pos(6)[0]*reg40; reg75=reg47+reg75;
    reg22=reg22-reg33; reg23=reg23-reg57; reg58=reg68+reg58; reg61=reg61-reg36; reg47=elem.pos(6)[0]*reg45;
    reg67=reg58*reg73; reg68=reg22*reg73; reg71=reg75*reg77; T reg78=reg23*reg77; reg63=reg63/(*f.m).elastic_modulus;
    reg52=reg49+reg52; reg49=elem.pos(6)[0]*reg10; reg65=reg76+reg65; reg76=elem.pos(7)[0]*reg40; T reg79=elem.pos(7)[0]*reg39;
    reg47=reg61+reg47; reg61=reg22*reg75; T reg80=reg23*reg58; reg52=reg52-reg76; reg78=reg68-reg78;
    reg68=pow(reg63,2); reg79=reg47+reg79; reg49=reg65+reg49; reg47=elem.pos(7)[0]*reg28; reg71=reg67-reg71;
    reg65=reg79*reg78; reg80=reg61-reg80; reg63=reg63*reg68; reg61=1.0/(*f.m).elastic_modulus; reg67=(*f.m).poisson_ratio/(*f.m).elastic_modulus;
    reg47=reg49+reg47; reg49=reg52*reg71; T reg81=reg79*reg73; T reg82=reg61*reg63; reg63=reg67*reg63;
    T reg83=reg23*reg47; T reg84=reg67*reg68; reg73=reg52*reg73; reg68=reg61*reg68; reg65=reg49-reg65;
    reg49=reg75*reg47; T reg85=reg47*reg80; T reg86=reg79*reg77; reg85=reg65+reg85; reg65=reg61*reg82;
    reg23=reg23*reg79; T reg87=reg61*reg68; reg75=reg52*reg75; T reg88=reg67*reg63; T reg89=reg22*reg47;
    reg82=reg67*reg82; reg83=reg73-reg83; reg49=reg81-reg49; reg77=reg52*reg77; reg68=reg67*reg68;
    reg73=reg67*reg84; reg47=reg58*reg47; reg65=reg65-reg88; reg82=reg88+reg82; reg63=reg61*reg63;
    reg84=reg61*reg84; reg87=reg87-reg73; reg68=reg73+reg68; reg78=reg78/reg85; reg47=reg86-reg47;
    reg83=reg83/reg85; reg89=reg77-reg89; reg49=reg49/reg85; reg58=reg52*reg58; reg23=reg75-reg23;
    reg79=reg22*reg79; reg71=reg71/reg85; reg68=reg67*reg68; reg22=reg41*reg49; reg52=reg15*reg71;
    reg75=reg4*reg83; reg77=reg15*reg49; reg87=reg61*reg87; reg47=reg47/reg85; reg81=reg73+reg84;
    reg63=reg88+reg63; reg86=reg45*reg78; reg88=reg4*reg78; T reg90=reg45*reg83; T reg91=reg41*reg71;
    reg79=reg58-reg79; reg58=reg67*reg82; reg89=reg89/reg85; reg80=reg80/reg85; reg61=reg61*reg65;
    reg23=reg23/reg85; T reg92=reg75+reg77; T reg93=reg28*reg23; T reg94=reg40*reg71; T reg95=reg40*reg49;
    T reg96=reg40*reg47; T reg97=reg15*reg47; T reg98=reg52+reg88; T reg99=reg28*reg80; T reg100=reg39*reg89;
    T reg101=reg41*reg47; T reg102=reg5*reg78; T reg103=reg39*reg83; T reg104=reg5*reg89; T reg105=reg6*reg80;
    T reg106=reg5*reg83; T reg107=reg6*reg23; T reg108=reg39*reg78; reg68=reg87-reg68; reg87=reg91+reg86;
    reg81=reg67*reg81; T reg109=reg22+reg90; T reg110=reg4*reg89; T reg111=reg3*reg47; reg58=reg61-reg58;
    reg67=reg67*reg63; reg79=reg79/reg85; reg61=reg71*reg3; T reg112=reg49*reg3; T reg113=reg45*reg89;
    T reg114=reg10*reg23; T reg115=reg102+reg61; T reg116=reg106-reg77; T reg117=reg106+reg112; T reg118=reg107+reg109;
    T reg119=reg10*reg80; T reg120=reg52-reg102; reg87=reg105+reg87; T reg121=reg108-reg91; T reg122=reg6*reg79;
    T reg123=reg104+reg111; T reg124=reg108+reg94; T reg125=reg103+reg95; T reg126=reg10*reg79; T reg127=reg97-reg104;
    T reg128=reg100+reg96; T reg129=reg96-reg113; T reg130=reg88-reg61; T reg131=reg90-reg95; T reg132=reg7*reg80;
    T reg133=reg94-reg86; T reg134=reg7*reg79; T reg135=reg101+reg113; T reg136=reg28*reg79; T reg137=reg97+reg110;
    reg92=reg92+reg93; T reg138=reg98+reg99; T reg139=reg100-reg101; T reg140=reg110-reg111; T reg141=reg22-reg103;
    reg81=reg68-reg81; reg67=reg58-reg67; reg58=reg7*reg23; reg68=reg112-reg75; T reg142=0.5*reg138;
    reg115=reg115-reg105; reg129=reg129+reg126; reg131=reg131-reg114; reg116=reg116+reg114; reg68=reg68+reg58;
    T reg143=reg136-reg128; reg139=reg139+reg134; reg130=reg130-reg132; reg120=reg120-reg119; T reg144=reg137+reg136;
    reg140=reg140-reg134; reg127=reg127-reg126; T reg145=0.5*reg118; T reg146=0.5*reg92; T reg147=reg107-reg117;
    T reg148=reg99-reg124; T reg149=0.5*reg87; reg133=reg119+reg133; reg135=reg122+reg135; reg125=reg125-reg93;
    reg141=reg141-reg58; reg81=reg81/reg67; reg121=reg121+reg132; reg123=reg123-reg122; T reg150=0.5*reg121;
    T reg151=reg81*reg146; T reg152=reg81*reg145; T reg153=0.5*reg127; T reg154=0.5*reg140; T reg155=0.5*reg141;
    T reg156=reg81*reg149; T reg157=0.5*reg120; reg65=reg65/reg67; T reg158=0.5*reg144; T reg159=0.5*reg68;
    T reg160=0.5*reg130; T reg161=0.5*reg123; T reg162=reg81*reg142; T reg163=0.5*reg129; T reg164=0.5*reg125;
    T reg165=0.5*reg115; T reg166=0.5*reg135; T reg167=0.5*reg131; T reg168=0.5*reg143; T reg169=0.5*reg116;
    T reg170=0.5*reg147; T reg171=0.5*reg133; T reg172=0.5*reg139; T reg173=0.5*reg148; T reg174=reg65*reg138;
    T reg175=reg81*reg169; T reg176=reg65*reg135; T reg177=reg81*reg150; reg156=2*reg156; reg82=reg82/reg67;
    reg67=reg63/reg67; reg63=reg65*reg87; T reg178=reg81*reg172; T reg179=reg81*reg160; T reg180=reg65*reg118;
    T reg181=reg81*reg155; T reg182=reg81*reg171; T reg183=reg81*reg166; T reg184=reg81*reg170; T reg185=reg81*reg164;
    T reg186=reg81*reg161; T reg187=2*reg162; T reg188=reg81*reg163; T reg189=reg81*reg165; T reg190=reg81*reg168;
    T reg191=reg81*reg167; T reg192=reg81*reg173; T reg193=reg65*reg92; T reg194=reg81*reg158; T reg195=reg81*reg157;
    T reg196=reg65*reg144; T reg197=reg81*reg159; T reg198=2*reg152; T reg199=reg81*reg154; reg151=2*reg151;
    T reg200=reg81*reg153; reg181=2*reg181; T reg201=reg135*reg196; T reg202=reg65*reg133; T reg203=reg82*reg118;
    T reg204=reg82*reg121; T reg205=reg65*reg140; T reg206=reg65*reg143; reg183=2*reg183; T reg207=reg67*reg92;
    T reg208=reg82*reg92; T reg209=reg82*reg87; reg191=2*reg191; T reg210=2*reg194; T reg211=reg151*reg145;
    T reg212=reg65*reg129; T reg213=reg174*reg87; T reg214=reg142*reg156; T reg215=reg65*reg68; T reg216=reg92*reg180;
    T reg217=reg144*reg176; reg178=2*reg178; T reg218=reg65*reg125; T reg219=reg82*reg133; T reg220=reg65*reg147;
    T reg221=reg65*reg120; reg195=2*reg195; T reg222=reg67*reg127; reg192=2*reg192; reg190=2*reg190;
    T reg223=reg67*reg123; T reg224=reg67*reg143; reg189=2*reg189; T reg225=reg187*reg149; reg188=2*reg188;
    T reg226=reg65*reg123; reg186=2*reg186; reg185=2*reg185; T reg227=reg193*reg118; reg184=2*reg184;
    T reg228=reg65*reg116; reg182=2*reg182; T reg229=reg65*reg148; T reg230=reg82*reg120; T reg231=reg82*reg138;
    T reg232=reg65*reg131; T reg233=reg67*reg129; T reg234=reg67*reg118; T reg235=reg65*reg121; T reg236=reg65*reg139;
    T reg237=reg67*reg144; T reg238=reg82*reg130; T reg239=reg82*reg115; T reg240=reg65*reg115; reg175=2*reg175;
    T reg241=reg82*reg148; T reg242=reg67*reg139; reg177=2*reg177; T reg243=reg67*reg140; T reg244=reg138*reg63;
    T reg245=reg146*reg198; reg179=2*reg179; reg200=2*reg200; T reg246=reg67*reg135; T reg247=reg65*reg141;
    reg199=2*reg199; T reg248=reg65*reg127; reg197=2*reg197; T reg249=reg65*reg130; T reg250=reg191*reg145;
    T reg251=reg229*reg87; T reg252=reg202*reg87; T reg253=reg185*reg145; T reg254=reg115*reg202; T reg255=reg170*reg191;
    T reg256=reg179*reg149; T reg257=reg215*reg118; T reg258=reg189*reg149; T reg259=reg220*reg118; T reg260=reg115*reg63;
    T reg261=reg170*reg198; T reg262=reg149*reg195; T reg263=reg228*reg118; reg227=reg225+reg227; T reg264=reg139*reg236;
    T reg265=reg147*reg193; T reg266=reg165*reg187; T reg267=reg139*reg176; T reg268=reg139*reg212; T reg269=reg139*reg206;
    T reg270=reg228*reg147; T reg271=reg165*reg195; T reg272=reg249*reg87; T reg273=reg197*reg145; T reg274=reg240*reg87;
    T reg275=reg184*reg145; T reg276=reg220*reg147; T reg277=reg165*reg189; T reg278=reg221*reg87; T reg279=reg175*reg145;
    T reg280=reg213+reg211; T reg281=reg210*reg166; T reg282=reg215*reg147; T reg283=reg165*reg179; T reg284=reg237*reg87;
    T reg285=reg187*reg166; T reg286=reg235*reg87; T reg287=reg181*reg145; T reg288=reg87*reg63; T reg289=reg145*reg198;
    T reg290=reg203*reg87; T reg291=reg156*reg145; T reg292=reg115*reg229; T reg293=reg170*reg185; T reg294=reg140*reg206;
    T reg295=reg135*reg236; T reg296=reg135*reg234; T reg297=reg67*reg125; T reg298=reg183*reg145; T reg299=reg135*reg176;
    T reg300=reg135*reg212; T reg301=reg140*reg212; T reg302=reg67*reg131; T reg303=reg135*reg206; T reg304=reg197*reg167;
    T reg305=reg249*reg133; T reg306=reg140*reg176; T reg307=reg184*reg167; T reg308=reg240*reg133; T reg309=reg198*reg159;
    T reg310=reg130*reg63; T reg311=reg167*reg175; T reg312=reg221*reg133; T reg313=reg82*reg141; T reg314=reg151*reg167;
    T reg315=reg174*reg133; T reg316=reg143*reg206; T reg317=reg82*reg125; T reg318=reg237*reg133; T reg319=reg185*reg159;
    T reg320=reg229*reg130; T reg321=reg187*reg163; T reg322=reg181*reg167; T reg323=reg235*reg133; T reg324=reg115*reg235;
    T reg325=reg170*reg181; T reg326=reg161*reg187; T reg327=reg115*reg237; T reg328=reg149*reg177; T reg329=reg247*reg118;
    T reg330=reg149*reg198; T reg331=reg209*reg118; T reg332=reg149*reg156; T reg333=reg115*reg174; T reg334=reg170*reg151;
    T reg335=reg180*reg118; T reg336=reg246*reg118; T reg337=reg166*reg198; T reg338=reg149*reg182; T reg339=reg232*reg118;
    T reg340=reg192*reg149; T reg341=reg221*reg115; T reg342=reg170*reg175; T reg343=reg218*reg118; T reg344=reg135*reg205;
    T reg345=reg135*reg226; T reg346=reg115*reg240; T reg347=reg170*reg184; T reg348=reg135*reg248; T reg349=reg135*reg231;
    T reg350=reg210*reg149; T reg351=reg225+reg201; T reg352=reg249*reg115; T reg353=reg170*reg197; T reg354=reg120*reg63;
    T reg355=reg236*reg129; T reg356=reg189*reg142; T reg357=reg220*reg92; T reg358=reg191*reg169; T reg359=reg120*reg202;
    T reg360=reg179*reg142; T reg361=reg215*reg92; T reg362=reg226*reg129; T reg363=reg169*reg185; T reg364=reg120*reg229;
    T reg365=reg138*reg229; T reg366=reg146*reg185; T reg367=reg158*reg182; T reg368=reg138*reg233; T reg369=reg138*reg202;
    T reg370=reg146*reg191; T reg371=reg158*reg156; T reg372=reg138*reg246; T reg373=reg158*reg183; reg244=reg245+reg244;
    T reg374=reg179*reg157; T reg375=reg199*reg142; T reg376=reg238*reg144; T reg377=reg192*reg142; T reg378=reg92*reg218;
    T reg379=reg142*reg182; T reg380=reg151*reg169; T reg381=reg120*reg174; T reg382=reg92*reg232; T reg383=reg216+reg214;
    T reg384=reg120*reg237; T reg385=reg187*reg153; T reg386=reg181*reg169; T reg387=reg120*reg235; T reg388=reg142*reg177;
    T reg389=reg92*reg247; T reg390=reg151*reg158; T reg391=reg237*reg92; T reg392=reg142*reg187; T reg393=reg92*reg193;
    T reg394=reg151*reg142; T reg395=reg92*reg231; T reg396=reg169*reg198; T reg397=reg187*reg157; T reg398=reg193*reg116;
    T reg399=reg249*reg138; T reg400=reg197*reg146; T reg401=reg127*reg206; T reg402=reg127*reg212; T reg403=reg157*reg177;
    T reg404=reg247*reg116; T reg405=reg127*reg176; T reg406=reg236*reg127; T reg407=reg156*reg157; T reg408=reg180*reg116;
    T reg409=reg196*reg127; T reg410=reg210*reg157; T reg411=reg231*reg127; T reg412=reg248*reg127; T reg413=reg157*reg182;
    T reg414=reg232*reg116; T reg415=reg226*reg127; T reg416=reg205*reg127; T reg417=reg192*reg157; T reg418=reg218*reg116;
    T reg419=reg215*reg116; T reg420=reg158*reg177; T reg421=reg138*reg242; T reg422=reg235*reg138; T reg423=reg181*reg146;
    T reg424=reg138*reg208; T reg425=reg189*reg157; T reg426=reg220*reg116; T reg427=reg146*reg187; T reg428=reg138*reg174;
    T reg429=reg146*reg151; T reg430=reg158*reg195; T reg431=reg138*reg222; T reg432=reg221*reg138; T reg433=reg146*reg175;
    T reg434=reg157*reg195; T reg435=reg228*reg116; T reg436=reg189*reg158; T reg437=reg223*reg138; T reg438=reg240*reg138;
    T reg439=reg184*reg146; T reg440=reg179*reg158; T reg441=reg243*reg138; T reg442=reg150*reg177; T reg443=reg141*reg193;
    T reg444=reg187*reg150; T reg445=reg228*reg141; T reg446=reg195*reg150; T reg447=reg123*reg205; T reg448=reg220*reg141;
    T reg449=reg189*reg150; T reg450=reg228*reg92; T reg451=reg142*reg195; T reg452=reg215*reg141; T reg453=reg179*reg150;
    T reg454=reg123*reg226; T reg455=reg121*reg229; T reg456=reg155*reg185; T reg457=reg121*reg202; T reg458=reg123*reg248;
    T reg459=reg155*reg191; T reg460=reg123*reg231; T reg461=reg165*reg210; T reg462=reg121*reg63; T reg463=reg155*reg198;
    T reg464=reg139*reg196; T reg465=reg165*reg177; T reg466=reg147*reg247; T reg467=reg210*reg150; T reg468=reg139*reg231;
    T reg469=reg139*reg248; T reg470=reg139*reg226; T reg471=reg165*reg156; T reg472=reg147*reg180; T reg473=reg139*reg205;
    T reg474=reg141*reg218; T reg475=reg192*reg150; T reg476=reg165*reg182; T reg477=reg141*reg232; T reg478=reg224*reg138;
    T reg479=reg192*reg158; T reg480=reg182*reg150; T reg481=reg141*reg180; T reg482=reg156*reg150; T reg483=reg192*reg165;
    T reg484=reg147*reg218; T reg485=reg141*reg247; T reg486=reg123*reg206; T reg487=reg142*reg183; T reg488=reg144*reg209;
    T reg489=reg197*reg169; T reg490=reg120*reg249; T reg491=reg144*reg236; T reg492=reg178*reg142; T reg493=reg144*reg204;
    T reg494=reg144*reg196; T reg495=reg144*reg207; T reg496=reg146*reg210; T reg497=reg144*reg248; T reg498=reg184*reg169;
    T reg499=reg120*reg240; T reg500=reg142*reg200; T reg501=reg230*reg144; T reg502=reg144*reg226; T reg503=reg186*reg142;
    T reg504=reg239*reg144; T reg505=reg144*reg205; T reg506=reg169*reg175; T reg507=reg120*reg221; T reg508=reg123*reg196;
    T reg509=reg121*reg235; T reg510=reg155*reg181; T reg511=reg172*reg187; T reg512=reg237*reg121; T reg513=reg121*reg174;
    T reg514=reg155*reg151; T reg515=reg123*reg236; T reg516=reg221*reg121; T reg517=reg155*reg175; T reg518=reg240*reg121;
    T reg519=reg123*reg176; T reg520=reg184*reg155; T reg521=reg249*reg121; T reg522=reg197*reg155; T reg523=reg144*reg206;
    T reg524=reg123*reg212; T reg525=reg142*reg190; T reg526=reg144*reg241; T reg527=reg144*reg212; T reg528=reg142*reg188;
    T reg529=reg144*reg219; reg217=reg214+reg217; reg214=reg231*reg140; T reg530=reg148*reg229; T reg531=reg131*reg247;
    T reg532=reg240*reg148; T reg533=reg184*reg164; T reg534=reg160*reg182; T reg535=reg248*reg140; T reg536=reg82*reg68;
    T reg537=reg180*reg125; T reg538=reg173*reg156; T reg539=reg232*reg68; T reg540=reg228*reg68; T reg541=reg247*reg125;
    T reg542=reg173*reg177; T reg543=reg156*reg171; T reg544=reg131*reg180; T reg545=reg67*reg116; T reg546=reg191*reg159;
    T reg547=reg231*reg143; T reg548=reg173*reg210; T reg549=reg218*reg125; T reg550=reg173*reg192; T reg551=reg195*reg171;
    T reg552=reg228*reg131; T reg553=reg221*reg148; T reg554=reg175*reg164; T reg555=reg196*reg140; T reg556=reg232*reg125;
    T reg557=reg173*reg182; T reg558=reg187*reg171; T reg559=reg131*reg193; T reg560=reg248*reg143; reg221=reg221*reg130;
    T reg561=reg220*reg68; T reg562=reg189*reg160; T reg563=reg249*reg130; T reg564=reg164*reg185; T reg565=reg171*reg177;
    T reg566=reg197*reg159; T reg567=reg160*reg210; T reg568=reg192*reg160; T reg569=reg218*reg68; T reg570=reg196*reg143;
    T reg571=reg235*reg130; T reg572=reg129*reg212; reg248=reg248*reg129; T reg573=reg205*reg140; T reg574=reg181*reg159;
    T reg575=reg173*reg195; T reg576=reg231*reg129; T reg577=reg236*reg143; reg228=reg228*reg125; T reg578=reg210*reg171;
    T reg579=reg129*reg176; T reg580=reg215*reg68; T reg581=reg174*reg130; T reg582=reg160*reg179; T reg583=reg67*reg68;
    T reg584=reg196*reg129; T reg585=reg151*reg159; T reg586=reg202*reg130; reg240=reg240*reg130; reg176=reg143*reg176;
    T reg587=reg171*reg182; T reg588=reg131*reg232; T reg589=reg173*reg179; T reg590=reg215*reg125; reg249=reg249*reg148;
    T reg591=reg192*reg171; reg232=reg147*reg232; reg218=reg131*reg218; T reg592=reg197*reg164; reg206=reg129*reg206;
    T reg593=reg237*reg130; T reg594=reg187*reg154; T reg595=reg67*reg147; T reg596=reg193*reg125; T reg597=reg173*reg187;
    T reg598=reg173*reg189; T reg599=reg220*reg125; T reg600=reg205*reg129; T reg601=reg189*reg171; T reg602=reg160*reg156;
    reg236=reg236*reg140; reg193=reg193*reg68; reg215=reg215*reg131; T reg603=reg179*reg171; T reg604=reg151*reg164;
    T reg605=reg174*reg148; T reg606=reg175*reg159; reg212=reg143*reg212; T reg607=reg226*reg140; T reg608=reg184*reg159;
    reg229=reg133*reg229; T reg609=reg167*reg185; T reg610=reg148*reg63; T reg611=reg160*reg195; T reg612=reg82*reg116;
    T reg613=reg164*reg198; T reg614=reg237*reg148; reg205=reg205*reg143; T reg615=reg133*reg202; T reg616=reg167*reg191;
    T reg617=reg187*reg168; T reg618=reg181*reg164; reg235=reg235*reg148; reg63=reg133*reg63; T reg619=reg167*reg198;
    T reg620=reg82*reg131; reg247=reg247*reg68; T reg621=reg160*reg177; reg226=reg226*reg143; T reg622=reg82*reg147;
    reg220=reg220*reg131; reg202=reg202*reg148; T reg623=reg180*reg68; T reg624=reg160*reg187; T reg625=reg67*reg141;
    T reg626=reg191*reg164; T reg627=reg168*reg177; reg502=reg356+reg502; T reg628=reg148*reg242; T reg629=reg144*reg595;
    T reg630=reg186*reg146; T reg631=reg121*reg222; reg503=reg504+reg503; reg599=reg598+reg599; reg504=reg223*reg125;
    T reg632=reg148*reg313; reg457=reg459+reg457; T reg633=reg172*reg188; reg505=reg360+reg505; T reg634=reg184*reg168;
    T reg635=reg239*reg125; reg500=reg501+reg500; reg501=reg146*reg200; T reg636=reg223*reg121; T reg637=reg622*reg121;
    T reg638=reg144*reg545; T reg639=reg173*reg184; T reg640=reg197*reg168; T reg641=reg172*reg156; T reg642=reg243*reg125;
    T reg643=reg121*reg246; T reg644=reg121*reg203; reg497=reg451+reg497; T reg645=reg144*reg231; T reg646=reg189*reg155;
    T reg647=reg210*reg142; reg516=reg517+reg516; T reg648=reg173*reg183; T reg649=reg143*reg234; reg382=reg382-reg379;
    T reg650=reg92*reg233; T reg651=reg158*reg191; T reg652=reg192*reg155; T reg653=reg92*reg241; T reg654=reg172*reg190;
    reg455=reg456+reg455; T reg655=reg178*reg168; T reg656=reg142*reg185; T reg657=reg164*reg177; T reg658=reg172*reg182;
    T reg659=reg172*reg200; reg228=reg575+reg228; T reg660=reg189*reg172; T reg661=reg144*reg583; T reg662=reg183*reg164;
    T reg663=reg173*reg175; T reg664=reg199*reg146; T reg665=reg188*reg168; reg375=reg376+reg375; reg376=reg155*reg182;
    T reg666=reg121*reg620; T reg667=reg230*reg125; T reg668=reg121*reg233; T reg669=reg121*reg612; reg202=reg626+reg202;
    T reg670=reg158*reg185; T reg671=reg224*reg92; reg378=reg378-reg377; T reg672=reg155*reg195; T reg673=reg224*reg148;
    T reg674=reg173*reg188; reg217=reg245+reg217; T reg675=reg143*reg302; T reg676=reg156*reg164; reg528=reg529+reg528;
    reg529=reg172*reg178; T reg677=reg146*reg188; reg509=reg510+reg509; T reg678=reg144*reg302; T reg679=reg203*reg148;
    T reg680=reg246*reg148; T reg681=reg317*reg148; reg527=reg379+reg527; reg379=reg512+reg511; T reg682=reg536*reg121;
    T reg683=reg192*reg164; T reg684=reg168*reg190; reg530=reg564+reg530; reg525=reg526+reg525; reg526=reg179*reg155;
    T reg685=reg146*reg190; T reg686=reg144*reg297; T reg687=reg156*reg168; T reg688=reg199*reg172; T reg689=reg121*reg208;
    T reg690=reg155*reg187; T reg691=reg172*reg210; reg523=reg377+reg523; reg521=reg522+reg521; reg377=reg514-reg513;
    T reg692=reg182*reg168; T reg693=reg186*reg172; reg518=reg520+reg518; reg590=reg589+reg590; T reg694=reg182*reg164;
    T reg695=reg620*reg148; reg495=reg496+reg495; T reg696=reg155*reg156; T reg697=reg392+reg494; T reg698=reg238*reg125;
    T reg699=reg173*reg197; reg492=reg493+reg492; reg493=reg178*reg146; T reg700=reg233*reg148; T reg701=reg172*reg183;
    T reg702=reg144*reg625; T reg703=reg192*reg168; T reg704=reg179*reg172; T reg705=reg243*reg121; reg462=reg462-reg463;
    reg610=reg610-reg613; reg491=reg388+reg491; reg176=reg538+reg176; T reg706=reg219*reg143; reg487=reg488+reg487;
    reg488=reg183*reg168; T reg707=reg146*reg183; T reg708=reg172*reg177; T reg709=reg144*reg234; T reg710=reg121*reg242;
    T reg711=reg121*reg313; T reg712=reg172*reg195; T reg713=reg155*reg177; T reg714=reg173*reg185; T reg715=reg241*reg125;
    T reg716=reg536*reg138; T reg717=reg179*reg146; T reg718=reg199*reg158; reg399=reg400-reg399; reg549=reg550+reg549;
    reg401=reg417+reg401; T reg719=reg224*reg125; T reg720=reg169*reg190; T reg721=reg127*reg297; T reg722=reg157*reg190;
    T reg723=reg241*reg127; reg402=reg413+reg402; T reg724=reg185*reg168; T reg725=reg169*reg188; T reg726=reg127*reg302;
    T reg727=reg238*reg143; T reg728=reg173*reg199; T reg729=reg157*reg188; T reg730=reg219*reg127; T reg731=reg168*reg198;
    T reg732=reg173*reg191; T reg733=reg219*reg125; T reg734=reg158*reg210; T reg735=reg429+reg428; reg430=reg431+reg430;
    T reg736=reg138*reg612; T reg737=reg146*reg195; T reg738=reg158*reg200; reg432=reg433-reg432; T reg739=reg200*reg164;
    T reg740=reg545*reg143; reg436=reg437+reg436; reg556=reg557+reg556; T reg741=reg622*reg138; T reg742=reg189*reg146;
    T reg743=reg186*reg158; reg438=reg439-reg438; T reg744=reg233*reg125; T reg745=reg191*reg168; reg440=reg441+reg440;
    T reg746=reg545*reg127; T reg747=reg200*reg157; T reg748=reg230*reg127; reg415=reg425+reg415; reg205=reg589+reg205;
    reg589=reg239*reg143; T reg749=reg173*reg186; T reg750=reg186*reg169; T reg751=reg595*reg127; T reg752=reg186*reg157;
    T reg753=reg239*reg127; reg416=reg374+reg416; T reg754=reg595*reg143; T reg755=reg199*reg169; T reg756=reg583*reg127;
    T reg757=reg199*reg157; T reg758=reg238*reg127; T reg759=reg153*reg185; T reg760=reg224*reg116; reg418=reg417+reg418;
    reg417=reg186*reg164; reg405=reg407+reg405; T reg761=reg173*reg200; T reg762=reg183*reg169; T reg763=reg127*reg234;
    T reg764=reg183*reg157; T reg765=reg209*reg127; reg406=reg403+reg406; T reg766=reg230*reg143; T reg767=reg178*reg169;
    T reg768=reg625*reg127; T reg769=reg178*reg157; T reg770=reg204*reg127; reg226=reg598+reg226; reg598=reg583*reg143;
    T reg771=reg397+reg409; T reg772=reg210*reg169; T reg773=reg207*reg127; T reg774=reg411+reg410; T reg775=reg199*reg164;
    reg412=reg434+reg412; T reg776=reg169*reg200; T reg777=reg204*reg143; reg394=reg395+reg394; T reg778=reg597+reg570;
    T reg779=reg183*reg171; T reg780=reg209*reg129; T reg781=reg210*reg164; T reg782=reg173*reg151; reg355=reg355+reg565;
    T reg783=reg231*reg125; T reg784=reg178*reg167; T reg785=reg625*reg129; T reg786=reg142*reg175; T reg787=reg230*reg92;
    T reg788=reg184*reg158; T reg789=reg223*reg92; reg356=reg357-reg356; reg357=reg184*reg142; T reg790=reg239*reg92;
    T reg791=reg197*reg158; T reg792=reg243*reg92; reg360=reg361-reg360; reg361=reg222*reg125; T reg793=reg142*reg191;
    T reg794=reg92*reg219; T reg795=reg158*reg198; T reg796=reg92*reg246; T reg797=reg373+reg383; T reg798=reg209*reg143;
    T reg799=reg142*reg198; reg577=reg542+reg577; T reg800=reg92*reg209; T reg801=reg181*reg158; T reg802=reg92*reg242;
    reg388=reg389-reg388; reg389=reg178*reg164; T reg803=reg175*reg168; T reg804=reg181*reg142; T reg805=reg92*reg204;
    reg390=reg391+reg390; T reg806=reg625*reg143; T reg807=reg173*reg178; reg393=reg393+reg392; reg560=reg575+reg560;
    reg575=reg204*reg125; reg371=reg372+reg371; T reg808=reg138*reg203; T reg809=reg146*reg156; reg373=reg244+reg373;
    reg541=reg542+reg541; reg542=reg125*reg242; T reg810=reg181*reg168; T reg811=reg173*reg198; T reg812=reg209*reg125;
    reg420=reg421+reg420; T reg813=reg138*reg313; T reg814=reg146*reg177; T reg815=reg178*reg158; reg422=reg423-reg422;
    reg538=reg538-reg537; T reg816=reg246*reg125; T reg817=reg158*reg187; T reg818=reg237*reg138; reg424=reg427+reg424;
    reg596=reg596-reg597; T reg819=reg237*reg125; T reg820=reg197*reg142; T reg821=reg238*reg92; T reg822=reg200*reg171;
    T reg823=reg230*reg129; reg362=reg362+reg601; T reg824=reg151*reg168; T reg825=reg186*reg167; T reg826=reg595*reg129;
    T reg827=reg186*reg171; T reg828=reg192*reg146; T reg829=reg158*reg190; reg365=reg366-reg365; T reg830=reg173*reg181;
    T reg831=reg207*reg143; T reg832=reg547+reg548; reg367=reg368+reg367; T reg833=reg138*reg620; T reg834=reg146*reg182;
    T reg835=reg158*reg188; reg369=reg370-reg369; T reg836=reg186*reg145; T reg837=reg135*reg595; T reg838=reg186*reg149;
    T reg839=reg239*reg135; reg344=reg256+reg344; T reg840=reg131*reg209; T reg841=reg199*reg145; T reg842=reg135*reg583;
    T reg843=reg199*reg149; T reg844=reg238*reg135; T reg845=reg166*reg185; T reg846=reg224*reg118; reg343=reg340-reg343;
    T reg847=reg543-reg544; T reg848=reg241*reg118; T reg849=reg149*reg185; T reg850=reg166*reg191; T reg851=reg233*reg118;
    reg339=reg338-reg339; T reg852=reg246*reg131; T reg853=reg163*reg198; T reg854=reg237*reg131; T reg855=reg151*reg163;
    T reg856=reg181*reg171; T reg857=reg178*reg145; T reg858=reg135*reg625; T reg859=reg178*reg149; T reg860=reg135*reg204;
    T reg861=reg131*reg204; reg211=reg211+reg351; T reg862=reg210*reg145; T reg863=reg135*reg207; T reg864=reg349+reg350;
    reg531=reg565+reg531; reg348=reg262+reg348; reg565=reg131*reg242; T reg865=reg200*reg145; T reg866=reg135*reg545;
    T reg867=reg149*reg200; T reg868=reg230*reg135; reg345=reg258+reg345; T reg869=reg181*reg163; T reg870=reg171*reg198;
    T reg871=reg163*reg185; T reg872=reg238*reg129; T reg873=reg231*reg118; T reg874=reg151*reg149; T reg875=reg166*reg175;
    T reg876=reg222*reg118; reg263=reg262-reg263; reg262=reg199*reg171; T reg877=reg583*reg129; T reg878=reg230*reg118;
    T reg879=reg149*reg175; T reg880=reg184*reg166; T reg881=reg223*reg118; reg259=reg258-reg259; reg258=reg199*reg167;
    reg600=reg603+reg600; T reg882=reg239*reg129; T reg883=reg239*reg118; T reg884=reg184*reg149; T reg885=reg197*reg166;
    T reg886=reg243*reg118; reg257=reg256-reg257; reg256=reg219*reg118; T reg887=reg149*reg191; T reg888=reg336+reg337;
    T reg889=reg191*reg171; T reg890=reg131*reg219; T reg891=reg332+reg335; reg588=reg587+reg588; T reg892=reg131*reg233;
    reg331=reg330+reg331; T reg893=reg191*reg163; T reg894=reg171*reg185; T reg895=reg181*reg166; T reg896=reg242*reg118;
    reg329=reg328-reg329; T reg897=reg131*reg241; T reg898=reg204*reg118; T reg899=reg181*reg149; T reg900=reg151*reg166;
    T reg901=reg237*reg118; T reg902=reg281+reg227; reg218=reg591+reg218; T reg903=reg224*reg131; T reg904=reg164*reg190;
    T reg905=reg167*reg182; T reg906=reg133*reg620; T reg907=reg133*reg233; T reg908=reg314-reg315; T reg909=reg163*reg182;
    T reg910=reg195*reg163; T reg911=reg133*reg222; reg229=reg609+reg229; T reg912=reg133*reg612; T reg913=reg167*reg195;
    T reg914=reg200*reg163; reg312=reg311+reg312; T reg915=reg188*reg164; T reg916=reg163*reg190; T reg917=reg189*reg163;
    T reg918=reg223*reg133; T reg919=reg622*reg133; T reg920=reg192*reg167; T reg921=reg317*reg133; T reg922=reg224*reg133;
    reg323=reg322+reg323; T reg923=reg178*reg163; T reg924=reg318+reg321; T reg925=reg167*reg177; T reg926=reg241*reg143;
    T reg927=reg133*reg313; T reg928=reg133*reg242; T reg929=reg163*reg177; T reg930=reg173*reg190; reg63=reg63-reg619;
    T reg931=reg183*reg163; reg212=reg557+reg212; reg557=reg143*reg297; T reg932=reg156*reg167; T reg933=reg203*reg133;
    T reg934=reg246*reg133; T reg935=reg156*reg163; T reg936=reg208*reg133; T reg937=reg187*reg167; T reg938=reg210*reg163;
    reg615=reg616+reg615; T reg939=reg163*reg188; reg305=reg304+reg305; reg303=reg340+reg303; reg552=reg551+reg552;
    reg340=reg131*reg222; T reg940=reg190*reg145; T reg941=reg135*reg297; T reg942=reg149*reg190; T reg943=reg135*reg241;
    reg300=reg338+reg300; reg338=reg175*reg163; T reg944=reg151*reg171; T reg945=reg188*reg145; T reg946=reg135*reg302;
    T reg947=reg149*reg188; T reg948=reg135*reg219; reg299=reg332+reg299; reg332=reg131*reg231; reg298=reg296+reg298;
    reg559=reg559-reg558; T reg949=reg183*reg149; T reg950=reg135*reg209; reg295=reg328+reg295; reg328=reg192*reg163;
    T reg951=reg197*reg171; T reg952=reg238*reg131; reg215=reg603+reg215; reg603=reg243*reg131; T reg953=reg197*reg163;
    T reg954=reg184*reg171; T reg955=reg189*reg167; T reg956=reg239*reg131; reg316=reg550+reg316; reg220=reg601+reg220;
    reg550=reg223*reg131; reg601=reg186*reg163; reg308=reg307+reg308; T reg957=reg184*reg163; T reg958=reg179*reg163;
    T reg959=reg175*reg171; T reg960=reg230*reg131; T reg961=reg243*reg133; T reg962=reg536*reg133; T reg963=reg179*reg167;
    T reg964=reg199*reg163; T reg965=reg189*reg164; T reg966=reg622*reg148; T reg967=reg239*reg139; reg473=reg453+reg473;
    T reg968=reg223*reg148; T reg969=reg199*reg155; T reg970=reg139*reg583; T reg971=reg199*reg150; T reg972=reg238*reg139;
    T reg973=reg172*reg185; T reg974=reg224*reg141; reg474=reg475+reg474; T reg975=reg189*reg168; T reg976=reg141*reg241;
    T reg977=reg185*reg150; T reg978=reg172*reg191; T reg979=reg141*reg233; reg477=reg480+reg477; reg553=reg554+reg553;
    T reg980=reg200*reg168; T reg981=reg195*reg164; reg264=reg442+reg264; T reg982=reg243*reg148; T reg983=reg155*reg178;
    T reg984=reg139*reg625; T reg985=reg178*reg150; T reg986=reg139*reg204; T reg987=reg444+reg464; T reg988=reg155*reg210;
    T reg989=reg139*reg207; T reg990=reg179*reg168; T reg991=reg468+reg467; reg469=reg446+reg469; reg532=reg533+reg532;
    T reg992=reg155*reg200; T reg993=reg139*reg545; T reg994=reg200*reg150; T reg995=reg230*reg139; reg470=reg449+reg470;
    T reg996=reg186*reg168; T reg997=reg186*reg155; T reg998=reg139*reg595; T reg999=reg186*reg150; T reg1000=reg172*reg175;
    T reg1001=reg141*reg222; reg445=reg446+reg445; reg446=reg187*reg164; T reg1002=reg208*reg148; T reg1003=reg230*reg141;
    T reg1004=reg175*reg150; T reg1005=reg184*reg172; T reg1006=reg223*reg141; reg448=reg449+reg448; reg449=reg614+reg617;
    T reg1007=reg239*reg141; T reg1008=reg184*reg150; T reg1009=reg197*reg172; T reg1010=reg243*reg141; reg452=reg453+reg452;
    reg453=reg238*reg141; T reg1011=reg197*reg150; T reg1012=reg192*reg172; reg235=reg618+reg235; T reg1013=reg224*reg121;
    T reg1014=reg317*reg121; T reg1015=reg141*reg219; T reg1016=reg191*reg150; T reg1017=reg172*reg198; T reg1018=reg141*reg246;
    T reg1019=reg482-reg481; T reg1020=reg612*reg148; T reg1021=reg141*reg209; T reg1022=reg150*reg198; T reg1023=reg222*reg148;
    T reg1024=reg195*reg168; T reg1025=reg181*reg172; T reg1026=reg141*reg242; reg485=reg442+reg485; reg442=reg141*reg204;
    T reg1027=reg181*reg150; T reg1028=reg172*reg151; T reg1029=reg237*reg141; reg443=reg443-reg444; T reg1030=reg604-reg605;
    T reg1031=reg210*reg168; T reg1032=reg141*reg231; T reg1033=reg151*reg150; T reg1034=reg210*reg167; T reg1035=reg166*reg183;
    reg288=reg288+reg289; T reg1036=reg558+reg584; T reg1037=reg204*reg129; T reg1038=reg166*reg177; T reg1039=reg242*reg87;
    T reg1040=reg177*reg145; T reg1041=reg313*reg87; T reg1042=reg178*reg166; reg286=reg286-reg287; T reg1043=reg178*reg171;
    T reg1044=reg129*reg234; T reg1045=reg284+reg285; T reg1046=reg183*reg167; T reg1047=reg187*reg145; T reg1048=reg208*reg87;
    T reg1049=reg280+reg281; reg579=reg543+reg579; reg543=reg219*reg129; T reg1050=reg188*reg171; T reg1051=reg129*reg302;
    T reg1052=reg545*reg129; T reg1053=reg167*reg200; T reg1054=reg238*reg118; T reg1055=reg197*reg149; T reg1056=reg192*reg166;
    T reg1057=reg224*reg87; T reg1058=reg192*reg145; T reg1059=reg317*reg87; T reg1060=reg166*reg190; reg251=reg251-reg253;
    reg248=reg551+reg248; reg551=reg166*reg182; T reg1061=reg233*reg87; T reg1062=reg182*reg145; T reg1063=reg620*reg87;
    T reg1064=reg166*reg188; reg252=reg252-reg250; T reg1065=reg576+reg578; T reg1066=reg166*reg156; T reg1067=reg246*reg87;
    reg291=reg290+reg291; T reg1068=reg207*reg129; reg272=reg272-reg273; T reg1069=reg167*reg190; reg206=reg591+reg206;
    reg269=reg475+reg269; reg475=reg155*reg190; reg591=reg139*reg297; T reg1070=reg190*reg150; T reg1071=reg139*reg241;
    reg268=reg480+reg268; reg249=reg592+reg249; reg480=reg155*reg188; T reg1072=reg139*reg302; T reg1073=reg188*reg150;
    T reg1074=reg139*reg219; reg267=reg482+reg267; reg482=reg199*reg168; T reg1075=reg179*reg164; T reg1076=reg536*reg148;
    T reg1077=reg155*reg183; T reg1078=reg139*reg234; T reg1079=reg183*reg150; T reg1080=reg139*reg209; T reg1081=reg167*reg188;
    T reg1082=reg166*reg195; T reg1083=reg222*reg87; T reg1084=reg195*reg145; T reg1085=reg612*reg87; T reg1086=reg166*reg200;
    reg278=reg278-reg279; T reg1087=reg189*reg166; T reg1088=reg223*reg87; reg572=reg587+reg572; reg587=reg241*reg129;
    T reg1089=reg189*reg145; T reg1090=reg622*reg87; T reg1091=reg186*reg166; reg274=reg274-reg275; T reg1092=reg171*reg190;
    T reg1093=reg129*reg297; T reg1094=reg179*reg166; T reg1095=reg243*reg87; T reg1096=reg179*reg145; T reg1097=reg536*reg87;
    T reg1098=reg199*reg166; T reg1099=reg178*reg159; T reg1100=reg593+reg594; T reg1101=reg165*reg181; T reg1102=reg120*reg233;
    T reg1103=reg223*reg115; T reg1104=reg179*reg169; T reg1105=reg153*reg182; T reg1106=reg190*reg154; T reg1107=reg239*reg68;
    T reg1108=reg625*reg140; T reg1109=reg92*reg222; T reg1110=reg161*reg189; reg364=reg363+reg364; T reg1111=reg153*reg190;
    T reg1112=reg224*reg68; T reg1113=reg161*reg151; T reg1114=reg147*reg237; T reg1115=reg199*reg153; T reg1116=reg184*reg160;
    T reg1117=reg209*reg68; T reg1118=reg158*reg175; T reg1119=reg192*reg169; T reg1120=reg317*reg120; T reg1121=reg239*reg123;
    T reg1122=reg156*reg153; T reg1123=reg179*reg153; T reg1124=reg170*reg189; T reg1125=reg186*reg165; T reg1126=reg161*reg181;
    T reg1127=reg622*reg115; T reg1128=reg147*reg242; T reg1129=reg120*reg243; reg359=reg358+reg359; T reg1130=reg153*reg188;
    reg561=reg562+reg561; T reg1131=reg140*reg297; reg236=reg621+reg236; reg466=reg465+reg466; reg320=reg320+reg319;
    T reg1132=reg222*reg68; T reg1133=reg246*reg130; T reg1134=reg169*reg182; T reg1135=reg120*reg620; T reg1136=reg120*reg536;
    T reg1137=reg156*reg154; reg451=reg450-reg451; reg450=reg147*reg204; T reg1138=reg191*reg154; reg540=reg611+reg540;
    T reg1139=reg197*reg154; T reg1140=reg161*reg175; T reg1141=reg147*reg222; T reg1142=reg243*reg116; T reg1143=reg197*reg153;
    T reg1144=reg243*reg68; T reg1145=reg170*reg195; T reg1146=reg184*reg157; T reg1147=reg210*reg159; T reg1148=reg115*reg612;
    T reg1149=reg170*reg190; T reg1150=reg239*reg116; reg270=reg271+reg270; reg297=reg123*reg297; T reg1151=reg230*reg123;
    T reg1152=reg233*reg68; T reg1153=reg207*reg140; T reg1154=reg130*reg313; reg426=reg425+reg426; reg425=reg165*reg200;
    T reg1155=reg230*reg147; T reg1156=reg160*reg178; T reg1157=reg160*reg198; T reg1158=reg204*reg140; reg265=reg265-reg266;
    T reg1159=reg224*reg120; reg490=reg489+reg490; reg341=reg342+reg341; T reg1160=reg160*reg190; T reg1161=reg192*reg153;
    T reg1162=reg178*reg154; T reg1163=reg161*reg200; reg586=reg586+reg546; T reg1164=reg147*reg231; T reg1165=reg197*reg157;
    reg454=reg277+reg454; T reg1166=reg241*reg140; T reg1167=reg165*reg151; T reg1168=reg238*reg116; reg486=reg483+reg486;
    reg419=reg374+reg419; reg374=reg185*reg154; T reg1169=reg624+reg555; T reg1170=reg223*reg130; T reg1171=reg189*reg154;
    T reg1172=reg210*reg153; T reg1173=reg165*reg185; T reg1174=reg170*reg179; T reg1175=reg208*reg130; T reg1176=reg536*reg115;
    T reg1177=reg585-reg581; T reg1178=reg187*reg169; T reg1179=reg120*reg208; T reg1180=reg161*reg191; T reg1181=reg195*reg159;
    T reg1182=reg230*reg68; T reg1183=reg612*reg130; reg571=reg571+reg574; T reg1184=reg160*reg175; T reg1185=reg384+reg385;
    T reg1186=reg189*reg153; T reg1187=reg223*reg120; reg479=reg478+reg479; T reg1188=reg183*reg154; T reg1189=reg224*reg130;
    T reg1190=reg620*reg130; T reg1191=reg123*reg583; reg387=reg386+reg387; T reg1192=reg161*reg185; T reg1193=reg160*reg185;
    T reg1194=reg169*reg195; reg240=reg608+reg240; T reg1195=reg241*reg68; T reg1196=reg210*reg154; reg612=reg120*reg612;
    reg352=reg353+reg352; T reg1197=reg188*reg154; T reg1198=reg224*reg147; T reg1199=reg161*reg199; T reg1200=reg153*reg200;
    T reg1201=reg120*reg222; T reg1202=reg246*reg68; T reg1203=reg195*reg154; T reg1204=reg153*reg195; reg484=reg483+reg484;
    reg507=reg506+reg507; reg483=reg186*reg154; T reg1205=reg222*reg130; T reg1206=reg380-reg381; T reg1207=reg238*reg123;
    T reg1208=reg165*reg199; T reg1209=reg147*reg241; reg346=reg347+reg346; T reg1210=reg160*reg183; reg447=reg283+reg447;
    reg354=reg354-reg396; T reg1211=reg183*reg153; T reg1212=reg223*reg68; T reg1213=reg233*reg130; T reg1214=reg186*reg153;
    reg499=reg498+reg499; T reg1215=reg156*reg159; T reg1216=reg471-reg472; T reg1217=reg182*reg154; T reg1218=reg156*reg169;
    T reg1219=reg161*reg186; T reg1220=reg622*reg130; T reg1221=reg120*reg203; T reg1222=reg170*reg186; T reg1223=reg123*reg595;
    T reg1224=reg190*reg159; T reg1225=reg147*reg209; T reg1226=reg165*reg198; T reg1227=reg120*reg246; T reg1228=reg189*reg159;
    T reg1229=reg178*reg153; T reg1230=reg317*reg138; T reg1231=reg182*reg159; T reg1232=reg170*reg199; T reg1233=reg243*reg115;
    T reg1234=reg161*reg179; T reg1235=reg200*reg154; reg294=reg568+reg294; T reg1236=reg169*reg177; T reg1237=reg120*reg313;
    reg221=reg221+reg606; T reg1238=reg147*reg219; T reg1239=reg165*reg191; reg622=reg622*reg120; reg189=reg189*reg169;
    T reg1240=reg602-reg623; T reg1241=reg203*reg130; T reg1242=reg120*reg242; T reg1243=reg153*reg177; T reg1244=reg154*reg198;
    T reg1245=reg184*reg154; T reg1246=reg161*reg198; T reg1247=reg147*reg246; reg569=reg568+reg569; reg404=reg403+reg404;
    reg403=reg179*reg159; reg568=reg115*reg246; T reg1248=reg123*reg209; T reg1249=reg327+reg326; T reg1250=reg123*reg219;
    T reg1251=reg317*reg115; reg179=reg179*reg154; reg207=reg123*reg207; T reg1252=reg147*reg233; T reg1253=reg165*reg183;
    T reg1254=reg192*reg159; T reg1255=reg192*reg170; T reg1256=reg116*reg242; T reg1257=reg181*reg153; reg193=reg193-reg624;
    T reg1258=reg188*reg159; reg414=reg413+reg414; reg413=reg161*reg156; T reg1259=reg170*reg210; reg306=reg602+reg306;
    reg602=reg239*reg140; T reg1260=reg197*reg160; T reg1261=reg116*reg233; T reg1262=reg231*reg68; T reg1263=reg238*reg147;
    T reg1264=reg165*reg197; T reg1265=reg181*reg157; T reg1266=reg199*reg154; T reg1267=reg160*reg188; T reg1268=reg160*reg200;
    T reg1269=reg204*reg116; reg208=reg115*reg208; T reg1270=reg460+reg461; T reg1271=reg186*reg160; T reg1272=reg192*reg161;
    reg317=reg317*reg130; reg224=reg224*reg115; T reg1273=reg230*reg140; T reg1274=reg165*reg188; reg233=reg115*reg233;
    reg407=reg407-reg408; T reg1275=reg161*reg178; T reg1276=reg170*reg177; T reg1277=reg140*reg234; T reg1278=reg183*reg159;
    T reg1279=reg219*reg116; T reg1280=reg191*reg157; T reg1281=reg170*reg183; reg620=reg115*reg620; reg186=reg186*reg159;
    T reg1282=reg123*reg234; T reg1283=reg170*reg182; reg246=reg246*reg116; T reg1284=reg153*reg198; T reg1285=reg123*reg204;
    T reg1286=reg266+reg508; reg254=reg255+reg254; T reg1287=reg161*reg188; reg595=reg595*reg140; reg536=reg536*reg130;
    reg192=reg192*reg154; T reg1288=reg161*reg190; reg292=reg293+reg292; T reg1289=reg165*reg178; reg310=reg310-reg309;
    T reg1290=reg157*reg198; T reg1291=reg140*reg302; reg519=reg471+reg519; reg247=reg621+reg247; reg471=reg199*reg159;
    reg621=reg209*reg116; reg313=reg115*reg313; T reg1292=reg151*reg154; T reg1293=reg237*reg68; reg324=reg325+reg324;
    T reg1294=reg243*reg130; reg232=reg232+reg476; reg583=reg583*reg140; reg562=reg607+reg562; reg182=reg161*reg182;
    reg230=reg230*reg116; reg607=reg123*reg241; T reg1295=reg177*reg159; T reg1296=reg123*reg545; T reg1297=reg170*reg200;
    reg276=reg277+reg276; reg435=reg434+reg435; reg241=reg241*reg116; reg301=reg534+reg301; reg185=reg157*reg185;
    reg535=reg611+reg535; reg204=reg204*reg68; reg277=reg160*reg181; reg434=reg334-reg333; reg611=reg116*reg222;
    T reg1298=reg160*reg191; T reg1299=reg238*reg140; T reg1300=reg161*reg177; reg239=reg239*reg147; T reg1301=reg175*reg153;
    reg573=reg582+reg573; T reg1302=reg165*reg175; reg209=reg209*reg140; T reg1303=reg223*reg116; reg178=reg170*reg178;
    reg181=reg181*reg154; T reg1304=reg175*reg154; T reg1305=reg184*reg153; reg625=reg123*reg625; T reg1306=reg187*reg159;
    reg190=reg165*reg190; T reg1307=reg214+reg567; reg222=reg115*reg222; T reg1308=reg184*reg161; reg175=reg175*reg157;
    reg260=reg260-reg261; reg183=reg161*reg183; reg515=reg465+reg515; reg580=reg582+reg580; reg223=reg223*reg147;
    reg195=reg161*reg195; reg243=reg243*reg147; reg238=reg238*reg68; reg545=reg545*reg140; reg465=reg219*reg140;
    reg398=reg398-reg397; reg582=reg242*reg68; T reg1309=reg160*reg151; reg539=reg534+reg539; reg219=reg219*reg68;
    reg282=reg283+reg282; reg191=reg191*reg153; reg283=reg170*reg187; reg534=reg237*reg116; T reg1310=reg151*reg153;
    reg563=reg563+reg566; T reg1311=reg115*reg203; reg188=reg170*reg188; reg302=reg123*reg302; T reg1312=reg115*reg242;
    T reg1313=reg231*reg116; reg151=reg151*reg157; reg156=reg170*reg156; reg242=reg130*reg242; reg199=reg199*reg160;
    T reg1314=reg161*reg210; reg458=reg271+reg458; reg524=reg476+reg524; reg177=reg154*reg177; reg197=reg161*reg197;
    reg200=reg200*reg159; reg184=reg184*reg165; reg1028=reg1028-reg1029; reg1289=reg1285+reg1289; reg990=reg982+reg990;
    reg178=reg625+reg178; reg271=reg85*reg379; reg1208=reg1207+reg1208; reg476=reg85*reg211; reg689=reg689-reg690;
    reg1267=reg465+reg1267; reg377=reg377-reg691; reg228=reg980+reg228; reg443=reg443-reg691; reg1000=reg1001+reg1000;
    reg294=reg319+reg294; reg859=reg860+reg859; reg305=reg305+reg964; reg1033=reg1033-reg1032; reg975=reg968+reg975;
    reg1009=reg1010+reg1009; reg451=reg451-reg738; reg696=reg696-reg644; reg1258=reg1291+reg1258; reg452=reg688+reg452;
    reg319=reg85*reg298; reg458=reg342+reg458; reg596=reg596-reg1031; reg641=reg643+reg641; reg453=reg1011+reg453;
    reg1118=reg1109-reg1118; reg250=reg300-reg250; reg1160=reg1166+reg1160; reg575=reg830+reg575; reg1012=reg1013+reg1012;
    reg299=reg289+reg299; reg1297=reg1296+reg1297; reg457=reg457+reg633; reg1014=reg652+reg1014; reg454=reg347+reg454;
    reg532=reg532+reg996; reg666=reg376+reg666; reg947=reg948+reg947; reg1175=reg1175-reg1306; reg455=reg455+reg654;
    reg824=reg824-reg819; reg945=reg946-reg945; reg301=reg546+reg301; reg658=reg668+reg658; reg425=reg1151+reg425;
    reg810=reg542+reg810; reg803=reg361+reg803; reg253=reg303-reg253; reg334=reg334-reg1286; reg445=reg659+reg445;
    reg1232=reg1191+reg1232; reg857=reg858-reg857; reg509=reg509+reg529; reg1202=reg1202-reg1244; reg1003=reg1004+reg1003;
    reg447=reg353+reg447; reg711=reg713+reg711; reg940=reg941-reg940; reg287=reg295-reg287; reg1005=reg1006+reg1005;
    reg1224=reg1131+reg1224; reg207=reg207-reg1259; reg782=reg782-reg783; reg708=reg710+reg708; reg448=reg693+reg448;
    reg541=reg655+reg541; reg1125=reg1121+reg1125; reg219=reg1298+reg219; reg949=reg950+reg949; reg295=reg85*reg1270;
    reg462=reg462+reg701; reg1007=reg1008+reg1007; reg300=reg85*reg1100; reg966=reg965+reg966; reg179=reg1294+reg179;
    reg942=reg943+reg942; reg1087=reg1088+reg1087; reg239=reg184+reg239; reg278=reg278+reg1086; reg184=reg85*reg331;
    reg695=reg694+reg695; reg197=reg243+reg197; reg1084=reg1085-reg1084; reg434=reg434-reg1314; reg1082=reg1083+reg1082;
    reg895=reg895-reg896; reg282=reg1199+reg282; reg243=reg85*reg1049; reg202=reg202+reg665; reg1263=reg1264+reg1263;
    reg1048=reg1048+reg1047; reg329=reg1042+reg329; reg1309=reg1309-reg1262; reg303=reg85*reg1045; reg208=reg208-reg283;
    reg1272=reg224+reg1272; reg1042=reg286+reg1042; reg224=reg85*reg449; reg540=reg540+reg1235; reg339=reg1064+reg339;
    reg475=reg591+reg475; reg270=reg1163+reg270; reg269=reg456+reg269; reg1148=reg1145+reg1148; reg530=reg530+reg684;
    reg256=reg887-reg256; reg1155=reg1302+reg1155; reg272=reg272+reg1098; reg181=reg582+reg181; reg1096=reg1097-reg1096;
    reg1308=reg223+reg1308; reg1094=reg1095+reg1094; reg223=reg85*reg888; reg195=reg222+reg195; reg274=reg274+reg1091;
    reg1002=reg1002-reg446; reg692=reg700+reg692; reg276=reg1219+reg276; reg1089=reg1090-reg1089; reg1304=reg1132+reg1304;
    reg891=reg1035+reg891; reg610=reg610+reg488; reg875=reg875-reg876; reg254=reg254+reg1287; reg251=reg251+reg1060;
    reg1058=reg1059-reg1058; reg1292=reg1292-reg1293; reg413=reg568+reg413; reg1056=reg1057+reg1056; reg263=reg1086+reg263;
    reg313=reg1276+reg313; reg1054=reg1055-reg1054; reg204=reg277+reg204; reg156=reg156-reg1311; reg257=reg1098+reg257;
    reg878=reg879-reg878; reg627=reg628+reg627; reg885=reg885-reg886; reg260=reg260+reg183; reg883=reg884-reg883;
    reg880=reg880-reg881; reg1300=reg1312+reg1300; reg259=reg1091+reg259; reg632=reg657+reg632; reg898=reg899-reg898;
    reg1040=reg1041-reg1040; reg1251=reg1255+reg1251; reg1038=reg1039+reg1038; reg900=reg901+reg900; reg687=reg680+reg687;
    reg222=reg85*reg1249; reg292=reg292+reg1288; reg1035=reg288+reg1035; reg193=reg193-reg1196; reg247=reg247+reg1162;
    reg277=reg85*reg291; reg286=reg85*reg902; reg182=reg233+reg182; reg1066=reg1067+reg1066; reg676=reg676-reg679;
    reg324=reg324+reg1275; reg1064=reg252+reg1064; reg874=reg874+reg873; reg620=reg1283+reg620; reg1062=reg1063-reg1062;
    reg655=reg235+reg655; reg551=reg1061+reg551; reg1230=reg828-reg1230; reg978=reg979+reg978; reg865=reg866-reg865;
    reg976=reg977+reg976; reg599=reg996+reg599; reg1238=reg1239+reg1238; reg474=reg654+reg474; reg867=reg868+reg867;
    reg1234=reg1233+reg1234; reg973=reg974+reg973; reg1247=reg1247-reg1246; reg971=reg972+reg971; reg275=reg345-reg275;
    reg969=reg970+reg969; reg1020=reg981+reg1020; reg635=reg639+reg635; reg1216=reg183+reg1216; reg473=reg522+reg473;
    reg836=reg837-reg836; reg1215=reg1215-reg1241; reg999=reg967+reg999; reg1219=reg346+reg1219; reg1192=reg1198+reg1192;
    reg442=reg1027+reg442; reg1177=reg1177-reg1196; reg1199=reg352+reg1199; reg485=reg529+reg485; reg484=reg1288+reg484;
    reg1025=reg1026+reg1025; reg863=reg863+reg862; reg667=reg663+reg667; reg1021=reg1021-reg1022; reg183=reg85*reg864;
    reg1209=reg1173+reg1209; reg1019=reg701+reg1019; reg1176=reg1174+reg1176; reg1018=reg1018-reg1017; reg1240=reg1188+reg1240;
    reg1180=reg1252+reg1180; reg1015=reg1016+reg1015; reg279=reg348-reg279; reg634=reg504+reg634; reg477=reg633+reg477;
    reg980=reg553+reg980; reg310=reg1188+reg310; reg845=reg845-reg846; reg1113=reg1113-reg1114; reg983=reg984+reg983;
    reg1137=reg1133+reg1137; reg264=reg510+reg264; reg1110=reg1103+reg1110; reg343=reg1060+reg343; reg1079=reg1080+reg1079;
    reg265=reg265-reg1314; reg1077=reg1077-reg1078; reg703=reg673+reg703; reg848=reg849-reg848; reg267=reg267-reg463;
    reg1167=reg1167-reg1164; reg1073=reg1074+reg1073; reg1163=reg341+reg1163; reg480=reg1072+reg480; reg850=reg850-reg851;
    reg681=reg683+reg681; reg1140=reg1141+reg1140; reg268=reg459+reg268; reg1030=reg1030-reg1031; reg1070=reg1071+reg1070;
    reg1225=reg1225-reg1226; reg997=reg998+reg997; reg838=reg839+reg838; reg470=reg520+reg470; reg640=reg642+reg640;
    reg994=reg995+reg994; reg273=reg344-reg273; reg1126=reg1128+reg1126; reg992=reg993+reg992; reg1117=reg1117-reg1157;
    reg469=reg517+reg469; reg841=reg842-reg841; reg590=reg482+reg590; reg1127=reg1124+reg1127; reg466=reg1275+reg466;
    reg233=reg85*reg991; reg1024=reg1023+reg1024; reg989=reg989-reg988; reg450=reg1101+reg450; reg514=reg514-reg987;
    reg843=reg844+reg843; reg985=reg986+reg985; reg698=reg699+reg698; reg1139=reg1144+reg1139; reg585=reg585-reg1169;
    reg809=reg809+reg808; reg579=reg579-reg619; reg1161=reg1159+reg1161; reg235=reg85*reg371; reg552=reg914+reg552;
    reg831=reg831-reg781; reg1120=reg1119+reg1120; reg369=reg369-reg835; reg833=reg834-reg833; reg960=reg959+reg960;
    reg1156=reg1158+reg1156; reg364=reg364+reg1111; reg252=reg85*reg367; reg288=reg85*reg832; reg957=reg550+reg957;
    reg365=reg365-reg829; reg1105=reg1102+reg1105; reg882=reg827+reg882; reg1050=reg543+reg1050; reg1107=reg1116+reg1107;
    reg825=reg826+reg825; reg220=reg601+reg220; reg341=reg85*reg430; reg342=reg85*reg1307; reg389=reg806+reg389;
    reg426=reg1214+reg426; reg735=reg735+reg734; reg855=reg855-reg854; reg1046=reg1046-reg1044; reg344=reg85*reg424;
    reg1150=reg1146+reg1150; reg345=reg818+reg817; reg559=reg559-reg938; reg807=reg777+reg807; reg1153=reg1153-reg1147;
    reg1143=reg1142+reg1143; reg422=reg422-reg815; reg813=reg814-reg813; reg944=reg944-reg332; reg374=reg1112+reg374;
    reg419=reg1115+reg419; reg346=reg85*reg420; reg604=reg604-reg778; reg1168=reg1165+reg1168; reg347=reg85*reg373;
    reg338=reg340+reg338; reg786=reg787-reg786; reg952=reg951+reg952; reg1222=reg1223+reg1222; reg354=reg354+reg1211;
    reg784=reg785+reg784; reg322=reg355+reg322; reg328=reg922+reg328; reg1210=reg209+reg1210; reg779=reg780+reg779;
    reg226=reg533+reg226; reg921=reg920+reg921; reg1243=reg1242+reg1243; reg209=reg85*reg394; reg1245=reg1212+reg1245;
    reg572=reg616+reg572; reg1237=reg1236+reg1237; reg393=reg734+reg393; reg229=reg229+reg916; reg417=reg754+reg417;
    reg340=reg85*reg390; reg1235=reg221+reg1235; reg387=reg387+reg1229; reg804=reg805-reg804; reg909=reg907+reg909;
    reg1099=reg1108+reg1099; reg1135=reg1134+reg1135; reg307=reg362+reg307; reg822=reg823+reg822; reg221=reg85*reg479;
    reg560=reg554+reg560; reg956=reg954+reg956; reg820=reg821-reg820; reg359=reg359+reg1130; reg360=reg360-reg718;
    reg953=reg603+reg953; reg236=reg574+reg236; reg791=reg792-reg791; reg569=reg569+reg1106; reg739=reg740+reg739;
    reg1122=reg1227+reg1122; reg357=reg790-reg357; reg561=reg561+reg483; reg215=reg964+reg215; reg1081=reg1051+reg1081;
    reg356=reg356-reg743; reg1218=reg1218-reg1221; reg788=reg789-reg788; reg761=reg766+reg761; reg776=reg746+reg776;
    reg262=reg872+reg262; reg1254=reg317+reg1254; reg317=reg85*reg1065; reg412=reg506+reg412; reg246=reg246-reg1284;
    reg348=reg85*reg774; reg871=reg903+reg871; reg212=reg626+reg212; reg186=reg595+reg186; reg773=reg773-reg772;
    reg218=reg916+reg218; reg407=reg1211+reg407; reg380=reg380-reg771; reg769=reg770+reg769; reg897=reg894+reg897;
    reg621=reg621-reg1290; reg767=reg768+reg767; reg1287=reg232+reg1287; reg915=reg675+reg915; reg608=reg562+reg608;
    reg406=reg386+reg406; reg1068=reg1068-reg1034; reg1257=reg1256+reg1257; reg418=reg1111+reg418; reg248=reg311+reg248;
    reg1053=reg1052+reg1053; reg241=reg185+reg241; reg759=reg760+reg759; reg573=reg566+reg573; reg316=reg564+reg316;
    reg757=reg758+reg757; reg755=reg756+reg755; reg191=reg1261+reg191; reg416=reg489+reg416; reg600=reg304+reg600;
    reg904=reg557+reg904; reg752=reg753+reg752; reg471=reg583+reg471; reg414=reg1130+reg414; reg750=reg751+reg750;
    reg258=reg877+reg258; reg415=reg498+reg415; reg1271=reg602+reg1271; reg1279=reg1280+reg1279; reg747=reg748+reg747;
    reg930=reg926+reg930; reg718=reg399-reg718; reg238=reg1260+reg238; reg716=reg717-reg716; reg200=reg545+reg200;
    reg151=reg151-reg1313; reg185=reg85*reg440; reg840=reg840-reg870; reg648=reg798+reg648; reg1301=reg611+reg1301;
    reg743=reg438-reg743; reg1043=reg1037+reg1043; reg741=reg742-reg741; reg869=reg565+reg869; reg606=reg535+reg606;
    reg435=reg1200+reg435; reg232=reg85*reg436; reg577=reg618+reg577; reg531=reg923+reg531; reg230=reg175+reg230;
    reg738=reg432-reg738; reg580=reg580+reg1266; reg736=reg737-reg736; reg861=reg856+reg861; reg1305=reg1303+reg1305;
    reg764=reg765+reg764; reg893=reg892+reg893; reg762=reg762-reg763; reg674=reg706+reg674; reg405=reg405-reg396;
    reg588=reg939+reg588; reg1189=reg192+reg1189; reg404=reg1229+reg404; reg729=reg730+reg729; reg199=reg1299+reg199;
    reg725=reg726+reg725; reg890=reg889+reg890; reg1269=reg1265+reg1269; reg402=reg358+reg402; reg176=reg176-reg613;
    reg1268=reg1273+reg1268; reg722=reg723+reg722; reg314=reg314-reg1036; reg1310=reg1310-reg534; reg720=reg721+reg720;
    reg852=reg852-reg853; reg401=reg363+reg401; reg662=reg662-reg649; reg847=reg931+reg847; reg398=reg398-reg1172;
    reg622=reg189+reg622; reg629=reg630-reg629; reg927=reg925+reg927; reg688=reg521+reg688; reg502=reg439-reg502;
    reg1231=reg1190+reg1231; reg1274=reg1250+reg1274; reg177=reg242+reg177; reg923=reg323+reg923; reg917=reg918+reg917;
    reg1214=reg499+reg1214; reg523=reg366-reg523; reg175=reg85*reg500; reg638=reg501-reg638; reg686=reg685-reg686;
    reg549=reg684+reg549; reg1217=reg1213+reg1217; reg188=reg302+reg188; reg497=reg433-reg497; reg189=reg85*reg375;
    reg586=reg586+reg1197; reg1076=reg1075+reg1076; reg704=reg705+reg704; reg728=reg727+reg728; reg661=reg664-reg661;
    reg519=reg519-reg261; reg1197=reg539+reg1197; reg483=reg240+reg483; reg1069=reg1093+reg1069; reg1266=reg563+reg1266;
    reg1186=reg1187+reg1186; reg919=reg955+reg919; reg505=reg400-reg505; reg682=reg526+reg682; reg929=reg928+reg929;
    reg816=reg816-reg731; reg192=reg85*reg503; reg724=reg719+reg724; reg1138=reg1152+reg1138; reg678=reg677-reg678;
    reg1171=reg1170+reg1171; reg1115=reg490+reg1115; reg702=reg493-reg702; reg912=reg913+reg912; reg240=reg85*reg528;
    reg908=reg908-reg938; reg190=reg607+reg190; reg491=reg423-reg491; reg745=reg744+reg745; reg1162=reg571+reg1162;
    reg486=reg293+reg486; reg242=reg85*reg487; reg707=reg707+reg709; reg556=reg665+reg556; reg910=reg911+reg910;
    reg1149=reg297+reg1149; reg293=reg85*reg217; reg206=reg609+reg206; reg1123=reg1129+reg1123; reg297=reg645+reg647;
    reg733=reg732+reg733; reg1228=reg1220+reg1228; reg302=reg85*reg525; reg304=reg85*reg924; reg524=reg255+reg524;
    reg255=reg85*reg495; reg914=reg312+reg914; reg1136=reg1104+reg1136; reg429=reg429+reg697; reg527=reg370-reg527;
    reg715=reg714+reg715; reg936=reg936-reg937; reg311=reg85*reg492; reg482=reg249+reg482; reg1295=reg1154+reg1295;
    reg1106=reg320+reg1106; reg538=reg488+reg538; reg1204=reg1201+reg1204; reg935=reg934+reg935; reg835=reg382-reg835;
    reg660=reg636+reg660; reg1253=reg1248+reg1253; reg1182=reg1184+reg1182; reg1092=reg587+reg1092; reg659=reg516+reg659;
    reg793=reg794-reg793; reg1206=reg1206-reg1172; reg958=reg961+reg958; reg205=reg592+reg205; reg796=reg796+reg795;
    reg1181=reg1183+reg1181; reg515=reg325+reg515; reg939=reg615+reg939; reg1195=reg1193+reg1195; reg669=reg672+reg669;
    reg249=reg85*reg797; reg1179=reg1179-reg1178; reg962=reg963+reg962; reg800=reg800+reg799; reg749=reg589+reg749;
    reg906=reg905+reg906; reg801=reg802-reg801; reg312=reg85*reg1185; reg812=reg812-reg811; reg712=reg631+reg712;
    reg306=reg306-reg309; reg403=reg536+reg403; reg815=reg388-reg815; reg775=reg598+reg775; reg931=reg63+reg931;
    reg656=reg653-reg656; reg601=reg308+reg601; reg1203=reg1205+reg1203; reg637=reg646+reg637; reg1200=reg507+reg1200;
    reg670=reg671-reg670; reg932=reg932-reg933; reg829=reg378-reg829; reg693=reg518+reg693; reg1281=reg1281-reg1282;
    reg612=reg1194+reg612; reg651=reg650-reg651; reg1278=reg1278-reg1277; reg573=reg85*reg573; reg962=reg85*reg962;
    reg945=reg85*reg945; reg248=reg85*reg248; reg1267=reg85*reg1267; reg208=reg85*reg208; reg219=reg85*reg219;
    reg305=reg85*reg305; reg940=reg85*reg940; reg890=reg85*reg890; reg822=reg85*reg822; reg875=reg85*reg875;
    reg306=reg85*reg306; reg1300=reg85*reg1300; reg895=reg85*reg895; reg871=reg85*reg871; reg847=reg85*reg847;
    reg1053=reg85*reg1053; reg314=reg85*reg314; reg63=ponderation*reg317; reg912=reg85*reg912; reg601=reg85*reg601;
    reg1268=reg85*reg1268; reg247=reg85*reg247; reg532=reg85*reg532; reg880=reg85*reg880; reg204=reg85*reg204;
    reg329=reg85*reg329; reg301=reg85*reg301; reg324=reg85*reg324; reg852=reg85*reg852; reg958=reg85*reg958;
    reg313=reg85*reg313; reg893=reg85*reg893; reg1076=reg85*reg1076; reg1197=reg85*reg1197; reg917=reg85*reg917;
    reg308=ponderation*reg222; reg1258=reg85*reg1258; reg1287=reg85*reg1287; reg990=reg85*reg990; reg1278=reg85*reg1278;
    reg263=reg85*reg263; reg897=reg85*reg897; reg655=reg85*reg655; reg258=reg85*reg258; reg320=ponderation*reg286;
    reg177=reg85*reg177; reg253=reg85*reg253; reg942=reg85*reg942; reg914=reg85*reg914; reg262=reg85*reg262;
    reg874=reg85*reg874; reg199=reg85*reg199; reg218=reg85*reg218; reg608=reg85*reg608; reg898=reg85*reg898;
    reg471=reg85*reg471; reg323=ponderation*reg224; reg1295=reg85*reg1295; reg600=reg85*reg600; reg900=reg85*reg900;
    reg482=reg85*reg482; reg588=reg85*reg588; reg1271=reg85*reg1271; reg919=reg85*reg919; reg186=reg85*reg186;
    reg1068=reg85*reg1068; reg878=reg85*reg878; reg250=reg85*reg250; reg1219=reg85*reg1219; reg215=reg85*reg215;
    reg1117=reg85*reg1117; reg273=reg85*reg273; reg863=reg85*reg863; reg236=reg85*reg236; reg932=reg85*reg932;
    reg953=reg85*reg953; reg841=reg85*reg841; reg1203=reg85*reg1203; reg569=reg85*reg569; reg931=reg85*reg931;
    reg956=reg85*reg956; reg1127=reg85*reg1127; reg1050=reg85*reg1050; reg1099=reg85*reg1099; reg843=reg85*reg843;
    reg325=ponderation*reg476; reg975=reg85*reg975; reg294=reg85*reg294; reg1024=reg85*reg1024; reg220=reg85*reg220;
    reg845=reg85*reg845; reg586=reg85*reg586; reg859=reg85*reg859; reg957=reg85*reg957; reg1069=reg85*reg1069;
    reg1156=reg85*reg1156; reg909=reg85*reg909; reg572=reg85*reg572; reg980=reg85*reg980; reg865=reg85*reg865;
    reg1195=reg85*reg1195; reg906=reg85*reg906; reg1235=reg85*reg1235; reg1176=reg85*reg1176; reg867=reg85*reg867;
    reg229=reg85*reg229; reg1234=reg85*reg1234; reg1210=reg85*reg1210; reg279=reg85*reg279; reg939=reg85*reg939;
    reg275=reg85*reg275; reg921=reg85*reg921; reg1181=reg85*reg1181; reg328=reg85*reg328; reg836=reg85*reg836;
    reg1222=reg85*reg1222; reg352=ponderation*reg183; reg1092=reg85*reg1092; reg952=reg85*reg952; reg1081=reg85*reg1081;
    reg1020=reg85*reg1020; reg1240=reg85*reg1240; reg838=reg85*reg838; reg1199=reg85*reg1199; reg935=reg85*reg935;
    reg1217=reg85*reg1217; reg855=reg85*reg855; reg1148=reg85*reg1148; reg206=reg85*reg206; reg374=reg85*reg374;
    reg353=ponderation*reg342; reg936=reg85*reg936; reg355=ponderation*reg223; reg1160=reg85*reg1160; reg861=reg85*reg861;
    reg606=reg85*reg606; reg358=ponderation*reg319; reg1202=reg85*reg1202; reg531=reg85*reg531; reg1043=reg85*reg1043;
    reg891=reg85*reg891; reg908=reg85*reg908; reg195=reg85*reg195; reg1106=reg85*reg1106; reg1002=reg85*reg1002;
    reg869=reg85*reg869; reg361=ponderation*reg184; reg200=reg85*reg200; reg299=reg85*reg299; reg840=reg85*reg840;
    reg1162=reg85*reg1162; reg434=reg85*reg434; reg910=reg85*reg910; reg947=reg85*reg947; reg929=reg85*reg929;
    reg343=reg85*reg343; reg960=reg85*reg960; reg1110=reg85*reg1110; reg579=reg85*reg579; reg927=reg85*reg927;
    reg848=reg85*reg848; reg552=reg85*reg552; reg585=reg85*reg585; reg857=reg85*reg857; reg1231=reg85*reg1231;
    reg923=reg85*reg923; reg181=reg85*reg181; reg850=reg85*reg850; reg338=reg85*reg338; reg1224=reg85*reg1224;
    reg1163=reg85*reg1163; reg1138=reg85*reg1138; reg287=reg85*reg287; reg944=reg85*reg944; reg1153=reg85*reg1153;
    reg1030=reg85*reg1030; reg339=reg85*reg339; reg362=ponderation*reg304; reg949=reg85*reg949; reg559=reg85*reg559;
    reg1046=reg85*reg1046; reg256=reg85*reg256; reg966=reg85*reg966; reg793=reg85*reg793; reg1182=reg85*reg1182;
    reg1204=reg85*reg1204; reg835=reg85*reg835; reg651=reg85*reg651; reg775=reg85*reg775; reg656=reg85*reg656;
    reg612=reg85*reg612; reg829=reg85*reg829; reg670=reg85*reg670; reg728=reg85*reg728; reg1200=reg85*reg1200;
    reg363=ponderation*reg189; reg661=reg85*reg661; reg1186=reg85*reg1186; reg505=reg85*reg505; reg724=reg85*reg724;
    reg366=ponderation*reg192; reg622=reg85*reg622; reg629=reg85*reg629; reg483=reg85*reg483; reg502=reg85*reg502;
    reg1214=reg85*reg1214; reg370=ponderation*reg175; reg549=reg85*reg549; reg638=reg85*reg638; reg1123=reg85*reg1123;
    reg788=reg85*reg788; reg761=reg85*reg761; reg786=reg85*reg786; reg354=reg85*reg354; reg784=reg85*reg784;
    reg322=reg85*reg322; reg226=reg85*reg226; reg1243=reg85*reg1243; reg779=reg85*reg779; reg1118=reg85*reg1118;
    reg376=ponderation*reg209; reg1237=reg85*reg1237; reg393=reg85*reg393; reg417=reg85*reg417; reg378=ponderation*reg340;
    reg1245=reg85*reg1245; reg387=reg85*reg387; reg804=reg85*reg804; reg815=reg85*reg815; reg749=reg85*reg749;
    reg382=ponderation*reg312; reg801=reg85*reg801; reg800=reg85*reg800; reg1179=reg85*reg1179; reg386=ponderation*reg249;
    reg205=reg85*reg205; reg1206=reg85*reg1206; reg796=reg85*reg796; reg523=reg85*reg523; reg1274=reg85*reg1274;
    reg688=reg85*reg688; reg816=reg85*reg816; reg682=reg85*reg682; reg519=reg85*reg519; reg704=reg85*reg704;
    reg1266=reg85*reg1266; reg1281=reg85*reg1281; reg693=reg85*reg693; reg538=reg85*reg538; reg637=reg85*reg637;
    reg1253=reg85*reg1253; reg660=reg85*reg660; reg659=reg85*reg659; reg515=reg85*reg515; reg669=reg85*reg669;
    reg812=reg85*reg812; reg712=reg85*reg712; reg178=reg85*reg178; reg377=reg85*reg377; reg403=reg85*reg403;
    reg1289=reg85*reg1289; reg689=reg85*reg689; reg810=reg85*reg810; reg388=ponderation*reg271; reg334=reg85*reg334;
    reg509=reg85*reg509; reg497=reg85*reg497; reg399=reg85*reg297; reg1136=reg85*reg1136; reg400=ponderation*reg255;
    reg715=reg85*reg715; reg429=reg85*reg429; reg1228=reg85*reg1228; reg1115=reg85*reg1115; reg423=ponderation*reg311;
    reg702=reg85*reg702; reg745=reg85*reg745; reg491=reg85*reg491; reg486=reg85*reg486; reg432=ponderation*reg242;
    reg1149=reg85*reg1149; reg707=reg85*reg707; reg433=ponderation*reg293; reg556=reg85*reg556; reg190=reg85*reg190;
    reg438=ponderation*reg240; reg678=reg85*reg678; reg1171=reg85*reg1171; reg524=reg85*reg524; reg527=reg85*reg527;
    reg733=reg85*reg733; reg439=ponderation*reg302; reg188=reg85*reg188; reg686=reg85*reg686; reg767=reg85*reg767;
    reg406=reg85*reg406; reg1257=reg85*reg1257; reg764=reg85*reg764; reg762=reg85*reg762; reg674=reg85*reg674;
    reg404=reg85*reg404; reg405=reg85*reg405; reg729=reg85*reg729; reg1189=reg85*reg1189; reg1269=reg85*reg1269;
    reg725=reg85*reg725; reg176=reg85*reg176; reg402=reg85*reg402; reg722=reg85*reg722; reg1310=reg85*reg1310;
    reg720=reg85*reg720; reg401=reg85*reg401; reg662=reg85*reg662; reg398=reg85*reg398; reg718=reg85*reg718;
    reg151=reg85*reg151; reg716=reg85*reg716; reg456=ponderation*reg185; reg648=reg85*reg648; reg1301=reg85*reg1301;
    reg743=reg85*reg743; reg418=reg85*reg418; reg316=reg85*reg316; reg241=reg85*reg241; reg759=reg85*reg759;
    reg757=reg85*reg757; reg191=reg85*reg191; reg755=reg85*reg755; reg416=reg85*reg416; reg904=reg85*reg904;
    reg752=reg85*reg752; reg414=reg85*reg414; reg750=reg85*reg750; reg415=reg85*reg415; reg930=reg85*reg930;
    reg1279=reg85*reg1279; reg747=reg85*reg747; reg776=reg85*reg776; reg1254=reg85*reg1254; reg246=reg85*reg246;
    reg412=reg85*reg412; reg459=ponderation*reg348; reg212=reg85*reg212; reg407=reg85*reg407; reg773=reg85*reg773;
    reg380=reg85*reg380; reg621=reg85*reg621; reg769=reg85*reg769; reg915=reg85*reg915; reg1161=reg85*reg1161;
    reg465=ponderation*reg235; reg831=reg85*reg831; reg1120=reg85*reg1120; reg369=reg85*reg369; reg833=reg85*reg833;
    reg364=reg85*reg364; reg488=ponderation*reg252; reg489=ponderation*reg288; reg1105=reg85*reg1105; reg365=reg85*reg365;
    reg882=reg85*reg882; reg1107=reg85*reg1107; reg825=reg85*reg825; reg1135=reg85*reg1135; reg307=reg85*reg307;
    reg560=reg85*reg560; reg490=ponderation*reg221; reg359=reg85*reg359; reg820=reg85*reg820; reg360=reg85*reg360;
    reg739=reg85*reg739; reg1122=reg85*reg1122; reg791=reg85*reg791; reg357=reg85*reg357; reg561=reg85*reg561;
    reg1218=reg85*reg1218; reg356=reg85*reg356; reg238=reg85*reg238; reg741=reg85*reg741; reg435=reg85*reg435;
    reg493=ponderation*reg232; reg577=reg85*reg577; reg230=reg85*reg230; reg738=reg85*reg738; reg736=reg85*reg736;
    reg1305=reg85*reg1305; reg498=ponderation*reg341; reg389=reg85*reg389; reg426=reg85*reg426; reg735=reg85*reg735;
    reg580=reg85*reg580; reg1150=reg85*reg1150; reg499=ponderation*reg344; reg345=reg85*reg345; reg807=reg85*reg807;
    reg1143=reg85*reg1143; reg422=reg85*reg422; reg813=reg85*reg813; reg419=reg85*reg419; reg501=ponderation*reg346;
    reg604=reg85*reg604; reg1168=reg85*reg1168; reg504=ponderation*reg347; reg1139=reg85*reg1139; reg809=reg85*reg809;
    reg1040=reg85*reg1040; reg1251=reg85*reg1251; reg969=reg85*reg969; reg1216=reg85*reg1216; reg473=reg85*reg473;
    reg999=reg85*reg999; reg1225=reg85*reg1225; reg997=reg85*reg997; reg1042=reg85*reg1042; reg640=reg85*reg640;
    reg470=reg85*reg470; reg1272=reg85*reg1272; reg1215=reg85*reg1215; reg1126=reg85*reg1126; reg1309=reg85*reg1309;
    reg994=reg85*reg994; reg506=ponderation*reg303; reg992=reg85*reg992; reg1048=reg85*reg1048; reg590=reg85*reg590;
    reg469=reg85*reg469; reg1263=reg85*reg1263; reg466=reg85*reg466; reg1019=reg85*reg1019; reg676=reg85*reg676;
    reg1180=reg85*reg1180; reg1018=reg85*reg1018; reg507=ponderation*reg277; reg634=reg85*reg634; reg1015=reg85*reg1015;
    reg1230=reg85*reg1230; reg477=reg85*reg477; reg978=reg85*reg978; reg1035=reg85*reg1035; reg599=reg85*reg599;
    reg1238=reg85*reg1238; reg976=reg85*reg976; reg292=reg85*reg292; reg474=reg85*reg474; reg310=reg85*reg310;
    reg1038=reg85*reg1038; reg687=reg85*reg687; reg1247=reg85*reg1247; reg973=reg85*reg973; reg971=reg85*reg971;
    reg635=reg85*reg635; reg695=reg85*reg695; reg681=reg85*reg681; reg480=reg85*reg480; reg1140=reg85*reg1140;
    reg268=reg85*reg268; reg1070=reg85*reg1070; reg270=reg85*reg270; reg475=reg85*reg475; reg530=reg85*reg530;
    reg269=reg85*reg269; reg1087=reg85*reg1087; reg540=reg85*reg540; reg239=reg85*reg239; reg1155=reg85*reg1155;
    reg272=reg85*reg272; reg1096=reg85*reg1096; reg1308=reg85*reg1308; reg1094=reg85*reg1094; reg1304=reg85*reg1304;
    reg1089=reg85*reg1089; reg692=reg85*reg692; reg276=reg85*reg276; reg274=reg85*reg274; reg510=ponderation*reg233;
    reg450=reg85*reg450; reg989=reg85*reg989; reg514=reg85*reg514; reg516=ponderation*reg243; reg698=reg85*reg698;
    reg202=reg85*reg202; reg985=reg85*reg985; reg1113=reg85*reg1113; reg282=reg85*reg282; reg983=reg85*reg983;
    reg264=reg85*reg264; reg1137=reg85*reg1137; reg1082=reg85*reg1082; reg265=reg85*reg265; reg1079=reg85*reg1079;
    reg703=reg85*reg703; reg1077=reg85*reg1077; reg1084=reg85*reg1084; reg1167=reg85*reg1167; reg267=reg85*reg267;
    reg197=reg85*reg197; reg1073=reg85*reg1073; reg278=reg85*reg278; reg455=reg85*reg455; reg454=reg85*reg454;
    reg156=reg85*reg156; reg1014=reg85*reg1014; reg627=reg85*reg627; reg1175=reg85*reg1175; reg1054=reg85*reg1054;
    reg1012=reg85*reg1012; reg596=reg85*reg596; reg453=reg85*reg453; reg1292=reg85*reg1292; reg451=reg85*reg451;
    reg452=reg85*reg452; reg1056=reg85*reg1056; reg1009=reg85*reg1009; reg1058=reg85*reg1058; reg1125=reg85*reg1125;
    reg1007=reg85*reg1007; reg413=reg85*reg413; reg782=reg85*reg782; reg448=reg85*reg448; reg251=reg85*reg251;
    reg517=ponderation*reg300; reg259=reg85*reg259; reg207=reg85*reg207; reg632=reg85*reg632; reg711=reg85*reg711;
    reg541=reg85*reg541; reg708=reg85*reg708; reg518=ponderation*reg295; reg462=reg85*reg462; reg179=reg85*reg179;
    reg883=reg85*reg883; reg696=reg85*reg696; reg260=reg85*reg260; reg458=reg85*reg458; reg641=reg85*reg641;
    reg575=reg85*reg575; reg885=reg85*reg885; reg1297=reg85*reg1297; reg457=reg85*reg457; reg666=reg85*reg666;
    reg425=reg85*reg425; reg658=reg85*reg658; reg257=reg85*reg257; reg824=reg85*reg824; reg1064=reg85*reg1064;
    reg1177=reg85*reg1177; reg442=reg85*reg442; reg1028=reg85*reg1028; reg1192=reg85*reg1192; reg228=reg85*reg228;
    reg484=reg85*reg484; reg443=reg85*reg443; reg485=reg85*reg485; reg620=reg85*reg620; reg1033=reg85*reg1033;
    reg1208=reg85*reg1208; reg1025=reg85*reg1025; reg1062=reg85*reg1062; reg1000=reg85*reg1000; reg254=reg85*reg254;
    reg447=reg85*reg447; reg1005=reg85*reg1005; reg182=reg85*reg182; reg551=reg85*reg551; reg1003=reg85*reg1003;
    reg1021=reg85*reg1021; reg610=reg85*reg610; reg1209=reg85*reg1209; reg667=reg85*reg667; reg445=reg85*reg445;
    reg1232=reg85*reg1232; reg193=reg85*reg193; reg803=reg85*reg803; reg1066=reg85*reg1066; matrix(indices[0]+2,indices[0]+0)+=ponderation*reg199;
    matrix(indices[7]+0,indices[4]+1)+=ponderation*reg632; matrix(indices[0]+1,indices[7]+2)+=ponderation*reg374; matrix(indices[6]+2,indices[4]+0)+=ponderation*reg1043; matrix(indices[6]+2,indices[3]+1)+=ponderation*reg1068; matrix(indices[0]+1,indices[4]+0)+=ponderation*reg204;
    matrix(indices[7]+0,indices[5]+1)+=ponderation*reg676; matrix(indices[7]+2,indices[4]+1)+=ponderation*reg389; matrix(indices[7]+0,indices[6]+1)+=ponderation*reg695; matrix(indices[0]+0,indices[7]+0)+=ponderation*reg1106; matrix(indices[7]+2,indices[6]+0)+=ponderation*reg674;
    matrix(indices[7]+0,indices[3]+1)+=ponderation*reg1002; matrix(indices[7]+2,indices[6]+1)+=ponderation*reg915; matrix(indices[7]+2,indices[7]+2)+=ponderation*reg316; matrix(indices[7]+2,indices[5]+1)+=ponderation*reg662; matrix(indices[6]+2,indices[3]+2)+=ponderation*reg314;
    matrix(indices[7]+2,indices[6]+2)+=ponderation*reg212; matrix(indices[0]+0,indices[7]+2)+=ponderation*reg1189; matrix(indices[7]+0,indices[5]+0)+=ponderation*reg610; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg1309; matrix(indices[7]+0,indices[4]+2)+=ponderation*reg627;
    matrix(indices[0]+1,indices[4]+1)+=ponderation*reg247; matrix(indices[7]+2,indices[7]+0)+=ponderation*reg930; matrix(indices[7]+2,indices[5]+0)+=ponderation*reg648; matrix(indices[7]+0,indices[5]+2)+=ponderation*reg687; matrix(indices[7]+0,indices[4]+0)+=ponderation*reg655;
    matrix(indices[7]+0,indices[6]+0)+=ponderation*reg202; matrix(indices[6]+2,indices[3]+0)+=-reg63; matrix(indices[7]+2,indices[5]+2)+=ponderation*reg176; matrix(indices[7]+0,indices[3]+2)+=-reg323; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg193;
    matrix(indices[0]+1,indices[2]+2)+=ponderation*reg1304; matrix(indices[0]+1,indices[0]+0)+=ponderation*reg238; matrix(indices[0]+0,indices[7]+1)+=ponderation*reg1254; matrix(indices[7]+2,indices[7]+1)+=ponderation*reg904; matrix(indices[7]+2,indices[4]+2)+=ponderation*reg577;
    matrix(indices[0]+1,indices[3]+2)+=ponderation*reg1292; matrix(indices[6]+2,indices[2]+2)+=ponderation*reg248; matrix(indices[7]+1,indices[6]+1)+=ponderation*reg556; matrix(indices[7]+0,indices[1]+1)+=ponderation*reg966; matrix(indices[0]+0,indices[3]+2)+=-reg517;
    matrix(indices[7]+1,indices[6]+2)+=ponderation*reg745; matrix(indices[7]+1,indices[2]+2)+=ponderation*reg803; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg1228; matrix(indices[6]+2,indices[7]+2)+=ponderation*reg206; matrix(indices[7]+1,indices[2]+1)+=ponderation*reg228;
    matrix(indices[7]+1,indices[7]+0)+=ponderation*reg715; matrix(indices[7]+0,indices[1]+2)+=ponderation*reg975; matrix(indices[7]+1,indices[7]+1)+=ponderation*reg549; matrix(indices[0]+1,indices[6]+2)+=ponderation*reg1138; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg483;
    matrix(indices[7]+1,indices[2]+0)+=ponderation*reg667; matrix(indices[6]+2,indices[7]+1)+=ponderation*reg1069; matrix(indices[0]+1,indices[5]+1)+=ponderation*reg1240; matrix(indices[7]+1,indices[7]+2)+=ponderation*reg724; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg1177;
    matrix(indices[7]+1,indices[1]+2)+=ponderation*reg634; matrix(indices[7]+2,indices[0]+0)+=ponderation*reg728; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg1182; matrix(indices[7]+0,indices[0]+2)+=ponderation*reg990; matrix(indices[7]+1,indices[4]+1)+=ponderation*reg541;
    matrix(indices[0]+0,indices[0]+1)+=ponderation*reg403; matrix(indices[7]+1,indices[4]+2)+=ponderation*reg810; matrix(indices[0]+1,indices[6]+0)+=ponderation*reg219; matrix(indices[7]+1,indices[4]+0)+=ponderation*reg575; matrix(indices[7]+1,indices[5]+0)+=ponderation*reg812;
    matrix(indices[7]+0,indices[0]+1)+=ponderation*reg1076; matrix(indices[0]+0,indices[0]+2)+=ponderation*reg179; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg1266; matrix(indices[7]+1,indices[3]+2)+=ponderation*reg824; matrix(indices[7]+1,indices[5]+1)+=ponderation*reg538;
    matrix(indices[7]+0,indices[1]+0)+=ponderation*reg532; matrix(indices[0]+1,indices[5]+2)+=ponderation*reg1202; matrix(indices[7]+1,indices[5]+2)+=ponderation*reg816; matrix(indices[7]+1,indices[3]+1)+=ponderation*reg596; matrix(indices[7]+0,indices[0]+0)+=ponderation*reg482;
    matrix(indices[0]+0,indices[3]+1)+=ponderation*reg1175; matrix(indices[7]+1,indices[6]+0)+=ponderation*reg733; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg1171; matrix(indices[7]+1,indices[3]+0)+=ponderation*reg782; matrix(indices[0]+1,indices[6]+1)+=ponderation*reg1197;
    matrix(indices[7]+2,indices[2]+1)+=ponderation*reg739; matrix(indices[7]+0,indices[2]+2)+=ponderation*reg1024; matrix(indices[6]+2,indices[6]+0)+=ponderation*reg1050; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg1107; matrix(indices[7]+0,indices[7]+2)+=ponderation*reg703;
    matrix(indices[7]+2,indices[2]+2)+=ponderation*reg560; matrix(indices[0]+1,indices[7]+1)+=ponderation*reg569; matrix(indices[0]+1,indices[4]+2)+=ponderation*reg181; matrix(indices[0]+0,indices[5]+2)+=ponderation*reg1137; matrix(indices[7]+2,indices[3]+0)+=-reg489;
    matrix(indices[0]+1,indices[0]+2)+=ponderation*reg1139; matrix(indices[6]+2,indices[5]+2)+=ponderation*reg579; matrix(indices[7]+0,indices[7]+1)+=ponderation*reg681; matrix(indices[7]+2,indices[3]+1)+=ponderation*reg831; matrix(indices[7]+0,indices[7]+0)+=ponderation*reg530;
    matrix(indices[7]+0,indices[3]+0)+=ponderation*reg1030; matrix(indices[7]+2,indices[3]+2)+=ponderation*reg604; matrix(indices[6]+2,indices[5]+1)+=ponderation*reg1046; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg540; matrix(indices[7]+2,indices[4]+0)+=ponderation*reg807;
    matrix(indices[0]+1,indices[0]+1)+=ponderation*reg580; matrix(indices[7]+0,indices[6]+2)+=ponderation*reg692; matrix(indices[6]+2,indices[7]+0)+=ponderation*reg1092; matrix(indices[7]+2,indices[0]+1)+=ponderation*reg775; matrix(indices[7]+1,indices[1]+1)+=ponderation*reg599;
    matrix(indices[7]+0,indices[2]+0)+=ponderation*reg980; matrix(indices[7]+2,indices[0]+2)+=ponderation*reg205; matrix(indices[0]+0,indices[5]+0)+=ponderation*reg310; matrix(indices[7]+1,indices[1]+0)+=ponderation*reg635; matrix(indices[0]+1,indices[5]+0)+=ponderation*reg1117;
    matrix(indices[6]+2,indices[6]+2)+=ponderation*reg572; matrix(indices[7]+2,indices[1]+0)+=ponderation*reg749; matrix(indices[0]+1,indices[1]+2)+=ponderation*reg1245; matrix(indices[7]+1,indices[0]+2)+=ponderation*reg640; matrix(indices[7]+2,indices[1]+1)+=ponderation*reg417;
    matrix(indices[0]+1,indices[7]+0)+=ponderation*reg1195; matrix(indices[7]+0,indices[2]+1)+=ponderation*reg1020; matrix(indices[7]+2,indices[1]+2)+=ponderation*reg226; matrix(indices[0]+0,indices[5]+1)+=ponderation*reg1215; matrix(indices[6]+2,indices[6]+1)+=ponderation*reg1081;
    matrix(indices[0]+1,indices[1]+1)+=ponderation*reg561; matrix(indices[7]+1,indices[0]+1)+=ponderation*reg590; matrix(indices[7]+2,indices[2]+0)+=ponderation*reg761; matrix(indices[7]+1,indices[0]+0)+=ponderation*reg698; matrix(indices[1]+2,indices[7]+1)+=ponderation*reg1149;
    matrix(indices[3]+2,indices[5]+1)+=ponderation*reg707; matrix(indices[3]+2,indices[5]+2)+=-reg433; matrix(indices[1]+2,indices[7]+0)+=ponderation*reg190; matrix(indices[3]+2,indices[6]+0)+=-reg438; matrix(indices[3]+2,indices[6]+1)+=ponderation*reg678;
    matrix(indices[1]+2,indices[6]+2)+=ponderation*reg524; matrix(indices[3]+2,indices[6]+2)+=ponderation*reg527; matrix(indices[1]+2,indices[6]+1)+=ponderation*reg188; matrix(indices[3]+2,indices[7]+0)+=-reg439; matrix(indices[3]+2,indices[7]+1)+=ponderation*reg686;
    matrix(indices[3]+2,indices[7]+2)+=ponderation*reg523; matrix(indices[1]+2,indices[6]+0)+=ponderation*reg1274; matrix(indices[4]+0,indices[0]+0)+=ponderation*reg688; matrix(indices[1]+2,indices[5]+2)+=ponderation*reg519; matrix(indices[4]+0,indices[0]+1)+=ponderation*reg682;
    matrix(indices[4]+0,indices[0]+2)+=ponderation*reg704; matrix(indices[1]+2,indices[5]+1)+=ponderation*reg1281; matrix(indices[4]+0,indices[1]+0)+=ponderation*reg693; matrix(indices[4]+0,indices[1]+1)+=ponderation*reg637; matrix(indices[1]+2,indices[5]+0)+=ponderation*reg1253;
    matrix(indices[4]+0,indices[1]+2)+=ponderation*reg660; matrix(indices[1]+2,indices[4]+2)+=ponderation*reg515; matrix(indices[4]+0,indices[2]+0)+=ponderation*reg659; matrix(indices[4]+0,indices[2]+1)+=ponderation*reg669; matrix(indices[1]+2,indices[4]+1)+=ponderation*reg178;
    matrix(indices[4]+0,indices[2]+2)+=ponderation*reg712; matrix(indices[4]+0,indices[3]+0)+=ponderation*reg377; matrix(indices[2]+0,indices[2]+1)+=ponderation*reg612; matrix(indices[3]+1,indices[7]+0)+=ponderation*reg656; matrix(indices[3]+1,indices[7]+1)+=ponderation*reg829;
    matrix(indices[2]+0,indices[2]+0)+=ponderation*reg1200; matrix(indices[3]+1,indices[7]+2)+=ponderation*reg670; matrix(indices[3]+2,indices[0]+0)+=-reg363; matrix(indices[2]+0,indices[1]+2)+=ponderation*reg1186; matrix(indices[3]+2,indices[0]+1)+=ponderation*reg661;
    matrix(indices[3]+2,indices[0]+2)+=ponderation*reg505; matrix(indices[2]+0,indices[1]+1)+=ponderation*reg622; matrix(indices[3]+2,indices[1]+0)+=-reg366; matrix(indices[3]+2,indices[1]+1)+=ponderation*reg629; matrix(indices[3]+2,indices[1]+2)+=ponderation*reg502;
    matrix(indices[2]+0,indices[1]+0)+=ponderation*reg1214; matrix(indices[3]+2,indices[2]+0)+=-reg370; matrix(indices[3]+2,indices[2]+1)+=ponderation*reg638; matrix(indices[2]+0,indices[0]+2)+=ponderation*reg1123; matrix(indices[3]+2,indices[2]+2)+=ponderation*reg497;
    matrix(indices[3]+2,indices[3]+0)+=ponderation*reg399; matrix(indices[2]+0,indices[0]+1)+=ponderation*reg1136; matrix(indices[3]+2,indices[3]+1)+=-reg400; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg429; matrix(indices[2]+0,indices[0]+0)+=ponderation*reg1115;
    matrix(indices[3]+2,indices[4]+0)+=-reg423; matrix(indices[3]+2,indices[4]+1)+=ponderation*reg702; matrix(indices[1]+2,indices[7]+2)+=ponderation*reg486; matrix(indices[3]+2,indices[4]+2)+=ponderation*reg491; matrix(indices[3]+2,indices[5]+0)+=-reg432;
    matrix(indices[4]+1,indices[1]+0)+=ponderation*reg1007; matrix(indices[4]+1,indices[1]+1)+=ponderation*reg448; matrix(indices[1]+2,indices[0]+2)+=ponderation*reg447; matrix(indices[4]+1,indices[1]+2)+=ponderation*reg1005; matrix(indices[4]+1,indices[2]+0)+=ponderation*reg1003;
    matrix(indices[1]+2,indices[0]+1)+=ponderation*reg1232; matrix(indices[4]+1,indices[2]+1)+=ponderation*reg445; matrix(indices[4]+1,indices[2]+2)+=ponderation*reg1000; matrix(indices[1]+2,indices[0]+0)+=ponderation*reg1208; matrix(indices[4]+1,indices[3]+0)+=ponderation*reg1033;
    matrix(indices[4]+1,indices[3]+1)+=ponderation*reg443; matrix(indices[1]+1,indices[7]+2)+=ponderation*reg1192; matrix(indices[4]+1,indices[3]+2)+=ponderation*reg1028; matrix(indices[4]+1,indices[4]+0)+=ponderation*reg442; matrix(indices[1]+1,indices[7]+1)+=ponderation*reg484;
    matrix(indices[4]+1,indices[4]+1)+=ponderation*reg485; matrix(indices[4]+1,indices[4]+2)+=ponderation*reg1025; matrix(indices[1]+1,indices[7]+0)+=ponderation*reg1209; matrix(indices[4]+1,indices[5]+0)+=ponderation*reg1021; matrix(indices[4]+1,indices[5]+1)+=ponderation*reg1019;
    matrix(indices[1]+1,indices[6]+2)+=ponderation*reg1180; matrix(indices[4]+1,indices[5]+2)+=ponderation*reg1018; matrix(indices[4]+1,indices[6]+0)+=ponderation*reg1015; matrix(indices[3]+0,indices[7]+1)+=ponderation*reg1230; matrix(indices[4]+1,indices[6]+1)+=ponderation*reg477;
    matrix(indices[4]+1,indices[6]+2)+=ponderation*reg978; matrix(indices[1]+1,indices[6]+0)+=ponderation*reg1238; matrix(indices[4]+1,indices[7]+0)+=ponderation*reg976; matrix(indices[1]+2,indices[4]+0)+=ponderation*reg1289; matrix(indices[4]+0,indices[3]+1)+=ponderation*reg689;
    matrix(indices[4]+0,indices[3]+2)+=-reg388; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg334; matrix(indices[4]+0,indices[4]+0)+=ponderation*reg509; matrix(indices[1]+2,indices[3]+1)+=ponderation*reg207; matrix(indices[4]+0,indices[4]+1)+=ponderation*reg711;
    matrix(indices[4]+0,indices[4]+2)+=ponderation*reg708; matrix(indices[1]+2,indices[3]+0)+=-reg518; matrix(indices[4]+0,indices[5]+0)+=ponderation*reg462; matrix(indices[1]+2,indices[2]+2)+=ponderation*reg458; matrix(indices[4]+0,indices[5]+1)+=ponderation*reg696;
    matrix(indices[4]+0,indices[5]+2)+=ponderation*reg641; matrix(indices[1]+2,indices[2]+1)+=ponderation*reg1297; matrix(indices[4]+0,indices[6]+0)+=ponderation*reg457; matrix(indices[4]+0,indices[6]+1)+=ponderation*reg666; matrix(indices[1]+2,indices[2]+0)+=ponderation*reg425;
    matrix(indices[4]+0,indices[6]+2)+=ponderation*reg658; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg454; matrix(indices[4]+0,indices[7]+0)+=ponderation*reg455; matrix(indices[4]+0,indices[7]+1)+=ponderation*reg1014; matrix(indices[1]+2,indices[1]+1)+=ponderation*reg1222;
    matrix(indices[4]+0,indices[7]+2)+=ponderation*reg1012; matrix(indices[4]+1,indices[0]+0)+=ponderation*reg453; matrix(indices[3]+1,indices[2]+1)+=ponderation*reg451; matrix(indices[4]+1,indices[0]+1)+=ponderation*reg452; matrix(indices[4]+1,indices[0]+2)+=ponderation*reg1009;
    matrix(indices[1]+2,indices[1]+0)+=ponderation*reg1125; matrix(indices[2]+2,indices[5]+2)+=ponderation*reg405; matrix(indices[2]+2,indices[6]+0)+=ponderation*reg729; matrix(indices[2]+1,indices[4]+0)+=ponderation*reg1269; matrix(indices[2]+2,indices[6]+1)+=ponderation*reg725;
    matrix(indices[2]+2,indices[6]+2)+=ponderation*reg402; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg1310; matrix(indices[2]+2,indices[7]+0)+=ponderation*reg722; matrix(indices[2]+2,indices[7]+1)+=ponderation*reg720; matrix(indices[2]+2,indices[7]+2)+=ponderation*reg401;
    matrix(indices[2]+1,indices[3]+1)+=ponderation*reg398; matrix(indices[3]+0,indices[0]+0)+=ponderation*reg718; matrix(indices[2]+1,indices[3]+0)+=ponderation*reg151; matrix(indices[3]+0,indices[0]+1)+=ponderation*reg716; matrix(indices[3]+0,indices[0]+2)+=-reg456;
    matrix(indices[2]+1,indices[2]+2)+=ponderation*reg1301; matrix(indices[3]+0,indices[1]+0)+=ponderation*reg743; matrix(indices[2]+1,indices[2]+1)+=ponderation*reg435; matrix(indices[3]+0,indices[1]+1)+=ponderation*reg741; matrix(indices[3]+0,indices[1]+2)+=-reg493;
    matrix(indices[2]+1,indices[2]+0)+=ponderation*reg230; matrix(indices[3]+0,indices[2]+0)+=ponderation*reg738; matrix(indices[2]+1,indices[1]+2)+=ponderation*reg1305; matrix(indices[3]+0,indices[2]+1)+=ponderation*reg736; matrix(indices[3]+0,indices[2]+2)+=-reg498;
    matrix(indices[2]+1,indices[1]+1)+=ponderation*reg426; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg735; matrix(indices[2]+1,indices[1]+0)+=ponderation*reg1150; matrix(indices[3]+0,indices[3]+1)+=-reg499; matrix(indices[2]+1,indices[7]+0)+=ponderation*reg241;
    matrix(indices[2]+1,indices[7]+1)+=ponderation*reg418; matrix(indices[2]+1,indices[7]+2)+=ponderation*reg759; matrix(indices[2]+2,indices[0]+0)+=ponderation*reg757; matrix(indices[2]+1,indices[6]+2)+=ponderation*reg191; matrix(indices[2]+2,indices[0]+1)+=ponderation*reg755;
    matrix(indices[2]+2,indices[0]+2)+=ponderation*reg416; matrix(indices[2]+1,indices[6]+1)+=ponderation*reg414; matrix(indices[2]+2,indices[1]+0)+=ponderation*reg752; matrix(indices[2]+2,indices[1]+1)+=ponderation*reg750; matrix(indices[2]+1,indices[6]+0)+=ponderation*reg1279;
    matrix(indices[2]+2,indices[1]+2)+=ponderation*reg415; matrix(indices[2]+2,indices[2]+0)+=ponderation*reg747; matrix(indices[2]+2,indices[2]+1)+=ponderation*reg776; matrix(indices[2]+1,indices[5]+2)+=ponderation*reg246; matrix(indices[2]+2,indices[2]+2)+=ponderation*reg412;
    matrix(indices[2]+2,indices[3]+0)+=-reg459; matrix(indices[2]+1,indices[5]+1)+=ponderation*reg407; matrix(indices[2]+2,indices[3]+1)+=ponderation*reg773; matrix(indices[2]+2,indices[3]+2)+=ponderation*reg380; matrix(indices[2]+1,indices[5]+0)+=ponderation*reg621;
    matrix(indices[2]+2,indices[4]+0)+=ponderation*reg769; matrix(indices[2]+2,indices[4]+1)+=ponderation*reg767; matrix(indices[2]+1,indices[4]+2)+=ponderation*reg1257; matrix(indices[2]+2,indices[4]+2)+=ponderation*reg406; matrix(indices[2]+2,indices[5]+0)+=ponderation*reg764;
    matrix(indices[2]+2,indices[5]+1)+=ponderation*reg762; matrix(indices[2]+1,indices[4]+1)+=ponderation*reg404; matrix(indices[2]+0,indices[5]+1)+=ponderation*reg1218; matrix(indices[3]+1,indices[1]+1)+=ponderation*reg356; matrix(indices[3]+1,indices[1]+2)+=ponderation*reg788;
    matrix(indices[2]+0,indices[5]+0)+=ponderation*reg354; matrix(indices[3]+1,indices[2]+0)+=ponderation*reg786; matrix(indices[6]+2,indices[4]+1)+=ponderation*reg784; matrix(indices[6]+2,indices[4]+2)+=ponderation*reg322; matrix(indices[2]+0,indices[4]+2)+=ponderation*reg1243;
    matrix(indices[6]+2,indices[5]+0)+=ponderation*reg779; matrix(indices[3]+1,indices[2]+2)+=ponderation*reg1118; matrix(indices[3]+1,indices[3]+0)+=-reg376; matrix(indices[2]+0,indices[4]+1)+=ponderation*reg1237; matrix(indices[3]+1,indices[3]+1)+=ponderation*reg393;
    matrix(indices[2]+0,indices[4]+0)+=ponderation*reg387; matrix(indices[3]+1,indices[3]+2)+=-reg378; matrix(indices[3]+1,indices[4]+0)+=ponderation*reg804; matrix(indices[2]+0,indices[3]+2)+=-reg382; matrix(indices[3]+1,indices[4]+1)+=ponderation*reg815;
    matrix(indices[3]+1,indices[4]+2)+=ponderation*reg801; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg1179; matrix(indices[3]+1,indices[5]+0)+=ponderation*reg800; matrix(indices[3]+1,indices[5]+1)+=-reg386; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg1206;
    matrix(indices[3]+1,indices[5]+2)+=ponderation*reg796; matrix(indices[3]+1,indices[6]+0)+=ponderation*reg793; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg1204; matrix(indices[3]+1,indices[6]+1)+=ponderation*reg835; matrix(indices[3]+1,indices[6]+2)+=ponderation*reg651;
    matrix(indices[3]+0,indices[3]+2)+=ponderation*reg345; matrix(indices[2]+1,indices[0]+2)+=ponderation*reg1143; matrix(indices[3]+0,indices[4]+0)+=ponderation*reg422; matrix(indices[3]+0,indices[4]+1)+=ponderation*reg813; matrix(indices[2]+1,indices[0]+1)+=ponderation*reg419;
    matrix(indices[3]+0,indices[4]+2)+=-reg501; matrix(indices[2]+1,indices[0]+0)+=ponderation*reg1168; matrix(indices[3]+0,indices[5]+0)+=-reg504; matrix(indices[2]+0,indices[7]+2)+=ponderation*reg1161; matrix(indices[3]+0,indices[5]+1)+=ponderation*reg809;
    matrix(indices[3]+0,indices[5]+2)+=-reg465; matrix(indices[2]+0,indices[7]+1)+=ponderation*reg1120; matrix(indices[3]+0,indices[6]+0)+=ponderation*reg369; matrix(indices[3]+0,indices[6]+1)+=ponderation*reg833; matrix(indices[2]+0,indices[7]+0)+=ponderation*reg364;
    matrix(indices[3]+0,indices[6]+2)+=-reg488; matrix(indices[2]+0,indices[6]+2)+=ponderation*reg1105; matrix(indices[3]+0,indices[7]+0)+=ponderation*reg365; matrix(indices[6]+2,indices[1]+0)+=ponderation*reg882; matrix(indices[2]+0,indices[6]+1)+=ponderation*reg1135;
    matrix(indices[6]+2,indices[1]+1)+=ponderation*reg825; matrix(indices[6]+2,indices[1]+2)+=ponderation*reg307; matrix(indices[3]+0,indices[7]+2)+=-reg490; matrix(indices[2]+0,indices[6]+0)+=ponderation*reg359; matrix(indices[3]+1,indices[0]+0)+=ponderation*reg820;
    matrix(indices[3]+1,indices[0]+1)+=ponderation*reg360; matrix(indices[2]+0,indices[5]+2)+=ponderation*reg1122; matrix(indices[3]+1,indices[0]+2)+=ponderation*reg791; matrix(indices[3]+1,indices[1]+0)+=ponderation*reg357; matrix(indices[5]+2,indices[6]+2)+=ponderation*reg250;
    matrix(indices[5]+2,indices[7]+0)+=ponderation*reg942; matrix(indices[5]+2,indices[7]+1)+=ponderation*reg940; matrix(indices[0]+2,indices[6]+0)+=ponderation*reg1267; matrix(indices[5]+2,indices[7]+2)+=ponderation*reg253; matrix(indices[0]+2,indices[5]+2)+=ponderation*reg306;
    matrix(indices[6]+0,indices[0]+0)+=ponderation*reg305; matrix(indices[6]+0,indices[0]+1)+=ponderation*reg962; matrix(indices[0]+2,indices[5]+1)+=ponderation*reg1278; matrix(indices[6]+0,indices[0]+2)+=ponderation*reg958; matrix(indices[6]+0,indices[1]+0)+=ponderation*reg601;
    matrix(indices[0]+0,indices[4]+2)+=ponderation*reg177; matrix(indices[6]+0,indices[1]+1)+=ponderation*reg919; matrix(indices[6]+0,indices[1]+2)+=ponderation*reg917; matrix(indices[0]+0,indices[4]+1)+=ponderation*reg1295; matrix(indices[6]+0,indices[2]+0)+=ponderation*reg914;
    matrix(indices[6]+0,indices[2]+1)+=ponderation*reg912; matrix(indices[0]+0,indices[4]+0)+=ponderation*reg1162; matrix(indices[6]+0,indices[2]+2)+=ponderation*reg910; matrix(indices[6]+0,indices[3]+0)+=ponderation*reg908; matrix(indices[6]+0,indices[3]+1)+=ponderation*reg936;
    matrix(indices[0]+0,indices[6]+2)+=ponderation*reg1217; matrix(indices[6]+0,indices[3]+2)+=-reg362; matrix(indices[0]+0,indices[6]+1)+=ponderation*reg1231; matrix(indices[6]+0,indices[4]+0)+=ponderation*reg923; matrix(indices[6]+0,indices[4]+1)+=ponderation*reg927;
    matrix(indices[6]+0,indices[4]+2)+=ponderation*reg929; matrix(indices[0]+0,indices[6]+0)+=ponderation*reg586; matrix(indices[5]+2,indices[0]+1)+=ponderation*reg841; matrix(indices[5]+2,indices[0]+2)+=ponderation*reg273; matrix(indices[1]+0,indices[1]+0)+=ponderation*reg1219;
    matrix(indices[5]+2,indices[1]+0)+=ponderation*reg838; matrix(indices[5]+2,indices[1]+1)+=ponderation*reg836; matrix(indices[1]+0,indices[0]+2)+=ponderation*reg1234; matrix(indices[5]+2,indices[1]+2)+=ponderation*reg275; matrix(indices[5]+2,indices[2]+0)+=ponderation*reg867;
    matrix(indices[5]+2,indices[2]+1)+=ponderation*reg865; matrix(indices[1]+0,indices[0]+1)+=ponderation*reg1176; matrix(indices[5]+2,indices[2]+2)+=ponderation*reg279; matrix(indices[5]+2,indices[3]+0)+=-reg352; matrix(indices[1]+0,indices[0]+0)+=ponderation*reg1199;
    matrix(indices[5]+2,indices[3]+1)+=ponderation*reg863; matrix(indices[5]+2,indices[3]+2)+=-reg325; matrix(indices[0]+2,indices[7]+2)+=ponderation*reg294; matrix(indices[5]+2,indices[4]+0)+=ponderation*reg859; matrix(indices[5]+2,indices[4]+1)+=ponderation*reg857;
    matrix(indices[0]+2,indices[7]+1)+=ponderation*reg1224; matrix(indices[5]+2,indices[4]+2)+=ponderation*reg287; matrix(indices[5]+2,indices[5]+0)+=ponderation*reg949; matrix(indices[0]+2,indices[7]+0)+=ponderation*reg1160; matrix(indices[5]+2,indices[5]+1)+=-reg358;
    matrix(indices[5]+2,indices[5]+2)+=ponderation*reg299; matrix(indices[0]+2,indices[6]+2)+=ponderation*reg301; matrix(indices[5]+2,indices[6]+0)+=ponderation*reg947; matrix(indices[5]+2,indices[6]+1)+=ponderation*reg945; matrix(indices[0]+2,indices[6]+1)+=ponderation*reg1258;
    matrix(indices[0]+2,indices[3]+0)+=-reg353; matrix(indices[6]+1,indices[3]+2)+=ponderation*reg855; matrix(indices[6]+1,indices[4]+0)+=ponderation*reg861; matrix(indices[0]+2,indices[2]+2)+=ponderation*reg606; matrix(indices[6]+1,indices[4]+1)+=ponderation*reg531;
    matrix(indices[6]+1,indices[4]+2)+=ponderation*reg869; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg200; matrix(indices[6]+1,indices[5]+0)+=ponderation*reg840; matrix(indices[6]+1,indices[5]+1)+=ponderation*reg847; matrix(indices[0]+2,indices[2]+0)+=ponderation*reg1268;
    matrix(indices[6]+1,indices[5]+2)+=ponderation*reg852; matrix(indices[6]+1,indices[6]+0)+=ponderation*reg890; matrix(indices[0]+2,indices[1]+2)+=ponderation*reg608; matrix(indices[6]+1,indices[6]+1)+=ponderation*reg588; matrix(indices[1]+1,indices[6]+1)+=ponderation*reg1287;
    matrix(indices[6]+1,indices[6]+2)+=ponderation*reg893; matrix(indices[6]+1,indices[7]+0)+=ponderation*reg897; matrix(indices[0]+2,indices[1]+1)+=ponderation*reg186; matrix(indices[6]+1,indices[7]+1)+=ponderation*reg218; matrix(indices[6]+1,indices[7]+2)+=ponderation*reg871;
    matrix(indices[0]+2,indices[1]+0)+=ponderation*reg1271; matrix(indices[6]+2,indices[0]+0)+=ponderation*reg262; matrix(indices[6]+2,indices[0]+1)+=ponderation*reg258; matrix(indices[6]+2,indices[0]+2)+=ponderation*reg600; matrix(indices[0]+2,indices[0]+2)+=ponderation*reg573;
    matrix(indices[6]+2,indices[2]+0)+=ponderation*reg822; matrix(indices[6]+2,indices[2]+1)+=ponderation*reg1053; matrix(indices[0]+2,indices[0]+1)+=ponderation*reg471; matrix(indices[6]+0,indices[5]+0)+=ponderation*reg931; matrix(indices[0]+0,indices[2]+2)+=ponderation*reg1203;
    matrix(indices[6]+0,indices[5]+1)+=ponderation*reg932; matrix(indices[6]+0,indices[5]+2)+=ponderation*reg935; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg1181; matrix(indices[6]+0,indices[6]+0)+=ponderation*reg939; matrix(indices[6]+0,indices[6]+1)+=ponderation*reg906;
    matrix(indices[0]+0,indices[2]+0)+=ponderation*reg1235; matrix(indices[6]+0,indices[6]+2)+=ponderation*reg909; matrix(indices[6]+0,indices[7]+0)+=ponderation*reg229; matrix(indices[0]+2,indices[5]+0)+=ponderation*reg1210; matrix(indices[6]+0,indices[7]+1)+=ponderation*reg921;
    matrix(indices[6]+0,indices[7]+2)+=ponderation*reg328; matrix(indices[6]+1,indices[0]+0)+=ponderation*reg952; matrix(indices[0]+2,indices[4]+2)+=ponderation*reg236; matrix(indices[6]+1,indices[0]+1)+=ponderation*reg215; matrix(indices[6]+1,indices[0]+2)+=ponderation*reg953;
    matrix(indices[0]+2,indices[4]+1)+=ponderation*reg1099; matrix(indices[6]+1,indices[1]+0)+=ponderation*reg956; matrix(indices[6]+1,indices[1]+1)+=ponderation*reg220; matrix(indices[0]+2,indices[4]+0)+=ponderation*reg1156; matrix(indices[6]+1,indices[1]+2)+=ponderation*reg957;
    matrix(indices[6]+1,indices[2]+0)+=ponderation*reg960; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg585; matrix(indices[6]+1,indices[2]+1)+=ponderation*reg552; matrix(indices[6]+1,indices[2]+2)+=ponderation*reg338; matrix(indices[0]+2,indices[3]+1)+=ponderation*reg1153;
    matrix(indices[6]+1,indices[3]+0)+=ponderation*reg944; matrix(indices[6]+1,indices[3]+1)+=ponderation*reg559; matrix(indices[4]+2,indices[5]+2)+=ponderation*reg267; matrix(indices[4]+2,indices[6]+0)+=ponderation*reg1073; matrix(indices[1]+1,indices[2]+2)+=ponderation*reg1140;
    matrix(indices[4]+2,indices[6]+1)+=ponderation*reg480; matrix(indices[4]+2,indices[6]+2)+=ponderation*reg268; matrix(indices[4]+2,indices[7]+0)+=ponderation*reg1070; matrix(indices[1]+1,indices[2]+1)+=ponderation*reg270; matrix(indices[4]+2,indices[7]+1)+=ponderation*reg475;
    matrix(indices[4]+2,indices[7]+2)+=ponderation*reg269; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg1155; matrix(indices[5]+0,indices[0]+0)+=ponderation*reg272; matrix(indices[1]+1,indices[1]+2)+=ponderation*reg1308; matrix(indices[5]+0,indices[0]+1)+=ponderation*reg1096;
    matrix(indices[5]+0,indices[0]+2)+=ponderation*reg1094; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg276; matrix(indices[5]+0,indices[1]+0)+=ponderation*reg274; matrix(indices[5]+0,indices[1]+1)+=ponderation*reg1089; matrix(indices[1]+1,indices[1]+0)+=ponderation*reg239;
    matrix(indices[5]+0,indices[1]+2)+=ponderation*reg1087; matrix(indices[1]+1,indices[0]+2)+=ponderation*reg197; matrix(indices[5]+0,indices[2]+0)+=ponderation*reg278; matrix(indices[5]+0,indices[2]+1)+=ponderation*reg1084; matrix(indices[5]+0,indices[2]+2)+=ponderation*reg1082;
    matrix(indices[1]+1,indices[0]+1)+=ponderation*reg282; matrix(indices[1]+1,indices[0]+0)+=ponderation*reg1263; matrix(indices[5]+0,indices[3]+0)+=-reg516; matrix(indices[5]+0,indices[3]+1)+=ponderation*reg1048; matrix(indices[1]+0,indices[7]+2)+=ponderation*reg1272;
    matrix(indices[4]+1,indices[7]+1)+=ponderation*reg474; matrix(indices[1]+1,indices[5]+2)+=ponderation*reg1247; matrix(indices[4]+1,indices[7]+2)+=ponderation*reg973; matrix(indices[4]+2,indices[0]+0)+=ponderation*reg971; matrix(indices[1]+1,indices[5]+1)+=ponderation*reg1216;
    matrix(indices[4]+2,indices[0]+1)+=ponderation*reg969; matrix(indices[4]+2,indices[0]+2)+=ponderation*reg473; matrix(indices[1]+1,indices[5]+0)+=ponderation*reg1225; matrix(indices[4]+2,indices[1]+0)+=ponderation*reg999; matrix(indices[4]+2,indices[1]+1)+=ponderation*reg997;
    matrix(indices[4]+2,indices[1]+2)+=ponderation*reg470; matrix(indices[1]+1,indices[4]+2)+=ponderation*reg1126; matrix(indices[4]+2,indices[2]+0)+=ponderation*reg994; matrix(indices[4]+2,indices[2]+1)+=ponderation*reg992; matrix(indices[1]+1,indices[4]+1)+=ponderation*reg466;
    matrix(indices[4]+2,indices[2]+2)+=ponderation*reg469; matrix(indices[4]+2,indices[3]+0)+=-reg510; matrix(indices[1]+1,indices[4]+0)+=ponderation*reg450; matrix(indices[4]+2,indices[3]+1)+=ponderation*reg989; matrix(indices[4]+2,indices[3]+2)+=ponderation*reg514;
    matrix(indices[1]+1,indices[3]+2)+=ponderation*reg1113; matrix(indices[4]+2,indices[4]+0)+=ponderation*reg985; matrix(indices[4]+2,indices[4]+1)+=ponderation*reg983; matrix(indices[4]+2,indices[4]+2)+=ponderation*reg264; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg265;
    matrix(indices[4]+2,indices[5]+0)+=ponderation*reg1079; matrix(indices[4]+2,indices[5]+1)+=ponderation*reg1077; matrix(indices[1]+1,indices[3]+0)+=ponderation*reg1167; matrix(indices[1]+0,indices[4]+1)+=ponderation*reg313; matrix(indices[5]+1,indices[2]+1)+=ponderation*reg263;
    matrix(indices[5]+1,indices[2]+2)+=ponderation*reg875; matrix(indices[1]+0,indices[4]+0)+=ponderation*reg324; matrix(indices[5]+1,indices[3]+0)+=ponderation*reg874; matrix(indices[1]+0,indices[3]+2)+=-reg308; matrix(indices[5]+1,indices[3]+1)+=-reg320;
    matrix(indices[5]+1,indices[3]+2)+=ponderation*reg900; matrix(indices[1]+0,indices[3]+1)+=ponderation*reg208; matrix(indices[5]+1,indices[4]+0)+=ponderation*reg898; matrix(indices[5]+1,indices[4]+1)+=ponderation*reg329; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg434;
    matrix(indices[5]+1,indices[4]+2)+=ponderation*reg895; matrix(indices[5]+1,indices[5]+0)+=-reg361; matrix(indices[1]+0,indices[2]+2)+=ponderation*reg195; matrix(indices[5]+1,indices[5]+1)+=ponderation*reg891; matrix(indices[5]+1,indices[5]+2)+=-reg355;
    matrix(indices[1]+0,indices[2]+1)+=ponderation*reg1148; matrix(indices[5]+1,indices[6]+0)+=ponderation*reg256; matrix(indices[5]+1,indices[6]+1)+=ponderation*reg339; matrix(indices[1]+0,indices[2]+0)+=ponderation*reg1163; matrix(indices[5]+1,indices[6]+2)+=ponderation*reg850;
    matrix(indices[5]+1,indices[7]+0)+=ponderation*reg848; matrix(indices[1]+0,indices[1]+2)+=ponderation*reg1110; matrix(indices[5]+1,indices[7]+1)+=ponderation*reg343; matrix(indices[5]+1,indices[7]+2)+=ponderation*reg845; matrix(indices[1]+0,indices[1]+1)+=ponderation*reg1127;
    matrix(indices[5]+2,indices[0]+0)+=ponderation*reg843; matrix(indices[5]+0,indices[3]+2)+=-reg506; matrix(indices[5]+0,indices[4]+0)+=ponderation*reg1042; matrix(indices[1]+0,indices[7]+1)+=ponderation*reg1251; matrix(indices[5]+0,indices[4]+1)+=ponderation*reg1040;
    matrix(indices[5]+0,indices[4]+2)+=ponderation*reg1038; matrix(indices[1]+0,indices[7]+0)+=ponderation*reg292; matrix(indices[5]+0,indices[5]+0)+=ponderation*reg1035; matrix(indices[1]+0,indices[6]+2)+=ponderation*reg182; matrix(indices[5]+0,indices[5]+1)+=-reg507;
    matrix(indices[5]+0,indices[5]+2)+=ponderation*reg1066; matrix(indices[1]+0,indices[6]+1)+=ponderation*reg620; matrix(indices[5]+0,indices[6]+0)+=ponderation*reg1064; matrix(indices[5]+0,indices[6]+1)+=ponderation*reg1062; matrix(indices[1]+0,indices[6]+0)+=ponderation*reg254;
    matrix(indices[5]+0,indices[6]+2)+=ponderation*reg551; matrix(indices[5]+0,indices[7]+0)+=ponderation*reg251; matrix(indices[1]+0,indices[5]+2)+=ponderation*reg413; matrix(indices[5]+0,indices[7]+1)+=ponderation*reg1058; matrix(indices[5]+0,indices[7]+2)+=ponderation*reg1056;
    matrix(indices[1]+0,indices[5]+1)+=ponderation*reg156; matrix(indices[5]+1,indices[0]+0)+=ponderation*reg1054; matrix(indices[5]+1,indices[0]+1)+=ponderation*reg257; matrix(indices[1]+0,indices[5]+0)+=ponderation*reg260; matrix(indices[5]+1,indices[0]+2)+=ponderation*reg885;
    matrix(indices[5]+1,indices[1]+0)+=ponderation*reg883; matrix(indices[1]+0,indices[4]+2)+=ponderation*reg1300; matrix(indices[5]+1,indices[1]+1)+=ponderation*reg259; matrix(indices[5]+1,indices[1]+2)+=ponderation*reg880; matrix(indices[5]+1,indices[2]+0)+=ponderation*reg878;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[2]; T reg1=1-var_inter[1]; T reg2=1-var_inter[0]; T reg3=reg1*var_inter[0]; T reg4=reg2*reg1;
    T reg5=reg1*reg0; T reg6=reg2*reg0; T reg7=var_inter[0]*reg0; T reg8=reg3*elem.pos(1)[1]; T reg9=elem.pos(0)[1]*reg4;
    T reg10=var_inter[1]*var_inter[0]; T reg11=var_inter[1]*reg0; T reg12=elem.pos(1)[1]*reg5; T reg13=elem.pos(0)[1]*reg5; T reg14=reg3*elem.pos(1)[2];
    T reg15=elem.pos(0)[2]*reg5; T reg16=elem.pos(1)[2]*reg5; T reg17=reg4*elem.pos(0)[2]; T reg18=elem.pos(1)[1]*reg7; T reg19=elem.pos(0)[1]*reg6;
    T reg20=elem.pos(0)[2]*reg6; T reg21=elem.pos(1)[2]*reg7; T reg22=elem.pos(2)[1]*reg7; T reg23=reg18+reg19; T reg24=reg20+reg21;
    T reg25=elem.pos(2)[2]*reg7; T reg26=elem.pos(2)[2]*reg11; reg16=reg16-reg15; T reg27=elem.pos(2)[1]*reg11; reg12=reg12-reg13;
    T reg28=reg17+reg14; T reg29=elem.pos(2)[2]*reg10; T reg30=elem.pos(2)[1]*reg10; T reg31=reg8+reg9; T reg32=var_inter[1]*reg2;
    reg26=reg16+reg26; reg16=elem.pos(3)[2]*reg11; T reg33=elem.pos(3)[2]*reg6; reg25=reg25-reg24; T reg34=elem.pos(1)[0]*reg7;
    T reg35=elem.pos(0)[0]*reg6; T reg36=elem.pos(3)[1]*reg11; reg27=reg12+reg27; reg12=reg31+reg30; T reg37=elem.pos(1)[0]*reg5;
    reg22=reg22-reg23; T reg38=var_inter[2]*reg2; T reg39=elem.pos(3)[1]*reg32; T reg40=elem.pos(0)[0]*reg5; T reg41=reg28+reg29;
    T reg42=elem.pos(3)[2]*reg32; T reg43=var_inter[2]*reg1; T reg44=elem.pos(3)[1]*reg6; reg26=reg26-reg16; T reg45=reg12+reg39;
    T reg46=elem.pos(4)[1]*reg4; T reg47=elem.pos(4)[2]*reg43; T reg48=var_inter[2]*var_inter[0]; reg44=reg22+reg44; reg22=elem.pos(4)[1]*reg38;
    T reg49=reg34+reg35; T reg50=elem.pos(2)[0]*reg7; T reg51=elem.pos(0)[0]*reg4; T reg52=elem.pos(2)[0]*reg11; reg33=reg25+reg33;
    reg25=elem.pos(4)[2]*reg38; T reg53=reg3*elem.pos(1)[0]; reg37=reg37-reg40; T reg54=reg41+reg42; T reg55=elem.pos(4)[1]*reg43;
    reg27=reg27-reg36; T reg56=elem.pos(4)[2]*reg4; T reg57=elem.pos(5)[2]*reg48; reg50=reg50-reg49; T reg58=elem.pos(3)[0]*reg6;
    reg44=reg44-reg22; T reg59=var_inter[1]*var_inter[2]; T reg60=elem.pos(5)[1]*reg3; reg46=reg46-reg45; T reg61=elem.pos(3)[0]*reg11;
    reg52=reg37+reg52; reg37=reg53+reg51; reg26=reg26-reg47; T reg62=elem.pos(5)[2]*reg43; reg33=reg33-reg25;
    T reg63=reg10*elem.pos(2)[0]; T reg64=elem.pos(5)[1]*reg43; reg27=reg27-reg55; T reg65=elem.pos(5)[2]*reg3; reg56=reg56-reg54;
    T reg66=elem.pos(5)[1]*reg48; reg33=reg33-reg57; T reg67=elem.pos(6)[2]*reg48; T reg68=reg37+reg63; T reg69=elem.pos(6)[1]*reg48;
    reg44=reg44-reg66; T reg70=elem.pos(3)[0]*reg32; reg64=reg27+reg64; reg27=elem.pos(6)[1]*reg59; reg62=reg26+reg62;
    reg26=elem.pos(6)[2]*reg59; T reg71=elem.pos(4)[0]*reg43; reg52=reg52-reg61; reg65=reg56+reg65; reg56=elem.pos(6)[2]*reg10;
    T reg72=elem.pos(6)[1]*reg10; reg60=reg46+reg60; reg58=reg50+reg58; reg46=elem.pos(4)[0]*reg38; reg56=reg65+reg56;
    reg50=elem.pos(7)[2]*reg32; reg65=elem.pos(7)[2]*reg38; reg67=reg33+reg67; reg33=reg68+reg70; T reg73=elem.pos(4)[0]*reg4;
    reg52=reg52-reg71; T reg74=elem.pos(5)[0]*reg43; reg27=reg64+reg27; reg64=elem.pos(7)[1]*reg59; reg26=reg62+reg26;
    reg62=elem.pos(7)[2]*reg59; T reg75=elem.pos(7)[1]*reg32; T reg76=elem.pos(7)[1]*reg38; reg69=reg44+reg69; reg72=reg60+reg72;
    reg58=reg58-reg46; reg44=elem.pos(5)[0]*reg48; reg75=reg72+reg75; reg50=reg56+reg50; reg56=1+(*f.m).poisson_ratio;
    reg26=reg26-reg62; reg27=reg27-reg64; reg60=elem.pos(5)[0]*reg3; reg73=reg73-reg33; reg65=reg67+reg65;
    reg76=reg69+reg76; reg67=elem.pos(6)[0]*reg59; reg74=reg52+reg74; reg52=elem.pos(6)[0]*reg48; reg58=reg58-reg44;
    reg69=elem.pos(7)[0]*reg59; reg67=reg74+reg67; reg56=reg56/(*f.m).elastic_modulus; reg72=reg76*reg50; reg74=reg27*reg50;
    T reg77=reg65*reg75; T reg78=reg26*reg75; reg60=reg73+reg60; reg73=elem.pos(6)[0]*reg10; reg52=reg58+reg52;
    reg58=elem.pos(7)[0]*reg38; reg73=reg60+reg73; reg60=elem.pos(7)[0]*reg32; reg77=reg72-reg77; reg58=reg52+reg58;
    reg52=pow(reg56,2); reg78=reg74-reg78; reg72=reg27*reg65; reg74=reg26*reg76; reg67=reg67-reg69;
    T reg79=reg58*reg78; T reg80=reg67*reg77; reg74=reg72-reg74; reg60=reg73+reg60; reg72=1.0/(*f.m).elastic_modulus;
    reg73=(*f.m).poisson_ratio/(*f.m).elastic_modulus; reg56=reg56*reg52; T reg81=reg72*reg52; T reg82=reg26*reg60; reg52=reg73*reg52;
    T reg83=reg73*reg56; T reg84=reg67*reg50; reg56=reg72*reg56; T reg85=reg65*reg60; reg50=reg58*reg50;
    T reg86=reg60*reg74; reg79=reg80-reg79; reg80=reg72*reg56; T reg87=reg73*reg83; reg56=reg73*reg56;
    reg26=reg26*reg58; reg85=reg50-reg85; reg65=reg67*reg65; reg50=reg73*reg52; T reg88=reg58*reg75;
    T reg89=reg27*reg60; reg82=reg84-reg82; reg84=reg72*reg81; reg86=reg79+reg86; reg75=reg67*reg75;
    reg81=reg73*reg81; reg60=reg76*reg60; reg52=reg72*reg52; reg83=reg72*reg83; reg56=reg87+reg56;
    reg80=reg80-reg87; reg84=reg84-reg50; reg77=reg77/reg86; reg81=reg50+reg81; reg85=reg85/reg86;
    reg76=reg67*reg76; reg89=reg75-reg89; reg26=reg65-reg26; reg60=reg88-reg60; reg78=reg78/reg86;
    reg82=reg82/reg86; reg58=reg27*reg58; reg83=reg87+reg83; reg26=reg26/reg86; reg84=reg72*reg84;
    reg74=reg74/reg86; reg89=reg89/reg86; reg81=reg73*reg81; reg27=reg48*reg78; reg60=reg60/reg86;
    reg65=reg43*reg77; reg67=reg50+reg52; reg75=reg43*reg85; reg79=reg73*reg56; reg87=reg48*reg82;
    reg58=reg76-reg58; reg72=reg72*reg80; reg76=reg59*reg77; reg88=reg38*reg89; T reg90=reg43*reg60;
    T reg91=reg38*reg82; T reg92=reg38*reg78; T reg93=reg6*reg78; T reg94=reg77*reg5; T reg95=reg85*reg5;
    T reg96=reg48*reg89; T reg97=reg65+reg27; T reg98=reg11*reg77; T reg99=reg11*reg85; T reg100=reg75+reg87;
    T reg101=reg7*reg78; T reg102=reg3*reg74; T reg103=reg7*reg82; T reg104=reg3*reg26; reg79=reg72-reg79;
    reg72=reg73*reg83; reg81=reg84-reg81; reg67=reg73*reg67; reg73=reg6*reg89; reg58=reg58/reg86;
    reg84=reg59*reg60; T reg105=reg11*reg60; T reg106=reg6*reg82; T reg107=reg59*reg85; T reg108=reg10*reg58;
    T reg109=reg98-reg101; T reg110=reg10*reg74; T reg111=reg3*reg58; T reg112=reg103-reg99; T reg113=reg10*reg26;
    T reg114=reg104+reg100; T reg115=reg7*reg89; T reg116=reg98+reg93; T reg117=reg32*reg74; reg97=reg102+reg97;
    T reg118=reg92+reg76; T reg119=reg101+reg94; T reg120=reg76-reg27; T reg121=reg87-reg107; T reg122=reg90+reg96;
    T reg123=reg32*reg58; T reg124=reg105+reg73; T reg125=reg32*reg26; T reg126=reg106+reg99; T reg127=reg88-reg90;
    T reg128=reg84-reg96; T reg129=reg75-reg91; T reg130=reg5*reg60; T reg131=reg92-reg65; T reg132=reg4*reg58;
    T reg133=reg4*reg74; T reg134=reg93-reg94; T reg135=reg103+reg95; T reg136=reg88+reg84; T reg137=reg91+reg107;
    T reg138=reg95-reg106; T reg139=reg4*reg26; reg72=reg79-reg72; reg67=reg81-reg67; reg79=reg104-reg135;
    reg134=reg134-reg133; reg81=0.5*reg97; reg119=reg119-reg102; reg120=reg110+reg120; reg121=reg121-reg113;
    T reg140=reg105-reg115; reg137=reg137-reg125; T reg141=reg73-reg130; T reg142=0.5*reg114; reg128=reg128+reg108;
    reg112=reg112+reg113; T reg143=reg117-reg118; reg109=reg109-reg110; reg67=reg67/reg72; T reg144=reg115+reg130;
    reg122=reg111+reg122; reg127=reg127+reg132; T reg145=reg116+reg117; T reg146=reg123-reg136; reg129=reg129-reg139;
    T reg147=reg124+reg123; reg138=reg138+reg139; reg126=reg126+reg125; reg131=reg131+reg133; T reg148=0.5*reg127;
    T reg149=0.5*reg129; T reg150=reg67*reg142; T reg151=0.5*reg126; T reg152=0.5*reg120; T reg153=0.5*reg143;
    T reg154=0.5*reg121; T reg155=0.5*reg134; T reg156=0.5*reg128; T reg157=0.5*reg147; T reg158=0.5*reg131;
    T reg159=0.5*reg145; T reg160=reg67*reg81; T reg161=0.5*reg122; T reg162=0.5*reg146; T reg163=0.5*reg138;
    T reg164=0.5*reg109; T reg165=0.5*reg119; T reg166=0.5*reg79; reg141=reg141-reg132; T reg167=0.5*reg112;
    reg144=reg144-reg111; T reg168=0.5*reg137; reg140=reg140-reg108; reg80=reg80/reg72; T reg169=0.5*reg140;
    T reg170=reg80*reg97; T reg171=reg67*reg156; T reg172=reg67*reg168; T reg173=reg67*reg158; T reg174=reg67*reg164;
    T reg175=reg67*reg151; reg160=2*reg160; T reg176=reg67*reg161; T reg177=reg67*reg166; T reg178=0.5*reg144;
    T reg179=reg80*reg122; T reg180=0.5*reg141; T reg181=reg80*reg114; T reg182=reg67*reg152; T reg183=reg67*reg148;
    T reg184=reg67*reg159; T reg185=reg67*reg163; reg56=reg56/reg72; T reg186=2*reg150; T reg187=reg67*reg167;
    T reg188=reg67*reg162; T reg189=reg67*reg157; reg72=reg83/reg72; reg83=reg67*reg154; T reg190=reg67*reg149;
    T reg191=reg67*reg165; T reg192=reg67*reg155; T reg193=reg67*reg153; T reg194=2*reg189; T reg195=reg56*reg97;
    T reg196=reg72*reg146; T reg197=reg147*reg179; reg175=2*reg175; T reg198=reg151*reg186; reg182=2*reg182;
    T reg199=reg80*reg145; reg183=2*reg183; reg188=2*reg188; T reg200=reg80*reg126; T reg201=reg80*reg137;
    T reg202=reg56*reg145; T reg203=reg80*reg143; T reg204=reg56*reg143; T reg205=reg145*reg170; T reg206=reg80*reg141;
    reg83=2*reg83; T reg207=reg56*reg131; reg193=2*reg193; T reg208=reg80*reg120; T reg209=reg72*reg122;
    reg173=2*reg173; T reg210=reg72*reg128; reg172=2*reg172; T reg211=reg80*reg129; T reg212=reg80*reg121;
    T reg213=reg56*reg114; T reg214=reg80*reg144; T reg215=reg72*reg127; reg176=2*reg176; T reg216=2*reg184;
    T reg217=reg56*reg120; T reg218=reg56*reg126; T reg219=reg80*reg147; T reg220=reg80*reg119; reg187=2*reg187;
    reg191=2*reg191; T reg221=reg67*reg169; T reg222=reg80*reg79; T reg223=reg80*reg109; T reg224=reg72*reg147;
    T reg225=reg67*reg178; reg171=2*reg171; T reg226=reg80*reg146; T reg227=reg80*reg128; reg192=2*reg192;
    T reg228=reg80*reg134; reg185=2*reg185; reg190=2*reg190; T reg229=reg126*reg181; T reg230=reg80*reg140;
    T reg231=reg80*reg127; T reg232=reg159*reg160; reg174=2*reg174; T reg233=reg80*reg131; T reg234=reg67*reg180;
    T reg235=reg80*reg138; T reg236=reg80*reg112; reg177=2*reg177; T reg237=reg149*reg186; T reg238=reg166*reg190;
    T reg239=reg126*reg211; T reg240=reg167*reg172; T reg241=reg109*reg203; T reg242=reg131*reg170; T reg243=reg193*reg164;
    T reg244=reg131*reg208; T reg245=reg149*reg83; T reg246=reg193*reg155; T reg247=reg159*reg173; T reg248=reg145*reg210;
    T reg249=reg201*reg138; T reg250=reg203*reg134; T reg251=reg178*reg216; T reg252=reg119*reg224; T reg253=reg72*reg140;
    T reg254=reg129*reg181; T reg255=reg160*reg158; T reg256=reg145*reg203; T reg257=reg151*reg172; T reg258=reg141*reg226;
    T reg259=reg157*reg182; T reg260=reg126*reg200; T reg261=reg129*reg211; T reg262=reg158*reg173; T reg263=reg159*reg216;
    T reg264=reg56*reg112; T reg265=reg83*reg167; T reg266=reg109*reg208; T reg267=reg155*reg182; T reg268=reg201*reg112;
    T reg269=reg212*reg138; T reg270=reg224*reg126; T reg271=reg172*reg163; T reg272=reg175*reg157; T reg273=reg166*reg177;
    reg221=2*reg221; T reg274=reg131*reg203; T reg275=reg149*reg172; T reg276=reg119*reg220; T reg277=reg187*reg163;
    T reg278=reg119*reg233; T reg279=reg193*reg159; T reg280=reg223*reg119; T reg281=reg202*reg140; T reg282=reg72*reg126;
    T reg283=reg145*reg208; T reg284=reg147*reg227; T reg285=reg147*reg219; T reg286=reg56*reg121; T reg287=reg216*reg164;
    T reg288=reg147*reg207; T reg289=reg200*reg112; T reg290=reg145*reg209; T reg291=reg159*reg171; T reg292=reg147*reg217;
    T reg293=reg155*reg194; T reg294=reg202*reg141; T reg295=reg183*reg159; T reg296=reg157*reg160; T reg297=reg151*reg83;
    reg197=reg232+reg197; T reg298=reg211*reg112; T reg299=reg230*reg141; T reg300=reg194*reg164; T reg301=reg72*reg112;
    T reg302=reg147*reg231; T reg303=reg164*reg173; T reg304=reg147*reg195; T reg305=reg159*reg176; T reg306=reg231*reg141;
    T reg307=reg206*reg141; reg205=reg198+reg205; T reg308=reg164*reg174; reg232=reg229+reg232; T reg309=reg212*reg112;
    T reg310=reg164*reg182; T reg311=reg236*reg112; T reg312=reg72*reg129; T reg313=reg157*reg176; T reg314=reg131*reg233;
    T reg315=reg149*reg190; T reg316=reg72*reg137; T reg317=reg126*reg212; T reg318=reg159*reg182; T reg319=reg147*reg226;
    T reg320=reg230*reg140; T reg321=reg72*reg79; T reg322=reg181*reg112; T reg323=reg160*reg164; T reg324=reg119*reg199;
    T reg325=reg166*reg175; T reg326=reg219*reg141; T reg327=reg159*reg188; T reg328=reg166*reg187; T reg329=reg147*reg204;
    T reg330=reg126*reg201; T reg331=reg79*reg212; T reg332=reg168*reg172; T reg333=reg141*reg179; T reg334=reg165*reg191;
    T reg335=reg128*reg226; T reg336=reg220*reg134; T reg337=reg165*reg182; T reg338=reg196*reg145; T reg339=reg222*reg79;
    T reg340=reg193*reg81; T reg341=reg201*reg114; T reg342=reg144*reg231; T reg343=reg128*reg227; T reg344=reg72*reg141;
    T reg345=reg122*reg179; T reg346=reg134*reg170; T reg347=reg56*reg119; T reg348=reg193*reg157; T reg349=reg56*reg138;
    T reg350=reg140*reg179; T reg351=reg199*reg134; T reg352=reg140*reg227; T reg353=reg165*reg160; T reg354=reg79*reg181;
    T reg355=reg144*reg179; T reg356=reg190*reg163; T reg357=reg72*reg121; T reg358=reg155*reg192; T reg359=reg233*reg134;
    T reg360=reg235*reg138; T reg361=reg143*reg203; T reg362=reg141*reg227; T reg363=reg81*reg182; T reg364=reg212*reg114;
    T reg365=reg216*reg180; T reg366=reg224*reg134; T reg367=reg145*reg199; T reg368=reg236*reg79; T reg369=reg186*reg163;
    T reg370=reg56*reg79; T reg371=reg151*reg175; T reg372=reg165*reg216; T reg373=reg140*reg226; T reg374=reg154*reg172;
    reg225=2*reg225; T reg375=reg72*reg114; T reg376=reg120*reg203; T reg377=reg177*reg163; T reg378=reg155*reg174;
    T reg379=reg144*reg214; T reg380=reg193*reg165; T reg381=reg56*reg109; T reg382=reg121*reg212; T reg383=reg79*reg201;
    T reg384=reg152*reg182; T reg385=reg144*reg219; T reg386=reg122*reg227; reg234=2*reg234; T reg387=reg185*reg163;
    T reg388=reg228*reg134; T reg389=reg79*reg200; T reg390=reg121*reg201; T reg391=reg191*reg155; T reg392=reg223*reg134;
    T reg393=reg222*reg138; T reg394=reg193*reg152; T reg395=reg165*reg194; T reg396=reg144*reg202; T reg397=reg122*reg226;
    T reg398=reg144*reg230; T reg399=reg72*reg144; T reg400=reg154*reg83; T reg401=reg120*reg208; T reg402=reg165*reg174;
    T reg403=reg109*reg224; T reg404=reg146*reg226; T reg405=reg56*reg137; T reg406=reg127*reg179; T reg407=reg166*reg83;
    T reg408=reg119*reg208; T reg409=reg109*reg199; T reg410=reg127*reg227; T reg411=reg175*reg167; T reg412=reg200*reg138;
    T reg413=reg155*reg216; T reg414=reg219*reg140; T reg415=reg127*reg226; T reg416=reg97*reg170; T reg417=reg142*reg186;
    T reg418=reg56*reg129; T reg419=reg109*reg223; T reg420=reg213*reg97; T reg421=reg109*reg170; T reg422=reg166*reg186;
    T reg423=reg181*reg138; T reg424=reg155*reg160; T reg425=reg119*reg170; T reg426=reg167*reg186; T reg427=reg182*reg158;
    T reg428=reg129*reg212; T reg429=reg157*reg173; T reg430=reg145*reg215; T reg431=reg193*reg158; T reg432=reg129*reg201;
    T reg433=reg109*reg233; T reg434=reg190*reg167; T reg435=reg211*reg138; T reg436=reg155*reg173; T reg437=reg127*reg231;
    T reg438=reg216*reg169; T reg439=reg83*reg142; T reg440=reg166*reg172; T reg441=reg119*reg203; T reg442=reg190*reg151;
    reg203=reg203*reg97; T reg443=reg172*reg142; T reg444=reg144*reg227; T reg445=reg231*reg140; reg201=reg201*reg137;
    T reg446=reg145*reg218; T reg447=reg81*reg160; T reg448=reg181*reg114; T reg449=reg151*reg216; T reg450=reg209*reg114;
    T reg451=reg153*reg193; T reg452=reg161*reg186; T reg453=reg175*reg163; T reg454=reg214*reg141; T reg455=reg160*reg142;
    T reg456=reg167*reg187; T reg457=reg233*reg145; T reg458=reg236*reg138; reg226=reg144*reg226; T reg459=reg83*reg163;
    T reg460=reg208*reg134; T reg461=reg208*reg97; T reg462=reg165*reg173; T reg463=reg79*reg211; T reg464=reg140*reg375;
    T reg465=reg312*reg140; T reg466=reg282*reg140; reg350=reg323+reg350; T reg467=reg195*reg140; T reg468=reg217*reg140;
    T reg469=reg183*reg164; T reg470=reg194*reg167; T reg471=reg176*reg167; reg445=reg303+reg445; T reg472=reg176*reg164;
    T reg473=reg207*reg140; T reg474=reg281+reg300; T reg475=reg287+reg414; T reg476=reg183*reg167; reg320=reg308+reg320;
    T reg477=reg165*reg183; T reg478=reg144*reg312; T reg479=reg166*reg183; reg342=reg462+reg342; T reg480=reg144*reg195;
    T reg481=reg165*reg176; T reg482=reg144*reg375; T reg483=reg166*reg176; reg355=reg353+reg355; T reg484=reg144*reg217;
    T reg485=reg165*reg171; T reg486=reg144*reg357; T reg487=reg166*reg171; reg444=reg337+reg444; T reg488=reg144*reg204;
    T reg489=reg165*reg188; T reg490=reg144*reg316; T reg491=reg166*reg188; reg226=reg380+reg226; reg419=reg456+reg419;
    T reg492=reg169*reg221; T reg493=reg167*reg174; T reg494=reg109*reg264; T reg495=reg109*reg253; T reg496=reg169*reg174;
    T reg497=reg411-reg409; T reg498=reg194*reg169; T reg499=reg79*reg215; T reg500=reg178*reg190; T reg501=reg165*reg186;
    T reg502=reg79*reg195; reg353=reg353-reg354; T reg503=reg79*reg209; T reg504=reg178*reg186; T reg505=reg165*reg83;
    T reg506=reg79*reg217; T reg507=reg405*reg145; reg348=reg338+reg348; T reg508=reg178*reg83; T reg509=reg165*reg172;
    T reg510=reg79*reg204; reg383=reg380+reg383; reg380=reg196*reg79; T reg511=reg178*reg172; reg379=reg334+reg379;
    T reg512=reg381*reg144; T reg513=reg165*reg221; T reg514=reg144*reg301; T reg515=reg166*reg221; reg398=reg402+reg398;
    T reg516=reg396+reg395; T reg517=reg144*reg282; T reg518=reg166*reg194; T reg519=reg372+reg385; T reg520=reg144*reg207;
    T reg521=reg112*reg253; T reg522=reg187*reg169; T reg523=reg175*reg164; T reg524=reg202*reg112; reg289=reg289-reg287;
    T reg525=reg224*reg112; T reg526=reg175*reg169; T reg527=reg190*reg164; T reg528=reg207*reg112; reg298=reg303+reg298;
    reg303=reg112*reg215; T reg529=reg190*reg169; T reg530=reg164*reg186; T reg531=reg195*reg112; reg323=reg323-reg322;
    T reg532=reg209*reg112; T reg533=reg169*reg186; T reg534=reg83*reg164; T reg535=reg217*reg112; reg309=reg310+reg309;
    T reg536=reg112*reg210; T reg537=reg83*reg169; T reg538=reg164*reg172; T reg539=reg204*reg112; reg268=reg243+reg268;
    T reg540=reg196*reg112; T reg541=reg169*reg172; T reg542=reg216*reg167; T reg543=reg109*reg218; T reg544=reg403+reg438;
    reg433=reg434+reg433; T reg545=reg183*reg169; T reg546=reg167*reg173; T reg547=reg109*reg418; T reg548=reg109*reg215;
    T reg549=reg169*reg173; reg421=reg421-reg426; T reg550=reg176*reg169; T reg551=reg160*reg167; T reg552=reg109*reg213;
    T reg553=reg109*reg209; T reg554=reg160*reg169; reg266=reg265+reg266; T reg555=reg169*reg171; T reg556=reg167*reg182;
    T reg557=reg109*reg286; T reg558=reg109*reg210; T reg559=reg169*reg182; reg241=reg240+reg241; T reg560=reg169*reg188;
    T reg561=reg193*reg167; T reg562=reg405*reg109; T reg563=reg196*reg109; T reg564=reg193*reg169; reg311=reg308+reg311;
    reg416=reg416+reg417; reg308=reg161*reg176; reg455=reg420+reg455; T reg565=reg209*reg97; T reg566=reg161*reg160;
    reg461=reg461-reg439; T reg567=reg161*reg171; T reg568=reg286*reg97; T reg569=reg182*reg142; T reg570=reg210*reg97;
    T reg571=reg161*reg182; reg203=reg203-reg443; T reg572=reg161*reg188; T reg573=reg405*reg97; T reg574=reg193*reg142;
    T reg575=reg196*reg97; T reg576=reg193*reg161; T reg577=reg447+reg448; T reg578=reg450+reg452; T reg579=reg81*reg83;
    T reg580=reg217*reg114; reg364=reg363-reg364; T reg581=reg210*reg114; T reg582=reg161*reg83; T reg583=reg81*reg172;
    T reg584=reg83*reg158; T reg585=reg129*reg217; reg428=reg427+reg428; T reg586=reg129*reg210; T reg587=reg148*reg83;
    T reg588=reg172*reg158; T reg589=reg129*reg204; reg432=reg431+reg432; T reg590=reg196*reg129; T reg591=reg148*reg172;
    reg437=reg262+reg437; T reg592=reg127*reg195; T reg593=reg176*reg158; T reg594=reg127*reg375; T reg595=reg149*reg176;
    reg406=reg255+reg406; T reg596=reg127*reg217; T reg597=reg171*reg158; T reg598=reg127*reg357; T reg599=reg149*reg171;
    reg410=reg427+reg410; reg427=reg127*reg204; T reg600=reg188*reg158; T reg601=reg127*reg316; T reg602=reg149*reg188;
    reg415=reg431+reg415; reg431=reg193*reg156; reg382=reg384+reg382; T reg603=reg121*reg210; T reg604=reg83*reg156;
    T reg605=reg152*reg172; T reg606=reg121*reg204; reg390=reg394+reg390; T reg607=reg196*reg121; T reg608=reg156*reg172;
    reg343=reg384+reg343; reg384=reg204*reg128; T reg609=reg152*reg188; T reg610=reg128*reg316; T reg611=reg154*reg188;
    reg335=reg394+reg335; reg361=reg332+reg361; reg394=reg162*reg188; T reg612=reg193*reg168; T reg613=reg405*reg143;
    T reg614=reg196*reg143; T reg615=reg193*reg162; reg201=reg451+reg201; T reg616=reg196*reg137; T reg617=reg172*reg162;
    reg404=reg451+reg404; reg451=reg204*reg114; reg341=reg340-reg341; T reg618=reg196*reg114; T reg619=reg161*reg172;
    reg345=reg447+reg345; reg447=reg122*reg217; T reg620=reg81*reg171; T reg621=reg122*reg357; T reg622=reg171*reg142;
    reg386=reg363+reg386; reg363=reg122*reg204; T reg623=reg81*reg188; T reg624=reg122*reg316; T reg625=reg188*reg142;
    reg397=reg340+reg397; reg401=reg400+reg401; reg340=reg156*reg171; T reg626=reg154*reg182; T reg627=reg120*reg286;
    T reg628=reg120*reg210; T reg629=reg156*reg182; reg376=reg374+reg376; T reg630=reg156*reg188; T reg631=reg193*reg154;
    T reg632=reg405*reg120; T reg633=reg196*reg120; T reg634=reg145*reg286; reg259=reg248+reg259; reg256=reg257-reg256;
    T reg635=reg157*reg188; T reg636=reg193*reg151; reg260=reg260+reg263; reg272=reg270+reg272; T reg637=reg126*reg207;
    T reg638=reg190*reg159; reg239=reg239-reg247; T reg639=reg126*reg215; T reg640=reg190*reg157; T reg641=reg126*reg195;
    T reg642=reg159*reg186; T reg643=reg313+reg232; T reg644=reg126*reg209; T reg645=reg157*reg186; T reg646=reg126*reg217;
    T reg647=reg159*reg83; reg317=reg317-reg318; T reg648=reg126*reg210; T reg649=reg157*reg83; T reg650=reg126*reg204;
    T reg651=reg159*reg172; reg330=reg330-reg279; T reg652=reg164*reg171; T reg653=reg140*reg357; T reg654=reg167*reg171;
    reg352=reg310+reg352; reg310=reg204*reg140; T reg655=reg164*reg188; T reg656=reg140*reg316; T reg657=reg167*reg188;
    reg373=reg243+reg373; reg243=reg371+reg367; T reg658=reg157*reg194; reg446=reg449+reg446; T reg659=reg224*reg145;
    T reg660=reg157*reg216; reg457=reg442-reg457; T reg661=reg183*reg157; T reg662=reg151*reg173; T reg663=reg145*reg418;
    reg429=reg430+reg429; reg313=reg205+reg313; T reg664=reg151*reg160; T reg665=reg145*reg213; reg296=reg290+reg296;
    reg283=reg297-reg283; T reg666=reg157*reg171; T reg667=reg151*reg182; T reg668=reg148*reg176; T reg669=reg149*reg160;
    T reg670=reg131*reg213; T reg671=reg131*reg209; T reg672=reg148*reg160; reg244=reg245+reg244; T reg673=reg148*reg171;
    T reg674=reg149*reg182; T reg675=reg131*reg286; T reg676=reg131*reg210; T reg677=reg148*reg182; reg274=reg275+reg274;
    T reg678=reg148*reg188; T reg679=reg193*reg149; T reg680=reg405*reg131; T reg681=reg196*reg131; T reg682=reg193*reg148;
    reg261=reg262+reg261; reg262=reg129*reg215; T reg683=reg190*reg148; T reg684=reg158*reg186; T reg685=reg129*reg195;
    reg255=reg255-reg254; T reg686=reg129*reg209; T reg687=reg148*reg186; T reg688=reg196*reg126; T reg689=reg157*reg172;
    T reg690=reg263+reg285; reg295=reg288+reg295; reg288=reg183*reg151; T reg691=reg147*reg312; reg302=reg247+reg302;
    reg305=reg304+reg305; reg247=reg151*reg176; reg304=reg147*reg375; reg197=reg198+reg197; reg291=reg292+reg291;
    reg292=reg151*reg171; T reg692=reg147*reg357; reg284=reg318+reg284; reg327=reg329+reg327; reg318=reg151*reg188;
    reg329=reg147*reg316; reg319=reg279+reg319; reg314=reg315+reg314; reg279=reg148*reg183; T reg693=reg149*reg173;
    T reg694=reg131*reg418; T reg695=reg131*reg215; T reg696=reg148*reg173; reg242=reg242-reg237; T reg697=reg178*reg194;
    T reg698=reg207*reg138; T reg699=reg83*reg180; T reg700=reg370*reg134; T reg701=reg286*reg134; T reg702=reg178*reg188;
    reg441=reg440+reg441; T reg703=reg210*reg138; T reg704=reg191*reg163; T reg705=reg182*reg163; reg362=reg267+reg362;
    T reg706=reg176*reg180; T reg707=reg166*reg216; T reg708=reg218*reg134; reg269=reg267+reg269; reg267=reg178*reg182;
    T reg709=reg210*reg134; T reg710=reg399*reg134; T reg711=reg191*reg180; T reg712=reg119*reg210; T reg713=reg182*reg180;
    T reg714=reg119*reg218; reg250=reg250+reg271; T reg715=reg119*reg286; T reg716=reg166*reg182; T reg717=reg178*reg174;
    reg339=reg334+reg339; reg334=reg196*reg134; T reg718=reg264*reg134; reg249=reg246+reg249; T reg719=reg155*reg187;
    T reg720=reg155*reg188; T reg721=reg174*reg163; T reg722=reg160*reg163; T reg723=reg381*reg138; T reg724=reg193*reg178;
    T reg725=reg196*reg119; T reg726=reg213*reg134; T reg727=reg204*reg141; T reg728=reg204*reg138; T reg729=reg253*reg134;
    T reg730=reg325-reg324; reg336=reg377+reg336; T reg731=reg225*reg180; T reg732=reg174*reg180; T reg733=reg405*reg119;
    T reg734=reg155*reg172; T reg735=reg155*reg190; T reg736=reg193*reg166; T reg737=reg171*reg180; T reg738=reg134*reg215;
    T reg739=reg180*reg173; T reg740=reg215*reg138; reg278=reg238+reg278; T reg741=reg344*reg134; T reg742=reg178*reg183;
    T reg743=reg424-reg423; T reg744=reg178*reg176; reg346=reg346-reg369; T reg745=reg155*reg171; T reg746=reg192*reg180;
    reg425=reg425-reg422; T reg747=reg141*reg375; T reg748=reg176*reg163; T reg749=reg190*reg180; T reg750=reg217*reg141;
    T reg751=reg178*reg173; T reg752=reg119*reg215; T reg753=reg216*reg163; T reg754=reg195*reg138; T reg755=reg366+reg365;
    T reg756=reg155*reg186; reg333=reg424+reg333; reg424=reg166*reg173; T reg757=reg119*reg418; T reg758=reg188*reg180;
    reg388=reg388+reg387; reg435=reg436+reg435; T reg759=reg217*reg138; T reg760=reg155*reg83; T reg761=reg234*reg180;
    T reg762=reg171*reg163; T reg763=reg178*reg171; reg408=reg407+reg408; T reg764=reg141*reg357; T reg765=reg183*reg180;
    T reg766=reg194*reg180; T reg767=reg134*reg418; T reg768=reg173*reg163; T reg769=reg252+reg251; T reg770=reg180*reg186;
    T reg771=reg178*reg160; T reg772=reg119*reg209; T reg773=reg349*reg134; T reg774=reg192*reg163; T reg775=reg453-reg351;
    reg359=reg359+reg356; T reg776=reg209*reg138; T reg777=reg119*reg213; T reg778=reg166*reg160; T reg779=reg178*reg221;
    T reg780=reg225*reg163; T reg781=reg207*reg141; T reg782=reg294+reg293; T reg783=reg381*reg141; T reg784=reg155*reg183;
    T reg785=reg344*reg138; T reg786=reg321*reg141; T reg787=reg155*reg221; T reg788=reg195*reg141; T reg789=reg185*reg180;
    T reg790=reg165*reg190; T reg791=reg79*reg207; reg258=reg246+reg258; reg246=reg178*reg187; T reg792=reg79*reg253;
    reg412=reg412-reg413; T reg793=reg187*reg180; T reg794=reg312*reg141; T reg795=reg225*reg155; T reg796=reg160*reg180;
    T reg797=reg399*reg119; T reg798=reg178*reg191; T reg799=reg282*reg141; T reg800=reg79*reg224; T reg801=reg178*reg225;
    T reg802=reg178*reg175; T reg803=reg193*reg180; T reg804=reg194*reg163; T reg805=reg79*reg210; reg276=reg273+reg276;
    reg389=reg389-reg372; reg337=reg331+reg337; reg454=reg454+reg391; reg331=reg202*reg138; reg360=reg358+reg360;
    T reg806=reg413+reg326; reg458=reg378+reg458; reg460=reg460+reg459; reg280=reg328+reg280; T reg807=reg79*reg202;
    T reg808=reg165*reg175; T reg809=reg141*reg316; reg307=reg358+reg307; reg393=reg391+reg393; reg358=reg253*reg138;
    reg391=reg370*reg119; T reg810=reg155*reg176; reg463=reg462+reg463; reg462=reg224*reg138; T reg811=reg172*reg180;
    T reg812=reg177*reg178; T reg813=reg175*reg180; reg196=reg196*reg138; reg392=reg392+reg277; T reg814=reg399*reg79;
    T reg815=reg301*reg141; T reg816=reg399*reg138; T reg817=reg119*reg253; T reg818=reg221*reg180; T reg819=reg177*reg180;
    T reg820=reg221*reg163; T reg821=reg166*reg191; T reg822=reg177*reg155; T reg823=reg183*reg163; reg368=reg402+reg368;
    reg193=reg193*reg163; reg402=reg347*reg141; reg299=reg378+reg299; reg378=reg347*reg138; T reg824=reg166*reg174;
    reg306=reg436+reg306; reg405=reg405*reg134; reg436=reg155*reg175; T reg825=reg119*reg264; T reg826=reg165*reg187;
    T reg827=reg188*reg163; T reg828=reg209*reg134; T reg829=reg381*reg79; reg415=reg275+reg415; reg587=reg586+reg587;
    reg589=reg588+reg589; reg537=reg536+reg537; reg350=reg350-reg426; reg654=reg653+reg654; reg309=reg555+reg309;
    reg652=reg468+reg652; reg749=reg740+reg749; reg602=reg601+reg602; reg745=reg750+reg745; reg276=reg276+reg801;
    reg720=reg727+reg720; reg813=reg813-reg462; reg406=reg406-reg237; reg466=reg466-reg470; reg411=reg411-reg475;
    reg597=reg596+reg597; reg595=reg595-reg594; reg275=reg86*reg474; reg469=reg473+reg469; reg593=reg592+reg593;
    reg362=reg459+reg362; reg476=reg465+reg476; reg827=reg809+reg827; reg320=reg456+reg320; reg698=reg735+reg698;
    reg599=reg598+reg599; reg412=reg412-reg766; reg541=reg540+reg541; reg445=reg434+reg445; reg437=reg315+reg437;
    reg258=reg271+reg258; reg762=reg764+reg762; reg472=reg467+reg472; reg591=reg590+reg591; reg410=reg245+reg410;
    reg471=reg471-reg464; reg268=reg560+reg268; reg435=reg435+reg765; reg600=reg427+reg600; reg436=reg436-reg331;
    reg432=reg678+reg432; reg539=reg538+reg539; reg647=reg646-reg647; reg784=reg781+reg784; reg319=reg257-reg319;
    reg644=reg644+reg645; reg795=reg402+reg795; reg245=reg86*reg643; reg823=reg794+reg823; reg314=reg314+reg279;
    reg641=reg641+reg642; reg306=reg356+reg306; reg307=reg387+reg307; reg694=reg693+reg694; reg640=reg639-reg640;
    reg696=reg695+reg696; reg239=reg239-reg661; reg810=reg788+reg810; reg811=reg196+reg811; reg638=reg637-reg638;
    reg242=reg242+reg668; reg196=reg86*reg272; reg392=reg392+reg818; reg669=reg669-reg670; reg260=reg658+reg260;
    reg249=reg249+reg758; reg820=reg815+reg820; reg302=reg442-reg302; reg257=reg86*reg305; reg247=reg247+reg304;
    reg691=reg288-reg691; reg277=reg299+reg277; reg787=reg783+reg787; reg271=reg86*reg295; reg288=reg86*reg197;
    reg371=reg371+reg690; reg299=reg86*reg782; reg315=reg86*reg291; reg689=reg688-reg689; reg692=reg292-reg692;
    reg330=reg330-reg635; reg799=reg799-reg804; reg337=reg337+reg763; reg651=reg650-reg651; reg284=reg297-reg284;
    reg649=reg648-reg649; reg453=reg453-reg806; reg780=reg786+reg780; reg292=reg86*reg327; reg317=reg317-reg666;
    reg329=reg318-reg329; reg758=reg250+reg758; reg261=reg279+reg261; reg663=reg662-reg663; reg765=reg359+reg765;
    reg661=reg457-reg661; reg683=reg262+reg683; reg776=reg776-reg770; reg250=reg659+reg660; reg768=reg767+reg768;
    reg685=reg685-reg684; reg262=reg86*reg446; reg255=reg668+reg255; reg243=reg243+reg658; reg739=reg738+reg739;
    reg743=reg706+reg743; reg686=reg686-reg687; reg373=reg240+reg373; reg585=reg584+reg585; reg657=reg656+reg657;
    reg748=reg748-reg747; reg754=reg754-reg756; reg655=reg310+reg655; reg428=reg673+reg428; reg352=reg265+reg352;
    reg333=reg333-reg369; reg672=reg671+reg672; reg240=reg86*reg348; reg635=reg256-reg635; reg721=reg718+reg721;
    reg728=reg734+reg728; reg673=reg244+reg673; reg244=reg86*reg259; reg732=reg729+reg732; reg675=reg674+reg675;
    reg634=reg667-reg634; reg699=reg703+reg699; reg677=reg676+reg677; reg666=reg283-reg666; reg460=reg460+reg737;
    reg256=reg86*reg296; reg705=reg701+reg705; reg678=reg274+reg678; reg737=reg269+reg737; reg664=reg664+reg665;
    reg680=reg679+reg680; reg265=reg86*reg313; reg713=reg709+reg713; reg682=reg681+reg682; reg759=reg760+reg759;
    reg269=reg86*reg429; reg267=reg712+reg267; reg443=reg397-reg443; reg491=reg490+reg491; reg704=reg700+reg704;
    reg401=reg401+reg340; reg489=reg488+reg489; reg444=reg407+reg444; reg441=reg441+reg702; reg627=reg626+reg627;
    reg487=reg486+reg487; reg336=reg336+reg731; reg629=reg628+reg629; reg485=reg484+reg485; reg733=reg736+reg733;
    reg355=reg355-reg422; reg376=reg376+reg630; reg723=reg719+reg723; reg483=reg483-reg482; reg632=reg631+reg632;
    reg481=reg480+reg481; reg724=reg725+reg724; reg431=reg633+reg431; reg342=reg238+reg342; reg819=reg816+reg819;
    reg479=reg478+reg479; reg341=reg572+reg341; reg549=reg548+reg549; reg425=reg425+reg744; reg547=reg546+reg547;
    reg619=reg619-reg618; reg774=reg773+reg774; reg433=reg433+reg545; reg778=reg778-reg777; reg345=reg417+reg345;
    reg238=reg86*reg544; reg620=reg447+reg620; reg543=reg543-reg542; reg771=reg772+reg771; reg622=reg621-reg622;
    reg497=reg497-reg498; reg388=reg388+reg761; reg763=reg408+reg763; reg439=reg386-reg439; reg496=reg495+reg496;
    reg623=reg363+reg623; reg494=reg493+reg494; reg711=reg710+reg711; reg419=reg419+reg492; reg715=reg716+reg715;
    reg625=reg624-reg625; reg226=reg440+reg226; reg335=reg374+reg335; reg510=reg509+reg510; reg808=reg808-reg807;
    reg761=reg360+reg761; reg508=reg805+reg508; reg361=reg361+reg394; reg389=reg389-reg697; reg334=reg803+reg334;
    reg507=reg636-reg507; reg613=reg612+reg613; reg377=reg454+reg377; reg506=reg505+reg506; reg802=reg802-reg800;
    reg615=reg614+reg615; reg503=reg503-reg504; reg193=reg405+reg193; reg201=reg394+reg201; reg353=reg744+reg353;
    reg791=reg790+reg791; reg502=reg502-reg501; reg617=reg616+reg617; reg500=reg499+reg500; reg463=reg742+reg463;
    reg404=reg332+reg404; reg339=reg801+reg339; reg382=reg340+reg382; reg477=reg520+reg477; reg604=reg603+reg604;
    reg325=reg325-reg519; reg812=reg814+reg812; reg731=reg393+reg731; reg517=reg517-reg518; reg606=reg605+reg606;
    reg274=reg86*reg516; reg829=reg826+reg829; reg390=reg630+reg390; reg398=reg328+reg398; reg378=reg822+reg378;
    reg608=reg607+reg608; reg515=reg514+reg515; reg368=reg779+reg368; reg343=reg400+reg343; reg513=reg512+reg513;
    reg789=reg785+reg789; reg609=reg384+reg609; reg379=reg273+reg379; reg511=reg380+reg511; reg246=reg792+reg246;
    reg611=reg610+reg611; reg383=reg702+reg383; reg714=reg714-reg707; reg298=reg545+reg298; reg562=reg561+reg562;
    reg775=reg775-reg766; reg796=reg828+reg796; reg577=reg308+reg577; reg560=reg241+reg560; reg779=reg280+reg779;
    reg241=reg86*reg769; reg273=reg86*reg578; reg529=reg303+reg529; reg566=reg565+reg566; reg531=reg531-reg530;
    reg559=reg558+reg559; reg580=reg579-reg580; reg557=reg556+reg557; reg742=reg278+reg742; reg278=reg86*reg755;
    reg722=reg722-reg726; reg717=reg817+reg717; reg289=reg289-reg498; reg523=reg523-reg524; reg572=reg203+reg572;
    reg571=reg570+reg571; reg522=reg521+reg522; reg730=reg730-reg697; reg526=reg526-reg525; reg346=reg706+reg346;
    reg569=reg568-reg569; reg574=reg573-reg574; reg311=reg492+reg311; reg825=reg824+reg825; reg528=reg527+reg528;
    reg576=reg575+reg576; reg564=reg563+reg564; reg461=reg461+reg567; reg421=reg421+reg550; reg554=reg553+reg554;
    reg535=reg534+reg535; reg818=reg458+reg818; reg323=reg550+reg323; reg532=reg532-reg533; reg708=reg708-reg753;
    reg793=reg358+reg793; reg757=reg424+reg757; reg582=reg582-reg581; reg751=reg752+reg751; reg551=reg551-reg552;
    reg364=reg567+reg364; reg798=reg797+reg798; reg203=reg86*reg455; reg391=reg821+reg391; reg308=reg416+reg308;
    reg451=reg583-reg451; reg746=reg741+reg746; reg555=reg266+reg555; reg602=reg86*reg602; reg617=reg86*reg617;
    reg343=reg86*reg343; reg789=reg86*reg789; reg319=reg86*reg319; reg201=reg86*reg201; reg247=reg86*reg247;
    reg569=reg86*reg569; reg787=reg86*reg787; reg266=ponderation*reg257; reg608=reg86*reg608; reg406=reg86*reg406;
    reg314=reg86*reg314; reg307=reg86*reg307; reg722=reg86*reg722; reg793=reg86*reg793; reg390=reg86*reg390;
    reg415=reg86*reg415; reg571=reg86*reg571; reg404=reg86*reg404; reg694=reg86*reg694; reg378=reg86*reg378;
    reg279=ponderation*reg315; reg613=reg86*reg613; reg337=reg86*reg337; reg436=reg86*reg436; reg280=ponderation*reg203;
    reg410=reg86*reg410; reg361=reg86*reg361; reg692=reg86*reg692; reg600=reg86*reg600; reg377=reg86*reg377;
    reg566=reg86*reg566; reg334=reg86*reg334; reg284=reg86*reg284; reg780=reg86*reg780; reg283=ponderation*reg288;
    reg615=reg86*reg615; reg796=reg86*reg796; reg335=reg86*reg335; reg193=reg86*reg193; reg599=reg86*reg599;
    reg297=ponderation*reg292; reg761=reg86*reg761; reg818=reg86*reg818; reg611=reg86*reg611; reg308=reg86*reg308;
    reg412=reg86*reg412; reg597=reg86*reg597; reg609=reg86*reg609; reg329=reg86*reg329; reg795=reg86*reg795;
    reg461=reg86*reg461; reg261=reg86*reg261; reg622=reg86*reg622; reg364=reg86*reg364; reg749=reg86*reg749;
    reg587=reg86*reg587; reg439=reg86*reg439; reg623=reg86*reg623; reg682=reg86*reg682; reg711=reg86*reg711;
    reg580=reg86*reg580; reg759=reg86*reg759; reg680=reg86*reg680; reg625=reg86*reg625; reg303=ponderation*reg278;
    reg589=reg86*reg589; reg443=reg86*reg443; reg678=reg86*reg678; reg310=ponderation*reg273; reg704=reg86*reg704;
    reg686=reg86*reg686; reg746=reg86*reg746; reg754=reg86*reg754; reg341=reg86*reg341; reg451=reg86*reg451;
    reg255=reg86*reg255; reg619=reg86*reg619; reg774=reg86*reg774; reg743=reg86*reg743; reg585=reg86*reg585;
    reg685=reg86*reg685; reg582=reg86*reg582; reg345=reg86*reg345; reg620=reg86*reg620; reg708=reg86*reg708;
    reg683=reg86*reg683; reg388=reg86*reg388; reg428=reg86*reg428; reg776=reg86*reg776; reg437=reg86*reg437;
    reg574=reg86*reg574; reg632=reg86*reg632; reg431=reg86*reg431; reg819=reg86*reg819; reg669=reg86*reg669;
    reg249=reg86*reg249; reg593=reg86*reg593; reg382=reg86*reg382; reg242=reg86*reg242; reg346=reg86*reg346;
    reg572=reg86*reg572; reg604=reg86*reg604; reg731=reg86*reg731; reg811=reg86*reg811; reg595=reg86*reg595;
    reg813=reg86*reg813; reg696=reg86*reg696; reg606=reg86*reg606; reg435=reg86*reg435; reg737=reg86*reg737;
    reg401=reg86*reg401; reg432=reg86*reg432; reg677=reg86*reg677; reg577=reg86*reg577; reg627=reg86*reg627;
    reg336=reg86*reg336; reg699=reg86*reg699; reg675=reg86*reg675; reg629=reg86*reg629; reg775=reg86*reg775;
    reg576=reg86*reg576; reg673=reg86*reg673; reg723=reg86*reg723; reg591=reg86*reg591; reg376=reg86*reg376;
    reg698=reg86*reg698; reg728=reg86*reg728; reg672=reg86*reg672; reg339=reg86*reg339; reg479=reg86*reg479;
    reg661=reg86*reg661; reg765=reg86*reg765; reg798=reg86*reg798; reg323=reg86*reg323; reg250=reg86*reg250;
    reg768=reg86*reg768; reg342=reg86*reg342; reg318=ponderation*reg262; reg433=reg86*reg433; reg724=reg86*reg724;
    reg243=reg86*reg243; reg481=reg86*reg481; reg739=reg86*reg739; reg532=reg86*reg532; reg483=reg86*reg483;
    reg373=reg86*reg373; reg778=reg86*reg778; reg391=reg86*reg391; reg657=reg86*reg657; reg748=reg86*reg748;
    reg733=reg86*reg733; reg398=reg86*reg398; reg328=ponderation*reg274; reg666=reg86*reg666; reg460=reg86*reg460;
    reg298=reg86*reg298; reg549=reg86*reg549; reg779=reg86*reg779; reg332=ponderation*reg256; reg705=reg86*reg705;
    reg812=reg86*reg812; reg517=reg86*reg517; reg664=reg86*reg664; reg340=ponderation*reg265; reg325=reg86*reg325;
    reg529=reg86*reg529; reg713=reg86*reg713; reg547=reg86*reg547; reg531=reg86*reg531; reg356=ponderation*reg269;
    reg758=reg86*reg758; reg477=reg86*reg477; reg663=reg86*reg663; reg425=reg86*reg425; reg267=reg86*reg267;
    reg445=reg86*reg445; reg771=reg86*reg771; reg491=reg86*reg491; reg476=reg86*reg476; reg362=reg86*reg362;
    reg497=reg86*reg497; reg226=reg86*reg226; reg469=reg86*reg469; reg258=reg86*reg258; reg715=reg86*reg715;
    reg411=reg86*reg411; reg419=reg86*reg419; reg466=reg86*reg466; reg720=reg86*reg720; reg268=reg86*reg268;
    reg494=reg86*reg494; reg358=ponderation*reg275; reg541=reg86*reg541; reg496=reg86*reg496; reg763=reg86*reg763;
    reg320=reg86*reg320; reg827=reg86*reg827; reg535=reg86*reg535; reg655=reg86*reg655; reg355=reg86*reg355;
    reg352=reg86*reg352; reg359=ponderation*reg238; reg485=reg86*reg485; reg333=reg86*reg333; reg309=reg86*reg309;
    reg654=reg86*reg654; reg487=reg86*reg487; reg652=reg86*reg652; reg543=reg86*reg543; reg441=reg86*reg441;
    reg350=reg86*reg350; reg745=reg86*reg745; reg444=reg86*reg444; reg276=reg86*reg276; reg537=reg86*reg537;
    reg471=reg86*reg471; reg489=reg86*reg489; reg472=reg86*reg472; reg762=reg86*reg762; reg539=reg86*reg539;
    reg651=reg86*reg651; reg503=reg86*reg503; reg564=reg86*reg564; reg506=reg86*reg506; reg555=reg86*reg555;
    reg649=reg86*reg649; reg453=reg86*reg453; reg317=reg86*reg317; reg507=reg86*reg507; reg730=reg86*reg730;
    reg647=reg86*reg647; reg784=reg86*reg784; reg311=reg86*reg311; reg389=reg86*reg389; reg644=reg86*reg644;
    reg508=reg86*reg508; reg522=reg86*reg522; reg360=ponderation*reg245; reg823=reg86*reg823; reg808=reg86*reg808;
    reg554=reg86*reg554; reg510=reg86*reg510; reg757=reg86*reg757; reg559=reg86*reg559; reg302=reg86*reg302;
    reg820=reg86*reg820; reg463=reg86*reg463; reg500=reg86*reg500; reg363=ponderation*reg241; reg691=reg86*reg691;
    reg560=reg86*reg560; reg374=ponderation*reg271; reg277=reg86*reg277; reg791=reg86*reg791; reg371=reg86*reg371;
    reg502=reg86*reg502; reg557=reg86*reg557; reg380=ponderation*reg299; reg714=reg86*reg714; reg689=reg86*reg689;
    reg353=reg86*reg353; reg562=reg86*reg562; reg742=reg86*reg742; reg330=reg86*reg330; reg799=reg86*reg799;
    reg802=reg86*reg802; reg289=reg86*reg289; reg384=ponderation*reg196; reg379=reg86*reg379; reg551=reg86*reg551;
    reg392=reg86*reg392; reg260=reg86*reg260; reg368=reg86*reg368; reg513=reg86*reg513; reg386=ponderation*reg240;
    reg421=reg86*reg421; reg526=reg86*reg526; reg635=reg86*reg635; reg721=reg86*reg721; reg515=reg86*reg515;
    reg825=reg86*reg825; reg387=ponderation*reg244; reg528=reg86*reg528; reg732=reg86*reg732; reg829=reg86*reg829;
    reg751=reg86*reg751; reg634=reg86*reg634; reg641=reg86*reg641; reg640=reg86*reg640; reg306=reg86*reg306;
    reg523=reg86*reg523; reg383=reg86*reg383; reg717=reg86*reg717; reg239=reg86*reg239; reg246=reg86*reg246;
    reg638=reg86*reg638; reg511=reg86*reg511; reg810=reg86*reg810; matrix(indices[5]+1,indices[7]+2)+=ponderation*reg619; matrix(indices[5]+2,indices[6]+1)+=ponderation*reg622;
    matrix(indices[1]+0,indices[5]+2)+=ponderation*reg771; matrix(indices[2]+0,indices[6]+1)+=ponderation*reg557; matrix(indices[5]+1,indices[6]+1)+=ponderation*reg364; matrix(indices[5]+1,indices[6]+2)+=ponderation*reg582; matrix(indices[0]+0,indices[3]+2)+=-reg303;
    matrix(indices[2]+0,indices[3]+2)+=-reg359; matrix(indices[2]+0,indices[4]+2)+=ponderation*reg549; matrix(indices[2]+0,indices[2]+2)+=ponderation*reg496; matrix(indices[2]+0,indices[4]+0)+=ponderation*reg433; matrix(indices[0]+0,indices[3]+1)+=ponderation*reg708;
    matrix(indices[5]+1,indices[5]+2)+=-reg310; matrix(indices[2]+0,indices[3]+1)+=ponderation*reg543; matrix(indices[1]+0,indices[4]+2)+=ponderation*reg751; matrix(indices[1]+0,indices[4]+1)+=ponderation*reg757; matrix(indices[0]+0,indices[0]+1)+=ponderation*reg774;
    matrix(indices[0]+0,indices[0]+2)+=ponderation*reg746; matrix(indices[2]+0,indices[6]+0)+=ponderation*reg555; matrix(indices[1]+0,indices[5]+0)+=ponderation*reg425; matrix(indices[2]+0,indices[5]+0)+=ponderation*reg421; matrix(indices[0]+0,indices[0]+0)+=ponderation*reg388;
    matrix(indices[5]+1,indices[6]+0)+=ponderation*reg580; matrix(indices[5]+2,indices[6]+0)+=ponderation*reg620; matrix(indices[5]+2,indices[5]+2)+=ponderation*reg345; matrix(indices[1]+0,indices[4]+0)+=ponderation*reg742; matrix(indices[2]+0,indices[3]+0)+=ponderation*reg497;
    matrix(indices[5]+1,indices[7]+1)+=ponderation*reg341; matrix(indices[2]+0,indices[4]+1)+=ponderation*reg547; matrix(indices[2]+0,indices[5]+2)+=ponderation*reg554; matrix(indices[1]+0,indices[5]+1)+=ponderation*reg778; matrix(indices[5]+1,indices[7]+0)+=ponderation*reg451;
    matrix(indices[2]+0,indices[5]+1)+=ponderation*reg551; matrix(indices[6]+2,indices[7]+2)+=ponderation*reg335; matrix(indices[1]+1,indices[7]+0)+=ponderation*reg510; matrix(indices[1]+1,indices[2]+2)+=ponderation*reg246; matrix(indices[0]+1,indices[0]+1)+=ponderation*reg761;
    matrix(indices[6]+2,indices[7]+1)+=ponderation*reg611; matrix(indices[1]+1,indices[7]+1)+=ponderation*reg383; matrix(indices[6]+2,indices[7]+0)+=ponderation*reg609; matrix(indices[1]+1,indices[7]+2)+=ponderation*reg511; matrix(indices[1]+2,indices[1]+2)+=ponderation*reg379;
    matrix(indices[1]+1,indices[2]+1)+=ponderation*reg368; matrix(indices[6]+2,indices[6]+2)+=ponderation*reg343; matrix(indices[0]+1,indices[0]+2)+=ponderation*reg789; matrix(indices[1]+2,indices[2]+0)+=ponderation*reg513; matrix(indices[6]+1,indices[7]+2)+=ponderation*reg608;
    matrix(indices[1]+2,indices[2]+1)+=ponderation*reg515; matrix(indices[1]+1,indices[2]+0)+=ponderation*reg829; matrix(indices[6]+1,indices[7]+1)+=ponderation*reg390; matrix(indices[1]+2,indices[2]+2)+=ponderation*reg398; matrix(indices[0]+1,indices[1]+0)+=ponderation*reg378;
    matrix(indices[1]+2,indices[3]+0)+=-reg328; matrix(indices[6]+1,indices[7]+0)+=ponderation*reg606; matrix(indices[7]+2,indices[7]+2)+=ponderation*reg404; matrix(indices[1]+1,indices[4]+1)+=ponderation*reg463; matrix(indices[0]+0,indices[7]+0)+=ponderation*reg758;
    matrix(indices[7]+1,indices[7]+2)+=ponderation*reg617; matrix(indices[1]+1,indices[4]+2)+=ponderation*reg500; matrix(indices[1]+1,indices[4]+0)+=ponderation*reg791; matrix(indices[7]+1,indices[7]+1)+=ponderation*reg201; matrix(indices[1]+1,indices[5]+0)+=ponderation*reg502;
    matrix(indices[1]+1,indices[5]+1)+=ponderation*reg353; matrix(indices[1]+1,indices[3]+2)+=ponderation*reg802; matrix(indices[0]+0,indices[7]+1)+=ponderation*reg193; matrix(indices[7]+0,indices[7]+2)+=ponderation*reg615; matrix(indices[1]+1,indices[5]+2)+=ponderation*reg503;
    matrix(indices[7]+0,indices[7]+1)+=ponderation*reg613; matrix(indices[1]+1,indices[6]+0)+=ponderation*reg506; matrix(indices[1]+1,indices[3]+1)+=ponderation*reg389; matrix(indices[3]+0,indices[7]+1)+=ponderation*reg507; matrix(indices[7]+0,indices[7]+0)+=ponderation*reg361;
    matrix(indices[1]+1,indices[3]+0)+=ponderation*reg808; matrix(indices[0]+0,indices[7]+2)+=ponderation*reg334; matrix(indices[1]+1,indices[6]+2)+=ponderation*reg508; matrix(indices[1]+2,indices[6]+0)+=ponderation*reg485; matrix(indices[1]+0,indices[7]+0)+=ponderation*reg441;
    matrix(indices[6]+0,indices[6]+1)+=ponderation*reg627; matrix(indices[1]+2,indices[6]+1)+=ponderation*reg487; matrix(indices[0]+0,indices[1]+0)+=ponderation*reg336; matrix(indices[6]+0,indices[6]+0)+=ponderation*reg401; matrix(indices[1]+2,indices[6]+2)+=ponderation*reg444;
    matrix(indices[1]+2,indices[7]+0)+=ponderation*reg489; matrix(indices[1]+0,indices[6]+2)+=ponderation*reg267; matrix(indices[0]+0,indices[1]+1)+=ponderation*reg704; matrix(indices[5]+2,indices[7]+2)+=ponderation*reg443; matrix(indices[1]+2,indices[7]+1)+=ponderation*reg491;
    matrix(indices[1]+2,indices[7]+2)+=ponderation*reg226; matrix(indices[5]+2,indices[7]+1)+=ponderation*reg625; matrix(indices[1]+0,indices[6]+1)+=ponderation*reg715; matrix(indices[2]+0,indices[2]+0)+=ponderation*reg419; matrix(indices[5]+2,indices[7]+0)+=ponderation*reg623;
    matrix(indices[2]+0,indices[2]+1)+=ponderation*reg494; matrix(indices[0]+0,indices[1]+2)+=ponderation*reg711; matrix(indices[1]+0,indices[6]+0)+=ponderation*reg763; matrix(indices[5]+2,indices[6]+2)+=ponderation*reg439; matrix(indices[1]+1,indices[1]+2)+=ponderation*reg812;
    matrix(indices[1]+2,indices[3]+1)+=ponderation*reg517; matrix(indices[6]+1,indices[6]+2)+=ponderation*reg604; matrix(indices[1]+2,indices[3]+2)+=ponderation*reg325; matrix(indices[0]+1,indices[1]+1)+=ponderation*reg731; matrix(indices[1]+1,indices[1]+1)+=ponderation*reg339;
    matrix(indices[6]+1,indices[6]+1)+=ponderation*reg382; matrix(indices[1]+2,indices[4]+0)+=ponderation*reg477; matrix(indices[1]+2,indices[4]+1)+=ponderation*reg479; matrix(indices[6]+0,indices[7]+2)+=ponderation*reg431; matrix(indices[1]+0,indices[7]+2)+=ponderation*reg724;
    matrix(indices[0]+1,indices[1]+2)+=ponderation*reg819; matrix(indices[1]+2,indices[4]+2)+=ponderation*reg342; matrix(indices[6]+0,indices[7]+1)+=ponderation*reg632; matrix(indices[1]+2,indices[5]+0)+=ponderation*reg481; matrix(indices[6]+0,indices[7]+0)+=ponderation*reg376;
    matrix(indices[1]+2,indices[5]+1)+=ponderation*reg483; matrix(indices[1]+0,indices[7]+1)+=ponderation*reg733; matrix(indices[0]+1,indices[2]+0)+=ponderation*reg723; matrix(indices[1]+2,indices[5]+2)+=ponderation*reg355; matrix(indices[6]+0,indices[6]+2)+=ponderation*reg629;
    matrix(indices[4]+0,indices[7]+0)+=ponderation*reg678; matrix(indices[3]+0,indices[5]+1)+=ponderation*reg664; matrix(indices[0]+1,indices[6]+1)+=ponderation*reg737; matrix(indices[3]+0,indices[5]+2)+=-reg332; matrix(indices[0]+0,indices[6]+0)+=ponderation*reg460;
    matrix(indices[4]+0,indices[6]+2)+=ponderation*reg677; matrix(indices[3]+0,indices[6]+0)+=ponderation*reg666; matrix(indices[0]+0,indices[2]+2)+=ponderation*reg732; matrix(indices[4]+0,indices[6]+1)+=ponderation*reg675; matrix(indices[3]+0,indices[6]+1)+=ponderation*reg634;
    matrix(indices[0]+1,indices[6]+2)+=ponderation*reg699; matrix(indices[4]+0,indices[6]+0)+=ponderation*reg673; matrix(indices[3]+0,indices[6]+2)+=-reg387; matrix(indices[0]+0,indices[2]+1)+=ponderation*reg721; matrix(indices[0]+1,indices[7]+0)+=ponderation*reg728;
    matrix(indices[4]+0,indices[5]+2)+=ponderation*reg672; matrix(indices[3]+0,indices[7]+0)+=ponderation*reg635; matrix(indices[3]+0,indices[7]+2)+=-reg386; matrix(indices[0]+0,indices[2]+0)+=ponderation*reg392; matrix(indices[4]+0,indices[5]+1)+=ponderation*reg669;
    matrix(indices[3]+1,indices[3]+1)+=ponderation*reg260; matrix(indices[0]+1,indices[7]+1)+=ponderation*reg249; matrix(indices[4]+1,indices[5]+2)+=ponderation*reg686; matrix(indices[2]+2,indices[7]+2)+=ponderation*reg373; matrix(indices[0]+0,indices[4]+2)+=ponderation*reg739;
    matrix(indices[4]+1,indices[5]+1)+=ponderation*reg255; matrix(indices[3]+0,indices[3]+0)+=ponderation*reg243; matrix(indices[0]+0,indices[4]+1)+=ponderation*reg768; matrix(indices[0]+1,indices[5]+1)+=ponderation*reg743; matrix(indices[4]+1,indices[5]+0)+=ponderation*reg685;
    matrix(indices[3]+0,indices[3]+1)+=-reg318; matrix(indices[3]+0,indices[3]+2)+=ponderation*reg250; matrix(indices[4]+1,indices[4]+2)+=ponderation*reg683; matrix(indices[0]+0,indices[4]+0)+=ponderation*reg765; matrix(indices[0]+1,indices[5]+2)+=ponderation*reg776;
    matrix(indices[4]+1,indices[4]+1)+=ponderation*reg261; matrix(indices[3]+0,indices[4]+0)+=ponderation*reg661; matrix(indices[3]+0,indices[4]+1)+=ponderation*reg663; matrix(indices[4]+0,indices[7]+2)+=ponderation*reg682; matrix(indices[3]+0,indices[4]+2)+=-reg356;
    matrix(indices[0]+0,indices[6]+2)+=ponderation*reg713; matrix(indices[0]+1,indices[6]+0)+=ponderation*reg759; matrix(indices[4]+0,indices[7]+1)+=ponderation*reg680; matrix(indices[3]+0,indices[5]+0)+=-reg340; matrix(indices[0]+0,indices[6]+1)+=ponderation*reg705;
    matrix(indices[3]+1,indices[6]+1)+=ponderation*reg317; matrix(indices[0]+2,indices[1]+1)+=ponderation*reg780; matrix(indices[3]+2,indices[6]+2)+=ponderation*reg284; matrix(indices[3]+1,indices[6]+2)+=ponderation*reg649; matrix(indices[0]+2,indices[3]+1)+=ponderation*reg799;
    matrix(indices[3]+1,indices[7]+0)+=ponderation*reg651; matrix(indices[3]+2,indices[6]+1)+=ponderation*reg692; matrix(indices[3]+1,indices[7]+1)+=ponderation*reg330; matrix(indices[1]+1,indices[6]+1)+=ponderation*reg337; matrix(indices[3]+2,indices[6]+0)+=-reg279;
    matrix(indices[0]+2,indices[3]+0)+=-reg380; matrix(indices[3]+1,indices[7]+2)+=ponderation*reg689; matrix(indices[0]+2,indices[1]+2)+=ponderation*reg377; matrix(indices[3]+2,indices[5]+2)+=-reg283; matrix(indices[3]+2,indices[3]+2)+=ponderation*reg371;
    matrix(indices[0]+2,indices[2]+2)+=ponderation*reg277; matrix(indices[3]+2,indices[5]+1)+=ponderation*reg247; matrix(indices[3]+2,indices[4]+0)+=-reg374; matrix(indices[3]+2,indices[4]+1)+=ponderation*reg691; matrix(indices[0]+2,indices[2]+0)+=ponderation*reg787;
    matrix(indices[3]+2,indices[5]+0)+=-reg266; matrix(indices[0]+2,indices[2]+1)+=ponderation*reg820; matrix(indices[3]+2,indices[4]+2)+=ponderation*reg302; matrix(indices[4]+0,indices[5]+0)+=ponderation*reg242; matrix(indices[3]+1,indices[3]+2)+=-reg384;
    matrix(indices[0]+2,indices[5]+0)+=ponderation*reg810; matrix(indices[3]+1,indices[4]+0)+=ponderation*reg638; matrix(indices[4]+0,indices[4]+2)+=ponderation*reg696; matrix(indices[3]+1,indices[4]+1)+=ponderation*reg239; matrix(indices[0]+1,indices[7]+2)+=ponderation*reg811;
    matrix(indices[0]+2,indices[4]+2)+=ponderation*reg306; matrix(indices[4]+0,indices[4]+1)+=ponderation*reg694; matrix(indices[3]+1,indices[4]+2)+=ponderation*reg640; matrix(indices[4]+0,indices[4]+0)+=ponderation*reg314; matrix(indices[3]+1,indices[5]+0)+=ponderation*reg641;
    matrix(indices[0]+2,indices[4]+1)+=ponderation*reg823; matrix(indices[0]+2,indices[0]+2)+=ponderation*reg307; matrix(indices[3]+1,indices[5]+1)+=-reg360; matrix(indices[3]+2,indices[7]+2)+=ponderation*reg319; matrix(indices[0]+2,indices[4]+0)+=ponderation*reg784;
    matrix(indices[3]+1,indices[5]+2)+=ponderation*reg644; matrix(indices[0]+2,indices[1]+0)+=ponderation*reg795; matrix(indices[3]+2,indices[7]+1)+=ponderation*reg329; matrix(indices[3]+1,indices[6]+0)+=ponderation*reg647; matrix(indices[0]+2,indices[3]+2)+=ponderation*reg453;
    matrix(indices[3]+2,indices[7]+0)+=-reg297; matrix(indices[5]+0,indices[6]+0)+=ponderation*reg461; matrix(indices[2]+1,indices[4]+0)+=ponderation*reg528; matrix(indices[1]+0,indices[2]+0)+=ponderation*reg779; matrix(indices[2]+1,indices[4]+1)+=ponderation*reg298;
    matrix(indices[0]+0,indices[5]+2)+=ponderation*reg796; matrix(indices[5]+0,indices[5]+2)+=ponderation*reg566; matrix(indices[2]+1,indices[4]+2)+=ponderation*reg529; matrix(indices[2]+1,indices[5]+0)+=ponderation*reg531; matrix(indices[5]+0,indices[5]+1)+=-reg280;
    matrix(indices[1]+0,indices[1]+2)+=ponderation*reg798; matrix(indices[2]+1,indices[5]+1)+=ponderation*reg323; matrix(indices[0]+1,indices[2]+1)+=ponderation*reg818; matrix(indices[5]+0,indices[5]+0)+=ponderation*reg308; matrix(indices[2]+1,indices[5]+2)+=ponderation*reg532;
    matrix(indices[1]+0,indices[1]+1)+=ponderation*reg391; matrix(indices[2]+1,indices[6]+0)+=ponderation*reg535; matrix(indices[4]+2,indices[7]+2)+=ponderation*reg415; matrix(indices[2]+1,indices[6]+1)+=ponderation*reg309; matrix(indices[0]+1,indices[2]+2)+=ponderation*reg793;
    matrix(indices[1]+0,indices[1]+0)+=ponderation*reg276; matrix(indices[4]+2,indices[7]+1)+=ponderation*reg602; matrix(indices[2]+1,indices[6]+2)+=ponderation*reg537; matrix(indices[4]+2,indices[7]+0)+=ponderation*reg600; matrix(indices[2]+0,indices[6]+2)+=ponderation*reg559;
    matrix(indices[1]+0,indices[3]+2)+=-reg363; matrix(indices[5]+1,indices[5]+1)+=ponderation*reg577; matrix(indices[2]+0,indices[7]+0)+=ponderation*reg560; matrix(indices[1]+0,indices[3]+1)+=ponderation*reg714; matrix(indices[0]+0,indices[3]+0)+=ponderation*reg775;
    matrix(indices[5]+0,indices[7]+2)+=ponderation*reg576; matrix(indices[2]+0,indices[7]+1)+=ponderation*reg562; matrix(indices[2]+0,indices[7]+2)+=ponderation*reg564; matrix(indices[1]+0,indices[3]+0)+=ponderation*reg730; matrix(indices[5]+0,indices[7]+1)+=ponderation*reg574;
    matrix(indices[2]+1,indices[2]+1)+=ponderation*reg311; matrix(indices[5]+0,indices[7]+0)+=ponderation*reg572; matrix(indices[2]+1,indices[2]+2)+=ponderation*reg522; matrix(indices[1]+0,indices[2]+2)+=ponderation*reg717; matrix(indices[0]+0,indices[5]+0)+=ponderation*reg346;
    matrix(indices[2]+1,indices[3]+0)+=ponderation*reg523; matrix(indices[5]+0,indices[6]+2)+=ponderation*reg571; matrix(indices[2]+1,indices[3]+1)+=ponderation*reg289; matrix(indices[1]+0,indices[2]+1)+=ponderation*reg825; matrix(indices[0]+0,indices[5]+1)+=ponderation*reg722;
    matrix(indices[5]+0,indices[6]+1)+=ponderation*reg569; matrix(indices[2]+1,indices[3]+2)+=ponderation*reg526; matrix(indices[0]+2,indices[6]+1)+=ponderation*reg762; matrix(indices[2]+2,indices[4]+2)+=ponderation*reg445; matrix(indices[0]+1,indices[4]+0)+=ponderation*reg698;
    matrix(indices[4]+1,indices[7]+2)+=ponderation*reg591; matrix(indices[2]+2,indices[5]+0)+=ponderation*reg472; matrix(indices[4]+1,indices[7]+1)+=ponderation*reg432; matrix(indices[2]+2,indices[5]+1)+=ponderation*reg471; matrix(indices[0]+2,indices[6]+0)+=ponderation*reg745;
    matrix(indices[0]+1,indices[4]+1)+=ponderation*reg435; matrix(indices[4]+1,indices[7]+0)+=ponderation*reg589; matrix(indices[2]+2,indices[5]+2)+=ponderation*reg350; matrix(indices[2]+2,indices[6]+0)+=ponderation*reg652; matrix(indices[0]+2,indices[5]+2)+=ponderation*reg333;
    matrix(indices[4]+1,indices[6]+2)+=ponderation*reg587; matrix(indices[2]+2,indices[6]+1)+=ponderation*reg654; matrix(indices[0]+1,indices[4]+2)+=ponderation*reg749; matrix(indices[4]+1,indices[6]+1)+=ponderation*reg428; matrix(indices[2]+2,indices[6]+2)+=ponderation*reg352;
    matrix(indices[0]+2,indices[5]+1)+=ponderation*reg748; matrix(indices[2]+2,indices[7]+0)+=ponderation*reg655; matrix(indices[4]+1,indices[6]+0)+=ponderation*reg585; matrix(indices[2]+2,indices[7]+1)+=ponderation*reg657; matrix(indices[0]+1,indices[5]+0)+=ponderation*reg754;
    matrix(indices[2]+1,indices[7]+0)+=ponderation*reg539; matrix(indices[0]+2,indices[7]+2)+=ponderation*reg258; matrix(indices[0]+1,indices[3]+0)+=ponderation*reg436; matrix(indices[4]+2,indices[6]+2)+=ponderation*reg410; matrix(indices[2]+1,indices[7]+1)+=ponderation*reg268;
    matrix(indices[2]+1,indices[7]+2)+=ponderation*reg541; matrix(indices[4]+2,indices[6]+1)+=ponderation*reg599; matrix(indices[0]+2,indices[7]+1)+=ponderation*reg827; matrix(indices[0]+1,indices[3]+1)+=ponderation*reg412; matrix(indices[4]+2,indices[6]+0)+=ponderation*reg597;
    matrix(indices[2]+2,indices[2]+2)+=ponderation*reg320; matrix(indices[2]+2,indices[3]+0)+=-reg358; matrix(indices[0]+2,indices[7]+0)+=ponderation*reg720; matrix(indices[4]+2,indices[5]+2)+=ponderation*reg406; matrix(indices[2]+2,indices[3]+1)+=ponderation*reg466;
    matrix(indices[4]+2,indices[5]+1)+=ponderation*reg595; matrix(indices[2]+2,indices[3]+2)+=ponderation*reg411; matrix(indices[0]+2,indices[6]+2)+=ponderation*reg362; matrix(indices[0]+1,indices[3]+2)+=ponderation*reg813; matrix(indices[4]+2,indices[5]+0)+=ponderation*reg593;
    matrix(indices[2]+2,indices[4]+0)+=ponderation*reg469; matrix(indices[2]+2,indices[4]+1)+=ponderation*reg476; matrix(indices[4]+2,indices[4]+2)+=ponderation*reg437;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
    T reg0=1-var_inter[0]; T reg1=var_inter[1]-0.21132486540518707896; T reg2=var_inter[0]-0.21132486540518707896; T reg3=reg0-0.21132486540518707896; T reg4=1-var_inter[1];
    T reg5=var_inter[2]-0.21132486540518707896; T reg6=1-var_inter[2]; reg1=reg1/0.57735026918962573106; reg3=reg3/0.57735026918962573106; reg2=reg2/0.57735026918962573106;
    T reg7=reg4-0.21132486540518707896; reg5=reg5/0.57735026918962573106; reg2=1-reg2; T reg8=reg0*reg4; reg1=1-reg1;
    T reg9=reg4*var_inter[0]; reg7=reg7/0.57735026918962573106; T reg10=reg4*reg6; T reg11=reg0*reg6; reg3=1-reg3;
    T reg12=var_inter[0]*reg6; T reg13=reg2*reg1; T reg14=elem.pos(1)[2]*reg12; reg5=1-reg5; T reg15=elem.pos(0)[2]*reg11;
    T reg16=var_inter[1]*reg6; T reg17=reg9*elem.pos(1)[1]; T reg18=elem.pos(0)[1]*reg8; reg1=reg1*reg3; reg7=1-reg7;
    T reg19=elem.pos(1)[1]*reg12; T reg20=elem.pos(0)[1]*reg11; T reg21=elem.pos(1)[2]*reg10; T reg22=elem.pos(0)[2]*reg10; T reg23=reg9*elem.pos(1)[2];
    T reg24=reg8*elem.pos(0)[2]; T reg25=var_inter[1]*var_inter[0]; T reg26=elem.pos(0)[1]*reg10; T reg27=elem.pos(1)[1]*reg10; T reg28=elem.pos(2)[1]*reg12;
    T reg29=reg15+reg14; T reg30=elem.pos(2)[2]*reg12; T reg31=reg19+reg20; T reg32=elem.pos(2)[2]*reg16; T reg33=reg6-0.21132486540518707896;
    reg3=reg3*reg7; reg21=reg21-reg22; T reg34=reg5*reg1; reg27=reg27-reg26; T reg35=elem.pos(2)[1]*reg16;
    T reg36=var_inter[1]*reg0; T reg37=reg13*reg5; T reg38=reg17+reg18; T reg39=elem.pos(2)[1]*reg25; T reg40=elem.pos(2)[2]*reg25;
    T reg41=reg24+reg23; T reg42=elem.pos(3)[2]*reg11; reg30=reg30-reg29; T reg43=elem.pos(3)[2]*reg16; T reg44=elem.pos(3)[1]*reg11;
    reg28=reg28-reg31; T reg45=elem.pos(0)[0]*reg10; reg35=reg27+reg35; reg32=reg21+reg32; reg21=elem.pos(1)[0]*reg10;
    reg27=var_inter[2]*reg4; T reg46=elem.pos(3)[1]*reg16; T reg47=var_inter[2]*reg0; T reg48=elem.pos(0)[0]*reg11; T reg49=elem.pos(1)[0]*reg12;
    T reg50=reg5*reg3; reg7=reg2*reg7; reg2=reg34*elem.proute[1](1,1); T reg51=reg37*elem.proute[0](1,1); reg33=reg33/0.57735026918962573106;
    T reg52=reg38+reg39; T reg53=elem.pos(3)[2]*reg36; T reg54=elem.pos(3)[1]*reg36; T reg55=reg41+reg40; T reg56=elem.pos(2)[0]*reg12;
    T reg57=reg49+reg48; T reg58=reg52+reg54; T reg59=elem.pos(4)[1]*reg8; reg35=reg35-reg46; T reg60=elem.pos(4)[1]*reg27;
    T reg61=reg55+reg53; T reg62=elem.pos(4)[2]*reg27; T reg63=elem.pos(4)[2]*reg8; reg32=reg32-reg43; T reg64=reg50*elem.proute[2](1,1);
    T reg65=elem.pos(4)[2]*reg47; reg42=reg30+reg42; reg2=reg51+reg2; reg30=reg9*elem.pos(1)[0]; reg51=elem.pos(4)[1]*reg47;
    reg44=reg28+reg44; reg28=elem.pos(0)[0]*reg8; reg21=reg21-reg45; T reg66=elem.pos(2)[0]*reg16; T reg67=var_inter[2]*var_inter[0];
    reg5=reg5*reg7; reg33=1-reg33; T reg68=elem.pos(3)[0]*reg11; T reg69=elem.pos(5)[2]*reg9; reg63=reg63-reg61;
    reg56=reg56-reg57; reg42=reg42-reg65; T reg70=elem.pos(5)[2]*reg67; reg32=reg32-reg62; T reg71=elem.pos(5)[2]*reg27;
    T reg72=elem.pos(5)[1]*reg67; reg44=reg44-reg51; T reg73=reg25*elem.pos(2)[0]; T reg74=reg30+reg28; T reg75=elem.pos(5)[1]*reg9;
    reg59=reg59-reg58; T reg76=reg5*elem.proute[3](1,1); reg64=reg2+reg64; reg66=reg21+reg66; reg2=elem.pos(3)[0]*reg16;
    reg21=reg13*reg33; T reg77=var_inter[1]*var_inter[2]; reg35=reg35-reg60; T reg78=elem.pos(5)[1]*reg27; T reg79=reg21*elem.proute[4](1,1);
    reg76=reg64+reg76; reg42=reg42-reg70; reg64=elem.pos(6)[2]*reg67; T reg80=elem.pos(6)[1]*reg67; reg44=reg44-reg72;
    T reg81=reg74+reg73; reg71=reg32+reg71; reg32=elem.pos(6)[2]*reg77; reg66=reg66-reg2; T reg82=elem.pos(4)[0]*reg27;
    T reg83=elem.pos(3)[0]*reg36; reg78=reg35+reg78; reg35=elem.pos(6)[1]*reg77; T reg84=reg1*reg33; reg75=reg59+reg75;
    reg59=elem.pos(6)[2]*reg25; T reg85=elem.pos(4)[0]*reg47; reg69=reg63+reg69; reg68=reg56+reg68; reg56=elem.pos(6)[1]*reg25;
    reg56=reg75+reg56; reg64=reg42+reg64; reg42=elem.pos(7)[2]*reg47; reg63=reg3*reg33; reg59=reg69+reg59;
    reg69=elem.pos(7)[2]*reg36; reg75=elem.pos(7)[1]*reg36; T reg86=reg81+reg83; T reg87=elem.pos(4)[0]*reg8; T reg88=elem.pos(5)[0]*reg67;
    reg66=reg66-reg82; reg68=reg68-reg85; T reg89=elem.pos(5)[0]*reg27; T reg90=elem.pos(7)[2]*reg77; reg32=reg71+reg32;
    reg80=reg44+reg80; reg44=elem.pos(7)[1]*reg47; reg35=reg78+reg35; reg71=elem.pos(7)[1]*reg77; reg78=reg84*elem.proute[5](1,1);
    reg79=reg76+reg79; reg75=reg56+reg75; reg32=reg32-reg90; reg56=elem.pos(6)[0]*reg77; reg89=reg66+reg89;
    reg35=reg35-reg71; reg68=reg68-reg88; reg66=elem.pos(6)[0]*reg67; reg69=reg59+reg69; reg78=reg79+reg78;
    reg59=reg63*elem.proute[6](1,1); reg44=reg80+reg44; reg76=elem.pos(5)[0]*reg9; reg87=reg87-reg86; reg42=reg64+reg42;
    reg33=reg7*reg33; reg59=reg78+reg59; reg64=reg33*elem.proute[7](1,1); reg78=reg42*reg75; reg79=elem.pos(7)[0]*reg77;
    reg56=reg89+reg56; reg80=reg32*reg75; reg89=elem.pos(7)[0]*reg47; reg66=reg68+reg66; reg68=reg44*reg69;
    T reg91=reg35*reg69; T reg92=elem.pos(6)[0]*reg25; reg76=reg87+reg76; reg78=reg68-reg78; reg68=reg32*reg44;
    reg80=reg91-reg80; reg87=reg35*reg42; reg56=reg56-reg79; reg89=reg66+reg89; reg66=elem.pos(7)[0]*reg36;
    reg92=reg76+reg92; reg64=reg59+reg64; reg59=reg64+(*f.m).f_vol[2]; reg76=reg64+(*f.m).f_vol[1]; reg64=reg64+(*f.m).f_vol[0];
    reg68=reg87-reg68; reg87=reg89*reg80; reg91=reg56*reg78; T reg93=reg9*reg6; T reg94=reg6*reg25;
    T reg95=reg6*reg36; T reg96=var_inter[2]*reg8; T reg97=var_inter[2]*reg9; T reg98=var_inter[2]*reg25; T reg99=var_inter[2]*reg36;
    reg6=reg6*reg8; reg66=reg92+reg66; reg92=reg94*reg76; T reg100=reg94*reg59; T reg101=reg95*reg64;
    T reg102=reg95*reg76; T reg103=reg95*reg59; T reg104=reg96*reg64; T reg105=reg96*reg76; T reg106=reg96*reg59;
    T reg107=reg97*reg64; T reg108=reg97*reg76; T reg109=reg97*reg59; T reg110=reg98*reg64; T reg111=reg99*reg76;
    T reg112=reg98*reg76; T reg113=reg99*reg59; T reg114=reg98*reg59; T reg115=reg99*reg64; T reg116=reg6*reg59;
    T reg117=reg6*reg64; T reg118=reg6*reg76; T reg119=reg93*reg64; T reg120=reg66*reg68; reg87=reg91-reg87;
    reg91=reg93*reg76; T reg121=reg93*reg59; T reg122=reg94*reg64; reg114=(*f.m).density*reg114; reg120=reg87+reg120;
    reg115=(*f.m).density*reg115; reg112=(*f.m).density*reg112; reg111=(*f.m).density*reg111; reg110=(*f.m).density*reg110; reg109=(*f.m).density*reg109;
    reg113=(*f.m).density*reg113; reg118=(*f.m).density*reg118; reg108=(*f.m).density*reg108; reg122=(*f.m).density*reg122; reg121=(*f.m).density*reg121;
    reg92=(*f.m).density*reg92; reg100=(*f.m).density*reg100; reg91=(*f.m).density*reg91; reg101=(*f.m).density*reg101; reg102=(*f.m).density*reg102;
    reg119=(*f.m).density*reg119; reg103=(*f.m).density*reg103; reg104=(*f.m).density*reg104; reg117=(*f.m).density*reg117; reg105=(*f.m).density*reg105;
    reg106=(*f.m).density*reg106; reg116=(*f.m).density*reg116; reg107=(*f.m).density*reg107; reg87=reg120*reg100; T reg123=reg120*reg101;
    T reg124=reg120*reg102; T reg125=reg120*reg103; T reg126=reg120*reg104; T reg127=reg120*reg105; T reg128=reg120*reg106;
    T reg129=reg120*reg107; T reg130=reg120*reg108; T reg131=reg120*reg109; T reg132=reg120*reg110; T reg133=reg120*reg112;
    T reg134=reg120*reg114; T reg135=reg120*reg115; T reg136=reg120*reg111; T reg137=reg120*reg113; T reg138=reg120*reg92;
    T reg139=reg120*reg119; T reg140=reg120*reg117; T reg141=reg120*reg122; T reg142=reg120*reg116; T reg143=reg120*reg121;
    T reg144=reg120*reg118; T reg145=reg120*reg91; T reg146=ponderation*reg142; sollicitation[indices[0]+2]+=reg146; T reg147=ponderation*reg131;
    sollicitation[indices[5]+2]+=reg147; T reg148=ponderation*reg132; sollicitation[indices[6]+0]+=reg148; T reg149=ponderation*reg144; sollicitation[indices[0]+1]+=reg149;
    T reg150=ponderation*reg133; sollicitation[indices[6]+1]+=reg150; T reg151=ponderation*reg134; sollicitation[indices[6]+2]+=reg151; T reg152=ponderation*reg140;
    sollicitation[indices[0]+0]+=reg152; T reg153=ponderation*reg135; sollicitation[indices[7]+0]+=reg153; T reg154=ponderation*reg136; sollicitation[indices[7]+1]+=reg154;
    T reg155=ponderation*reg137; sollicitation[indices[7]+2]+=reg155; T reg156=ponderation*reg130; sollicitation[indices[5]+1]+=reg156; T reg157=ponderation*reg129;
    sollicitation[indices[5]+0]+=reg157; T reg158=ponderation*reg139; sollicitation[indices[1]+0]+=reg158; T reg159=ponderation*reg128; sollicitation[indices[4]+2]+=reg159;
    T reg160=ponderation*reg127; sollicitation[indices[4]+1]+=reg160; T reg161=ponderation*reg145; sollicitation[indices[1]+1]+=reg161; T reg162=ponderation*reg126;
    sollicitation[indices[4]+0]+=reg162; T reg163=ponderation*reg125; sollicitation[indices[3]+2]+=reg163; T reg164=ponderation*reg143; sollicitation[indices[1]+2]+=reg164;
    T reg165=ponderation*reg124; sollicitation[indices[3]+1]+=reg165; T reg166=ponderation*reg123; sollicitation[indices[3]+0]+=reg166; T reg167=ponderation*reg141;
    sollicitation[indices[2]+0]+=reg167; T reg168=ponderation*reg87; sollicitation[indices[2]+2]+=reg168; T reg169=ponderation*reg138; sollicitation[indices[2]+1]+=reg169;
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim,unsigned symmetric_version>
void add_local_elem_matrix(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices){ 
  #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[2]; T reg1=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg2=PNODE(0).dep_imp_val_0_0[2]*(*f.m).lim_cond_0; T reg3=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg4=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0];
    T reg5=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg6=reg4+reg3; T reg7=reg5+reg1; T reg8=reg2+reg0; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0;
    matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0; T reg9=PNODE(0).dep_imp_coef_0*reg6; T reg10=PNODE(0).dep_imp_coef_0*reg7; T reg11=PNODE(0).dep_imp_coef_0*reg8;
    T reg12=PNODE(0).f_nodal[0]+reg9; sollicitation[indices[0]+0]+=reg12; T reg13=PNODE(0).f_nodal[2]+reg11; sollicitation[indices[0]+2]+=reg13; T reg14=PNODE(0).f_nodal[1]+reg10;
    sollicitation[indices[0]+1]+=reg14;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_true
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[2]; T reg1=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg2=PNODE(0).dep_imp_val_0_0[2]*(*f.m).lim_cond_0; T reg3=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg4=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0];
    T reg5=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg6=reg4+reg3; T reg7=reg5+reg1; T reg8=reg2+reg0; matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0;
    matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0; T reg9=PNODE(0).dep_imp_coef_0*reg6; T reg10=PNODE(0).dep_imp_coef_0*reg7; T reg11=PNODE(0).dep_imp_coef_0*reg8;
    T reg12=PNODE(0).f_nodal[0]+reg9; sollicitation[indices[0]+0]+=reg12; T reg13=PNODE(0).f_nodal[2]+reg11; sollicitation[indices[0]+2]+=reg13; T reg14=PNODE(0).f_nodal[1]+reg10;
    sollicitation[indices[0]+1]+=reg14;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_false_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_false_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_true_true_false
#define ADD_NODAL_MATRIX_elasticity_dep_true_true_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE >
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    matrix(indices[0]+0,indices[0]+0)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+1,indices[0]+1)+=PNODE(0).dep_imp_coef_0; matrix(indices[0]+2,indices[0]+2)+=PNODE(0).dep_imp_coef_0;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_true
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
    T reg0=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[2]; T reg1=PNODE(0).dep_imp_val_0_0[1]*(*f.m).lim_cond_0; T reg2=PNODE(0).dep_imp_val_0_0[2]*(*f.m).lim_cond_0; T reg3=PNODE(0).dep_imp_val_0_0[0]*(*f.m).lim_cond_0; T reg4=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[0];
    T reg5=(*f.m).lim_cond_1*PNODE(0).dep_imp_val_0_1[1]; T reg6=reg4+reg3; T reg7=reg5+reg1; T reg8=reg2+reg0; T reg9=PNODE(0).dep_imp_coef_0*reg6;
    T reg10=PNODE(0).dep_imp_coef_0*reg7; T reg11=PNODE(0).dep_imp_coef_0*reg8; T reg12=PNODE(0).f_nodal[0]+reg9; sollicitation[indices[0]+0]+=reg12; T reg13=PNODE(0).f_nodal[2]+reg11;
    sollicitation[indices[0]+2]+=reg13; T reg14=PNODE(0).f_nodal[1]+reg10; sollicitation[indices[0]+1]+=reg14;
  #undef PNODE
}
#endif
// 
#ifndef ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
#define ADD_NODAL_MATRIX_elasticity_dep_symmetric_version_false_false
template<class TM,class T,bool wont_add_nz,class TMA,class TVE,class TVEVE ,unsigned symmetric_version>
void add_nodal_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const typename TM::TNode &node,
      const unsigned *indices){ 
  #define PNODE(N) node
  #undef PNODE
}
#endif
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[0]; T reg1=0.21132486540518713447*elem.pos(0)[1]; T reg2=0.21132486540518713447*elem.pos(3)[1]; T reg3=0.21132486540518713447*elem.pos(3)[0]; T reg4=reg3-reg0;
    T reg5=0.21132486540518713447*elem.pos(0)[2]; T reg6=0.21132486540518713447*elem.pos(3)[2]; T reg7=0.78867513459481286553*elem.pos(0)[1]; T reg8=0.78867513459481286553*elem.pos(0)[0]; T reg9=0.78867513459481286553*elem.pos(3)[0];
    T reg10=0.78867513459481286553*elem.pos(3)[1]; T reg11=0.78867513459481286553*elem.pos(2)[0]; T reg12=reg2-reg1; T reg13=0.78867513459481286553*elem.pos(2)[1]; reg4=reg4+reg11;
    T reg14=0.78867513459481286553*elem.pos(1)[0]; T reg15=0.78867513459481286553*elem.pos(1)[1]; T reg16=reg6-reg5; T reg17=0.78867513459481286553*elem.pos(2)[2]; reg12=reg12+reg13;
    T reg18=0.78867513459481286553*elem.pos(3)[2]; T reg19=0.21132486540518713447*elem.pos(2)[0]; T reg20=0.21132486540518713447*elem.pos(2)[1]; T reg21=reg10-reg7; T reg22=reg9-reg8;
    T reg23=0.78867513459481286553*elem.pos(0)[2]; T reg24=reg18-reg23; reg21=reg20+reg21; reg4=reg4-reg14; reg22=reg19+reg22;
    reg16=reg16+reg17; reg12=reg12-reg15; T reg25=0.21132486540518713447*elem.pos(2)[2]; T reg26=0.78867513459481286553*elem.pos(1)[2]; T reg27=0.21132486540518713447*elem.pos(1)[0];
    T reg28=0.21132486540518713447*elem.pos(1)[1]; T reg29=pow(reg12,2); reg22=reg22-reg27; reg16=reg16-reg26; T reg30=0.21132486540518713447*elem.pos(1)[2];
    reg21=reg21-reg28; reg24=reg25+reg24; T reg31=pow(reg4,2); reg29=reg31+reg29; reg31=pow(reg21,2);
    T reg32=pow(reg22,2); reg24=reg24-reg30; T reg33=pow(reg16,2); reg31=reg32+reg31; reg32=pow(reg24,2);
    T reg34=reg2+reg7; T reg35=reg3+reg8; T reg36=reg1+reg10; T reg37=reg0+reg9; reg33=reg29+reg33;
    reg32=reg31+reg32; reg29=reg6+reg23; reg34=reg20-reg34; reg31=reg5+reg18; reg36=reg13-reg36;
    reg33=pow(reg33,0.5); reg37=reg11-reg37; reg35=reg19-reg35; reg32=pow(reg32,0.5); reg29=reg25-reg29;
    T reg38=reg12/reg33; reg34=reg15+reg34; reg31=reg17-reg31; reg36=reg36+reg28; T reg39=reg4/reg33;
    reg35=reg14+reg35; reg37=reg37+reg27; T reg40=reg38*reg36; T reg41=reg22/reg32; reg29=reg26+reg29;
    reg33=reg16/reg33; T reg42=reg39*reg35; reg31=reg31+reg30; T reg43=reg38*reg34; T reg44=reg39*reg37;
    T reg45=reg21/reg32; T reg46=reg33*reg29; reg43=reg42+reg43; reg32=reg24/reg32; reg42=reg33*reg31;
    T reg47=reg37*reg41; reg40=reg44+reg40; reg44=reg36*reg45; reg42=reg40+reg42; reg40=reg31*reg32;
    T reg48=reg35*reg41; reg46=reg43+reg46; reg43=reg34*reg45; reg44=reg47+reg44; reg47=reg39*reg46;
    reg40=reg44+reg40; reg44=reg38*reg46; reg43=reg48+reg43; reg48=reg29*reg32; T reg49=reg39*reg42;
    T reg50=reg38*reg42; T reg51=reg41*reg40; T reg52=reg45*reg40; reg48=reg43+reg48; reg49=reg37-reg49;
    reg50=reg36-reg50; reg47=reg35-reg47; reg43=reg33*reg46; T reg53=reg33*reg42; reg44=reg34-reg44;
    T reg54=pow(reg47,2); T reg55=reg45*reg48; reg51=reg37-reg51; T reg56=pow(reg44,2); reg52=reg36-reg52;
    reg53=reg31-reg53; T reg57=reg41*reg48; reg43=reg29-reg43; T reg58=pow(reg49,2); T reg59=reg32*reg40;
    T reg60=pow(reg50,2); reg56=reg54+reg56; reg55=reg34-reg55; reg54=pow(reg43,2); T reg61=reg32*reg48;
    T reg62=pow(reg51,2); T reg63=pow(reg53,2); reg60=reg58+reg60; reg57=reg35-reg57; reg58=pow(reg52,2);
    reg59=reg31-reg59; reg63=reg60+reg63; reg54=reg56+reg54; reg61=reg29-reg61; reg56=pow(reg59,2);
    reg58=reg62+reg58; reg60=pow(reg55,2); reg62=pow(reg57,2); reg60=reg62+reg60; reg56=reg58+reg56;
    reg58=pow(reg61,2); reg54=pow(reg54,0.5); reg63=pow(reg63,0.5); reg44=reg44/reg54; reg47=reg47/reg54;
    reg58=reg60+reg58; reg54=reg43/reg54; reg49=reg49/reg63; reg50=reg50/reg63; reg63=reg53/reg63;
    reg56=pow(reg56,0.5); reg43=reg39*reg44; reg53=reg38*reg47; reg60=reg39*reg54; reg62=reg33*reg47;
    T reg64=reg33*reg44; T reg65=reg38*reg54; T reg66=reg12*reg44; T reg67=reg4*reg47; reg58=pow(reg58,0.5);
    T reg68=reg4*reg39; T reg69=reg12*reg38; reg59=reg59/reg56; T reg70=reg37*reg49; T reg71=reg36*reg50;
    reg52=reg52/reg56; reg56=reg51/reg56; reg4=reg4*reg49; reg12=reg12*reg50; reg51=reg38*reg63;
    T reg72=reg33*reg50; T reg73=reg33*reg49; T reg74=reg39*reg63; reg50=reg39*reg50; reg49=reg38*reg49;
    reg44=reg34*reg44; reg47=reg35*reg47; reg38=reg45*reg59; reg61=reg61/reg58; reg39=reg32*reg52;
    T reg75=reg32*reg56; reg55=reg55/reg58; reg58=reg57/reg58; reg57=reg41*reg59; T reg76=reg21*reg52;
    T reg77=reg22*reg56; T reg78=reg41*reg52; T reg79=reg45*reg56; reg52=reg36*reg52; reg56=reg37*reg56;
    reg36=reg22*reg41; reg37=reg21*reg45; reg33=reg16*reg33; reg69=reg68+reg69; reg71=reg70+reg71;
    reg68=reg31*reg63; reg12=reg4+reg12; reg63=reg16*reg63; reg72=reg51-reg72; reg74=reg73-reg74;
    reg49=reg50-reg49; reg44=reg47+reg44; reg4=reg29*reg54; reg66=reg67+reg66; reg54=reg16*reg54;
    reg53=reg43-reg53; reg60=reg62-reg60; reg64=reg65-reg64; reg22=reg22*reg58; reg76=reg77+reg76;
    reg16=reg24*reg59; reg39=reg38-reg39; reg21=reg21*reg55; reg57=reg75-reg57; reg79=reg78-reg79;
    reg34=reg34*reg55; reg38=reg45*reg58; reg43=reg41*reg55; reg41=reg41*reg61; reg47=reg32*reg58;
    reg58=reg35*reg58; reg55=reg32*reg55; reg45=reg45*reg61; reg63=reg12+reg63; reg72=skin_elem.p*reg72;
    reg74=skin_elem.p*reg74; reg49=skin_elem.p*reg49; reg4=reg44+reg4; reg68=reg71+reg68; reg32=reg24*reg32;
    reg54=reg66+reg54; reg37=reg36+reg37; reg52=reg56+reg52; reg64=skin_elem.p*reg64; reg33=reg69+reg33;
    reg59=reg31*reg59; reg60=skin_elem.p*reg60; reg53=skin_elem.p*reg53; reg12=0.044658198738520458147*reg60; reg31=0.044658198738520458147*reg53;
    reg24=reg24*reg61; reg35=0.044658198738520458147*reg64; reg36=0.6220084679281461892*reg49; reg55=reg45-reg55; reg21=reg22+reg21;
    reg22=0.6220084679281461892*reg74; reg41=reg47-reg41; reg44=0.6220084679281461892*reg60; reg45=0.16666666666666667632*reg49; reg47=0.6220084679281461892*reg64;
    reg50=0.16666666666666667632*reg72; reg51=0.16666666666666667632*reg74; reg56=0.6220084679281461892*skin_elem.f_surf[2]; reg62=0.16666666666666667632*reg53; reg65=0.16666666666666667632*skin_elem.f_surf[2];
    reg66=0.044658198738520458147*reg49; reg67=0.044658198738520458147*skin_elem.f_surf[2]; reg69=0.6220084679281461892*skin_elem.f_surf[1]; reg70=0.16666666666666667632*reg60; reg71=0.16666666666666667632*skin_elem.f_surf[1];
    reg73=0.6220084679281461892*reg53; reg75=0.044658198738520458147*reg74; reg77=0.044658198738520458147*skin_elem.f_surf[1]; reg78=0.16666666666666667632*reg64; T reg80=0.16666666666666667632*skin_elem.f_surf[0];
    reg38=reg43-reg38; reg43=0.6220084679281461892*reg72; reg54=reg46*reg54; reg63=reg42*reg63; reg39=skin_elem.p*reg39;
    reg57=skin_elem.p*reg57; reg68=reg33*reg68; reg42=0.044658198738520458147*skin_elem.f_surf[0]; reg46=0.044658198738520458147*reg72; reg59=reg52+reg59;
    reg79=skin_elem.p*reg79; reg32=reg37+reg32; reg4=reg33*reg4; reg34=reg58+reg34; reg33=0.6220084679281461892*skin_elem.f_surf[0];
    reg61=reg29*reg61; reg16=reg76+reg16; reg63=reg68-reg63; reg29=0.16666666666666667632*reg57; reg22=reg69+reg22;
    reg43=reg33+reg43; reg36=reg56+reg36; reg45=reg65+reg45; reg66=reg67+reg66; reg37=0.044658198738520458147*reg79;
    reg73=reg56+reg73; reg62=reg65+reg62; reg52=0.16666666666666667632*reg79; reg58=0.044658198738520458147*reg57; reg44=reg69+reg44;
    reg59=reg32*reg59; reg68=0.044658198738520458147*reg39; reg16=reg40*reg16; reg50=reg80+reg50; reg47=reg33+reg47;
    reg61=reg34+reg61; reg34=0.6220084679281461892*reg79; reg24=reg21+reg24; reg31=reg67+reg31; reg54=reg4-reg54;
    reg51=reg71+reg51; reg46=reg46+reg42; reg55=skin_elem.p*reg55; reg41=skin_elem.p*reg41; reg4=0.6220084679281461892*reg57;
    reg21=0.16666666666666667632*reg39; reg38=skin_elem.p*reg38; reg12=reg77+reg12; reg70=reg71+reg70; reg78=reg80+reg78;
    reg40=0.6220084679281461892*reg39; reg75=reg77+reg75; reg35=reg42+reg35; reg34=reg56+reg34; reg36=reg63*reg36;
    reg76=0.044658198738520458147*reg38; reg47=reg54*reg47; reg31=reg54*reg31; reg68=reg42+reg68; T reg81=0.16666666666666667632*reg55;
    T reg82=0.044658198738520458147*reg41; reg44=reg54*reg44; reg22=reg63*reg22; reg58=reg77+reg58; reg35=reg54*reg35;
    reg51=reg51*reg63; T reg83=0.16666666666666667632*reg41; reg4=reg69+reg4; T reg84=0.044658198738520458147*reg55; reg43=reg63*reg43;
    reg73=reg54*reg73; reg12=reg54*reg12; reg37=reg67+reg37; reg40=reg33+reg40; reg45=reg63*reg45;
    T reg85=0.16666666666666667632*reg38; reg70=reg54*reg70; reg52=reg65+reg52; T reg86=0.6220084679281461892*reg55; reg29=reg71+reg29;
    reg75=reg63*reg75; reg78=reg54*reg78; T reg87=0.6220084679281461892*reg38; T reg88=0.6220084679281461892*reg41; reg62=reg54*reg62;
    reg21=reg21+reg80; reg46=reg46*reg63; reg24=reg48*reg24; reg61=reg32*reg61; reg16=reg59-reg16;
    reg50=reg63*reg50; reg66=reg63*reg66; reg88=reg69+reg88; reg85=reg65+reg85; reg37=reg16*reg37;
    reg43=0.25*reg43; reg86=reg33+reg86; reg84=reg42+reg84; reg29=reg16*reg29; reg22=0.25*reg22;
    reg82=reg77+reg82; reg70=0.25*reg70; reg36=0.25*reg36; reg75=0.25*reg75; reg76=reg67+reg76;
    reg78=0.25*reg78; reg35=0.25*reg35; reg40=reg16*reg40; reg21=reg21*reg16; reg46=0.25*reg46;
    reg12=0.25*reg12; reg4=reg16*reg4; reg24=reg61-reg24; reg31=0.25*reg31; reg34=reg16*reg34;
    reg68=reg16*reg68; reg62=0.25*reg62; reg73=0.25*reg73; reg44=0.25*reg44; reg83=reg71+reg83;
    reg50=0.25*reg50; reg66=0.25*reg66; reg58=reg16*reg58; reg47=0.25*reg47; reg51=0.25*reg51;
    reg87=reg56+reg87; reg52=reg16*reg52; reg45=0.25*reg45; reg81=reg80+reg81; reg66=reg66+reg62;
    reg12=reg51+reg12; reg82=reg24*reg82; reg46=reg46+reg78; reg75=reg75+reg70; reg58=0.25*reg58;
    reg36=reg62+reg36; reg52=0.25*reg52; reg76=reg24*reg76; reg81=reg24*reg81; reg51=reg44+reg51;
    reg40=0.25*reg40; reg35=reg50+reg35; reg21=0.25*reg21; reg86=reg86*reg24; reg73=reg45+reg73;
    reg37=0.25*reg37; reg34=0.25*reg34; reg85=reg24*reg85; reg47=reg50+reg47; reg88=reg24*reg88;
    reg31=reg45+reg31; reg43=reg78+reg43; reg87=reg24*reg87; reg84=reg24*reg84; reg29=0.25*reg29;
    reg4=0.25*reg4; reg68=0.25*reg68; reg83=reg24*reg83; reg22=reg70+reg22; reg87=0.25*reg87;
    reg4=reg12+reg4; reg81=0.25*reg81; reg40=reg35+reg40; reg34=reg31+reg34; reg68=reg47+reg68;
    reg43=reg21+reg43; reg75=reg75+reg29; reg86=0.25*reg86; reg83=0.25*reg83; reg84=0.25*reg84;
    reg22=reg29+reg22; reg58=reg51+reg58; reg82=0.25*reg82; reg85=0.25*reg85; reg36=reg52+reg36;
    reg76=0.25*reg76; reg88=0.25*reg88; reg37=reg73+reg37; reg21=reg46+reg21; reg52=reg66+reg52;
    reg37=reg37+reg85; sollicitation[indices[1]+2]+=reg37; reg58=reg58+reg83; sollicitation[indices[1]+1]+=reg58; reg88=reg75+reg88;
    sollicitation[indices[0]+1]+=reg88; reg34=reg85+reg34; sollicitation[indices[3]+2]+=reg34; reg87=reg52+reg87; sollicitation[indices[0]+2]+=reg87;
    reg4=reg83+reg4; sollicitation[indices[3]+1]+=reg4; reg84=reg43+reg84; sollicitation[indices[2]+0]+=reg84; reg82=reg22+reg82;
    sollicitation[indices[2]+1]+=reg82; reg76=reg36+reg76; sollicitation[indices[2]+2]+=reg76; reg40=reg81+reg40; sollicitation[indices[3]+0]+=reg40;
    reg81=reg68+reg81; sollicitation[indices[1]+0]+=reg81; reg86=reg21+reg86; sollicitation[indices[0]+0]+=reg86;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[0]; T reg1=0.21132486540518713447*elem.pos(0)[1]; T reg2=0.21132486540518713447*elem.pos(3)[1]; T reg3=0.21132486540518713447*elem.pos(3)[0]; T reg4=reg3-reg0;
    T reg5=0.21132486540518713447*elem.pos(0)[2]; T reg6=0.21132486540518713447*elem.pos(3)[2]; T reg7=0.78867513459481286553*elem.pos(0)[1]; T reg8=0.78867513459481286553*elem.pos(0)[0]; T reg9=0.78867513459481286553*elem.pos(3)[0];
    T reg10=0.78867513459481286553*elem.pos(3)[1]; T reg11=0.78867513459481286553*elem.pos(2)[0]; T reg12=reg2-reg1; T reg13=0.78867513459481286553*elem.pos(2)[1]; reg4=reg4+reg11;
    T reg14=0.78867513459481286553*elem.pos(1)[0]; T reg15=0.78867513459481286553*elem.pos(1)[1]; T reg16=reg6-reg5; T reg17=0.78867513459481286553*elem.pos(2)[2]; reg12=reg12+reg13;
    T reg18=0.78867513459481286553*elem.pos(3)[2]; T reg19=0.21132486540518713447*elem.pos(2)[0]; T reg20=0.21132486540518713447*elem.pos(2)[1]; T reg21=reg10-reg7; T reg22=reg9-reg8;
    T reg23=0.78867513459481286553*elem.pos(0)[2]; T reg24=reg18-reg23; reg21=reg20+reg21; reg4=reg4-reg14; reg22=reg19+reg22;
    reg16=reg16+reg17; reg12=reg12-reg15; T reg25=0.21132486540518713447*elem.pos(2)[2]; T reg26=0.78867513459481286553*elem.pos(1)[2]; T reg27=0.21132486540518713447*elem.pos(1)[0];
    T reg28=0.21132486540518713447*elem.pos(1)[1]; T reg29=pow(reg12,2); reg22=reg22-reg27; reg16=reg16-reg26; T reg30=0.21132486540518713447*elem.pos(1)[2];
    reg21=reg21-reg28; reg24=reg25+reg24; T reg31=pow(reg4,2); reg29=reg31+reg29; reg31=pow(reg21,2);
    T reg32=pow(reg22,2); reg24=reg24-reg30; T reg33=pow(reg16,2); reg31=reg32+reg31; reg32=pow(reg24,2);
    T reg34=reg2+reg7; T reg35=reg3+reg8; T reg36=reg1+reg10; T reg37=reg0+reg9; reg33=reg29+reg33;
    reg32=reg31+reg32; reg29=reg6+reg23; reg34=reg20-reg34; reg31=reg5+reg18; reg36=reg13-reg36;
    reg33=pow(reg33,0.5); reg37=reg11-reg37; reg35=reg19-reg35; reg32=pow(reg32,0.5); reg29=reg25-reg29;
    T reg38=reg12/reg33; reg34=reg15+reg34; reg31=reg17-reg31; reg36=reg36+reg28; T reg39=reg4/reg33;
    reg35=reg14+reg35; reg37=reg37+reg27; T reg40=reg38*reg36; T reg41=reg22/reg32; reg29=reg26+reg29;
    reg33=reg16/reg33; T reg42=reg39*reg35; reg31=reg31+reg30; T reg43=reg38*reg34; T reg44=reg39*reg37;
    T reg45=reg21/reg32; T reg46=reg33*reg29; reg43=reg42+reg43; reg32=reg24/reg32; reg42=reg33*reg31;
    T reg47=reg37*reg41; reg40=reg44+reg40; reg44=reg36*reg45; reg42=reg40+reg42; reg40=reg31*reg32;
    T reg48=reg35*reg41; reg46=reg43+reg46; reg43=reg34*reg45; reg44=reg47+reg44; reg47=reg39*reg46;
    reg40=reg44+reg40; reg44=reg38*reg46; reg43=reg48+reg43; reg48=reg29*reg32; T reg49=reg39*reg42;
    T reg50=reg38*reg42; T reg51=reg41*reg40; T reg52=reg45*reg40; reg48=reg43+reg48; reg49=reg37-reg49;
    reg50=reg36-reg50; reg47=reg35-reg47; reg43=reg33*reg46; T reg53=reg33*reg42; reg44=reg34-reg44;
    T reg54=pow(reg47,2); T reg55=reg45*reg48; reg51=reg37-reg51; T reg56=pow(reg44,2); reg52=reg36-reg52;
    reg53=reg31-reg53; T reg57=reg41*reg48; reg43=reg29-reg43; T reg58=pow(reg49,2); T reg59=reg32*reg40;
    T reg60=pow(reg50,2); reg56=reg54+reg56; reg55=reg34-reg55; reg54=pow(reg43,2); T reg61=reg32*reg48;
    T reg62=pow(reg51,2); T reg63=pow(reg53,2); reg60=reg58+reg60; reg57=reg35-reg57; reg58=pow(reg52,2);
    reg59=reg31-reg59; reg63=reg60+reg63; reg54=reg56+reg54; reg61=reg29-reg61; reg56=pow(reg59,2);
    reg58=reg62+reg58; reg60=pow(reg55,2); reg62=pow(reg57,2); reg60=reg62+reg60; reg56=reg58+reg56;
    reg58=pow(reg61,2); reg54=pow(reg54,0.5); reg63=pow(reg63,0.5); reg44=reg44/reg54; reg47=reg47/reg54;
    reg58=reg60+reg58; reg54=reg43/reg54; reg49=reg49/reg63; reg50=reg50/reg63; reg63=reg53/reg63;
    reg56=pow(reg56,0.5); reg43=reg39*reg44; reg53=reg38*reg47; reg60=reg39*reg54; reg62=reg33*reg47;
    T reg64=reg33*reg44; T reg65=reg38*reg54; T reg66=reg12*reg44; T reg67=reg4*reg47; reg58=pow(reg58,0.5);
    T reg68=reg4*reg39; T reg69=reg12*reg38; reg59=reg59/reg56; T reg70=reg37*reg49; T reg71=reg36*reg50;
    reg52=reg52/reg56; reg56=reg51/reg56; reg4=reg4*reg49; reg12=reg12*reg50; reg51=reg38*reg63;
    T reg72=reg33*reg50; T reg73=reg33*reg49; T reg74=reg39*reg63; reg50=reg39*reg50; reg49=reg38*reg49;
    reg44=reg34*reg44; reg47=reg35*reg47; reg38=reg45*reg59; reg61=reg61/reg58; reg39=reg32*reg52;
    T reg75=reg32*reg56; reg55=reg55/reg58; reg58=reg57/reg58; reg57=reg41*reg59; T reg76=reg21*reg52;
    T reg77=reg22*reg56; T reg78=reg41*reg52; T reg79=reg45*reg56; reg52=reg36*reg52; reg56=reg37*reg56;
    reg36=reg22*reg41; reg37=reg21*reg45; reg33=reg16*reg33; reg69=reg68+reg69; reg71=reg70+reg71;
    reg68=reg31*reg63; reg12=reg4+reg12; reg63=reg16*reg63; reg72=reg51-reg72; reg74=reg73-reg74;
    reg49=reg50-reg49; reg44=reg47+reg44; reg4=reg29*reg54; reg66=reg67+reg66; reg54=reg16*reg54;
    reg53=reg43-reg53; reg60=reg62-reg60; reg64=reg65-reg64; reg22=reg22*reg58; reg76=reg77+reg76;
    reg16=reg24*reg59; reg39=reg38-reg39; reg21=reg21*reg55; reg57=reg75-reg57; reg79=reg78-reg79;
    reg34=reg34*reg55; reg38=reg45*reg58; reg43=reg41*reg55; reg41=reg41*reg61; reg47=reg32*reg58;
    reg58=reg35*reg58; reg55=reg32*reg55; reg45=reg45*reg61; reg63=reg12+reg63; reg72=skin_elem.p*reg72;
    reg74=skin_elem.p*reg74; reg49=skin_elem.p*reg49; reg4=reg44+reg4; reg68=reg71+reg68; reg32=reg24*reg32;
    reg54=reg66+reg54; reg37=reg36+reg37; reg52=reg56+reg52; reg64=skin_elem.p*reg64; reg33=reg69+reg33;
    reg59=reg31*reg59; reg60=skin_elem.p*reg60; reg53=skin_elem.p*reg53; reg12=0.044658198738520458147*reg60; reg31=0.044658198738520458147*reg53;
    reg24=reg24*reg61; reg35=0.044658198738520458147*reg64; reg36=0.6220084679281461892*reg49; reg55=reg45-reg55; reg21=reg22+reg21;
    reg22=0.6220084679281461892*reg74; reg41=reg47-reg41; reg44=0.6220084679281461892*reg60; reg45=0.16666666666666667632*reg49; reg47=0.6220084679281461892*reg64;
    reg50=0.16666666666666667632*reg72; reg51=0.16666666666666667632*reg74; reg56=0.6220084679281461892*skin_elem.f_surf[2]; reg62=0.16666666666666667632*reg53; reg65=0.16666666666666667632*skin_elem.f_surf[2];
    reg66=0.044658198738520458147*reg49; reg67=0.044658198738520458147*skin_elem.f_surf[2]; reg69=0.6220084679281461892*skin_elem.f_surf[1]; reg70=0.16666666666666667632*reg60; reg71=0.16666666666666667632*skin_elem.f_surf[1];
    reg73=0.6220084679281461892*reg53; reg75=0.044658198738520458147*reg74; reg77=0.044658198738520458147*skin_elem.f_surf[1]; reg78=0.16666666666666667632*reg64; T reg80=0.16666666666666667632*skin_elem.f_surf[0];
    reg38=reg43-reg38; reg43=0.6220084679281461892*reg72; reg54=reg46*reg54; reg63=reg42*reg63; reg39=skin_elem.p*reg39;
    reg57=skin_elem.p*reg57; reg68=reg33*reg68; reg42=0.044658198738520458147*skin_elem.f_surf[0]; reg46=0.044658198738520458147*reg72; reg59=reg52+reg59;
    reg79=skin_elem.p*reg79; reg32=reg37+reg32; reg4=reg33*reg4; reg34=reg58+reg34; reg33=0.6220084679281461892*skin_elem.f_surf[0];
    reg61=reg29*reg61; reg16=reg76+reg16; reg63=reg68-reg63; reg29=0.16666666666666667632*reg57; reg22=reg69+reg22;
    reg43=reg33+reg43; reg36=reg56+reg36; reg45=reg65+reg45; reg66=reg67+reg66; reg37=0.044658198738520458147*reg79;
    reg73=reg56+reg73; reg62=reg65+reg62; reg52=0.16666666666666667632*reg79; reg58=0.044658198738520458147*reg57; reg44=reg69+reg44;
    reg59=reg32*reg59; reg68=0.044658198738520458147*reg39; reg16=reg40*reg16; reg50=reg80+reg50; reg47=reg33+reg47;
    reg61=reg34+reg61; reg34=0.6220084679281461892*reg79; reg24=reg21+reg24; reg31=reg67+reg31; reg54=reg4-reg54;
    reg51=reg71+reg51; reg46=reg46+reg42; reg55=skin_elem.p*reg55; reg41=skin_elem.p*reg41; reg4=0.6220084679281461892*reg57;
    reg21=0.16666666666666667632*reg39; reg38=skin_elem.p*reg38; reg12=reg77+reg12; reg70=reg71+reg70; reg78=reg80+reg78;
    reg40=0.6220084679281461892*reg39; reg75=reg77+reg75; reg35=reg42+reg35; reg34=reg56+reg34; reg36=reg63*reg36;
    reg76=0.044658198738520458147*reg38; reg47=reg54*reg47; reg31=reg54*reg31; reg68=reg42+reg68; T reg81=0.16666666666666667632*reg55;
    T reg82=0.044658198738520458147*reg41; reg44=reg54*reg44; reg22=reg63*reg22; reg58=reg77+reg58; reg35=reg54*reg35;
    reg51=reg51*reg63; T reg83=0.16666666666666667632*reg41; reg4=reg69+reg4; T reg84=0.044658198738520458147*reg55; reg43=reg63*reg43;
    reg73=reg54*reg73; reg12=reg54*reg12; reg37=reg67+reg37; reg40=reg33+reg40; reg45=reg63*reg45;
    T reg85=0.16666666666666667632*reg38; reg70=reg54*reg70; reg52=reg65+reg52; T reg86=0.6220084679281461892*reg55; reg29=reg71+reg29;
    reg75=reg63*reg75; reg78=reg54*reg78; T reg87=0.6220084679281461892*reg38; T reg88=0.6220084679281461892*reg41; reg62=reg54*reg62;
    reg21=reg21+reg80; reg46=reg46*reg63; reg24=reg48*reg24; reg61=reg32*reg61; reg16=reg59-reg16;
    reg50=reg63*reg50; reg66=reg63*reg66; reg88=reg69+reg88; reg85=reg65+reg85; reg37=reg16*reg37;
    reg43=0.25*reg43; reg86=reg33+reg86; reg84=reg42+reg84; reg29=reg16*reg29; reg22=0.25*reg22;
    reg82=reg77+reg82; reg70=0.25*reg70; reg36=0.25*reg36; reg75=0.25*reg75; reg76=reg67+reg76;
    reg78=0.25*reg78; reg35=0.25*reg35; reg40=reg16*reg40; reg21=reg21*reg16; reg46=0.25*reg46;
    reg12=0.25*reg12; reg4=reg16*reg4; reg24=reg61-reg24; reg31=0.25*reg31; reg34=reg16*reg34;
    reg68=reg16*reg68; reg62=0.25*reg62; reg73=0.25*reg73; reg44=0.25*reg44; reg83=reg71+reg83;
    reg50=0.25*reg50; reg66=0.25*reg66; reg58=reg16*reg58; reg47=0.25*reg47; reg51=0.25*reg51;
    reg87=reg56+reg87; reg52=reg16*reg52; reg45=0.25*reg45; reg81=reg80+reg81; reg66=reg66+reg62;
    reg12=reg51+reg12; reg82=reg24*reg82; reg46=reg46+reg78; reg75=reg75+reg70; reg58=0.25*reg58;
    reg36=reg62+reg36; reg52=0.25*reg52; reg76=reg24*reg76; reg81=reg24*reg81; reg51=reg44+reg51;
    reg40=0.25*reg40; reg35=reg50+reg35; reg21=0.25*reg21; reg86=reg86*reg24; reg73=reg45+reg73;
    reg37=0.25*reg37; reg34=0.25*reg34; reg85=reg24*reg85; reg47=reg50+reg47; reg88=reg24*reg88;
    reg31=reg45+reg31; reg43=reg78+reg43; reg87=reg24*reg87; reg84=reg24*reg84; reg29=0.25*reg29;
    reg4=0.25*reg4; reg68=0.25*reg68; reg83=reg24*reg83; reg22=reg70+reg22; reg87=0.25*reg87;
    reg4=reg12+reg4; reg81=0.25*reg81; reg40=reg35+reg40; reg34=reg31+reg34; reg68=reg47+reg68;
    reg43=reg21+reg43; reg75=reg75+reg29; reg86=0.25*reg86; reg83=0.25*reg83; reg84=0.25*reg84;
    reg22=reg29+reg22; reg58=reg51+reg58; reg82=0.25*reg82; reg85=0.25*reg85; reg36=reg52+reg36;
    reg76=0.25*reg76; reg88=0.25*reg88; reg37=reg73+reg37; reg21=reg46+reg21; reg52=reg66+reg52;
    reg37=reg37+reg85; sollicitation[indices[1]+2]+=reg37; reg58=reg58+reg83; sollicitation[indices[1]+1]+=reg58; reg88=reg75+reg88;
    sollicitation[indices[0]+1]+=reg88; reg34=reg85+reg34; sollicitation[indices[3]+2]+=reg34; reg87=reg52+reg87; sollicitation[indices[0]+2]+=reg87;
    reg4=reg83+reg4; sollicitation[indices[3]+1]+=reg4; reg84=reg43+reg84; sollicitation[indices[2]+0]+=reg84; reg82=reg22+reg82;
    sollicitation[indices[2]+1]+=reg82; reg76=reg36+reg76; sollicitation[indices[2]+2]+=reg76; reg40=reg81+reg40; sollicitation[indices[3]+0]+=reg40;
    reg81=reg68+reg81; sollicitation[indices[1]+0]+=reg81; reg86=reg21+reg86; sollicitation[indices[0]+0]+=reg86;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[0]; T reg1=0.21132486540518713447*elem.pos(0)[1]; T reg2=0.21132486540518713447*elem.pos(3)[1]; T reg3=0.21132486540518713447*elem.pos(3)[0]; T reg4=reg3-reg0;
    T reg5=0.21132486540518713447*elem.pos(0)[2]; T reg6=0.21132486540518713447*elem.pos(3)[2]; T reg7=0.78867513459481286553*elem.pos(0)[1]; T reg8=0.78867513459481286553*elem.pos(0)[0]; T reg9=0.78867513459481286553*elem.pos(3)[0];
    T reg10=0.78867513459481286553*elem.pos(3)[1]; T reg11=0.78867513459481286553*elem.pos(2)[0]; T reg12=reg2-reg1; T reg13=0.78867513459481286553*elem.pos(2)[1]; reg4=reg4+reg11;
    T reg14=0.78867513459481286553*elem.pos(1)[0]; T reg15=0.78867513459481286553*elem.pos(1)[1]; T reg16=reg6-reg5; T reg17=0.78867513459481286553*elem.pos(2)[2]; reg12=reg12+reg13;
    T reg18=0.78867513459481286553*elem.pos(3)[2]; T reg19=0.21132486540518713447*elem.pos(2)[0]; T reg20=0.21132486540518713447*elem.pos(2)[1]; T reg21=reg10-reg7; T reg22=reg9-reg8;
    T reg23=0.78867513459481286553*elem.pos(0)[2]; T reg24=reg18-reg23; reg21=reg20+reg21; reg4=reg4-reg14; reg22=reg19+reg22;
    reg16=reg16+reg17; reg12=reg12-reg15; T reg25=0.21132486540518713447*elem.pos(2)[2]; T reg26=0.78867513459481286553*elem.pos(1)[2]; T reg27=0.21132486540518713447*elem.pos(1)[0];
    T reg28=0.21132486540518713447*elem.pos(1)[1]; T reg29=pow(reg12,2); reg22=reg22-reg27; reg16=reg16-reg26; T reg30=0.21132486540518713447*elem.pos(1)[2];
    reg21=reg21-reg28; reg24=reg25+reg24; T reg31=pow(reg4,2); reg29=reg31+reg29; reg31=pow(reg21,2);
    T reg32=pow(reg22,2); reg24=reg24-reg30; T reg33=pow(reg16,2); reg31=reg32+reg31; reg32=pow(reg24,2);
    T reg34=reg2+reg7; T reg35=reg3+reg8; T reg36=reg1+reg10; T reg37=reg0+reg9; reg33=reg29+reg33;
    reg32=reg31+reg32; reg29=reg6+reg23; reg34=reg20-reg34; reg31=reg5+reg18; reg36=reg13-reg36;
    reg33=pow(reg33,0.5); reg37=reg11-reg37; reg35=reg19-reg35; reg32=pow(reg32,0.5); reg29=reg25-reg29;
    T reg38=reg12/reg33; reg34=reg15+reg34; reg31=reg17-reg31; reg36=reg36+reg28; T reg39=reg4/reg33;
    reg35=reg14+reg35; reg37=reg37+reg27; T reg40=reg38*reg36; T reg41=reg22/reg32; reg29=reg26+reg29;
    reg33=reg16/reg33; T reg42=reg39*reg35; reg31=reg31+reg30; T reg43=reg38*reg34; T reg44=reg39*reg37;
    T reg45=reg21/reg32; T reg46=reg33*reg29; reg43=reg42+reg43; reg32=reg24/reg32; reg42=reg33*reg31;
    T reg47=reg37*reg41; reg40=reg44+reg40; reg44=reg36*reg45; reg42=reg40+reg42; reg40=reg31*reg32;
    T reg48=reg35*reg41; reg46=reg43+reg46; reg43=reg34*reg45; reg44=reg47+reg44; reg47=reg39*reg46;
    reg40=reg44+reg40; reg44=reg38*reg46; reg43=reg48+reg43; reg48=reg29*reg32; T reg49=reg39*reg42;
    T reg50=reg38*reg42; T reg51=reg41*reg40; T reg52=reg45*reg40; reg48=reg43+reg48; reg49=reg37-reg49;
    reg50=reg36-reg50; reg47=reg35-reg47; reg43=reg33*reg46; T reg53=reg33*reg42; reg44=reg34-reg44;
    T reg54=pow(reg47,2); T reg55=reg45*reg48; reg51=reg37-reg51; T reg56=pow(reg44,2); reg52=reg36-reg52;
    reg53=reg31-reg53; T reg57=reg41*reg48; reg43=reg29-reg43; T reg58=pow(reg49,2); T reg59=reg32*reg40;
    T reg60=pow(reg50,2); reg56=reg54+reg56; reg55=reg34-reg55; reg54=pow(reg43,2); T reg61=reg32*reg48;
    T reg62=pow(reg51,2); T reg63=pow(reg53,2); reg60=reg58+reg60; reg57=reg35-reg57; reg58=pow(reg52,2);
    reg59=reg31-reg59; reg63=reg60+reg63; reg54=reg56+reg54; reg61=reg29-reg61; reg56=pow(reg59,2);
    reg58=reg62+reg58; reg60=pow(reg55,2); reg62=pow(reg57,2); reg60=reg62+reg60; reg56=reg58+reg56;
    reg58=pow(reg61,2); reg54=pow(reg54,0.5); reg63=pow(reg63,0.5); reg44=reg44/reg54; reg47=reg47/reg54;
    reg58=reg60+reg58; reg54=reg43/reg54; reg49=reg49/reg63; reg50=reg50/reg63; reg63=reg53/reg63;
    reg56=pow(reg56,0.5); reg43=reg39*reg44; reg53=reg38*reg47; reg60=reg39*reg54; reg62=reg33*reg47;
    T reg64=reg33*reg44; T reg65=reg38*reg54; T reg66=reg12*reg44; T reg67=reg4*reg47; reg58=pow(reg58,0.5);
    T reg68=reg4*reg39; T reg69=reg12*reg38; reg59=reg59/reg56; T reg70=reg37*reg49; T reg71=reg36*reg50;
    reg52=reg52/reg56; reg56=reg51/reg56; reg4=reg4*reg49; reg12=reg12*reg50; reg51=reg38*reg63;
    T reg72=reg33*reg50; T reg73=reg33*reg49; T reg74=reg39*reg63; reg50=reg39*reg50; reg49=reg38*reg49;
    reg44=reg34*reg44; reg47=reg35*reg47; reg38=reg45*reg59; reg61=reg61/reg58; reg39=reg32*reg52;
    T reg75=reg32*reg56; reg55=reg55/reg58; reg58=reg57/reg58; reg57=reg41*reg59; T reg76=reg21*reg52;
    T reg77=reg22*reg56; T reg78=reg41*reg52; T reg79=reg45*reg56; reg52=reg36*reg52; reg56=reg37*reg56;
    reg36=reg22*reg41; reg37=reg21*reg45; reg33=reg16*reg33; reg69=reg68+reg69; reg71=reg70+reg71;
    reg68=reg31*reg63; reg12=reg4+reg12; reg63=reg16*reg63; reg72=reg51-reg72; reg74=reg73-reg74;
    reg49=reg50-reg49; reg44=reg47+reg44; reg4=reg29*reg54; reg66=reg67+reg66; reg54=reg16*reg54;
    reg53=reg43-reg53; reg60=reg62-reg60; reg64=reg65-reg64; reg22=reg22*reg58; reg76=reg77+reg76;
    reg16=reg24*reg59; reg39=reg38-reg39; reg21=reg21*reg55; reg57=reg75-reg57; reg79=reg78-reg79;
    reg34=reg34*reg55; reg38=reg45*reg58; reg43=reg41*reg55; reg41=reg41*reg61; reg47=reg32*reg58;
    reg58=reg35*reg58; reg55=reg32*reg55; reg45=reg45*reg61; reg63=reg12+reg63; reg72=skin_elem.p*reg72;
    reg74=skin_elem.p*reg74; reg49=skin_elem.p*reg49; reg4=reg44+reg4; reg68=reg71+reg68; reg32=reg24*reg32;
    reg54=reg66+reg54; reg37=reg36+reg37; reg52=reg56+reg52; reg64=skin_elem.p*reg64; reg33=reg69+reg33;
    reg59=reg31*reg59; reg60=skin_elem.p*reg60; reg53=skin_elem.p*reg53; reg12=0.044658198738520458147*reg60; reg31=0.044658198738520458147*reg53;
    reg24=reg24*reg61; reg35=0.044658198738520458147*reg64; reg36=0.6220084679281461892*reg49; reg55=reg45-reg55; reg21=reg22+reg21;
    reg22=0.6220084679281461892*reg74; reg41=reg47-reg41; reg44=0.6220084679281461892*reg60; reg45=0.16666666666666667632*reg49; reg47=0.6220084679281461892*reg64;
    reg50=0.16666666666666667632*reg72; reg51=0.16666666666666667632*reg74; reg56=0.6220084679281461892*skin_elem.f_surf[2]; reg62=0.16666666666666667632*reg53; reg65=0.16666666666666667632*skin_elem.f_surf[2];
    reg66=0.044658198738520458147*reg49; reg67=0.044658198738520458147*skin_elem.f_surf[2]; reg69=0.6220084679281461892*skin_elem.f_surf[1]; reg70=0.16666666666666667632*reg60; reg71=0.16666666666666667632*skin_elem.f_surf[1];
    reg73=0.6220084679281461892*reg53; reg75=0.044658198738520458147*reg74; reg77=0.044658198738520458147*skin_elem.f_surf[1]; reg78=0.16666666666666667632*reg64; T reg80=0.16666666666666667632*skin_elem.f_surf[0];
    reg38=reg43-reg38; reg43=0.6220084679281461892*reg72; reg54=reg46*reg54; reg63=reg42*reg63; reg39=skin_elem.p*reg39;
    reg57=skin_elem.p*reg57; reg68=reg33*reg68; reg42=0.044658198738520458147*skin_elem.f_surf[0]; reg46=0.044658198738520458147*reg72; reg59=reg52+reg59;
    reg79=skin_elem.p*reg79; reg32=reg37+reg32; reg4=reg33*reg4; reg34=reg58+reg34; reg33=0.6220084679281461892*skin_elem.f_surf[0];
    reg61=reg29*reg61; reg16=reg76+reg16; reg63=reg68-reg63; reg29=0.16666666666666667632*reg57; reg22=reg69+reg22;
    reg43=reg33+reg43; reg36=reg56+reg36; reg45=reg65+reg45; reg66=reg67+reg66; reg37=0.044658198738520458147*reg79;
    reg73=reg56+reg73; reg62=reg65+reg62; reg52=0.16666666666666667632*reg79; reg58=0.044658198738520458147*reg57; reg44=reg69+reg44;
    reg59=reg32*reg59; reg68=0.044658198738520458147*reg39; reg16=reg40*reg16; reg50=reg80+reg50; reg47=reg33+reg47;
    reg61=reg34+reg61; reg34=0.6220084679281461892*reg79; reg24=reg21+reg24; reg31=reg67+reg31; reg54=reg4-reg54;
    reg51=reg71+reg51; reg46=reg46+reg42; reg55=skin_elem.p*reg55; reg41=skin_elem.p*reg41; reg4=0.6220084679281461892*reg57;
    reg21=0.16666666666666667632*reg39; reg38=skin_elem.p*reg38; reg12=reg77+reg12; reg70=reg71+reg70; reg78=reg80+reg78;
    reg40=0.6220084679281461892*reg39; reg75=reg77+reg75; reg35=reg42+reg35; reg34=reg56+reg34; reg36=reg63*reg36;
    reg76=0.044658198738520458147*reg38; reg47=reg54*reg47; reg31=reg54*reg31; reg68=reg42+reg68; T reg81=0.16666666666666667632*reg55;
    T reg82=0.044658198738520458147*reg41; reg44=reg54*reg44; reg22=reg63*reg22; reg58=reg77+reg58; reg35=reg54*reg35;
    reg51=reg51*reg63; T reg83=0.16666666666666667632*reg41; reg4=reg69+reg4; T reg84=0.044658198738520458147*reg55; reg43=reg63*reg43;
    reg73=reg54*reg73; reg12=reg54*reg12; reg37=reg67+reg37; reg40=reg33+reg40; reg45=reg63*reg45;
    T reg85=0.16666666666666667632*reg38; reg70=reg54*reg70; reg52=reg65+reg52; T reg86=0.6220084679281461892*reg55; reg29=reg71+reg29;
    reg75=reg63*reg75; reg78=reg54*reg78; T reg87=0.6220084679281461892*reg38; T reg88=0.6220084679281461892*reg41; reg62=reg54*reg62;
    reg21=reg21+reg80; reg46=reg46*reg63; reg24=reg48*reg24; reg61=reg32*reg61; reg16=reg59-reg16;
    reg50=reg63*reg50; reg66=reg63*reg66; reg88=reg69+reg88; reg85=reg65+reg85; reg37=reg16*reg37;
    reg43=0.25*reg43; reg86=reg33+reg86; reg84=reg42+reg84; reg29=reg16*reg29; reg22=0.25*reg22;
    reg82=reg77+reg82; reg70=0.25*reg70; reg36=0.25*reg36; reg75=0.25*reg75; reg76=reg67+reg76;
    reg78=0.25*reg78; reg35=0.25*reg35; reg40=reg16*reg40; reg21=reg21*reg16; reg46=0.25*reg46;
    reg12=0.25*reg12; reg4=reg16*reg4; reg24=reg61-reg24; reg31=0.25*reg31; reg34=reg16*reg34;
    reg68=reg16*reg68; reg62=0.25*reg62; reg73=0.25*reg73; reg44=0.25*reg44; reg83=reg71+reg83;
    reg50=0.25*reg50; reg66=0.25*reg66; reg58=reg16*reg58; reg47=0.25*reg47; reg51=0.25*reg51;
    reg87=reg56+reg87; reg52=reg16*reg52; reg45=0.25*reg45; reg81=reg80+reg81; reg66=reg66+reg62;
    reg12=reg51+reg12; reg82=reg24*reg82; reg46=reg46+reg78; reg75=reg75+reg70; reg58=0.25*reg58;
    reg36=reg62+reg36; reg52=0.25*reg52; reg76=reg24*reg76; reg81=reg24*reg81; reg51=reg44+reg51;
    reg40=0.25*reg40; reg35=reg50+reg35; reg21=0.25*reg21; reg86=reg86*reg24; reg73=reg45+reg73;
    reg37=0.25*reg37; reg34=0.25*reg34; reg85=reg24*reg85; reg47=reg50+reg47; reg88=reg24*reg88;
    reg31=reg45+reg31; reg43=reg78+reg43; reg87=reg24*reg87; reg84=reg24*reg84; reg29=0.25*reg29;
    reg4=0.25*reg4; reg68=0.25*reg68; reg83=reg24*reg83; reg22=reg70+reg22; reg87=0.25*reg87;
    reg4=reg12+reg4; reg81=0.25*reg81; reg40=reg35+reg40; reg34=reg31+reg34; reg68=reg47+reg68;
    reg43=reg21+reg43; reg75=reg75+reg29; reg86=0.25*reg86; reg83=0.25*reg83; reg84=0.25*reg84;
    reg22=reg29+reg22; reg58=reg51+reg58; reg82=0.25*reg82; reg85=0.25*reg85; reg36=reg52+reg36;
    reg76=0.25*reg76; reg88=0.25*reg88; reg37=reg73+reg37; reg21=reg46+reg21; reg52=reg66+reg52;
    reg37=reg37+reg85; sollicitation[indices[1]+2]+=reg37; reg58=reg58+reg83; sollicitation[indices[1]+1]+=reg58; reg88=reg75+reg88;
    sollicitation[indices[0]+1]+=reg88; reg34=reg85+reg34; sollicitation[indices[3]+2]+=reg34; reg87=reg52+reg87; sollicitation[indices[0]+2]+=reg87;
    reg4=reg83+reg4; sollicitation[indices[3]+1]+=reg4; reg84=reg43+reg84; sollicitation[indices[2]+0]+=reg84; reg82=reg22+reg82;
    sollicitation[indices[2]+1]+=reg82; reg76=reg36+reg76; sollicitation[indices[2]+2]+=reg76; reg40=reg81+reg40; sollicitation[indices[3]+0]+=reg40;
    reg81=reg68+reg81; sollicitation[indices[1]+0]+=reg81; reg86=reg21+reg86; sollicitation[indices[0]+0]+=reg86;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(4)[0]; T reg1=0.21132486540518713447*elem.pos(5)[0]; T reg2=0.21132486540518713447*elem.pos(5)[1]; T reg3=0.21132486540518713447*elem.pos(4)[1]; T reg4=0.21132486540518713447*elem.pos(4)[2];
    T reg5=0.78867513459481286553*elem.pos(5)[1]; T reg6=0.21132486540518713447*elem.pos(5)[2]; T reg7=0.78867513459481286553*elem.pos(4)[1]; T reg8=0.78867513459481286553*elem.pos(5)[0]; T reg9=0.78867513459481286553*elem.pos(6)[1];
    T reg10=reg1-reg0; T reg11=reg2-reg3; T reg12=0.78867513459481286553*elem.pos(4)[0]; T reg13=0.78867513459481286553*elem.pos(6)[0]; T reg14=0.78867513459481286553*elem.pos(6)[2];
    T reg15=0.78867513459481286553*elem.pos(5)[2]; T reg16=reg6-reg4; T reg17=reg5-reg7; T reg18=0.21132486540518713447*elem.pos(6)[0]; T reg19=reg8-reg12;
    reg10=reg10+reg13; T reg20=0.78867513459481286553*elem.pos(7)[0]; T reg21=0.78867513459481286553*elem.pos(4)[2]; T reg22=0.21132486540518713447*elem.pos(6)[1]; reg11=reg11+reg9;
    T reg23=0.78867513459481286553*elem.pos(7)[1]; reg19=reg18+reg19; T reg24=0.78867513459481286553*elem.pos(7)[2]; reg16=reg14+reg16; T reg25=0.21132486540518713447*elem.pos(6)[2];
    T reg26=0.21132486540518713447*elem.pos(7)[0]; reg10=reg10-reg20; reg11=reg11-reg23; reg17=reg22+reg17; T reg27=reg15-reg21;
    T reg28=0.21132486540518713447*elem.pos(7)[1]; reg27=reg27+reg25; T reg29=pow(reg10,2); T reg30=pow(reg11,2); reg19=reg19-reg26;
    T reg31=0.21132486540518713447*elem.pos(7)[2]; reg16=reg16-reg24; reg17=reg17-reg28; T reg32=pow(reg17,2); T reg33=pow(reg19,2);
    T reg34=pow(reg16,2); reg30=reg29+reg30; reg27=reg27-reg31; reg33=reg32+reg33; reg29=pow(reg27,2);
    reg32=reg5+reg3; T reg35=reg7+reg2; reg34=reg30+reg34; reg30=reg12+reg1; T reg36=reg8+reg0;
    reg29=reg33+reg29; reg36=reg13-reg36; reg32=reg9-reg32; reg33=reg4+reg15; reg34=pow(reg34,0.5);
    T reg37=reg21+reg6; reg30=reg18-reg30; reg35=reg22-reg35; reg36=reg36+reg26; T reg38=reg10/reg34;
    T reg39=reg11/reg34; reg35=reg35+reg23; reg30=reg30+reg20; reg32=reg28+reg32; reg33=reg14-reg33;
    reg29=pow(reg29,0.5); reg37=reg25-reg37; reg33=reg31+reg33; T reg40=reg17/reg29; T reg41=reg19/reg29;
    reg37=reg24+reg37; T reg42=reg35*reg39; T reg43=reg30*reg38; reg34=reg16/reg34; T reg44=reg39*reg32;
    T reg45=reg36*reg38; T reg46=reg40*reg32; T reg47=reg36*reg41; T reg48=reg34*reg37; reg29=reg27/reg29;
    reg42=reg43+reg42; reg43=reg33*reg34; reg45=reg44+reg45; reg44=reg33*reg29; T reg49=reg35*reg40;
    T reg50=reg30*reg41; reg47=reg46+reg47; reg48=reg42+reg48; reg45=reg43+reg45; reg42=reg39*reg48;
    reg43=reg38*reg48; reg47=reg44+reg47; reg44=reg38*reg45; reg46=reg39*reg45; T reg51=reg29*reg37;
    reg50=reg49+reg50; reg49=reg40*reg47; reg50=reg51+reg50; reg44=reg36-reg44; reg51=reg41*reg47;
    reg46=reg32-reg46; T reg52=reg34*reg45; T reg53=reg34*reg48; reg42=reg35-reg42; reg43=reg30-reg43;
    reg49=reg32-reg49; T reg54=pow(reg42,2); T reg55=pow(reg43,2); T reg56=reg40*reg50; T reg57=reg41*reg50;
    T reg58=reg29*reg47; reg51=reg36-reg51; reg53=reg37-reg53; T reg59=pow(reg44,2); T reg60=pow(reg46,2);
    reg52=reg33-reg52; reg57=reg30-reg57; reg56=reg35-reg56; T reg61=reg29*reg50; T reg62=pow(reg52,2);
    reg58=reg33-reg58; reg60=reg59+reg60; reg59=pow(reg49,2); T reg63=pow(reg51,2); T reg64=pow(reg53,2);
    reg54=reg55+reg54; reg64=reg54+reg64; reg54=pow(reg56,2); reg61=reg37-reg61; reg55=pow(reg57,2);
    reg62=reg60+reg62; reg60=pow(reg58,2); reg63=reg59+reg63; reg62=pow(reg62,0.5); reg59=pow(reg61,2);
    reg55=reg54+reg55; reg63=reg60+reg63; reg64=pow(reg64,0.5); reg52=reg52/reg62; reg44=reg44/reg62;
    reg62=reg46/reg62; reg42=reg42/reg64; reg43=reg43/reg64; reg64=reg53/reg64; reg55=reg59+reg55;
    reg63=pow(reg63,0.5); reg46=reg39*reg11; reg53=reg38*reg10; reg55=pow(reg55,0.5); reg54=reg62*reg11;
    reg59=reg39*reg44; reg60=reg44*reg10; reg51=reg51/reg63; T reg65=reg38*reg42; T reg66=reg39*reg43;
    T reg67=reg39*reg64; T reg68=reg34*reg42; T reg69=reg34*reg43; T reg70=reg38*reg64; T reg71=reg35*reg42;
    T reg72=reg36*reg44; T reg73=reg62*reg32; T reg74=reg30*reg43; reg42=reg11*reg42; reg43=reg10*reg43;
    reg44=reg34*reg44; reg58=reg58/reg63; reg10=reg38*reg52; reg38=reg38*reg62; reg39=reg39*reg52;
    reg63=reg49/reg63; reg62=reg34*reg62; reg57=reg57/reg55; reg56=reg56/reg55; reg55=reg61/reg55;
    reg66=reg65-reg66; reg10=reg44-reg10; reg68=reg67-reg68; reg70=reg69-reg70; reg11=reg37*reg64;
    reg62=reg39-reg62; reg39=reg17*reg63; reg44=reg51*reg19; reg74=reg71+reg74; reg64=reg16*reg64;
    reg43=reg42+reg43; reg42=reg41*reg19; reg34=reg34*reg16; reg53=reg46+reg53; reg46=reg17*reg40;
    reg49=reg33*reg52; reg73=reg72+reg73; reg59=reg38-reg59; reg60=reg54+reg60; reg38=reg51*reg29;
    reg16=reg52*reg16; reg52=reg41*reg58; reg36=reg36*reg51; reg54=reg58*reg40; reg61=reg63*reg29;
    reg32=reg63*reg32; reg63=reg41*reg63; reg51=reg51*reg40; reg70=skin_elem.p*reg70; reg59=skin_elem.p*reg59;
    reg30=reg30*reg57; reg65=reg41*reg56; reg35=reg35*reg56; reg67=reg40*reg57; reg49=reg73+reg49;
    reg51=reg63-reg51; reg63=reg27*reg29; reg69=reg27*reg58; reg34=reg53+reg34; reg74=reg11+reg74;
    reg42=reg46+reg42; reg52=reg38-reg52; reg44=reg39+reg44; reg62=skin_elem.p*reg62; reg10=skin_elem.p*reg10;
    reg41=reg41*reg55; reg16=reg60+reg16; reg61=reg54-reg61; reg40=reg40*reg55; reg11=reg29*reg56;
    reg29=reg29*reg57; reg58=reg33*reg58; reg36=reg32+reg36; reg57=reg19*reg57; reg56=reg17*reg56;
    reg66=skin_elem.p*reg66; reg43=reg64+reg43; reg68=skin_elem.p*reg68; reg17=0.16666666666666667632*reg68; reg19=0.044658198738520458147*skin_elem.f_surf[1];
    reg32=0.16666666666666667632*skin_elem.f_surf[1]; reg43=reg48*reg43; reg74=reg34*reg74; reg33=0.6220084679281461892*skin_elem.f_surf[1]; reg36=reg58+reg36;
    reg38=0.044658198738520458147*skin_elem.f_surf[2]; reg39=0.16666666666666667632*skin_elem.f_surf[2]; reg46=0.6220084679281461892*skin_elem.f_surf[2]; reg48=0.044658198738520458147*reg10; reg53=0.044658198738520458147*reg59;
    reg54=0.16666666666666667632*reg66; reg58=0.044658198738520458147*reg62; reg51=skin_elem.p*reg51; reg60=0.044658198738520458147*reg70; reg64=0.044658198738520458147*reg66;
    reg71=0.6220084679281461892*reg66; reg72=0.6220084679281461892*reg10; reg67=reg65-reg67; reg65=0.6220084679281461892*reg59; reg11=reg40-reg11;
    reg40=0.16666666666666667632*reg62; reg61=skin_elem.p*reg61; reg52=skin_elem.p*reg52; reg44=reg69+reg44; reg41=reg29-reg41;
    reg29=0.16666666666666667632*skin_elem.f_surf[0]; reg69=0.6220084679281461892*reg68; reg57=reg56+reg57; reg56=0.6220084679281461892*skin_elem.f_surf[0]; reg27=reg27*reg55;
    reg73=0.044658198738520458147*skin_elem.f_surf[0]; T reg75=0.16666666666666667632*reg59; T reg76=0.6220084679281461892*reg70; reg30=reg35+reg30; reg55=reg37*reg55;
    reg42=reg63+reg42; reg34=reg49*reg34; reg35=0.16666666666666667632*reg70; reg37=0.16666666666666667632*reg10; reg45=reg16*reg45;
    reg16=0.6220084679281461892*reg62; reg49=0.044658198738520458147*reg68; reg40=reg29+reg40; reg49=reg73+reg49; reg16=reg56+reg16;
    reg71=reg46+reg71; reg67=skin_elem.p*reg67; reg11=skin_elem.p*reg11; reg41=skin_elem.p*reg41; reg57=reg27+reg57;
    reg30=reg55+reg30; reg45=reg34-reg45; reg65=reg46+reg65; reg27=0.16666666666666667632*reg51; reg60=reg19+reg60;
    reg43=reg74-reg43; reg34=0.6220084679281461892*reg52; reg55=0.16666666666666667632*reg52; reg53=reg38+reg53; reg54=reg39+reg54;
    reg76=reg33+reg76; reg63=0.044658198738520458147*reg51; reg64=reg38+reg64; reg75=reg39+reg75; reg72=reg33+reg72;
    reg74=0.044658198738520458147*reg61; T reg77=0.6220084679281461892*reg61; reg17=reg29+reg17; reg36=reg36*reg42; reg35=reg32+reg35;
    reg58=reg73+reg58; reg69=reg56+reg69; reg37=reg32+reg37; reg47=reg44*reg47; reg44=0.16666666666666667632*reg61;
    T reg78=0.6220084679281461892*reg51; T reg79=0.044658198738520458147*reg52; reg48=reg19+reg48; reg72=reg45*reg72; reg48=reg45*reg48;
    reg54=reg54*reg43; reg78=reg46+reg78; reg55=reg32+reg55; T reg80=0.16666666666666667632*reg11; reg35=reg35*reg43;
    T reg81=0.6220084679281461892*reg41; reg58=reg45*reg58; T reg82=0.6220084679281461892*reg67; reg65=reg45*reg65; reg37=reg45*reg37;
    T reg83=0.044658198738520458147*reg41; reg34=reg33+reg34; reg53=reg45*reg53; T reg84=0.16666666666666667632*reg67; reg27=reg27+reg39;
    reg44=reg29+reg44; T reg85=0.6220084679281461892*reg11; reg71=reg43*reg71; T reg86=0.044658198738520458147*reg67; T reg87=0.16666666666666667632*reg41;
    reg76=reg76*reg43; reg74=reg73+reg74; reg40=reg45*reg40; reg47=reg36-reg47; reg57=reg50*reg57;
    reg36=0.044658198738520458147*reg11; reg75=reg45*reg75; reg63=reg38+reg63; reg69=reg69*reg43; reg64=reg64*reg43;
    reg17=reg17*reg43; reg16=reg45*reg16; reg30=reg42*reg30; reg49=reg49*reg43; reg79=reg19+reg79;
    reg60=reg60*reg43; reg77=reg56+reg77; reg71=0.25*reg71; reg37=0.25*reg37; reg55=reg55*reg47;
    reg63=reg63*reg47; reg81=reg33+reg81; reg34=reg34*reg47; reg84=reg84+reg39; reg27=reg27*reg47;
    reg44=reg47*reg44; reg69=0.25*reg69; reg82=reg46+reg82; reg74=reg74*reg47; reg57=reg30-reg57;
    reg48=0.25*reg48; reg79=reg79*reg47; reg78=reg47*reg78; reg35=0.25*reg35; reg54=0.25*reg54;
    reg83=reg19+reg83; reg64=0.25*reg64; reg76=0.25*reg76; reg16=0.25*reg16; reg58=0.25*reg58;
    reg80=reg29+reg80; reg75=0.25*reg75; reg86=reg38+reg86; reg60=0.25*reg60; reg49=0.25*reg49;
    reg17=0.25*reg17; reg40=0.25*reg40; reg87=reg32+reg87; reg77=reg47*reg77; reg85=reg56+reg85;
    reg72=0.25*reg72; reg53=0.25*reg53; reg65=0.25*reg65; reg36=reg73+reg36; reg16=reg17+reg16;
    reg69=reg69+reg40; reg55=0.25*reg55; reg80=reg80*reg57; reg87=reg87*reg57; reg48=reg48+reg35;
    reg72=reg35+reg72; reg65=reg65+reg54; reg60=reg37+reg60; reg81=reg81*reg57; reg49=reg40+reg49;
    reg17=reg58+reg17; reg77=0.25*reg77; reg54=reg53+reg54; reg86=reg86*reg57; reg36=reg36*reg57;
    reg44=0.25*reg44; reg78=0.25*reg78; reg71=reg75+reg71; reg85=reg85*reg57; reg63=0.25*reg63;
    reg76=reg37+reg76; reg84=reg84*reg57; reg82=reg82*reg57; reg79=0.25*reg79; reg75=reg64+reg75;
    reg34=0.25*reg34; reg74=0.25*reg74; reg27=0.25*reg27; reg83=reg83*reg57; reg81=0.25*reg81;
    reg87=0.25*reg87; reg60=reg34+reg60; reg74=reg69+reg74; reg85=0.25*reg85; reg72=reg55+reg72;
    reg17=reg44+reg17; reg84=0.25*reg84; reg82=0.25*reg82; reg44=reg16+reg44; reg75=reg78+reg75;
    reg48=reg55+reg48; reg63=reg71+reg63; reg80=0.25*reg80; reg54=reg27+reg54; reg49=reg77+reg49;
    reg65=reg27+reg65; reg76=reg79+reg76; reg86=0.25*reg86; reg83=0.25*reg83; reg36=0.25*reg36;
    reg44=reg36+reg44; sollicitation[indices[6]+0]+=reg44; reg82=reg54+reg82; sollicitation[indices[4]+2]+=reg82; reg85=reg17+reg85;
    sollicitation[indices[4]+0]+=reg85; reg49=reg49+reg80; sollicitation[indices[5]+0]+=reg49; reg80=reg74+reg80; sollicitation[indices[7]+0]+=reg80;
    reg83=reg72+reg83; sollicitation[indices[6]+1]+=reg83; reg63=reg63+reg84; sollicitation[indices[7]+2]+=reg63; reg76=reg76+reg87;
    sollicitation[indices[7]+1]+=reg76; reg87=reg60+reg87; sollicitation[indices[5]+1]+=reg87; reg81=reg48+reg81; sollicitation[indices[4]+1]+=reg81;
    reg86=reg65+reg86; sollicitation[indices[6]+2]+=reg86; reg84=reg75+reg84; sollicitation[indices[5]+2]+=reg84;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(4)[0]; T reg1=0.21132486540518713447*elem.pos(5)[0]; T reg2=0.21132486540518713447*elem.pos(5)[1]; T reg3=0.21132486540518713447*elem.pos(4)[1]; T reg4=0.21132486540518713447*elem.pos(4)[2];
    T reg5=0.78867513459481286553*elem.pos(5)[1]; T reg6=0.21132486540518713447*elem.pos(5)[2]; T reg7=0.78867513459481286553*elem.pos(4)[1]; T reg8=0.78867513459481286553*elem.pos(5)[0]; T reg9=0.78867513459481286553*elem.pos(6)[1];
    T reg10=reg1-reg0; T reg11=reg2-reg3; T reg12=0.78867513459481286553*elem.pos(4)[0]; T reg13=0.78867513459481286553*elem.pos(6)[0]; T reg14=0.78867513459481286553*elem.pos(6)[2];
    T reg15=0.78867513459481286553*elem.pos(5)[2]; T reg16=reg6-reg4; T reg17=reg5-reg7; T reg18=0.21132486540518713447*elem.pos(6)[0]; T reg19=reg8-reg12;
    reg10=reg10+reg13; T reg20=0.78867513459481286553*elem.pos(7)[0]; T reg21=0.78867513459481286553*elem.pos(4)[2]; T reg22=0.21132486540518713447*elem.pos(6)[1]; reg11=reg11+reg9;
    T reg23=0.78867513459481286553*elem.pos(7)[1]; reg19=reg18+reg19; T reg24=0.78867513459481286553*elem.pos(7)[2]; reg16=reg14+reg16; T reg25=0.21132486540518713447*elem.pos(6)[2];
    T reg26=0.21132486540518713447*elem.pos(7)[0]; reg10=reg10-reg20; reg11=reg11-reg23; reg17=reg22+reg17; T reg27=reg15-reg21;
    T reg28=0.21132486540518713447*elem.pos(7)[1]; reg27=reg27+reg25; T reg29=pow(reg10,2); T reg30=pow(reg11,2); reg19=reg19-reg26;
    T reg31=0.21132486540518713447*elem.pos(7)[2]; reg16=reg16-reg24; reg17=reg17-reg28; T reg32=pow(reg17,2); T reg33=pow(reg19,2);
    T reg34=pow(reg16,2); reg30=reg29+reg30; reg27=reg27-reg31; reg33=reg32+reg33; reg29=pow(reg27,2);
    reg32=reg5+reg3; T reg35=reg7+reg2; reg34=reg30+reg34; reg30=reg12+reg1; T reg36=reg8+reg0;
    reg29=reg33+reg29; reg36=reg13-reg36; reg32=reg9-reg32; reg33=reg4+reg15; reg34=pow(reg34,0.5);
    T reg37=reg21+reg6; reg30=reg18-reg30; reg35=reg22-reg35; reg36=reg36+reg26; T reg38=reg10/reg34;
    T reg39=reg11/reg34; reg35=reg35+reg23; reg30=reg30+reg20; reg32=reg28+reg32; reg33=reg14-reg33;
    reg29=pow(reg29,0.5); reg37=reg25-reg37; reg33=reg31+reg33; T reg40=reg17/reg29; T reg41=reg19/reg29;
    reg37=reg24+reg37; T reg42=reg35*reg39; T reg43=reg30*reg38; reg34=reg16/reg34; T reg44=reg39*reg32;
    T reg45=reg36*reg38; T reg46=reg40*reg32; T reg47=reg36*reg41; T reg48=reg34*reg37; reg29=reg27/reg29;
    reg42=reg43+reg42; reg43=reg33*reg34; reg45=reg44+reg45; reg44=reg33*reg29; T reg49=reg35*reg40;
    T reg50=reg30*reg41; reg47=reg46+reg47; reg48=reg42+reg48; reg45=reg43+reg45; reg42=reg39*reg48;
    reg43=reg38*reg48; reg47=reg44+reg47; reg44=reg38*reg45; reg46=reg39*reg45; T reg51=reg29*reg37;
    reg50=reg49+reg50; reg49=reg40*reg47; reg50=reg51+reg50; reg44=reg36-reg44; reg51=reg41*reg47;
    reg46=reg32-reg46; T reg52=reg34*reg45; T reg53=reg34*reg48; reg42=reg35-reg42; reg43=reg30-reg43;
    reg49=reg32-reg49; T reg54=pow(reg42,2); T reg55=pow(reg43,2); T reg56=reg40*reg50; T reg57=reg41*reg50;
    T reg58=reg29*reg47; reg51=reg36-reg51; reg53=reg37-reg53; T reg59=pow(reg44,2); T reg60=pow(reg46,2);
    reg52=reg33-reg52; reg57=reg30-reg57; reg56=reg35-reg56; T reg61=reg29*reg50; T reg62=pow(reg52,2);
    reg58=reg33-reg58; reg60=reg59+reg60; reg59=pow(reg49,2); T reg63=pow(reg51,2); T reg64=pow(reg53,2);
    reg54=reg55+reg54; reg64=reg54+reg64; reg54=pow(reg56,2); reg61=reg37-reg61; reg55=pow(reg57,2);
    reg62=reg60+reg62; reg60=pow(reg58,2); reg63=reg59+reg63; reg62=pow(reg62,0.5); reg59=pow(reg61,2);
    reg55=reg54+reg55; reg63=reg60+reg63; reg64=pow(reg64,0.5); reg52=reg52/reg62; reg44=reg44/reg62;
    reg62=reg46/reg62; reg42=reg42/reg64; reg43=reg43/reg64; reg64=reg53/reg64; reg55=reg59+reg55;
    reg63=pow(reg63,0.5); reg46=reg39*reg11; reg53=reg38*reg10; reg55=pow(reg55,0.5); reg54=reg62*reg11;
    reg59=reg39*reg44; reg60=reg44*reg10; reg51=reg51/reg63; T reg65=reg38*reg42; T reg66=reg39*reg43;
    T reg67=reg39*reg64; T reg68=reg34*reg42; T reg69=reg34*reg43; T reg70=reg38*reg64; T reg71=reg35*reg42;
    T reg72=reg36*reg44; T reg73=reg62*reg32; T reg74=reg30*reg43; reg42=reg11*reg42; reg43=reg10*reg43;
    reg44=reg34*reg44; reg58=reg58/reg63; reg10=reg38*reg52; reg38=reg38*reg62; reg39=reg39*reg52;
    reg63=reg49/reg63; reg62=reg34*reg62; reg57=reg57/reg55; reg56=reg56/reg55; reg55=reg61/reg55;
    reg66=reg65-reg66; reg10=reg44-reg10; reg68=reg67-reg68; reg70=reg69-reg70; reg11=reg37*reg64;
    reg62=reg39-reg62; reg39=reg17*reg63; reg44=reg51*reg19; reg74=reg71+reg74; reg64=reg16*reg64;
    reg43=reg42+reg43; reg42=reg41*reg19; reg34=reg34*reg16; reg53=reg46+reg53; reg46=reg17*reg40;
    reg49=reg33*reg52; reg73=reg72+reg73; reg59=reg38-reg59; reg60=reg54+reg60; reg38=reg51*reg29;
    reg16=reg52*reg16; reg52=reg41*reg58; reg36=reg36*reg51; reg54=reg58*reg40; reg61=reg63*reg29;
    reg32=reg63*reg32; reg63=reg41*reg63; reg51=reg51*reg40; reg70=skin_elem.p*reg70; reg59=skin_elem.p*reg59;
    reg30=reg30*reg57; reg65=reg41*reg56; reg35=reg35*reg56; reg67=reg40*reg57; reg49=reg73+reg49;
    reg51=reg63-reg51; reg63=reg27*reg29; reg69=reg27*reg58; reg34=reg53+reg34; reg74=reg11+reg74;
    reg42=reg46+reg42; reg52=reg38-reg52; reg44=reg39+reg44; reg62=skin_elem.p*reg62; reg10=skin_elem.p*reg10;
    reg41=reg41*reg55; reg16=reg60+reg16; reg61=reg54-reg61; reg40=reg40*reg55; reg11=reg29*reg56;
    reg29=reg29*reg57; reg58=reg33*reg58; reg36=reg32+reg36; reg57=reg19*reg57; reg56=reg17*reg56;
    reg66=skin_elem.p*reg66; reg43=reg64+reg43; reg68=skin_elem.p*reg68; reg17=0.16666666666666667632*reg68; reg19=0.044658198738520458147*skin_elem.f_surf[1];
    reg32=0.16666666666666667632*skin_elem.f_surf[1]; reg43=reg48*reg43; reg74=reg34*reg74; reg33=0.6220084679281461892*skin_elem.f_surf[1]; reg36=reg58+reg36;
    reg38=0.044658198738520458147*skin_elem.f_surf[2]; reg39=0.16666666666666667632*skin_elem.f_surf[2]; reg46=0.6220084679281461892*skin_elem.f_surf[2]; reg48=0.044658198738520458147*reg10; reg53=0.044658198738520458147*reg59;
    reg54=0.16666666666666667632*reg66; reg58=0.044658198738520458147*reg62; reg51=skin_elem.p*reg51; reg60=0.044658198738520458147*reg70; reg64=0.044658198738520458147*reg66;
    reg71=0.6220084679281461892*reg66; reg72=0.6220084679281461892*reg10; reg67=reg65-reg67; reg65=0.6220084679281461892*reg59; reg11=reg40-reg11;
    reg40=0.16666666666666667632*reg62; reg61=skin_elem.p*reg61; reg52=skin_elem.p*reg52; reg44=reg69+reg44; reg41=reg29-reg41;
    reg29=0.16666666666666667632*skin_elem.f_surf[0]; reg69=0.6220084679281461892*reg68; reg57=reg56+reg57; reg56=0.6220084679281461892*skin_elem.f_surf[0]; reg27=reg27*reg55;
    reg73=0.044658198738520458147*skin_elem.f_surf[0]; T reg75=0.16666666666666667632*reg59; T reg76=0.6220084679281461892*reg70; reg30=reg35+reg30; reg55=reg37*reg55;
    reg42=reg63+reg42; reg34=reg49*reg34; reg35=0.16666666666666667632*reg70; reg37=0.16666666666666667632*reg10; reg45=reg16*reg45;
    reg16=0.6220084679281461892*reg62; reg49=0.044658198738520458147*reg68; reg40=reg29+reg40; reg49=reg73+reg49; reg16=reg56+reg16;
    reg71=reg46+reg71; reg67=skin_elem.p*reg67; reg11=skin_elem.p*reg11; reg41=skin_elem.p*reg41; reg57=reg27+reg57;
    reg30=reg55+reg30; reg45=reg34-reg45; reg65=reg46+reg65; reg27=0.16666666666666667632*reg51; reg60=reg19+reg60;
    reg43=reg74-reg43; reg34=0.6220084679281461892*reg52; reg55=0.16666666666666667632*reg52; reg53=reg38+reg53; reg54=reg39+reg54;
    reg76=reg33+reg76; reg63=0.044658198738520458147*reg51; reg64=reg38+reg64; reg75=reg39+reg75; reg72=reg33+reg72;
    reg74=0.044658198738520458147*reg61; T reg77=0.6220084679281461892*reg61; reg17=reg29+reg17; reg36=reg36*reg42; reg35=reg32+reg35;
    reg58=reg73+reg58; reg69=reg56+reg69; reg37=reg32+reg37; reg47=reg44*reg47; reg44=0.16666666666666667632*reg61;
    T reg78=0.6220084679281461892*reg51; T reg79=0.044658198738520458147*reg52; reg48=reg19+reg48; reg72=reg45*reg72; reg48=reg45*reg48;
    reg54=reg54*reg43; reg78=reg46+reg78; reg55=reg32+reg55; T reg80=0.16666666666666667632*reg11; reg35=reg35*reg43;
    T reg81=0.6220084679281461892*reg41; reg58=reg45*reg58; T reg82=0.6220084679281461892*reg67; reg65=reg45*reg65; reg37=reg45*reg37;
    T reg83=0.044658198738520458147*reg41; reg34=reg33+reg34; reg53=reg45*reg53; T reg84=0.16666666666666667632*reg67; reg27=reg27+reg39;
    reg44=reg29+reg44; T reg85=0.6220084679281461892*reg11; reg71=reg43*reg71; T reg86=0.044658198738520458147*reg67; T reg87=0.16666666666666667632*reg41;
    reg76=reg76*reg43; reg74=reg73+reg74; reg40=reg45*reg40; reg47=reg36-reg47; reg57=reg50*reg57;
    reg36=0.044658198738520458147*reg11; reg75=reg45*reg75; reg63=reg38+reg63; reg69=reg69*reg43; reg64=reg64*reg43;
    reg17=reg17*reg43; reg16=reg45*reg16; reg30=reg42*reg30; reg49=reg49*reg43; reg79=reg19+reg79;
    reg60=reg60*reg43; reg77=reg56+reg77; reg71=0.25*reg71; reg37=0.25*reg37; reg55=reg55*reg47;
    reg63=reg63*reg47; reg81=reg33+reg81; reg34=reg34*reg47; reg84=reg84+reg39; reg27=reg27*reg47;
    reg44=reg47*reg44; reg69=0.25*reg69; reg82=reg46+reg82; reg74=reg74*reg47; reg57=reg30-reg57;
    reg48=0.25*reg48; reg79=reg79*reg47; reg78=reg47*reg78; reg35=0.25*reg35; reg54=0.25*reg54;
    reg83=reg19+reg83; reg64=0.25*reg64; reg76=0.25*reg76; reg16=0.25*reg16; reg58=0.25*reg58;
    reg80=reg29+reg80; reg75=0.25*reg75; reg86=reg38+reg86; reg60=0.25*reg60; reg49=0.25*reg49;
    reg17=0.25*reg17; reg40=0.25*reg40; reg87=reg32+reg87; reg77=reg47*reg77; reg85=reg56+reg85;
    reg72=0.25*reg72; reg53=0.25*reg53; reg65=0.25*reg65; reg36=reg73+reg36; reg16=reg17+reg16;
    reg69=reg69+reg40; reg55=0.25*reg55; reg80=reg80*reg57; reg87=reg87*reg57; reg48=reg48+reg35;
    reg72=reg35+reg72; reg65=reg65+reg54; reg60=reg37+reg60; reg81=reg81*reg57; reg49=reg40+reg49;
    reg17=reg58+reg17; reg77=0.25*reg77; reg54=reg53+reg54; reg86=reg86*reg57; reg36=reg36*reg57;
    reg44=0.25*reg44; reg78=0.25*reg78; reg71=reg75+reg71; reg85=reg85*reg57; reg63=0.25*reg63;
    reg76=reg37+reg76; reg84=reg84*reg57; reg82=reg82*reg57; reg79=0.25*reg79; reg75=reg64+reg75;
    reg34=0.25*reg34; reg74=0.25*reg74; reg27=0.25*reg27; reg83=reg83*reg57; reg81=0.25*reg81;
    reg87=0.25*reg87; reg60=reg34+reg60; reg74=reg69+reg74; reg85=0.25*reg85; reg72=reg55+reg72;
    reg17=reg44+reg17; reg84=0.25*reg84; reg82=0.25*reg82; reg44=reg16+reg44; reg75=reg78+reg75;
    reg48=reg55+reg48; reg63=reg71+reg63; reg80=0.25*reg80; reg54=reg27+reg54; reg49=reg77+reg49;
    reg65=reg27+reg65; reg76=reg79+reg76; reg86=0.25*reg86; reg83=0.25*reg83; reg36=0.25*reg36;
    reg44=reg36+reg44; sollicitation[indices[6]+0]+=reg44; reg82=reg54+reg82; sollicitation[indices[4]+2]+=reg82; reg85=reg17+reg85;
    sollicitation[indices[4]+0]+=reg85; reg49=reg49+reg80; sollicitation[indices[5]+0]+=reg49; reg80=reg74+reg80; sollicitation[indices[7]+0]+=reg80;
    reg83=reg72+reg83; sollicitation[indices[6]+1]+=reg83; reg63=reg63+reg84; sollicitation[indices[7]+2]+=reg63; reg76=reg76+reg87;
    sollicitation[indices[7]+1]+=reg76; reg87=reg60+reg87; sollicitation[indices[5]+1]+=reg87; reg81=reg48+reg81; sollicitation[indices[4]+1]+=reg81;
    reg86=reg65+reg86; sollicitation[indices[6]+2]+=reg86; reg84=reg75+reg84; sollicitation[indices[5]+2]+=reg84;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(4)[0]; T reg1=0.21132486540518713447*elem.pos(5)[0]; T reg2=0.21132486540518713447*elem.pos(5)[1]; T reg3=0.21132486540518713447*elem.pos(4)[1]; T reg4=0.21132486540518713447*elem.pos(4)[2];
    T reg5=0.78867513459481286553*elem.pos(5)[1]; T reg6=0.21132486540518713447*elem.pos(5)[2]; T reg7=0.78867513459481286553*elem.pos(4)[1]; T reg8=0.78867513459481286553*elem.pos(5)[0]; T reg9=0.78867513459481286553*elem.pos(6)[1];
    T reg10=reg1-reg0; T reg11=reg2-reg3; T reg12=0.78867513459481286553*elem.pos(4)[0]; T reg13=0.78867513459481286553*elem.pos(6)[0]; T reg14=0.78867513459481286553*elem.pos(6)[2];
    T reg15=0.78867513459481286553*elem.pos(5)[2]; T reg16=reg6-reg4; T reg17=reg5-reg7; T reg18=0.21132486540518713447*elem.pos(6)[0]; T reg19=reg8-reg12;
    reg10=reg10+reg13; T reg20=0.78867513459481286553*elem.pos(7)[0]; T reg21=0.78867513459481286553*elem.pos(4)[2]; T reg22=0.21132486540518713447*elem.pos(6)[1]; reg11=reg11+reg9;
    T reg23=0.78867513459481286553*elem.pos(7)[1]; reg19=reg18+reg19; T reg24=0.78867513459481286553*elem.pos(7)[2]; reg16=reg14+reg16; T reg25=0.21132486540518713447*elem.pos(6)[2];
    T reg26=0.21132486540518713447*elem.pos(7)[0]; reg10=reg10-reg20; reg11=reg11-reg23; reg17=reg22+reg17; T reg27=reg15-reg21;
    T reg28=0.21132486540518713447*elem.pos(7)[1]; reg27=reg27+reg25; T reg29=pow(reg10,2); T reg30=pow(reg11,2); reg19=reg19-reg26;
    T reg31=0.21132486540518713447*elem.pos(7)[2]; reg16=reg16-reg24; reg17=reg17-reg28; T reg32=pow(reg17,2); T reg33=pow(reg19,2);
    T reg34=pow(reg16,2); reg30=reg29+reg30; reg27=reg27-reg31; reg33=reg32+reg33; reg29=pow(reg27,2);
    reg32=reg5+reg3; T reg35=reg7+reg2; reg34=reg30+reg34; reg30=reg12+reg1; T reg36=reg8+reg0;
    reg29=reg33+reg29; reg36=reg13-reg36; reg32=reg9-reg32; reg33=reg4+reg15; reg34=pow(reg34,0.5);
    T reg37=reg21+reg6; reg30=reg18-reg30; reg35=reg22-reg35; reg36=reg36+reg26; T reg38=reg10/reg34;
    T reg39=reg11/reg34; reg35=reg35+reg23; reg30=reg30+reg20; reg32=reg28+reg32; reg33=reg14-reg33;
    reg29=pow(reg29,0.5); reg37=reg25-reg37; reg33=reg31+reg33; T reg40=reg17/reg29; T reg41=reg19/reg29;
    reg37=reg24+reg37; T reg42=reg35*reg39; T reg43=reg30*reg38; reg34=reg16/reg34; T reg44=reg39*reg32;
    T reg45=reg36*reg38; T reg46=reg40*reg32; T reg47=reg36*reg41; T reg48=reg34*reg37; reg29=reg27/reg29;
    reg42=reg43+reg42; reg43=reg33*reg34; reg45=reg44+reg45; reg44=reg33*reg29; T reg49=reg35*reg40;
    T reg50=reg30*reg41; reg47=reg46+reg47; reg48=reg42+reg48; reg45=reg43+reg45; reg42=reg39*reg48;
    reg43=reg38*reg48; reg47=reg44+reg47; reg44=reg38*reg45; reg46=reg39*reg45; T reg51=reg29*reg37;
    reg50=reg49+reg50; reg49=reg40*reg47; reg50=reg51+reg50; reg44=reg36-reg44; reg51=reg41*reg47;
    reg46=reg32-reg46; T reg52=reg34*reg45; T reg53=reg34*reg48; reg42=reg35-reg42; reg43=reg30-reg43;
    reg49=reg32-reg49; T reg54=pow(reg42,2); T reg55=pow(reg43,2); T reg56=reg40*reg50; T reg57=reg41*reg50;
    T reg58=reg29*reg47; reg51=reg36-reg51; reg53=reg37-reg53; T reg59=pow(reg44,2); T reg60=pow(reg46,2);
    reg52=reg33-reg52; reg57=reg30-reg57; reg56=reg35-reg56; T reg61=reg29*reg50; T reg62=pow(reg52,2);
    reg58=reg33-reg58; reg60=reg59+reg60; reg59=pow(reg49,2); T reg63=pow(reg51,2); T reg64=pow(reg53,2);
    reg54=reg55+reg54; reg64=reg54+reg64; reg54=pow(reg56,2); reg61=reg37-reg61; reg55=pow(reg57,2);
    reg62=reg60+reg62; reg60=pow(reg58,2); reg63=reg59+reg63; reg62=pow(reg62,0.5); reg59=pow(reg61,2);
    reg55=reg54+reg55; reg63=reg60+reg63; reg64=pow(reg64,0.5); reg52=reg52/reg62; reg44=reg44/reg62;
    reg62=reg46/reg62; reg42=reg42/reg64; reg43=reg43/reg64; reg64=reg53/reg64; reg55=reg59+reg55;
    reg63=pow(reg63,0.5); reg46=reg39*reg11; reg53=reg38*reg10; reg55=pow(reg55,0.5); reg54=reg62*reg11;
    reg59=reg39*reg44; reg60=reg44*reg10; reg51=reg51/reg63; T reg65=reg38*reg42; T reg66=reg39*reg43;
    T reg67=reg39*reg64; T reg68=reg34*reg42; T reg69=reg34*reg43; T reg70=reg38*reg64; T reg71=reg35*reg42;
    T reg72=reg36*reg44; T reg73=reg62*reg32; T reg74=reg30*reg43; reg42=reg11*reg42; reg43=reg10*reg43;
    reg44=reg34*reg44; reg58=reg58/reg63; reg10=reg38*reg52; reg38=reg38*reg62; reg39=reg39*reg52;
    reg63=reg49/reg63; reg62=reg34*reg62; reg57=reg57/reg55; reg56=reg56/reg55; reg55=reg61/reg55;
    reg66=reg65-reg66; reg10=reg44-reg10; reg68=reg67-reg68; reg70=reg69-reg70; reg11=reg37*reg64;
    reg62=reg39-reg62; reg39=reg17*reg63; reg44=reg51*reg19; reg74=reg71+reg74; reg64=reg16*reg64;
    reg43=reg42+reg43; reg42=reg41*reg19; reg34=reg34*reg16; reg53=reg46+reg53; reg46=reg17*reg40;
    reg49=reg33*reg52; reg73=reg72+reg73; reg59=reg38-reg59; reg60=reg54+reg60; reg38=reg51*reg29;
    reg16=reg52*reg16; reg52=reg41*reg58; reg36=reg36*reg51; reg54=reg58*reg40; reg61=reg63*reg29;
    reg32=reg63*reg32; reg63=reg41*reg63; reg51=reg51*reg40; reg70=skin_elem.p*reg70; reg59=skin_elem.p*reg59;
    reg30=reg30*reg57; reg65=reg41*reg56; reg35=reg35*reg56; reg67=reg40*reg57; reg49=reg73+reg49;
    reg51=reg63-reg51; reg63=reg27*reg29; reg69=reg27*reg58; reg34=reg53+reg34; reg74=reg11+reg74;
    reg42=reg46+reg42; reg52=reg38-reg52; reg44=reg39+reg44; reg62=skin_elem.p*reg62; reg10=skin_elem.p*reg10;
    reg41=reg41*reg55; reg16=reg60+reg16; reg61=reg54-reg61; reg40=reg40*reg55; reg11=reg29*reg56;
    reg29=reg29*reg57; reg58=reg33*reg58; reg36=reg32+reg36; reg57=reg19*reg57; reg56=reg17*reg56;
    reg66=skin_elem.p*reg66; reg43=reg64+reg43; reg68=skin_elem.p*reg68; reg17=0.16666666666666667632*reg68; reg19=0.044658198738520458147*skin_elem.f_surf[1];
    reg32=0.16666666666666667632*skin_elem.f_surf[1]; reg43=reg48*reg43; reg74=reg34*reg74; reg33=0.6220084679281461892*skin_elem.f_surf[1]; reg36=reg58+reg36;
    reg38=0.044658198738520458147*skin_elem.f_surf[2]; reg39=0.16666666666666667632*skin_elem.f_surf[2]; reg46=0.6220084679281461892*skin_elem.f_surf[2]; reg48=0.044658198738520458147*reg10; reg53=0.044658198738520458147*reg59;
    reg54=0.16666666666666667632*reg66; reg58=0.044658198738520458147*reg62; reg51=skin_elem.p*reg51; reg60=0.044658198738520458147*reg70; reg64=0.044658198738520458147*reg66;
    reg71=0.6220084679281461892*reg66; reg72=0.6220084679281461892*reg10; reg67=reg65-reg67; reg65=0.6220084679281461892*reg59; reg11=reg40-reg11;
    reg40=0.16666666666666667632*reg62; reg61=skin_elem.p*reg61; reg52=skin_elem.p*reg52; reg44=reg69+reg44; reg41=reg29-reg41;
    reg29=0.16666666666666667632*skin_elem.f_surf[0]; reg69=0.6220084679281461892*reg68; reg57=reg56+reg57; reg56=0.6220084679281461892*skin_elem.f_surf[0]; reg27=reg27*reg55;
    reg73=0.044658198738520458147*skin_elem.f_surf[0]; T reg75=0.16666666666666667632*reg59; T reg76=0.6220084679281461892*reg70; reg30=reg35+reg30; reg55=reg37*reg55;
    reg42=reg63+reg42; reg34=reg49*reg34; reg35=0.16666666666666667632*reg70; reg37=0.16666666666666667632*reg10; reg45=reg16*reg45;
    reg16=0.6220084679281461892*reg62; reg49=0.044658198738520458147*reg68; reg40=reg29+reg40; reg49=reg73+reg49; reg16=reg56+reg16;
    reg71=reg46+reg71; reg67=skin_elem.p*reg67; reg11=skin_elem.p*reg11; reg41=skin_elem.p*reg41; reg57=reg27+reg57;
    reg30=reg55+reg30; reg45=reg34-reg45; reg65=reg46+reg65; reg27=0.16666666666666667632*reg51; reg60=reg19+reg60;
    reg43=reg74-reg43; reg34=0.6220084679281461892*reg52; reg55=0.16666666666666667632*reg52; reg53=reg38+reg53; reg54=reg39+reg54;
    reg76=reg33+reg76; reg63=0.044658198738520458147*reg51; reg64=reg38+reg64; reg75=reg39+reg75; reg72=reg33+reg72;
    reg74=0.044658198738520458147*reg61; T reg77=0.6220084679281461892*reg61; reg17=reg29+reg17; reg36=reg36*reg42; reg35=reg32+reg35;
    reg58=reg73+reg58; reg69=reg56+reg69; reg37=reg32+reg37; reg47=reg44*reg47; reg44=0.16666666666666667632*reg61;
    T reg78=0.6220084679281461892*reg51; T reg79=0.044658198738520458147*reg52; reg48=reg19+reg48; reg72=reg45*reg72; reg48=reg45*reg48;
    reg54=reg54*reg43; reg78=reg46+reg78; reg55=reg32+reg55; T reg80=0.16666666666666667632*reg11; reg35=reg35*reg43;
    T reg81=0.6220084679281461892*reg41; reg58=reg45*reg58; T reg82=0.6220084679281461892*reg67; reg65=reg45*reg65; reg37=reg45*reg37;
    T reg83=0.044658198738520458147*reg41; reg34=reg33+reg34; reg53=reg45*reg53; T reg84=0.16666666666666667632*reg67; reg27=reg27+reg39;
    reg44=reg29+reg44; T reg85=0.6220084679281461892*reg11; reg71=reg43*reg71; T reg86=0.044658198738520458147*reg67; T reg87=0.16666666666666667632*reg41;
    reg76=reg76*reg43; reg74=reg73+reg74; reg40=reg45*reg40; reg47=reg36-reg47; reg57=reg50*reg57;
    reg36=0.044658198738520458147*reg11; reg75=reg45*reg75; reg63=reg38+reg63; reg69=reg69*reg43; reg64=reg64*reg43;
    reg17=reg17*reg43; reg16=reg45*reg16; reg30=reg42*reg30; reg49=reg49*reg43; reg79=reg19+reg79;
    reg60=reg60*reg43; reg77=reg56+reg77; reg71=0.25*reg71; reg37=0.25*reg37; reg55=reg55*reg47;
    reg63=reg63*reg47; reg81=reg33+reg81; reg34=reg34*reg47; reg84=reg84+reg39; reg27=reg27*reg47;
    reg44=reg47*reg44; reg69=0.25*reg69; reg82=reg46+reg82; reg74=reg74*reg47; reg57=reg30-reg57;
    reg48=0.25*reg48; reg79=reg79*reg47; reg78=reg47*reg78; reg35=0.25*reg35; reg54=0.25*reg54;
    reg83=reg19+reg83; reg64=0.25*reg64; reg76=0.25*reg76; reg16=0.25*reg16; reg58=0.25*reg58;
    reg80=reg29+reg80; reg75=0.25*reg75; reg86=reg38+reg86; reg60=0.25*reg60; reg49=0.25*reg49;
    reg17=0.25*reg17; reg40=0.25*reg40; reg87=reg32+reg87; reg77=reg47*reg77; reg85=reg56+reg85;
    reg72=0.25*reg72; reg53=0.25*reg53; reg65=0.25*reg65; reg36=reg73+reg36; reg16=reg17+reg16;
    reg69=reg69+reg40; reg55=0.25*reg55; reg80=reg80*reg57; reg87=reg87*reg57; reg48=reg48+reg35;
    reg72=reg35+reg72; reg65=reg65+reg54; reg60=reg37+reg60; reg81=reg81*reg57; reg49=reg40+reg49;
    reg17=reg58+reg17; reg77=0.25*reg77; reg54=reg53+reg54; reg86=reg86*reg57; reg36=reg36*reg57;
    reg44=0.25*reg44; reg78=0.25*reg78; reg71=reg75+reg71; reg85=reg85*reg57; reg63=0.25*reg63;
    reg76=reg37+reg76; reg84=reg84*reg57; reg82=reg82*reg57; reg79=0.25*reg79; reg75=reg64+reg75;
    reg34=0.25*reg34; reg74=0.25*reg74; reg27=0.25*reg27; reg83=reg83*reg57; reg81=0.25*reg81;
    reg87=0.25*reg87; reg60=reg34+reg60; reg74=reg69+reg74; reg85=0.25*reg85; reg72=reg55+reg72;
    reg17=reg44+reg17; reg84=0.25*reg84; reg82=0.25*reg82; reg44=reg16+reg44; reg75=reg78+reg75;
    reg48=reg55+reg48; reg63=reg71+reg63; reg80=0.25*reg80; reg54=reg27+reg54; reg49=reg77+reg49;
    reg65=reg27+reg65; reg76=reg79+reg76; reg86=0.25*reg86; reg83=0.25*reg83; reg36=0.25*reg36;
    reg44=reg36+reg44; sollicitation[indices[6]+0]+=reg44; reg82=reg54+reg82; sollicitation[indices[4]+2]+=reg82; reg85=reg17+reg85;
    sollicitation[indices[4]+0]+=reg85; reg49=reg49+reg80; sollicitation[indices[5]+0]+=reg49; reg80=reg74+reg80; sollicitation[indices[7]+0]+=reg80;
    reg83=reg72+reg83; sollicitation[indices[6]+1]+=reg83; reg63=reg63+reg84; sollicitation[indices[7]+2]+=reg63; reg76=reg76+reg87;
    sollicitation[indices[7]+1]+=reg76; reg87=reg60+reg87; sollicitation[indices[5]+1]+=reg87; reg81=reg48+reg81; sollicitation[indices[4]+1]+=reg81;
    reg86=reg65+reg86; sollicitation[indices[6]+2]+=reg86; reg84=reg75+reg84; sollicitation[indices[5]+2]+=reg84;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[0]; T reg1=0.21132486540518713447*elem.pos(1)[1]; T reg2=0.21132486540518713447*elem.pos(1)[0]; T reg3=0.21132486540518713447*elem.pos(0)[1]; T reg4=reg1-reg3;
    T reg5=0.21132486540518713447*elem.pos(0)[2]; T reg6=0.21132486540518713447*elem.pos(1)[2]; T reg7=0.78867513459481286553*elem.pos(0)[0]; T reg8=0.78867513459481286553*elem.pos(0)[1]; T reg9=0.78867513459481286553*elem.pos(5)[1];
    T reg10=0.78867513459481286553*elem.pos(5)[0]; T reg11=0.78867513459481286553*elem.pos(1)[1]; T reg12=reg2-reg0; T reg13=0.78867513459481286553*elem.pos(1)[0]; T reg14=0.78867513459481286553*elem.pos(1)[2];
    T reg15=0.78867513459481286553*elem.pos(4)[1]; T reg16=0.78867513459481286553*elem.pos(0)[2]; T reg17=0.78867513459481286553*elem.pos(5)[2]; T reg18=reg11-reg8; T reg19=0.21132486540518713447*elem.pos(5)[0];
    T reg20=0.21132486540518713447*elem.pos(5)[1]; reg12=reg10+reg12; T reg21=reg6-reg5; T reg22=reg13-reg7; reg4=reg9+reg4;
    T reg23=0.78867513459481286553*elem.pos(4)[0]; reg18=reg20+reg18; reg22=reg19+reg22; T reg24=reg14-reg16; reg4=reg4-reg15;
    reg21=reg17+reg21; T reg25=0.21132486540518713447*elem.pos(4)[1]; T reg26=0.21132486540518713447*elem.pos(4)[0]; T reg27=0.21132486540518713447*elem.pos(5)[2]; reg12=reg12-reg23;
    T reg28=0.78867513459481286553*elem.pos(4)[2]; reg24=reg27+reg24; T reg29=0.21132486540518713447*elem.pos(4)[2]; reg22=reg22-reg26; reg18=reg18-reg25;
    reg21=reg21-reg28; T reg30=pow(reg4,2); T reg31=pow(reg12,2); T reg32=pow(reg21,2); T reg33=pow(reg22,2);
    T reg34=pow(reg18,2); reg30=reg31+reg30; reg24=reg24-reg29; reg30=reg32+reg30; reg31=reg3+reg11;
    reg32=pow(reg24,2); reg34=reg33+reg34; reg33=reg2+reg7; T reg35=reg1+reg8; T reg36=reg0+reg13;
    T reg37=reg6+reg16; reg32=reg34+reg32; reg33=reg19-reg33; reg34=reg5+reg14; reg31=reg9-reg31;
    reg35=reg20-reg35; reg36=reg10-reg36; reg30=pow(reg30,0.5); T reg38=reg12/reg30; reg31=reg25+reg31;
    reg36=reg26+reg36; reg37=reg27-reg37; reg34=reg17-reg34; reg32=pow(reg32,0.5); reg35=reg15+reg35;
    T reg39=reg4/reg30; reg33=reg23+reg33; reg34=reg29+reg34; reg30=reg21/reg30; reg37=reg28+reg37;
    T reg40=reg38*reg36; T reg41=reg39*reg35; T reg42=reg22/reg32; T reg43=reg38*reg33; T reg44=reg39*reg31;
    T reg45=reg18/reg32; T reg46=reg31*reg45; T reg47=reg30*reg37; T reg48=reg36*reg42; reg32=reg24/reg32;
    T reg49=reg30*reg34; reg41=reg43+reg41; reg44=reg40+reg44; reg49=reg44+reg49; reg40=reg34*reg32;
    reg43=reg33*reg42; reg46=reg48+reg46; reg44=reg35*reg45; reg47=reg41+reg47; reg43=reg44+reg43;
    reg41=reg39*reg47; reg44=reg37*reg32; reg48=reg38*reg47; reg40=reg46+reg40; reg46=reg39*reg49;
    T reg50=reg38*reg49; reg44=reg43+reg44; reg43=reg30*reg49; reg46=reg31-reg46; reg50=reg36-reg50;
    T reg51=reg30*reg47; reg48=reg33-reg48; T reg52=reg42*reg40; T reg53=reg45*reg40; reg41=reg35-reg41;
    reg53=reg31-reg53; reg52=reg36-reg52; reg43=reg34-reg43; T reg54=pow(reg41,2); T reg55=pow(reg46,2);
    T reg56=pow(reg50,2); reg51=reg37-reg51; T reg57=reg45*reg44; T reg58=reg32*reg40; T reg59=reg42*reg44;
    T reg60=pow(reg48,2); reg58=reg34-reg58; T reg61=pow(reg52,2); reg54=reg60+reg54; reg57=reg35-reg57;
    reg59=reg33-reg59; reg60=reg32*reg44; reg55=reg56+reg55; reg56=pow(reg53,2); T reg62=pow(reg43,2);
    T reg63=pow(reg51,2); reg63=reg54+reg63; reg60=reg37-reg60; reg56=reg61+reg56; reg62=reg55+reg62;
    reg54=pow(reg59,2); reg55=pow(reg57,2); reg61=pow(reg58,2); reg63=pow(reg63,0.5); T reg64=pow(reg60,2);
    reg62=pow(reg62,0.5); reg55=reg54+reg55; reg61=reg56+reg61; reg41=reg41/reg63; reg48=reg48/reg63;
    reg64=reg55+reg64; reg61=pow(reg61,0.5); reg50=reg50/reg62; reg46=reg46/reg62; reg62=reg43/reg62;
    reg63=reg51/reg63; reg43=reg39*reg48; reg51=reg38*reg41; reg54=reg39*reg63; reg55=reg4*reg41;
    reg56=reg30*reg41; T reg65=reg30*reg48; reg52=reg52/reg61; reg53=reg53/reg61; reg61=reg58/reg61;
    reg58=reg38*reg63; T reg66=reg39*reg4; T reg67=reg38*reg12; reg64=pow(reg64,0.5); T reg68=reg36*reg50;
    T reg69=reg31*reg46; T reg70=reg12*reg50; reg4=reg4*reg46; T reg71=reg38*reg46; T reg72=reg39*reg50;
    reg39=reg39*reg62; reg46=reg30*reg46; reg50=reg30*reg50; reg38=reg38*reg62; T reg73=reg33*reg48;
    reg48=reg12*reg48; reg41=reg35*reg41; reg12=reg34*reg62; T reg74=reg18*reg45; reg69=reg68+reg69;
    reg68=reg22*reg42; T reg75=reg18*reg53; T reg76=reg45*reg61; T reg77=reg22*reg52; T reg78=reg32*reg53;
    T reg79=reg21*reg63; reg55=reg48+reg55; reg59=reg59/reg64; reg67=reg66+reg67; reg57=reg57/reg64;
    reg30=reg21*reg30; reg64=reg60/reg64; reg56=reg54-reg56; reg48=reg32*reg52; reg58=reg65-reg58;
    reg31=reg31*reg53; reg38=reg50-reg38; reg41=reg73+reg41; reg50=reg42*reg61; reg46=reg39-reg46;
    reg53=reg42*reg53; reg43=reg51-reg43; reg72=reg71-reg72; reg63=reg37*reg63; reg36=reg36*reg52;
    reg62=reg21*reg62; reg4=reg70+reg4; reg52=reg45*reg52; reg21=reg42*reg57; reg39=reg45*reg59;
    reg45=reg45*reg64; reg51=reg32*reg57; reg54=reg32*reg59; reg42=reg42*reg64; reg18=reg18*reg57;
    reg22=reg22*reg59; reg57=reg35*reg57; reg59=reg33*reg59; reg34=reg34*reg61; reg52=reg53-reg52;
    reg78=reg76-reg78; reg50=reg48-reg50; reg75=reg77+reg75; reg61=reg24*reg61; reg30=reg67+reg30;
    reg12=reg69+reg12; reg62=reg4+reg62; reg72=skin_elem.p*reg72; reg46=skin_elem.p*reg46; reg38=skin_elem.p*reg38;
    reg63=reg41+reg63; reg79=reg55+reg79; reg31=reg36+reg31; reg43=skin_elem.p*reg43; reg32=reg24*reg32;
    reg56=skin_elem.p*reg56; reg68=reg74+reg68; reg58=skin_elem.p*reg58; reg37=reg37*reg64; reg4=0.6220084679281461892*skin_elem.f_surf[0];
    reg33=0.044658198738520458147*skin_elem.f_surf[0]; reg18=reg22+reg18; reg64=reg24*reg64; reg22=0.6220084679281461892*reg72; reg24=0.6220084679281461892*reg38;
    reg39=reg21-reg39; reg21=0.6220084679281461892*reg46; reg51=reg45-reg51; reg42=reg54-reg42; reg35=0.044658198738520458147*reg38;
    reg36=0.16666666666666667632*reg58; reg41=0.6220084679281461892*reg43; reg45=0.044658198738520458147*reg72; reg48=0.16666666666666667632*reg43; reg53=0.16666666666666667632*reg46;
    reg54=0.6220084679281461892*reg58; reg55=0.6220084679281461892*reg56; reg60=0.044658198738520458147*reg56; reg65=0.044658198738520458147*reg43; reg66=0.16666666666666667632*reg38;
    reg67=0.16666666666666667632*reg72; reg69=0.044658198738520458147*reg58; reg12=reg30*reg12; reg61=reg75+reg61; reg62=reg49*reg62;
    reg34=reg31+reg34; reg79=reg47*reg79; reg31=0.044658198738520458147*reg46; reg47=0.16666666666666667632*reg56; reg52=skin_elem.p*reg52;
    reg63=reg30*reg63; reg32=reg68+reg32; reg30=0.6220084679281461892*skin_elem.f_surf[2]; reg57=reg59+reg57; reg49=0.16666666666666667632*skin_elem.f_surf[0];
    reg59=0.044658198738520458147*skin_elem.f_surf[1]; reg68=0.16666666666666667632*skin_elem.f_surf[1]; reg70=0.6220084679281461892*skin_elem.f_surf[1]; reg50=skin_elem.p*reg50; reg78=skin_elem.p*reg78;
    reg71=0.16666666666666667632*skin_elem.f_surf[2]; reg73=0.044658198738520458147*skin_elem.f_surf[2]; reg54=reg70+reg54; reg61=reg40*reg61; reg40=0.16666666666666667632*reg50;
    reg53=reg49+reg53; reg74=0.044658198738520458147*reg78; reg55=reg4+reg55; reg75=0.6220084679281461892*reg52; reg69=reg59+reg69;
    reg45=reg73+reg45; reg65=reg73+reg65; reg79=reg63-reg79; reg62=reg12-reg62; reg48=reg71+reg48;
    reg12=0.6220084679281461892*reg78; reg67=reg71+reg67; reg60=reg33+reg60; reg63=0.16666666666666667632*reg52; reg66=reg68+reg66;
    reg76=0.6220084679281461892*reg50; reg37=reg57+reg37; reg64=reg18+reg64; reg22=reg30+reg22; reg39=skin_elem.p*reg39;
    reg47=reg49+reg47; reg51=skin_elem.p*reg51; reg24=reg70+reg24; reg31=reg33+reg31; reg42=skin_elem.p*reg42;
    reg18=0.16666666666666667632*reg78; reg21=reg4+reg21; reg34=reg32*reg34; reg36=reg68+reg36; reg57=0.044658198738520458147*reg50;
    reg35=reg59+reg35; reg41=reg30+reg41; reg77=0.044658198738520458147*reg52; reg12=reg4+reg12; T reg80=0.044658198738520458147*reg39;
    reg54=reg79*reg54; T reg81=0.16666666666666667632*reg51; reg22=reg62*reg22; reg65=reg79*reg65; T reg82=0.044658198738520458147*reg42;
    reg57=reg59+reg57; reg66=reg62*reg66; reg24=reg62*reg24; reg77=reg73+reg77; reg69=reg79*reg69;
    reg74=reg33+reg74; reg76=reg70+reg76; T reg83=0.16666666666666667632*reg42; reg75=reg30+reg75; reg55=reg79*reg55;
    reg41=reg79*reg41; reg67=reg62*reg67; T reg84=0.044658198738520458147*reg51; reg61=reg34-reg61; reg21=reg62*reg21;
    reg34=0.16666666666666667632*reg39; reg48=reg79*reg48; reg45=reg62*reg45; reg18=reg49+reg18; reg63=reg71+reg63;
    reg47=reg47*reg79; T reg85=0.6220084679281461892*reg51; T reg86=0.6220084679281461892*reg39; T reg87=0.6220084679281461892*reg42; reg31=reg31*reg62;
    reg53=reg62*reg53; reg36=reg79*reg36; reg60=reg79*reg60; reg37=reg32*reg37; reg35=reg62*reg35;
    reg64=reg44*reg64; reg40=reg68+reg40; reg54=0.25*reg54; reg67=0.25*reg67; reg45=0.25*reg45;
    reg18=reg61*reg18; reg65=0.25*reg65; reg36=0.25*reg36; reg35=0.25*reg35; reg21=0.25*reg21;
    reg75=reg61*reg75; reg40=reg61*reg40; reg87=reg70+reg87; reg34=reg71+reg34; reg77=reg61*reg77;
    reg85=reg4+reg85; reg74=reg61*reg74; reg57=reg61*reg57; reg41=0.25*reg41; reg55=0.25*reg55;
    reg64=reg37-reg64; reg22=0.25*reg22; reg66=0.25*reg66; reg86=reg30+reg86; reg81=reg49+reg81;
    reg82=reg59+reg82; reg69=0.25*reg69; reg47=0.25*reg47; reg53=0.25*reg53; reg80=reg73+reg80;
    reg63=reg61*reg63; reg76=reg61*reg76; reg12=reg61*reg12; reg24=0.25*reg24; reg60=0.25*reg60;
    reg83=reg68+reg83; reg31=0.25*reg31; reg84=reg33+reg84; reg48=0.25*reg48; reg57=0.25*reg57;
    reg80=reg64*reg80; reg22=reg48+reg22; reg31=reg47+reg31; reg82=reg64*reg82; reg41=reg67+reg41;
    reg85=reg64*reg85; reg24=reg36+reg24; reg77=0.25*reg77; reg18=0.25*reg18; reg21=reg47+reg21;
    reg84=reg64*reg84; reg60=reg53+reg60; reg12=0.25*reg12; reg81=reg64*reg81; reg86=reg64*reg86;
    reg69=reg66+reg69; reg63=0.25*reg63; reg76=0.25*reg76; reg83=reg64*reg83; reg48=reg45+reg48;
    reg65=reg67+reg65; reg87=reg64*reg87; reg75=0.25*reg75; reg34=reg64*reg34; reg74=0.25*reg74;
    reg40=0.25*reg40; reg55=reg53+reg55; reg54=reg66+reg54; reg36=reg35+reg36; reg86=0.25*reg86;
    reg81=0.25*reg81; reg82=0.25*reg82; reg74=reg55+reg74; reg48=reg48+reg63; reg24=reg40+reg24;
    reg57=reg54+reg57; reg76=reg69+reg76; reg83=0.25*reg83; reg22=reg63+reg22; reg84=0.25*reg84;
    reg12=reg60+reg12; reg21=reg18+reg21; reg85=0.25*reg85; reg87=0.25*reg87; reg18=reg31+reg18;
    reg40=reg36+reg40; reg80=0.25*reg80; reg77=reg41+reg77; reg75=reg65+reg75; reg34=0.25*reg34;
    reg74=reg81+reg74; sollicitation[indices[4]+0]+=reg74; reg80=reg22+reg80; sollicitation[indices[5]+2]+=reg80; reg81=reg12+reg81;
    sollicitation[indices[1]+0]+=reg81; reg86=reg48+reg86; sollicitation[indices[0]+2]+=reg86; reg82=reg24+reg82; sollicitation[indices[5]+1]+=reg82;
    reg57=reg83+reg57; sollicitation[indices[4]+1]+=reg57; reg84=reg21+reg84; sollicitation[indices[5]+0]+=reg84; reg83=reg76+reg83;
    sollicitation[indices[1]+1]+=reg83; reg85=reg18+reg85; sollicitation[indices[0]+0]+=reg85; reg87=reg40+reg87; sollicitation[indices[0]+1]+=reg87;
    reg77=reg34+reg77; sollicitation[indices[4]+2]+=reg77; reg34=reg75+reg34; sollicitation[indices[1]+2]+=reg34;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[0]; T reg1=0.21132486540518713447*elem.pos(1)[1]; T reg2=0.21132486540518713447*elem.pos(1)[0]; T reg3=0.21132486540518713447*elem.pos(0)[1]; T reg4=reg1-reg3;
    T reg5=0.21132486540518713447*elem.pos(0)[2]; T reg6=0.21132486540518713447*elem.pos(1)[2]; T reg7=0.78867513459481286553*elem.pos(0)[0]; T reg8=0.78867513459481286553*elem.pos(0)[1]; T reg9=0.78867513459481286553*elem.pos(5)[1];
    T reg10=0.78867513459481286553*elem.pos(5)[0]; T reg11=0.78867513459481286553*elem.pos(1)[1]; T reg12=reg2-reg0; T reg13=0.78867513459481286553*elem.pos(1)[0]; T reg14=0.78867513459481286553*elem.pos(1)[2];
    T reg15=0.78867513459481286553*elem.pos(4)[1]; T reg16=0.78867513459481286553*elem.pos(0)[2]; T reg17=0.78867513459481286553*elem.pos(5)[2]; T reg18=reg11-reg8; T reg19=0.21132486540518713447*elem.pos(5)[0];
    T reg20=0.21132486540518713447*elem.pos(5)[1]; reg12=reg10+reg12; T reg21=reg6-reg5; T reg22=reg13-reg7; reg4=reg9+reg4;
    T reg23=0.78867513459481286553*elem.pos(4)[0]; reg18=reg20+reg18; reg22=reg19+reg22; T reg24=reg14-reg16; reg4=reg4-reg15;
    reg21=reg17+reg21; T reg25=0.21132486540518713447*elem.pos(4)[1]; T reg26=0.21132486540518713447*elem.pos(4)[0]; T reg27=0.21132486540518713447*elem.pos(5)[2]; reg12=reg12-reg23;
    T reg28=0.78867513459481286553*elem.pos(4)[2]; reg24=reg27+reg24; T reg29=0.21132486540518713447*elem.pos(4)[2]; reg22=reg22-reg26; reg18=reg18-reg25;
    reg21=reg21-reg28; T reg30=pow(reg4,2); T reg31=pow(reg12,2); T reg32=pow(reg21,2); T reg33=pow(reg22,2);
    T reg34=pow(reg18,2); reg30=reg31+reg30; reg24=reg24-reg29; reg30=reg32+reg30; reg31=reg3+reg11;
    reg32=pow(reg24,2); reg34=reg33+reg34; reg33=reg2+reg7; T reg35=reg1+reg8; T reg36=reg0+reg13;
    T reg37=reg6+reg16; reg32=reg34+reg32; reg33=reg19-reg33; reg34=reg5+reg14; reg31=reg9-reg31;
    reg35=reg20-reg35; reg36=reg10-reg36; reg30=pow(reg30,0.5); T reg38=reg12/reg30; reg31=reg25+reg31;
    reg36=reg26+reg36; reg37=reg27-reg37; reg34=reg17-reg34; reg32=pow(reg32,0.5); reg35=reg15+reg35;
    T reg39=reg4/reg30; reg33=reg23+reg33; reg34=reg29+reg34; reg30=reg21/reg30; reg37=reg28+reg37;
    T reg40=reg38*reg36; T reg41=reg39*reg35; T reg42=reg22/reg32; T reg43=reg38*reg33; T reg44=reg39*reg31;
    T reg45=reg18/reg32; T reg46=reg31*reg45; T reg47=reg30*reg37; T reg48=reg36*reg42; reg32=reg24/reg32;
    T reg49=reg30*reg34; reg41=reg43+reg41; reg44=reg40+reg44; reg49=reg44+reg49; reg40=reg34*reg32;
    reg43=reg33*reg42; reg46=reg48+reg46; reg44=reg35*reg45; reg47=reg41+reg47; reg43=reg44+reg43;
    reg41=reg39*reg47; reg44=reg37*reg32; reg48=reg38*reg47; reg40=reg46+reg40; reg46=reg39*reg49;
    T reg50=reg38*reg49; reg44=reg43+reg44; reg43=reg30*reg49; reg46=reg31-reg46; reg50=reg36-reg50;
    T reg51=reg30*reg47; reg48=reg33-reg48; T reg52=reg42*reg40; T reg53=reg45*reg40; reg41=reg35-reg41;
    reg53=reg31-reg53; reg52=reg36-reg52; reg43=reg34-reg43; T reg54=pow(reg41,2); T reg55=pow(reg46,2);
    T reg56=pow(reg50,2); reg51=reg37-reg51; T reg57=reg45*reg44; T reg58=reg32*reg40; T reg59=reg42*reg44;
    T reg60=pow(reg48,2); reg58=reg34-reg58; T reg61=pow(reg52,2); reg54=reg60+reg54; reg57=reg35-reg57;
    reg59=reg33-reg59; reg60=reg32*reg44; reg55=reg56+reg55; reg56=pow(reg53,2); T reg62=pow(reg43,2);
    T reg63=pow(reg51,2); reg63=reg54+reg63; reg60=reg37-reg60; reg56=reg61+reg56; reg62=reg55+reg62;
    reg54=pow(reg59,2); reg55=pow(reg57,2); reg61=pow(reg58,2); reg63=pow(reg63,0.5); T reg64=pow(reg60,2);
    reg62=pow(reg62,0.5); reg55=reg54+reg55; reg61=reg56+reg61; reg41=reg41/reg63; reg48=reg48/reg63;
    reg64=reg55+reg64; reg61=pow(reg61,0.5); reg50=reg50/reg62; reg46=reg46/reg62; reg62=reg43/reg62;
    reg63=reg51/reg63; reg43=reg39*reg48; reg51=reg38*reg41; reg54=reg39*reg63; reg55=reg4*reg41;
    reg56=reg30*reg41; T reg65=reg30*reg48; reg52=reg52/reg61; reg53=reg53/reg61; reg61=reg58/reg61;
    reg58=reg38*reg63; T reg66=reg39*reg4; T reg67=reg38*reg12; reg64=pow(reg64,0.5); T reg68=reg36*reg50;
    T reg69=reg31*reg46; T reg70=reg12*reg50; reg4=reg4*reg46; T reg71=reg38*reg46; T reg72=reg39*reg50;
    reg39=reg39*reg62; reg46=reg30*reg46; reg50=reg30*reg50; reg38=reg38*reg62; T reg73=reg33*reg48;
    reg48=reg12*reg48; reg41=reg35*reg41; reg12=reg34*reg62; T reg74=reg18*reg45; reg69=reg68+reg69;
    reg68=reg22*reg42; T reg75=reg18*reg53; T reg76=reg45*reg61; T reg77=reg22*reg52; T reg78=reg32*reg53;
    T reg79=reg21*reg63; reg55=reg48+reg55; reg59=reg59/reg64; reg67=reg66+reg67; reg57=reg57/reg64;
    reg30=reg21*reg30; reg64=reg60/reg64; reg56=reg54-reg56; reg48=reg32*reg52; reg58=reg65-reg58;
    reg31=reg31*reg53; reg38=reg50-reg38; reg41=reg73+reg41; reg50=reg42*reg61; reg46=reg39-reg46;
    reg53=reg42*reg53; reg43=reg51-reg43; reg72=reg71-reg72; reg63=reg37*reg63; reg36=reg36*reg52;
    reg62=reg21*reg62; reg4=reg70+reg4; reg52=reg45*reg52; reg21=reg42*reg57; reg39=reg45*reg59;
    reg45=reg45*reg64; reg51=reg32*reg57; reg54=reg32*reg59; reg42=reg42*reg64; reg18=reg18*reg57;
    reg22=reg22*reg59; reg57=reg35*reg57; reg59=reg33*reg59; reg34=reg34*reg61; reg52=reg53-reg52;
    reg78=reg76-reg78; reg50=reg48-reg50; reg75=reg77+reg75; reg61=reg24*reg61; reg30=reg67+reg30;
    reg12=reg69+reg12; reg62=reg4+reg62; reg72=skin_elem.p*reg72; reg46=skin_elem.p*reg46; reg38=skin_elem.p*reg38;
    reg63=reg41+reg63; reg79=reg55+reg79; reg31=reg36+reg31; reg43=skin_elem.p*reg43; reg32=reg24*reg32;
    reg56=skin_elem.p*reg56; reg68=reg74+reg68; reg58=skin_elem.p*reg58; reg37=reg37*reg64; reg4=0.6220084679281461892*skin_elem.f_surf[0];
    reg33=0.044658198738520458147*skin_elem.f_surf[0]; reg18=reg22+reg18; reg64=reg24*reg64; reg22=0.6220084679281461892*reg72; reg24=0.6220084679281461892*reg38;
    reg39=reg21-reg39; reg21=0.6220084679281461892*reg46; reg51=reg45-reg51; reg42=reg54-reg42; reg35=0.044658198738520458147*reg38;
    reg36=0.16666666666666667632*reg58; reg41=0.6220084679281461892*reg43; reg45=0.044658198738520458147*reg72; reg48=0.16666666666666667632*reg43; reg53=0.16666666666666667632*reg46;
    reg54=0.6220084679281461892*reg58; reg55=0.6220084679281461892*reg56; reg60=0.044658198738520458147*reg56; reg65=0.044658198738520458147*reg43; reg66=0.16666666666666667632*reg38;
    reg67=0.16666666666666667632*reg72; reg69=0.044658198738520458147*reg58; reg12=reg30*reg12; reg61=reg75+reg61; reg62=reg49*reg62;
    reg34=reg31+reg34; reg79=reg47*reg79; reg31=0.044658198738520458147*reg46; reg47=0.16666666666666667632*reg56; reg52=skin_elem.p*reg52;
    reg63=reg30*reg63; reg32=reg68+reg32; reg30=0.6220084679281461892*skin_elem.f_surf[2]; reg57=reg59+reg57; reg49=0.16666666666666667632*skin_elem.f_surf[0];
    reg59=0.044658198738520458147*skin_elem.f_surf[1]; reg68=0.16666666666666667632*skin_elem.f_surf[1]; reg70=0.6220084679281461892*skin_elem.f_surf[1]; reg50=skin_elem.p*reg50; reg78=skin_elem.p*reg78;
    reg71=0.16666666666666667632*skin_elem.f_surf[2]; reg73=0.044658198738520458147*skin_elem.f_surf[2]; reg54=reg70+reg54; reg61=reg40*reg61; reg40=0.16666666666666667632*reg50;
    reg53=reg49+reg53; reg74=0.044658198738520458147*reg78; reg55=reg4+reg55; reg75=0.6220084679281461892*reg52; reg69=reg59+reg69;
    reg45=reg73+reg45; reg65=reg73+reg65; reg79=reg63-reg79; reg62=reg12-reg62; reg48=reg71+reg48;
    reg12=0.6220084679281461892*reg78; reg67=reg71+reg67; reg60=reg33+reg60; reg63=0.16666666666666667632*reg52; reg66=reg68+reg66;
    reg76=0.6220084679281461892*reg50; reg37=reg57+reg37; reg64=reg18+reg64; reg22=reg30+reg22; reg39=skin_elem.p*reg39;
    reg47=reg49+reg47; reg51=skin_elem.p*reg51; reg24=reg70+reg24; reg31=reg33+reg31; reg42=skin_elem.p*reg42;
    reg18=0.16666666666666667632*reg78; reg21=reg4+reg21; reg34=reg32*reg34; reg36=reg68+reg36; reg57=0.044658198738520458147*reg50;
    reg35=reg59+reg35; reg41=reg30+reg41; reg77=0.044658198738520458147*reg52; reg12=reg4+reg12; T reg80=0.044658198738520458147*reg39;
    reg54=reg79*reg54; T reg81=0.16666666666666667632*reg51; reg22=reg62*reg22; reg65=reg79*reg65; T reg82=0.044658198738520458147*reg42;
    reg57=reg59+reg57; reg66=reg62*reg66; reg24=reg62*reg24; reg77=reg73+reg77; reg69=reg79*reg69;
    reg74=reg33+reg74; reg76=reg70+reg76; T reg83=0.16666666666666667632*reg42; reg75=reg30+reg75; reg55=reg79*reg55;
    reg41=reg79*reg41; reg67=reg62*reg67; T reg84=0.044658198738520458147*reg51; reg61=reg34-reg61; reg21=reg62*reg21;
    reg34=0.16666666666666667632*reg39; reg48=reg79*reg48; reg45=reg62*reg45; reg18=reg49+reg18; reg63=reg71+reg63;
    reg47=reg47*reg79; T reg85=0.6220084679281461892*reg51; T reg86=0.6220084679281461892*reg39; T reg87=0.6220084679281461892*reg42; reg31=reg31*reg62;
    reg53=reg62*reg53; reg36=reg79*reg36; reg60=reg79*reg60; reg37=reg32*reg37; reg35=reg62*reg35;
    reg64=reg44*reg64; reg40=reg68+reg40; reg54=0.25*reg54; reg67=0.25*reg67; reg45=0.25*reg45;
    reg18=reg61*reg18; reg65=0.25*reg65; reg36=0.25*reg36; reg35=0.25*reg35; reg21=0.25*reg21;
    reg75=reg61*reg75; reg40=reg61*reg40; reg87=reg70+reg87; reg34=reg71+reg34; reg77=reg61*reg77;
    reg85=reg4+reg85; reg74=reg61*reg74; reg57=reg61*reg57; reg41=0.25*reg41; reg55=0.25*reg55;
    reg64=reg37-reg64; reg22=0.25*reg22; reg66=0.25*reg66; reg86=reg30+reg86; reg81=reg49+reg81;
    reg82=reg59+reg82; reg69=0.25*reg69; reg47=0.25*reg47; reg53=0.25*reg53; reg80=reg73+reg80;
    reg63=reg61*reg63; reg76=reg61*reg76; reg12=reg61*reg12; reg24=0.25*reg24; reg60=0.25*reg60;
    reg83=reg68+reg83; reg31=0.25*reg31; reg84=reg33+reg84; reg48=0.25*reg48; reg57=0.25*reg57;
    reg80=reg64*reg80; reg22=reg48+reg22; reg31=reg47+reg31; reg82=reg64*reg82; reg41=reg67+reg41;
    reg85=reg64*reg85; reg24=reg36+reg24; reg77=0.25*reg77; reg18=0.25*reg18; reg21=reg47+reg21;
    reg84=reg64*reg84; reg60=reg53+reg60; reg12=0.25*reg12; reg81=reg64*reg81; reg86=reg64*reg86;
    reg69=reg66+reg69; reg63=0.25*reg63; reg76=0.25*reg76; reg83=reg64*reg83; reg48=reg45+reg48;
    reg65=reg67+reg65; reg87=reg64*reg87; reg75=0.25*reg75; reg34=reg64*reg34; reg74=0.25*reg74;
    reg40=0.25*reg40; reg55=reg53+reg55; reg54=reg66+reg54; reg36=reg35+reg36; reg86=0.25*reg86;
    reg81=0.25*reg81; reg82=0.25*reg82; reg74=reg55+reg74; reg48=reg48+reg63; reg24=reg40+reg24;
    reg57=reg54+reg57; reg76=reg69+reg76; reg83=0.25*reg83; reg22=reg63+reg22; reg84=0.25*reg84;
    reg12=reg60+reg12; reg21=reg18+reg21; reg85=0.25*reg85; reg87=0.25*reg87; reg18=reg31+reg18;
    reg40=reg36+reg40; reg80=0.25*reg80; reg77=reg41+reg77; reg75=reg65+reg75; reg34=0.25*reg34;
    reg74=reg81+reg74; sollicitation[indices[4]+0]+=reg74; reg80=reg22+reg80; sollicitation[indices[5]+2]+=reg80; reg81=reg12+reg81;
    sollicitation[indices[1]+0]+=reg81; reg86=reg48+reg86; sollicitation[indices[0]+2]+=reg86; reg82=reg24+reg82; sollicitation[indices[5]+1]+=reg82;
    reg57=reg83+reg57; sollicitation[indices[4]+1]+=reg57; reg84=reg21+reg84; sollicitation[indices[5]+0]+=reg84; reg83=reg76+reg83;
    sollicitation[indices[1]+1]+=reg83; reg85=reg18+reg85; sollicitation[indices[0]+0]+=reg85; reg87=reg40+reg87; sollicitation[indices[0]+1]+=reg87;
    reg77=reg34+reg77; sollicitation[indices[4]+2]+=reg77; reg34=reg75+reg34; sollicitation[indices[1]+2]+=reg34;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[0]; T reg1=0.21132486540518713447*elem.pos(1)[1]; T reg2=0.21132486540518713447*elem.pos(1)[0]; T reg3=0.21132486540518713447*elem.pos(0)[1]; T reg4=reg1-reg3;
    T reg5=0.21132486540518713447*elem.pos(0)[2]; T reg6=0.21132486540518713447*elem.pos(1)[2]; T reg7=0.78867513459481286553*elem.pos(0)[0]; T reg8=0.78867513459481286553*elem.pos(0)[1]; T reg9=0.78867513459481286553*elem.pos(5)[1];
    T reg10=0.78867513459481286553*elem.pos(5)[0]; T reg11=0.78867513459481286553*elem.pos(1)[1]; T reg12=reg2-reg0; T reg13=0.78867513459481286553*elem.pos(1)[0]; T reg14=0.78867513459481286553*elem.pos(1)[2];
    T reg15=0.78867513459481286553*elem.pos(4)[1]; T reg16=0.78867513459481286553*elem.pos(0)[2]; T reg17=0.78867513459481286553*elem.pos(5)[2]; T reg18=reg11-reg8; T reg19=0.21132486540518713447*elem.pos(5)[0];
    T reg20=0.21132486540518713447*elem.pos(5)[1]; reg12=reg10+reg12; T reg21=reg6-reg5; T reg22=reg13-reg7; reg4=reg9+reg4;
    T reg23=0.78867513459481286553*elem.pos(4)[0]; reg18=reg20+reg18; reg22=reg19+reg22; T reg24=reg14-reg16; reg4=reg4-reg15;
    reg21=reg17+reg21; T reg25=0.21132486540518713447*elem.pos(4)[1]; T reg26=0.21132486540518713447*elem.pos(4)[0]; T reg27=0.21132486540518713447*elem.pos(5)[2]; reg12=reg12-reg23;
    T reg28=0.78867513459481286553*elem.pos(4)[2]; reg24=reg27+reg24; T reg29=0.21132486540518713447*elem.pos(4)[2]; reg22=reg22-reg26; reg18=reg18-reg25;
    reg21=reg21-reg28; T reg30=pow(reg4,2); T reg31=pow(reg12,2); T reg32=pow(reg21,2); T reg33=pow(reg22,2);
    T reg34=pow(reg18,2); reg30=reg31+reg30; reg24=reg24-reg29; reg30=reg32+reg30; reg31=reg3+reg11;
    reg32=pow(reg24,2); reg34=reg33+reg34; reg33=reg2+reg7; T reg35=reg1+reg8; T reg36=reg0+reg13;
    T reg37=reg6+reg16; reg32=reg34+reg32; reg33=reg19-reg33; reg34=reg5+reg14; reg31=reg9-reg31;
    reg35=reg20-reg35; reg36=reg10-reg36; reg30=pow(reg30,0.5); T reg38=reg12/reg30; reg31=reg25+reg31;
    reg36=reg26+reg36; reg37=reg27-reg37; reg34=reg17-reg34; reg32=pow(reg32,0.5); reg35=reg15+reg35;
    T reg39=reg4/reg30; reg33=reg23+reg33; reg34=reg29+reg34; reg30=reg21/reg30; reg37=reg28+reg37;
    T reg40=reg38*reg36; T reg41=reg39*reg35; T reg42=reg22/reg32; T reg43=reg38*reg33; T reg44=reg39*reg31;
    T reg45=reg18/reg32; T reg46=reg31*reg45; T reg47=reg30*reg37; T reg48=reg36*reg42; reg32=reg24/reg32;
    T reg49=reg30*reg34; reg41=reg43+reg41; reg44=reg40+reg44; reg49=reg44+reg49; reg40=reg34*reg32;
    reg43=reg33*reg42; reg46=reg48+reg46; reg44=reg35*reg45; reg47=reg41+reg47; reg43=reg44+reg43;
    reg41=reg39*reg47; reg44=reg37*reg32; reg48=reg38*reg47; reg40=reg46+reg40; reg46=reg39*reg49;
    T reg50=reg38*reg49; reg44=reg43+reg44; reg43=reg30*reg49; reg46=reg31-reg46; reg50=reg36-reg50;
    T reg51=reg30*reg47; reg48=reg33-reg48; T reg52=reg42*reg40; T reg53=reg45*reg40; reg41=reg35-reg41;
    reg53=reg31-reg53; reg52=reg36-reg52; reg43=reg34-reg43; T reg54=pow(reg41,2); T reg55=pow(reg46,2);
    T reg56=pow(reg50,2); reg51=reg37-reg51; T reg57=reg45*reg44; T reg58=reg32*reg40; T reg59=reg42*reg44;
    T reg60=pow(reg48,2); reg58=reg34-reg58; T reg61=pow(reg52,2); reg54=reg60+reg54; reg57=reg35-reg57;
    reg59=reg33-reg59; reg60=reg32*reg44; reg55=reg56+reg55; reg56=pow(reg53,2); T reg62=pow(reg43,2);
    T reg63=pow(reg51,2); reg63=reg54+reg63; reg60=reg37-reg60; reg56=reg61+reg56; reg62=reg55+reg62;
    reg54=pow(reg59,2); reg55=pow(reg57,2); reg61=pow(reg58,2); reg63=pow(reg63,0.5); T reg64=pow(reg60,2);
    reg62=pow(reg62,0.5); reg55=reg54+reg55; reg61=reg56+reg61; reg41=reg41/reg63; reg48=reg48/reg63;
    reg64=reg55+reg64; reg61=pow(reg61,0.5); reg50=reg50/reg62; reg46=reg46/reg62; reg62=reg43/reg62;
    reg63=reg51/reg63; reg43=reg39*reg48; reg51=reg38*reg41; reg54=reg39*reg63; reg55=reg4*reg41;
    reg56=reg30*reg41; T reg65=reg30*reg48; reg52=reg52/reg61; reg53=reg53/reg61; reg61=reg58/reg61;
    reg58=reg38*reg63; T reg66=reg39*reg4; T reg67=reg38*reg12; reg64=pow(reg64,0.5); T reg68=reg36*reg50;
    T reg69=reg31*reg46; T reg70=reg12*reg50; reg4=reg4*reg46; T reg71=reg38*reg46; T reg72=reg39*reg50;
    reg39=reg39*reg62; reg46=reg30*reg46; reg50=reg30*reg50; reg38=reg38*reg62; T reg73=reg33*reg48;
    reg48=reg12*reg48; reg41=reg35*reg41; reg12=reg34*reg62; T reg74=reg18*reg45; reg69=reg68+reg69;
    reg68=reg22*reg42; T reg75=reg18*reg53; T reg76=reg45*reg61; T reg77=reg22*reg52; T reg78=reg32*reg53;
    T reg79=reg21*reg63; reg55=reg48+reg55; reg59=reg59/reg64; reg67=reg66+reg67; reg57=reg57/reg64;
    reg30=reg21*reg30; reg64=reg60/reg64; reg56=reg54-reg56; reg48=reg32*reg52; reg58=reg65-reg58;
    reg31=reg31*reg53; reg38=reg50-reg38; reg41=reg73+reg41; reg50=reg42*reg61; reg46=reg39-reg46;
    reg53=reg42*reg53; reg43=reg51-reg43; reg72=reg71-reg72; reg63=reg37*reg63; reg36=reg36*reg52;
    reg62=reg21*reg62; reg4=reg70+reg4; reg52=reg45*reg52; reg21=reg42*reg57; reg39=reg45*reg59;
    reg45=reg45*reg64; reg51=reg32*reg57; reg54=reg32*reg59; reg42=reg42*reg64; reg18=reg18*reg57;
    reg22=reg22*reg59; reg57=reg35*reg57; reg59=reg33*reg59; reg34=reg34*reg61; reg52=reg53-reg52;
    reg78=reg76-reg78; reg50=reg48-reg50; reg75=reg77+reg75; reg61=reg24*reg61; reg30=reg67+reg30;
    reg12=reg69+reg12; reg62=reg4+reg62; reg72=skin_elem.p*reg72; reg46=skin_elem.p*reg46; reg38=skin_elem.p*reg38;
    reg63=reg41+reg63; reg79=reg55+reg79; reg31=reg36+reg31; reg43=skin_elem.p*reg43; reg32=reg24*reg32;
    reg56=skin_elem.p*reg56; reg68=reg74+reg68; reg58=skin_elem.p*reg58; reg37=reg37*reg64; reg4=0.6220084679281461892*skin_elem.f_surf[0];
    reg33=0.044658198738520458147*skin_elem.f_surf[0]; reg18=reg22+reg18; reg64=reg24*reg64; reg22=0.6220084679281461892*reg72; reg24=0.6220084679281461892*reg38;
    reg39=reg21-reg39; reg21=0.6220084679281461892*reg46; reg51=reg45-reg51; reg42=reg54-reg42; reg35=0.044658198738520458147*reg38;
    reg36=0.16666666666666667632*reg58; reg41=0.6220084679281461892*reg43; reg45=0.044658198738520458147*reg72; reg48=0.16666666666666667632*reg43; reg53=0.16666666666666667632*reg46;
    reg54=0.6220084679281461892*reg58; reg55=0.6220084679281461892*reg56; reg60=0.044658198738520458147*reg56; reg65=0.044658198738520458147*reg43; reg66=0.16666666666666667632*reg38;
    reg67=0.16666666666666667632*reg72; reg69=0.044658198738520458147*reg58; reg12=reg30*reg12; reg61=reg75+reg61; reg62=reg49*reg62;
    reg34=reg31+reg34; reg79=reg47*reg79; reg31=0.044658198738520458147*reg46; reg47=0.16666666666666667632*reg56; reg52=skin_elem.p*reg52;
    reg63=reg30*reg63; reg32=reg68+reg32; reg30=0.6220084679281461892*skin_elem.f_surf[2]; reg57=reg59+reg57; reg49=0.16666666666666667632*skin_elem.f_surf[0];
    reg59=0.044658198738520458147*skin_elem.f_surf[1]; reg68=0.16666666666666667632*skin_elem.f_surf[1]; reg70=0.6220084679281461892*skin_elem.f_surf[1]; reg50=skin_elem.p*reg50; reg78=skin_elem.p*reg78;
    reg71=0.16666666666666667632*skin_elem.f_surf[2]; reg73=0.044658198738520458147*skin_elem.f_surf[2]; reg54=reg70+reg54; reg61=reg40*reg61; reg40=0.16666666666666667632*reg50;
    reg53=reg49+reg53; reg74=0.044658198738520458147*reg78; reg55=reg4+reg55; reg75=0.6220084679281461892*reg52; reg69=reg59+reg69;
    reg45=reg73+reg45; reg65=reg73+reg65; reg79=reg63-reg79; reg62=reg12-reg62; reg48=reg71+reg48;
    reg12=0.6220084679281461892*reg78; reg67=reg71+reg67; reg60=reg33+reg60; reg63=0.16666666666666667632*reg52; reg66=reg68+reg66;
    reg76=0.6220084679281461892*reg50; reg37=reg57+reg37; reg64=reg18+reg64; reg22=reg30+reg22; reg39=skin_elem.p*reg39;
    reg47=reg49+reg47; reg51=skin_elem.p*reg51; reg24=reg70+reg24; reg31=reg33+reg31; reg42=skin_elem.p*reg42;
    reg18=0.16666666666666667632*reg78; reg21=reg4+reg21; reg34=reg32*reg34; reg36=reg68+reg36; reg57=0.044658198738520458147*reg50;
    reg35=reg59+reg35; reg41=reg30+reg41; reg77=0.044658198738520458147*reg52; reg12=reg4+reg12; T reg80=0.044658198738520458147*reg39;
    reg54=reg79*reg54; T reg81=0.16666666666666667632*reg51; reg22=reg62*reg22; reg65=reg79*reg65; T reg82=0.044658198738520458147*reg42;
    reg57=reg59+reg57; reg66=reg62*reg66; reg24=reg62*reg24; reg77=reg73+reg77; reg69=reg79*reg69;
    reg74=reg33+reg74; reg76=reg70+reg76; T reg83=0.16666666666666667632*reg42; reg75=reg30+reg75; reg55=reg79*reg55;
    reg41=reg79*reg41; reg67=reg62*reg67; T reg84=0.044658198738520458147*reg51; reg61=reg34-reg61; reg21=reg62*reg21;
    reg34=0.16666666666666667632*reg39; reg48=reg79*reg48; reg45=reg62*reg45; reg18=reg49+reg18; reg63=reg71+reg63;
    reg47=reg47*reg79; T reg85=0.6220084679281461892*reg51; T reg86=0.6220084679281461892*reg39; T reg87=0.6220084679281461892*reg42; reg31=reg31*reg62;
    reg53=reg62*reg53; reg36=reg79*reg36; reg60=reg79*reg60; reg37=reg32*reg37; reg35=reg62*reg35;
    reg64=reg44*reg64; reg40=reg68+reg40; reg54=0.25*reg54; reg67=0.25*reg67; reg45=0.25*reg45;
    reg18=reg61*reg18; reg65=0.25*reg65; reg36=0.25*reg36; reg35=0.25*reg35; reg21=0.25*reg21;
    reg75=reg61*reg75; reg40=reg61*reg40; reg87=reg70+reg87; reg34=reg71+reg34; reg77=reg61*reg77;
    reg85=reg4+reg85; reg74=reg61*reg74; reg57=reg61*reg57; reg41=0.25*reg41; reg55=0.25*reg55;
    reg64=reg37-reg64; reg22=0.25*reg22; reg66=0.25*reg66; reg86=reg30+reg86; reg81=reg49+reg81;
    reg82=reg59+reg82; reg69=0.25*reg69; reg47=0.25*reg47; reg53=0.25*reg53; reg80=reg73+reg80;
    reg63=reg61*reg63; reg76=reg61*reg76; reg12=reg61*reg12; reg24=0.25*reg24; reg60=0.25*reg60;
    reg83=reg68+reg83; reg31=0.25*reg31; reg84=reg33+reg84; reg48=0.25*reg48; reg57=0.25*reg57;
    reg80=reg64*reg80; reg22=reg48+reg22; reg31=reg47+reg31; reg82=reg64*reg82; reg41=reg67+reg41;
    reg85=reg64*reg85; reg24=reg36+reg24; reg77=0.25*reg77; reg18=0.25*reg18; reg21=reg47+reg21;
    reg84=reg64*reg84; reg60=reg53+reg60; reg12=0.25*reg12; reg81=reg64*reg81; reg86=reg64*reg86;
    reg69=reg66+reg69; reg63=0.25*reg63; reg76=0.25*reg76; reg83=reg64*reg83; reg48=reg45+reg48;
    reg65=reg67+reg65; reg87=reg64*reg87; reg75=0.25*reg75; reg34=reg64*reg34; reg74=0.25*reg74;
    reg40=0.25*reg40; reg55=reg53+reg55; reg54=reg66+reg54; reg36=reg35+reg36; reg86=0.25*reg86;
    reg81=0.25*reg81; reg82=0.25*reg82; reg74=reg55+reg74; reg48=reg48+reg63; reg24=reg40+reg24;
    reg57=reg54+reg57; reg76=reg69+reg76; reg83=0.25*reg83; reg22=reg63+reg22; reg84=0.25*reg84;
    reg12=reg60+reg12; reg21=reg18+reg21; reg85=0.25*reg85; reg87=0.25*reg87; reg18=reg31+reg18;
    reg40=reg36+reg40; reg80=0.25*reg80; reg77=reg41+reg77; reg75=reg65+reg75; reg34=0.25*reg34;
    reg74=reg81+reg74; sollicitation[indices[4]+0]+=reg74; reg80=reg22+reg80; sollicitation[indices[5]+2]+=reg80; reg81=reg12+reg81;
    sollicitation[indices[1]+0]+=reg81; reg86=reg48+reg86; sollicitation[indices[0]+2]+=reg86; reg82=reg24+reg82; sollicitation[indices[5]+1]+=reg82;
    reg57=reg83+reg57; sollicitation[indices[4]+1]+=reg57; reg84=reg21+reg84; sollicitation[indices[5]+0]+=reg84; reg83=reg76+reg83;
    sollicitation[indices[1]+1]+=reg83; reg85=reg18+reg85; sollicitation[indices[0]+0]+=reg85; reg87=reg40+reg87; sollicitation[indices[0]+1]+=reg87;
    reg77=reg34+reg77; sollicitation[indices[4]+2]+=reg77; reg34=reg75+reg34; sollicitation[indices[1]+2]+=reg34;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(7)[0]; T reg1=0.21132486540518713447*elem.pos(3)[1]; T reg2=0.21132486540518713447*elem.pos(3)[0]; T reg3=0.21132486540518713447*elem.pos(7)[1]; T reg4=0.78867513459481286553*elem.pos(7)[0];
    T reg5=reg0-reg2; T reg6=0.78867513459481286553*elem.pos(7)[1]; T reg7=0.78867513459481286553*elem.pos(6)[0]; T reg8=0.21132486540518713447*elem.pos(7)[2]; T reg9=0.21132486540518713447*elem.pos(3)[2];
    T reg10=0.78867513459481286553*elem.pos(6)[1]; T reg11=0.78867513459481286553*elem.pos(3)[0]; T reg12=0.78867513459481286553*elem.pos(3)[1]; T reg13=reg3-reg1; T reg14=0.78867513459481286553*elem.pos(2)[1];
    T reg15=0.78867513459481286553*elem.pos(6)[2]; T reg16=0.78867513459481286553*elem.pos(2)[0]; T reg17=0.78867513459481286553*elem.pos(3)[2]; T reg18=0.21132486540518713447*elem.pos(6)[0]; T reg19=0.78867513459481286553*elem.pos(7)[2];
    T reg20=0.21132486540518713447*elem.pos(6)[1]; reg5=reg7+reg5; T reg21=reg6-reg12; T reg22=reg8-reg9; T reg23=reg4-reg11;
    reg13=reg10+reg13; reg23=reg18+reg23; T reg24=0.21132486540518713447*elem.pos(6)[2]; reg21=reg20+reg21; T reg25=reg19-reg17;
    reg13=reg13-reg14; T reg26=0.21132486540518713447*elem.pos(2)[1]; T reg27=0.21132486540518713447*elem.pos(2)[0]; T reg28=0.78867513459481286553*elem.pos(2)[2]; reg22=reg15+reg22;
    reg5=reg5-reg16; reg22=reg22-reg28; reg21=reg21-reg26; reg25=reg24+reg25; T reg29=pow(reg5,2);
    T reg30=pow(reg13,2); reg23=reg23-reg27; T reg31=0.21132486540518713447*elem.pos(2)[2]; reg25=reg25-reg31; reg29=reg30+reg29;
    reg30=pow(reg21,2); T reg32=pow(reg23,2); T reg33=pow(reg22,2); reg32=reg30+reg32; reg30=pow(reg25,2);
    T reg34=reg3+reg12; reg33=reg29+reg33; reg29=reg1+reg6; T reg35=reg2+reg4; T reg36=reg11+reg0;
    reg29=reg10-reg29; reg35=reg7-reg35; T reg37=reg8+reg17; reg33=pow(reg33,0.5); reg34=reg20-reg34;
    reg32=reg30+reg32; reg36=reg18-reg36; reg30=reg9+reg19; reg32=pow(reg32,0.5); reg29=reg26+reg29;
    reg35=reg27+reg35; reg34=reg14+reg34; T reg38=reg5/reg33; reg36=reg16+reg36; reg30=reg15-reg30;
    T reg39=reg13/reg33; reg37=reg24-reg37; T reg40=reg35*reg38; reg30=reg31+reg30; reg33=reg22/reg33;
    T reg41=reg23/reg32; T reg42=reg29*reg39; reg37=reg28+reg37; T reg43=reg34*reg39; T reg44=reg38*reg36;
    T reg45=reg21/reg32; T reg46=reg35*reg41; reg44=reg43+reg44; reg43=reg37*reg33; T reg47=reg29*reg45;
    reg32=reg25/reg32; reg40=reg42+reg40; reg42=reg30*reg33; T reg48=reg34*reg45; T reg49=reg32*reg30;
    reg47=reg46+reg47; reg43=reg44+reg43; reg44=reg36*reg41; reg42=reg40+reg42; reg40=reg39*reg43;
    reg46=reg38*reg43; T reg50=reg39*reg42; T reg51=reg38*reg42; T reg52=reg37*reg32; reg44=reg48+reg44;
    reg49=reg47+reg49; reg50=reg29-reg50; reg47=reg49*reg45; reg48=reg33*reg42; reg40=reg34-reg40;
    reg51=reg35-reg51; reg52=reg44+reg52; reg44=reg49*reg41; T reg53=reg33*reg43; reg46=reg36-reg46;
    reg44=reg35-reg44; T reg54=reg45*reg52; reg47=reg29-reg47; T reg55=reg32*reg49; T reg56=reg41*reg52;
    T reg57=pow(reg46,2); T reg58=pow(reg40,2); reg53=reg37-reg53; T reg59=pow(reg51,2); T reg60=pow(reg50,2);
    reg48=reg30-reg48; reg54=reg34-reg54; reg60=reg59+reg60; reg56=reg36-reg56; reg55=reg30-reg55;
    reg59=pow(reg48,2); T reg61=pow(reg53,2); reg58=reg57+reg58; reg57=reg32*reg52; T reg62=pow(reg44,2);
    T reg63=pow(reg47,2); reg61=reg58+reg61; reg57=reg37-reg57; reg58=pow(reg54,2); T reg64=pow(reg56,2);
    reg59=reg60+reg59; reg60=pow(reg55,2); reg63=reg62+reg63; reg58=reg64+reg58; reg62=pow(reg57,2);
    reg59=pow(reg59,0.5); reg60=reg63+reg60; reg61=pow(reg61,0.5); reg40=reg40/reg61; reg60=pow(reg60,0.5);
    reg51=reg51/reg59; reg53=reg53/reg61; reg48=reg48/reg59; reg59=reg50/reg59; reg62=reg58+reg62;
    reg61=reg46/reg61; reg46=reg13*reg40; reg50=reg33*reg40; reg55=reg55/reg60; reg62=pow(reg62,0.5);
    reg58=reg39*reg53; reg63=reg5*reg61; reg44=reg44/reg60; reg64=reg38*reg40; T reg65=reg39*reg61;
    T reg66=reg13*reg39; T reg67=reg5*reg38; reg40=reg34*reg40; T reg68=reg61*reg36; T reg69=reg29*reg59;
    T reg70=reg35*reg51; reg60=reg47/reg60; reg47=reg39*reg51; T reg71=reg38*reg59; T reg72=reg38*reg53;
    T reg73=reg33*reg59; reg39=reg39*reg48; reg61=reg33*reg61; reg38=reg38*reg48; T reg74=reg33*reg51;
    reg51=reg5*reg51; reg59=reg13*reg59; reg5=reg37*reg53; reg40=reg68+reg40; reg72=reg61-reg72;
    reg50=reg58-reg50; reg65=reg64-reg65; reg54=reg54/reg62; reg57=reg57/reg62; reg13=reg22*reg48;
    reg59=reg51+reg59; reg38=reg74-reg38; reg73=reg39-reg73; reg47=reg71-reg47; reg69=reg70+reg69;
    reg48=reg30*reg48; reg66=reg67+reg66; reg33=reg22*reg33; reg39=reg32*reg44; reg51=reg55*reg41;
    reg53=reg22*reg53; reg46=reg63+reg46; reg22=reg55*reg45; reg58=reg32*reg60; reg61=reg60*reg41;
    reg63=reg44*reg45; reg64=reg21*reg45; reg35=reg35*reg44; reg29=reg29*reg60; reg67=reg23*reg41;
    reg62=reg56/reg62; reg44=reg23*reg44; reg60=reg21*reg60; reg56=reg41*reg57; reg41=reg41*reg54;
    reg13=reg59+reg13; reg53=reg46+reg53; reg72=skin_elem.p*reg72; reg46=reg62*reg45; reg50=skin_elem.p*reg50;
    reg36=reg62*reg36; reg5=reg40+reg5; reg21=reg21*reg54; reg23=reg62*reg23; reg34=reg34*reg54;
    reg40=reg25*reg32; reg64=reg67+reg64; reg62=reg62*reg32; reg65=skin_elem.p*reg65; reg54=reg32*reg54;
    reg45=reg45*reg57; reg32=reg25*reg55; reg60=reg44+reg60; reg38=skin_elem.p*reg38; reg30=reg55*reg30;
    reg73=skin_elem.p*reg73; reg29=reg35+reg29; reg47=skin_elem.p*reg47; reg63=reg61-reg63; reg48=reg69+reg48;
    reg51=reg39-reg51; reg33=reg66+reg33; reg58=reg22-reg58; reg22=0.6220084679281461892*reg50; reg35=0.044658198738520458147*reg73;
    reg39=0.16666666666666667632*reg65; reg54=reg45-reg54; reg44=0.044658198738520458147*skin_elem.f_surf[0]; reg45=0.6220084679281461892*skin_elem.f_surf[0]; reg55=0.16666666666666667632*reg73;
    reg59=0.044658198738520458147*reg72; reg61=0.16666666666666667632*skin_elem.f_surf[0]; reg66=0.044658198738520458147*skin_elem.f_surf[1]; reg67=0.044658198738520458147*reg65; reg68=0.6220084679281461892*skin_elem.f_surf[2];
    reg69=0.6220084679281461892*reg73; reg70=0.16666666666666667632*skin_elem.f_surf[1]; reg71=0.044658198738520458147*reg47; reg74=0.16666666666666667632*reg50; T reg75=0.6220084679281461892*skin_elem.f_surf[1];
    T reg76=0.044658198738520458147*skin_elem.f_surf[2]; T reg77=0.16666666666666667632*skin_elem.f_surf[2]; reg30=reg29+reg30; reg63=skin_elem.p*reg63; reg58=skin_elem.p*reg58;
    reg48=reg48*reg33; reg51=skin_elem.p*reg51; reg13=reg42*reg13; reg29=0.6220084679281461892*reg72; reg42=0.16666666666666667632*reg72;
    reg43=reg53*reg43; reg33=reg5*reg33; reg5=0.044658198738520458147*reg38; reg53=0.6220084679281461892*reg38; T reg78=0.6220084679281461892*reg65;
    reg32=reg60+reg32; reg25=reg25*reg57; reg21=reg23+reg21; reg23=0.16666666666666667632*reg38; reg40=reg64+reg40;
    reg60=0.16666666666666667632*reg47; reg64=0.044658198738520458147*reg50; reg57=reg37*reg57; reg34=reg36+reg34; reg46=reg41-reg46;
    reg36=0.6220084679281461892*reg47; reg56=reg62-reg56; reg67=reg76+reg67; reg37=0.6220084679281461892*reg51; reg41=0.16666666666666667632*reg63;
    reg74=reg61+reg74; reg71=reg76+reg71; reg78=reg68+reg78; reg22=reg45+reg22; reg23=reg70+reg23;
    reg39=reg77+reg39; reg59=reg66+reg59; reg35=reg44+reg35; reg55=reg61+reg55; reg36=reg68+reg36;
    reg62=0.044658198738520458147*reg51; T reg79=0.044658198738520458147*reg58; T reg80=0.6220084679281461892*reg58; reg64=reg44+reg64; reg42=reg70+reg42;
    reg5=reg66+reg5; T reg81=0.16666666666666667632*reg51; T reg82=0.16666666666666667632*reg58; reg69=reg45+reg69; T reg83=0.6220084679281461892*reg63;
    reg30=reg40*reg30; reg53=reg75+reg53; reg54=skin_elem.p*reg54; reg56=skin_elem.p*reg56; reg32=reg49*reg32;
    reg60=reg77+reg60; reg46=skin_elem.p*reg46; reg57=reg34+reg57; reg29=reg75+reg29; reg43=reg33-reg43;
    reg13=reg48-reg13; reg25=reg21+reg25; reg21=0.044658198738520458147*reg63; reg33=0.044658198738520458147*reg56; reg64=reg43*reg64;
    reg34=0.16666666666666667632*reg56; reg83=reg68+reg83; reg40=reg57*reg40; reg48=0.6220084679281461892*reg56; reg55=reg13*reg55;
    reg36=reg13*reg36; reg49=0.6220084679281461892*reg46; reg57=0.16666666666666667632*reg46; reg52=reg25*reg52; reg62=reg66+reg62;
    reg79=reg44+reg79; reg42=reg43*reg42; reg21=reg76+reg21; reg80=reg45+reg80; reg78=reg43*reg78;
    reg25=0.6220084679281461892*reg54; T reg84=0.16666666666666667632*reg54; T reg85=0.044658198738520458147*reg46; reg32=reg30-reg32; reg35=reg13*reg35;
    reg41=reg77+reg41; reg74=reg43*reg74; reg37=reg75+reg37; reg81=reg70+reg81; reg60=reg13*reg60;
    reg23=reg13*reg23; reg29=reg43*reg29; reg5=reg13*reg5; reg30=0.044658198738520458147*reg54; reg71=reg13*reg71;
    reg67=reg43*reg67; reg59=reg43*reg59; reg22=reg43*reg22; reg39=reg43*reg39; reg82=reg61+reg82;
    reg53=reg13*reg53; reg69=reg13*reg69; reg33=reg66+reg33; reg81=reg32*reg81; reg36=0.25*reg36;
    reg49=reg68+reg49; reg69=0.25*reg69; reg39=0.25*reg39; reg53=0.25*reg53; reg71=0.25*reg71;
    reg30=reg44+reg30; reg41=reg32*reg41; reg85=reg76+reg85; reg79=reg32*reg79; reg52=reg40-reg52;
    reg83=reg32*reg83; reg25=reg45+reg25; reg35=0.25*reg35; reg67=0.25*reg67; reg82=reg82*reg32;
    reg34=reg70+reg34; reg29=0.25*reg29; reg84=reg61+reg84; reg37=reg32*reg37; reg21=reg32*reg21;
    reg23=0.25*reg23; reg78=0.25*reg78; reg5=0.25*reg5; reg42=0.25*reg42; reg48=reg75+reg48;
    reg64=0.25*reg64; reg60=0.25*reg60; reg80=reg32*reg80; reg55=0.25*reg55; reg62=reg32*reg62;
    reg22=0.25*reg22; reg74=0.25*reg74; reg57=reg77+reg57; reg59=0.25*reg59; reg37=0.25*reg37;
    reg53=reg42+reg53; reg80=0.25*reg80; reg64=reg55+reg64; reg85=reg52*reg85; reg67=reg60+reg67;
    reg59=reg23+reg59; reg36=reg39+reg36; reg33=reg52*reg33; reg83=0.25*reg83; reg79=0.25*reg79;
    reg34=reg52*reg34; reg55=reg22+reg55; reg48=reg52*reg48; reg5=reg42+reg5; reg35=reg35+reg74;
    reg82=0.25*reg82; reg81=0.25*reg81; reg23=reg29+reg23; reg62=0.25*reg62; reg49=reg52*reg49;
    reg21=0.25*reg21; reg57=reg52*reg57; reg71=reg39+reg71; reg41=0.25*reg41; reg25=reg52*reg25;
    reg60=reg78+reg60; reg30=reg52*reg30; reg84=reg52*reg84; reg69=reg74+reg69; reg21=reg60+reg21;
    reg25=0.25*reg25; reg80=reg64+reg80; reg84=0.25*reg84; reg37=reg59+reg37; reg57=0.25*reg57;
    reg33=0.25*reg33; reg69=reg82+reg69; reg30=0.25*reg30; reg83=reg67+reg83; reg53=reg81+reg53;
    reg71=reg71+reg41; reg85=0.25*reg85; reg49=0.25*reg49; reg79=reg55+reg79; reg81=reg5+reg81;
    reg36=reg41+reg36; reg23=reg62+reg23; reg48=0.25*reg48; reg35=reg82+reg35; reg34=0.25*reg34;
    reg79=reg79+reg84; sollicitation[indices[2]+0]+=reg79; reg83=reg57+reg83; sollicitation[indices[7]+2]+=reg83; reg37=reg34+reg37;
    sollicitation[indices[7]+1]+=reg37; reg21=reg57+reg21; sollicitation[indices[2]+2]+=reg21; reg34=reg23+reg34; sollicitation[indices[2]+1]+=reg34;
    reg80=reg84+reg80; sollicitation[indices[7]+0]+=reg80; reg35=reg25+reg35; sollicitation[indices[3]+0]+=reg35; reg36=reg85+reg36;
    sollicitation[indices[6]+2]+=reg36; reg81=reg48+reg81; sollicitation[indices[3]+1]+=reg81; reg53=reg33+reg53; sollicitation[indices[6]+1]+=reg53;
    reg71=reg49+reg71; sollicitation[indices[3]+2]+=reg71; reg69=reg30+reg69; sollicitation[indices[6]+0]+=reg69;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(7)[0]; T reg1=0.21132486540518713447*elem.pos(3)[1]; T reg2=0.21132486540518713447*elem.pos(3)[0]; T reg3=0.21132486540518713447*elem.pos(7)[1]; T reg4=0.78867513459481286553*elem.pos(7)[0];
    T reg5=reg0-reg2; T reg6=0.78867513459481286553*elem.pos(7)[1]; T reg7=0.78867513459481286553*elem.pos(6)[0]; T reg8=0.21132486540518713447*elem.pos(7)[2]; T reg9=0.21132486540518713447*elem.pos(3)[2];
    T reg10=0.78867513459481286553*elem.pos(6)[1]; T reg11=0.78867513459481286553*elem.pos(3)[0]; T reg12=0.78867513459481286553*elem.pos(3)[1]; T reg13=reg3-reg1; T reg14=0.78867513459481286553*elem.pos(2)[1];
    T reg15=0.78867513459481286553*elem.pos(6)[2]; T reg16=0.78867513459481286553*elem.pos(2)[0]; T reg17=0.78867513459481286553*elem.pos(3)[2]; T reg18=0.21132486540518713447*elem.pos(6)[0]; T reg19=0.78867513459481286553*elem.pos(7)[2];
    T reg20=0.21132486540518713447*elem.pos(6)[1]; reg5=reg7+reg5; T reg21=reg6-reg12; T reg22=reg8-reg9; T reg23=reg4-reg11;
    reg13=reg10+reg13; reg23=reg18+reg23; T reg24=0.21132486540518713447*elem.pos(6)[2]; reg21=reg20+reg21; T reg25=reg19-reg17;
    reg13=reg13-reg14; T reg26=0.21132486540518713447*elem.pos(2)[1]; T reg27=0.21132486540518713447*elem.pos(2)[0]; T reg28=0.78867513459481286553*elem.pos(2)[2]; reg22=reg15+reg22;
    reg5=reg5-reg16; reg22=reg22-reg28; reg21=reg21-reg26; reg25=reg24+reg25; T reg29=pow(reg5,2);
    T reg30=pow(reg13,2); reg23=reg23-reg27; T reg31=0.21132486540518713447*elem.pos(2)[2]; reg25=reg25-reg31; reg29=reg30+reg29;
    reg30=pow(reg21,2); T reg32=pow(reg23,2); T reg33=pow(reg22,2); reg32=reg30+reg32; reg30=pow(reg25,2);
    T reg34=reg3+reg12; reg33=reg29+reg33; reg29=reg1+reg6; T reg35=reg2+reg4; T reg36=reg11+reg0;
    reg29=reg10-reg29; reg35=reg7-reg35; T reg37=reg8+reg17; reg33=pow(reg33,0.5); reg34=reg20-reg34;
    reg32=reg30+reg32; reg36=reg18-reg36; reg30=reg9+reg19; reg32=pow(reg32,0.5); reg29=reg26+reg29;
    reg35=reg27+reg35; reg34=reg14+reg34; T reg38=reg5/reg33; reg36=reg16+reg36; reg30=reg15-reg30;
    T reg39=reg13/reg33; reg37=reg24-reg37; T reg40=reg35*reg38; reg30=reg31+reg30; reg33=reg22/reg33;
    T reg41=reg23/reg32; T reg42=reg29*reg39; reg37=reg28+reg37; T reg43=reg34*reg39; T reg44=reg38*reg36;
    T reg45=reg21/reg32; T reg46=reg35*reg41; reg44=reg43+reg44; reg43=reg37*reg33; T reg47=reg29*reg45;
    reg32=reg25/reg32; reg40=reg42+reg40; reg42=reg30*reg33; T reg48=reg34*reg45; T reg49=reg32*reg30;
    reg47=reg46+reg47; reg43=reg44+reg43; reg44=reg36*reg41; reg42=reg40+reg42; reg40=reg39*reg43;
    reg46=reg38*reg43; T reg50=reg39*reg42; T reg51=reg38*reg42; T reg52=reg37*reg32; reg44=reg48+reg44;
    reg49=reg47+reg49; reg50=reg29-reg50; reg47=reg49*reg45; reg48=reg33*reg42; reg40=reg34-reg40;
    reg51=reg35-reg51; reg52=reg44+reg52; reg44=reg49*reg41; T reg53=reg33*reg43; reg46=reg36-reg46;
    reg44=reg35-reg44; T reg54=reg45*reg52; reg47=reg29-reg47; T reg55=reg32*reg49; T reg56=reg41*reg52;
    T reg57=pow(reg46,2); T reg58=pow(reg40,2); reg53=reg37-reg53; T reg59=pow(reg51,2); T reg60=pow(reg50,2);
    reg48=reg30-reg48; reg54=reg34-reg54; reg60=reg59+reg60; reg56=reg36-reg56; reg55=reg30-reg55;
    reg59=pow(reg48,2); T reg61=pow(reg53,2); reg58=reg57+reg58; reg57=reg32*reg52; T reg62=pow(reg44,2);
    T reg63=pow(reg47,2); reg61=reg58+reg61; reg57=reg37-reg57; reg58=pow(reg54,2); T reg64=pow(reg56,2);
    reg59=reg60+reg59; reg60=pow(reg55,2); reg63=reg62+reg63; reg58=reg64+reg58; reg62=pow(reg57,2);
    reg59=pow(reg59,0.5); reg60=reg63+reg60; reg61=pow(reg61,0.5); reg40=reg40/reg61; reg60=pow(reg60,0.5);
    reg51=reg51/reg59; reg53=reg53/reg61; reg48=reg48/reg59; reg59=reg50/reg59; reg62=reg58+reg62;
    reg61=reg46/reg61; reg46=reg13*reg40; reg50=reg33*reg40; reg55=reg55/reg60; reg62=pow(reg62,0.5);
    reg58=reg39*reg53; reg63=reg5*reg61; reg44=reg44/reg60; reg64=reg38*reg40; T reg65=reg39*reg61;
    T reg66=reg13*reg39; T reg67=reg5*reg38; reg40=reg34*reg40; T reg68=reg61*reg36; T reg69=reg29*reg59;
    T reg70=reg35*reg51; reg60=reg47/reg60; reg47=reg39*reg51; T reg71=reg38*reg59; T reg72=reg38*reg53;
    T reg73=reg33*reg59; reg39=reg39*reg48; reg61=reg33*reg61; reg38=reg38*reg48; T reg74=reg33*reg51;
    reg51=reg5*reg51; reg59=reg13*reg59; reg5=reg37*reg53; reg40=reg68+reg40; reg72=reg61-reg72;
    reg50=reg58-reg50; reg65=reg64-reg65; reg54=reg54/reg62; reg57=reg57/reg62; reg13=reg22*reg48;
    reg59=reg51+reg59; reg38=reg74-reg38; reg73=reg39-reg73; reg47=reg71-reg47; reg69=reg70+reg69;
    reg48=reg30*reg48; reg66=reg67+reg66; reg33=reg22*reg33; reg39=reg32*reg44; reg51=reg55*reg41;
    reg53=reg22*reg53; reg46=reg63+reg46; reg22=reg55*reg45; reg58=reg32*reg60; reg61=reg60*reg41;
    reg63=reg44*reg45; reg64=reg21*reg45; reg35=reg35*reg44; reg29=reg29*reg60; reg67=reg23*reg41;
    reg62=reg56/reg62; reg44=reg23*reg44; reg60=reg21*reg60; reg56=reg41*reg57; reg41=reg41*reg54;
    reg13=reg59+reg13; reg53=reg46+reg53; reg72=skin_elem.p*reg72; reg46=reg62*reg45; reg50=skin_elem.p*reg50;
    reg36=reg62*reg36; reg5=reg40+reg5; reg21=reg21*reg54; reg23=reg62*reg23; reg34=reg34*reg54;
    reg40=reg25*reg32; reg64=reg67+reg64; reg62=reg62*reg32; reg65=skin_elem.p*reg65; reg54=reg32*reg54;
    reg45=reg45*reg57; reg32=reg25*reg55; reg60=reg44+reg60; reg38=skin_elem.p*reg38; reg30=reg55*reg30;
    reg73=skin_elem.p*reg73; reg29=reg35+reg29; reg47=skin_elem.p*reg47; reg63=reg61-reg63; reg48=reg69+reg48;
    reg51=reg39-reg51; reg33=reg66+reg33; reg58=reg22-reg58; reg22=0.6220084679281461892*reg50; reg35=0.044658198738520458147*reg73;
    reg39=0.16666666666666667632*reg65; reg54=reg45-reg54; reg44=0.044658198738520458147*skin_elem.f_surf[0]; reg45=0.6220084679281461892*skin_elem.f_surf[0]; reg55=0.16666666666666667632*reg73;
    reg59=0.044658198738520458147*reg72; reg61=0.16666666666666667632*skin_elem.f_surf[0]; reg66=0.044658198738520458147*skin_elem.f_surf[1]; reg67=0.044658198738520458147*reg65; reg68=0.6220084679281461892*skin_elem.f_surf[2];
    reg69=0.6220084679281461892*reg73; reg70=0.16666666666666667632*skin_elem.f_surf[1]; reg71=0.044658198738520458147*reg47; reg74=0.16666666666666667632*reg50; T reg75=0.6220084679281461892*skin_elem.f_surf[1];
    T reg76=0.044658198738520458147*skin_elem.f_surf[2]; T reg77=0.16666666666666667632*skin_elem.f_surf[2]; reg30=reg29+reg30; reg63=skin_elem.p*reg63; reg58=skin_elem.p*reg58;
    reg48=reg48*reg33; reg51=skin_elem.p*reg51; reg13=reg42*reg13; reg29=0.6220084679281461892*reg72; reg42=0.16666666666666667632*reg72;
    reg43=reg53*reg43; reg33=reg5*reg33; reg5=0.044658198738520458147*reg38; reg53=0.6220084679281461892*reg38; T reg78=0.6220084679281461892*reg65;
    reg32=reg60+reg32; reg25=reg25*reg57; reg21=reg23+reg21; reg23=0.16666666666666667632*reg38; reg40=reg64+reg40;
    reg60=0.16666666666666667632*reg47; reg64=0.044658198738520458147*reg50; reg57=reg37*reg57; reg34=reg36+reg34; reg46=reg41-reg46;
    reg36=0.6220084679281461892*reg47; reg56=reg62-reg56; reg67=reg76+reg67; reg37=0.6220084679281461892*reg51; reg41=0.16666666666666667632*reg63;
    reg74=reg61+reg74; reg71=reg76+reg71; reg78=reg68+reg78; reg22=reg45+reg22; reg23=reg70+reg23;
    reg39=reg77+reg39; reg59=reg66+reg59; reg35=reg44+reg35; reg55=reg61+reg55; reg36=reg68+reg36;
    reg62=0.044658198738520458147*reg51; T reg79=0.044658198738520458147*reg58; T reg80=0.6220084679281461892*reg58; reg64=reg44+reg64; reg42=reg70+reg42;
    reg5=reg66+reg5; T reg81=0.16666666666666667632*reg51; T reg82=0.16666666666666667632*reg58; reg69=reg45+reg69; T reg83=0.6220084679281461892*reg63;
    reg30=reg40*reg30; reg53=reg75+reg53; reg54=skin_elem.p*reg54; reg56=skin_elem.p*reg56; reg32=reg49*reg32;
    reg60=reg77+reg60; reg46=skin_elem.p*reg46; reg57=reg34+reg57; reg29=reg75+reg29; reg43=reg33-reg43;
    reg13=reg48-reg13; reg25=reg21+reg25; reg21=0.044658198738520458147*reg63; reg33=0.044658198738520458147*reg56; reg64=reg43*reg64;
    reg34=0.16666666666666667632*reg56; reg83=reg68+reg83; reg40=reg57*reg40; reg48=0.6220084679281461892*reg56; reg55=reg13*reg55;
    reg36=reg13*reg36; reg49=0.6220084679281461892*reg46; reg57=0.16666666666666667632*reg46; reg52=reg25*reg52; reg62=reg66+reg62;
    reg79=reg44+reg79; reg42=reg43*reg42; reg21=reg76+reg21; reg80=reg45+reg80; reg78=reg43*reg78;
    reg25=0.6220084679281461892*reg54; T reg84=0.16666666666666667632*reg54; T reg85=0.044658198738520458147*reg46; reg32=reg30-reg32; reg35=reg13*reg35;
    reg41=reg77+reg41; reg74=reg43*reg74; reg37=reg75+reg37; reg81=reg70+reg81; reg60=reg13*reg60;
    reg23=reg13*reg23; reg29=reg43*reg29; reg5=reg13*reg5; reg30=0.044658198738520458147*reg54; reg71=reg13*reg71;
    reg67=reg43*reg67; reg59=reg43*reg59; reg22=reg43*reg22; reg39=reg43*reg39; reg82=reg61+reg82;
    reg53=reg13*reg53; reg69=reg13*reg69; reg33=reg66+reg33; reg81=reg32*reg81; reg36=0.25*reg36;
    reg49=reg68+reg49; reg69=0.25*reg69; reg39=0.25*reg39; reg53=0.25*reg53; reg71=0.25*reg71;
    reg30=reg44+reg30; reg41=reg32*reg41; reg85=reg76+reg85; reg79=reg32*reg79; reg52=reg40-reg52;
    reg83=reg32*reg83; reg25=reg45+reg25; reg35=0.25*reg35; reg67=0.25*reg67; reg82=reg82*reg32;
    reg34=reg70+reg34; reg29=0.25*reg29; reg84=reg61+reg84; reg37=reg32*reg37; reg21=reg32*reg21;
    reg23=0.25*reg23; reg78=0.25*reg78; reg5=0.25*reg5; reg42=0.25*reg42; reg48=reg75+reg48;
    reg64=0.25*reg64; reg60=0.25*reg60; reg80=reg32*reg80; reg55=0.25*reg55; reg62=reg32*reg62;
    reg22=0.25*reg22; reg74=0.25*reg74; reg57=reg77+reg57; reg59=0.25*reg59; reg37=0.25*reg37;
    reg53=reg42+reg53; reg80=0.25*reg80; reg64=reg55+reg64; reg85=reg52*reg85; reg67=reg60+reg67;
    reg59=reg23+reg59; reg36=reg39+reg36; reg33=reg52*reg33; reg83=0.25*reg83; reg79=0.25*reg79;
    reg34=reg52*reg34; reg55=reg22+reg55; reg48=reg52*reg48; reg5=reg42+reg5; reg35=reg35+reg74;
    reg82=0.25*reg82; reg81=0.25*reg81; reg23=reg29+reg23; reg62=0.25*reg62; reg49=reg52*reg49;
    reg21=0.25*reg21; reg57=reg52*reg57; reg71=reg39+reg71; reg41=0.25*reg41; reg25=reg52*reg25;
    reg60=reg78+reg60; reg30=reg52*reg30; reg84=reg52*reg84; reg69=reg74+reg69; reg21=reg60+reg21;
    reg25=0.25*reg25; reg80=reg64+reg80; reg84=0.25*reg84; reg37=reg59+reg37; reg57=0.25*reg57;
    reg33=0.25*reg33; reg69=reg82+reg69; reg30=0.25*reg30; reg83=reg67+reg83; reg53=reg81+reg53;
    reg71=reg71+reg41; reg85=0.25*reg85; reg49=0.25*reg49; reg79=reg55+reg79; reg81=reg5+reg81;
    reg36=reg41+reg36; reg23=reg62+reg23; reg48=0.25*reg48; reg35=reg82+reg35; reg34=0.25*reg34;
    reg79=reg79+reg84; sollicitation[indices[2]+0]+=reg79; reg83=reg57+reg83; sollicitation[indices[7]+2]+=reg83; reg37=reg34+reg37;
    sollicitation[indices[7]+1]+=reg37; reg21=reg57+reg21; sollicitation[indices[2]+2]+=reg21; reg34=reg23+reg34; sollicitation[indices[2]+1]+=reg34;
    reg80=reg84+reg80; sollicitation[indices[7]+0]+=reg80; reg35=reg25+reg35; sollicitation[indices[3]+0]+=reg35; reg36=reg85+reg36;
    sollicitation[indices[6]+2]+=reg36; reg81=reg48+reg81; sollicitation[indices[3]+1]+=reg81; reg53=reg33+reg53; sollicitation[indices[6]+1]+=reg53;
    reg71=reg49+reg71; sollicitation[indices[3]+2]+=reg71; reg69=reg30+reg69; sollicitation[indices[6]+0]+=reg69;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(7)[0]; T reg1=0.21132486540518713447*elem.pos(3)[1]; T reg2=0.21132486540518713447*elem.pos(3)[0]; T reg3=0.21132486540518713447*elem.pos(7)[1]; T reg4=0.78867513459481286553*elem.pos(7)[0];
    T reg5=reg0-reg2; T reg6=0.78867513459481286553*elem.pos(7)[1]; T reg7=0.78867513459481286553*elem.pos(6)[0]; T reg8=0.21132486540518713447*elem.pos(7)[2]; T reg9=0.21132486540518713447*elem.pos(3)[2];
    T reg10=0.78867513459481286553*elem.pos(6)[1]; T reg11=0.78867513459481286553*elem.pos(3)[0]; T reg12=0.78867513459481286553*elem.pos(3)[1]; T reg13=reg3-reg1; T reg14=0.78867513459481286553*elem.pos(2)[1];
    T reg15=0.78867513459481286553*elem.pos(6)[2]; T reg16=0.78867513459481286553*elem.pos(2)[0]; T reg17=0.78867513459481286553*elem.pos(3)[2]; T reg18=0.21132486540518713447*elem.pos(6)[0]; T reg19=0.78867513459481286553*elem.pos(7)[2];
    T reg20=0.21132486540518713447*elem.pos(6)[1]; reg5=reg7+reg5; T reg21=reg6-reg12; T reg22=reg8-reg9; T reg23=reg4-reg11;
    reg13=reg10+reg13; reg23=reg18+reg23; T reg24=0.21132486540518713447*elem.pos(6)[2]; reg21=reg20+reg21; T reg25=reg19-reg17;
    reg13=reg13-reg14; T reg26=0.21132486540518713447*elem.pos(2)[1]; T reg27=0.21132486540518713447*elem.pos(2)[0]; T reg28=0.78867513459481286553*elem.pos(2)[2]; reg22=reg15+reg22;
    reg5=reg5-reg16; reg22=reg22-reg28; reg21=reg21-reg26; reg25=reg24+reg25; T reg29=pow(reg5,2);
    T reg30=pow(reg13,2); reg23=reg23-reg27; T reg31=0.21132486540518713447*elem.pos(2)[2]; reg25=reg25-reg31; reg29=reg30+reg29;
    reg30=pow(reg21,2); T reg32=pow(reg23,2); T reg33=pow(reg22,2); reg32=reg30+reg32; reg30=pow(reg25,2);
    T reg34=reg3+reg12; reg33=reg29+reg33; reg29=reg1+reg6; T reg35=reg2+reg4; T reg36=reg11+reg0;
    reg29=reg10-reg29; reg35=reg7-reg35; T reg37=reg8+reg17; reg33=pow(reg33,0.5); reg34=reg20-reg34;
    reg32=reg30+reg32; reg36=reg18-reg36; reg30=reg9+reg19; reg32=pow(reg32,0.5); reg29=reg26+reg29;
    reg35=reg27+reg35; reg34=reg14+reg34; T reg38=reg5/reg33; reg36=reg16+reg36; reg30=reg15-reg30;
    T reg39=reg13/reg33; reg37=reg24-reg37; T reg40=reg35*reg38; reg30=reg31+reg30; reg33=reg22/reg33;
    T reg41=reg23/reg32; T reg42=reg29*reg39; reg37=reg28+reg37; T reg43=reg34*reg39; T reg44=reg38*reg36;
    T reg45=reg21/reg32; T reg46=reg35*reg41; reg44=reg43+reg44; reg43=reg37*reg33; T reg47=reg29*reg45;
    reg32=reg25/reg32; reg40=reg42+reg40; reg42=reg30*reg33; T reg48=reg34*reg45; T reg49=reg32*reg30;
    reg47=reg46+reg47; reg43=reg44+reg43; reg44=reg36*reg41; reg42=reg40+reg42; reg40=reg39*reg43;
    reg46=reg38*reg43; T reg50=reg39*reg42; T reg51=reg38*reg42; T reg52=reg37*reg32; reg44=reg48+reg44;
    reg49=reg47+reg49; reg50=reg29-reg50; reg47=reg49*reg45; reg48=reg33*reg42; reg40=reg34-reg40;
    reg51=reg35-reg51; reg52=reg44+reg52; reg44=reg49*reg41; T reg53=reg33*reg43; reg46=reg36-reg46;
    reg44=reg35-reg44; T reg54=reg45*reg52; reg47=reg29-reg47; T reg55=reg32*reg49; T reg56=reg41*reg52;
    T reg57=pow(reg46,2); T reg58=pow(reg40,2); reg53=reg37-reg53; T reg59=pow(reg51,2); T reg60=pow(reg50,2);
    reg48=reg30-reg48; reg54=reg34-reg54; reg60=reg59+reg60; reg56=reg36-reg56; reg55=reg30-reg55;
    reg59=pow(reg48,2); T reg61=pow(reg53,2); reg58=reg57+reg58; reg57=reg32*reg52; T reg62=pow(reg44,2);
    T reg63=pow(reg47,2); reg61=reg58+reg61; reg57=reg37-reg57; reg58=pow(reg54,2); T reg64=pow(reg56,2);
    reg59=reg60+reg59; reg60=pow(reg55,2); reg63=reg62+reg63; reg58=reg64+reg58; reg62=pow(reg57,2);
    reg59=pow(reg59,0.5); reg60=reg63+reg60; reg61=pow(reg61,0.5); reg40=reg40/reg61; reg60=pow(reg60,0.5);
    reg51=reg51/reg59; reg53=reg53/reg61; reg48=reg48/reg59; reg59=reg50/reg59; reg62=reg58+reg62;
    reg61=reg46/reg61; reg46=reg13*reg40; reg50=reg33*reg40; reg55=reg55/reg60; reg62=pow(reg62,0.5);
    reg58=reg39*reg53; reg63=reg5*reg61; reg44=reg44/reg60; reg64=reg38*reg40; T reg65=reg39*reg61;
    T reg66=reg13*reg39; T reg67=reg5*reg38; reg40=reg34*reg40; T reg68=reg61*reg36; T reg69=reg29*reg59;
    T reg70=reg35*reg51; reg60=reg47/reg60; reg47=reg39*reg51; T reg71=reg38*reg59; T reg72=reg38*reg53;
    T reg73=reg33*reg59; reg39=reg39*reg48; reg61=reg33*reg61; reg38=reg38*reg48; T reg74=reg33*reg51;
    reg51=reg5*reg51; reg59=reg13*reg59; reg5=reg37*reg53; reg40=reg68+reg40; reg72=reg61-reg72;
    reg50=reg58-reg50; reg65=reg64-reg65; reg54=reg54/reg62; reg57=reg57/reg62; reg13=reg22*reg48;
    reg59=reg51+reg59; reg38=reg74-reg38; reg73=reg39-reg73; reg47=reg71-reg47; reg69=reg70+reg69;
    reg48=reg30*reg48; reg66=reg67+reg66; reg33=reg22*reg33; reg39=reg32*reg44; reg51=reg55*reg41;
    reg53=reg22*reg53; reg46=reg63+reg46; reg22=reg55*reg45; reg58=reg32*reg60; reg61=reg60*reg41;
    reg63=reg44*reg45; reg64=reg21*reg45; reg35=reg35*reg44; reg29=reg29*reg60; reg67=reg23*reg41;
    reg62=reg56/reg62; reg44=reg23*reg44; reg60=reg21*reg60; reg56=reg41*reg57; reg41=reg41*reg54;
    reg13=reg59+reg13; reg53=reg46+reg53; reg72=skin_elem.p*reg72; reg46=reg62*reg45; reg50=skin_elem.p*reg50;
    reg36=reg62*reg36; reg5=reg40+reg5; reg21=reg21*reg54; reg23=reg62*reg23; reg34=reg34*reg54;
    reg40=reg25*reg32; reg64=reg67+reg64; reg62=reg62*reg32; reg65=skin_elem.p*reg65; reg54=reg32*reg54;
    reg45=reg45*reg57; reg32=reg25*reg55; reg60=reg44+reg60; reg38=skin_elem.p*reg38; reg30=reg55*reg30;
    reg73=skin_elem.p*reg73; reg29=reg35+reg29; reg47=skin_elem.p*reg47; reg63=reg61-reg63; reg48=reg69+reg48;
    reg51=reg39-reg51; reg33=reg66+reg33; reg58=reg22-reg58; reg22=0.6220084679281461892*reg50; reg35=0.044658198738520458147*reg73;
    reg39=0.16666666666666667632*reg65; reg54=reg45-reg54; reg44=0.044658198738520458147*skin_elem.f_surf[0]; reg45=0.6220084679281461892*skin_elem.f_surf[0]; reg55=0.16666666666666667632*reg73;
    reg59=0.044658198738520458147*reg72; reg61=0.16666666666666667632*skin_elem.f_surf[0]; reg66=0.044658198738520458147*skin_elem.f_surf[1]; reg67=0.044658198738520458147*reg65; reg68=0.6220084679281461892*skin_elem.f_surf[2];
    reg69=0.6220084679281461892*reg73; reg70=0.16666666666666667632*skin_elem.f_surf[1]; reg71=0.044658198738520458147*reg47; reg74=0.16666666666666667632*reg50; T reg75=0.6220084679281461892*skin_elem.f_surf[1];
    T reg76=0.044658198738520458147*skin_elem.f_surf[2]; T reg77=0.16666666666666667632*skin_elem.f_surf[2]; reg30=reg29+reg30; reg63=skin_elem.p*reg63; reg58=skin_elem.p*reg58;
    reg48=reg48*reg33; reg51=skin_elem.p*reg51; reg13=reg42*reg13; reg29=0.6220084679281461892*reg72; reg42=0.16666666666666667632*reg72;
    reg43=reg53*reg43; reg33=reg5*reg33; reg5=0.044658198738520458147*reg38; reg53=0.6220084679281461892*reg38; T reg78=0.6220084679281461892*reg65;
    reg32=reg60+reg32; reg25=reg25*reg57; reg21=reg23+reg21; reg23=0.16666666666666667632*reg38; reg40=reg64+reg40;
    reg60=0.16666666666666667632*reg47; reg64=0.044658198738520458147*reg50; reg57=reg37*reg57; reg34=reg36+reg34; reg46=reg41-reg46;
    reg36=0.6220084679281461892*reg47; reg56=reg62-reg56; reg67=reg76+reg67; reg37=0.6220084679281461892*reg51; reg41=0.16666666666666667632*reg63;
    reg74=reg61+reg74; reg71=reg76+reg71; reg78=reg68+reg78; reg22=reg45+reg22; reg23=reg70+reg23;
    reg39=reg77+reg39; reg59=reg66+reg59; reg35=reg44+reg35; reg55=reg61+reg55; reg36=reg68+reg36;
    reg62=0.044658198738520458147*reg51; T reg79=0.044658198738520458147*reg58; T reg80=0.6220084679281461892*reg58; reg64=reg44+reg64; reg42=reg70+reg42;
    reg5=reg66+reg5; T reg81=0.16666666666666667632*reg51; T reg82=0.16666666666666667632*reg58; reg69=reg45+reg69; T reg83=0.6220084679281461892*reg63;
    reg30=reg40*reg30; reg53=reg75+reg53; reg54=skin_elem.p*reg54; reg56=skin_elem.p*reg56; reg32=reg49*reg32;
    reg60=reg77+reg60; reg46=skin_elem.p*reg46; reg57=reg34+reg57; reg29=reg75+reg29; reg43=reg33-reg43;
    reg13=reg48-reg13; reg25=reg21+reg25; reg21=0.044658198738520458147*reg63; reg33=0.044658198738520458147*reg56; reg64=reg43*reg64;
    reg34=0.16666666666666667632*reg56; reg83=reg68+reg83; reg40=reg57*reg40; reg48=0.6220084679281461892*reg56; reg55=reg13*reg55;
    reg36=reg13*reg36; reg49=0.6220084679281461892*reg46; reg57=0.16666666666666667632*reg46; reg52=reg25*reg52; reg62=reg66+reg62;
    reg79=reg44+reg79; reg42=reg43*reg42; reg21=reg76+reg21; reg80=reg45+reg80; reg78=reg43*reg78;
    reg25=0.6220084679281461892*reg54; T reg84=0.16666666666666667632*reg54; T reg85=0.044658198738520458147*reg46; reg32=reg30-reg32; reg35=reg13*reg35;
    reg41=reg77+reg41; reg74=reg43*reg74; reg37=reg75+reg37; reg81=reg70+reg81; reg60=reg13*reg60;
    reg23=reg13*reg23; reg29=reg43*reg29; reg5=reg13*reg5; reg30=0.044658198738520458147*reg54; reg71=reg13*reg71;
    reg67=reg43*reg67; reg59=reg43*reg59; reg22=reg43*reg22; reg39=reg43*reg39; reg82=reg61+reg82;
    reg53=reg13*reg53; reg69=reg13*reg69; reg33=reg66+reg33; reg81=reg32*reg81; reg36=0.25*reg36;
    reg49=reg68+reg49; reg69=0.25*reg69; reg39=0.25*reg39; reg53=0.25*reg53; reg71=0.25*reg71;
    reg30=reg44+reg30; reg41=reg32*reg41; reg85=reg76+reg85; reg79=reg32*reg79; reg52=reg40-reg52;
    reg83=reg32*reg83; reg25=reg45+reg25; reg35=0.25*reg35; reg67=0.25*reg67; reg82=reg82*reg32;
    reg34=reg70+reg34; reg29=0.25*reg29; reg84=reg61+reg84; reg37=reg32*reg37; reg21=reg32*reg21;
    reg23=0.25*reg23; reg78=0.25*reg78; reg5=0.25*reg5; reg42=0.25*reg42; reg48=reg75+reg48;
    reg64=0.25*reg64; reg60=0.25*reg60; reg80=reg32*reg80; reg55=0.25*reg55; reg62=reg32*reg62;
    reg22=0.25*reg22; reg74=0.25*reg74; reg57=reg77+reg57; reg59=0.25*reg59; reg37=0.25*reg37;
    reg53=reg42+reg53; reg80=0.25*reg80; reg64=reg55+reg64; reg85=reg52*reg85; reg67=reg60+reg67;
    reg59=reg23+reg59; reg36=reg39+reg36; reg33=reg52*reg33; reg83=0.25*reg83; reg79=0.25*reg79;
    reg34=reg52*reg34; reg55=reg22+reg55; reg48=reg52*reg48; reg5=reg42+reg5; reg35=reg35+reg74;
    reg82=0.25*reg82; reg81=0.25*reg81; reg23=reg29+reg23; reg62=0.25*reg62; reg49=reg52*reg49;
    reg21=0.25*reg21; reg57=reg52*reg57; reg71=reg39+reg71; reg41=0.25*reg41; reg25=reg52*reg25;
    reg60=reg78+reg60; reg30=reg52*reg30; reg84=reg52*reg84; reg69=reg74+reg69; reg21=reg60+reg21;
    reg25=0.25*reg25; reg80=reg64+reg80; reg84=0.25*reg84; reg37=reg59+reg37; reg57=0.25*reg57;
    reg33=0.25*reg33; reg69=reg82+reg69; reg30=0.25*reg30; reg83=reg67+reg83; reg53=reg81+reg53;
    reg71=reg71+reg41; reg85=0.25*reg85; reg49=0.25*reg49; reg79=reg55+reg79; reg81=reg5+reg81;
    reg36=reg41+reg36; reg23=reg62+reg23; reg48=0.25*reg48; reg35=reg82+reg35; reg34=0.25*reg34;
    reg79=reg79+reg84; sollicitation[indices[2]+0]+=reg79; reg83=reg57+reg83; sollicitation[indices[7]+2]+=reg83; reg37=reg34+reg37;
    sollicitation[indices[7]+1]+=reg37; reg21=reg57+reg21; sollicitation[indices[2]+2]+=reg21; reg34=reg23+reg34; sollicitation[indices[2]+1]+=reg34;
    reg80=reg84+reg80; sollicitation[indices[7]+0]+=reg80; reg35=reg25+reg35; sollicitation[indices[3]+0]+=reg35; reg36=reg85+reg36;
    sollicitation[indices[6]+2]+=reg36; reg81=reg48+reg81; sollicitation[indices[3]+1]+=reg81; reg53=reg33+reg53; sollicitation[indices[6]+1]+=reg53;
    reg71=reg49+reg71; sollicitation[indices[3]+2]+=reg71; reg69=reg30+reg69; sollicitation[indices[6]+0]+=reg69;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[0]; T reg1=0.21132486540518713447*elem.pos(4)[1]; T reg2=0.21132486540518713447*elem.pos(0)[1]; T reg3=0.21132486540518713447*elem.pos(4)[0]; T reg4=0.78867513459481286553*elem.pos(4)[0];
    T reg5=0.21132486540518713447*elem.pos(0)[2]; T reg6=reg1-reg2; T reg7=0.78867513459481286553*elem.pos(7)[1]; T reg8=0.78867513459481286553*elem.pos(7)[0]; T reg9=reg3-reg0;
    T reg10=0.78867513459481286553*elem.pos(0)[0]; T reg11=0.78867513459481286553*elem.pos(0)[1]; T reg12=0.21132486540518713447*elem.pos(4)[2]; T reg13=0.78867513459481286553*elem.pos(4)[1]; T reg14=0.78867513459481286553*elem.pos(3)[0];
    T reg15=0.78867513459481286553*elem.pos(3)[1]; T reg16=0.78867513459481286553*elem.pos(0)[2]; reg9=reg8+reg9; T reg17=0.21132486540518713447*elem.pos(7)[1]; reg6=reg7+reg6;
    T reg18=0.78867513459481286553*elem.pos(4)[2]; T reg19=0.78867513459481286553*elem.pos(7)[2]; T reg20=reg12-reg5; T reg21=0.21132486540518713447*elem.pos(7)[0]; T reg22=reg13-reg11;
    T reg23=reg4-reg10; reg6=reg6-reg15; reg22=reg17+reg22; T reg24=reg18-reg16; reg23=reg21+reg23;
    reg9=reg9-reg14; T reg25=0.78867513459481286553*elem.pos(3)[2]; T reg26=0.21132486540518713447*elem.pos(3)[1]; T reg27=0.21132486540518713447*elem.pos(3)[0]; T reg28=0.21132486540518713447*elem.pos(7)[2];
    reg20=reg19+reg20; reg24=reg28+reg24; reg23=reg23-reg27; reg22=reg22-reg26; reg20=reg20-reg25;
    T reg29=0.21132486540518713447*elem.pos(3)[2]; T reg30=pow(reg9,2); T reg31=pow(reg6,2); reg24=reg24-reg29; T reg32=pow(reg22,2);
    reg31=reg30+reg31; reg30=pow(reg20,2); T reg33=pow(reg23,2); reg30=reg31+reg30; reg31=reg13+reg2;
    T reg34=reg4+reg0; T reg35=pow(reg24,2); reg32=reg33+reg32; reg33=reg10+reg3; T reg36=reg11+reg1;
    reg30=pow(reg30,0.5); reg31=reg7-reg31; T reg37=reg16+reg12; T reg38=reg5+reg18; reg36=reg17-reg36;
    reg33=reg21-reg33; reg34=reg8-reg34; reg35=reg32+reg35; reg36=reg15+reg36; reg33=reg14+reg33;
    reg38=reg19-reg38; reg31=reg26+reg31; reg34=reg27+reg34; reg37=reg28-reg37; reg35=pow(reg35,0.5);
    reg32=reg6/reg30; T reg39=reg9/reg30; reg38=reg29+reg38; reg30=reg20/reg30; T reg40=reg22/reg35;
    T reg41=reg23/reg35; T reg42=reg36*reg32; reg37=reg25+reg37; T reg43=reg31*reg32; T reg44=reg34*reg39;
    T reg45=reg33*reg39; reg35=reg24/reg35; T reg46=reg38*reg30; reg44=reg43+reg44; reg45=reg42+reg45;
    reg42=reg40*reg31; reg43=reg34*reg41; T reg47=reg37*reg30; reg47=reg45+reg47; reg45=reg35*reg38;
    reg46=reg44+reg46; reg43=reg42+reg43; reg42=reg40*reg36; reg44=reg41*reg33; T reg48=reg35*reg37;
    T reg49=reg39*reg47; T reg50=reg32*reg47; T reg51=reg46*reg39; reg44=reg42+reg44; reg42=reg46*reg32;
    reg45=reg43+reg45; reg48=reg44+reg48; reg51=reg34-reg51; reg43=reg30*reg47; reg44=reg46*reg30;
    T reg52=reg41*reg45; reg49=reg33-reg49; reg50=reg36-reg50; reg42=reg31-reg42; T reg53=reg40*reg45;
    T reg54=reg40*reg48; T reg55=reg41*reg48; T reg56=pow(reg42,2); reg53=reg31-reg53; T reg57=reg35*reg45;
    T reg58=pow(reg51,2); reg43=reg37-reg43; T reg59=pow(reg50,2); reg44=reg38-reg44; reg52=reg34-reg52;
    T reg60=pow(reg49,2); T reg61=pow(reg44,2); reg58=reg56+reg58; reg55=reg33-reg55; reg54=reg36-reg54;
    reg56=reg35*reg48; reg57=reg38-reg57; reg59=reg60+reg59; reg60=pow(reg53,2); T reg62=pow(reg52,2);
    T reg63=pow(reg43,2); T reg64=pow(reg55,2); T reg65=pow(reg54,2); reg56=reg37-reg56; reg63=reg59+reg63;
    reg59=pow(reg57,2); reg60=reg62+reg60; reg61=reg58+reg61; reg59=reg60+reg59; reg58=pow(reg56,2);
    reg63=pow(reg63,0.5); reg65=reg64+reg65; reg61=pow(reg61,0.5); reg59=pow(reg59,0.5); reg58=reg65+reg58;
    reg44=reg44/reg61; reg49=reg49/reg63; reg42=reg42/reg61; reg61=reg51/reg61; reg50=reg50/reg63;
    reg63=reg43/reg63; reg43=reg9*reg39; reg52=reg52/reg59; reg51=reg39*reg42; reg57=reg57/reg59;
    reg60=reg39*reg44; reg62=reg30*reg61; reg64=reg6*reg50; reg59=reg53/reg59; reg53=reg32*reg63;
    reg65=reg30*reg42; T reg66=reg32*reg44; T reg67=reg32*reg61; T reg68=reg6*reg42; T reg69=reg32*reg49;
    T reg70=reg39*reg50; reg58=pow(reg58,0.5); T reg71=reg30*reg50; reg32=reg6*reg32; reg6=reg9*reg61;
    T reg72=reg30*reg49; reg39=reg39*reg63; reg50=reg36*reg50; reg9=reg9*reg49; reg42=reg31*reg42;
    reg61=reg34*reg61; reg49=reg33*reg49; reg67=reg51-reg67; reg60=reg62-reg60; reg65=reg66-reg65;
    reg56=reg56/reg58; reg51=reg20*reg44; reg68=reg6+reg68; reg54=reg54/reg58; reg58=reg55/reg58;
    reg44=reg38*reg44; reg42=reg61+reg42; reg32=reg43+reg32; reg30=reg20*reg30; reg39=reg72-reg39;
    reg71=reg53-reg71; reg64=reg9+reg64; reg20=reg20*reg63; reg6=reg40*reg52; reg9=reg41*reg59;
    reg43=reg23*reg41; reg53=reg22*reg40; reg55=reg35*reg59; reg61=reg40*reg57; reg34=reg34*reg52;
    reg31=reg31*reg59; reg62=reg41*reg57; reg66=reg23*reg52; reg52=reg35*reg52; reg59=reg22*reg59;
    reg69=reg70-reg69; reg63=reg37*reg63; reg50=reg49+reg50; reg49=reg35*reg58; reg51=reg68+reg51;
    reg68=reg35*reg54; reg55=reg61-reg55; reg65=skin_elem.p*reg65; reg61=reg40*reg56; reg62=reg52-reg62;
    reg33=reg33*reg58; reg60=skin_elem.p*reg60; reg36=reg36*reg54; reg23=reg23*reg58; reg67=skin_elem.p*reg67;
    reg69=skin_elem.p*reg69; reg22=reg22*reg54; reg63=reg50+reg63; reg30=reg32+reg30; reg20=reg64+reg20;
    reg32=reg57*reg24; reg59=reg66+reg59; reg71=skin_elem.p*reg71; reg58=reg40*reg58; reg54=reg41*reg54;
    reg39=skin_elem.p*reg39; reg6=reg9-reg6; reg41=reg41*reg56; reg44=reg42+reg44; reg53=reg43+reg53;
    reg57=reg38*reg57; reg31=reg34+reg31; reg35=reg35*reg24; reg9=0.044658198738520458147*reg39; reg34=0.16666666666666667632*reg39;
    reg38=0.6220084679281461892*reg60; reg40=0.044658198738520458147*reg60; reg42=0.044658198738520458147*reg69; reg43=0.044658198738520458147*reg71; reg50=0.6220084679281461892*reg65;
    reg52=0.16666666666666667632*reg67; reg36=reg33+reg36; reg37=reg37*reg56; reg33=0.044658198738520458147*reg67; reg64=0.6220084679281461892*reg69;
    reg66=0.044658198738520458147*reg65; reg22=reg23+reg22; reg58=reg54-reg58; reg68=reg61-reg68; reg56=reg24*reg56;
    reg41=reg49-reg41; reg23=0.16666666666666667632*reg69; reg24=0.16666666666666667632*reg71; reg63=reg63*reg30; reg49=0.6220084679281461892*reg71;
    reg54=0.16666666666666667632*reg65; reg32=reg59+reg32; reg20=reg47*reg20; reg57=reg31+reg57; reg35=reg53+reg35;
    reg6=skin_elem.p*reg6; reg44=reg30*reg44; reg55=skin_elem.p*reg55; reg51=reg46*reg51; reg30=0.6220084679281461892*reg39;
    reg62=skin_elem.p*reg62; reg31=0.044658198738520458147*skin_elem.f_surf[0]; reg46=0.6220084679281461892*skin_elem.f_surf[0]; reg47=0.16666666666666667632*skin_elem.f_surf[0]; reg53=0.044658198738520458147*skin_elem.f_surf[1];
    reg59=0.16666666666666667632*skin_elem.f_surf[1]; reg61=0.6220084679281461892*skin_elem.f_surf[1]; reg70=0.044658198738520458147*skin_elem.f_surf[2]; reg72=0.16666666666666667632*skin_elem.f_surf[2]; T reg73=0.6220084679281461892*skin_elem.f_surf[2];
    T reg74=0.16666666666666667632*reg60; T reg75=0.6220084679281461892*reg67; reg30=reg61+reg30; T reg76=0.6220084679281461892*reg62; reg49=reg46+reg49;
    reg34=reg59+reg34; reg43=reg31+reg43; reg23=reg72+reg23; reg40=reg53+reg40; reg54=reg47+reg54;
    T reg77=0.6220084679281461892*reg55; reg52=reg72+reg52; reg74=reg59+reg74; T reg78=0.044658198738520458147*reg6; reg64=reg73+reg64;
    T reg79=0.16666666666666667632*reg6; T reg80=0.044658198738520458147*reg55; T reg81=0.044658198738520458147*reg62; reg33=reg70+reg33; T reg82=0.16666666666666667632*reg55;
    reg32=reg45*reg32; reg20=reg63-reg20; reg57=reg35*reg57; reg51=reg44-reg51; reg75=reg73+reg75;
    reg24=reg47+reg24; reg37=reg36+reg37; reg56=reg22+reg56; reg38=reg61+reg38; reg68=skin_elem.p*reg68;
    reg41=skin_elem.p*reg41; reg58=skin_elem.p*reg58; reg66=reg31+reg66; reg22=0.16666666666666667632*reg62; reg9=reg53+reg9;
    reg50=reg46+reg50; reg42=reg70+reg42; reg36=0.6220084679281461892*reg6; reg76=reg61+reg76; reg44=0.044658198738520458147*reg58;
    reg49=reg20*reg49; reg75=reg51*reg75; reg54=reg51*reg54; reg45=0.16666666666666667632*reg68; reg9=reg20*reg9;
    reg81=reg53+reg81; reg43=reg20*reg43; reg30=reg20*reg30; reg36=reg73+reg36; reg63=0.044658198738520458147*reg41;
    reg38=reg51*reg38; reg74=reg51*reg74; T reg83=0.16666666666666667632*reg41; reg42=reg20*reg42; reg77=reg46+reg77;
    reg78=reg70+reg78; T reg84=0.16666666666666667632*reg58; reg52=reg51*reg52; T reg85=0.044658198738520458147*reg68; reg64=reg20*reg64;
    reg50=reg51*reg50; reg79=reg72+reg79; reg56=reg48*reg56; reg24=reg24*reg20; reg23=reg20*reg23;
    reg37=reg35*reg37; reg35=0.6220084679281461892*reg41; reg33=reg51*reg33; reg66=reg51*reg66; reg48=0.6220084679281461892*reg58;
    T reg86=0.6220084679281461892*reg68; reg82=reg47+reg82; reg22=reg59+reg22; reg32=reg57-reg32; reg40=reg51*reg40;
    reg80=reg31+reg80; reg34=reg20*reg34; reg24=0.25*reg24; reg50=0.25*reg50; reg64=0.25*reg64;
    reg76=reg32*reg76; reg22=reg32*reg22; reg9=0.25*reg9; reg35=reg61+reg35; reg86=reg46+reg86;
    reg52=0.25*reg52; reg43=0.25*reg43; reg66=0.25*reg66; reg84=reg72+reg84; reg34=0.25*reg34;
    reg42=0.25*reg42; reg40=0.25*reg40; reg77=reg32*reg77; reg36=reg32*reg36; reg49=0.25*reg49;
    reg80=reg32*reg80; reg44=reg70+reg44; reg54=0.25*reg54; reg75=0.25*reg75; reg45=reg47+reg45;
    reg82=reg82*reg32; reg48=reg73+reg48; reg81=reg32*reg81; reg63=reg53+reg63; reg30=0.25*reg30;
    reg78=reg32*reg78; reg79=reg32*reg79; reg85=reg31+reg85; reg56=reg37-reg56; reg83=reg59+reg83;
    reg38=0.25*reg38; reg74=0.25*reg74; reg23=0.25*reg23; reg33=0.25*reg33; reg36=0.25*reg36;
    reg63=reg56*reg63; reg66=reg24+reg66; reg85=reg56*reg85; reg75=reg23+reg75; reg82=0.25*reg82;
    reg50=reg24+reg50; reg86=reg56*reg86; reg9=reg74+reg9; reg38=reg34+reg38; reg42=reg52+reg42;
    reg44=reg56*reg44; reg80=0.25*reg80; reg49=reg49+reg54; reg45=reg56*reg45; reg48=reg56*reg48;
    reg81=0.25*reg81; reg33=reg23+reg33; reg74=reg30+reg74; reg83=reg56*reg83; reg79=0.25*reg79;
    reg78=0.25*reg78; reg35=reg56*reg35; reg52=reg64+reg52; reg84=reg56*reg84; reg22=0.25*reg22;
    reg40=reg34+reg40; reg76=0.25*reg76; reg77=0.25*reg77; reg43=reg54+reg43; reg45=0.25*reg45;
    reg86=0.25*reg86; reg48=0.25*reg48; reg63=0.25*reg63; reg49=reg80+reg49; reg33=reg79+reg33;
    reg38=reg22+reg38; reg9=reg76+reg9; reg75=reg79+reg75; reg74=reg81+reg74; reg43=reg77+reg43;
    reg83=0.25*reg83; reg85=0.25*reg85; reg50=reg82+reg50; reg35=0.25*reg35; reg44=0.25*reg44;
    reg52=reg78+reg52; reg42=reg36+reg42; reg40=reg22+reg40; reg66=reg82+reg66; reg84=0.25*reg84;
    reg86=reg66+reg86; sollicitation[indices[0]+0]+=reg86; reg48=reg33+reg48; sollicitation[indices[0]+2]+=reg48; reg44=reg75+reg44;
    sollicitation[indices[7]+2]+=reg44; reg49=reg49+reg45; sollicitation[indices[3]+0]+=reg49; reg63=reg38+reg63; sollicitation[indices[7]+1]+=reg63;
    reg43=reg45+reg43; sollicitation[indices[4]+0]+=reg43; reg9=reg83+reg9; sollicitation[indices[4]+1]+=reg9; reg85=reg50+reg85;
    sollicitation[indices[7]+0]+=reg85; reg83=reg74+reg83; sollicitation[indices[3]+1]+=reg83; reg35=reg40+reg35; sollicitation[indices[0]+1]+=reg35;
    reg52=reg52+reg84; sollicitation[indices[3]+2]+=reg52; reg42=reg84+reg42; sollicitation[indices[4]+2]+=reg42;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[0]; T reg1=0.21132486540518713447*elem.pos(4)[1]; T reg2=0.21132486540518713447*elem.pos(0)[1]; T reg3=0.21132486540518713447*elem.pos(4)[0]; T reg4=0.78867513459481286553*elem.pos(4)[0];
    T reg5=0.21132486540518713447*elem.pos(0)[2]; T reg6=reg1-reg2; T reg7=0.78867513459481286553*elem.pos(7)[1]; T reg8=0.78867513459481286553*elem.pos(7)[0]; T reg9=reg3-reg0;
    T reg10=0.78867513459481286553*elem.pos(0)[0]; T reg11=0.78867513459481286553*elem.pos(0)[1]; T reg12=0.21132486540518713447*elem.pos(4)[2]; T reg13=0.78867513459481286553*elem.pos(4)[1]; T reg14=0.78867513459481286553*elem.pos(3)[0];
    T reg15=0.78867513459481286553*elem.pos(3)[1]; T reg16=0.78867513459481286553*elem.pos(0)[2]; reg9=reg8+reg9; T reg17=0.21132486540518713447*elem.pos(7)[1]; reg6=reg7+reg6;
    T reg18=0.78867513459481286553*elem.pos(4)[2]; T reg19=0.78867513459481286553*elem.pos(7)[2]; T reg20=reg12-reg5; T reg21=0.21132486540518713447*elem.pos(7)[0]; T reg22=reg13-reg11;
    T reg23=reg4-reg10; reg6=reg6-reg15; reg22=reg17+reg22; T reg24=reg18-reg16; reg23=reg21+reg23;
    reg9=reg9-reg14; T reg25=0.78867513459481286553*elem.pos(3)[2]; T reg26=0.21132486540518713447*elem.pos(3)[1]; T reg27=0.21132486540518713447*elem.pos(3)[0]; T reg28=0.21132486540518713447*elem.pos(7)[2];
    reg20=reg19+reg20; reg24=reg28+reg24; reg23=reg23-reg27; reg22=reg22-reg26; reg20=reg20-reg25;
    T reg29=0.21132486540518713447*elem.pos(3)[2]; T reg30=pow(reg9,2); T reg31=pow(reg6,2); reg24=reg24-reg29; T reg32=pow(reg22,2);
    reg31=reg30+reg31; reg30=pow(reg20,2); T reg33=pow(reg23,2); reg30=reg31+reg30; reg31=reg13+reg2;
    T reg34=reg4+reg0; T reg35=pow(reg24,2); reg32=reg33+reg32; reg33=reg10+reg3; T reg36=reg11+reg1;
    reg30=pow(reg30,0.5); reg31=reg7-reg31; T reg37=reg16+reg12; T reg38=reg5+reg18; reg36=reg17-reg36;
    reg33=reg21-reg33; reg34=reg8-reg34; reg35=reg32+reg35; reg36=reg15+reg36; reg33=reg14+reg33;
    reg38=reg19-reg38; reg31=reg26+reg31; reg34=reg27+reg34; reg37=reg28-reg37; reg35=pow(reg35,0.5);
    reg32=reg6/reg30; T reg39=reg9/reg30; reg38=reg29+reg38; reg30=reg20/reg30; T reg40=reg22/reg35;
    T reg41=reg23/reg35; T reg42=reg36*reg32; reg37=reg25+reg37; T reg43=reg31*reg32; T reg44=reg34*reg39;
    T reg45=reg33*reg39; reg35=reg24/reg35; T reg46=reg38*reg30; reg44=reg43+reg44; reg45=reg42+reg45;
    reg42=reg40*reg31; reg43=reg34*reg41; T reg47=reg37*reg30; reg47=reg45+reg47; reg45=reg35*reg38;
    reg46=reg44+reg46; reg43=reg42+reg43; reg42=reg40*reg36; reg44=reg41*reg33; T reg48=reg35*reg37;
    T reg49=reg39*reg47; T reg50=reg32*reg47; T reg51=reg46*reg39; reg44=reg42+reg44; reg42=reg46*reg32;
    reg45=reg43+reg45; reg48=reg44+reg48; reg51=reg34-reg51; reg43=reg30*reg47; reg44=reg46*reg30;
    T reg52=reg41*reg45; reg49=reg33-reg49; reg50=reg36-reg50; reg42=reg31-reg42; T reg53=reg40*reg45;
    T reg54=reg40*reg48; T reg55=reg41*reg48; T reg56=pow(reg42,2); reg53=reg31-reg53; T reg57=reg35*reg45;
    T reg58=pow(reg51,2); reg43=reg37-reg43; T reg59=pow(reg50,2); reg44=reg38-reg44; reg52=reg34-reg52;
    T reg60=pow(reg49,2); T reg61=pow(reg44,2); reg58=reg56+reg58; reg55=reg33-reg55; reg54=reg36-reg54;
    reg56=reg35*reg48; reg57=reg38-reg57; reg59=reg60+reg59; reg60=pow(reg53,2); T reg62=pow(reg52,2);
    T reg63=pow(reg43,2); T reg64=pow(reg55,2); T reg65=pow(reg54,2); reg56=reg37-reg56; reg63=reg59+reg63;
    reg59=pow(reg57,2); reg60=reg62+reg60; reg61=reg58+reg61; reg59=reg60+reg59; reg58=pow(reg56,2);
    reg63=pow(reg63,0.5); reg65=reg64+reg65; reg61=pow(reg61,0.5); reg59=pow(reg59,0.5); reg58=reg65+reg58;
    reg44=reg44/reg61; reg49=reg49/reg63; reg42=reg42/reg61; reg61=reg51/reg61; reg50=reg50/reg63;
    reg63=reg43/reg63; reg43=reg9*reg39; reg52=reg52/reg59; reg51=reg39*reg42; reg57=reg57/reg59;
    reg60=reg39*reg44; reg62=reg30*reg61; reg64=reg6*reg50; reg59=reg53/reg59; reg53=reg32*reg63;
    reg65=reg30*reg42; T reg66=reg32*reg44; T reg67=reg32*reg61; T reg68=reg6*reg42; T reg69=reg32*reg49;
    T reg70=reg39*reg50; reg58=pow(reg58,0.5); T reg71=reg30*reg50; reg32=reg6*reg32; reg6=reg9*reg61;
    T reg72=reg30*reg49; reg39=reg39*reg63; reg50=reg36*reg50; reg9=reg9*reg49; reg42=reg31*reg42;
    reg61=reg34*reg61; reg49=reg33*reg49; reg67=reg51-reg67; reg60=reg62-reg60; reg65=reg66-reg65;
    reg56=reg56/reg58; reg51=reg20*reg44; reg68=reg6+reg68; reg54=reg54/reg58; reg58=reg55/reg58;
    reg44=reg38*reg44; reg42=reg61+reg42; reg32=reg43+reg32; reg30=reg20*reg30; reg39=reg72-reg39;
    reg71=reg53-reg71; reg64=reg9+reg64; reg20=reg20*reg63; reg6=reg40*reg52; reg9=reg41*reg59;
    reg43=reg23*reg41; reg53=reg22*reg40; reg55=reg35*reg59; reg61=reg40*reg57; reg34=reg34*reg52;
    reg31=reg31*reg59; reg62=reg41*reg57; reg66=reg23*reg52; reg52=reg35*reg52; reg59=reg22*reg59;
    reg69=reg70-reg69; reg63=reg37*reg63; reg50=reg49+reg50; reg49=reg35*reg58; reg51=reg68+reg51;
    reg68=reg35*reg54; reg55=reg61-reg55; reg65=skin_elem.p*reg65; reg61=reg40*reg56; reg62=reg52-reg62;
    reg33=reg33*reg58; reg60=skin_elem.p*reg60; reg36=reg36*reg54; reg23=reg23*reg58; reg67=skin_elem.p*reg67;
    reg69=skin_elem.p*reg69; reg22=reg22*reg54; reg63=reg50+reg63; reg30=reg32+reg30; reg20=reg64+reg20;
    reg32=reg57*reg24; reg59=reg66+reg59; reg71=skin_elem.p*reg71; reg58=reg40*reg58; reg54=reg41*reg54;
    reg39=skin_elem.p*reg39; reg6=reg9-reg6; reg41=reg41*reg56; reg44=reg42+reg44; reg53=reg43+reg53;
    reg57=reg38*reg57; reg31=reg34+reg31; reg35=reg35*reg24; reg9=0.044658198738520458147*reg39; reg34=0.16666666666666667632*reg39;
    reg38=0.6220084679281461892*reg60; reg40=0.044658198738520458147*reg60; reg42=0.044658198738520458147*reg69; reg43=0.044658198738520458147*reg71; reg50=0.6220084679281461892*reg65;
    reg52=0.16666666666666667632*reg67; reg36=reg33+reg36; reg37=reg37*reg56; reg33=0.044658198738520458147*reg67; reg64=0.6220084679281461892*reg69;
    reg66=0.044658198738520458147*reg65; reg22=reg23+reg22; reg58=reg54-reg58; reg68=reg61-reg68; reg56=reg24*reg56;
    reg41=reg49-reg41; reg23=0.16666666666666667632*reg69; reg24=0.16666666666666667632*reg71; reg63=reg63*reg30; reg49=0.6220084679281461892*reg71;
    reg54=0.16666666666666667632*reg65; reg32=reg59+reg32; reg20=reg47*reg20; reg57=reg31+reg57; reg35=reg53+reg35;
    reg6=skin_elem.p*reg6; reg44=reg30*reg44; reg55=skin_elem.p*reg55; reg51=reg46*reg51; reg30=0.6220084679281461892*reg39;
    reg62=skin_elem.p*reg62; reg31=0.044658198738520458147*skin_elem.f_surf[0]; reg46=0.6220084679281461892*skin_elem.f_surf[0]; reg47=0.16666666666666667632*skin_elem.f_surf[0]; reg53=0.044658198738520458147*skin_elem.f_surf[1];
    reg59=0.16666666666666667632*skin_elem.f_surf[1]; reg61=0.6220084679281461892*skin_elem.f_surf[1]; reg70=0.044658198738520458147*skin_elem.f_surf[2]; reg72=0.16666666666666667632*skin_elem.f_surf[2]; T reg73=0.6220084679281461892*skin_elem.f_surf[2];
    T reg74=0.16666666666666667632*reg60; T reg75=0.6220084679281461892*reg67; reg30=reg61+reg30; T reg76=0.6220084679281461892*reg62; reg49=reg46+reg49;
    reg34=reg59+reg34; reg43=reg31+reg43; reg23=reg72+reg23; reg40=reg53+reg40; reg54=reg47+reg54;
    T reg77=0.6220084679281461892*reg55; reg52=reg72+reg52; reg74=reg59+reg74; T reg78=0.044658198738520458147*reg6; reg64=reg73+reg64;
    T reg79=0.16666666666666667632*reg6; T reg80=0.044658198738520458147*reg55; T reg81=0.044658198738520458147*reg62; reg33=reg70+reg33; T reg82=0.16666666666666667632*reg55;
    reg32=reg45*reg32; reg20=reg63-reg20; reg57=reg35*reg57; reg51=reg44-reg51; reg75=reg73+reg75;
    reg24=reg47+reg24; reg37=reg36+reg37; reg56=reg22+reg56; reg38=reg61+reg38; reg68=skin_elem.p*reg68;
    reg41=skin_elem.p*reg41; reg58=skin_elem.p*reg58; reg66=reg31+reg66; reg22=0.16666666666666667632*reg62; reg9=reg53+reg9;
    reg50=reg46+reg50; reg42=reg70+reg42; reg36=0.6220084679281461892*reg6; reg76=reg61+reg76; reg44=0.044658198738520458147*reg58;
    reg49=reg20*reg49; reg75=reg51*reg75; reg54=reg51*reg54; reg45=0.16666666666666667632*reg68; reg9=reg20*reg9;
    reg81=reg53+reg81; reg43=reg20*reg43; reg30=reg20*reg30; reg36=reg73+reg36; reg63=0.044658198738520458147*reg41;
    reg38=reg51*reg38; reg74=reg51*reg74; T reg83=0.16666666666666667632*reg41; reg42=reg20*reg42; reg77=reg46+reg77;
    reg78=reg70+reg78; T reg84=0.16666666666666667632*reg58; reg52=reg51*reg52; T reg85=0.044658198738520458147*reg68; reg64=reg20*reg64;
    reg50=reg51*reg50; reg79=reg72+reg79; reg56=reg48*reg56; reg24=reg24*reg20; reg23=reg20*reg23;
    reg37=reg35*reg37; reg35=0.6220084679281461892*reg41; reg33=reg51*reg33; reg66=reg51*reg66; reg48=0.6220084679281461892*reg58;
    T reg86=0.6220084679281461892*reg68; reg82=reg47+reg82; reg22=reg59+reg22; reg32=reg57-reg32; reg40=reg51*reg40;
    reg80=reg31+reg80; reg34=reg20*reg34; reg24=0.25*reg24; reg50=0.25*reg50; reg64=0.25*reg64;
    reg76=reg32*reg76; reg22=reg32*reg22; reg9=0.25*reg9; reg35=reg61+reg35; reg86=reg46+reg86;
    reg52=0.25*reg52; reg43=0.25*reg43; reg66=0.25*reg66; reg84=reg72+reg84; reg34=0.25*reg34;
    reg42=0.25*reg42; reg40=0.25*reg40; reg77=reg32*reg77; reg36=reg32*reg36; reg49=0.25*reg49;
    reg80=reg32*reg80; reg44=reg70+reg44; reg54=0.25*reg54; reg75=0.25*reg75; reg45=reg47+reg45;
    reg82=reg82*reg32; reg48=reg73+reg48; reg81=reg32*reg81; reg63=reg53+reg63; reg30=0.25*reg30;
    reg78=reg32*reg78; reg79=reg32*reg79; reg85=reg31+reg85; reg56=reg37-reg56; reg83=reg59+reg83;
    reg38=0.25*reg38; reg74=0.25*reg74; reg23=0.25*reg23; reg33=0.25*reg33; reg36=0.25*reg36;
    reg63=reg56*reg63; reg66=reg24+reg66; reg85=reg56*reg85; reg75=reg23+reg75; reg82=0.25*reg82;
    reg50=reg24+reg50; reg86=reg56*reg86; reg9=reg74+reg9; reg38=reg34+reg38; reg42=reg52+reg42;
    reg44=reg56*reg44; reg80=0.25*reg80; reg49=reg49+reg54; reg45=reg56*reg45; reg48=reg56*reg48;
    reg81=0.25*reg81; reg33=reg23+reg33; reg74=reg30+reg74; reg83=reg56*reg83; reg79=0.25*reg79;
    reg78=0.25*reg78; reg35=reg56*reg35; reg52=reg64+reg52; reg84=reg56*reg84; reg22=0.25*reg22;
    reg40=reg34+reg40; reg76=0.25*reg76; reg77=0.25*reg77; reg43=reg54+reg43; reg45=0.25*reg45;
    reg86=0.25*reg86; reg48=0.25*reg48; reg63=0.25*reg63; reg49=reg80+reg49; reg33=reg79+reg33;
    reg38=reg22+reg38; reg9=reg76+reg9; reg75=reg79+reg75; reg74=reg81+reg74; reg43=reg77+reg43;
    reg83=0.25*reg83; reg85=0.25*reg85; reg50=reg82+reg50; reg35=0.25*reg35; reg44=0.25*reg44;
    reg52=reg78+reg52; reg42=reg36+reg42; reg40=reg22+reg40; reg66=reg82+reg66; reg84=0.25*reg84;
    reg86=reg66+reg86; sollicitation[indices[0]+0]+=reg86; reg48=reg33+reg48; sollicitation[indices[0]+2]+=reg48; reg44=reg75+reg44;
    sollicitation[indices[7]+2]+=reg44; reg49=reg49+reg45; sollicitation[indices[3]+0]+=reg49; reg63=reg38+reg63; sollicitation[indices[7]+1]+=reg63;
    reg43=reg45+reg43; sollicitation[indices[4]+0]+=reg43; reg9=reg83+reg9; sollicitation[indices[4]+1]+=reg9; reg85=reg50+reg85;
    sollicitation[indices[7]+0]+=reg85; reg83=reg74+reg83; sollicitation[indices[3]+1]+=reg83; reg35=reg40+reg35; sollicitation[indices[0]+1]+=reg35;
    reg52=reg52+reg84; sollicitation[indices[3]+2]+=reg52; reg42=reg84+reg42; sollicitation[indices[4]+2]+=reg42;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(0)[0]; T reg1=0.21132486540518713447*elem.pos(4)[1]; T reg2=0.21132486540518713447*elem.pos(0)[1]; T reg3=0.21132486540518713447*elem.pos(4)[0]; T reg4=0.78867513459481286553*elem.pos(4)[0];
    T reg5=0.21132486540518713447*elem.pos(0)[2]; T reg6=reg1-reg2; T reg7=0.78867513459481286553*elem.pos(7)[1]; T reg8=0.78867513459481286553*elem.pos(7)[0]; T reg9=reg3-reg0;
    T reg10=0.78867513459481286553*elem.pos(0)[0]; T reg11=0.78867513459481286553*elem.pos(0)[1]; T reg12=0.21132486540518713447*elem.pos(4)[2]; T reg13=0.78867513459481286553*elem.pos(4)[1]; T reg14=0.78867513459481286553*elem.pos(3)[0];
    T reg15=0.78867513459481286553*elem.pos(3)[1]; T reg16=0.78867513459481286553*elem.pos(0)[2]; reg9=reg8+reg9; T reg17=0.21132486540518713447*elem.pos(7)[1]; reg6=reg7+reg6;
    T reg18=0.78867513459481286553*elem.pos(4)[2]; T reg19=0.78867513459481286553*elem.pos(7)[2]; T reg20=reg12-reg5; T reg21=0.21132486540518713447*elem.pos(7)[0]; T reg22=reg13-reg11;
    T reg23=reg4-reg10; reg6=reg6-reg15; reg22=reg17+reg22; T reg24=reg18-reg16; reg23=reg21+reg23;
    reg9=reg9-reg14; T reg25=0.78867513459481286553*elem.pos(3)[2]; T reg26=0.21132486540518713447*elem.pos(3)[1]; T reg27=0.21132486540518713447*elem.pos(3)[0]; T reg28=0.21132486540518713447*elem.pos(7)[2];
    reg20=reg19+reg20; reg24=reg28+reg24; reg23=reg23-reg27; reg22=reg22-reg26; reg20=reg20-reg25;
    T reg29=0.21132486540518713447*elem.pos(3)[2]; T reg30=pow(reg9,2); T reg31=pow(reg6,2); reg24=reg24-reg29; T reg32=pow(reg22,2);
    reg31=reg30+reg31; reg30=pow(reg20,2); T reg33=pow(reg23,2); reg30=reg31+reg30; reg31=reg13+reg2;
    T reg34=reg4+reg0; T reg35=pow(reg24,2); reg32=reg33+reg32; reg33=reg10+reg3; T reg36=reg11+reg1;
    reg30=pow(reg30,0.5); reg31=reg7-reg31; T reg37=reg16+reg12; T reg38=reg5+reg18; reg36=reg17-reg36;
    reg33=reg21-reg33; reg34=reg8-reg34; reg35=reg32+reg35; reg36=reg15+reg36; reg33=reg14+reg33;
    reg38=reg19-reg38; reg31=reg26+reg31; reg34=reg27+reg34; reg37=reg28-reg37; reg35=pow(reg35,0.5);
    reg32=reg6/reg30; T reg39=reg9/reg30; reg38=reg29+reg38; reg30=reg20/reg30; T reg40=reg22/reg35;
    T reg41=reg23/reg35; T reg42=reg36*reg32; reg37=reg25+reg37; T reg43=reg31*reg32; T reg44=reg34*reg39;
    T reg45=reg33*reg39; reg35=reg24/reg35; T reg46=reg38*reg30; reg44=reg43+reg44; reg45=reg42+reg45;
    reg42=reg40*reg31; reg43=reg34*reg41; T reg47=reg37*reg30; reg47=reg45+reg47; reg45=reg35*reg38;
    reg46=reg44+reg46; reg43=reg42+reg43; reg42=reg40*reg36; reg44=reg41*reg33; T reg48=reg35*reg37;
    T reg49=reg39*reg47; T reg50=reg32*reg47; T reg51=reg46*reg39; reg44=reg42+reg44; reg42=reg46*reg32;
    reg45=reg43+reg45; reg48=reg44+reg48; reg51=reg34-reg51; reg43=reg30*reg47; reg44=reg46*reg30;
    T reg52=reg41*reg45; reg49=reg33-reg49; reg50=reg36-reg50; reg42=reg31-reg42; T reg53=reg40*reg45;
    T reg54=reg40*reg48; T reg55=reg41*reg48; T reg56=pow(reg42,2); reg53=reg31-reg53; T reg57=reg35*reg45;
    T reg58=pow(reg51,2); reg43=reg37-reg43; T reg59=pow(reg50,2); reg44=reg38-reg44; reg52=reg34-reg52;
    T reg60=pow(reg49,2); T reg61=pow(reg44,2); reg58=reg56+reg58; reg55=reg33-reg55; reg54=reg36-reg54;
    reg56=reg35*reg48; reg57=reg38-reg57; reg59=reg60+reg59; reg60=pow(reg53,2); T reg62=pow(reg52,2);
    T reg63=pow(reg43,2); T reg64=pow(reg55,2); T reg65=pow(reg54,2); reg56=reg37-reg56; reg63=reg59+reg63;
    reg59=pow(reg57,2); reg60=reg62+reg60; reg61=reg58+reg61; reg59=reg60+reg59; reg58=pow(reg56,2);
    reg63=pow(reg63,0.5); reg65=reg64+reg65; reg61=pow(reg61,0.5); reg59=pow(reg59,0.5); reg58=reg65+reg58;
    reg44=reg44/reg61; reg49=reg49/reg63; reg42=reg42/reg61; reg61=reg51/reg61; reg50=reg50/reg63;
    reg63=reg43/reg63; reg43=reg9*reg39; reg52=reg52/reg59; reg51=reg39*reg42; reg57=reg57/reg59;
    reg60=reg39*reg44; reg62=reg30*reg61; reg64=reg6*reg50; reg59=reg53/reg59; reg53=reg32*reg63;
    reg65=reg30*reg42; T reg66=reg32*reg44; T reg67=reg32*reg61; T reg68=reg6*reg42; T reg69=reg32*reg49;
    T reg70=reg39*reg50; reg58=pow(reg58,0.5); T reg71=reg30*reg50; reg32=reg6*reg32; reg6=reg9*reg61;
    T reg72=reg30*reg49; reg39=reg39*reg63; reg50=reg36*reg50; reg9=reg9*reg49; reg42=reg31*reg42;
    reg61=reg34*reg61; reg49=reg33*reg49; reg67=reg51-reg67; reg60=reg62-reg60; reg65=reg66-reg65;
    reg56=reg56/reg58; reg51=reg20*reg44; reg68=reg6+reg68; reg54=reg54/reg58; reg58=reg55/reg58;
    reg44=reg38*reg44; reg42=reg61+reg42; reg32=reg43+reg32; reg30=reg20*reg30; reg39=reg72-reg39;
    reg71=reg53-reg71; reg64=reg9+reg64; reg20=reg20*reg63; reg6=reg40*reg52; reg9=reg41*reg59;
    reg43=reg23*reg41; reg53=reg22*reg40; reg55=reg35*reg59; reg61=reg40*reg57; reg34=reg34*reg52;
    reg31=reg31*reg59; reg62=reg41*reg57; reg66=reg23*reg52; reg52=reg35*reg52; reg59=reg22*reg59;
    reg69=reg70-reg69; reg63=reg37*reg63; reg50=reg49+reg50; reg49=reg35*reg58; reg51=reg68+reg51;
    reg68=reg35*reg54; reg55=reg61-reg55; reg65=skin_elem.p*reg65; reg61=reg40*reg56; reg62=reg52-reg62;
    reg33=reg33*reg58; reg60=skin_elem.p*reg60; reg36=reg36*reg54; reg23=reg23*reg58; reg67=skin_elem.p*reg67;
    reg69=skin_elem.p*reg69; reg22=reg22*reg54; reg63=reg50+reg63; reg30=reg32+reg30; reg20=reg64+reg20;
    reg32=reg57*reg24; reg59=reg66+reg59; reg71=skin_elem.p*reg71; reg58=reg40*reg58; reg54=reg41*reg54;
    reg39=skin_elem.p*reg39; reg6=reg9-reg6; reg41=reg41*reg56; reg44=reg42+reg44; reg53=reg43+reg53;
    reg57=reg38*reg57; reg31=reg34+reg31; reg35=reg35*reg24; reg9=0.044658198738520458147*reg39; reg34=0.16666666666666667632*reg39;
    reg38=0.6220084679281461892*reg60; reg40=0.044658198738520458147*reg60; reg42=0.044658198738520458147*reg69; reg43=0.044658198738520458147*reg71; reg50=0.6220084679281461892*reg65;
    reg52=0.16666666666666667632*reg67; reg36=reg33+reg36; reg37=reg37*reg56; reg33=0.044658198738520458147*reg67; reg64=0.6220084679281461892*reg69;
    reg66=0.044658198738520458147*reg65; reg22=reg23+reg22; reg58=reg54-reg58; reg68=reg61-reg68; reg56=reg24*reg56;
    reg41=reg49-reg41; reg23=0.16666666666666667632*reg69; reg24=0.16666666666666667632*reg71; reg63=reg63*reg30; reg49=0.6220084679281461892*reg71;
    reg54=0.16666666666666667632*reg65; reg32=reg59+reg32; reg20=reg47*reg20; reg57=reg31+reg57; reg35=reg53+reg35;
    reg6=skin_elem.p*reg6; reg44=reg30*reg44; reg55=skin_elem.p*reg55; reg51=reg46*reg51; reg30=0.6220084679281461892*reg39;
    reg62=skin_elem.p*reg62; reg31=0.044658198738520458147*skin_elem.f_surf[0]; reg46=0.6220084679281461892*skin_elem.f_surf[0]; reg47=0.16666666666666667632*skin_elem.f_surf[0]; reg53=0.044658198738520458147*skin_elem.f_surf[1];
    reg59=0.16666666666666667632*skin_elem.f_surf[1]; reg61=0.6220084679281461892*skin_elem.f_surf[1]; reg70=0.044658198738520458147*skin_elem.f_surf[2]; reg72=0.16666666666666667632*skin_elem.f_surf[2]; T reg73=0.6220084679281461892*skin_elem.f_surf[2];
    T reg74=0.16666666666666667632*reg60; T reg75=0.6220084679281461892*reg67; reg30=reg61+reg30; T reg76=0.6220084679281461892*reg62; reg49=reg46+reg49;
    reg34=reg59+reg34; reg43=reg31+reg43; reg23=reg72+reg23; reg40=reg53+reg40; reg54=reg47+reg54;
    T reg77=0.6220084679281461892*reg55; reg52=reg72+reg52; reg74=reg59+reg74; T reg78=0.044658198738520458147*reg6; reg64=reg73+reg64;
    T reg79=0.16666666666666667632*reg6; T reg80=0.044658198738520458147*reg55; T reg81=0.044658198738520458147*reg62; reg33=reg70+reg33; T reg82=0.16666666666666667632*reg55;
    reg32=reg45*reg32; reg20=reg63-reg20; reg57=reg35*reg57; reg51=reg44-reg51; reg75=reg73+reg75;
    reg24=reg47+reg24; reg37=reg36+reg37; reg56=reg22+reg56; reg38=reg61+reg38; reg68=skin_elem.p*reg68;
    reg41=skin_elem.p*reg41; reg58=skin_elem.p*reg58; reg66=reg31+reg66; reg22=0.16666666666666667632*reg62; reg9=reg53+reg9;
    reg50=reg46+reg50; reg42=reg70+reg42; reg36=0.6220084679281461892*reg6; reg76=reg61+reg76; reg44=0.044658198738520458147*reg58;
    reg49=reg20*reg49; reg75=reg51*reg75; reg54=reg51*reg54; reg45=0.16666666666666667632*reg68; reg9=reg20*reg9;
    reg81=reg53+reg81; reg43=reg20*reg43; reg30=reg20*reg30; reg36=reg73+reg36; reg63=0.044658198738520458147*reg41;
    reg38=reg51*reg38; reg74=reg51*reg74; T reg83=0.16666666666666667632*reg41; reg42=reg20*reg42; reg77=reg46+reg77;
    reg78=reg70+reg78; T reg84=0.16666666666666667632*reg58; reg52=reg51*reg52; T reg85=0.044658198738520458147*reg68; reg64=reg20*reg64;
    reg50=reg51*reg50; reg79=reg72+reg79; reg56=reg48*reg56; reg24=reg24*reg20; reg23=reg20*reg23;
    reg37=reg35*reg37; reg35=0.6220084679281461892*reg41; reg33=reg51*reg33; reg66=reg51*reg66; reg48=0.6220084679281461892*reg58;
    T reg86=0.6220084679281461892*reg68; reg82=reg47+reg82; reg22=reg59+reg22; reg32=reg57-reg32; reg40=reg51*reg40;
    reg80=reg31+reg80; reg34=reg20*reg34; reg24=0.25*reg24; reg50=0.25*reg50; reg64=0.25*reg64;
    reg76=reg32*reg76; reg22=reg32*reg22; reg9=0.25*reg9; reg35=reg61+reg35; reg86=reg46+reg86;
    reg52=0.25*reg52; reg43=0.25*reg43; reg66=0.25*reg66; reg84=reg72+reg84; reg34=0.25*reg34;
    reg42=0.25*reg42; reg40=0.25*reg40; reg77=reg32*reg77; reg36=reg32*reg36; reg49=0.25*reg49;
    reg80=reg32*reg80; reg44=reg70+reg44; reg54=0.25*reg54; reg75=0.25*reg75; reg45=reg47+reg45;
    reg82=reg82*reg32; reg48=reg73+reg48; reg81=reg32*reg81; reg63=reg53+reg63; reg30=0.25*reg30;
    reg78=reg32*reg78; reg79=reg32*reg79; reg85=reg31+reg85; reg56=reg37-reg56; reg83=reg59+reg83;
    reg38=0.25*reg38; reg74=0.25*reg74; reg23=0.25*reg23; reg33=0.25*reg33; reg36=0.25*reg36;
    reg63=reg56*reg63; reg66=reg24+reg66; reg85=reg56*reg85; reg75=reg23+reg75; reg82=0.25*reg82;
    reg50=reg24+reg50; reg86=reg56*reg86; reg9=reg74+reg9; reg38=reg34+reg38; reg42=reg52+reg42;
    reg44=reg56*reg44; reg80=0.25*reg80; reg49=reg49+reg54; reg45=reg56*reg45; reg48=reg56*reg48;
    reg81=0.25*reg81; reg33=reg23+reg33; reg74=reg30+reg74; reg83=reg56*reg83; reg79=0.25*reg79;
    reg78=0.25*reg78; reg35=reg56*reg35; reg52=reg64+reg52; reg84=reg56*reg84; reg22=0.25*reg22;
    reg40=reg34+reg40; reg76=0.25*reg76; reg77=0.25*reg77; reg43=reg54+reg43; reg45=0.25*reg45;
    reg86=0.25*reg86; reg48=0.25*reg48; reg63=0.25*reg63; reg49=reg80+reg49; reg33=reg79+reg33;
    reg38=reg22+reg38; reg9=reg76+reg9; reg75=reg79+reg75; reg74=reg81+reg74; reg43=reg77+reg43;
    reg83=0.25*reg83; reg85=0.25*reg85; reg50=reg82+reg50; reg35=0.25*reg35; reg44=0.25*reg44;
    reg52=reg78+reg52; reg42=reg36+reg42; reg40=reg22+reg40; reg66=reg82+reg66; reg84=0.25*reg84;
    reg86=reg66+reg86; sollicitation[indices[0]+0]+=reg86; reg48=reg33+reg48; sollicitation[indices[0]+2]+=reg48; reg44=reg75+reg44;
    sollicitation[indices[7]+2]+=reg44; reg49=reg49+reg45; sollicitation[indices[3]+0]+=reg49; reg63=reg38+reg63; sollicitation[indices[7]+1]+=reg63;
    reg43=reg45+reg43; sollicitation[indices[4]+0]+=reg43; reg9=reg83+reg9; sollicitation[indices[4]+1]+=reg9; reg85=reg50+reg85;
    sollicitation[indices[7]+0]+=reg85; reg83=reg74+reg83; sollicitation[indices[3]+1]+=reg83; reg35=reg40+reg35; sollicitation[indices[0]+1]+=reg35;
    reg52=reg52+reg84; sollicitation[indices[3]+2]+=reg52; reg42=reg84+reg42; sollicitation[indices[4]+2]+=reg42;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(1)[1]; T reg1=0.21132486540518713447*elem.pos(1)[0]; T reg2=0.21132486540518713447*elem.pos(2)[1]; T reg3=0.21132486540518713447*elem.pos(2)[0]; T reg4=reg3-reg1;
    T reg5=0.78867513459481286553*elem.pos(6)[1]; T reg6=0.78867513459481286553*elem.pos(1)[1]; T reg7=0.78867513459481286553*elem.pos(2)[1]; T reg8=0.78867513459481286553*elem.pos(1)[0]; T reg9=0.78867513459481286553*elem.pos(2)[0];
    T reg10=reg2-reg0; T reg11=0.21132486540518713447*elem.pos(1)[2]; T reg12=0.21132486540518713447*elem.pos(2)[2]; T reg13=0.78867513459481286553*elem.pos(6)[0]; T reg14=0.78867513459481286553*elem.pos(1)[2];
    T reg15=0.78867513459481286553*elem.pos(2)[2]; T reg16=0.78867513459481286553*elem.pos(6)[2]; T reg17=0.78867513459481286553*elem.pos(5)[1]; reg10=reg10+reg5; T reg18=0.21132486540518713447*elem.pos(6)[0];
    T reg19=0.78867513459481286553*elem.pos(5)[0]; T reg20=0.21132486540518713447*elem.pos(6)[1]; reg4=reg13+reg4; T reg21=reg9-reg8; T reg22=reg12-reg11;
    T reg23=reg7-reg6; reg10=reg10-reg17; T reg24=reg15-reg14; T reg25=0.78867513459481286553*elem.pos(5)[2]; T reg26=0.21132486540518713447*elem.pos(5)[0];
    T reg27=0.21132486540518713447*elem.pos(5)[1]; reg23=reg20+reg23; reg22=reg16+reg22; reg4=reg4-reg19; T reg28=0.21132486540518713447*elem.pos(6)[2];
    reg21=reg18+reg21; reg24=reg28+reg24; T reg29=0.21132486540518713447*elem.pos(5)[2]; reg23=reg23-reg27; reg22=reg22-reg25;
    reg21=reg21-reg26; T reg30=pow(reg4,2); T reg31=pow(reg10,2); reg24=reg24-reg29; T reg32=pow(reg23,2);
    T reg33=pow(reg21,2); reg30=reg31+reg30; reg31=pow(reg22,2); T reg34=reg6+reg2; reg30=reg31+reg30;
    reg31=reg8+reg3; T reg35=pow(reg24,2); T reg36=reg9+reg1; reg33=reg32+reg33; reg32=reg7+reg0;
    reg34=reg20-reg34; reg31=reg18-reg31; T reg37=reg14+reg12; reg35=reg33+reg35; reg36=reg13-reg36;
    reg32=reg5-reg32; reg33=reg15+reg11; reg30=pow(reg30,0.5); reg34=reg17+reg34; reg33=reg16-reg33;
    reg31=reg19+reg31; reg37=reg28-reg37; T reg38=reg4/reg30; reg35=pow(reg35,0.5); T reg39=reg10/reg30;
    reg32=reg27+reg32; reg36=reg26+reg36; T reg40=reg39*reg34; T reg41=reg39*reg32; T reg42=reg38*reg31;
    reg30=reg22/reg30; reg37=reg25+reg37; reg33=reg29+reg33; T reg43=reg36*reg38; T reg44=reg23/reg35;
    T reg45=reg21/reg35; reg41=reg43+reg41; reg43=reg30*reg33; reg40=reg42+reg40; reg42=reg30*reg37;
    reg35=reg24/reg35; T reg46=reg36*reg45; T reg47=reg44*reg32; reg43=reg41+reg43; reg41=reg45*reg31;
    T reg48=reg44*reg34; T reg49=reg35*reg33; reg42=reg40+reg42; reg47=reg46+reg47; reg49=reg47+reg49;
    reg40=reg35*reg37; reg41=reg48+reg41; reg46=reg38*reg43; reg47=reg39*reg43; reg48=reg39*reg42;
    T reg50=reg38*reg42; reg47=reg32-reg47; T reg51=reg30*reg43; reg40=reg41+reg40; reg41=reg44*reg49;
    reg46=reg36-reg46; reg48=reg34-reg48; reg50=reg31-reg50; T reg52=reg30*reg42; T reg53=reg45*reg49;
    reg52=reg37-reg52; T reg54=pow(reg48,2); T reg55=pow(reg50,2); T reg56=reg44*reg40; T reg57=pow(reg47,2);
    T reg58=pow(reg46,2); reg53=reg36-reg53; reg51=reg33-reg51; T reg59=reg45*reg40; reg41=reg32-reg41;
    T reg60=reg35*reg49; T reg61=reg35*reg40; reg56=reg34-reg56; reg59=reg31-reg59; T reg62=pow(reg41,2);
    reg60=reg33-reg60; T reg63=pow(reg51,2); reg58=reg57+reg58; reg57=pow(reg53,2); T reg64=pow(reg52,2);
    reg54=reg55+reg54; reg63=reg58+reg63; reg61=reg37-reg61; reg55=pow(reg56,2); reg58=pow(reg59,2);
    reg62=reg57+reg62; reg57=pow(reg60,2); reg64=reg54+reg64; reg64=pow(reg64,0.5); reg57=reg62+reg57;
    reg63=pow(reg63,0.5); reg55=reg58+reg55; reg54=pow(reg61,2); reg50=reg50/reg64; reg51=reg51/reg63;
    reg46=reg46/reg63; reg63=reg47/reg63; reg54=reg55+reg54; reg57=pow(reg57,0.5); reg48=reg48/reg64;
    reg64=reg52/reg64; reg47=reg30*reg48; reg52=reg4*reg50; reg55=reg34*reg48; reg58=reg31*reg50;
    reg62=reg39*reg50; T reg65=reg38*reg48; T reg66=reg38*reg64; reg50=reg30*reg50; T reg67=reg39*reg64;
    reg48=reg10*reg48; T reg68=reg10*reg63; T reg69=reg4*reg46; reg10=reg10*reg39; reg4=reg4*reg38;
    T reg70=reg32*reg63; T reg71=reg36*reg46; T reg72=reg39*reg46; reg46=reg30*reg46; T reg73=reg38*reg51;
    reg39=reg39*reg51; T reg74=reg30*reg63; reg63=reg38*reg63; reg60=reg60/reg57; reg54=pow(reg54,0.5);
    reg53=reg53/reg57; reg57=reg41/reg57; reg38=reg22*reg51; reg68=reg69+reg68; reg41=reg45*reg60;
    reg66=reg50-reg66; reg30=reg22*reg30; reg10=reg4+reg10; reg4=reg23*reg44; reg50=reg45*reg57;
    reg47=reg67-reg47; reg51=reg33*reg51; reg70=reg71+reg70; reg67=reg44*reg53; reg61=reg61/reg54;
    reg72=reg63-reg72; reg63=reg45*reg21; reg73=reg46-reg73; reg56=reg56/reg54; reg54=reg59/reg54;
    reg74=reg39-reg74; reg32=reg57*reg32; reg22=reg22*reg64; reg48=reg52+reg48; reg36=reg36*reg53;
    reg39=reg44*reg60; reg46=reg35*reg57; reg64=reg37*reg64; reg55=reg58+reg55; reg57=reg23*reg57;
    reg52=reg35*reg53; reg53=reg53*reg21; reg62=reg65-reg62; reg57=reg53+reg57; reg74=skin_elem.p*reg74;
    reg32=reg36+reg32; reg36=reg24*reg60; reg33=reg60*reg33; reg72=skin_elem.p*reg72; reg67=reg50-reg67;
    reg51=reg70+reg51; reg46=reg39-reg46; reg30=reg10+reg30; reg4=reg63+reg4; reg41=reg52-reg41;
    reg10=reg24*reg35; reg38=reg68+reg38; reg64=reg55+reg64; reg62=skin_elem.p*reg62; reg39=reg44*reg54;
    reg50=reg45*reg56; reg22=reg48+reg22; reg45=reg45*reg61; reg48=reg35*reg54; reg66=skin_elem.p*reg66;
    reg35=reg35*reg56; reg44=reg44*reg61; reg47=skin_elem.p*reg47; reg23=reg23*reg56; reg21=reg54*reg21;
    reg34=reg56*reg34; reg73=skin_elem.p*reg73; reg31=reg54*reg31; reg22=reg42*reg22; reg42=0.044658198738520458147*reg72;
    reg52=0.044658198738520458147*reg73; reg53=0.16666666666666667632*reg66; reg64=reg30*reg64; reg54=0.044658198738520458147*skin_elem.f_surf[0]; reg10=reg4+reg10;
    reg4=0.6220084679281461892*skin_elem.f_surf[0]; reg55=0.16666666666666667632*skin_elem.f_surf[0]; reg56=0.044658198738520458147*skin_elem.f_surf[1]; reg58=0.16666666666666667632*skin_elem.f_surf[1]; reg59=0.6220084679281461892*skin_elem.f_surf[1];
    reg60=0.044658198738520458147*skin_elem.f_surf[2]; reg63=0.16666666666666667632*skin_elem.f_surf[2]; reg65=0.6220084679281461892*skin_elem.f_surf[2]; reg68=0.16666666666666667632*reg62; reg69=0.6220084679281461892*reg47;
    reg70=0.6220084679281461892*reg73; reg71=0.044658198738520458147*reg62; T reg75=0.6220084679281461892*reg74; T reg76=0.044658198738520458147*reg74; T reg77=0.16666666666666667632*reg72;
    T reg78=0.6220084679281461892*reg66; T reg79=0.044658198738520458147*reg66; T reg80=0.16666666666666667632*reg47; T reg81=0.16666666666666667632*reg73; reg39=reg50-reg39;
    reg45=reg48-reg45; reg35=reg44-reg35; reg44=0.6220084679281461892*reg72; reg48=0.044658198738520458147*reg47; reg24=reg24*reg61;
    reg36=reg57+reg36; reg50=0.6220084679281461892*reg62; reg46=skin_elem.p*reg46; reg33=reg32+reg33; reg38=reg43*reg38;
    reg30=reg51*reg30; reg41=skin_elem.p*reg41; reg67=skin_elem.p*reg67; reg34=reg31+reg34; reg37=reg61*reg37;
    reg31=0.16666666666666667632*reg74; reg23=reg21+reg23; reg21=0.16666666666666667632*reg67; reg50=reg65+reg50; reg53=reg58+reg53;
    reg68=reg63+reg68; reg32=0.044658198738520458147*reg46; reg43=0.044658198738520458147*reg41; reg69=reg4+reg69; reg71=reg60+reg71;
    reg70=reg59+reg70; reg42=reg60+reg42; reg77=reg63+reg77; reg44=reg65+reg44; reg51=0.6220084679281461892*reg67;
    reg57=0.6220084679281461892*reg46; reg78=reg59+reg78; reg79=reg56+reg79; reg81=reg58+reg81; reg61=0.6220084679281461892*reg41;
    T reg82=0.044658198738520458147*reg67; reg48=reg54+reg48; reg31=reg55+reg31; reg33=reg10*reg33; reg39=skin_elem.p*reg39;
    reg80=reg55+reg80; reg22=reg64-reg22; reg36=reg49*reg36; reg45=skin_elem.p*reg45; reg76=reg54+reg76;
    reg35=skin_elem.p*reg35; reg49=0.16666666666666667632*reg46; reg75=reg4+reg75; reg64=0.16666666666666667632*reg41; reg38=reg30-reg38;
    reg24=reg23+reg24; reg52=reg56+reg52; reg37=reg34+reg37; reg23=0.16666666666666667632*reg35; reg82=reg60+reg82;
    reg69=reg22*reg69; reg30=0.6220084679281461892*reg35; reg48=reg22*reg48; reg24=reg40*reg24; reg61=reg59+reg61;
    reg31=reg38*reg31; reg81=reg38*reg81; reg80=reg80*reg22; reg79=reg22*reg79; reg78=reg22*reg78;
    reg34=0.16666666666666667632*reg45; reg40=0.044658198738520458147*reg45; reg51=reg65+reg51; reg77=reg38*reg77; reg49=reg55+reg49;
    reg71=reg22*reg71; reg43=reg56+reg43; T reg83=0.16666666666666667632*reg39; reg70=reg38*reg70; reg75=reg38*reg75;
    reg32=reg54+reg32; reg50=reg22*reg50; reg21=reg63+reg21; reg64=reg58+reg64; reg42=reg38*reg42;
    T reg84=0.6220084679281461892*reg45; T reg85=0.044658198738520458147*reg39; reg76=reg76*reg38; reg68=reg22*reg68; reg53=reg22*reg53;
    T reg86=0.6220084679281461892*reg39; reg37=reg10*reg37; reg44=reg38*reg44; reg10=0.044658198738520458147*reg35; reg36=reg33-reg36;
    reg57=reg4+reg57; reg52=reg38*reg52; reg75=0.25*reg75; reg51=reg36*reg51; reg30=reg4+reg30;
    reg50=0.25*reg50; reg84=reg59+reg84; reg32=reg36*reg32; reg77=0.25*reg77; reg52=0.25*reg52;
    reg10=reg54+reg10; reg71=0.25*reg71; reg43=reg36*reg43; reg53=0.25*reg53; reg70=0.25*reg70;
    reg85=reg60+reg85; reg83=reg63+reg83; reg31=0.25*reg31; reg82=reg36*reg82; reg57=reg36*reg57;
    reg48=0.25*reg48; reg24=reg37-reg24; reg23=reg55+reg23; reg69=0.25*reg69; reg86=reg65+reg86;
    reg44=0.25*reg44; reg68=0.25*reg68; reg61=reg36*reg61; reg78=0.25*reg78; reg76=0.25*reg76;
    reg81=0.25*reg81; reg42=0.25*reg42; reg79=0.25*reg79; reg40=reg56+reg40; reg21=reg36*reg21;
    reg34=reg58+reg34; reg49=reg36*reg49; reg80=0.25*reg80; reg64=reg36*reg64; reg75=reg80+reg75;
    reg43=0.25*reg43; reg78=reg81+reg78; reg10=reg24*reg10; reg82=0.25*reg82; reg50=reg77+reg50;
    reg30=reg24*reg30; reg85=reg24*reg85; reg80=reg76+reg80; reg49=0.25*reg49; reg64=0.25*reg64;
    reg52=reg52+reg53; reg84=reg24*reg84; reg44=reg68+reg44; reg21=0.25*reg21; reg68=reg42+reg68;
    reg86=reg24*reg86; reg57=0.25*reg57; reg48=reg31+reg48; reg23=reg24*reg23; reg40=reg24*reg40;
    reg61=0.25*reg61; reg79=reg81+reg79; reg34=reg24*reg34; reg51=0.25*reg51; reg71=reg77+reg71;
    reg70=reg53+reg70; reg83=reg24*reg83; reg32=0.25*reg32; reg69=reg31+reg69; reg40=0.25*reg40;
    reg10=0.25*reg10; reg44=reg21+reg44; reg70=reg64+reg70; reg85=0.25*reg85; reg86=0.25*reg86;
    reg48=reg57+reg48; reg68=reg21+reg68; reg23=0.25*reg23; reg79=reg61+reg79; reg34=0.25*reg34;
    reg84=0.25*reg84; reg71=reg51+reg71; reg83=0.25*reg83; reg52=reg64+reg52; reg69=reg32+reg69;
    reg30=0.25*reg30; reg78=reg43+reg78; reg80=reg80+reg49; reg50=reg82+reg50; reg75=reg49+reg75;
    reg30=reg80+reg30; sollicitation[indices[1]+0]+=reg30; reg84=reg52+reg84; sollicitation[indices[1]+1]+=reg84; reg85=reg44+reg85;
    sollicitation[indices[6]+2]+=reg85; reg86=reg68+reg86; sollicitation[indices[1]+2]+=reg86; reg40=reg70+reg40; sollicitation[indices[6]+1]+=reg40;
    reg48=reg48+reg23; sollicitation[indices[2]+0]+=reg48; reg79=reg79+reg34; sollicitation[indices[2]+1]+=reg79; reg71=reg71+reg83;
    sollicitation[indices[2]+2]+=reg71; reg69=reg23+reg69; sollicitation[indices[5]+0]+=reg69; reg10=reg75+reg10; sollicitation[indices[6]+0]+=reg10;
    reg78=reg34+reg78; sollicitation[indices[5]+1]+=reg78; reg50=reg83+reg50; sollicitation[indices[5]+2]+=reg50;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(1)[1]; T reg1=0.21132486540518713447*elem.pos(1)[0]; T reg2=0.21132486540518713447*elem.pos(2)[1]; T reg3=0.21132486540518713447*elem.pos(2)[0]; T reg4=reg3-reg1;
    T reg5=0.78867513459481286553*elem.pos(6)[1]; T reg6=0.78867513459481286553*elem.pos(1)[1]; T reg7=0.78867513459481286553*elem.pos(2)[1]; T reg8=0.78867513459481286553*elem.pos(1)[0]; T reg9=0.78867513459481286553*elem.pos(2)[0];
    T reg10=reg2-reg0; T reg11=0.21132486540518713447*elem.pos(1)[2]; T reg12=0.21132486540518713447*elem.pos(2)[2]; T reg13=0.78867513459481286553*elem.pos(6)[0]; T reg14=0.78867513459481286553*elem.pos(1)[2];
    T reg15=0.78867513459481286553*elem.pos(2)[2]; T reg16=0.78867513459481286553*elem.pos(6)[2]; T reg17=0.78867513459481286553*elem.pos(5)[1]; reg10=reg10+reg5; T reg18=0.21132486540518713447*elem.pos(6)[0];
    T reg19=0.78867513459481286553*elem.pos(5)[0]; T reg20=0.21132486540518713447*elem.pos(6)[1]; reg4=reg13+reg4; T reg21=reg9-reg8; T reg22=reg12-reg11;
    T reg23=reg7-reg6; reg10=reg10-reg17; T reg24=reg15-reg14; T reg25=0.78867513459481286553*elem.pos(5)[2]; T reg26=0.21132486540518713447*elem.pos(5)[0];
    T reg27=0.21132486540518713447*elem.pos(5)[1]; reg23=reg20+reg23; reg22=reg16+reg22; reg4=reg4-reg19; T reg28=0.21132486540518713447*elem.pos(6)[2];
    reg21=reg18+reg21; reg24=reg28+reg24; T reg29=0.21132486540518713447*elem.pos(5)[2]; reg23=reg23-reg27; reg22=reg22-reg25;
    reg21=reg21-reg26; T reg30=pow(reg4,2); T reg31=pow(reg10,2); reg24=reg24-reg29; T reg32=pow(reg23,2);
    T reg33=pow(reg21,2); reg30=reg31+reg30; reg31=pow(reg22,2); T reg34=reg6+reg2; reg30=reg31+reg30;
    reg31=reg8+reg3; T reg35=pow(reg24,2); T reg36=reg9+reg1; reg33=reg32+reg33; reg32=reg7+reg0;
    reg34=reg20-reg34; reg31=reg18-reg31; T reg37=reg14+reg12; reg35=reg33+reg35; reg36=reg13-reg36;
    reg32=reg5-reg32; reg33=reg15+reg11; reg30=pow(reg30,0.5); reg34=reg17+reg34; reg33=reg16-reg33;
    reg31=reg19+reg31; reg37=reg28-reg37; T reg38=reg4/reg30; reg35=pow(reg35,0.5); T reg39=reg10/reg30;
    reg32=reg27+reg32; reg36=reg26+reg36; T reg40=reg39*reg34; T reg41=reg39*reg32; T reg42=reg38*reg31;
    reg30=reg22/reg30; reg37=reg25+reg37; reg33=reg29+reg33; T reg43=reg36*reg38; T reg44=reg23/reg35;
    T reg45=reg21/reg35; reg41=reg43+reg41; reg43=reg30*reg33; reg40=reg42+reg40; reg42=reg30*reg37;
    reg35=reg24/reg35; T reg46=reg36*reg45; T reg47=reg44*reg32; reg43=reg41+reg43; reg41=reg45*reg31;
    T reg48=reg44*reg34; T reg49=reg35*reg33; reg42=reg40+reg42; reg47=reg46+reg47; reg49=reg47+reg49;
    reg40=reg35*reg37; reg41=reg48+reg41; reg46=reg38*reg43; reg47=reg39*reg43; reg48=reg39*reg42;
    T reg50=reg38*reg42; reg47=reg32-reg47; T reg51=reg30*reg43; reg40=reg41+reg40; reg41=reg44*reg49;
    reg46=reg36-reg46; reg48=reg34-reg48; reg50=reg31-reg50; T reg52=reg30*reg42; T reg53=reg45*reg49;
    reg52=reg37-reg52; T reg54=pow(reg48,2); T reg55=pow(reg50,2); T reg56=reg44*reg40; T reg57=pow(reg47,2);
    T reg58=pow(reg46,2); reg53=reg36-reg53; reg51=reg33-reg51; T reg59=reg45*reg40; reg41=reg32-reg41;
    T reg60=reg35*reg49; T reg61=reg35*reg40; reg56=reg34-reg56; reg59=reg31-reg59; T reg62=pow(reg41,2);
    reg60=reg33-reg60; T reg63=pow(reg51,2); reg58=reg57+reg58; reg57=pow(reg53,2); T reg64=pow(reg52,2);
    reg54=reg55+reg54; reg63=reg58+reg63; reg61=reg37-reg61; reg55=pow(reg56,2); reg58=pow(reg59,2);
    reg62=reg57+reg62; reg57=pow(reg60,2); reg64=reg54+reg64; reg64=pow(reg64,0.5); reg57=reg62+reg57;
    reg63=pow(reg63,0.5); reg55=reg58+reg55; reg54=pow(reg61,2); reg50=reg50/reg64; reg51=reg51/reg63;
    reg46=reg46/reg63; reg63=reg47/reg63; reg54=reg55+reg54; reg57=pow(reg57,0.5); reg48=reg48/reg64;
    reg64=reg52/reg64; reg47=reg30*reg48; reg52=reg4*reg50; reg55=reg34*reg48; reg58=reg31*reg50;
    reg62=reg39*reg50; T reg65=reg38*reg48; T reg66=reg38*reg64; reg50=reg30*reg50; T reg67=reg39*reg64;
    reg48=reg10*reg48; T reg68=reg10*reg63; T reg69=reg4*reg46; reg10=reg10*reg39; reg4=reg4*reg38;
    T reg70=reg32*reg63; T reg71=reg36*reg46; T reg72=reg39*reg46; reg46=reg30*reg46; T reg73=reg38*reg51;
    reg39=reg39*reg51; T reg74=reg30*reg63; reg63=reg38*reg63; reg60=reg60/reg57; reg54=pow(reg54,0.5);
    reg53=reg53/reg57; reg57=reg41/reg57; reg38=reg22*reg51; reg68=reg69+reg68; reg41=reg45*reg60;
    reg66=reg50-reg66; reg30=reg22*reg30; reg10=reg4+reg10; reg4=reg23*reg44; reg50=reg45*reg57;
    reg47=reg67-reg47; reg51=reg33*reg51; reg70=reg71+reg70; reg67=reg44*reg53; reg61=reg61/reg54;
    reg72=reg63-reg72; reg63=reg45*reg21; reg73=reg46-reg73; reg56=reg56/reg54; reg54=reg59/reg54;
    reg74=reg39-reg74; reg32=reg57*reg32; reg22=reg22*reg64; reg48=reg52+reg48; reg36=reg36*reg53;
    reg39=reg44*reg60; reg46=reg35*reg57; reg64=reg37*reg64; reg55=reg58+reg55; reg57=reg23*reg57;
    reg52=reg35*reg53; reg53=reg53*reg21; reg62=reg65-reg62; reg57=reg53+reg57; reg74=skin_elem.p*reg74;
    reg32=reg36+reg32; reg36=reg24*reg60; reg33=reg60*reg33; reg72=skin_elem.p*reg72; reg67=reg50-reg67;
    reg51=reg70+reg51; reg46=reg39-reg46; reg30=reg10+reg30; reg4=reg63+reg4; reg41=reg52-reg41;
    reg10=reg24*reg35; reg38=reg68+reg38; reg64=reg55+reg64; reg62=skin_elem.p*reg62; reg39=reg44*reg54;
    reg50=reg45*reg56; reg22=reg48+reg22; reg45=reg45*reg61; reg48=reg35*reg54; reg66=skin_elem.p*reg66;
    reg35=reg35*reg56; reg44=reg44*reg61; reg47=skin_elem.p*reg47; reg23=reg23*reg56; reg21=reg54*reg21;
    reg34=reg56*reg34; reg73=skin_elem.p*reg73; reg31=reg54*reg31; reg22=reg42*reg22; reg42=0.044658198738520458147*reg72;
    reg52=0.044658198738520458147*reg73; reg53=0.16666666666666667632*reg66; reg64=reg30*reg64; reg54=0.044658198738520458147*skin_elem.f_surf[0]; reg10=reg4+reg10;
    reg4=0.6220084679281461892*skin_elem.f_surf[0]; reg55=0.16666666666666667632*skin_elem.f_surf[0]; reg56=0.044658198738520458147*skin_elem.f_surf[1]; reg58=0.16666666666666667632*skin_elem.f_surf[1]; reg59=0.6220084679281461892*skin_elem.f_surf[1];
    reg60=0.044658198738520458147*skin_elem.f_surf[2]; reg63=0.16666666666666667632*skin_elem.f_surf[2]; reg65=0.6220084679281461892*skin_elem.f_surf[2]; reg68=0.16666666666666667632*reg62; reg69=0.6220084679281461892*reg47;
    reg70=0.6220084679281461892*reg73; reg71=0.044658198738520458147*reg62; T reg75=0.6220084679281461892*reg74; T reg76=0.044658198738520458147*reg74; T reg77=0.16666666666666667632*reg72;
    T reg78=0.6220084679281461892*reg66; T reg79=0.044658198738520458147*reg66; T reg80=0.16666666666666667632*reg47; T reg81=0.16666666666666667632*reg73; reg39=reg50-reg39;
    reg45=reg48-reg45; reg35=reg44-reg35; reg44=0.6220084679281461892*reg72; reg48=0.044658198738520458147*reg47; reg24=reg24*reg61;
    reg36=reg57+reg36; reg50=0.6220084679281461892*reg62; reg46=skin_elem.p*reg46; reg33=reg32+reg33; reg38=reg43*reg38;
    reg30=reg51*reg30; reg41=skin_elem.p*reg41; reg67=skin_elem.p*reg67; reg34=reg31+reg34; reg37=reg61*reg37;
    reg31=0.16666666666666667632*reg74; reg23=reg21+reg23; reg21=0.16666666666666667632*reg67; reg50=reg65+reg50; reg53=reg58+reg53;
    reg68=reg63+reg68; reg32=0.044658198738520458147*reg46; reg43=0.044658198738520458147*reg41; reg69=reg4+reg69; reg71=reg60+reg71;
    reg70=reg59+reg70; reg42=reg60+reg42; reg77=reg63+reg77; reg44=reg65+reg44; reg51=0.6220084679281461892*reg67;
    reg57=0.6220084679281461892*reg46; reg78=reg59+reg78; reg79=reg56+reg79; reg81=reg58+reg81; reg61=0.6220084679281461892*reg41;
    T reg82=0.044658198738520458147*reg67; reg48=reg54+reg48; reg31=reg55+reg31; reg33=reg10*reg33; reg39=skin_elem.p*reg39;
    reg80=reg55+reg80; reg22=reg64-reg22; reg36=reg49*reg36; reg45=skin_elem.p*reg45; reg76=reg54+reg76;
    reg35=skin_elem.p*reg35; reg49=0.16666666666666667632*reg46; reg75=reg4+reg75; reg64=0.16666666666666667632*reg41; reg38=reg30-reg38;
    reg24=reg23+reg24; reg52=reg56+reg52; reg37=reg34+reg37; reg23=0.16666666666666667632*reg35; reg82=reg60+reg82;
    reg69=reg22*reg69; reg30=0.6220084679281461892*reg35; reg48=reg22*reg48; reg24=reg40*reg24; reg61=reg59+reg61;
    reg31=reg38*reg31; reg81=reg38*reg81; reg80=reg80*reg22; reg79=reg22*reg79; reg78=reg22*reg78;
    reg34=0.16666666666666667632*reg45; reg40=0.044658198738520458147*reg45; reg51=reg65+reg51; reg77=reg38*reg77; reg49=reg55+reg49;
    reg71=reg22*reg71; reg43=reg56+reg43; T reg83=0.16666666666666667632*reg39; reg70=reg38*reg70; reg75=reg38*reg75;
    reg32=reg54+reg32; reg50=reg22*reg50; reg21=reg63+reg21; reg64=reg58+reg64; reg42=reg38*reg42;
    T reg84=0.6220084679281461892*reg45; T reg85=0.044658198738520458147*reg39; reg76=reg76*reg38; reg68=reg22*reg68; reg53=reg22*reg53;
    T reg86=0.6220084679281461892*reg39; reg37=reg10*reg37; reg44=reg38*reg44; reg10=0.044658198738520458147*reg35; reg36=reg33-reg36;
    reg57=reg4+reg57; reg52=reg38*reg52; reg75=0.25*reg75; reg51=reg36*reg51; reg30=reg4+reg30;
    reg50=0.25*reg50; reg84=reg59+reg84; reg32=reg36*reg32; reg77=0.25*reg77; reg52=0.25*reg52;
    reg10=reg54+reg10; reg71=0.25*reg71; reg43=reg36*reg43; reg53=0.25*reg53; reg70=0.25*reg70;
    reg85=reg60+reg85; reg83=reg63+reg83; reg31=0.25*reg31; reg82=reg36*reg82; reg57=reg36*reg57;
    reg48=0.25*reg48; reg24=reg37-reg24; reg23=reg55+reg23; reg69=0.25*reg69; reg86=reg65+reg86;
    reg44=0.25*reg44; reg68=0.25*reg68; reg61=reg36*reg61; reg78=0.25*reg78; reg76=0.25*reg76;
    reg81=0.25*reg81; reg42=0.25*reg42; reg79=0.25*reg79; reg40=reg56+reg40; reg21=reg36*reg21;
    reg34=reg58+reg34; reg49=reg36*reg49; reg80=0.25*reg80; reg64=reg36*reg64; reg75=reg80+reg75;
    reg43=0.25*reg43; reg78=reg81+reg78; reg10=reg24*reg10; reg82=0.25*reg82; reg50=reg77+reg50;
    reg30=reg24*reg30; reg85=reg24*reg85; reg80=reg76+reg80; reg49=0.25*reg49; reg64=0.25*reg64;
    reg52=reg52+reg53; reg84=reg24*reg84; reg44=reg68+reg44; reg21=0.25*reg21; reg68=reg42+reg68;
    reg86=reg24*reg86; reg57=0.25*reg57; reg48=reg31+reg48; reg23=reg24*reg23; reg40=reg24*reg40;
    reg61=0.25*reg61; reg79=reg81+reg79; reg34=reg24*reg34; reg51=0.25*reg51; reg71=reg77+reg71;
    reg70=reg53+reg70; reg83=reg24*reg83; reg32=0.25*reg32; reg69=reg31+reg69; reg40=0.25*reg40;
    reg10=0.25*reg10; reg44=reg21+reg44; reg70=reg64+reg70; reg85=0.25*reg85; reg86=0.25*reg86;
    reg48=reg57+reg48; reg68=reg21+reg68; reg23=0.25*reg23; reg79=reg61+reg79; reg34=0.25*reg34;
    reg84=0.25*reg84; reg71=reg51+reg71; reg83=0.25*reg83; reg52=reg64+reg52; reg69=reg32+reg69;
    reg30=0.25*reg30; reg78=reg43+reg78; reg80=reg80+reg49; reg50=reg82+reg50; reg75=reg49+reg75;
    reg30=reg80+reg30; sollicitation[indices[1]+0]+=reg30; reg84=reg52+reg84; sollicitation[indices[1]+1]+=reg84; reg85=reg44+reg85;
    sollicitation[indices[6]+2]+=reg85; reg86=reg68+reg86; sollicitation[indices[1]+2]+=reg86; reg40=reg70+reg40; sollicitation[indices[6]+1]+=reg40;
    reg48=reg48+reg23; sollicitation[indices[2]+0]+=reg48; reg79=reg79+reg34; sollicitation[indices[2]+1]+=reg79; reg71=reg71+reg83;
    sollicitation[indices[2]+2]+=reg71; reg69=reg23+reg69; sollicitation[indices[5]+0]+=reg69; reg10=reg75+reg10; sollicitation[indices[6]+0]+=reg10;
    reg78=reg34+reg78; sollicitation[indices[5]+1]+=reg78; reg50=reg83+reg50; sollicitation[indices[5]+2]+=reg50;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<false> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<true> &matrix_is_sym,
      const Number<true> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<true> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
    T reg0=0.21132486540518713447*elem.pos(1)[1]; T reg1=0.21132486540518713447*elem.pos(1)[0]; T reg2=0.21132486540518713447*elem.pos(2)[1]; T reg3=0.21132486540518713447*elem.pos(2)[0]; T reg4=reg3-reg1;
    T reg5=0.78867513459481286553*elem.pos(6)[1]; T reg6=0.78867513459481286553*elem.pos(1)[1]; T reg7=0.78867513459481286553*elem.pos(2)[1]; T reg8=0.78867513459481286553*elem.pos(1)[0]; T reg9=0.78867513459481286553*elem.pos(2)[0];
    T reg10=reg2-reg0; T reg11=0.21132486540518713447*elem.pos(1)[2]; T reg12=0.21132486540518713447*elem.pos(2)[2]; T reg13=0.78867513459481286553*elem.pos(6)[0]; T reg14=0.78867513459481286553*elem.pos(1)[2];
    T reg15=0.78867513459481286553*elem.pos(2)[2]; T reg16=0.78867513459481286553*elem.pos(6)[2]; T reg17=0.78867513459481286553*elem.pos(5)[1]; reg10=reg10+reg5; T reg18=0.21132486540518713447*elem.pos(6)[0];
    T reg19=0.78867513459481286553*elem.pos(5)[0]; T reg20=0.21132486540518713447*elem.pos(6)[1]; reg4=reg13+reg4; T reg21=reg9-reg8; T reg22=reg12-reg11;
    T reg23=reg7-reg6; reg10=reg10-reg17; T reg24=reg15-reg14; T reg25=0.78867513459481286553*elem.pos(5)[2]; T reg26=0.21132486540518713447*elem.pos(5)[0];
    T reg27=0.21132486540518713447*elem.pos(5)[1]; reg23=reg20+reg23; reg22=reg16+reg22; reg4=reg4-reg19; T reg28=0.21132486540518713447*elem.pos(6)[2];
    reg21=reg18+reg21; reg24=reg28+reg24; T reg29=0.21132486540518713447*elem.pos(5)[2]; reg23=reg23-reg27; reg22=reg22-reg25;
    reg21=reg21-reg26; T reg30=pow(reg4,2); T reg31=pow(reg10,2); reg24=reg24-reg29; T reg32=pow(reg23,2);
    T reg33=pow(reg21,2); reg30=reg31+reg30; reg31=pow(reg22,2); T reg34=reg6+reg2; reg30=reg31+reg30;
    reg31=reg8+reg3; T reg35=pow(reg24,2); T reg36=reg9+reg1; reg33=reg32+reg33; reg32=reg7+reg0;
    reg34=reg20-reg34; reg31=reg18-reg31; T reg37=reg14+reg12; reg35=reg33+reg35; reg36=reg13-reg36;
    reg32=reg5-reg32; reg33=reg15+reg11; reg30=pow(reg30,0.5); reg34=reg17+reg34; reg33=reg16-reg33;
    reg31=reg19+reg31; reg37=reg28-reg37; T reg38=reg4/reg30; reg35=pow(reg35,0.5); T reg39=reg10/reg30;
    reg32=reg27+reg32; reg36=reg26+reg36; T reg40=reg39*reg34; T reg41=reg39*reg32; T reg42=reg38*reg31;
    reg30=reg22/reg30; reg37=reg25+reg37; reg33=reg29+reg33; T reg43=reg36*reg38; T reg44=reg23/reg35;
    T reg45=reg21/reg35; reg41=reg43+reg41; reg43=reg30*reg33; reg40=reg42+reg40; reg42=reg30*reg37;
    reg35=reg24/reg35; T reg46=reg36*reg45; T reg47=reg44*reg32; reg43=reg41+reg43; reg41=reg45*reg31;
    T reg48=reg44*reg34; T reg49=reg35*reg33; reg42=reg40+reg42; reg47=reg46+reg47; reg49=reg47+reg49;
    reg40=reg35*reg37; reg41=reg48+reg41; reg46=reg38*reg43; reg47=reg39*reg43; reg48=reg39*reg42;
    T reg50=reg38*reg42; reg47=reg32-reg47; T reg51=reg30*reg43; reg40=reg41+reg40; reg41=reg44*reg49;
    reg46=reg36-reg46; reg48=reg34-reg48; reg50=reg31-reg50; T reg52=reg30*reg42; T reg53=reg45*reg49;
    reg52=reg37-reg52; T reg54=pow(reg48,2); T reg55=pow(reg50,2); T reg56=reg44*reg40; T reg57=pow(reg47,2);
    T reg58=pow(reg46,2); reg53=reg36-reg53; reg51=reg33-reg51; T reg59=reg45*reg40; reg41=reg32-reg41;
    T reg60=reg35*reg49; T reg61=reg35*reg40; reg56=reg34-reg56; reg59=reg31-reg59; T reg62=pow(reg41,2);
    reg60=reg33-reg60; T reg63=pow(reg51,2); reg58=reg57+reg58; reg57=pow(reg53,2); T reg64=pow(reg52,2);
    reg54=reg55+reg54; reg63=reg58+reg63; reg61=reg37-reg61; reg55=pow(reg56,2); reg58=pow(reg59,2);
    reg62=reg57+reg62; reg57=pow(reg60,2); reg64=reg54+reg64; reg64=pow(reg64,0.5); reg57=reg62+reg57;
    reg63=pow(reg63,0.5); reg55=reg58+reg55; reg54=pow(reg61,2); reg50=reg50/reg64; reg51=reg51/reg63;
    reg46=reg46/reg63; reg63=reg47/reg63; reg54=reg55+reg54; reg57=pow(reg57,0.5); reg48=reg48/reg64;
    reg64=reg52/reg64; reg47=reg30*reg48; reg52=reg4*reg50; reg55=reg34*reg48; reg58=reg31*reg50;
    reg62=reg39*reg50; T reg65=reg38*reg48; T reg66=reg38*reg64; reg50=reg30*reg50; T reg67=reg39*reg64;
    reg48=reg10*reg48; T reg68=reg10*reg63; T reg69=reg4*reg46; reg10=reg10*reg39; reg4=reg4*reg38;
    T reg70=reg32*reg63; T reg71=reg36*reg46; T reg72=reg39*reg46; reg46=reg30*reg46; T reg73=reg38*reg51;
    reg39=reg39*reg51; T reg74=reg30*reg63; reg63=reg38*reg63; reg60=reg60/reg57; reg54=pow(reg54,0.5);
    reg53=reg53/reg57; reg57=reg41/reg57; reg38=reg22*reg51; reg68=reg69+reg68; reg41=reg45*reg60;
    reg66=reg50-reg66; reg30=reg22*reg30; reg10=reg4+reg10; reg4=reg23*reg44; reg50=reg45*reg57;
    reg47=reg67-reg47; reg51=reg33*reg51; reg70=reg71+reg70; reg67=reg44*reg53; reg61=reg61/reg54;
    reg72=reg63-reg72; reg63=reg45*reg21; reg73=reg46-reg73; reg56=reg56/reg54; reg54=reg59/reg54;
    reg74=reg39-reg74; reg32=reg57*reg32; reg22=reg22*reg64; reg48=reg52+reg48; reg36=reg36*reg53;
    reg39=reg44*reg60; reg46=reg35*reg57; reg64=reg37*reg64; reg55=reg58+reg55; reg57=reg23*reg57;
    reg52=reg35*reg53; reg53=reg53*reg21; reg62=reg65-reg62; reg57=reg53+reg57; reg74=skin_elem.p*reg74;
    reg32=reg36+reg32; reg36=reg24*reg60; reg33=reg60*reg33; reg72=skin_elem.p*reg72; reg67=reg50-reg67;
    reg51=reg70+reg51; reg46=reg39-reg46; reg30=reg10+reg30; reg4=reg63+reg4; reg41=reg52-reg41;
    reg10=reg24*reg35; reg38=reg68+reg38; reg64=reg55+reg64; reg62=skin_elem.p*reg62; reg39=reg44*reg54;
    reg50=reg45*reg56; reg22=reg48+reg22; reg45=reg45*reg61; reg48=reg35*reg54; reg66=skin_elem.p*reg66;
    reg35=reg35*reg56; reg44=reg44*reg61; reg47=skin_elem.p*reg47; reg23=reg23*reg56; reg21=reg54*reg21;
    reg34=reg56*reg34; reg73=skin_elem.p*reg73; reg31=reg54*reg31; reg22=reg42*reg22; reg42=0.044658198738520458147*reg72;
    reg52=0.044658198738520458147*reg73; reg53=0.16666666666666667632*reg66; reg64=reg30*reg64; reg54=0.044658198738520458147*skin_elem.f_surf[0]; reg10=reg4+reg10;
    reg4=0.6220084679281461892*skin_elem.f_surf[0]; reg55=0.16666666666666667632*skin_elem.f_surf[0]; reg56=0.044658198738520458147*skin_elem.f_surf[1]; reg58=0.16666666666666667632*skin_elem.f_surf[1]; reg59=0.6220084679281461892*skin_elem.f_surf[1];
    reg60=0.044658198738520458147*skin_elem.f_surf[2]; reg63=0.16666666666666667632*skin_elem.f_surf[2]; reg65=0.6220084679281461892*skin_elem.f_surf[2]; reg68=0.16666666666666667632*reg62; reg69=0.6220084679281461892*reg47;
    reg70=0.6220084679281461892*reg73; reg71=0.044658198738520458147*reg62; T reg75=0.6220084679281461892*reg74; T reg76=0.044658198738520458147*reg74; T reg77=0.16666666666666667632*reg72;
    T reg78=0.6220084679281461892*reg66; T reg79=0.044658198738520458147*reg66; T reg80=0.16666666666666667632*reg47; T reg81=0.16666666666666667632*reg73; reg39=reg50-reg39;
    reg45=reg48-reg45; reg35=reg44-reg35; reg44=0.6220084679281461892*reg72; reg48=0.044658198738520458147*reg47; reg24=reg24*reg61;
    reg36=reg57+reg36; reg50=0.6220084679281461892*reg62; reg46=skin_elem.p*reg46; reg33=reg32+reg33; reg38=reg43*reg38;
    reg30=reg51*reg30; reg41=skin_elem.p*reg41; reg67=skin_elem.p*reg67; reg34=reg31+reg34; reg37=reg61*reg37;
    reg31=0.16666666666666667632*reg74; reg23=reg21+reg23; reg21=0.16666666666666667632*reg67; reg50=reg65+reg50; reg53=reg58+reg53;
    reg68=reg63+reg68; reg32=0.044658198738520458147*reg46; reg43=0.044658198738520458147*reg41; reg69=reg4+reg69; reg71=reg60+reg71;
    reg70=reg59+reg70; reg42=reg60+reg42; reg77=reg63+reg77; reg44=reg65+reg44; reg51=0.6220084679281461892*reg67;
    reg57=0.6220084679281461892*reg46; reg78=reg59+reg78; reg79=reg56+reg79; reg81=reg58+reg81; reg61=0.6220084679281461892*reg41;
    T reg82=0.044658198738520458147*reg67; reg48=reg54+reg48; reg31=reg55+reg31; reg33=reg10*reg33; reg39=skin_elem.p*reg39;
    reg80=reg55+reg80; reg22=reg64-reg22; reg36=reg49*reg36; reg45=skin_elem.p*reg45; reg76=reg54+reg76;
    reg35=skin_elem.p*reg35; reg49=0.16666666666666667632*reg46; reg75=reg4+reg75; reg64=0.16666666666666667632*reg41; reg38=reg30-reg38;
    reg24=reg23+reg24; reg52=reg56+reg52; reg37=reg34+reg37; reg23=0.16666666666666667632*reg35; reg82=reg60+reg82;
    reg69=reg22*reg69; reg30=0.6220084679281461892*reg35; reg48=reg22*reg48; reg24=reg40*reg24; reg61=reg59+reg61;
    reg31=reg38*reg31; reg81=reg38*reg81; reg80=reg80*reg22; reg79=reg22*reg79; reg78=reg22*reg78;
    reg34=0.16666666666666667632*reg45; reg40=0.044658198738520458147*reg45; reg51=reg65+reg51; reg77=reg38*reg77; reg49=reg55+reg49;
    reg71=reg22*reg71; reg43=reg56+reg43; T reg83=0.16666666666666667632*reg39; reg70=reg38*reg70; reg75=reg38*reg75;
    reg32=reg54+reg32; reg50=reg22*reg50; reg21=reg63+reg21; reg64=reg58+reg64; reg42=reg38*reg42;
    T reg84=0.6220084679281461892*reg45; T reg85=0.044658198738520458147*reg39; reg76=reg76*reg38; reg68=reg22*reg68; reg53=reg22*reg53;
    T reg86=0.6220084679281461892*reg39; reg37=reg10*reg37; reg44=reg38*reg44; reg10=0.044658198738520458147*reg35; reg36=reg33-reg36;
    reg57=reg4+reg57; reg52=reg38*reg52; reg75=0.25*reg75; reg51=reg36*reg51; reg30=reg4+reg30;
    reg50=0.25*reg50; reg84=reg59+reg84; reg32=reg36*reg32; reg77=0.25*reg77; reg52=0.25*reg52;
    reg10=reg54+reg10; reg71=0.25*reg71; reg43=reg36*reg43; reg53=0.25*reg53; reg70=0.25*reg70;
    reg85=reg60+reg85; reg83=reg63+reg83; reg31=0.25*reg31; reg82=reg36*reg82; reg57=reg36*reg57;
    reg48=0.25*reg48; reg24=reg37-reg24; reg23=reg55+reg23; reg69=0.25*reg69; reg86=reg65+reg86;
    reg44=0.25*reg44; reg68=0.25*reg68; reg61=reg36*reg61; reg78=0.25*reg78; reg76=0.25*reg76;
    reg81=0.25*reg81; reg42=0.25*reg42; reg79=0.25*reg79; reg40=reg56+reg40; reg21=reg36*reg21;
    reg34=reg58+reg34; reg49=reg36*reg49; reg80=0.25*reg80; reg64=reg36*reg64; reg75=reg80+reg75;
    reg43=0.25*reg43; reg78=reg81+reg78; reg10=reg24*reg10; reg82=0.25*reg82; reg50=reg77+reg50;
    reg30=reg24*reg30; reg85=reg24*reg85; reg80=reg76+reg80; reg49=0.25*reg49; reg64=0.25*reg64;
    reg52=reg52+reg53; reg84=reg24*reg84; reg44=reg68+reg44; reg21=0.25*reg21; reg68=reg42+reg68;
    reg86=reg24*reg86; reg57=0.25*reg57; reg48=reg31+reg48; reg23=reg24*reg23; reg40=reg24*reg40;
    reg61=0.25*reg61; reg79=reg81+reg79; reg34=reg24*reg34; reg51=0.25*reg51; reg71=reg77+reg71;
    reg70=reg53+reg70; reg83=reg24*reg83; reg32=0.25*reg32; reg69=reg31+reg69; reg40=0.25*reg40;
    reg10=0.25*reg10; reg44=reg21+reg44; reg70=reg64+reg70; reg85=0.25*reg85; reg86=0.25*reg86;
    reg48=reg57+reg48; reg68=reg21+reg68; reg23=0.25*reg23; reg79=reg61+reg79; reg34=0.25*reg34;
    reg84=0.25*reg84; reg71=reg51+reg71; reg83=0.25*reg83; reg52=reg64+reg52; reg69=reg32+reg69;
    reg30=0.25*reg30; reg78=reg43+reg78; reg80=reg80+reg49; reg50=reg82+reg50; reg75=reg49+reg75;
    reg30=reg80+reg30; sollicitation[indices[1]+0]+=reg30; reg84=reg52+reg84; sollicitation[indices[1]+1]+=reg84; reg85=reg44+reg85;
    sollicitation[indices[6]+2]+=reg85; reg86=reg68+reg86; sollicitation[indices[1]+2]+=reg86; reg40=reg70+reg40; sollicitation[indices[6]+1]+=reg40;
    reg48=reg48+reg23; sollicitation[indices[2]+0]+=reg48; reg79=reg79+reg34; sollicitation[indices[2]+1]+=reg79; reg71=reg71+reg83;
    sollicitation[indices[2]+2]+=reg71; reg69=reg23+reg69; sollicitation[indices[5]+0]+=reg69; reg10=reg75+reg10; sollicitation[indices[6]+0]+=reg10;
    reg78=reg34+reg78; sollicitation[indices[5]+1]+=reg78; reg50=reg83+reg50; sollicitation[indices[5]+2]+=reg50;
  #undef PNODE
}
// 
template<class TM,class T,bool wont_add_nz,class TMA, class TVE,class TVEVE, class T_pos, class ND,class ED, unsigned nim,class ED2,unsigned nim2,unsigned symmetric_version>
void add_skin_elem_matrix(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Number<symmetric_version> &matrix_is_sym,
      const Number<false> &assemble_mat,
      const Number<false> &assemble_vec,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices){
   #define PNODE(N) (*elem.node(N))
  #undef PNODE
}
// 
template<class TD,class T,class TM,bool wont_add_nz,class TMA,class TVE,class TVEVE,class T_pos,class ND,class ED,unsigned nim>
void add_local_elem_vector_der_var(TD ponderation,const TD *var_inter,
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */    T reg0=1-var_inter[2]; T reg1=1-var_inter[1]; T reg2=1-var_inter[0]; T reg3=reg1*var_inter[0]; T reg4=var_inter[0]*reg0;
    T reg5=reg2*reg0; T reg6=reg1*reg0; T reg7=reg2*reg1; T reg8=elem.pos(1)[1]*reg6; T reg9=elem.pos(0)[1]*reg6;
    T reg10=var_inter[1]*var_inter[0]; T reg11=elem.pos(0)[1]*reg7; T reg12=reg3*elem.pos(1)[1]; T reg13=elem.pos(1)[2]*reg4; T reg14=elem.pos(0)[2]*reg5;
    T reg15=elem.pos(0)[1]*reg5; T reg16=elem.pos(1)[1]*reg4; T reg17=elem.pos(1)[2]*reg6; T reg18=elem.pos(0)[2]*reg6; T reg19=var_inter[1]*reg0;
    T reg20=reg3*elem.pos(1)[2]; T reg21=reg7*elem.pos(0)[2]; reg8=reg8-reg9; T reg22=elem.pos(2)[1]*reg19; reg17=reg17-reg18;
    T reg23=elem.pos(2)[2]*reg19; T reg24=1+(*f.m).poisson_ratio; T reg25=reg16+reg15; T reg26=elem.pos(2)[1]*reg4; T reg27=1.0/(*f.m).elastic_modulus;
    T reg28=reg14+reg13; T reg29=elem.pos(2)[2]*reg4; T reg30=var_inter[1]*reg2; T reg31=elem.pos(2)[1]*reg10; T reg32=reg12+reg11;
    T reg33=reg21+reg20; T reg34=elem.pos(2)[2]*reg10; T reg35=var_inter[2]*reg2; T reg36=elem.pos(0)[0]*reg6; T reg37=elem.pos(1)[0]*reg6;
    T reg38=elem.pos(3)[1]*reg30; T reg39=elem.pos(0)[0]*reg5; reg24=reg24/(*f.m).elastic_modulus; T reg40=elem.pos(1)[0]*reg4; T reg41=elem.pos(3)[2]*reg30;
    T reg42=reg33+reg34; T reg43=elem.pos(3)[2]*reg19; reg23=reg17+reg23; reg17=2*reg27; T reg44=reg32+reg31;
    reg26=reg26-reg25; T reg45=elem.pos(3)[1]*reg5; T reg46=elem.pos(3)[1]*reg19; reg22=reg8+reg22; reg29=reg29-reg28;
    reg8=elem.pos(3)[2]*reg5; T reg47=var_inter[2]*reg1; reg22=reg22-reg46; T reg48=elem.pos(4)[1]*reg47; T reg49=elem.pos(4)[1]*reg7;
    T reg50=pow(reg24,2); reg23=reg23-reg43; T reg51=elem.pos(4)[2]*reg47; T reg52=reg44+reg38; T reg53=reg40+reg39;
    T reg54=elem.pos(2)[0]*reg4; T reg55=var_inter[2]*var_inter[0]; T reg56=reg42+reg41; reg45=reg26+reg45; reg26=elem.pos(4)[1]*reg35;
    T reg57=elem.pos(4)[2]*reg7; T reg58=elem.pos(0)[0]*reg7; reg8=reg29+reg8; reg29=elem.pos(4)[2]*reg35; T reg59=reg3*elem.pos(1)[0];
    reg17=reg24*reg17; reg37=reg37-reg36; T reg60=elem.pos(2)[0]*reg19; T reg61=reg10*elem.pos(2)[0]; T reg62=reg59+reg58;
    T reg63=elem.pos(5)[2]*reg55; reg8=reg8-reg29; reg23=reg23-reg51; T reg64=elem.pos(5)[2]*reg47; T reg65=elem.pos(5)[1]*reg55;
    reg45=reg45-reg26; T reg66=reg24*reg17; T reg67=reg27*reg50; T reg68=elem.pos(3)[0]*reg5; reg54=reg54-reg53;
    T reg69=elem.pos(3)[0]*reg19; reg60=reg37+reg60; reg22=reg22-reg48; reg37=elem.pos(5)[1]*reg47; reg57=reg57-reg56;
    T reg70=var_inter[1]*var_inter[2]; T reg71=elem.pos(5)[1]*reg3; T reg72=elem.pos(5)[2]*reg3; reg49=reg49-reg52; T reg73=elem.pos(4)[0]*reg35;
    reg68=reg54+reg68; reg66=reg66+reg67; reg24=reg24*reg50; reg72=reg57+reg72; reg45=reg45-reg65;
    reg54=elem.pos(6)[1]*reg55; reg57=(*f.m).poisson_ratio/(*f.m).elastic_modulus; T reg74=elem.pos(6)[1]*reg10; reg8=reg8-reg63; T reg75=elem.pos(6)[2]*reg55;
    reg71=reg49+reg71; reg49=reg62+reg61; T reg76=elem.pos(3)[0]*reg30; T reg77=elem.pos(6)[2]*reg10; T reg78=elem.pos(4)[0]*reg47;
    reg60=reg60-reg69; T reg79=elem.pos(6)[2]*reg70; reg64=reg23+reg64; reg37=reg22+reg37; reg22=elem.pos(6)[1]*reg70;
    reg23=elem.pos(7)[2]*reg70; reg54=reg45+reg54; reg45=elem.pos(7)[1]*reg35; reg79=reg64+reg79; reg75=reg8+reg75;
    reg8=elem.pos(7)[2]*reg35; reg64=reg49+reg76; T reg80=elem.pos(4)[0]*reg7; T reg81=elem.pos(7)[2]*reg30; reg77=reg72+reg77;
    reg72=elem.pos(7)[1]*reg70; reg22=reg37+reg22; reg37=reg57*reg66; reg74=reg71+reg74; reg71=elem.pos(7)[1]*reg30;
    reg60=reg60-reg78; T reg82=elem.pos(5)[0]*reg47; T reg83=reg27*reg24; reg68=reg68-reg73; T reg84=elem.pos(5)[0]*reg55;
    reg66=reg27*reg66; reg37=reg83+reg37; reg8=reg75+reg8; reg22=reg22-reg72; reg80=reg80-reg64;
    reg75=elem.pos(5)[0]*reg3; reg81=reg77+reg81; reg77=elem.pos(6)[0]*reg55; reg68=reg68-reg84; reg24=reg57*reg24;
    reg71=reg74+reg71; reg74=elem.pos(6)[0]*reg70; reg82=reg60+reg82; reg79=reg79-reg23; reg60=reg57*reg17;
    reg45=reg54+reg45; reg54=reg45*reg81; T reg85=reg22*reg81; T reg86=reg8*reg71; T reg87=elem.pos(7)[0]*reg70;
    reg77=reg68+reg77; reg68=elem.pos(6)[0]*reg10; reg75=reg80+reg75; reg74=reg82+reg74; reg80=reg27*reg83;
    reg82=elem.pos(7)[0]*reg35; reg17=reg27*reg17; T reg88=reg57*reg66; reg60=reg67+reg60; T reg89=reg79*reg71;
    T reg90=reg27*reg24; T reg91=reg57*reg37; reg50=reg57*reg50; T reg92=reg27*reg67; T reg93=reg27*reg50;
    reg24=reg57*reg24; reg83=reg57*reg83; reg74=reg74-reg87; reg86=reg54-reg86; reg54=elem.pos(7)[0]*reg30;
    reg68=reg75+reg68; reg75=reg79*reg45; reg82=reg77+reg82; reg77=reg22*reg8; reg91=reg90+reg91;
    T reg94=reg57*reg17; reg89=reg85-reg89; reg88=reg80+reg88; reg85=reg57*reg60; reg83=reg24+reg83;
    reg50=reg57*reg50; reg66=reg27*reg66; reg67=reg57*reg67; reg85=reg93+reg85; T reg95=reg74*reg86;
    reg75=reg77-reg75; reg77=reg82*reg89; reg88=reg88+reg91; reg37=reg27*reg37; reg94=reg92+reg94;
    reg54=reg68+reg54; reg68=reg79*reg54; reg80=reg80-reg24; reg94=reg85+reg94; T reg96=reg74*reg81;
    reg66=reg66-reg91; reg91=reg37+reg91; reg37=reg54*reg75; T reg97=reg27*reg83; reg77=reg95-reg77;
    reg95=reg57*reg88; reg17=reg27*reg17; reg90=reg24+reg90; reg81=reg82*reg81; reg24=reg8*reg54;
    reg92=reg92-reg50; reg60=reg27*reg60; reg67=reg50+reg67; T reg98=reg57*reg83; T reg99=reg57*reg91;
    reg60=reg60+reg85; reg79=reg79*reg82; reg8=reg74*reg8; T reg100=reg27*reg66; T reg101=reg27*reg80;
    reg85=reg17-reg85; reg17=reg82*reg71; reg92=reg27*reg92; T reg102=reg57*reg67; T reg103=reg50+reg93;
    reg94=reg57*reg94; T reg104=reg45*reg54; reg67=reg27*reg67; reg24=reg81-reg24; reg71=reg74*reg71;
    reg54=reg22*reg54; reg81=reg27*reg90; reg95=reg97+reg95; reg68=reg96-reg68; reg37=reg77+reg37;
    reg77=reg57*reg90; reg98=reg101-reg98; reg60=reg57*reg60; reg99=reg81+reg99; reg86=reg86/reg37;
    reg24=reg24/reg37; reg81=reg27*reg103; reg102=reg92-reg102; reg103=reg57*reg103; reg95=reg100-reg95;
    reg54=reg71-reg54; reg104=reg17-reg104; reg89=reg89/reg37; reg85=reg27*reg85; reg68=reg68/reg37;
    reg67=reg94+reg67; reg45=reg74*reg45; reg82=reg22*reg82; reg79=reg8-reg79; reg67=reg85-reg67;
    reg8=reg86*reg6; reg103=reg102-reg103; reg79=reg79/reg37; reg75=reg75/reg37; reg17=reg5*reg68;
    reg22=reg5*reg89; reg82=reg45-reg82; reg99=reg95-reg99; reg54=reg54/reg37; reg77=reg98-reg77;
    reg60=reg81+reg60; reg104=reg104/reg37; reg27=reg24*reg6; reg45=reg103*reg99; reg60=reg67-reg60;
    reg57=pow(reg77,2); reg67=reg5*reg54; reg71=reg6*reg104; reg82=reg82/reg37; reg74=reg7*reg79;
    reg81=reg27-reg17; reg85=reg7*reg75; reg92=reg22-reg8; reg94=reg47*reg24; reg95=reg35*reg68;
    reg60=reg60/reg77; reg96=reg35*reg89; reg92=reg92-reg85; reg97=reg47*reg86; reg98=reg4*reg68;
    reg100=reg70*reg86; reg101=reg70*reg24; reg102=reg4*reg89; T reg105=reg7*reg82; T reg106=reg19*reg86;
    T reg107=reg19*reg24; reg45=reg45/reg57; T reg108=reg80*reg99; T reg109=reg55*reg89; T reg110=reg55*reg68;
    T reg111=reg67-reg71; reg81=reg81+reg74; T reg112=0.5*reg92; T reg113=reg10*reg79; T reg114=reg102+reg8;
    T reg115=reg3*reg75; T reg116=reg106+reg22; T reg117=reg98+reg27; T reg118=reg3*reg79; T reg119=reg19*reg104;
    T reg120=reg30*reg75; T reg121=reg98-reg107; T reg122=reg96+reg100; T reg123=reg96-reg97; T reg124=reg94+reg110;
    T reg125=reg95+reg101; T reg126=reg55*reg54; T reg127=reg97+reg109; T reg128=reg94-reg95; T reg129=reg47*reg104;
    T reg130=reg35*reg54; T reg131=reg17+reg107; T reg132=reg30*reg79; reg111=reg111-reg105; T reg133=reg100-reg109;
    T reg134=reg90*reg99; T reg135=reg110-reg101; T reg136=reg70*reg104; reg45=reg60-reg45; reg60=0.5*reg81;
    T reg137=reg10*reg75; T reg138=reg106-reg102; reg66=reg66/reg77; T reg139=reg4*reg54; reg99=reg83*reg99;
    reg108=reg108/reg57; reg91=reg91/reg77; reg131=reg131+reg132; T reg140=reg119+reg67; T reg141=reg30*reg82;
    T reg142=reg129+reg126; reg108=reg66-reg108; reg133=reg137+reg133; reg66=reg130+reg136; reg135=reg135-reg113;
    T reg143=reg136-reg126; reg125=reg125-reg132; T reg144=reg120-reg122; T reg145=reg60*reg45; T reg146=reg10*reg82;
    T reg147=reg119-reg139; T reg148=reg112*reg45; reg88=reg88/reg77; reg121=reg121+reg113; reg127=reg115+reg127;
    reg99=reg99/reg57; T reg149=reg118+reg124; reg57=reg134/reg57; reg123=reg123+reg85; reg128=reg128-reg74;
    reg134=reg118-reg117; T reg150=0.5*reg111; reg114=reg114-reg115; T reg151=reg139+reg71; T reg152=reg3*reg82;
    T reg153=reg130-reg129; T reg154=reg116+reg120; reg138=reg138-reg137; T reg155=reg92*reg108; reg151=reg151-reg152;
    T reg156=0.5*reg149; T reg157=0.5*reg121; T reg158=0.5*reg134; reg99=reg88-reg99; reg147=reg147-reg146;
    reg88=0.5*reg138; T reg159=0.5*reg114; reg143=reg143+reg146; T reg160=0.5*reg133; reg57=reg91-reg57;
    reg148=2*reg148; reg91=reg150*reg45; T reg161=0.5*reg131; reg153=reg153+reg105; T reg162=reg140+reg141;
    T reg163=0.5*reg154; T reg164=0.5*reg123; reg142=reg152+reg142; T reg165=0.5*reg127; T reg166=reg81*reg108;
    T reg167=0.5*reg125; T reg168=0.5*reg144; T reg169=0.5*reg135; reg145=2*reg145; T reg170=reg141-reg66;
    T reg171=0.5*reg128; T reg172=0.5*reg147; T reg173=reg144*reg155; T reg174=0.5*reg143; T reg175=0.5*reg170;
    T reg176=reg135*reg166; T reg177=reg125*reg166; T reg178=reg160*reg148; T reg179=reg128*reg166; T reg180=reg156*reg145;
    T reg181=reg164*reg148; T reg182=reg127*reg155; T reg183=reg167*reg145; T reg184=reg92*reg99; T reg185=0.5*reg151;
    T reg186=reg92*reg155; T reg187=reg163*reg148; T reg188=reg131*reg166; T reg189=reg111*reg108; T reg190=reg81*reg99;
    T reg191=reg165*reg148; T reg192=reg149*reg166; T reg193=reg169*reg145; T reg194=reg133*reg155; reg91=2*reg91;
    T reg195=0.5*reg142; T reg196=0.5*reg162; T reg197=reg81*reg166; T reg198=0.5*reg153; T reg199=reg161*reg145;
    T reg200=reg154*reg155; T reg201=reg114*reg155; T reg202=reg138*reg155; T reg203=reg158*reg145; T reg204=reg88*reg148;
    T reg205=reg157*reg145; T reg206=reg121*reg166; T reg207=reg81*reg57; T reg208=reg168*reg148; T reg209=reg112*reg148;
    reg155=reg123*reg155; T reg210=reg171*reg145; T reg211=reg60*reg145; T reg212=reg158*reg45; T reg213=reg159*reg148;
    reg166=reg134*reg166; T reg214=reg189*reg143; T reg215=reg149*reg184; T reg216=reg160*reg91; T reg217=reg169*reg91;
    T reg218=reg207*reg143; T reg219=reg143*reg184; reg176=reg178+reg176; reg194=reg193+reg194; T reg220=reg174*reg91;
    T reg221=reg165*reg145; T reg222=reg169*reg148; T reg223=reg92*reg190; T reg224=reg133*reg190; reg186=reg211+reg186;
    T reg225=reg135*reg184; T reg226=reg160*reg145; T reg227=reg156*reg148; T reg228=reg161*reg148; T reg229=reg111*reg57;
    T reg230=reg196*reg91; reg200=reg199-reg200; T reg231=reg189*reg147; T reg232=reg114*reg108; T reg233=reg157*reg91;
    T reg234=reg207*reg147; T reg235=reg88*reg91; T reg236=reg147*reg184; T reg237=reg112*reg91; T reg238=reg159*reg45;
    T reg239=reg151*reg189; reg206=reg204+reg206; T reg240=reg121*reg184; reg192=reg191-reg192; T reg241=reg88*reg145;
    T reg242=reg138*reg190; T reg243=reg157*reg148; T reg244=reg158*reg91; T reg245=reg151*reg207; T reg246=reg159*reg91;
    T reg247=reg151*reg184; T reg248=reg112*reg145; reg197=reg209+reg197; T reg249=reg60*reg148; T reg250=reg142*reg189;
    T reg251=reg156*reg91; T reg252=reg142*reg207; T reg253=reg165*reg91; T reg254=reg142*reg184; T reg255=reg127*reg190;
    reg212=2*reg212; T reg256=reg195*reg91; reg182=reg182-reg180; T reg257=reg172*reg91; T reg258=reg153*reg189;
    T reg259=reg171*reg91; T reg260=reg153*reg207; T reg261=reg164*reg91; T reg262=reg185*reg45; T reg263=reg153*reg184;
    reg202=reg205+reg202; T reg264=reg150*reg91; reg179=reg181+reg179; T reg265=reg128*reg184; T reg266=reg164*reg145;
    T reg267=reg111*reg184; T reg268=reg123*reg190; T reg269=reg171*reg148; T reg270=reg198*reg91; reg155=reg210+reg155;
    T reg271=reg162*reg189; T reg272=reg162*reg207; T reg273=reg161*reg91; T reg274=reg81*reg184; T reg275=reg163*reg91;
    T reg276=reg162*reg184; reg188=reg188-reg187; T reg277=reg163*reg145; T reg278=reg131*reg184; T reg279=reg154*reg190;
    T reg280=reg158*reg148; T reg281=reg114*reg190; reg190=reg144*reg190; T reg282=reg167*reg148; T reg283=reg185*reg91;
    T reg284=reg168*reg145; reg201=reg203+reg201; T reg285=reg125*reg184; T reg286=reg207*reg170; reg177=reg208+reg177;
    T reg287=reg167*reg91; T reg288=reg189*reg111; T reg289=reg175*reg91; reg173=reg183+reg173; reg189=reg189*reg170;
    reg166=reg213+reg166; T reg290=reg170*reg184; reg207=reg207*reg111; reg184=reg134*reg184; T reg291=reg159*reg145;
    T reg292=reg60*reg91; reg91=reg168*reg91; reg238=2*reg238; T reg293=reg134*reg108; reg249=reg223+reg249;
    reg242=reg243+reg242; reg233=reg234+reg233; reg207=reg292+reg207; reg231=reg204+reg231; reg202=reg202+reg257;
    reg186=reg186+reg264; reg215=reg221-reg215; reg204=reg123*reg232; reg192=reg192+reg256; reg155=reg155+reg270;
    reg221=reg171*reg212; reg223=reg150*reg148; reg244=reg245+reg244; reg234=reg198*reg145; reg243=reg185*reg145;
    reg245=reg195*reg145; reg292=reg149*reg229; reg287=reg286+reg287; reg239=reg213+reg239; reg268=reg269+reg268;
    reg213=reg198*reg148; reg269=reg123*reg229; reg248=reg274+reg248; reg274=reg128*reg229; reg286=reg185*reg148;
    reg177=reg289+reg177; T reg294=reg114*reg229; reg256=reg182+reg256; reg182=reg114*reg99; T reg295=reg125*reg229;
    T reg296=reg134*reg229; reg240=reg241+reg240; reg184=reg291+reg184; reg241=reg172*reg145; reg206=reg257+reg206;
    reg258=reg181+reg258; reg166=reg166+reg283; reg259=reg260+reg259; reg181=reg121*reg229; reg261=reg263+reg261;
    reg197=reg264+reg197; reg257=reg138*reg229; reg265=reg266+reg265; reg260=reg156*reg212; reg263=reg127*reg232;
    reg264=reg172*reg148; reg235=reg236+reg235; reg236=reg157*reg212; reg266=reg195*reg148; reg291=reg127*reg229;
    T reg297=reg138*reg232; reg237=reg267+reg237; reg267=reg92*reg232; reg91=reg290+reg91; reg285=reg284+reg285;
    reg179=reg270+reg179; reg227=reg255-reg227; reg255=reg154*reg229; reg270=reg169*reg212; reg284=reg133*reg232;
    reg290=reg196*reg148; reg262=2*reg262; reg281=reg280+reg281; reg280=reg175*reg145; T reg298=reg81*reg229;
    T reg299=reg150*reg145; reg190=reg282+reg190; reg225=reg226+reg225; reg271=reg187+reg271; reg283=reg201+reg283;
    reg289=reg173+reg289; reg176=reg220+reg176; reg173=reg135*reg229; reg272=reg273-reg272; reg187=reg161*reg212;
    reg201=reg154*reg232; reg275=reg276+reg275; reg277=reg278-reg277; reg191=reg250+reg191; reg216=reg219+reg216;
    reg251=reg252-reg251; reg217=reg218+reg217; reg214=reg178+reg214; reg178=reg131*reg229; reg253=reg254+reg253;
    reg188=reg188-reg230; reg189=reg208+reg189; reg208=reg60*reg212; reg246=reg247+reg246; reg220=reg194+reg220;
    reg230=reg200-reg230; reg194=reg174*reg145; reg200=reg144*reg232; reg218=reg167*reg212; reg224=reg222+reg224;
    reg209=reg288+reg209; reg219=reg92*reg229; reg232=reg114*reg232; reg222=reg133*reg229; reg229=reg144*reg229;
    reg226=reg174*reg148; reg247=reg158*reg212; reg145=reg196*reg145; reg279=reg228-reg279; reg148=reg175*reg148;
    reg228=reg131*reg182; reg250=reg128*reg293; reg252=reg164*reg238; reg279=reg37*reg279; reg204=reg221+reg204;
    reg254=reg163*reg212; reg273=reg121*reg293; reg276=reg128*reg182; reg277=reg37*reg277; reg278=reg131*reg293;
    reg282=reg198*reg262; reg288=reg164*reg212; T reg300=reg163*reg262; reg189=reg183+reg189; reg188=reg37*reg188;
    reg183=reg168*reg238; T reg301=reg170*reg182; T reg302=reg125*reg293; reg181=reg241+reg181; reg241=reg134*reg99;
    reg298=reg299+reg298; reg299=reg168*reg262; reg166=reg37*reg166; reg145=reg178-reg145; reg178=reg88*reg212;
    reg207=reg37*reg207; T reg303=reg121*reg182; reg267=reg267+reg208; T reg304=reg88*reg238; T reg305=reg112*reg238;
    T reg306=reg151*reg108; reg290=reg255+reg290; reg211=reg209+reg211; reg209=reg162*reg182; reg287=reg37*reg287;
    reg255=reg134*reg57; T reg307=reg88*reg262; reg235=reg37*reg235; reg233=reg37*reg233; reg283=reg37*reg283;
    reg265=reg37*reg265; reg271=reg199-reg271; reg213=reg269+reg213; reg91=reg37*reg91; reg201=reg187-reg201;
    reg230=reg37*reg230; reg249=reg37*reg249; reg199=reg111*reg182; reg268=reg37*reg268; reg272=reg37*reg272;
    reg231=reg205+reg231; reg205=reg196*reg262; reg179=reg37*reg179; reg275=reg37*reg275; reg243=reg296+reg243;
    reg237=reg37*reg237; reg269=reg147*reg182; reg274=reg234+reg274; reg234=reg163*reg238; reg155=reg37*reg155;
    reg296=reg150*reg262; reg226=reg222+reg226; reg148=reg229+reg148; reg224=reg37*reg224; reg220=reg37*reg220;
    reg222=reg134*reg293; reg229=reg159*reg238; reg200=reg218+reg200; T reg308=reg175*reg262; reg246=reg37*reg246;
    T reg309=reg112*reg212; T reg310=reg134*reg182; T reg311=reg149*reg293; T reg312=reg165*reg238; reg244=reg37*reg244;
    T reg313=reg149*reg182; T reg314=reg165*reg212; T reg315=reg159*reg212; reg239=reg203+reg239; reg248=reg37*reg248;
    reg292=reg245-reg292; reg186=reg37*reg186; reg203=reg151*reg182; reg192=reg37*reg192; reg245=reg159*reg262;
    reg215=reg37*reg215; T reg316=reg143*reg182; T reg317=reg160*reg262; reg253=reg37*reg253; reg214=reg193+reg214;
    reg232=reg247+reg232; reg217=reg37*reg217; reg251=reg37*reg251; reg216=reg37*reg216; reg193=reg185*reg262;
    reg180=reg191-reg180; reg191=reg135*reg293; T reg318=reg160*reg238; T reg319=reg142*reg182; T reg320=reg165*reg262;
    T reg321=reg135*reg182; T reg322=reg160*reg212; reg173=reg194+reg173; reg176=reg37*reg176; reg289=reg37*reg289;
    reg194=reg81*reg182; reg225=reg37*reg225; reg286=reg294+reg286; reg294=reg174*reg262; reg284=reg270+reg284;
    reg190=reg37*reg190; reg266=reg291+reg266; reg297=reg236+reg297; reg197=reg37*reg197; reg291=reg172*reg262;
    reg227=reg37*reg227; reg285=reg37*reg285; T reg323=reg157*reg45; reg256=reg37*reg256; reg177=reg37*reg177;
    reg295=reg280+reg295; reg281=reg281*reg37; reg223=reg219+reg223; reg240=reg37*reg240; reg184=reg37*reg184;
    reg219=reg164*reg262; reg280=reg153*reg182; reg258=reg210+reg258; reg293=reg81*reg293; reg210=reg168*reg212;
    reg206=reg37*reg206; reg259=reg37*reg259; reg182=reg125*reg182; reg261=reg37*reg261; reg202=reg37*reg202;
    T reg324=reg112*reg262; reg242=reg37*reg242; reg263=reg263-reg260; T reg325=reg195*reg262; reg264=reg257+reg264;
    reg180=reg37*reg180; reg257=reg255*reg170; T reg326=reg154*reg241; T reg327=reg161*reg238; reg202=ponderation*reg202;
    reg201=reg201-reg205; reg303=reg178+reg303; reg249=ponderation*reg249; reg235=ponderation*reg235; reg240=ponderation*reg240;
    reg239=reg37*reg239; reg320=reg319+reg320; reg178=reg156*reg238; reg184=ponderation*reg184; reg267=reg267+reg296;
    reg251=ponderation*reg251; reg233=ponderation*reg233; reg181=reg37*reg181; reg277=ponderation*reg277; reg197=ponderation*reg197;
    reg299=reg301+reg299; reg301=reg151*reg255; reg245=reg203+reg245; reg253=ponderation*reg253; reg203=reg151*reg306;
    reg206=ponderation*reg206; reg231=reg37*reg231; reg298=reg37*reg298; reg319=reg171*reg262; T reg328=reg151*reg57;
    reg246=ponderation*reg246; reg264=reg37*reg264; T reg329=reg306*reg147; reg243=reg37*reg243; reg297=reg297+reg291;
    T reg330=reg156*reg262; T reg331=reg255*reg147; reg230=ponderation*reg230; T reg332=reg114*reg241; T reg333=reg306*reg170;
    T reg334=reg158*reg238; T reg335=reg157*reg238; reg244=ponderation*reg244; reg286=reg286*reg37; T reg336=reg167*reg262;
    reg279=ponderation*reg279; reg273=reg304+reg273; reg281=ponderation*reg281; T reg337=reg88*reg45; reg290=reg37*reg290;
    reg242=ponderation*reg242; reg307=reg269+reg307; reg283=ponderation*reg283; reg166=ponderation*reg166; reg232=reg232+reg193;
    reg269=reg138*reg241; T reg338=reg142*reg255; T reg339=reg127*reg241; reg263=reg263+reg325; T reg340=reg60*reg238;
    reg323=2*reg323; reg266=reg37*reg266; T reg341=reg158*reg262; reg227=ponderation*reg227; reg285=ponderation*reg285;
    reg256=ponderation*reg256; reg223=reg37*reg223; reg177=ponderation*reg177; T reg342=reg153*reg306; reg186=ponderation*reg186;
    reg295=reg37*reg295; T reg343=reg172*reg45; T reg344=reg153*reg255; reg219=reg280+reg219; reg258=reg37*reg258;
    reg259=ponderation*reg259; reg182=reg210+reg182; reg261=ponderation*reg261; reg302=reg183+reg302; reg250=reg252+reg250;
    reg276=reg288+reg276; reg210=reg60*reg262; reg274=reg37*reg274; reg179=ponderation*reg179; reg280=reg306*reg111;
    reg288=reg255*reg111; reg265=ponderation*reg265; T reg345=reg157*reg262; reg211=reg37*reg211; T reg346=reg255*reg143;
    reg316=reg317+reg316; reg214=reg37*reg214; reg217=ponderation*reg217; reg317=reg306*reg143; reg216=ponderation*reg216;
    reg191=reg318+reg191; reg321=reg322+reg321; reg173=reg37*reg173; reg176=ponderation*reg176; reg289=ponderation*reg289;
    reg225=ponderation*reg225; reg322=reg133*reg241; T reg347=reg169*reg238; reg284=reg284+reg294; reg190=ponderation*reg190;
    T reg348=reg144*reg241; reg324=reg199+reg324; reg215=ponderation*reg215; reg199=reg167*reg238; reg192=ponderation*reg192;
    reg292=reg37*reg292; reg293=reg293+reg305; reg200=reg200+reg308; reg313=reg314-reg313; reg311=reg312-reg311;
    reg314=reg142*reg306; reg310=reg315+reg310; reg222=reg229+reg222; reg220=ponderation*reg220; reg148=reg37*reg148;
    reg224=ponderation*reg224; reg226=reg37*reg226; reg204=reg204+reg282; reg278=reg278-reg234; reg213=reg37*reg213;
    reg268=ponderation*reg268; reg315=reg138*reg108; reg287=ponderation*reg287; reg155=ponderation*reg155; T reg349=reg169*reg262;
    reg237=ponderation*reg237; reg275=ponderation*reg275; reg306=reg162*reg306; reg189=reg37*reg189; reg272=ponderation*reg272;
    reg271=reg37*reg271; reg209=reg300+reg209; reg248=ponderation*reg248; reg262=reg161*reg262; reg255=reg162*reg255;
    reg207=ponderation*reg207; reg300=reg123*reg241; reg145=reg37*reg145; reg91=ponderation*reg91; T reg350=reg171*reg238;
    reg194=reg309+reg194; reg241=reg92*reg241; reg254=reg228-reg254; reg188=ponderation*reg188; reg316=reg37*reg316;
    reg251=vectors[0][indices[0]+1]*reg251; reg256=vectors[0][indices[0]+0]*reg256; reg220=vectors[0][indices[0]+0]*reg220; reg245=reg37*reg245; reg314=reg312+reg314;
    reg189=ponderation*reg189; reg224=vectors[0][indices[0]+1]*reg224; reg317=reg318+reg317; reg225=vectors[0][indices[0]+0]*reg225; reg176=vectors[0][indices[0]+1]*reg176;
    reg216=vectors[0][indices[0]+0]*reg216; reg145=ponderation*reg145; reg217=vectors[0][indices[0]+1]*reg217; reg253=vectors[0][indices[0]+0]*reg253; reg228=reg149*reg328;
    reg192=vectors[0][indices[0]+1]*reg192; reg309=reg195*reg212; reg311=reg325+reg311; reg290=ponderation*reg290; reg313=reg37*reg313;
    reg346=reg349+reg346; reg215=vectors[0][indices[0]+0]*reg215; reg271=ponderation*reg271; reg292=ponderation*reg292; reg214=ponderation*reg214;
    reg239=ponderation*reg239; reg227=vectors[0][indices[0]+1]*reg227; reg209=reg37*reg209; reg200=reg37*reg200; reg312=reg174*reg238;
    reg318=reg169*reg323; reg325=reg133*reg315; reg349=reg154*reg315; reg205=reg278-reg205; reg191=reg294+reg191;
    reg285=vectors[0][indices[0]+0]*reg285; reg177=vectors[0][indices[0]+1]*reg177; reg348=reg199+reg348; reg91=vectors[0][indices[0]+0]*reg91; reg287=vectors[0][indices[0]+1]*reg287;
    reg299=reg37*reg299; reg330=reg338-reg330; reg320=reg37*reg320; reg173=ponderation*reg173; reg180=ponderation*reg180;
    reg254=reg37*reg254; reg321=reg37*reg321; reg199=reg174*reg212; reg278=reg135*reg328; reg294=reg114*reg315;
    reg148=ponderation*reg148; reg201=reg37*reg201; reg338=reg196*reg212; T reg351=reg158*reg323; T reg352=reg185*reg238;
    T reg353=reg114*reg328; T reg354=reg131*reg328; reg289=vectors[0][indices[0]+0]*reg289; reg226=ponderation*reg226; reg326=reg327-reg326;
    reg327=reg154*reg328; reg190=vectors[0][indices[0]+1]*reg190; reg284=reg37*reg284; T reg355=reg196*reg238; T reg356=reg161*reg323;
    T reg357=reg133*reg328; T reg358=reg125*reg328; reg181=ponderation*reg181; reg302=reg308+reg302; reg308=reg198*reg212;
    reg213=ponderation*reg213; reg182=reg37*reg182; reg281=vectors[0][indices[0]+1]*reg281; reg307=reg37*reg307; reg295=ponderation*reg295;
    reg283=reg283*vectors[0][indices[0]+0]; reg258=ponderation*reg258; reg219=reg37*reg219; reg331=reg345+reg331; reg207=vectors[0][indices[0]+1]*reg207;
    reg344=reg319+reg344; reg329=reg304+reg329; reg240=vectors[0][indices[0]+0]*reg240; reg206=vectors[0][indices[0]+1]*reg206; reg235=vectors[0][indices[0]+0]*reg235;
    reg233=vectors[0][indices[0]+1]*reg233; reg246=vectors[0][indices[0]+0]*reg246; reg244=vectors[0][indices[0]+1]*reg244; reg304=reg171*reg323; reg319=reg123*reg315;
    reg345=reg198*reg238; T reg359=reg123*reg328; reg166=vectors[0][indices[0]+1]*reg166; reg202=vectors[0][indices[0]+0]*reg202; reg242=vectors[0][indices[0]+1]*reg242;
    reg184=reg184*vectors[0][indices[0]+0]; T reg360=reg172*reg212; T reg361=reg121*reg328; reg273=reg291+reg273; reg274=ponderation*reg274;
    reg204=reg37*reg204; reg231=ponderation*reg231; reg276=reg37*reg276; reg303=reg37*reg303; reg250=reg282+reg250;
    reg282=reg128*reg328; reg291=reg175*reg212; reg255=reg262-reg255; reg178=reg339-reg178; reg262=reg127*reg328;
    reg277=vectors[0][indices[0]+0]*reg277; reg339=reg195*reg238; T reg362=reg127*reg315; T reg363=reg156*reg323; reg188=vectors[0][indices[0]+1]*reg188;
    T reg364=reg144*reg328; T reg365=vectors[0][indices[0]+0]*reg275; reg257=reg336+reg257; reg272=vectors[0][indices[0]+1]*reg272; reg155=vectors[0][indices[0]+0]*reg155;
    reg268=vectors[0][indices[0]+1]*reg268; reg265=vectors[0][indices[0]+0]*reg265; reg179=vectors[0][indices[0]+1]*reg179; reg261=vectors[0][indices[0]+0]*reg261; reg259=vectors[0][indices[0]+1]*reg259;
    reg203=reg229+reg203; reg341=reg301+reg341; reg229=reg138*reg315; reg301=reg157*reg323; reg336=reg172*reg238;
    T reg366=reg138*reg328; reg237=vectors[0][indices[0]+0]*reg237; reg342=reg252+reg342; reg197=vectors[0][indices[0]+1]*reg197; reg248=vectors[0][indices[0]+0]*reg248;
    reg297=reg37*reg297; reg306=reg234+reg306; reg234=reg144*reg315; reg230=vectors[0][indices[0]+0]*reg230; reg252=reg167*reg323;
    reg249=vectors[0][indices[0]+1]*reg249; reg264=ponderation*reg264; reg279=vectors[0][indices[0]+1]*reg279; reg186=vectors[0][indices[0]+0]*reg186; reg266=ponderation*reg266;
    T reg367=reg175*reg238; reg333=reg183+reg333; reg263=reg37*reg263; reg183=reg185*reg212; T reg368=reg134*reg328;
    reg222=reg193+reg222; reg315=reg92*reg315; reg310=reg37*reg310; reg232=reg232*reg37; reg300=reg350+reg300;
    reg243=ponderation*reg243; reg241=reg340+reg241; reg269=reg335+reg269; reg193=reg60*reg323; reg337=2*reg337;
    reg335=reg92*reg328; reg322=reg347+reg322; reg286=ponderation*reg286; reg340=reg121*reg108; reg324=reg37*reg324;
    reg328=reg81*reg328; reg296=reg293+reg296; reg194=reg37*reg194; reg223=ponderation*reg223; reg298=ponderation*reg298;
    reg305=reg280+reg305; reg211=ponderation*reg211; reg332=reg334+reg332; reg210=reg288+reg210; reg280=reg138*reg99;
    reg267=reg37*reg267; reg343=2*reg343; reg238=reg150*reg238; reg212=reg150*reg212; reg211=vectors[0][indices[0]+2]*reg211;
    reg341=reg37*reg341; reg245=ponderation*reg245; reg207=reg237+reg207; reg226=vectors[0][indices[0]+2]*reg226; reg224=reg220+reg224;
    reg228=reg309-reg228; reg220=reg198*reg343; reg319=reg304+reg319; reg345=reg359+reg345; reg311=reg37*reg311;
    reg267=ponderation*reg267; reg313=ponderation*reg313; reg237=reg112*reg323; reg288=reg128*reg340; reg335=reg238+reg335;
    reg206=reg240+reg206; reg238=reg159*reg343; reg240=reg151*reg280; reg181=vectors[0][indices[0]+2]*reg181; reg203=reg247+reg203;
    reg247=reg147*reg280; reg293=reg88*reg343; reg200=ponderation*reg200; reg309=reg81*reg340; reg348=reg37*reg348;
    reg227=reg256+reg227; reg367=reg364+reg367; reg266=vectors[0][indices[0]+2]*reg266; reg231=vectors[0][indices[0]+2]*reg231; reg234=reg252+reg234;
    reg256=reg175*reg343; reg334=reg121*reg57; reg347=reg147*reg108; reg241=reg37*reg241; reg350=reg195*reg343;
    reg362=reg362-reg363; reg324=ponderation*reg324; reg258=vectors[0][indices[0]+2]*reg258; reg259=reg261+reg259; reg300=reg37*reg300;
    reg307=ponderation*reg307; reg331=reg37*reg331; reg233=reg235+reg233; reg204=ponderation*reg204; reg235=reg134*reg340;
    reg261=reg159*reg337; reg329=reg236+reg329; reg236=reg134*reg280; reg359=reg159*reg323; reg183=reg368+reg183;
    reg222=reg37*reg222; reg310=ponderation*reg310; reg364=reg112*reg343; reg177=reg285+reg177; reg295=vectors[0][indices[0]+2]*reg295;
    reg303=ponderation*reg303; reg321=ponderation*reg321; reg191=reg37*reg191; reg273=reg37*reg273; reg199=reg278+reg199;
    reg338=reg354-reg338; reg278=reg160*reg323; reg285=reg135*reg280; reg360=reg361+reg360; reg354=reg160*reg337;
    reg271=vectors[0][indices[0]+2]*reg271; reg365=reg272-reg365; reg272=reg135*reg340; reg361=reg88*reg323; reg368=reg121*reg280;
    T reg369=reg88*reg337; T reg370=reg121*reg340; reg173=vectors[0][indices[0]+2]*reg173; T reg371=reg131*reg340; T reg372=reg163*reg337;
    reg176=reg225+reg176; reg225=reg174*reg343; reg325=reg318+reg325; reg312=reg357+reg312; reg322=reg37*reg322;
    reg357=reg163*reg323; reg284=ponderation*reg284; reg315=reg193+reg315; T reg373=reg131*reg280; T reg374=reg161*reg45;
    reg239=vectors[0][indices[0]+2]*reg239; reg244=reg246+reg244; reg276=ponderation*reg276; reg242=reg202+reg242; reg264=vectors[0][indices[0]+2]*reg264;
    reg260=reg314-reg260; reg332=reg332*reg37; reg202=reg128*reg280; reg286=reg286*vectors[0][indices[0]+2]; reg281=reg283+reg281;
    reg316=ponderation*reg316; reg346=reg37*reg346; reg246=reg149*reg340; reg190=reg289+reg190; reg148=vectors[0][indices[0]+2]*reg148;
    reg283=reg165*reg337; reg317=reg270+reg317; reg270=reg143*reg280; reg289=reg160*reg343; reg314=reg149*reg280;
    T reg375=reg165*reg323; T reg376=reg164*reg337; T reg377=reg172*reg343; reg229=reg301+reg229; reg336=reg366+reg336;
    reg205=reg37*reg205; reg269=reg37*reg269; reg250=reg37*reg250; reg297=ponderation*reg297; reg254=ponderation*reg254;
    reg308=reg282+reg308; reg217=reg216+reg217; reg216=reg164*reg323; reg268=reg155+reg268; reg213=vectors[0][indices[0]+2]*reg213;
    reg214=vectors[0][indices[0]+2]*reg214; reg155=reg165*reg343; reg282=reg142*reg280; reg243=vectors[0][indices[0]+2]*reg243; reg166=reg184+reg166;
    reg184=reg112*reg337; reg208=reg305+reg208; reg305=reg185*reg343; reg333=reg218+reg333; reg294=reg351+reg294;
    reg298=vectors[0][indices[0]+2]*reg298; reg344=reg37*reg344; reg197=reg248+reg197; reg218=reg168*reg323; reg219=ponderation*reg219;
    reg248=reg111*reg280; reg223=vectors[0][indices[0]+2]*reg223; reg201=ponderation*reg201; reg249=reg186+reg249; reg352=reg353+reg352;
    reg180=vectors[0][indices[0]+2]*reg180; reg209=ponderation*reg209; reg189=vectors[0][indices[0]+2]*reg189; reg182=ponderation*reg182; reg257=reg37*reg257;
    reg291=reg358+reg291; reg186=reg121*reg99; reg251=reg253+reg251; reg326=reg37*reg326; reg299=ponderation*reg299;
    reg355=reg327+reg355; reg253=reg150*reg343; reg212=reg328+reg212; reg287=reg91+reg287; reg255=reg37*reg255;
    reg302=reg37*reg302; reg91=reg153*reg280; reg179=reg265+reg179; reg330=reg37*reg330; reg265=reg164*reg343;
    reg178=reg37*reg178; reg327=vectors[0][indices[0]+2]*reg290; reg328=reg168*reg337; reg340=reg125*reg340; reg296=reg37*reg296;
    reg194=ponderation*reg194; reg349=reg356-reg349; reg188=reg277+reg188; reg339=reg262+reg339; reg262=reg196*reg343;
    reg263=ponderation*reg263; reg274=vectors[0][indices[0]+2]*reg274; reg277=reg162*reg280; reg192=reg215+reg192; reg292=vectors[0][indices[0]+2]*reg292;
    reg215=reg163*reg343; reg279=reg230+reg279; reg320=ponderation*reg320; reg210=reg37*reg210; reg230=reg81*reg280;
    reg353=reg125*reg280; reg306=reg187-reg306; reg342=reg221+reg342; reg187=reg168*reg343; reg280=reg170*reg280;
    reg145=vectors[0][indices[0]+2]*reg145; reg232=ponderation*reg232; reg214=reg217+reg214; reg217=reg142*reg334; reg310=vectors[0][indices[1]+0]*reg310;
    reg221=reg156*reg343; reg358=reg162*reg347; reg213=reg268+reg213; reg355=reg37*reg355; reg268=reg143*reg334;
    reg314=reg375-reg314; reg289=reg270+reg289; reg148=reg190+reg148; reg317=reg37*reg317; reg340=reg328+reg340;
    reg241=ponderation*reg241; reg346=ponderation*reg346; reg313=vectors[0][indices[1]+0]*reg313; reg246=reg283-reg246; reg215=reg277+reg215;
    reg230=reg237+reg230; reg286=reg281+reg286; reg232=reg232*vectors[0][indices[1]+0]; reg202=reg216+reg202; reg330=ponderation*reg330;
    reg292=reg192+reg292; reg190=reg161*reg343; reg192=reg162*reg334; reg243=reg166+reg243; reg260=reg37*reg260;
    reg326=ponderation*reg326; reg155=reg282+reg155; reg316=vectors[0][indices[1]+0]*reg316; reg285=reg278+reg285; reg199=reg37*reg199;
    reg273=ponderation*reg273; reg191=ponderation*reg191; reg333=reg37*reg333; reg344=ponderation*reg344; reg297=vectors[0][indices[1]+0]*reg297;
    reg264=reg242+reg264; reg187=reg280+reg187; reg342=reg37*reg342; reg166=reg170*reg334; reg239=reg244+reg239;
    reg245=vectors[0][indices[1]+0]*reg245; reg338=reg37*reg338; reg216=reg167*reg343; reg237=reg153*reg347; reg242=reg170*reg347;
    reg322=ponderation*reg322; reg244=reg171*reg343; reg312=reg37*reg312; reg270=reg153*reg334; reg325=reg325+reg225;
    reg277=reg169*reg337; reg265=reg91+reg265; reg173=reg176+reg173; reg321=vectors[0][indices[1]+0]*reg321; reg357=reg373-reg357;
    reg91=reg133*reg186; reg176=reg142*reg347; reg308=reg37*reg308; reg250=ponderation*reg250; reg210=ponderation*reg210;
    reg208=reg37*reg208; reg335=reg37*reg335; reg349=reg349-reg262; reg269=ponderation*reg269; reg296=ponderation*reg296;
    reg278=reg154*reg108; reg336=reg37*reg336; reg205=ponderation*reg205; reg280=reg161*reg337; reg281=reg154*reg186;
    reg229=reg229+reg377; reg282=reg111*reg347; reg366=reg157*reg337; reg373=reg138*reg186; reg370=reg369+reg370;
    reg375=vectors[0][indices[1]+0]*reg209; reg368=reg361+reg368; reg365=reg271+reg365; reg360=reg37*reg360; reg272=reg354+reg272;
    reg257=ponderation*reg257; reg189=reg287+reg189; reg299=vectors[0][indices[1]+0]*reg299; reg271=reg111*reg334; reg332=ponderation*reg332;
    reg274=reg179+reg274; reg276=vectors[0][indices[1]+0]*reg276; reg248=reg364+reg248; reg222=ponderation*reg222; reg309=reg309+reg184;
    reg183=reg37*reg183; reg255=ponderation*reg255; reg236=reg359+reg236; reg329=reg37*reg329; reg179=reg114*reg186;
    reg287=reg158*reg337; reg235=reg261+reg235; reg359=reg196*reg45; reg331=ponderation*reg331; reg254=vectors[0][indices[1]+0]*reg254;
    reg294=reg294+reg305; reg300=ponderation*reg300; reg204=vectors[0][indices[1]+0]*reg204; reg145=reg188+reg145; reg303=vectors[0][indices[1]+0]*reg303;
    reg267=vectors[0][indices[1]+0]*reg267; reg258=reg259+reg258; reg181=reg206+reg181; reg223=reg249+reg223; reg339=reg37*reg339;
    reg307=vectors[0][indices[1]+0]*reg307; reg371=reg371-reg372; reg178=ponderation*reg178; reg362=reg362+reg350; reg188=reg127*reg186;
    reg206=reg156*reg337; reg263=vectors[0][indices[1]+0]*reg263; reg249=reg144*reg186; reg259=reg167*reg337; reg231=reg233+reg231;
    reg266=reg227+reg266; reg234=reg234+reg256; reg320=vectors[0][indices[1]+0]*reg320; reg194=vectors[0][indices[1]+0]*reg194; reg298=reg197+reg298;
    reg367=reg37*reg367; reg197=reg147*reg347; reg348=ponderation*reg348; reg180=reg251+reg180; reg227=reg157*reg343;
    reg233=reg147*reg334; reg352=reg37*reg352; reg293=reg247+reg293; reg182=vectors[0][indices[1]+0]*reg182; reg295=reg177+reg295;
    reg177=reg60*reg343; reg228=reg37*reg228; reg284=vectors[0][indices[1]+0]*reg284; reg247=reg147*reg57; reg374=2*reg374;
    reg288=reg376+reg288; reg302=ponderation*reg302; reg251=reg163*reg45; reg361=reg171*reg337; reg364=reg123*reg186;
    reg219=vectors[0][indices[1]+0]*reg219; T reg378=reg60*reg337; T reg379=reg151*reg347; reg291=reg37*reg291; reg226=reg224+reg226;
    reg315=reg315+reg253; reg324=vectors[0][indices[1]+0]*reg324; reg186=reg92*reg186; reg306=reg37*reg306; reg224=reg169*reg343;
    reg200=vectors[0][indices[1]+0]*reg200; reg341=ponderation*reg341; reg211=reg207+reg211; reg311=ponderation*reg311; reg203=reg37*reg203;
    reg201=vectors[0][indices[1]+0]*reg201; reg319=reg319+reg220; reg345=reg37*reg345; reg327=reg279-reg327; reg347=reg143*reg347;
    reg353=reg218+reg353; reg238=reg240+reg238; reg212=reg37*reg212; reg334=reg151*reg334; reg343=reg158*reg343;
    reg330=vectors[0][indices[1]+1]*reg330; reg263=reg266+reg263; reg228=ponderation*reg228; reg313=reg292+reg313; reg207=reg131*reg108;
    reg186=reg378+reg186; reg320=reg180+reg320; reg197=reg369+reg197; reg339=ponderation*reg339; reg191=vectors[0][indices[1]+1]*reg191;
    reg321=reg173+reg321; reg311=vectors[0][indices[1]+1]*reg311; reg322=vectors[0][indices[1]+1]*reg322; reg284=reg226+reg284; reg362=reg37*reg362;
    reg265=reg37*reg265; reg325=reg37*reg325; reg173=reg60*reg374; reg314=reg37*reg314; reg180=reg127*reg247;
    reg312=ponderation*reg312; reg218=reg195*reg337; reg226=reg278*reg127; reg240=reg156*reg374; reg244=reg270+reg244;
    reg266=reg198*reg323; reg206=reg188-reg206; reg342=ponderation*reg342; reg178=vectors[0][indices[1]+1]*reg178; reg237=reg376+reg237;
    reg338=ponderation*reg338; reg327=reg201+reg327; reg188=reg150*reg323; reg370=reg377+reg370; reg260=ponderation*reg260;
    reg201=reg150*reg337; reg270=reg121*reg247; reg279=reg172*reg323; reg349=reg37*reg349; reg205=vectors[0][indices[1]+1]*reg205;
    reg292=reg128*reg247; reg155=reg37*reg155; reg254=reg145+reg254; reg288=reg220+reg288; reg145=reg123*reg278;
    reg273=vectors[0][indices[1]+1]*reg273; reg303=reg181+reg303; reg308=ponderation*reg308; reg176=reg283+reg176; reg355=ponderation*reg355;
    reg221=reg217-reg221; reg297=reg264+reg297; reg269=vectors[0][indices[1]+1]*reg269; reg227=reg233+reg227; reg230=reg37*reg230;
    reg181=reg161*reg374; reg217=reg196*reg337; reg220=reg154*reg247; reg335=ponderation*reg335; reg293=reg37*reg293;
    reg246=reg350+reg246; reg202=reg37*reg202; reg233=reg195*reg323; reg264=reg149*reg247; reg326=vectors[0][indices[1]+1]*reg326;
    reg360=ponderation*reg360; reg281=reg280-reg281; reg280=reg114*reg278; reg307=reg231+reg307; reg368=reg37*reg368;
    reg331=vectors[0][indices[1]+1]*reg331; reg329=ponderation*reg329; reg238=reg37*reg238; reg203=ponderation*reg203; reg200=reg148+reg200;
    reg148=reg92*reg247; reg348=vectors[0][indices[1]+1]*reg348; reg212=ponderation*reg212; reg231=reg158*reg374; reg204=reg213+reg204;
    reg236=reg37*reg236; reg183=ponderation*reg183; reg300=vectors[0][indices[1]+1]*reg300; reg182=reg295+reg182; reg302=vectors[0][indices[1]+1]*reg302;
    reg213=reg185*reg337; reg283=reg114*reg247; reg367=ponderation*reg367; reg179=reg287+reg179; reg234=reg37*reg234;
    reg249=reg259+reg249; reg259=reg144*reg247; reg316=reg214+reg316; reg346=vectors[0][indices[1]+1]*reg346; reg214=reg171*reg374;
    reg332=vectors[0][indices[1]+1]*reg332; reg232=reg286+reg232; reg286=reg198*reg337; reg287=reg123*reg247; reg317=ponderation*reg317;
    reg289=reg37*reg289; reg224=reg268+reg224; reg347=reg354+reg347; reg364=reg361+reg364; reg319=reg37*reg319;
    reg345=ponderation*reg345; reg210=vectors[0][indices[1]+1]*reg210; reg324=reg211+reg324; reg344=vectors[0][indices[1]+1]*reg344; reg219=reg258+reg219;
    reg379=reg261+reg379; reg343=reg334+reg343; reg251=2*reg251; reg306=ponderation*reg306; reg253=reg309+reg253;
    reg353=reg37*reg353; reg340=reg256+reg340; reg211=reg125*reg247; reg256=reg175*reg323; reg215=reg37*reg215;
    reg192=reg190-reg192; reg358=reg372+reg358; reg250=vectors[0][indices[1]+1]*reg250; reg208=ponderation*reg208; reg190=reg154*reg99;
    reg299=reg189+reg299; reg257=vectors[0][indices[1]+1]*reg257; reg333=ponderation*reg333; reg187=reg37*reg187; reg216=reg166+reg216;
    reg242=reg328+reg242; reg166=reg175*reg337; reg189=reg167*reg374; reg258=reg278*reg92; reg261=reg154*reg278;
    reg296=vectors[0][indices[1]+1]*reg296; reg268=reg185*reg323; reg295=reg134*reg247; reg305=reg235+reg305; reg194=reg298+reg194;
    reg352=ponderation*reg352; reg276=reg274+reg276; reg241=vectors[0][indices[1]+1]*reg241; reg267=reg223+reg267; reg315=reg37*reg315;
    reg294=reg37*reg294; reg248=reg248*reg37; reg223=reg278*reg144; reg235=reg81*reg247; reg291=ponderation*reg291;
    reg177=reg271+reg177; reg271=reg169*reg374; reg375=reg365-reg375; reg274=reg133*reg278; reg298=reg135*reg247;
    reg309=reg174*reg337; reg245=reg239+reg245; reg285=reg37*reg285; reg239=reg133*reg247; reg199=ponderation*reg199;
    reg328=reg174*reg323; reg359=2*reg359; reg262=reg371-reg262; reg310=reg243+reg310; reg341=vectors[0][indices[1]+1]*reg341;
    reg243=reg138*reg247; reg337=reg172*reg337; reg229=reg37*reg229; reg272=reg225+reg272; reg357=reg37*reg357;
    reg225=reg157*reg374; reg91=reg277+reg91; reg184=reg282+reg184; reg373=reg366+reg373; reg323=reg196*reg323;
    reg278=reg138*reg278; reg336=ponderation*reg336; reg255=vectors[0][indices[1]+1]*reg255; reg247=reg131*reg247; reg222=vectors[0][indices[1]+1]*reg222;
    reg315=ponderation*reg315; reg277=reg135*reg190; reg184=reg193+reg184; reg335=vectors[0][indices[1]+2]*reg335; reg241=reg267+reg241;
    reg331=reg307+reg331; reg193=reg190*reg111; reg329=vectors[0][indices[1]+2]*reg329; reg338=vectors[0][indices[1]+2]*reg338; reg341=reg245+reg341;
    reg205=reg254+reg205; reg248=ponderation*reg248; reg294=ponderation*reg294; reg245=reg165*reg251; reg226=reg226+reg240;
    reg166=reg259+reg166; reg254=reg128*reg207; reg218=reg180+reg218; reg223=reg189-reg223; reg180=reg175*reg359;
    reg259=reg164*reg251; reg206=reg37*reg206; reg267=reg81*reg207; reg362=ponderation*reg362; reg345=vectors[0][indices[1]+2]*reg345;
    reg282=reg190*reg121; reg307=reg159*reg251; reg334=reg134*reg207; reg212=vectors[0][indices[1]+2]*reg212; reg296=reg194+reg296;
    reg194=reg190*reg81; reg350=reg159*reg374; reg230=ponderation*reg230; reg268=reg295+reg268; reg183=vectors[0][indices[1]+2]*reg183;
    reg295=reg134*reg190; reg260=vectors[0][indices[1]+2]*reg260; reg330=reg320+reg330; reg305=reg37*reg305; reg320=reg163*reg251;
    reg354=reg131*reg207; reg192=reg37*reg192; reg358=reg356-reg358; reg356=reg162*reg190; reg309=reg239+reg309;
    reg349=ponderation*reg349; reg239=reg163*reg359; reg281=reg37*reg281; reg357=ponderation*reg357; reg91=reg37*reg91;
    reg257=reg299+reg257; reg333=vectors[0][indices[1]+2]*reg333; reg261=reg261+reg181; reg299=reg196*reg359; reg250=reg276+reg250;
    reg308=vectors[0][indices[1]+2]*reg308; reg191=reg321+reg191; reg276=reg164*reg359; reg321=reg153*reg190; reg199=vectors[0][indices[1]+2]*reg199;
    reg187=ponderation*reg187; reg237=reg304+reg237; reg216=reg37*reg216; reg244=reg37*reg244; reg242=reg252+reg242;
    reg265=ponderation*reg265; reg252=reg190*reg170; reg304=reg168*reg359; reg203=vectors[0][indices[1]+2]*reg203; reg361=reg149*reg207;
    reg148=reg201+reg148; reg201=reg163*reg374; reg365=reg190*reg125; reg366=reg131*reg190; reg323=reg247-reg323;
    reg326=reg327+reg326; reg253=reg37*reg253; reg247=vectors[0][indices[1]+2]*reg355; reg228=vectors[0][indices[1]+2]*reg228; reg327=reg171*reg45;
    reg311=reg313+reg311; reg353=ponderation*reg353; reg262=reg37*reg262; reg340=reg37*reg340; reg313=reg174*reg359;
    reg256=reg211+reg256; reg274=reg271-reg274; reg215=ponderation*reg215; reg211=reg168*reg374; reg369=reg112*reg251;
    reg235=reg188+reg235; reg177=reg37*reg177; reg325=ponderation*reg325; reg188=reg125*reg207; reg371=reg168*reg251;
    reg202=ponderation*reg202; reg289=ponderation*reg289; reg372=reg88*reg251; reg224=reg37*reg224; reg312=vectors[0][indices[1]+2]*reg312;
    reg322=reg284+reg322; reg284=reg121*reg207; reg347=reg318+reg347; reg364=reg37*reg364; reg318=reg190*reg143;
    reg376=reg160*reg359; reg319=ponderation*reg319; reg377=reg190*reg149; reg208=vectors[0][indices[1]+2]*reg208; reg210=reg324+reg210;
    reg342=vectors[0][indices[1]+2]*reg342; reg344=reg219+reg344; reg219=reg88*reg374; reg324=reg159*reg359; reg378=reg151*reg190;
    reg279=reg270+reg279; reg379=reg351+reg379; reg270=reg162*reg108; reg351=reg112*reg374; reg343=reg37*reg343;
    reg217=reg220+reg217; reg220=reg160*reg374; reg363=reg176-reg363; reg207=reg135*reg207; reg176=reg131*reg57;
    reg221=reg37*reg221; T reg380=reg160*reg251; T reg381=reg131*reg99; reg155=ponderation*reg155; T reg382=reg142*reg190;
    T reg383=reg165*reg359; reg346=reg316+reg346; reg317=vectors[0][indices[1]+2]*reg317; reg316=reg198*reg359; reg145=reg214-reg145;
    reg186=reg37*reg186; T reg384=reg165*reg374; reg286=reg287+reg286; reg264=reg233-reg264; reg352=vectors[0][indices[1]+2]*reg352;
    reg332=reg232+reg332; reg306=vectors[0][indices[1]+2]*reg306; reg246=reg37*reg246; reg375=reg255+reg375; reg232=reg185*reg359;
    reg314=ponderation*reg314; reg328=reg298+reg328; reg236=ponderation*reg236; reg337=reg243+reg337; reg278=reg225-reg278;
    reg233=reg172*reg359; reg302=reg182+reg302; reg293=ponderation*reg293; reg213=reg283+reg213; reg266=reg292+reg266;
    reg222=reg310+reg222; reg291=vectors[0][indices[1]+2]*reg291; reg339=vectors[0][indices[1]+2]*reg339; reg178=reg263+reg178; reg285=ponderation*reg285;
    reg227=reg37*reg227; reg300=reg204+reg300; reg197=reg301+reg197; reg179=reg37*reg179; reg182=reg190*reg147;
    reg204=reg88*reg359; reg269=reg297+reg269; reg234=ponderation*reg234; reg249=reg37*reg249; reg336=vectors[0][indices[1]+2]*reg336;
    reg243=reg150*reg359; reg272=reg37*reg272; reg238=ponderation*reg238; reg370=reg37*reg370; reg255=reg112*reg359;
    reg229=ponderation*reg229; reg373=reg37*reg373; reg263=reg195*reg359; reg273=reg303+reg273; reg348=reg200+reg348;
    reg190=reg128*reg190; reg360=vectors[0][indices[1]+2]*reg360; reg367=vectors[0][indices[1]+2]*reg367; reg368=ponderation*reg368; reg280=reg231-reg280;
    reg200=reg164*reg374; reg288=reg37*reg288; reg258=reg173-reg258; reg283=reg162*reg270; reg287=reg111*reg176;
    reg190=reg200-reg190; reg200=reg123*reg381; reg292=reg123*reg108; reg297=reg161*reg359; reg298=vectors[0][indices[2]+0]*reg215;
    reg301=reg162*reg176; reg266=reg37*reg266; reg306=reg375+reg306; reg308=reg250+reg308; reg202=vectors[0][indices[2]+0]*reg202;
    reg339=reg178+reg339; reg362=vectors[0][indices[2]+0]*reg362; reg178=reg171*reg251; reg201=reg366+reg201; reg323=reg37*reg323;
    reg338=reg205+reg338; reg262=ponderation*reg262; reg342=reg344+reg342; reg265=vectors[0][indices[2]+0]*reg265; reg288=ponderation*reg288;
    reg205=reg92*reg381; reg364=ponderation*reg364; reg278=reg278-reg233; reg357=vectors[0][indices[2]+0]*reg357; reg254=reg254-reg259;
    reg354=reg354+reg320; reg192=ponderation*reg192; reg194=reg351-reg194; reg358=reg37*reg358; reg250=reg198*reg45;
    reg239=reg356+reg239; reg286=reg37*reg286; reg319=vectors[0][indices[2]+0]*reg319; reg303=reg60*reg359; reg345=reg300+reg345;
    reg277=reg220-reg277; reg207=reg207-reg380; reg317=reg346+reg317; reg289=vectors[0][indices[2]+0]*reg289; reg294=vectors[0][indices[2]+0]*reg294;
    reg352=reg332+reg352; reg220=reg114*reg381; reg224=ponderation*reg224; reg347=reg37*reg347; reg376=reg318+reg376;
    reg300=reg143*reg176; reg310=reg169*reg359; reg318=reg143*reg270; reg248=vectors[0][indices[2]+0]*reg248; reg332=reg151*reg270;
    reg208=reg210+reg208; reg210=reg158*reg359; reg344=reg151*reg176; reg324=reg378+reg324; reg379=reg37*reg379;
    reg343=ponderation*reg343; reg229=vectors[0][indices[2]+0]*reg229; reg336=reg269+reg336; reg226=reg226+reg263; reg199=reg191+reg199;
    reg285=vectors[0][indices[2]+0]*reg285; reg91=ponderation*reg91; reg309=reg37*reg309; reg274=reg274-reg313; reg191=reg133*reg381;
    reg269=reg169*reg251; reg238=vectors[0][indices[2]+0]*reg238; reg203=reg341+reg203; reg236=vectors[0][indices[2]+0]*reg236; reg183=reg222+reg183;
    reg222=reg158*reg251; reg341=reg157*reg251; reg346=reg138*reg381; reg337=reg37*reg337; reg373=ponderation*reg373;
    reg272=ponderation*reg272; reg327=2*reg327; reg328=reg37*reg328; reg384=reg377+reg384; reg148=reg37*reg148;
    reg361=reg245+reg361; reg351=reg60*reg251; reg253=ponderation*reg253; reg356=reg162*reg57; reg340=ponderation*reg340;
    reg223=reg223-reg180; reg256=reg37*reg256; reg365=reg211-reg365; reg177=ponderation*reg177; reg188=reg188-reg371;
    reg211=reg170*reg270; reg366=reg167*reg359; reg375=reg170*reg176; reg258=reg258-reg243; reg333=reg257+reg333;
    reg187=vectors[0][indices[2]+0]*reg187; reg216=ponderation*reg216; reg242=reg37*reg242; reg304=reg252+reg304; reg193=reg255+reg193;
    reg252=reg164*reg45; reg367=reg348+reg367; reg230=vectors[0][indices[2]+0]*reg230; reg186=ponderation*reg186; reg234=vectors[0][indices[2]+0]*reg234;
    reg213=reg37*reg213; reg291=reg302+reg291; reg353=vectors[0][indices[2]+0]*reg353; reg179=ponderation*reg179; reg249=ponderation*reg249;
    reg166=reg37*reg166; reg255=reg144*reg381; reg257=reg167*reg251; reg212=reg296+reg212; reg334=reg334-reg307;
    reg295=reg350-reg295; reg268=reg37*reg268; reg305=ponderation*reg305; reg315=vectors[0][indices[2]+0]*reg315; reg335=reg241+reg335;
    reg184=reg37*reg184; reg155=vectors[0][indices[2]+0]*reg155; reg206=ponderation*reg206; reg218=reg37*reg218; reg241=reg127*reg381;
    reg296=reg156*reg251; reg302=reg147*reg270; reg348=reg157*reg359; reg350=reg147*reg176; reg204=reg182+reg204;
    reg197=reg37*reg197; reg227=ponderation*reg227; reg368=vectors[0][indices[2]+0]*reg368; reg360=reg273+reg360; reg217=reg37*reg217;
    reg182=reg111*reg270; reg235=reg37*reg235; reg280=reg280-reg232; reg312=reg322+reg312; reg325=vectors[0][indices[2]+0]*reg325;
    reg244=ponderation*reg244; reg237=reg37*reg237; reg381=reg154*reg381; reg273=reg161*reg251; reg276=reg321+reg276;
    reg261=reg261+reg299; reg321=reg153*reg176; reg281=ponderation*reg281; reg322=reg171*reg359; reg377=reg153*reg270;
    reg247=reg326-reg247; reg267=reg267-reg369; reg145=reg145-reg316; reg349=vectors[0][indices[2]+0]*reg349; reg228=reg311+reg228;
    reg314=vectors[0][indices[2]+0]*reg314; reg293=vectors[0][indices[2]+0]*reg293; reg329=reg331+reg329; reg260=reg330+reg260; reg246=ponderation*reg246;
    reg264=reg37*reg264; reg370=ponderation*reg370; reg221=ponderation*reg221; reg270=reg142*reg270; reg282=reg219-reg282;
    reg279=reg37*reg279; reg363=reg37*reg363; reg359=reg156*reg359; reg176=reg142*reg176; reg284=reg284-reg372;
    reg383=reg382+reg383; reg364=vectors[0][indices[2]+1]*reg364; reg293=reg329+reg293; reg227=vectors[0][indices[2]+1]*reg227; reg186=vectors[0][indices[2]+1]*reg186;
    reg315=reg335+reg315; reg269=reg191-reg269; reg359=reg176+reg359; reg274=reg37*reg274; reg319=reg345+reg319;
    reg176=reg133*reg356; reg191=reg174*reg251; reg219=reg150*reg251; reg311=reg144*reg292; reg326=reg167*reg327;
    reg329=reg175*reg251; reg330=reg144*reg356; reg257=reg255-reg257; reg252=2*reg252; reg255=reg169*reg327;
    reg223=reg37*reg223; reg166=ponderation*reg166; reg357=reg338+reg357; reg288=vectors[0][indices[2]+1]*reg288; reg202=reg308+reg202;
    reg242=ponderation*reg242; reg237=ponderation*reg237; reg304=reg37*reg304; reg343=vectors[0][indices[2]+1]*reg343; reg258=reg37*reg258;
    reg281=vectors[0][indices[2]+1]*reg281; reg238=reg203+reg238; reg276=reg37*reg276; reg366=reg375-reg366; reg229=reg336+reg229;
    reg211=reg371+reg211; reg203=reg125*reg356; reg308=reg175*reg374; reg180=reg188-reg180; reg365=reg37*reg365;
    reg303=reg287-reg303; reg373=vectors[0][indices[2]+1]*reg373; reg256=ponderation*reg256; reg270=reg245+reg270; reg322=reg321-reg322;
    reg377=reg259+reg377; reg247=reg349+reg247; reg309=ponderation*reg309; reg351=reg205-reg351; reg376=reg37*reg376;
    reg188=reg158*reg327; reg347=ponderation*reg347; reg205=reg185*reg251; reg370=vectors[0][indices[2]+1]*reg370; reg280=reg37*reg280;
    reg368=reg360+reg368; reg245=reg114*reg356; reg259=reg60*reg327; reg286=ponderation*reg286; reg294=reg352+reg294;
    reg179=vectors[0][indices[2]+1]*reg179; reg222=reg220-reg222; reg145=reg37*reg145; reg363=ponderation*reg363; reg220=reg135*reg356;
    reg178=reg200-reg178; reg200=reg123*reg356; reg287=reg198*reg251; reg321=reg171*reg327; reg331=reg123*reg292;
    reg335=reg174*reg374; reg313=reg207-reg313; reg298=reg306-reg298; reg192=vectors[0][indices[2]+1]*reg192; reg277=reg37*reg277;
    reg328=ponderation*reg328; reg264=ponderation*reg264; reg262=vectors[0][indices[2]+1]*reg262; reg207=reg123*reg99; reg306=reg128*reg356;
    reg336=reg198*reg374; reg316=reg254-reg316; reg254=reg133*reg292; reg213=ponderation*reg213; reg250=2*reg250;
    reg190=reg37*reg190; reg230=reg212+reg230; reg218=ponderation*reg218; reg226=reg37*reg226; reg253=vectors[0][indices[2]+1]*reg253;
    reg266=ponderation*reg266; reg305=vectors[0][indices[2]+1]*reg305; reg236=reg183+reg236; reg296=reg241+reg296; reg383=reg37*reg383;
    reg183=reg127*reg356; reg212=reg195*reg251; reg241=reg127*reg292; reg248=reg208+reg248; reg177=vectors[0][indices[2]+1]*reg177;
    reg318=reg380+reg318; reg208=reg114*reg292; reg310=reg300-reg310; reg300=reg156*reg327; reg243=reg267-reg243;
    reg323=ponderation*reg323; reg246=vectors[0][indices[2]+1]*reg246; reg267=reg138*reg356; reg314=reg228+reg314; reg228=reg161*reg327;
    reg338=reg150*reg374; reg302=reg372+reg302; reg285=reg199+reg285; reg199=reg172*reg251; reg272=vectors[0][indices[2]+1]*reg272;
    reg340=vectors[0][indices[2]+1]*reg340; reg345=reg81*reg356; reg353=reg291+reg353; reg268=ponderation*reg268; reg233=reg284-reg233;
    reg348=reg350-reg348; reg295=reg37*reg295; reg251=reg196*reg251; reg232=reg334-reg232; reg284=reg157*reg327;
    reg291=reg138*reg292; reg362=reg339+reg362; reg206=vectors[0][indices[2]+1]*reg206; reg184=ponderation*reg184; reg384=reg37*reg384;
    reg379=ponderation*reg379; reg324=reg37*reg324; reg334=reg121*reg356; reg341=reg346-reg341; reg278=reg37*reg278;
    reg210=reg344-reg210; reg193=reg37*reg193; reg194=reg37*reg194; reg244=vectors[0][indices[2]+1]*reg244; reg265=reg342+reg265;
    reg263=reg361+reg263; reg332=reg307+reg332; reg307=reg196*reg374; reg339=reg149*reg356; reg342=reg195*reg374;
    reg344=reg128*reg108; reg346=reg131*reg356; reg349=reg92*reg292; reg350=reg172*reg374; reg337=ponderation*reg337;
    reg354=reg299+reg354; reg201=reg37*reg201; reg224=vectors[0][indices[2]+1]*reg224; reg221=vectors[0][indices[2]+1]*reg221; reg91=vectors[0][indices[2]+1]*reg91;
    reg299=reg134*reg356; reg325=reg312+reg325; reg374=reg185*reg374; reg234=reg367+reg234; reg249=vectors[0][indices[2]+1]*reg249;
    reg283=reg320+reg283; reg148=ponderation*reg148; reg381=reg273+reg381; reg216=vectors[0][indices[2]+1]*reg216; reg187=reg333+reg187;
    reg204=reg37*reg204; reg279=ponderation*reg279; reg282=reg37*reg282; reg197=ponderation*reg197; reg301=reg297+reg301;
    reg182=reg369+reg182; reg289=reg317+reg289; reg239=reg37*reg239; reg261=reg37*reg261; reg358=ponderation*reg358;
    reg235=ponderation*reg235; reg155=reg260+reg155; reg217=ponderation*reg217; reg260=reg154*reg356; reg292=reg154*reg292;
    reg356=reg92*reg356; reg273=reg134*reg207; reg297=reg153*reg108; reg343=reg238+reg343; reg238=reg159*reg252;
    reg312=reg134*reg344; reg220=reg335-reg220; reg317=reg128*reg57; reg298=reg192+reg298; reg358=vectors[0][indices[2]+2]*reg358;
    reg197=vectors[0][indices[2]+2]*reg197; reg227=reg293+reg227; reg253=reg230+reg253; reg235=vectors[0][indices[2]+2]*reg235; reg349=reg259+reg349;
    reg192=reg160*reg327; reg230=reg163*reg252; reg293=reg131*reg344; reg320=reg135*reg207; reg379=vectors[0][indices[2]+2]*reg379;
    reg345=reg338-reg345; reg249=reg234+reg249; reg166=vectors[0][indices[2]+2]*reg166; reg323=vectors[0][indices[2]+2]*reg323; reg262=reg357+reg262;
    reg234=reg163*reg327; reg292=reg228-reg292; reg333=reg196*reg250; reg335=reg81*reg344; reg338=reg131*reg207;
    reg218=vectors[0][indices[2]+2]*reg218; reg254=reg255+reg254; reg352=reg174*reg250; reg190=ponderation*reg190; reg376=ponderation*reg376;
    reg316=reg37*reg316; reg224=reg289+reg224; reg347=vectors[0][indices[2]+2]*reg347; reg381=reg37*reg381; reg306=reg336-reg306;
    reg289=reg164*reg250; reg336=reg164*reg327; reg357=reg128*reg207; reg360=reg153*reg207; reg261=ponderation*reg261;
    reg280=ponderation*reg280; reg361=reg164*reg252; reg367=reg128*reg344; reg377=reg214-reg377; reg177=reg248+reg177;
    reg184=vectors[0][indices[2]+2]*reg184; reg213=vectors[0][indices[2]+2]*reg213; reg179=reg294+reg179; reg322=reg37*reg322; reg268=vectors[0][indices[2]+2]*reg268;
    reg214=reg150*reg250; reg276=ponderation*reg276; reg305=reg236+reg305; reg324=ponderation*reg324; reg210=reg37*reg210;
    reg303=reg37*reg303; reg307=reg346+reg307; reg332=reg231-reg332; reg264=vectors[0][indices[2]+2]*reg264; reg246=reg314+reg246;
    reg354=reg37*reg354; reg201=ponderation*reg201; reg231=reg160*reg252; reg236=reg112*reg250; reg272=reg285+reg272;
    reg328=vectors[0][indices[2]+2]*reg328; reg248=reg135*reg344; reg251=reg260+reg251; reg260=reg160*reg250; reg285=reg143*reg207;
    reg274=ponderation*reg274; reg269=reg37*reg269; reg318=reg271-reg318; reg271=reg81*reg207; reg294=reg151*reg207;
    reg191=reg176+reg191; reg310=reg37*reg310; reg176=reg159*reg250; reg206=reg362+reg206; reg309=vectors[0][indices[2]+2]*reg309;
    reg281=reg247+reg281; reg208=reg188+reg208; reg247=reg172*reg250; reg314=reg121*reg344; reg291=reg284+reg291;
    reg346=reg88*reg252; reg362=reg195*reg250; reg369=reg125*reg344; reg371=reg168*reg252; reg241=reg241-reg300;
    reg204=ponderation*reg204; reg372=reg185*reg250; reg286=vectors[0][indices[2]+2]*reg286; reg364=reg319+reg364; reg266=vectors[0][indices[2]+2]*reg266;
    reg212=reg183+reg212; reg348=reg37*reg348; reg183=reg125*reg207; reg319=reg168*reg327; reg199=reg267+reg199;
    reg296=reg37*reg296; reg203=reg308-reg203; reg180=reg37*reg180; reg302=reg225-reg302; reg225=reg149*reg207;
    reg365=ponderation*reg365; reg267=reg165*reg327; reg283=reg181+reg283; reg205=reg245+reg205; reg181=reg162*reg207;
    reg245=reg163*reg250; reg279=vectors[0][indices[2]+2]*reg279; reg370=reg368+reg370; reg308=reg111*reg207; reg258=ponderation*reg258;
    reg222=reg37*reg222; reg242=vectors[0][indices[2]+2]*reg242; reg216=reg187+reg216; reg304=ponderation*reg304; reg356=reg219+reg356;
    reg187=reg112*reg252; reg221=reg155+reg221; reg363=vectors[0][indices[2]+2]*reg363; reg344=reg149*reg344; reg155=reg165*reg252;
    reg366=reg37*reg366; reg219=vectors[0][indices[2]+2]*reg217; reg211=reg189-reg211; reg189=reg128*reg99; reg301=reg37*reg301;
    reg368=reg170*reg207; reg239=ponderation*reg239; reg375=reg168*reg250; reg288=reg202+reg288; reg91=reg325+reg91;
    reg145=ponderation*reg145; reg340=reg353+reg340; reg178=reg37*reg178; reg287=reg200+reg287; reg295=ponderation*reg295;
    reg331=reg321+reg331; reg200=reg198*reg250; reg282=ponderation*reg282; reg270=reg240+reg270; reg194=ponderation*reg194;
    reg202=reg142*reg207; reg240=reg165*reg250; reg277=ponderation*reg277; reg193=ponderation*reg193; reg313=reg37*reg313;
    reg337=vectors[0][indices[2]+2]*reg337; reg325=reg175*reg250; reg311=reg326+reg311; reg232=reg37*reg232; reg373=reg229+reg373;
    reg329=reg330+reg329; reg257=reg37*reg257; reg299=reg374-reg299; reg182=reg173-reg182; reg223=ponderation*reg223;
    reg173=reg159*reg327; reg229=reg112*reg327; reg226=ponderation*reg226; reg243=reg37*reg243; reg330=reg121*reg207;
    reg207=reg147*reg207; reg342=reg339+reg342; reg339=reg88*reg250; reg263=reg37*reg263; reg351=reg37*reg351;
    reg244=reg265+reg244; reg265=reg88*reg327; reg237=vectors[0][indices[2]+2]*reg237; reg359=reg37*reg359; reg233=reg37*reg233;
    reg148=vectors[0][indices[2]+2]*reg148; reg186=reg315+reg186; reg256=vectors[0][indices[2]+2]*reg256; reg315=reg156*reg45; reg383=ponderation*reg383;
    reg384=ponderation*reg384; reg334=reg350-reg334; reg278=ponderation*reg278; reg341=reg37*reg341; reg350=reg153*reg57;
    reg353=reg154*reg189; reg374=reg114*reg189; reg208=reg208+reg372; reg381=ponderation*reg381; reg251=reg37*reg251;
    reg292=reg292-reg333; reg378=reg158*reg252; reg205=reg37*reg205; reg380=reg161*reg252; reg222=ponderation*reg222;
    reg337=reg373+reg337; reg373=reg142*reg297; reg382=reg156*reg250; T reg385=reg142*reg317; reg240=reg202+reg240;
    reg270=reg37*reg270; reg359=ponderation*reg359; reg233=ponderation*reg233; reg202=reg147*reg297; reg334=reg37*reg334;
    T reg386=reg157*reg250; T reg387=reg147*reg317; reg339=reg207+reg339; reg302=reg37*reg302; reg296=ponderation*reg296;
    reg348=ponderation*reg348; reg212=reg37*reg212; reg330=reg265+reg330; reg241=reg241+reg362; reg207=reg127*reg189;
    reg265=reg156*reg252; reg314=reg346+reg314; reg278=vectors[0][indices[3]+0]*reg278; reg309=reg91+reg309; reg91=vectors[0][indices[3]+0]*reg383;
    reg363=reg221+reg363; reg221=reg60*reg252; reg279=reg370+reg279; reg282=vectors[0][indices[3]+0]*reg282; reg322=ponderation*reg322;
    reg268=reg305+reg268; reg295=vectors[0][indices[3]+0]*reg295; reg377=reg37*reg377; reg289=reg360+reg289; reg305=reg153*reg317;
    reg360=reg171*reg250; reg370=reg153*reg297; T reg388=reg133*reg189; T reg389=reg169*reg252; reg254=reg254+reg352;
    reg191=reg37*reg191; reg269=ponderation*reg269; reg277=vectors[0][indices[3]+0]*reg277; reg328=reg272+reg328; reg182=reg37*reg182;
    reg264=reg246+reg264; reg246=reg60*reg250; reg272=reg165*reg45; T reg390=vectors[0][indices[3]+0]*reg204; reg197=reg227+reg197;
    reg384=vectors[0][indices[3]+0]*reg384; reg227=reg127*reg108; reg379=reg343+reg379; reg343=vectors[0][indices[3]+0]*reg324; reg356=reg37*reg356;
    T reg391=reg111*reg297; reg274=vectors[0][indices[3]+0]*reg274; reg293=reg293-reg230; reg235=reg253+reg235; reg194=vectors[0][indices[3]+0]*reg194;
    reg234=reg338-reg234; reg345=reg37*reg345; reg203=reg37*reg203; reg271=reg229+reg271; reg190=vectors[0][indices[3]+0]*reg190;
    reg266=reg288+reg266; reg307=reg37*reg307; reg286=reg364+reg286; reg145=vectors[0][indices[3]+0]*reg145; reg210=ponderation*reg210;
    reg354=ponderation*reg354; reg229=reg195*reg45; reg332=reg37*reg332; reg315=2*reg315; reg183=reg319+reg183;
    reg253=reg143*reg297; reg308=reg236+reg308; reg369=reg371+reg369; reg236=reg169*reg250; reg288=reg143*reg317;
    reg260=reg285+reg260; reg318=reg37*reg318; reg310=ponderation*reg310; reg218=reg206+reg218; reg206=reg170*reg297;
    reg285=vectors[0][indices[3]+0]*reg226; reg176=reg294+reg176; reg294=reg151*reg317; reg331=reg331+reg200; reg287=reg37*reg287;
    reg178=ponderation*reg178; reg319=reg171*reg252; reg338=reg123*reg189; reg258=vectors[0][indices[3]+0]*reg258; reg148=reg186+reg148;
    reg186=reg144*reg189; reg256=reg340+reg256; reg340=reg167*reg252; reg365=vectors[0][indices[3]+0]*reg365; reg311=reg311+reg325;
    reg232=ponderation*reg232; reg364=vectors[0][indices[3]+0]*reg276; reg329=reg37*reg329; reg257=ponderation*reg257; reg299=reg37*reg299;
    reg237=reg244+reg237; reg273=reg173+reg273; reg335=reg335+reg187; reg312=reg238+reg312; reg173=reg111*reg317;
    reg263=ponderation*reg263; reg342=reg37*reg342; reg244=reg92*reg189; reg225=reg267-reg225; reg223=vectors[0][indices[3]+0]*reg223;
    reg166=reg249+reg166; reg239=vectors[0][indices[3]+0]*reg239; reg358=reg298+reg358; reg180=ponderation*reg180; reg366=ponderation*reg366;
    reg249=vectors[0][indices[3]+0]*reg376; reg347=reg224+reg347; reg213=reg179+reg213; reg280=vectors[0][indices[3]+0]*reg280; reg344=reg155-reg344;
    reg248=reg231+reg248; reg179=reg162*reg297; reg320=reg192+reg320; reg192=vectors[0][indices[3]+0]*reg201; reg323=reg262+reg323;
    reg242=reg216+reg242; reg220=reg37*reg220; reg351=ponderation*reg351; reg216=reg162*reg317; reg224=reg161*reg250;
    reg313=ponderation*reg313; reg349=reg214+reg349; reg262=vectors[0][indices[3]+0]*reg304; reg243=ponderation*reg243; reg303=ponderation*reg303;
    reg341=ponderation*reg341; reg199=reg37*reg199; reg245=reg181+reg245; reg291=reg291+reg247; reg283=reg37*reg283;
    reg219=reg281-reg219; reg181=reg157*reg252; reg261=vectors[0][indices[3]+0]*reg261; reg189=reg138*reg189; reg317=reg170*reg317;
    reg297=reg151*reg297; reg375=reg368+reg375; reg316=ponderation*reg316; reg267=reg167*reg250; reg306=reg37*reg306;
    reg301=ponderation*reg301; reg357=reg336+reg357; reg211=reg37*reg211; reg250=reg158*reg250; reg367=reg361+reg367;
    reg184=reg177+reg184; reg177=vectors[0][indices[3]+0]*reg193; reg281=reg125*reg350; reg298=reg175*reg327; reg341=vectors[0][indices[3]+1]*reg341;
    reg206=reg371+reg206; reg366=vectors[0][indices[3]+1]*reg366; reg233=vectors[0][indices[3]+1]*reg233; reg365=reg256+reg365; reg314=reg247+reg314;
    reg278=reg337+reg278; reg267=reg317+reg267; reg282=reg279+reg282; reg262=reg242-reg262; reg351=vectors[0][indices[3]+1]*reg351;
    reg242=reg172*reg327; reg247=reg121*reg350; reg258=reg148+reg258; reg187=reg391+reg187; reg148=reg127*reg99;
    reg359=vectors[0][indices[3]+1]*reg359; reg203=ponderation*reg203; reg91=reg363-reg91; reg362=reg344+reg362; reg256=reg195*reg327;
    reg279=reg149*reg350; reg349=reg37*reg349; reg225=reg37*reg225; reg342=ponderation*reg342; reg183=reg37*reg183;
    reg211=ponderation*reg211; reg271=reg37*reg271; reg334=ponderation*reg334; reg375=reg37*reg375; reg180=vectors[0][indices[3]+1]*reg180;
    reg369=reg325+reg369; reg330=reg37*reg330; reg335=reg214+reg335; reg177=reg184-reg177; reg303=vectors[0][indices[3]+1]*reg303;
    reg184=reg149*reg108; reg295=reg268+reg295; reg297=reg238+reg297; reg232=vectors[0][indices[3]+1]*reg232; reg250=reg294+reg250;
    reg214=reg157*reg315; reg238=reg169*reg315; reg268=reg133*reg227; reg294=reg174*reg252; reg317=reg133*reg350;
    reg388=reg389+reg388; reg254=reg37*reg254; reg176=reg37*reg176; reg191=ponderation*reg191; reg332=ponderation*reg332;
    reg318=ponderation*reg318; reg189=reg181+reg189; reg205=ponderation*reg205; reg291=reg37*reg291; reg181=reg138*reg350;
    reg199=ponderation*reg199; reg208=reg37*reg208; reg374=reg378+reg374; reg325=reg114*reg350; reg336=reg172*reg252;
    reg337=reg138*reg227; reg220=ponderation*reg220; reg320=reg37*reg320; reg248=reg352+reg248; reg344=reg135*reg350;
    reg352=reg174*reg327; reg222=vectors[0][indices[3]+1]*reg222; reg280=reg213+reg280; reg310=vectors[0][indices[3]+1]*reg310; reg249=reg347-reg249;
    reg213=reg185*reg327; reg343=reg379-reg343; reg347=reg134*reg350; reg312=reg372+reg312; reg269=vectors[0][indices[3]+1]*reg269;
    reg273=reg37*reg273; reg274=reg309+reg274; reg299=ponderation*reg299; reg329=ponderation*reg329; reg311=reg37*reg311;
    reg373=reg155+reg373; reg382=reg385-reg382; reg186=reg340+reg186; reg240=reg37*reg240; reg155=reg144*reg350;
    reg309=reg175*reg252; reg270=ponderation*reg270; reg340=reg144*reg227; reg363=reg167*reg315; reg313=vectors[0][indices[3]+1]*reg313;
    reg277=reg328+reg277; reg260=reg37*reg260; reg236=reg288+reg236; reg288=reg185*reg252; reg253=reg231+reg253;
    reg231=reg114*reg227; reg328=reg158*reg315; reg173=reg246+reg173; reg243=vectors[0][indices[3]+1]*reg243; reg345=ponderation*reg345;
    reg246=reg150*reg327; reg368=reg150*reg252; reg194=reg235+reg194; reg229=2*reg229; reg244=reg221+reg244;
    reg223=reg166+reg223; reg257=vectors[0][indices[3]+1]*reg257; reg210=vectors[0][indices[3]+1]*reg210; reg370=reg361+reg370; reg360=reg305+reg360;
    reg239=reg358+reg239; reg166=vectors[0][indices[3]+1]*reg301; reg322=vectors[0][indices[3]+1]*reg322; reg221=reg195*reg252; reg235=reg127*reg350;
    reg287=ponderation*reg287; reg289=reg37*reg289; reg377=ponderation*reg377; reg285=reg218-reg285; reg296=vectors[0][indices[3]+1]*reg296;
    reg251=ponderation*reg251; reg292=reg37*reg292; reg265=reg207-reg265; reg353=reg380-reg353; reg331=reg37*reg331;
    reg356=ponderation*reg356; reg307=ponderation*reg307; reg306=ponderation*reg306; reg316=vectors[0][indices[3]+1]*reg316; reg272=2*reg272;
    reg234=reg37*reg234; reg190=reg266+reg190; reg357=reg37*reg357; reg333=reg293-reg333; reg145=reg286+reg145;
    reg178=vectors[0][indices[3]+1]*reg178; reg367=reg200+reg367; reg200=reg127*reg227; reg207=reg128*reg350; reg218=reg198*reg327;
    reg266=reg156*reg315; reg364=reg237-reg364; reg237=reg92*reg227; reg286=vectors[0][indices[3]+1]*reg381; reg348=vectors[0][indices[3]+1]*reg348;
    reg384=reg264+reg384; reg182=ponderation*reg182; reg264=vectors[0][indices[3]+1]*reg263; reg293=reg81*reg350; reg305=reg60*reg315;
    reg358=reg123*reg227; reg179=reg230+reg179; reg230=reg171*reg315; reg361=reg131*reg350; reg216=reg224-reg216;
    reg308=reg37*reg308; reg245=reg37*reg245; reg283=ponderation*reg283; reg202=reg346+reg202; reg327=reg196*reg327;
    reg192=reg323-reg192; reg354=vectors[0][indices[3]+1]*reg354; reg224=reg92*reg350; reg241=reg37*reg241; reg212=ponderation*reg212;
    reg338=reg319+reg338; reg319=reg154*reg350; reg323=reg196*reg252; reg302=ponderation*reg302; reg339=reg37*reg339;
    reg346=reg161*reg315; reg227=reg154*reg227; reg386=reg387+reg386; reg350=reg123*reg350; reg252=reg198*reg252;
    reg390=reg197-reg390; reg219=reg261+reg219; reg197=reg150*reg229; reg308=ponderation*reg308; reg261=reg143*reg148;
    reg371=reg112*reg315; reg313=reg277+reg313; reg345=vectors[0][indices[3]+2]*reg345; reg277=reg169*reg45; reg220=vectors[0][indices[3]+2]*reg220;
    reg372=reg160*reg229; reg253=reg255+reg253; reg332=vectors[0][indices[3]+2]*reg332; reg343=reg210+reg343; reg264=reg384-reg264;
    reg342=vectors[0][indices[3]+2]*reg342; reg237=reg237-reg305; reg390=reg348+reg390; reg302=vectors[0][indices[3]+2]*reg302; reg273=ponderation*reg273;
    reg312=reg37*reg312; reg213=reg347+reg213; reg210=reg134*reg148; reg173=reg37*reg173; reg255=reg159*reg315;
    reg347=reg149*reg57; reg348=reg159*reg272; reg378=reg184*reg134; reg379=reg185*reg229; reg231=reg231-reg328;
    reg380=vectors[0][indices[3]+2]*reg329; reg257=reg223+reg257; reg166=reg239-reg166; reg283=vectors[0][indices[3]+2]*reg283; reg335=reg37*reg335;
    reg288=reg325+reg288; reg244=reg37*reg244; reg333=reg37*reg333; reg234=ponderation*reg234; reg243=reg194+reg243;
    reg194=reg112*reg229; reg223=reg111*reg148; reg239=reg128*reg148; reg325=reg164*reg315; reg336=reg181+reg336;
    reg292=ponderation*reg292; reg181=reg164*reg272; reg374=reg37*reg374; reg353=reg37*reg353; reg384=reg184*reg128;
    reg208=ponderation*reg208; reg323=reg319+reg323; reg222=reg280+reg222; reg280=vectors[0][indices[3]+2]*reg205; reg227=reg346+reg227;
    reg189=reg37*reg189; reg319=reg196*reg229; reg291=ponderation*reg291; reg385=reg184*reg135; reg251=vectors[0][indices[3]+2]*reg251;
    reg387=reg160*reg272; reg286=reg219-reg286; reg219=reg160*reg315; reg389=reg135*reg148; reg352=reg344+reg352;
    reg248=reg37*reg248; reg344=vectors[0][indices[3]+2]*reg307; reg192=reg354+reg192; reg320=ponderation*reg320; reg354=reg81*reg148;
    reg368=reg224+reg368; reg236=reg37*reg236; reg260=ponderation*reg260; reg224=reg164*reg229; reg254=ponderation*reg254;
    reg391=reg153*reg148; reg388=reg37*reg388; reg285=reg296+reg285; reg370=reg321+reg370; reg294=reg317+reg294;
    reg176=ponderation*reg176; reg296=vectors[0][indices[3]+2]*reg212; reg360=reg37*reg360; reg268=reg268-reg238; reg317=reg174*reg229;
    reg250=reg37*reg250; reg297=reg188+reg297; reg188=reg151*reg148; reg321=reg159*reg229; reg357=ponderation*reg357;
    reg367=reg37*reg367; reg218=reg207+reg218; reg177=reg303+reg177; reg207=reg172*reg229; reg337=reg337-reg214;
    reg289=ponderation*reg289; reg182=vectors[0][indices[3]+2]*reg182; reg318=vectors[0][indices[3]+2]*reg318; reg249=reg310+reg249; reg299=vectors[0][indices[3]+2]*reg299;
    reg232=reg295+reg232; reg298=reg281+reg298; reg281=reg195*reg229; reg369=reg37*reg369; reg200=reg200+reg266;
    reg295=vectors[0][indices[3]+2]*reg287; reg178=reg145+reg178; reg183=ponderation*reg183; reg145=reg184*reg121; reg303=reg88*reg272;
    reg310=vectors[0][indices[3]+2]*reg199; reg341=reg278+reg341; reg316=reg190+reg316; reg190=reg149*reg99; reg221=reg235+reg221;
    reg293=reg246+reg293; reg306=vectors[0][indices[3]+2]*reg306; reg235=reg88*reg315; reg246=reg121*reg148; reg278=reg184*reg81;
    reg242=reg247+reg242; reg314=reg37*reg314; reg265=reg37*reg265; reg241=ponderation*reg241; reg330=ponderation*reg330;
    reg339=ponderation*reg339; reg386=reg37*reg386; reg202=reg284+reg202; reg247=reg147*reg148; reg284=reg88*reg229;
    reg334=vectors[0][indices[3]+2]*reg334; reg233=reg282+reg233; reg211=vectors[0][indices[3]+2]*reg211; reg262=reg366+reg262; reg245=ponderation*reg245;
    reg216=reg37*reg216; reg179=reg228-reg179; reg228=reg142*reg108; reg282=reg184*reg149; reg366=reg165*reg272;
    T reg392=reg149*reg148; T reg393=reg165*reg315; T reg394=reg162*reg148; reg279=reg256-reg279; reg256=reg163*reg229;
    reg259=reg187+reg259; reg362=reg37*reg362; reg349=ponderation*reg349; reg225=ponderation*reg225; reg91=reg359+reg91;
    reg375=ponderation*reg375; reg267=reg37*reg267; reg187=vectors[0][indices[3]+2]*reg270; reg206=reg326+reg206; reg326=reg170*reg148;
    reg359=reg168*reg229; T reg395=reg184*reg125; T reg396=reg168*reg272; T reg397=reg168*reg315; T reg398=reg125*reg148;
    reg271=ponderation*reg271; reg364=reg322+reg364; reg252=reg350+reg252; reg240=ponderation*reg240; reg269=reg274+reg269;
    reg377=vectors[0][indices[3]+2]*reg377; reg274=reg163*reg315; reg311=ponderation*reg311; reg382=reg37*reg382; reg322=reg163*reg272;
    reg331=ponderation*reg331; reg184=reg184*reg131; reg351=reg258+reg351; reg186=reg37*reg186; reg300=reg373-reg300;
    reg258=vectors[0][indices[3]+2]*reg356; reg338=reg37*reg338; reg309=reg155+reg309; reg155=reg165*reg229; reg350=reg142*reg148;
    reg327=reg361-reg327; reg203=vectors[0][indices[3]+2]*reg203; reg180=reg365+reg180; reg361=reg198*reg229; reg358=reg358-reg230;
    reg365=reg175*reg229; reg340=reg340-reg363; reg373=reg112*reg272; T reg399=vectors[0][indices[3]+2]*reg191; reg148=reg131*reg148;
    T reg400=reg170*reg347; T reg401=reg167*reg229; reg359=reg326+reg359; reg378=reg348-reg378; reg213=reg37*reg213;
    reg326=reg161*reg229; T reg402=reg167*reg272; T reg403=reg162*reg347; reg384=reg181-reg384; T reg404=reg162*reg228;
    reg255=reg210-reg255; reg206=reg37*reg206; reg309=reg37*reg309; reg340=reg340+reg365; reg325=reg239-reg325;
    reg267=ponderation*reg267; reg375=vectors[0][indices[4]+0]*reg375; reg210=reg92*reg190; reg239=reg123*reg190; reg211=reg262+reg211;
    reg262=reg171*reg272; reg358=reg358+reg361; reg248=ponderation*reg248; reg216=ponderation*reg216; reg352=reg37*reg352;
    reg252=reg37*reg252; reg179=reg37*reg179; reg219=reg389-reg219; reg282=reg366+reg282; reg392=reg393+reg392;
    reg338=ponderation*reg338; reg385=reg387-reg385; reg234=vectors[0][indices[4]+0]*reg234; reg280=reg222-reg280; reg279=reg37*reg279;
    reg186=ponderation*reg186; reg256=reg394+reg256; reg208=vectors[0][indices[4]+0]*reg208; reg312=ponderation*reg312; reg362=ponderation*reg362;
    reg250=ponderation*reg250; reg333=ponderation*reg333; reg296=reg285-reg296; reg293=reg37*reg293; reg241=vectors[0][indices[4]+0]*reg241;
    reg306=reg316+reg306; reg357=vectors[0][indices[4]+0]*reg357; reg184=reg184+reg322; reg371=reg354-reg371; reg368=reg37*reg368;
    reg345=reg243+reg345; reg289=vectors[0][indices[4]+0]*reg289; reg377=reg364+reg377; reg271=vectors[0][indices[4]+0]*reg271; reg278=reg373-reg278;
    reg344=reg192-reg344; reg277=2*reg277; reg236=ponderation*reg236; reg183=vectors[0][indices[4]+0]*reg183; reg192=reg170*reg228;
    reg253=reg37*reg253; reg372=reg261+reg372; reg222=reg169*reg229; reg243=reg143*reg347; reg261=reg143*reg228;
    reg203=reg180+reg203; reg244=ponderation*reg244; reg395=reg396-reg395; reg380=reg257-reg380; reg180=reg144*reg190;
    reg218=reg37*reg218; reg397=reg398-reg397; reg327=reg37*reg327; reg318=reg249+reg318; reg260=vectors[0][indices[4]+0]*reg260;
    reg308=vectors[0][indices[4]+0]*reg308; reg182=reg177+reg182; reg311=vectors[0][indices[4]+0]*reg311; reg298=reg37*reg298; reg369=ponderation*reg369;
    reg177=vectors[0][indices[4]+0]*reg245; reg295=reg178-reg295; reg166=reg283+reg166; reg331=vectors[0][indices[4]+0]*reg331; reg274=reg148+reg274;
    reg367=ponderation*reg367; reg148=reg142*reg57; reg258=reg351-reg258; reg178=reg151*reg228; reg249=reg151*reg347;
    reg257=reg158*reg229; reg321=reg188+reg321; reg349=vectors[0][indices[4]+0]*reg349; reg297=reg37*reg297; reg188=reg60*reg272;
    reg283=reg153*reg228; reg320=vectors[0][indices[4]+0]*reg320; reg220=reg313+reg220; reg237=reg237+reg197; reg288=reg37*reg288;
    reg399=reg269-reg399; reg254=vectors[0][indices[4]+0]*reg254; reg269=reg111*reg347; reg231=reg231+reg379; reg285=reg158*reg272;
    reg313=reg60*reg229; reg339=vectors[0][indices[4]+0]*reg339; reg302=reg390+reg302; reg264=reg342+reg264; reg332=reg343+reg332;
    reg176=vectors[0][indices[4]+0]*reg176; reg225=vectors[0][indices[4]+0]*reg225; reg374=ponderation*reg374; reg336=reg37*reg336; reg299=reg232+reg299;
    reg273=vectors[0][indices[4]+0]*reg273; reg337=reg337+reg207; reg232=reg157*reg272; reg316=reg138*reg190; reg342=reg133*reg190;
    reg343=reg169*reg272; reg268=reg268+reg317; reg360=ponderation*reg360; reg294=reg37*reg294; reg388=ponderation*reg388;
    reg370=reg37*reg370; reg224=reg391+reg224; reg351=reg171*reg229; reg354=reg153*reg347; reg242=reg37*reg242;
    reg235=reg246-reg235; reg221=reg37*reg221; reg145=reg303-reg145; reg200=reg200+reg281; reg194=reg223+reg194;
    reg291=vectors[0][indices[4]+0]*reg291; reg187=reg91-reg187; reg240=vectors[0][indices[4]+0]*reg240; reg310=reg341-reg310; reg91=reg127*reg190;
    reg223=reg156*reg272; reg259=reg37*reg259; reg335=ponderation*reg335; reg246=reg111*reg228; reg330=vectors[0][indices[4]+0]*reg330;
    reg334=reg233+reg334; reg173=ponderation*reg173; reg233=reg174*reg45; reg341=reg133*reg108; reg364=reg142*reg228;
    reg389=reg156*reg229; reg390=reg142*reg347; reg155=reg350+reg155; reg300=reg37*reg300; reg382=ponderation*reg382;
    reg228=reg147*reg228; reg347=reg147*reg347; reg229=reg157*reg229; reg284=reg247+reg284; reg202=reg37*reg202;
    reg386=ponderation*reg386; reg265=ponderation*reg265; reg314=ponderation*reg314; reg227=reg227+reg319; reg292=vectors[0][indices[4]+0]*reg292;
    reg286=reg251+reg286; reg247=reg154*reg190; reg251=reg161*reg272; reg189=ponderation*reg189; reg190=reg114*reg190;
    reg350=reg160*reg45; reg353=ponderation*reg353; reg323=reg37*reg323; reg225=reg264+reg225; reg352=ponderation*reg352;
    reg362=vectors[0][indices[4]+1]*reg362; reg233=2*reg233; reg292=reg286+reg292; reg353=vectors[0][indices[4]+1]*reg353; reg309=ponderation*reg309;
    reg364=reg366+reg364; reg340=reg37*reg340; reg264=reg198*reg315; reg180=reg402-reg180; reg286=reg144*reg148;
    reg366=reg175*reg272; reg327=ponderation*reg327; reg389=reg390+reg389; reg390=reg167*reg277; reg391=reg144*reg341;
    reg274=reg37*reg274; reg155=reg37*reg155; reg244=vectors[0][indices[4]+1]*reg244; reg258=reg349+reg258; reg300=ponderation*reg300;
    reg349=reg185*reg272; reg184=reg319+reg184; reg319=reg131*reg148; reg393=reg196*reg315; reg228=reg303+reg228;
    reg347=reg229-reg347; reg229=reg135*reg148; reg216=vectors[0][indices[4]+1]*reg216; reg288=ponderation*reg288; reg177=reg166-reg177;
    reg385=reg317+reg385; reg380=reg311+reg380; reg186=vectors[0][indices[4]+1]*reg186; reg166=reg185*reg315; reg303=reg134*reg148;
    reg378=reg379+reg378; reg231=reg37*reg231; reg255=reg37*reg255; reg386=vectors[0][indices[4]+1]*reg386; reg213=ponderation*reg213;
    reg311=reg92*reg148; reg278=reg197+reg278; reg339=reg302+reg339; reg197=reg174*reg315; reg302=reg123*reg341;
    reg317=reg171*reg277; reg379=reg60*reg277; reg219=reg37*reg219; reg394=reg198*reg272; reg398=reg123*reg148;
    reg247=reg251+reg247; reg239=reg262-reg239; reg399=reg254+reg399; reg176=reg332+reg176; reg358=reg37*reg358;
    reg250=vectors[0][indices[4]+1]*reg250; reg252=ponderation*reg252; reg359=reg37*reg359; reg251=reg154*reg341; reg382=vectors[0][indices[4]+1]*reg382;
    reg206=ponderation*reg206; reg187=reg240+reg187; reg240=reg161*reg277; reg200=reg37*reg200; reg269=reg313-reg269;
    reg237=reg37*reg237; reg404=reg322+reg404; reg310=reg291+reg310; reg403=reg326+reg403; reg189=vectors[0][indices[4]+1]*reg189;
    reg256=reg37*reg256; reg254=reg150*reg272; reg223=reg91+reg223; reg279=ponderation*reg279; reg91=reg133*reg99;
    reg262=reg127*reg148; reg179=ponderation*reg179; reg291=reg195*reg272; reg392=reg37*reg392; reg373=reg246+reg373;
    reg281=reg282+reg281; reg246=reg127*reg341; reg282=reg156*reg277; reg314=vectors[0][indices[4]+1]*reg314; reg330=reg334+reg330;
    reg375=reg211+reg375; reg267=vectors[0][indices[4]+1]*reg267; reg211=reg195*reg315; reg313=reg149*reg148; reg293=ponderation*reg293;
    reg210=reg188-reg210; reg188=reg92*reg341; reg284=reg37*reg284; reg322=reg154*reg148; reg192=reg396+reg192;
    reg202=ponderation*reg202; reg326=reg196*reg272; reg183=reg203+reg183; reg369=vectors[0][indices[4]+1]*reg369; reg367=vectors[0][indices[4]+1]*reg367;
    reg265=vectors[0][indices[4]+1]*reg265; reg357=reg306+reg357; reg242=ponderation*reg242; reg368=ponderation*reg368; reg203=reg175*reg315;
    reg306=reg125*reg148; reg400=reg401-reg400; reg395=reg365+reg395; reg194=reg37*reg194; reg397=reg37*reg397;
    reg332=reg114*reg148; reg298=ponderation*reg298; reg338=vectors[0][indices[4]+1]*reg338; reg295=reg331+reg295; reg331=reg172*reg315;
    reg334=reg121*reg148; reg145=reg207+reg145; reg221=ponderation*reg221; reg350=2*reg350; reg207=reg135*reg108;
    reg235=reg37*reg235; reg248=vectors[0][indices[4]+1]*reg248; reg320=reg220+reg320; reg372=reg37*reg372; reg220=reg157*reg277;
    reg365=reg133*reg148; reg243=reg222-reg243; reg321=reg37*reg321; reg344=reg234+reg344; reg222=reg138*reg341;
    reg261=reg387+reg261; reg234=reg174*reg272; reg333=vectors[0][indices[4]+1]*reg333; reg249=reg257-reg249; reg257=reg81*reg148;
    reg273=reg299+reg273; reg323=ponderation*reg323; reg316=reg232-reg316; reg227=reg37*reg227; reg178=reg348+reg178;
    reg232=reg128*reg148; reg218=ponderation*reg218; reg299=reg114*reg341; reg348=reg158*reg277; reg260=reg318+reg260;
    reg236=vectors[0][indices[4]+1]*reg236; reg370=ponderation*reg370; reg384=reg361+reg384; reg360=vectors[0][indices[4]+1]*reg360; reg294=ponderation*reg294;
    reg289=reg377+reg289; reg224=reg37*reg224; reg312=vectors[0][indices[4]+1]*reg312; reg148=reg138*reg148; reg268=reg37*reg268;
    reg296=reg241+reg296; reg354=reg351-reg354; reg371=reg37*reg371; reg272=reg172*reg272; reg253=ponderation*reg253;
    reg342=reg343-reg342; reg315=reg150*reg315; reg297=ponderation*reg297; reg388=vectors[0][indices[4]+1]*reg388; reg337=reg37*reg337;
    reg325=reg37*reg325; reg280=reg208+reg280; reg190=reg285-reg190; reg308=reg182+reg308; reg341=reg133*reg341;
    reg173=vectors[0][indices[4]+1]*reg173; reg182=reg169*reg277; reg374=vectors[0][indices[4]+1]*reg374; reg283=reg181+reg283; reg271=reg345+reg271;
    reg335=vectors[0][indices[4]+1]*reg335; reg336=ponderation*reg336; reg259=ponderation*reg259; reg188=reg379+reg188; reg337=ponderation*reg337;
    reg395=reg37*reg395; reg181=reg185*reg233; reg253=vectors[0][indices[4]+2]*reg253; reg369=reg183+reg369; reg269=reg37*reg269;
    reg183=reg128*reg207; reg218=vectors[0][indices[4]+2]*reg218; reg298=vectors[0][indices[4]+2]*reg298; reg367=reg357+reg367; reg208=reg91*reg111;
    reg241=reg143*reg108; reg285=reg112*reg233; reg259=vectors[0][indices[4]+2]*reg259; reg189=reg310+reg189; reg265=reg296+reg265;
    reg268=ponderation*reg268; reg296=reg151*reg91; reg256=ponderation*reg256; reg200=ponderation*reg200; reg310=reg167*reg45;
    reg291=reg262+reg291; reg262=reg135*reg99; reg318=reg168*reg233; reg343=reg91*reg170; reg403=reg37*reg403;
    reg392=ponderation*reg392; reg363=reg192-reg363; reg404=reg346+reg404; reg192=reg160*reg350; reg328=reg178-reg328;
    reg178=reg135*reg207; reg345=reg162*reg91; reg346=reg163*reg233; reg236=reg260+reg236; reg400=reg37*reg400;
    reg371=ponderation*reg371; reg299=reg348+reg299; reg260=reg164*reg350; reg145=reg37*reg145; reg351=reg125*reg207;
    reg357=reg168*reg350; reg382=reg187+reg382; reg251=reg240-reg251; reg359=ponderation*reg359; reg331=reg334-reg331;
    reg187=reg91*reg125; reg334=reg88*reg277; reg361=reg91*reg121; reg377=reg196*reg233; reg321=ponderation*reg321;
    reg387=reg168*reg277; reg194=ponderation*reg194; reg396=reg88*reg350; reg401=reg121*reg207; reg234=reg365+reg234;
    reg254=reg311+reg254; reg397=ponderation*reg397; reg223=reg37*reg223; reg300=vectors[0][indices[4]+2]*reg300; reg249=reg37*reg249;
    reg213=vectors[0][indices[4]+2]*reg213; reg311=reg159*reg233; reg221=vectors[0][indices[4]+2]*reg221; reg288=vectors[0][indices[4]+2]*reg288; reg374=reg280+reg374;
    reg280=reg174*reg233; reg235=ponderation*reg235; reg352=vectors[0][indices[4]+2]*reg352; reg252=vectors[0][indices[4]+2]*reg252; reg338=reg295+reg338;
    reg341=reg182+reg341; reg278=reg37*reg278; reg336=vectors[0][indices[4]+2]*reg336; reg203=reg306-reg203; reg295=reg112*reg277;
    reg306=reg91*reg81; reg342=reg37*reg342; reg365=reg91*reg149; reg402=reg165*reg277; reg211=reg313+reg211;
    reg173=reg308+reg173; reg316=reg37*reg316; reg386=reg339+reg386; reg335=reg271+reg335; reg293=vectors[0][indices[4]+2]*reg293;
    reg267=reg375+reg267; reg271=reg198*reg233; reg302=reg317+reg302; reg219=ponderation*reg219; reg308=reg172*reg233;
    reg237=ponderation*reg237; reg394=reg398+reg394; reg222=reg220+reg222; reg239=reg37*reg239; reg327=vectors[0][indices[4]+2]*reg327;
    reg313=reg160*reg233; reg339=reg91*reg143; reg358=ponderation*reg358; reg333=reg344+reg333; reg250=reg176+reg250;
    reg297=vectors[0][indices[4]+2]*reg297; reg314=reg330+reg314; reg242=vectors[0][indices[4]+2]*reg242; reg238=reg261-reg238; reg176=reg150*reg233;
    reg243=reg37*reg243; reg261=reg160*reg277; reg362=reg225+reg362; reg279=vectors[0][indices[4]+2]*reg279; reg388=reg399+reg388;
    reg294=vectors[0][indices[4]+2]*reg294; reg325=ponderation*reg325; reg210=reg37*reg210; reg190=reg190*reg37; reg177=reg216+reg177;
    reg179=vectors[0][indices[4]+2]*reg179; reg202=vectors[0][indices[4]+2]*reg202; reg385=reg37*reg385; reg197=reg229-reg197; reg216=reg165*reg350;
    reg186=reg380+reg186; reg309=vectors[0][indices[4]+2]*reg309; reg225=reg149*reg207; reg206=vectors[0][indices[4]+2]*reg206; reg229=reg159*reg350;
    reg330=reg134*reg207; reg344=reg134*reg91; reg375=reg159*reg277; reg166=reg303-reg166; reg303=reg164*reg233;
    reg380=reg153*reg91; reg378=reg37*reg378; reg398=reg112*reg350; reg230=reg283-reg230; reg231=ponderation*reg231;
    reg227=ponderation*reg227; reg255=ponderation*reg255; reg246=reg246-reg282; reg368=vectors[0][indices[4]+2]*reg368; reg326=reg322+reg326;
    reg244=reg258+reg244; reg248=reg320+reg248; reg258=reg131*reg207; reg283=vectors[0][indices[4]+2]*reg323; reg224=ponderation*reg224;
    reg320=reg88*reg233; reg312=reg273+reg312; reg273=reg91*reg147; reg370=vectors[0][indices[4]+2]*reg370; reg305=reg373-reg305;
    reg184=reg37*reg184; reg214=reg228-reg214; reg207=reg81*reg207; reg393=reg319+reg393; reg228=reg164*reg277;
    reg347=reg37*reg347; reg360=reg289+reg360; reg289=reg131*reg91; reg315=reg257-reg315; reg257=reg163*reg277;
    reg319=reg128*reg91; reg247=reg37*reg247; reg322=reg165*reg233; reg372=ponderation*reg372; reg373=reg142*reg91;
    reg399=reg135*reg57; reg364=reg266+reg364; reg340=ponderation*reg340; reg349=reg332+reg349; reg180=reg37*reg180;
    reg389=reg37*reg389; reg354=reg37*reg354; reg366=reg286+reg366; reg272=reg148+reg272; reg391=reg390+reg391;
    reg148=reg175*reg233; reg264=reg232-reg264; reg353=reg292+reg353; reg155=ponderation*reg155; reg91=reg135*reg91;
    reg284=ponderation*reg284; reg232=reg163*reg350; reg274=ponderation*reg274; reg281=reg37*reg281; reg384=reg37*reg384;
    reg266=reg195*reg233; reg359=vectors[0][indices[5]+0]*reg359; reg213=reg312+reg213; reg206=reg267+reg206; reg352=reg248+reg352;
    reg194=vectors[0][indices[5]+0]*reg194; reg337=vectors[0][indices[5]+0]*reg337; reg219=vectors[0][indices[5]+0]*reg219; reg336=reg189+reg336; reg259=reg173+reg259;
    reg235=vectors[0][indices[5]+0]*reg235; reg242=reg314+reg242; reg224=vectors[0][indices[5]+0]*reg224; reg370=reg360+reg370; reg283=reg353-reg283;
    reg173=vectors[0][indices[5]+0]*reg227; reg368=reg244+reg368; reg237=vectors[0][indices[5]+0]*reg237; reg189=vectors[0][indices[5]+0]*reg392; reg279=reg362+reg279;
    reg321=vectors[0][indices[5]+0]*reg321; reg297=reg250+reg297; reg327=reg333+reg327; reg274=vectors[0][indices[5]+0]*reg274; reg244=reg158*reg350;
    reg371=vectors[0][indices[5]+0]*reg371; reg248=vectors[0][indices[5]+0]*reg256; reg179=reg177+reg179; reg293=reg335+reg293; reg340=vectors[0][indices[5]+0]*reg340;
    reg309=reg186+reg309; reg177=reg114*reg262; reg202=reg386+reg202; reg268=vectors[0][indices[5]+0]*reg268; reg294=reg388+reg294;
    reg284=vectors[0][indices[5]+0]*reg284; reg349=reg349*reg37; reg255=vectors[0][indices[5]+0]*reg255; reg200=vectors[0][indices[5]+0]*reg200; reg299=reg299+reg181;
    reg358=vectors[0][indices[5]+0]*reg358; reg252=reg338+reg252; reg253=reg236+reg253; reg372=vectors[0][indices[5]+0]*reg372; reg300=reg382+reg300;
    reg155=vectors[0][indices[5]+0]*reg155; reg190=ponderation*reg190; reg221=reg265+reg221; reg288=reg374+reg288; reg397=vectors[0][indices[5]+0]*reg397;
    reg298=reg369+reg298; reg218=reg367+reg218; reg231=vectors[0][indices[5]+0]*reg231; reg325=vectors[0][indices[5]+0]*reg325; reg400=ponderation*reg400;
    reg363=reg37*reg363; reg318=reg343+reg318; reg186=reg170*reg399; reg236=reg167*reg233; reg250=reg170*reg241;
    reg328=reg37*reg328; reg311=reg296+reg311; reg265=reg144*reg262; reg267=reg167*reg350; reg211=reg37*reg211;
    reg391=reg391+reg148; reg365=reg402-reg365; reg366=reg37*reg366; reg180=ponderation*reg180; reg389=ponderation*reg389;
    reg364=reg37*reg364; reg322=reg373+reg322; reg286=reg142*reg399; reg292=reg156*reg233; reg296=reg151*reg399;
    reg312=reg158*reg233; reg314=reg142*reg241; reg332=reg151*reg241; reg333=reg154*reg262; reg378=ponderation*reg378;
    reg166=reg37*reg166; reg403=ponderation*reg403; reg344=reg375+reg344; reg269=ponderation*reg269; reg315=reg37*reg315;
    reg330=reg330+reg229; reg246=reg246+reg266; reg335=reg127*reg262; reg338=reg156*reg350; reg258=reg258-reg232;
    reg257=reg289-reg257; reg393=reg37*reg393; reg184=ponderation*reg184; reg305=reg37*reg305; reg289=reg143*reg57;
    reg343=reg168*reg45; reg353=reg60*reg350; reg310=2*reg310; reg249=ponderation*reg249; reg272=reg37*reg272;
    reg222=reg222+reg308; reg360=reg157*reg350; reg362=reg138*reg262; reg367=reg147*reg241; reg369=reg157*reg233;
    reg373=reg147*reg399; reg320=reg273+reg320; reg214=reg37*reg214; reg347=ponderation*reg347; reg295=reg306+reg295;
    reg385=ponderation*reg385; reg197=reg37*reg197; reg91=reg261+reg91; reg178=reg192+reg178; reg145=ponderation*reg145;
    reg331=reg37*reg331; reg361=reg334+reg361; reg401=reg396+reg401; reg261=reg161*reg350; reg251=reg251-reg377;
    reg326=reg37*reg326; reg247=ponderation*reg247; reg278=ponderation*reg278; reg254=reg37*reg254; reg188=reg188+reg176;
    reg342=ponderation*reg342; reg234=reg37*reg234; reg273=reg143*reg241; reg341=reg341+reg280; reg306=reg169*reg350;
    reg334=reg169*reg233; reg374=reg143*reg399; reg375=reg133*reg262; reg313=reg339+reg313; reg238=reg37*reg238;
    reg243=ponderation*reg243; reg339=reg92*reg262; reg316=ponderation*reg316; reg382=reg162*reg399; reg386=reg162*reg241;
    reg388=reg144*reg108; reg210=ponderation*reg210; reg285=reg208+reg285; reg239=ponderation*reg239; reg394=reg37*reg394;
    reg208=reg153*reg241; reg402=reg171*reg233; T reg405=reg153*reg399; reg303=reg380+reg303; reg230=reg37*reg230;
    reg354=ponderation*reg354; reg45=reg175*reg45; reg395=ponderation*reg395; reg203=reg37*reg203; reg302=reg302+reg271;
    reg187=reg387+reg187; reg351=reg357+reg351; reg380=reg171*reg350; reg262=reg123*reg262; reg183=reg260+reg183;
    reg225=reg216-reg225; reg281=ponderation*reg281; reg319=reg228+reg319; reg264=reg37*reg264; reg384=ponderation*reg384;
    reg404=reg37*reg404; reg399=reg111*reg399; reg346=reg345+reg346; reg228=reg60*reg233; reg291=reg37*reg291;
    reg223=ponderation*reg223; reg241=reg111*reg241; reg207=reg207+reg398; reg233=reg161*reg233; reg369=reg373+reg369;
    reg345=reg128*reg289; reg367=reg396+reg367; reg373=reg133*reg388; reg387=reg169*reg310; reg396=reg174*reg350;
    T reg406=reg198*reg277; reg177=reg244+reg177; reg255=reg213+reg255; reg378=vectors[0][indices[5]+1]*reg378; reg213=reg123*reg388;
    reg189=reg279-reg189; reg244=reg171*reg310; reg279=reg198*reg350; T reg407=reg123*reg289; reg281=vectors[0][indices[5]+1]*reg281;
    reg262=reg380+reg262; reg173=reg283-reg173; reg283=reg133*reg289; reg247=vectors[0][indices[5]+1]*reg247; reg375=reg306+reg375;
    reg325=reg218+reg325; reg384=vectors[0][indices[5]+1]*reg384; reg302=reg37*reg302; reg403=vectors[0][indices[5]+1]*reg403; reg341=reg37*reg341;
    reg145=vectors[0][indices[5]+1]*reg145; reg401=reg308+reg401; reg207=reg176+reg207; reg176=reg121*reg289; reg45=2*reg45;
    reg274=reg327+reg274; reg218=reg172*reg277; reg306=reg174*reg277; reg308=reg135*reg289; reg178=reg280+reg178;
    reg404=ponderation*reg404; reg231=reg288+reg231; reg190=reg190*vectors[0][indices[5]+1]; reg280=vectors[0][indices[5]+1]*reg389; reg155=reg300+reg155;
    reg91=reg37*reg91; reg288=reg125*reg108; reg197=ponderation*reg197; reg264=ponderation*reg264; reg305=ponderation*reg305;
    reg353=reg339+reg353; reg319=reg37*reg319; reg315=ponderation*reg315; reg346=reg37*reg346; reg214=ponderation*reg214;
    reg291=ponderation*reg291; reg320=reg37*reg320; reg183=reg271+reg183; reg271=vectors[0][indices[5]+1]*reg184; reg300=reg127*reg388;
    reg327=reg156*reg310; reg402=reg405+reg402; reg339=reg196*reg277; reg322=reg37*reg322; reg394=ponderation*reg394;
    reg364=ponderation*reg364; reg380=reg131*reg289; reg377=reg258-reg377; reg365=reg37*reg365; reg254=ponderation*reg254;
    reg285=reg37*reg285; reg257=reg37*reg257; reg224=reg370+reg224; reg211=ponderation*reg211; reg258=reg150*reg277;
    reg347=vectors[0][indices[5]+1]*reg347; reg284=reg202+reg284; reg202=reg60*reg310; reg208=reg260+reg208; reg260=reg92*reg388;
    reg358=reg252+reg358; reg239=vectors[0][indices[5]+1]*reg239; reg299=reg299*reg37; reg386=reg232+reg386; reg337=reg336+reg337;
    reg316=vectors[0][indices[5]+1]*reg316; reg354=vectors[0][indices[5]+1]*reg354; reg248=reg179-reg248; reg234=ponderation*reg234; reg343=2*reg343;
    reg235=reg242+reg235; reg179=reg92*reg289; reg246=reg37*reg246; reg382=reg233-reg382; reg295=reg37*reg295;
    reg393=ponderation*reg393; reg232=reg150*reg350; reg349=ponderation*reg349; reg233=vectors[0][indices[5]+1]*reg223; reg200=reg221+reg200;
    reg326=ponderation*reg326; reg338=reg335-reg338; reg321=reg297+reg321; reg249=vectors[0][indices[5]+1]*reg249; reg251=reg37*reg251;
    reg221=reg127*reg289; reg230=ponderation*reg230; reg333=reg261-reg333; reg242=reg154*reg289; reg252=reg196*reg350;
    reg261=reg195*reg350; reg297=reg161*reg310; reg335=reg154*reg388; reg314=reg216+reg314; reg303=reg37*reg303;
    reg292=reg286-reg292; reg313=reg37*reg313; reg203=ponderation*reg203; reg187=reg37*reg187; reg216=reg138*reg289;
    reg286=reg172*reg350; reg334=reg374+reg334; reg336=reg144*reg99; reg194=reg259+reg194; reg269=vectors[0][indices[5]+1]*reg269;
    reg259=reg144*reg388; reg312=reg296+reg312; reg344=reg37*reg344; reg351=reg148+reg351; reg148=reg157*reg310;
    reg296=reg138*reg388; reg372=reg253+reg372; reg219=reg352+reg219; reg243=vectors[0][indices[5]+1]*reg243; reg253=reg125*reg289;
    reg236=reg186+reg236; reg250=reg357+reg250; reg332=reg229+reg332; reg330=reg181+reg330; reg318=reg37*reg318;
    reg273=reg192+reg273; reg238=ponderation*reg238; reg272=ponderation*reg272; reg181=reg134*reg289; reg388=reg114*reg388;
    reg186=reg158*reg310; reg222=reg37*reg222; reg192=reg185*reg277; reg362=reg360+reg362; reg363=ponderation*reg363;
    reg371=reg293+reg371; reg278=vectors[0][indices[5]+1]*reg278; reg229=reg185*reg350; reg293=reg114*reg289; reg342=vectors[0][indices[5]+1]*reg342;
    reg268=reg294+reg268; reg350=reg175*reg350; reg294=reg144*reg289; reg241=reg398+reg241; reg340=reg309+reg340;
    reg266=reg225+reg266; reg237=reg368+reg237; reg359=reg206+reg359; reg206=reg81*reg289; reg400=vectors[0][indices[5]+1]*reg400;
    reg210=vectors[0][indices[5]+1]*reg210; reg331=ponderation*reg331; reg395=vectors[0][indices[5]+1]*reg395; reg397=reg298+reg397; reg361=reg37*reg361;
    reg225=reg175*reg277; reg298=reg167*reg310; reg385=vectors[0][indices[5]+1]*reg385; reg166=ponderation*reg166; reg311=reg37*reg311;
    reg366=ponderation*reg366; reg391=reg37*reg391; reg289=reg149*reg289; reg228=reg399+reg228; reg265=reg267+reg265;
    reg328=ponderation*reg328; reg277=reg195*reg277; reg180=vectors[0][indices[5]+1]*reg180; reg188=reg37*reg188; reg207=reg37*reg207;
    reg188=ponderation*reg188; reg344=ponderation*reg344; reg179=reg232+reg179; reg232=reg81*reg288; reg285=ponderation*reg285;
    reg241=reg379+reg241; reg346=ponderation*reg346; reg267=reg81*reg336; reg309=reg159*reg310; reg192=reg181+reg192;
    reg254=vectors[0][indices[5]+2]*reg254; reg210=reg237+reg210; reg265=reg37*reg265; reg257=ponderation*reg257; reg377=reg37*reg377;
    reg350=reg294+reg350; reg339=reg380-reg339; reg181=reg131*reg336; reg237=reg163*reg310; reg294=reg195*reg45;
    reg300=reg300-reg327; reg180=reg340+reg180; reg340=reg131*reg288; reg261=reg221+reg261; reg259=reg298+reg259;
    reg221=reg163*reg343; reg338=reg37*reg338; reg352=reg175*reg45; reg366=vectors[0][indices[5]+2]*reg366; reg246=ponderation*reg246;
    reg145=reg235+reg145; reg331=vectors[0][indices[5]+2]*reg331; reg264=vectors[0][indices[5]+2]*reg264; reg384=reg325+reg384; reg330=reg37*reg330;
    reg248=reg403+reg248; reg187=ponderation*reg187; reg351=reg37*reg351; reg302=ponderation*reg302; reg235=reg165*reg310;
    reg225=reg253+reg225; reg173=reg247+reg173; reg247=vectors[0][indices[5]+2]*reg326; reg262=reg37*reg262; reg289=reg277-reg289;
    reg253=reg168*reg310; reg279=reg407+reg279; reg277=reg125*reg336; reg213=reg244+reg213; reg325=reg198*reg45;
    reg357=reg128*reg288; reg360=reg164*reg343; reg368=reg128*reg336; reg370=reg164*reg310; reg271=reg274-reg271;
    reg393=vectors[0][indices[5]+2]*reg393; reg406=reg345+reg406; reg274=reg168*reg343; reg345=reg125*reg288; reg183=reg37*reg183;
    reg266=reg37*reg266; reg319=ponderation*reg319; reg400=reg359+reg400; reg363=vectors[0][indices[5]+2]*reg363; reg260=reg202+reg260;
    reg177=reg177*reg37; reg99=reg125*reg99; reg228=reg37*reg228; reg382=reg37*reg382; reg395=reg397+reg395;
    reg203=vectors[0][indices[5]+2]*reg203; reg394=vectors[0][indices[5]+2]*reg394; reg239=reg358+reg239; reg358=reg168*reg45; reg359=reg170*reg336;
    reg374=reg164*reg45; reg379=reg153*reg336; reg386=reg240-reg386; reg208=reg317+reg208; reg250=reg390+reg250;
    reg347=reg284+reg347; reg214=vectors[0][indices[5]+2]*reg214; reg240=reg162*reg336; reg284=reg163*reg45; reg236=reg37*reg236;
    reg317=reg149*reg288; reg380=reg185*reg45; reg318=ponderation*reg318; reg299=ponderation*reg299; reg402=reg37*reg402;
    reg388=reg186+reg388; reg303=ponderation*reg303; reg390=reg165*reg343; reg229=reg293+reg229; reg293=reg149*reg336;
    reg397=reg112*reg45; reg295=ponderation*reg295; reg206=reg258+reg206; reg258=vectors[0][indices[5]+2]*reg404; reg286=reg216+reg286;
    reg369=reg37*reg369; reg216=reg174*reg45; reg373=reg387+reg373; reg362=reg37*reg362; reg398=vectors[0][indices[5]+2]*reg211;
    reg396=reg283+reg396; reg222=ponderation*reg222; reg378=reg255+reg378; reg166=vectors[0][indices[5]+2]*reg166; reg189=reg281+reg189;
    reg367=reg220+reg367; reg220=reg147*reg336; reg255=reg88*reg45; reg353=reg37*reg353; reg281=reg112*reg310;
    reg283=reg111*reg336; reg375=reg37*reg375; reg313=ponderation*reg313; reg341=ponderation*reg341; reg334=reg37*reg334;
    reg385=reg219+reg385; reg197=vectors[0][indices[5]+2]*reg197; reg219=reg125*reg57; reg233=reg200-reg233; reg291=vectors[0][indices[5]+2]*reg291;
    reg200=reg159*reg45; reg399=reg151*reg336; reg361=ponderation*reg361; reg403=reg135*reg288; reg405=reg160*reg343;
    reg401=reg37*reg401; reg407=reg135*reg336; T reg408=reg160*reg310; reg218=reg176+reg218; reg306=reg308+reg306;
    reg108=reg170*reg108; reg178=reg37*reg178; reg176=reg112*reg343; reg190=reg231+reg190; reg349=reg349*vectors[0][indices[5]+2];
    reg231=reg88*reg310; reg308=reg121*reg336; reg280=reg155-reg280; reg364=vectors[0][indices[5]+2]*reg364; reg342=reg268+reg342;
    reg234=vectors[0][indices[5]+2]*reg234; reg155=reg88*reg343; reg268=reg121*reg288; reg91=ponderation*reg91; T reg409=reg172*reg45;
    reg296=reg148+reg296; reg305=vectors[0][indices[5]+2]*reg305; reg269=reg194+reg269; reg320=ponderation*reg320; reg278=reg371+reg278;
    reg251=ponderation*reg251; reg194=reg150*reg45; reg333=reg37*reg333; reg273=reg182+reg273; reg252=reg242+reg252;
    reg391=ponderation*reg391; reg365=ponderation*reg365; reg182=reg143*reg336; reg242=reg160*reg45; reg371=reg142*reg336;
    reg335=reg297-reg335; reg238=vectors[0][indices[5]+2]*reg238; T reg410=reg196*reg45; reg282=reg314-reg282; reg243=reg372+reg243;
    reg312=reg37*reg312; reg292=reg37*reg292; reg311=ponderation*reg311; reg322=ponderation*reg322; reg288=reg134*reg288;
    reg354=reg224+reg354; reg230=vectors[0][indices[5]+2]*reg230; reg224=reg159*reg343; reg249=reg321+reg249; reg315=vectors[0][indices[5]+2]*reg315;
    reg272=vectors[0][indices[5]+2]*reg272; reg316=reg337+reg316; reg336=reg134*reg336; reg314=reg165*reg45; reg332=reg348+reg332;
    reg328=vectors[0][indices[5]+2]*reg328; reg268=reg155+reg268; reg262=ponderation*reg262; reg401=ponderation*reg401; reg363=reg400+reg363;
    reg232=reg176+reg232; reg289=reg37*reg289; reg286=reg37*reg286; reg234=reg342+reg234; reg336=reg309+reg336;
    reg341=vectors[0][indices[6]+0]*reg341; reg318=vectors[0][indices[6]+0]*reg318; reg237=reg181-reg237; reg192=reg37*reg192; reg181=reg138*reg99;
    reg309=reg157*reg343; reg296=reg296+reg409; reg321=reg60*reg45; reg266=ponderation*reg266; reg230=reg354+reg230;
    reg288=reg224+reg288; reg303=vectors[0][indices[6]+0]*reg303; reg377=ponderation*reg377; reg218=reg37*reg218; reg337=reg154*reg99;
    reg342=reg111*reg108; reg271=reg393+reg271; reg257=vectors[0][indices[6]+0]*reg257; reg322=vectors[0][indices[6]+0]*reg322; reg280=reg364+reg280;
    reg348=reg161*reg343; reg354=reg123*reg99; reg364=reg171*reg343; reg213=reg213+reg325; reg339=reg37*reg339;
    reg308=reg231+reg308; reg279=reg37*reg279; reg313=vectors[0][indices[6]+0]*reg313; reg238=reg243+reg238; reg284=reg240+reg284;
    reg264=reg384+reg264; reg333=ponderation*reg333; reg340=reg340-reg221; reg187=vectors[0][indices[6]+0]*reg187; reg179=reg37*reg179;
    reg386=reg37*reg386; reg197=reg385+reg197; reg241=reg37*reg241; reg91=vectors[0][indices[6]+0]*reg91; reg206=reg37*reg206;
    reg394=reg239+reg394; reg302=vectors[0][indices[6]+0]*reg302; reg203=reg395+reg203; reg231=reg111*reg219; reg239=reg151*reg108;
    reg382=ponderation*reg382; reg240=reg158*reg45; reg243=reg151*reg219; reg246=vectors[0][indices[6]+0]*reg246; reg233=reg291+reg233;
    reg228=ponderation*reg228; reg57=reg170*reg57; reg200=reg399+reg200; reg332=reg37*reg332; reg335=reg335-reg410;
    reg291=vectors[0][indices[6]+0]*reg346; reg258=reg248-reg258; reg369=ponderation*reg369; reg398=reg189-reg398; reg312=ponderation*reg312;
    reg362=ponderation*reg362; reg365=vectors[0][indices[6]+0]*reg365; reg293=reg235-reg293; reg366=reg180+reg366; reg391=vectors[0][indices[6]+0]*reg391;
    reg330=ponderation*reg330; reg180=reg92*reg99; reg367=reg37*reg367; reg252=reg37*reg252; reg319=vectors[0][indices[6]+0]*reg319;
    reg255=reg220+reg255; reg353=ponderation*reg353; reg189=reg147*reg219; reg220=reg157*reg45; reg317=reg390-reg317;
    reg235=reg147*reg108; reg248=reg162*reg108; reg372=reg162*reg219; reg384=reg161*reg45; reg178=ponderation*reg178;
    reg306=reg37*reg306; reg407=reg408+reg407; reg385=reg153*reg108; reg403=reg405+reg403; reg345=reg274+reg345;
    reg393=reg171*reg45; reg395=reg153*reg219; reg374=reg379+reg374; reg285=vectors[0][indices[6]+0]*reg285; reg208=reg37*reg208;
    reg214=reg347+reg214; reg320=vectors[0][indices[6]+0]*reg320; reg305=reg269+reg305; reg277=reg253+reg277; reg225=reg37*reg225;
    reg351=ponderation*reg351; reg177=ponderation*reg177; reg229=reg37*reg229; reg388=reg388+reg380; reg236=ponderation*reg236;
    reg334=ponderation*reg334; reg402=ponderation*reg402; reg295=vectors[0][indices[6]+0]*reg295; reg315=reg278+reg315; reg273=reg37*reg273;
    reg242=reg182+reg242; reg222=vectors[0][indices[6]+0]*reg222; reg272=reg316+reg272; reg292=ponderation*reg292; reg282=reg37*reg282;
    reg311=vectors[0][indices[6]+0]*reg311; reg328=reg249+reg328; reg314=reg371+reg314; reg182=reg142*reg219; reg249=reg156*reg343;
    reg253=reg127*reg99; reg269=reg156*reg45; reg300=reg300+reg294; reg278=reg142*reg108; reg261=reg37*reg261;
    reg338=ponderation*reg338; reg260=reg194+reg260; reg375=ponderation*reg375; reg316=reg60*reg343; reg331=reg145+reg331;
    reg361=vectors[0][indices[6]+0]*reg361; reg344=vectors[0][indices[6]+0]*reg344; reg166=reg378+reg166; reg396=reg37*reg396; reg373=reg373+reg216;
    reg145=reg169*reg343; reg347=reg133*reg99; reg299=reg299*vectors[0][indices[6]+0]; reg349=reg190+reg349; reg267=reg281+reg267;
    reg357=reg360+reg357; reg190=reg143*reg108; reg406=reg37*reg406; reg259=reg259+reg352; reg368=reg370+reg368;
    reg358=reg359+reg358; reg350=reg37*reg350; reg281=reg170*reg219; reg359=reg114*reg99; reg370=reg158*reg343;
    reg251=vectors[0][indices[6]+0]*reg251; reg371=reg167*reg45; reg247=reg173-reg247; reg265=ponderation*reg265; reg254=reg210+reg254;
    reg108=reg170*reg108; reg188=vectors[0][indices[6]+0]*reg188; reg250=reg37*reg250; reg183=ponderation*reg183; reg207=ponderation*reg207;
    reg219=reg143*reg219; reg283=reg397+reg283; reg173=reg167*reg343; reg99=reg144*reg99; reg45=reg169*reg45;
    reg235=reg155+reg235; reg220=reg189+reg220; reg255=reg37*reg255; reg155=reg125*reg57; reg367=ponderation*reg367;
    reg330=vectors[0][indices[6]+1]*reg330; reg344=reg166+reg344; reg206=ponderation*reg206; reg166=reg175*reg310; reg189=reg174*reg343;
    reg210=reg133*reg57; reg347=reg145+reg347; reg99=reg173+reg99; reg359=reg370+reg359; reg145=reg175*reg343;
    reg373=reg37*reg373; reg396=ponderation*reg396; reg266=vectors[0][indices[6]+1]*reg266; reg173=reg144*reg57; reg398=reg365+reg398;
    reg351=vectors[0][indices[6]+1]*reg351; reg303=reg230+reg303; reg402=vectors[0][indices[6]+1]*reg402; reg230=reg196*reg343; reg365=reg154*reg57;
    reg337=reg348-reg337; reg180=reg316+reg180; reg260=reg37*reg260; reg335=reg37*reg335; reg282=ponderation*reg282;
    reg236=vectors[0][indices[6]+1]*reg236; reg252=ponderation*reg252; reg312=vectors[0][indices[6]+1]*reg312; reg311=reg328+reg311; reg187=reg203+reg187;
    reg314=reg37*reg314; reg250=ponderation*reg250; reg358=reg37*reg358; reg269=reg182-reg269; reg246=reg233+reg246;
    reg338=vectors[0][indices[6]+1]*reg338; reg318=reg363+reg318; reg371=reg281+reg371; reg182=reg150*reg343; reg203=reg92*reg57;
    reg278=reg390+reg278; reg241=ponderation*reg241; reg108=reg274+reg108; reg388=reg37*reg388; reg286=ponderation*reg286;
    reg288=reg380+reg288; reg233=reg134*reg57; reg277=reg37*reg277; reg225=ponderation*reg225; reg274=reg185*reg310;
    reg289=ponderation*reg289; reg321=reg231+reg321; reg267=reg37*reg267; reg334=vectors[0][indices[6]+1]*reg334; reg293=reg37*reg293;
    reg229=ponderation*reg229; reg313=reg238+reg313; reg190=reg405+reg190; reg294=reg317+reg294; reg231=reg195*reg310;
    reg91=reg197+reg91; reg178=vectors[0][indices[6]+1]*reg178; reg197=reg149*reg57; reg232=reg194+reg232; reg179=ponderation*reg179;
    reg239=reg224+reg239; reg45=reg219+reg45; reg240=reg243+reg240; reg200=reg37*reg200; reg207=vectors[0][indices[6]+1]*reg207;
    reg295=reg315+reg295; reg332=ponderation*reg332; reg273=ponderation*reg273; reg242=reg37*reg242; reg194=reg172*reg310;
    reg219=reg121*reg57; reg268=reg409+reg268; reg308=reg37*reg308; reg177=vectors[0][indices[6]+1]*reg177; reg299=reg349+reg299;
    reg322=reg280+reg322; reg292=vectors[0][indices[6]+1]*reg292; reg265=vectors[0][indices[6]+1]*reg265; reg391=reg366+reg391; reg218=ponderation*reg218;
    reg259=reg37*reg259; reg306=ponderation*reg306; reg350=ponderation*reg350; reg407=reg37*reg407; reg403=reg216+reg403;
    reg216=reg135*reg57; reg224=reg174*reg310; reg345=reg352+reg345; reg238=reg172*reg343; reg243=reg138*reg57;
    reg341=reg234+reg341; reg375=vectors[0][indices[6]+1]*reg375; reg181=reg309+reg181; reg296=reg37*reg296; reg192=ponderation*reg192;
    reg228=vectors[0][indices[6]+1]*reg228; reg285=reg305+reg285; reg188=reg254+reg188; reg353=vectors[0][indices[6]+1]*reg353; reg336=reg37*reg336;
    reg262=vectors[0][indices[6]+1]*reg262; reg333=vectors[0][indices[6]+1]*reg333; reg247=reg251+reg247; reg357=reg325+reg357; reg234=reg195*reg343;
    reg251=reg127*reg57; reg249=reg253-reg249; reg302=reg394+reg302; reg339=ponderation*reg339; reg393=reg395+reg393;
    reg300=reg37*reg300; reg261=ponderation*reg261; reg253=reg128*reg57; reg254=reg198*reg310; reg410=reg340-reg410;
    reg283=reg37*reg283; reg248=reg221+reg248; reg372=reg384-reg372; reg369=vectors[0][indices[6]+1]*reg369; reg284=reg37*reg284;
    reg320=reg214+reg320; reg386=ponderation*reg386; reg214=reg114*reg57; reg208=ponderation*reg208; reg221=reg81*reg57;
    reg374=reg37*reg374; reg183=vectors[0][indices[6]+1]*reg183; reg319=reg264+reg319; reg361=reg331+reg361; reg401=vectors[0][indices[6]+1]*reg401;
    reg291=reg258-reg291; reg237=reg37*reg237; reg382=vectors[0][indices[6]+1]*reg382; reg258=reg185*reg343; reg264=reg150*reg310;
    reg385=reg360+reg385; reg343=reg198*reg343; reg377=vectors[0][indices[6]+1]*reg377; reg280=reg123*reg57; reg257=reg271+reg257;
    reg368=reg37*reg368; reg406=ponderation*reg406; reg354=reg364+reg354; reg176=reg342+reg176; reg362=vectors[0][indices[6]+1]*reg362;
    reg310=reg196*reg310; reg57=reg131*reg57; reg213=reg37*reg213; reg279=ponderation*reg279; reg222=reg272+reg222;
    reg284=ponderation*reg284; reg229=vectors[0][indices[6]+2]*reg229; reg308=ponderation*reg308; reg369=reg320+reg369; reg177=reg299+reg177;
    reg268=reg37*reg268; reg372=reg37*reg372; reg292=reg322+reg292; reg282=vectors[0][indices[6]+2]*reg282; reg258=reg214+reg258;
    reg279=vectors[0][indices[6]+2]*reg279; reg262=reg302+reg262; reg238=reg243+reg238; reg345=reg37*reg345; reg375=reg341+reg375;
    reg396=vectors[0][indices[6]+2]*reg396; reg277=ponderation*reg277; reg181=reg37*reg181; reg203=reg182+reg203; reg224=reg216+reg224;
    reg296=ponderation*reg296; reg403=reg37*reg403; reg393=reg37*reg393; reg407=ponderation*reg407; reg241=vectors[0][indices[6]+2]*reg241;
    reg228=reg285+reg228; reg385=reg244+reg385; reg232=reg37*reg232; reg374=ponderation*reg374; reg179=vectors[0][indices[6]+2]*reg179;
    reg336=ponderation*reg336; reg333=reg247+reg333; reg353=reg188+reg353; reg182=vectors[0][indices[6]+2]*reg252; reg213=ponderation*reg213;
    reg259=ponderation*reg259; reg265=reg391+reg265; reg350=vectors[0][indices[6]+2]*reg350; reg354=reg37*reg354; reg99=reg37*reg99;
    reg343=reg280+reg343; reg145=reg173+reg145; reg359=reg37*reg359; reg368=ponderation*reg368; reg388=ponderation*reg388;
    reg108=reg298+reg108; reg371=reg37*reg371; reg339=vectors[0][indices[6]+2]*reg339; reg377=reg257+reg377; reg358=ponderation*reg358;
    reg180=reg37*reg180; reg351=reg187+reg351; reg225=vectors[0][indices[6]+2]*reg225; reg264=reg221+reg264; reg367=vectors[0][indices[6]+2]*reg367;
    reg293=ponderation*reg293; reg248=reg297-reg248; reg294=reg37*reg294; reg283=ponderation*reg283; reg178=reg91+reg178;
    reg306=vectors[0][indices[6]+2]*reg306; reg239=reg186+reg239; reg240=reg37*reg240; reg206=vectors[0][indices[6]+2]*reg206; reg200=ponderation*reg200;
    reg207=reg295+reg207; reg386=vectors[0][indices[6]+2]*reg386; reg291=reg382+reg291; reg242=ponderation*reg242; reg45=reg37*reg45;
    reg254=reg253+reg254; reg190=reg387+reg190; reg334=reg313+reg334; reg273=vectors[0][indices[6]+2]*reg273; reg197=reg231-reg197;
    reg357=reg37*reg357; reg321=reg37*reg321; reg274=reg233+reg274; reg288=reg37*reg288; reg330=reg344+reg330;
    reg401=reg361+reg401; reg218=vectors[0][indices[6]+2]*reg218; reg335=ponderation*reg335; reg189=reg210+reg189; reg410=reg37*reg410;
    reg260=ponderation*reg260; reg250=vectors[0][indices[6]+2]*reg250; reg266=reg398+reg266; reg267=ponderation*reg267; reg289=vectors[0][indices[6]+2]*reg289;
    reg347=reg37*reg347; reg332=vectors[0][indices[6]+2]*reg332; reg312=reg311+reg312; reg310=reg57-reg310; reg373=ponderation*reg373;
    reg327=reg278-reg327; reg234=reg251+reg234; reg237=ponderation*reg237; reg249=reg37*reg249; reg314=ponderation*reg314;
    reg300=ponderation*reg300; reg261=vectors[0][indices[6]+2]*reg261; reg269=reg37*reg269; reg338=reg246+reg338; reg235=reg148+reg235;
    reg402=reg303+reg402; reg208=vectors[0][indices[6]+2]*reg208; reg220=reg37*reg220; reg236=reg318+reg236; reg194=reg219+reg194;
    reg255=ponderation*reg255; reg230=reg365+reg230; reg176=reg202+reg176; reg166=reg155+reg166; reg183=reg319+reg183;
    reg337=reg37*reg337; reg192=vectors[0][indices[6]+2]*reg192; reg362=reg222+reg362; reg406=vectors[0][indices[6]+2]*reg406; reg286=vectors[0][indices[6]+2]*reg286;
    reg294=ponderation*reg294; reg235=reg37*reg235; reg190=reg37*reg190; reg261=reg338+reg261; reg300=vectors[0][indices[7]+0]*reg300;
    reg254=reg37*reg254; reg255=vectors[0][indices[7]+0]*reg255; reg45=ponderation*reg45; reg180=ponderation*reg180; reg327=reg37*reg327;
    reg250=reg236+reg250; reg240=ponderation*reg240; reg232=ponderation*reg232; reg206=reg207+reg206; reg306=reg178+reg306;
    reg407=vectors[0][indices[7]+0]*reg407; reg386=reg291+reg386; reg239=reg37*reg239; reg57=vectors[0][indices[7]+0]*reg284; reg267=vectors[0][indices[7]+0]*reg267;
    reg296=vectors[0][indices[7]+0]*reg296; reg99=ponderation*reg99; reg286=reg362+reg286; reg337=ponderation*reg337; reg145=reg37*reg145;
    reg359=ponderation*reg359; reg343=reg37*reg343; reg108=reg37*reg108; reg230=reg37*reg230; reg203=reg37*reg203;
    reg237=vectors[0][indices[7]+0]*reg237; reg371=ponderation*reg371; reg339=reg377+reg339; reg374=vectors[0][indices[7]+0]*reg374; reg208=reg402+reg208;
    reg225=reg351+reg225; reg277=vectors[0][indices[7]+0]*reg277; reg234=reg37*reg234; reg269=ponderation*reg269; reg273=reg334+reg273;
    reg242=vectors[0][indices[7]+0]*reg242; reg197=reg37*reg197; reg357=ponderation*reg357; reg274=reg37*reg274; reg249=ponderation*reg249;
    reg258=reg37*reg258; reg288=ponderation*reg288; reg260=vectors[0][indices[7]+0]*reg260; reg179=reg353+reg179; reg332=reg312+reg332;
    reg200=vectors[0][indices[7]+0]*reg200; reg335=vectors[0][indices[7]+0]*reg335; reg182=reg333-reg182; reg350=reg265+reg350; reg259=vectors[0][indices[7]+0]*reg259;
    reg354=ponderation*reg354; reg218=reg401+reg218; reg241=reg228+reg241; reg283=vectors[0][indices[7]+0]*reg283; reg289=reg266+reg289;
    reg293=vectors[0][indices[7]+0]*reg293; reg373=vectors[0][indices[7]+0]*reg373; reg396=reg375+reg396; reg279=reg262+reg279; reg181=ponderation*reg181;
    reg213=vectors[0][indices[7]+0]*reg213; reg410=ponderation*reg410; reg238=reg37*reg238; reg264=reg37*reg264; reg321=ponderation*reg321;
    reg224=reg37*reg224; reg403=ponderation*reg403; reg347=ponderation*reg347; reg310=reg37*reg310; reg393=ponderation*reg393;
    reg189=reg37*reg189; reg385=reg37*reg385; reg166=reg37*reg166; reg345=ponderation*reg345; reg314=vectors[0][indices[7]+0]*reg314;
    reg282=reg292+reg282; reg176=reg37*reg176; reg358=vectors[0][indices[7]+0]*reg358; reg194=reg37*reg194; reg229=reg177+reg229;
    reg388=vectors[0][indices[7]+0]*reg388; reg308=vectors[0][indices[7]+0]*reg308; reg268=ponderation*reg268; reg220=ponderation*reg220; reg372=ponderation*reg372;
    reg406=reg183+reg406; reg368=vectors[0][indices[7]+0]*reg368; reg248=reg37*reg248; reg367=reg369+reg367; reg192=reg330+reg192;
    reg336=vectors[0][indices[7]+0]*reg336; reg189=ponderation*reg189; reg296=reg286+reg296; reg385=ponderation*reg385; reg220=vectors[0][indices[7]+1]*reg220;
    reg197=ponderation*reg197; reg99=vectors[0][indices[7]+1]*reg99; reg259=reg350+reg259; reg176=ponderation*reg176; reg181=vectors[0][indices[7]+1]*reg181;
    reg310=ponderation*reg310; reg407=reg306+reg407; reg224=ponderation*reg224; reg403=vectors[0][indices[7]+1]*reg403; reg337=vectors[0][indices[7]+1]*reg337;
    reg182=reg335+reg182; reg358=reg250+reg358; reg258=ponderation*reg258; reg288=vectors[0][indices[7]+1]*reg288; reg240=vectors[0][indices[7]+1]*reg240;
    reg200=reg332+reg200; reg345=vectors[0][indices[7]+1]*reg345; reg277=reg225+reg277; reg308=reg218+reg308; reg234=ponderation*reg234;
    reg230=ponderation*reg230; reg359=vectors[0][indices[7]+1]*reg359; reg248=ponderation*reg248; reg268=vectors[0][indices[7]+1]*reg268; reg374=reg208+reg374;
    reg393=vectors[0][indices[7]+1]*reg393; reg388=reg229+reg388; reg237=reg339+reg237; reg410=vectors[0][indices[7]+1]*reg410; reg194=ponderation*reg194;
    reg108=ponderation*reg108; reg235=ponderation*reg235; reg203=ponderation*reg203; reg343=ponderation*reg343; reg264=ponderation*reg264;
    reg314=reg282+reg314; reg145=ponderation*reg145; reg269=vectors[0][indices[7]+1]*reg269; reg255=reg367+reg255; reg347=vectors[0][indices[7]+1]*reg347;
    reg249=vectors[0][indices[7]+1]*reg249; reg254=ponderation*reg254; reg166=ponderation*reg166; reg190=ponderation*reg190; reg321=vectors[0][indices[7]+1]*reg321;
    reg371=vectors[0][indices[7]+1]*reg371; reg283=reg241+reg283; reg368=reg406+reg368; reg357=vectors[0][indices[7]+1]*reg357; reg372=vectors[0][indices[7]+1]*reg372;
    reg57=reg386-reg57; reg45=vectors[0][indices[7]+1]*reg45; reg242=reg273+reg242; reg300=reg261+reg300; reg267=reg206+reg267;
    reg294=vectors[0][indices[7]+1]*reg294; reg180=vectors[0][indices[7]+1]*reg180; reg260=reg179+reg260; reg293=reg289+reg293; reg213=reg279+reg213;
    reg232=vectors[0][indices[7]+1]*reg232; reg274=ponderation*reg274; reg327=ponderation*reg327; reg239=ponderation*reg239; reg336=reg192+reg336;
    reg238=ponderation*reg238; reg373=reg396+reg373; reg354=vectors[0][indices[7]+1]*reg354; reg249=reg300+reg249; reg410=reg237+reg410;
    reg268=reg308+reg268; reg194=vectors[0][indices[7]+2]*reg194; reg310=vectors[0][indices[7]+2]*reg310; reg288=reg336+reg288; reg234=vectors[0][indices[7]+2]*reg234;
    reg347=reg373+reg347; reg385=vectors[0][indices[7]+2]*reg385; reg393=reg374+reg393; reg189=vectors[0][indices[7]+2]*reg189; reg359=reg388+reg359;
    reg57=reg372+reg57; reg248=vectors[0][indices[7]+2]*reg248; reg258=reg258*vectors[0][indices[7]+2]; reg371=reg358+reg371; reg357=reg368+reg357;
    reg345=reg277+reg345; reg166=vectors[0][indices[7]+2]*reg166; reg254=vectors[0][indices[7]+2]*reg254; reg224=vectors[0][indices[7]+2]*reg224; reg403=reg407+reg403;
    reg220=reg255+reg220; reg354=reg213+reg354; reg343=vectors[0][indices[7]+2]*reg343; reg240=reg200+reg240; reg180=reg260+reg180;
    reg203=vectors[0][indices[7]+2]*reg203; reg337=reg182+reg337; reg91=vectors[0][indices[7]+2]*reg230; reg239=vectors[0][indices[7]+2]*reg239; reg235=vectors[0][indices[7]+2]*reg235;
    reg238=vectors[0][indices[7]+2]*reg238; reg108=vectors[0][indices[7]+2]*reg108; reg181=reg296+reg181; reg274=vectors[0][indices[7]+2]*reg274; reg190=vectors[0][indices[7]+2]*reg190;
    reg99=reg259+reg99; reg145=vectors[0][indices[7]+2]*reg145; reg45=reg242+reg45; reg176=vectors[0][indices[7]+2]*reg176; reg321=reg283+reg321;
    reg232=reg267+reg232; reg327=vectors[0][indices[7]+2]*reg327; reg269=reg314+reg269; reg197=vectors[0][indices[7]+2]*reg197; reg294=reg293+reg294;
    reg264=vectors[0][indices[7]+2]*reg264; reg108=reg371+reg108; reg189=reg347+reg189; reg176=reg321+reg176; reg327=reg269+reg327;
    reg258=reg359+reg258; reg197=reg294+reg197; reg274=reg288+reg274; reg234=reg249+reg234; reg239=reg240+reg239;
    reg385=reg393+reg385; reg238=reg181+reg238; reg254=reg357+reg254; reg194=reg268+reg194; reg343=reg354+reg343;
    reg235=reg220+reg235; reg248=reg57+reg248; reg91=reg337-reg91; reg310=reg410+reg310; reg166=reg345+reg166;
    reg145=reg99+reg145; reg203=reg180+reg203; reg190=reg45+reg190; reg224=reg403+reg224; reg264=reg232+reg264;
    sollicitation[indices[0]+0]+=-reg203; sollicitation[indices[0]+1]+=-reg264; sollicitation[indices[0]+2]+=-reg176; sollicitation[indices[1]+0]+=-reg258; sollicitation[indices[1]+1]+=-reg274;
    sollicitation[indices[1]+2]+=-reg239; sollicitation[indices[2]+0]+=-reg238; sollicitation[indices[7]+2]+=-reg108; sollicitation[indices[7]+1]+=-reg166; sollicitation[indices[7]+0]+=-reg145;
    sollicitation[indices[2]+1]+=-reg194; sollicitation[indices[2]+2]+=-reg235; sollicitation[indices[6]+2]+=-reg190; sollicitation[indices[6]+1]+=-reg224; sollicitation[indices[6]+0]+=-reg189;
    sollicitation[indices[3]+0]+=-reg91; sollicitation[indices[3]+1]+=-reg310; sollicitation[indices[5]+2]+=-reg327; sollicitation[indices[5]+1]+=-reg197; sollicitation[indices[5]+0]+=-reg234;
    sollicitation[indices[4]+2]+=-reg385; sollicitation[indices[4]+1]+=-reg254; sollicitation[indices[4]+0]+=-reg343; sollicitation[indices[3]+2]+=-reg248;
  #undef PNODE
}
// 
#ifndef ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
#define ADD_NODAL_VEC_DER_VAR_elasticity_dep_0
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz>
void add_nodal_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const typename TM::TNode &node,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) node
  /* (*f.m).poisson_ratio */  #undef PNODE
}
#endif
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<0> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<1> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<2> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<3> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<4> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}
// 
template<class TM,class TMA,class TVE,class TVEVE,class T,bool wont_add_nz,class T_pos,class ND,class ED,unsigned nim,class ED2,unsigned nim2>
void add_skin_elem_vector_der_var(
      Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f,
      TMA &matrix,
      TVE &sollicitation,
      TVEVE &vectors,
      const Element<Hexa,DefaultBehavior,Node<3,T_pos,ND>,ED,nim> &elem,
      const Element<Quad,DefaultBehavior,Node<3,T_pos,ND>,ED2,nim2> &skin_elem,
      const Number<5> &num_child,
      const unsigned *indices, Number<0> num_der_var ) {
  #define PNODE(N) (*elem.node(N))
  /* (*f.m).poisson_ratio */  #undef PNODE
}

#ifndef elasticity_dep_read_material_to_mesh
#define elasticity_dep_read_material_to_mesh
template<class TM, class T, bool wont_add_nz>
void read_material_to_mesh_(const XmlNode &n, Formulation<TM,elasticity_dep,DefaultBehavior,T,wont_add_nz> &f){ 
    if(n.has_attribute("f_vol"))  
        n.get_attribute("f_vol", f.m->f_vol ); 
    else  
        std::cerr << "Warning using default value of f_vol : " << f.m->f_vol << std::endl; 

    if(n.has_attribute("lim_cond_0"))  
        n.get_attribute("lim_cond_0", f.m->lim_cond_0 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_0 : " << f.m->lim_cond_0 << std::endl; 

    if(n.has_attribute("lim_cond_1"))  
        n.get_attribute("lim_cond_1", f.m->lim_cond_1 ); 
    else  
        std::cerr << "Warning using default value of lim_cond_1 : " << f.m->lim_cond_1 << std::endl; 

    if(n.has_attribute("poisson_ratio"))  
        n.get_attribute("poisson_ratio", f.m->poisson_ratio ); 
    else  
        std::cerr << "Warning using default value of poisson_ratio : " << f.m->poisson_ratio << std::endl; 

    if(n.has_attribute("elastic_modulus"))  
        n.get_attribute("elastic_modulus", f.m->elastic_modulus ); 
    else  
        std::cerr << "Warning using default value of elastic_modulus : " << f.m->elastic_modulus << std::endl; 

    if(n.has_attribute("density"))  
        n.get_attribute("density", f.m->density ); 
    else  
        std::cerr << "Warning using default value of density : " << f.m->density << std::endl; 

  };
#endif // elasticity_dep_read_material_to_mesh
} // namespace LMT


#endif // PROBLEM_pb_dep_cor
