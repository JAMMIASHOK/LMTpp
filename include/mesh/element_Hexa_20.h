#ifndef LMT_HEXA_20
#define LMT_HEXA_20
namespace LMT {
inline const double *gauss_point_for_order(unsigned order, const Hexa_20 &elem) { /// order -> degre du polynome a integrer exactement
    static const unsigned offset[] = { 0, 33, 66, 99, 132, 269, 406, 543, 680, 817, }; // fonction de lordre du poly
    static const double values[] = {
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.0,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.0,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.0,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.0,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
    };
    return values + offset[order];
}
template<class TNode> void permutation_if_jac_neg(const Hexa_20 &elem,TNode **nodes) {
    typedef typename TNode::T T;
    T reg0=0.25*nodes[1]->pos[1]; T reg1=0.25*nodes[0]->pos[1]; T reg2=0.25*nodes[1]->pos[2]; T reg3=0.25*nodes[0]->pos[2]; T reg4=reg0+reg1;
    T reg5=0.25*nodes[2]->pos[1]; T reg6=reg2+reg3; T reg7=0.25*nodes[2]->pos[2]; T reg8=reg1-reg0; T reg9=reg3-reg2;
    T reg10=reg6+reg7; T reg11=0.25*nodes[3]->pos[2]; T reg12=0.25*nodes[3]->pos[1]; T reg13=reg6-reg7; T reg14=reg4-reg5;
    T reg15=reg5+reg4; T reg16=0.25*nodes[1]->pos[0]; T reg17=0.25*nodes[0]->pos[0]; reg9=reg9-reg7; reg8=reg8-reg5;
    T reg18=0.25*nodes[2]->pos[0]; T reg19=0.25*nodes[4]->pos[2]; reg9=reg11+reg9; T reg20=reg10+reg11; T reg21=0.25*nodes[4]->pos[1];
    reg14=reg14-reg12; T reg22=reg17-reg16; reg13=reg13-reg11; T reg23=reg12+reg15; reg8=reg12+reg8;
    T reg24=reg16+reg17; reg14=reg14+reg21; T reg25=0.25*nodes[3]->pos[0]; reg9=reg19+reg9; reg22=reg22-reg18;
    T reg26=0.25*nodes[5]->pos[1]; T reg27=reg20-reg19; T reg28=0.25*nodes[5]->pos[2]; reg13=reg19+reg13; reg8=reg21+reg8;
    T reg29=reg23-reg21; T reg30=reg24-reg18; T reg31=reg18+reg24; reg9=reg9-reg28; reg8=reg8-reg26;
    reg30=reg30-reg25; reg29=reg29-reg26; reg13=reg28+reg13; T reg32=0.25*nodes[6]->pos[2]; reg27=reg27-reg28;
    reg14=reg14+reg26; T reg33=0.25*nodes[6]->pos[1]; T reg34=0.25*nodes[4]->pos[0]; reg22=reg22+reg25; reg22=reg22+reg34;
    reg14=reg14-reg33; T reg35=0.25*nodes[7]->pos[1]; reg9=reg9-reg32; reg27=reg27-reg32; T reg36=0.25*nodes[7]->pos[2];
    reg13=reg13-reg32; reg29=reg29-reg33; reg8=reg8-reg33; reg30=reg34+reg30; T reg37=0.25*nodes[5]->pos[0];
    T reg38=reg25+reg31; reg9=reg36+reg9; reg27=reg27-reg36; T reg39=0.5*nodes[8]->pos[2]; T reg40=0.5*nodes[9]->pos[2];
    reg13=reg13-reg36; reg29=reg29-reg35; T reg41=0.5*nodes[9]->pos[1]; reg8=reg35+reg8; T reg42=0.25*nodes[6]->pos[0];
    reg22=reg22-reg37; reg30=reg37+reg30; T reg43=reg38-reg34; reg14=reg14-reg35; T reg44=0.5*nodes[8]->pos[1];
    T reg45=0.5*nodes[11]->pos[2]; T reg46=0.5*nodes[10]->pos[2]; reg27=reg27-reg39; reg39=reg13-reg39; reg8=reg41+reg8;
    reg29=reg29-reg44; reg13=0.5*nodes[11]->pos[1]; reg44=reg14-reg44; reg14=0.25*nodes[7]->pos[0]; reg30=reg30-reg42;
    reg43=reg43-reg37; T reg47=0.5*nodes[10]->pos[1]; reg9=reg40+reg9; reg22=reg22-reg42; T reg48=0.5*nodes[12]->pos[2];
    T reg49=0.5*nodes[8]->pos[0]; T reg50=0.5*nodes[13]->pos[2]; reg30=reg30-reg14; T reg51=0.5*nodes[9]->pos[0]; reg43=reg43-reg42;
    reg39=reg46+reg39; reg8=reg8-reg13; reg41=reg29-reg41; reg29=0.5*nodes[13]->pos[1]; reg22=reg22+reg14;
    reg44=reg44+reg47; T reg52=0.5*nodes[12]->pos[1]; reg9=reg9-reg45; reg40=reg27-reg40; reg8=reg29+reg8;
    reg9=reg50+reg9; reg22=reg51+reg22; reg47=reg41-reg47; reg27=0.5*nodes[15]->pos[1]; reg41=0.5*nodes[14]->pos[1];
    reg44=reg44-reg52; reg30=reg30-reg49; T reg53=0.5*nodes[10]->pos[0]; reg43=reg43-reg14; T reg54=0.5*nodes[11]->pos[0];
    T reg55=0.5*nodes[15]->pos[2]; reg39=reg39-reg48; T reg56=0.5*nodes[14]->pos[2]; reg46=reg40-reg46; reg40=0.5*nodes[13]->pos[0];
    reg44=reg44+reg41; T reg57=0.5*nodes[16]->pos[1]; reg49=reg43-reg49; reg22=reg22-reg54; reg9=reg9-reg55;
    reg30=reg30+reg53; reg13=reg47-reg13; reg43=0.5*nodes[12]->pos[0]; reg45=reg46-reg45; reg46=0.5*nodes[16]->pos[2];
    reg8=reg8-reg27; reg39=reg56+reg39; reg47=0.5*nodes[14]->pos[0]; reg30=reg30-reg43; reg39=reg39-reg46;
    T reg58=0.5*nodes[17]->pos[2]; reg48=reg45+reg48; reg8=reg8-reg57; reg22=reg22+reg40; reg57=reg44-reg57;
    reg46=reg9-reg46; reg9=0.5*nodes[17]->pos[1]; reg51=reg49-reg51; reg44=0.5*nodes[15]->pos[0]; reg13=reg52+reg13;
    reg46=reg58+reg46; reg53=reg51-reg53; reg8=reg9+reg8; reg22=reg22-reg44; reg45=0.5*nodes[16]->pos[0];
    reg50=reg48+reg50; reg30=reg30+reg47; reg58=reg39-reg58; reg29=reg13+reg29; reg9=reg57-reg9;
    reg13=0.5*nodes[18]->pos[1]; reg39=0.5*nodes[18]->pos[2]; reg56=reg50+reg56; reg48=0.5*nodes[19]->pos[1]; reg9=reg9+reg13;
    reg46=reg39+reg46; reg49=0.5*nodes[17]->pos[0]; reg22=reg22-reg45; reg54=reg53-reg54; reg8=reg13+reg8;
    reg45=reg30-reg45; reg39=reg58+reg39; reg13=0.5*nodes[19]->pos[2]; reg29=reg41+reg29; reg54=reg43+reg54;
    reg30=0.5*nodes[18]->pos[0]; reg46=reg46-reg13; reg22=reg22+reg49; reg27=reg29+reg27; reg13=reg39+reg13;
    reg49=reg45-reg49; reg9=reg9+reg48; reg48=reg8-reg48; reg55=reg56+reg55; reg49=reg30+reg49;
    reg30=reg22+reg30; reg8=0.5*nodes[19]->pos[0]; reg54=reg40+reg54; reg22=reg27*reg46; reg27=reg13*reg27;
    reg29=reg9*reg55; reg55=reg55*reg48; reg54=reg47+reg54; reg48=reg13*reg48; reg46=reg9*reg46;
    reg49=reg8+reg49; reg8=reg30-reg8; reg22=reg55-reg22; reg27=reg29-reg27; reg27=reg8*reg27;
    reg22=reg49*reg22; reg54=reg44+reg54; reg46=reg48-reg46; reg22=reg27-reg22; reg46=reg54*reg46;
    T det_jac=reg22+reg46;

    if ( det_jac < 0 ) {
        TNode *tmp[] = {nodes[0],nodes[3],nodes[2],nodes[1],nodes[4],nodes[7],nodes[6],nodes[5],nodes[11],nodes[10],nodes[9],nodes[8],nodes[15],nodes[14],nodes[13],nodes[12],nodes[16],nodes[19],nodes[18],nodes[17]};
        for(unsigned i=0;i<20;++i) nodes[i] = tmp[i];
    }
}
template<class PosNodes,class Pvec,class TVI> void get_var_inter_linear(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; T reg2=1+reg0; T reg3=1-reg0;
    T reg4=2*var_inter[2]; reg1=reg1-1; T reg5=0.125*reg2; T reg6=reg0+reg1; T reg7=reg0-reg1;
    T reg8=1-reg1; T reg9=0.125*reg3; reg4=reg4-1; T reg10=0.25*reg3; T reg11=reg9*reg8;
    T reg12=1-reg4; T reg13=reg4+reg6; T reg14=1+reg1; T reg15=reg8*reg5; T reg16=reg7-reg4;
    T reg17=0.25*reg2; T reg18=2*reg15; T reg19=reg1-reg0; T reg20=reg6-reg4; reg5=reg14*reg5;
    reg16=reg16-2; T reg21=reg12*reg17; T reg22=2*reg11; T reg23=reg12*reg15; T reg24=reg11*reg12;
    T reg25=reg12*reg10; T reg26=2+reg13; T reg27=reg12*reg5; reg20=reg20-2; reg9=reg9*reg14;
    T reg28=reg19-reg4; T reg29=reg16*reg21; T reg30=2*reg5; T reg31=reg26*reg25; T reg32=reg16*reg18;
    T reg33=reg26*reg22; T reg34=0.25*reg8; T reg35=2*reg23; T reg36=2*reg24; reg33=reg36-reg33;
    T reg37=reg12*reg34; T reg38=0.25*reg14; T reg39=2*reg27; T reg40=reg20*reg30; T reg41=2*reg9;
    T reg42=reg12*reg9; reg32=reg35+reg32; reg28=reg28-2; T reg43=1+reg4; reg6=reg4-reg6;
    reg29=reg35+reg29; reg31=reg36-reg31; T reg44=reg20*reg21; reg7=reg4+reg7; T reg45=pos_nodes[1][0]*reg29;
    T reg46=pos_nodes[1][2]*reg32; T reg47=pos_nodes[0][0]*reg31; T reg48=pos_nodes[0][2]*reg33; T reg49=pos_nodes[1][1]*reg29; T reg50=reg28*reg41;
    T reg51=pos_nodes[0][1]*reg31; reg40=reg39+reg40; reg44=reg39+reg44; T reg52=reg28*reg25; T reg53=2*reg42;
    T reg54=reg16*reg37; T reg55=reg12*reg38; T reg56=reg26*reg37; T reg57=reg43*reg10; T reg58=pos_nodes[1][2]*reg29;
    T reg59=pos_nodes[0][2]*reg31; T reg60=pos_nodes[0][1]*reg33; T reg61=pos_nodes[1][0]*reg32; T reg62=pos_nodes[1][1]*reg32; T reg63=pos_nodes[0][0]*reg33;
    reg6=reg6-2; reg11=reg11*reg43; reg26=reg24*reg26; reg24=pos_nodes[2][2]*reg44; T reg64=pos_nodes[2][1]*reg44;
    reg52=reg53+reg52; T reg65=reg6*reg22; reg54=reg35+reg54; reg59=reg58+reg59; reg35=pos_nodes[2][1]*reg40;
    reg56=reg36-reg56; reg36=reg6*reg57; reg60=reg62+reg60; reg58=reg20*reg55; reg47=reg45+reg47;
    reg45=pos_nodes[2][0]*reg40; reg62=pos_nodes[2][0]*reg44; reg50=reg53+reg50; reg48=reg46+reg48; reg46=pos_nodes[2][2]*reg40;
    reg63=reg61+reg63; reg7=reg7-2; reg61=2*reg11; reg51=reg49+reg51; reg15=reg15*reg43;
    reg16=reg23*reg16; reg23=reg43*reg17; reg65=reg61+reg65; reg49=reg7*reg18; reg58=reg39+reg58;
    reg39=reg28*reg55; T reg66=reg43*reg34; T reg67=2*reg15; T reg68=pos_nodes[3][0]*reg52; reg47=reg62-reg47;
    reg62=pos_nodes[1][0]*reg54; T reg69=pos_nodes[0][0]*reg56; T reg70=reg7*reg23; T reg71=pos_nodes[3][2]*reg52; reg59=reg24-reg59;
    reg36=reg61+reg36; reg24=pow(reg0,2); reg19=reg4+reg19; reg13=reg13-2; reg5=reg5*reg43;
    reg46=reg48+reg46; reg48=pos_nodes[3][2]*reg50; T reg72=pos_nodes[0][1]*reg56; T reg73=pos_nodes[1][1]*reg54; reg20=reg27*reg20;
    reg51=reg64-reg51; reg27=pos_nodes[3][1]*reg52; reg64=pos_nodes[1][1]*reg16; T reg74=pos_nodes[0][1]*reg26; reg45=reg63+reg45;
    reg63=pos_nodes[3][0]*reg50; reg35=reg60+reg35; reg60=pos_nodes[1][0]*reg16; T reg75=pos_nodes[0][0]*reg26; T reg76=pos_nodes[3][1]*reg50;
    reg76=reg35+reg76; reg9=reg9*reg43; reg71=reg59+reg71; reg19=reg19-2; reg35=pos_nodes[1][2]*reg54;
    reg59=pos_nodes[0][2]*reg26; T reg77=pos_nodes[4][2]*reg36; T reg78=pos_nodes[4][2]*reg65; reg28=reg42*reg28; reg69=reg62-reg69;
    reg42=pos_nodes[2][0]*reg58; reg62=reg13*reg23; reg70=reg67+reg70; T reg79=pos_nodes[0][2]*reg56; reg27=reg51+reg27;
    reg51=pos_nodes[4][1]*reg36; T reg80=pos_nodes[4][1]*reg65; T reg81=reg13*reg30; reg49=reg67+reg49; T reg82=pos_nodes[4][0]*reg65;
    reg63=reg45+reg63; reg75=reg60-reg75; reg45=pos_nodes[2][0]*reg20; reg60=pos_nodes[2][1]*reg20; reg74=reg64-reg74;
    reg48=reg46+reg48; reg72=reg73-reg72; reg46=pos_nodes[2][1]*reg58; reg39=reg53+reg39; reg53=2*reg5;
    reg64=pos_nodes[1][2]*reg16; reg73=reg6*reg66; reg68=reg47+reg68; reg47=pow(reg1,2); T reg83=pos_nodes[4][0]*reg36;
    reg24=1-reg24; T reg84=pos_nodes[3][1]*reg28; T reg85=pos_nodes[5][0]*reg49; reg63=reg82-reg63; reg82=pos_nodes[5][0]*reg70;
    reg83=reg68-reg83; reg68=reg19*reg41; reg81=reg53+reg81; reg76=reg80-reg76; reg80=pos_nodes[5][1]*reg49;
    reg59=reg64-reg59; reg64=pos_nodes[2][2]*reg20; reg45=reg75+reg45; reg75=pos_nodes[3][0]*reg28; reg60=reg74+reg60;
    reg74=pos_nodes[5][1]*reg70; reg51=reg27-reg51; reg27=pos_nodes[5][2]*reg70; T reg86=pos_nodes[5][2]*reg49; reg48=reg78-reg48;
    reg77=reg71-reg77; reg71=reg19*reg57; reg62=reg53+reg62; reg46=reg72+reg46; reg72=pos_nodes[3][1]*reg39;
    reg78=pos_nodes[2][2]*reg58; reg73=reg61+reg73; reg61=reg7*reg66; T reg87=reg43*reg38; reg79=reg35-reg79;
    reg35=2*reg9; reg47=1-reg47; T reg88=pos_nodes[3][0]*reg39; reg42=reg69+reg42; reg6=reg11*reg6;
    reg11=0.25*reg24; reg85=reg63+reg85; reg63=pos_nodes[4][1]*reg73; reg69=reg8*reg11; reg27=reg77-reg27;
    reg78=reg79+reg78; reg72=reg46-reg72; reg46=0.25*reg47; reg77=pos_nodes[6][0]*reg81; reg86=reg48+reg86;
    reg48=pos_nodes[6][2]*reg81; reg82=reg83-reg82; reg79=pos_nodes[6][0]*reg62; reg83=pos_nodes[4][0]*reg6; reg75=reg45+reg75;
    reg84=reg60+reg84; reg45=pos_nodes[4][1]*reg6; reg61=reg67+reg61; reg60=pos_nodes[3][2]*reg28; reg64=reg59+reg64;
    reg59=pos_nodes[6][1]*reg81; reg80=reg76+reg80; reg24=0.5*reg24; reg67=pos_nodes[6][1]*reg62; reg74=reg51-reg74;
    reg51=pos_nodes[3][2]*reg39; reg76=pos_nodes[6][2]*reg62; T reg89=reg13*reg87; T reg90=pos_nodes[4][0]*reg73; reg88=reg42-reg88;
    reg71=reg35+reg71; reg7=reg15*reg7; reg68=reg35+reg68; reg51=reg78-reg51; reg77=reg85+reg77;
    reg15=pos_nodes[7][0]*reg68; reg42=pos_nodes[5][1]*reg7; reg78=pos_nodes[4][2]*reg73; reg85=2*reg69; reg45=reg84+reg45;
    reg83=reg75+reg83; reg75=pos_nodes[5][0]*reg7; reg84=pos_nodes[7][2]*reg68; reg48=reg86+reg48; reg86=reg2*reg46;
    reg63=reg72-reg63; reg72=pos_nodes[5][1]*reg61; reg13=reg5*reg13; reg53=reg89+reg53; reg67=reg74+reg67;
    reg5=pos_nodes[7][1]*reg71; reg74=pos_nodes[7][1]*reg68; reg59=reg80+reg59; reg80=reg1*reg2; reg89=reg12*reg24;
    reg90=reg88-reg90; reg88=pos_nodes[5][0]*reg61; T reg91=reg19*reg87; reg76=reg27+reg76; reg79=reg82+reg79;
    reg27=pos_nodes[7][0]*reg71; reg82=pos_nodes[7][2]*reg71; T reg92=pos_nodes[4][2]*reg6; reg60=reg64+reg60; reg64=2*reg86;
    reg19=reg9*reg19; reg9=reg12*reg80; T reg93=pos_nodes[6][0]*reg13; T reg94=pos_nodes[6][1]*reg13; T reg95=pos_nodes[6][1]*reg53;
    reg72=reg63+reg72; reg11=reg14*reg11; reg63=pos_nodes[8][0]*reg85; T reg96=reg0*reg8; reg91=reg35+reg91;
    reg84=reg48+reg84; reg35=pos_nodes[8][2]*reg85; reg15=reg77+reg15; reg82=reg76+reg82; reg48=pos_nodes[8][1]*reg85;
    reg27=reg79+reg27; reg76=pos_nodes[8][2]*reg89; reg74=reg59+reg74; reg42=reg45+reg42; reg45=pos_nodes[8][1]*reg89;
    reg5=reg67+reg5; reg59=pos_nodes[8][0]*reg89; reg78=reg51-reg78; reg51=pos_nodes[5][2]*reg61; reg75=reg83+reg75;
    reg88=reg90+reg88; reg67=pos_nodes[5][2]*reg7; reg92=reg60+reg92; reg60=pos_nodes[6][0]*reg53; reg77=pos_nodes[7][0]*reg19;
    reg93=reg75+reg93; reg75=pos_nodes[9][2]*reg64; reg67=reg92+reg67; reg79=pos_nodes[6][2]*reg13; reg48=reg74-reg48;
    reg74=pos_nodes[9][1]*reg64; reg83=pos_nodes[9][1]*reg9; reg45=reg5-reg45; reg5=pos_nodes[7][0]*reg91; reg88=reg60+reg88;
    reg60=reg1*reg3; reg90=reg12*reg69; reg92=pos_nodes[9][2]*reg9; reg76=reg82-reg76; reg82=pos_nodes[7][1]*reg91;
    reg95=reg72+reg95; reg46=reg3*reg46; reg47=0.5*reg47; reg72=reg12*reg96; reg35=reg84-reg35;
    reg84=pos_nodes[9][0]*reg64; reg94=reg42+reg94; reg42=pos_nodes[6][2]*reg53; T reg97=pos_nodes[7][1]*reg19; reg51=reg78+reg51;
    reg78=2*reg11; reg63=reg15-reg63; reg59=reg27-reg59; reg15=pos_nodes[9][0]*reg9; reg74=reg48-reg74;
    reg27=pos_nodes[10][0]*reg78; reg84=reg63-reg84; reg48=pos_nodes[8][1]*reg72; reg75=reg35-reg75; reg35=pos_nodes[10][0]*reg89;
    reg82=reg95-reg82; reg63=pos_nodes[10][1]*reg78; reg95=pos_nodes[8][0]*reg72; reg5=reg88-reg5; reg79=reg67+reg79;
    reg67=pos_nodes[7][2]*reg19; reg42=reg51+reg42; reg51=reg12*reg86; reg88=reg12*reg47; T reg98=pos_nodes[7][2]*reg91;
    T reg99=2*reg46; T reg100=pos_nodes[8][1]*reg90; reg97=reg94+reg97; reg94=pos_nodes[10][2]*reg78; T reg101=reg12*reg60;
    reg15=reg59-reg15; reg59=pos_nodes[10][1]*reg89; T reg102=reg0*reg14; T reg103=pos_nodes[8][0]*reg90; reg77=reg93+reg77;
    reg92=reg76-reg92; reg83=reg45-reg83; reg45=pos_nodes[10][2]*reg89; reg76=pos_nodes[8][2]*reg72; reg45=reg92+reg45;
    reg63=reg74-reg63; reg98=reg42-reg98; reg42=pos_nodes[11][2]*reg101; reg48=reg82-reg48; reg74=pos_nodes[9][1]*reg88;
    reg67=reg79+reg67; reg79=pos_nodes[8][2]*reg90; reg100=reg97+reg100; reg82=reg51*pos_nodes[9][1]; reg59=reg83+reg59;
    reg83=pow(reg4,2); reg92=pos_nodes[11][0]*reg99; reg103=reg77+reg103; reg77=pos_nodes[9][0]*reg51; reg94=reg75-reg94;
    reg75=pos_nodes[11][2]*reg99; reg93=pos_nodes[11][1]*reg101; reg27=reg84-reg27; reg84=reg43*reg24; reg35=reg15+reg35;
    reg15=pos_nodes[11][0]*reg101; reg97=pos_nodes[9][0]*reg88; reg95=reg5-reg95; reg5=pos_nodes[11][1]*reg99; T reg104=reg12*reg11;
    T reg105=reg12*reg102; reg93=reg59-reg93; reg59=pos_nodes[12][1]*reg84; reg79=reg67+reg79; reg67=reg51*pos_nodes[9][2];
    reg5=reg63-reg5; reg63=pos_nodes[10][0]*reg105; reg97=reg95+reg97; reg95=pos_nodes[12][1]*reg85; T reg106=pos_nodes[12][0]*reg84;
    T reg107=pos_nodes[12][2]*reg85; reg75=reg94-reg75; reg94=reg104*pos_nodes[10][1]; T reg108=pos_nodes[12][0]*reg85; reg92=reg27-reg92;
    reg77=reg103+reg77; reg27=reg104*pos_nodes[10][0]; reg83=1-reg83; reg15=reg35-reg15; reg82=reg100+reg82;
    reg12=reg12*reg46; reg35=pos_nodes[12][2]*reg84; reg42=reg45-reg42; reg45=pos_nodes[10][1]*reg105; reg100=reg43*reg80;
    reg74=reg48+reg74; reg76=reg98-reg76; reg48=pos_nodes[9][2]*reg88; reg98=reg12*pos_nodes[11][1]; reg94=reg82+reg94;
    reg82=pos_nodes[13][2]*reg100; reg59=reg93-reg59; reg93=pos_nodes[13][1]*reg100; reg35=reg42-reg35; reg42=0.25*reg83;
    reg103=pos_nodes[11][0]*reg88; reg107=reg75+reg107; reg75=pos_nodes[13][2]*reg64; T reg109=pos_nodes[13][0]*reg64; reg108=reg92+reg108;
    reg27=reg77+reg27; reg77=reg12*pos_nodes[11][0]; reg48=reg76+reg48; reg76=pos_nodes[10][2]*reg105; reg69=reg43*reg69;
    reg92=reg43*reg96; reg45=reg74-reg45; reg74=pos_nodes[11][1]*reg88; T reg110=pos_nodes[13][1]*reg64; reg95=reg5+reg95;
    reg106=reg15-reg106; reg5=pos_nodes[13][0]*reg100; reg63=reg97-reg63; reg15=reg104*pos_nodes[10][2]; reg67=reg79+reg67;
    reg79=reg69*pos_nodes[12][1]; reg110=reg95+reg110; reg76=reg48-reg76; reg48=pos_nodes[11][2]*reg88; reg95=pos_nodes[14][2]*reg84;
    reg98=reg94+reg98; reg94=pos_nodes[12][1]*reg92; reg74=reg45-reg74; reg86=reg43*reg86; reg45=reg69*pos_nodes[12][0];
    reg77=reg27+reg77; reg109=reg108+reg109; reg27=pos_nodes[14][0]*reg78; reg75=reg107+reg75; reg97=reg4*reg3;
    reg107=reg12*pos_nodes[11][2]; reg15=reg67+reg15; reg5=reg106-reg5; reg67=pos_nodes[14][0]*reg84; reg106=reg43*reg60;
    reg108=reg43*reg47; T reg111=pos_nodes[12][0]*reg92; reg103=reg63-reg103; reg63=pos_nodes[14][1]*reg78; reg82=reg35-reg82;
    reg35=pos_nodes[14][2]*reg78; reg93=reg59-reg93; reg59=pos_nodes[14][1]*reg84; reg3=reg42*reg3; reg93=reg59+reg93;
    reg59=pos_nodes[15][2]*reg99; reg79=reg98+reg79; reg98=reg86*pos_nodes[13][1]; reg107=reg15+reg107; reg15=pos_nodes[15][1]*reg106;
    reg42=reg42*reg2; T reg112=pos_nodes[15][0]*reg106; reg5=reg67+reg5; reg67=reg43*reg102; T reg113=2*reg3;
    T reg114=pos_nodes[15][2]*reg106; reg82=reg95+reg82; reg95=pos_nodes[13][0]*reg108; reg111=reg103-reg111; reg103=reg69*pos_nodes[12][2];
    T reg115=pos_nodes[13][1]*reg108; reg94=reg74-reg94; reg48=reg76-reg48; reg11=reg43*reg11; reg74=reg86*pos_nodes[13][0];
    reg45=reg77+reg45; reg76=pos_nodes[12][2]*reg92; reg77=pos_nodes[15][1]*reg99; reg110=reg63+reg110; reg63=pos_nodes[15][0]*reg99;
    reg109=reg27+reg109; reg75=reg35+reg75; reg2=reg4*reg2; reg27=reg8*reg97; reg35=pos_nodes[13][2]*reg108;
    reg76=reg48-reg76; reg48=reg86*pos_nodes[13][2]; reg46=reg43*reg46; reg83=0.5*reg83; reg103=reg107+reg103;
    reg114=reg82-reg114; reg43=pos_nodes[16][1]*reg113; reg15=reg93-reg15; reg82=pos_nodes[16][2]*reg113; reg77=reg110+reg77;
    reg93=pos_nodes[16][1]*reg27; reg107=pos_nodes[14][1]*reg67; reg115=reg94+reg115; reg94=reg11*pos_nodes[14][1]; reg74=reg45+reg74;
    reg45=reg11*pos_nodes[14][0]; reg110=pos_nodes[16][0]*reg27; reg63=reg109+reg63; reg109=reg8*reg2; reg59=reg75+reg59;
    reg75=pos_nodes[16][2]*reg27; reg98=reg79+reg98; reg79=pos_nodes[16][0]*reg113; reg112=reg5-reg112; reg5=2*reg42;
    T reg116=pos_nodes[14][0]*reg67; reg95=reg111+reg95; reg75=reg59-reg75; reg59=pos_nodes[17][2]*reg109; reg111=reg11*pos_nodes[14][2];
    T reg117=pos_nodes[17][2]*reg5; reg82=reg114-reg82; reg48=reg103+reg48; reg103=pos_nodes[17][0]*reg5; reg79=reg112-reg79;
    reg112=pos_nodes[17][1]*reg5; reg93=reg77-reg93; reg77=pos_nodes[17][1]*reg109; reg43=reg15-reg43; reg98=reg94+reg98;
    reg15=reg46*pos_nodes[15][1]; reg94=pos_nodes[15][0]*reg108; reg116=reg95-reg116; reg74=reg45+reg74; reg45=reg8*reg83;
    reg95=pos_nodes[17][0]*reg109; reg107=reg115-reg107; reg114=pos_nodes[15][1]*reg108; reg115=reg3*reg8; T reg118=reg46*pos_nodes[15][0];
    T reg119=reg14*reg2; reg110=reg63-reg110; reg63=pos_nodes[14][2]*reg67; reg35=reg76+reg35; reg112=reg43-reg112;
    reg114=reg107-reg114; reg43=pos_nodes[16][1]*reg45; reg76=pos_nodes[18][0]*reg5; reg107=reg14*reg97; T reg120=pos_nodes[18][0]*reg119;
    reg95=reg110-reg95; reg110=pos_nodes[18][2]*reg119; reg117=reg82-reg117; reg103=reg79-reg103; reg79=pos_nodes[18][2]*reg5;
    reg59=reg75-reg59; reg118=reg74+reg118; reg74=reg115*pos_nodes[16][0]; reg75=reg46*pos_nodes[15][2]; reg48=reg111+reg48;
    reg8=reg42*reg8; reg82=pos_nodes[15][2]*reg108; reg63=reg35-reg63; reg35=reg115*pos_nodes[16][1]; reg15=reg98+reg15;
    reg94=reg116-reg94; reg98=pos_nodes[16][0]*reg45; reg111=pos_nodes[18][1]*reg119; reg77=reg93-reg77; reg93=pos_nodes[18][1]*reg5;
    reg116=pos_nodes[19][0]*reg107; reg120=reg95-reg120; reg95=pos_nodes[19][0]*reg113; reg76=reg103+reg76; reg110=reg59-reg110;
    reg59=pos_nodes[19][2]*reg107; reg103=pos_nodes[17][0]*reg45; reg98=reg94-reg98; reg94=reg14*reg83; reg42=reg42*reg14;
    reg75=reg48+reg75; reg48=reg115*pos_nodes[16][2]; T reg121=pos_nodes[16][2]*reg45; reg82=reg63-reg82; reg63=reg8*pos_nodes[17][1];
    reg35=reg15+reg35; reg15=pos_nodes[19][1]*reg107; reg111=reg77-reg111; reg77=pos_nodes[19][1]*reg113; reg93=reg112+reg93;
    reg79=reg117+reg79; reg112=pos_nodes[19][2]*reg113; reg74=reg118+reg74; reg117=reg8*pos_nodes[17][0]; reg43=reg114-reg43;
    reg114=pos_nodes[17][1]*reg45; reg121=reg82-reg121; reg82=pos_nodes[17][2]*reg45; reg48=reg75+reg48; reg75=reg8*pos_nodes[17][2];
    reg14=reg3*reg14; reg95=reg76+reg95; reg3=reg42*pos_nodes[18][1]; reg63=reg35+reg63; reg116=reg120-reg116;
    reg117=reg74+reg117; reg15=reg111-reg15; reg35=reg42*pos_nodes[18][0]; reg77=reg93+reg77; reg74=pos_nodes[18][1]*reg94;
    reg112=reg79+reg112; reg114=reg43+reg114; reg59=reg110-reg59; reg103=reg98+reg103; reg43=pos_nodes[18][0]*reg94;
    reg35=reg117+reg35; reg82=reg121+reg82; reg76=pos_nodes[18][2]*reg94; reg79=reg77*reg59; reg74=reg114+reg74;
    reg93=pos_nodes[19][1]*reg94; reg75=reg48+reg75; reg48=reg15*reg112; reg98=reg42*pos_nodes[18][2]; reg110=reg14*pos_nodes[19][1];
    reg3=reg63+reg3; reg63=reg116*reg112; reg111=reg95*reg59; reg43=reg103+reg43; reg103=reg14*pos_nodes[19][0];
    reg114=pos_nodes[19][0]*reg94; reg98=reg75+reg98; reg75=reg14*pos_nodes[19][2]; reg48=reg79-reg48; reg117=reg95*reg15;
    reg76=reg82+reg76; reg82=pos_nodes[19][2]*reg94; reg63=reg111-reg63; reg110=reg3+reg110; reg3=reg116*reg77;
    reg114=reg43-reg114; reg103=reg35+reg103; reg93=reg74-reg93; reg35=reg93*reg63; reg43=reg114*reg48;
    reg3=reg117-reg3; reg74=var_inter[0]*reg93; reg103=pos[0]-reg103; reg110=pos[1]-reg110; reg82=reg76-reg82;
    reg75=reg98+reg75; reg76=var_inter[0]*reg114; reg98=reg93*reg112; reg118=reg15*reg82; reg120=reg93*reg59;
    reg121=reg77*reg82; T reg122=reg82*reg3; reg43=reg35-reg43; reg75=pos[2]-reg75; reg35=var_inter[1]*reg95;
    reg76=reg103+reg76; reg103=reg114*reg59; T reg123=reg116*reg82; T reg124=reg114*reg112; T reg125=reg95*reg82;
    T reg126=var_inter[0]*reg82; reg74=reg110+reg74; reg110=var_inter[1]*reg77; reg121=reg98-reg121; reg123=reg103-reg123;
    reg125=reg124-reg125; T reg127=reg114*reg15; T reg128=reg116*reg93; reg118=reg120-reg118; T reg129=reg114*reg77;
    T reg130=reg95*reg93; reg76=reg35+reg76; reg74=reg110+reg74; reg35=var_inter[1]*reg112; reg126=reg75+reg126;
    reg75=var_inter[2]*reg15; reg110=var_inter[2]*reg116; reg122=reg43-reg122; reg63=reg63/reg122; reg123=reg123/reg122;
    reg126=reg35+reg126; reg121=reg121/reg122; reg48=reg48/reg122; reg130=reg129-reg130; reg74=reg75+reg74;
    reg125=reg125/reg122; reg118=reg118/reg122; reg35=var_inter[2]*reg59; reg76=reg110+reg76; reg128=reg127-reg128;
    reg63=reg74*reg63; reg118=reg76*reg118; reg123=reg74*reg123; reg121=reg76*reg121; reg125=reg74*reg125;
    reg48=reg76*reg48; reg130=reg130/reg122; reg128=reg128/reg122; reg122=reg3/reg122; reg126=reg35+reg126;
    reg122=reg126*reg122; reg48=reg63-reg48; reg128=reg126*reg128; reg123=reg118-reg123; reg130=reg126*reg130;
    reg121=reg125-reg121; var_inter[0]=reg48-reg122; var_inter[1]=reg128+reg123; var_inter[2]=reg121-reg130;

}
template<class PosNodes,class Pvec,class TVI> void get_var_inter(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; T reg2=1+reg0; T reg3=1-reg0;
    T reg4=2*var_inter[2]; reg1=reg1-1; T reg5=reg0+reg1; T reg6=0.125*reg2; T reg7=1-reg1;
    T reg8=0.125*reg3; reg4=reg4-1; T reg9=reg0-reg1; T reg10=0.25*reg2; T reg11=reg4+reg5;
    T reg12=0.25*reg3; T reg13=1+reg1; T reg14=reg9-reg4; T reg15=reg7*reg6; T reg16=reg8*reg7;
    T reg17=1-reg4; T reg18=reg1-reg0; T reg19=reg5-reg4; reg6=reg13*reg6; reg14=reg14-2;
    T reg20=2*reg15; T reg21=2*reg16; T reg22=reg17*reg12; T reg23=reg17*reg15; T reg24=2+reg11;
    T reg25=reg16*reg17; T reg26=reg17*reg10; T reg27=2*reg25; T reg28=2*reg23; T reg29=reg18-reg4;
    reg8=reg8*reg13; T reg30=reg24*reg22; T reg31=0.25*reg7; reg19=reg19-2; T reg32=reg14*reg26;
    T reg33=reg17*reg6; T reg34=reg14*reg20; T reg35=2*reg6; T reg36=reg24*reg21; T reg37=2*reg33;
    T reg38=0.25*reg13; reg34=reg28+reg34; reg36=reg27-reg36; T reg39=reg17*reg31; T reg40=reg19*reg35;
    T reg41=2*reg8; reg30=reg27-reg30; T reg42=reg19*reg26; T reg43=1+reg4; reg29=reg29-2;
    T reg44=reg17*reg8; reg5=reg4-reg5; reg32=reg28+reg32; T reg45=pos_nodes[1][0]*reg32; T reg46=pos_nodes[0][0]*reg30;
    T reg47=pos_nodes[1][2]*reg34; T reg48=pos_nodes[1][1]*reg34; T reg49=pos_nodes[0][1]*reg36; T reg50=reg43*reg12; reg42=reg37+reg42;
    T reg51=reg29*reg22; T reg52=pos_nodes[0][0]*reg36; T reg53=pos_nodes[1][0]*reg34; T reg54=pos_nodes[1][2]*reg32; T reg55=pos_nodes[0][2]*reg36;
    reg9=reg4+reg9; T reg56=2*reg44; T reg57=reg17*reg38; reg5=reg5-2; T reg58=pos_nodes[0][2]*reg30;
    T reg59=reg24*reg39; reg40=reg37+reg40; reg16=reg16*reg43; T reg60=reg29*reg41; T reg61=pos_nodes[0][1]*reg30;
    T reg62=pos_nodes[1][1]*reg32; T reg63=reg14*reg39; reg14=reg23*reg14; reg52=reg53+reg52; reg23=pos_nodes[2][0]*reg40;
    reg46=reg45+reg46; reg60=reg56+reg60; reg45=reg5*reg21; reg53=pos_nodes[2][0]*reg42; T reg64=reg43*reg10;
    T reg65=pos_nodes[2][1]*reg40; T reg66=pos_nodes[2][2]*reg40; reg24=reg25*reg24; reg25=reg5*reg50; reg59=reg27-reg59;
    reg61=reg62+reg61; reg27=pos_nodes[2][1]*reg42; reg63=reg28+reg63; reg58=reg54+reg58; reg28=pos_nodes[2][2]*reg42;
    reg54=reg19*reg57; reg62=2*reg16; reg9=reg9-2; reg49=reg48+reg49; reg15=reg15*reg43;
    reg51=reg56+reg51; reg55=reg47+reg55; reg47=reg29*reg57; reg25=reg62+reg25; reg48=pos_nodes[1][0]*reg63;
    T reg67=2*reg15; T reg68=pos_nodes[0][0]*reg59; T reg69=pos_nodes[3][0]*reg51; reg46=reg53-reg46; reg53=reg43*reg31;
    T reg70=reg9*reg64; reg54=reg37+reg54; reg37=pow(reg0,2); T reg71=reg14*pos_nodes[1][1]; T reg72=pos_nodes[1][1]*reg63;
    T reg73=pos_nodes[0][1]*reg59; reg6=reg6*reg43; reg11=reg11-2; T reg74=pos_nodes[3][1]*reg60; reg65=reg49+reg65;
    reg61=reg27-reg61; reg27=pos_nodes[3][1]*reg51; reg18=reg4+reg18; reg19=reg33*reg19; reg33=pos_nodes[3][2]*reg51;
    reg58=reg28-reg58; reg45=reg62+reg45; reg28=reg9*reg20; reg23=reg52+reg23; reg49=pos_nodes[3][0]*reg60;
    reg52=reg24*pos_nodes[0][1]; T reg75=pos_nodes[3][2]*reg60; reg66=reg55+reg66; reg55=reg14*pos_nodes[1][0]; T reg76=pos_nodes[0][0]*reg24;
    reg74=reg65+reg74; reg52=reg71-reg52; reg65=reg19*pos_nodes[2][1]; reg71=reg14*pos_nodes[1][2]; T reg77=reg24*pos_nodes[0][2];
    T reg78=pos_nodes[2][0]*reg54; reg68=reg48-reg68; reg48=pos_nodes[0][2]*reg59; T reg79=pos_nodes[1][2]*reg63; reg28=reg67+reg28;
    T reg80=pos_nodes[4][0]*reg25; reg69=reg46+reg69; reg46=reg11*reg35; T reg81=pos_nodes[4][0]*reg45; reg49=reg23+reg49;
    reg75=reg66+reg75; reg23=reg11*reg64; reg70=reg67+reg70; reg76=reg55-reg76; reg55=reg19*pos_nodes[2][0];
    reg66=pos_nodes[4][2]*reg45; reg73=reg72-reg73; reg72=pos_nodes[2][1]*reg54; T reg82=pos_nodes[4][2]*reg25; reg33=reg58+reg33;
    reg27=reg61+reg27; reg58=pos_nodes[4][1]*reg25; reg61=pos_nodes[4][1]*reg45; reg37=1-reg37; T reg83=pow(reg1,2);
    T reg84=reg5*reg53; reg47=reg56+reg47; reg8=reg8*reg43; reg18=reg18-2; reg56=2*reg6;
    reg29=reg44*reg29; reg44=reg9*reg53; T reg85=reg43*reg38; reg84=reg62+reg84; reg62=2*reg8;
    reg23=reg56+reg23; T reg86=reg18*reg50; T reg87=pos_nodes[5][2]*reg70; T reg88=reg29*pos_nodes[3][1]; reg65=reg52+reg65;
    reg55=reg76+reg55; reg46=reg56+reg46; reg52=reg18*reg41; reg5=reg16*reg5; reg16=0.25*reg37;
    reg49=reg81-reg49; reg76=pos_nodes[5][0]*reg28; reg74=reg61-reg74; reg61=pos_nodes[5][1]*reg28; reg81=pos_nodes[5][1]*reg70;
    reg58=reg27-reg58; reg83=1-reg83; reg82=reg33-reg82; reg27=pos_nodes[5][0]*reg70; reg80=reg69-reg80;
    reg33=pos_nodes[5][2]*reg28; reg75=reg66-reg75; reg78=reg68+reg78; reg66=pos_nodes[3][0]*reg47; reg77=reg71-reg77;
    reg68=pos_nodes[2][2]*reg54; reg48=reg79-reg48; reg72=reg73+reg72; reg69=pos_nodes[3][1]*reg47; reg71=reg29*pos_nodes[3][0];
    reg73=reg19*pos_nodes[2][2]; reg79=reg16*reg7; reg81=reg58-reg81; reg76=reg49+reg76; reg49=pos_nodes[6][0]*reg46;
    reg58=reg5*pos_nodes[4][1]; T reg89=pos_nodes[3][2]*reg47; reg66=reg78-reg66; reg69=reg72-reg69; reg72=pos_nodes[4][0]*reg84;
    reg68=reg48+reg68; reg61=reg74+reg61; reg33=reg75+reg33; reg48=pos_nodes[6][2]*reg46; reg74=0.25*reg83;
    reg75=pos_nodes[6][1]*reg46; reg27=reg80-reg27; reg78=pos_nodes[6][0]*reg23; reg80=pos_nodes[4][1]*reg84; T reg90=pos_nodes[6][1]*reg23;
    reg71=reg55+reg71; reg44=reg67+reg44; reg55=reg11*reg85; reg9=reg15*reg9; reg15=pos_nodes[6][2]*reg23;
    reg52=reg62+reg52; reg88=reg65+reg88; reg73=reg77+reg73; reg65=reg29*pos_nodes[3][2]; reg37=0.5*reg37;
    reg67=reg5*pos_nodes[4][0]; reg87=reg82-reg87; reg86=reg62+reg86; reg77=2*reg79; reg82=pos_nodes[7][1]*reg86;
    reg72=reg66-reg72; reg66=pos_nodes[7][0]*reg52; T reg91=pos_nodes[7][1]*reg52; reg75=reg61+reg75; reg90=reg81+reg90;
    reg61=pos_nodes[7][2]*reg52; reg48=reg33+reg48; reg49=reg76+reg49; reg11=reg6*reg11; reg15=reg87+reg15;
    reg6=reg5*pos_nodes[4][2]; reg33=reg18*reg85; reg65=reg73+reg65; reg73=pos_nodes[7][2]*reg86; reg76=reg9*pos_nodes[5][0];
    reg71=reg67+reg71; reg55=reg56+reg55; reg56=reg9*pos_nodes[5][1]; reg67=reg1*reg2; reg81=pos_nodes[4][2]*reg84;
    reg89=reg68-reg89; reg68=reg17*reg37; reg87=pos_nodes[5][1]*reg44; reg80=reg69-reg80; reg78=reg27+reg78;
    reg27=pos_nodes[7][0]*reg86; reg88=reg58+reg88; reg58=reg2*reg74; reg69=pos_nodes[5][0]*reg44; reg76=reg71+reg76;
    reg71=reg11*pos_nodes[6][0]; reg82=reg90+reg82; reg73=reg15+reg73; reg15=pos_nodes[8][2]*reg68; reg16=reg16*reg13;
    reg90=pos_nodes[6][1]*reg55; reg87=reg80+reg87; reg66=reg49+reg66; reg49=pos_nodes[8][0]*reg77; reg80=pos_nodes[8][0]*reg68;
    reg27=reg78+reg27; reg78=reg9*pos_nodes[5][2]; reg65=reg6+reg65; reg6=reg17*reg67; reg56=reg88+reg56;
    reg88=reg11*pos_nodes[6][1]; T reg92=pos_nodes[8][1]*reg77; reg91=reg75+reg91; reg33=reg62+reg33; reg62=pos_nodes[8][2]*reg77;
    reg61=reg48+reg61; reg48=2*reg58; reg75=pos_nodes[8][1]*reg68; T reg93=pos_nodes[5][2]*reg44; reg81=reg89-reg81;
    reg89=reg0*reg7; reg18=reg8*reg18; reg69=reg72+reg69; reg8=pos_nodes[6][0]*reg55; reg74=reg3*reg74;
    reg72=reg11*pos_nodes[6][2]; reg78=reg65+reg78; reg65=reg1*reg3; T reg94=reg17*reg89; reg83=0.5*reg83;
    T reg95=reg17*reg79; reg8=reg69+reg8; reg88=reg56+reg88; reg56=pos_nodes[7][0]*reg33; reg69=reg18*pos_nodes[7][1];
    reg71=reg76+reg71; reg76=reg18*pos_nodes[7][0]; reg90=reg87+reg90; reg87=pos_nodes[7][1]*reg33; T reg96=pos_nodes[6][2]*reg55;
    reg15=reg73-reg15; reg73=pos_nodes[9][2]*reg6; reg93=reg81+reg93; reg81=pos_nodes[9][1]*reg48; T reg97=pos_nodes[9][0]*reg48;
    reg49=reg66-reg49; reg92=reg91-reg92; reg66=2*reg16; reg91=pos_nodes[9][0]*reg6; reg62=reg61-reg62;
    reg61=pos_nodes[9][2]*reg48; T reg98=pos_nodes[9][1]*reg6; reg75=reg82-reg75; reg80=reg27-reg80; reg96=reg93+reg96;
    reg27=pos_nodes[7][2]*reg33; reg82=pos_nodes[8][0]*reg95; reg73=reg15-reg73; reg15=pos_nodes[8][1]*reg94; reg87=reg90-reg87;
    reg90=pos_nodes[10][2]*reg68; reg93=pos_nodes[8][0]*reg94; reg56=reg8-reg56; reg8=2*reg74; T reg99=reg17*reg58;
    reg98=reg75-reg98; reg75=reg18*pos_nodes[7][2]; reg72=reg78+reg72; reg91=reg80-reg91; reg78=pos_nodes[10][0]*reg68;
    reg80=reg17*reg65; T reg100=pos_nodes[10][1]*reg66; T reg101=pos_nodes[10][1]*reg68; reg81=reg92-reg81; reg92=reg0*reg13;
    T reg102=reg17*reg83; T reg103=pos_nodes[10][0]*reg66; reg97=reg49-reg97; reg49=pos_nodes[10][2]*reg66; reg69=reg88+reg69;
    reg88=reg95*pos_nodes[8][1]; reg61=reg62-reg61; reg76=reg71+reg76; reg62=pos_nodes[11][1]*reg8; reg71=pos_nodes[8][2]*reg94;
    reg27=reg96-reg27; reg96=reg17*reg16; T reg104=reg99*pos_nodes[9][1]; reg98=reg101+reg98; reg101=pos_nodes[11][1]*reg80;
    T reg105=pow(reg4,2); reg100=reg81-reg100; reg15=reg87-reg15; reg73=reg90+reg73; reg88=reg69+reg88;
    reg69=pos_nodes[11][0]*reg8; reg103=reg97-reg103; reg81=reg99*pos_nodes[9][0]; reg82=reg76+reg82; reg49=reg61-reg49;
    reg61=pos_nodes[11][2]*reg8; reg93=reg56-reg93; reg56=pos_nodes[11][0]*reg80; reg91=reg78+reg91; reg76=reg17*reg92;
    reg78=pos_nodes[9][0]*reg102; reg87=pos_nodes[9][1]*reg102; reg90=pos_nodes[11][2]*reg80; reg97=reg43*reg37; T reg106=reg95*pos_nodes[8][2];
    reg75=reg72+reg75; reg72=pos_nodes[12][0]*reg77; reg69=reg103-reg69; reg103=reg99*pos_nodes[9][2]; T reg107=reg43*reg67;
    T reg108=pos_nodes[12][2]*reg77; T reg109=reg96*pos_nodes[10][1]; reg101=reg98-reg101; reg98=pos_nodes[12][1]*reg97; reg17=reg74*reg17;
    reg105=1-reg105; reg88=reg104+reg88; reg106=reg75+reg106; reg71=reg27-reg71; reg61=reg49-reg61;
    reg27=pos_nodes[12][0]*reg97; reg56=reg91-reg56; reg62=reg100-reg62; reg49=pos_nodes[12][1]*reg77; reg90=reg73-reg90;
    reg73=pos_nodes[12][2]*reg97; reg75=pos_nodes[9][2]*reg102; reg15=reg87+reg15; reg87=pos_nodes[10][1]*reg76; reg93=reg78+reg93;
    reg78=pos_nodes[10][0]*reg76; reg82=reg81+reg82; reg81=reg96*pos_nodes[10][0]; reg91=pos_nodes[13][0]*reg48; reg100=reg43*reg89;
    reg104=reg96*pos_nodes[10][2]; T reg110=pos_nodes[13][2]*reg48; reg88=reg109+reg88; reg109=reg17*pos_nodes[11][1]; T reg111=pos_nodes[13][1]*reg48;
    T reg112=reg17*pos_nodes[11][0]; reg49=reg62+reg49; reg72=reg69+reg72; reg79=reg43*reg79; reg62=pos_nodes[10][2]*reg76;
    reg71=reg75+reg71; reg69=pos_nodes[13][0]*reg107; reg27=reg56-reg27; reg56=pos_nodes[13][2]*reg107; reg73=reg90-reg73;
    reg108=reg61+reg108; reg61=pos_nodes[13][1]*reg107; reg98=reg101-reg98; reg82=reg81+reg82; reg87=reg15-reg87;
    reg15=0.25*reg105; reg78=reg93-reg78; reg106=reg103+reg106; reg75=pos_nodes[11][0]*reg102; reg81=pos_nodes[11][1]*reg102;
    reg111=reg49+reg111; reg49=pos_nodes[14][1]*reg66; reg90=pos_nodes[14][2]*reg66; reg110=reg108+reg110; reg93=pos_nodes[12][0]*reg100;
    reg101=pos_nodes[11][2]*reg102; reg62=reg71-reg62; reg71=pos_nodes[14][2]*reg97; reg56=reg73-reg56; reg73=reg43*reg65;
    reg58=reg43*reg58; reg103=reg3*reg15; reg75=reg78-reg75; reg78=reg17*pos_nodes[11][2]; reg108=pos_nodes[14][0]*reg66;
    reg91=reg72+reg91; reg61=reg98-reg61; reg72=pos_nodes[14][1]*reg97; reg98=reg79*pos_nodes[12][1]; reg109=reg88+reg109;
    reg112=reg82+reg112; reg82=reg79*pos_nodes[12][0]; reg106=reg104+reg106; reg3=reg4*reg3; reg88=pos_nodes[14][0]*reg97;
    reg69=reg27-reg69; reg27=reg43*reg83; reg104=pos_nodes[12][1]*reg100; reg81=reg87-reg81; reg87=2*reg103;
    T reg113=pos_nodes[13][0]*reg27; reg93=reg75-reg93; reg75=reg43*reg92; T reg114=pos_nodes[15][2]*reg8; reg98=reg109+reg98;
    reg109=reg58*pos_nodes[13][1]; reg90=reg110+reg90; reg71=reg56+reg71; reg56=pos_nodes[15][2]*reg73; reg104=reg81-reg104;
    reg81=pos_nodes[13][1]*reg27; reg110=reg58*pos_nodes[13][0]; reg82=reg112+reg82; reg112=pos_nodes[15][0]*reg8; reg78=reg106+reg78;
    reg108=reg91+reg108; reg15=reg2*reg15; reg91=reg79*pos_nodes[12][2]; reg2=reg4*reg2; reg106=reg7*reg3;
    reg72=reg61+reg72; reg61=pos_nodes[15][1]*reg73; reg16=reg43*reg16; reg101=reg62-reg101; reg62=pos_nodes[12][2]*reg100;
    T reg115=pos_nodes[15][1]*reg8; reg49=reg111+reg49; reg88=reg69+reg88; reg69=pos_nodes[15][0]*reg73; reg114=reg90+reg114;
    reg90=pos_nodes[16][2]*reg106; reg111=reg58*pos_nodes[13][2]; T reg116=pos_nodes[16][2]*reg87; reg62=reg101-reg62; reg56=reg71-reg56;
    reg71=pos_nodes[13][2]*reg27; reg91=reg78+reg91; reg78=pos_nodes[16][0]*reg106; reg112=reg108+reg112; reg115=reg49+reg115;
    reg49=pos_nodes[16][1]*reg106; reg61=reg72-reg61; reg72=pos_nodes[16][1]*reg87; reg110=reg82+reg110; reg82=pos_nodes[14][0]*reg75;
    reg113=reg93+reg113; reg109=reg98+reg109; reg93=reg16*pos_nodes[14][1]; reg98=pos_nodes[14][1]*reg75; reg81=reg104+reg81;
    reg101=2*reg15; reg105=0.5*reg105; reg43=reg74*reg43; reg74=reg16*pos_nodes[14][0]; reg69=reg88-reg69;
    reg88=pos_nodes[16][0]*reg87; reg104=reg7*reg2; reg72=reg61-reg72; reg61=reg13*reg2; reg108=pos_nodes[17][1]*reg101;
    T reg117=reg16*pos_nodes[14][2]; reg78=reg112-reg78; reg112=pos_nodes[17][0]*reg104; T reg118=reg7*reg103; T reg119=pos_nodes[15][1]*reg27;
    reg98=reg81-reg98; reg111=reg91+reg111; reg81=pos_nodes[17][2]*reg101; reg116=reg56-reg116; reg74=reg110+reg74;
    reg56=reg43*pos_nodes[15][0]; reg93=reg109+reg93; reg82=reg113-reg82; reg91=pos_nodes[15][0]*reg27; reg109=reg43*pos_nodes[15][1];
    reg110=reg7*reg105; reg113=pos_nodes[17][1]*reg104; reg49=reg115-reg49; reg71=reg62+reg71; reg62=pos_nodes[14][2]*reg75;
    reg115=pos_nodes[17][2]*reg104; reg90=reg114-reg90; reg88=reg69-reg88; reg69=pos_nodes[17][0]*reg101; reg114=pos_nodes[18][2]*reg101;
    reg81=reg116-reg81; reg91=reg82-reg91; reg82=pos_nodes[16][0]*reg110; reg116=pos_nodes[18][0]*reg61; reg112=reg78-reg112;
    reg78=pos_nodes[18][2]*reg61; reg115=reg90-reg115; reg7=reg7*reg15; reg90=reg13*reg3; T reg120=pos_nodes[18][0]*reg101;
    reg69=reg88-reg69; reg62=reg71-reg62; reg71=pos_nodes[15][2]*reg27; reg113=reg49-reg113; reg49=pos_nodes[18][1]*reg61;
    reg88=pos_nodes[18][1]*reg101; reg108=reg72-reg108; reg72=reg43*pos_nodes[15][2]; reg117=reg111+reg117; reg109=reg93+reg109;
    reg93=reg118*pos_nodes[16][1]; reg111=pos_nodes[16][1]*reg110; reg119=reg98-reg119; reg56=reg74+reg56; reg74=reg118*pos_nodes[16][0];
    reg98=reg118*pos_nodes[16][2]; T reg121=pos_nodes[19][1]*reg90; reg49=reg113-reg49; reg113=pos_nodes[19][0]*reg87; T reg122=reg7*pos_nodes[17][0];
    reg74=reg56+reg74; reg15=reg13*reg15; reg56=pos_nodes[19][2]*reg90; T reg123=pos_nodes[17][0]*reg110; reg82=reg91-reg82;
    reg91=pos_nodes[16][2]*reg110; reg71=reg62-reg71; reg78=reg115-reg78; reg62=pos_nodes[19][0]*reg90; reg116=reg112-reg116;
    reg111=reg119-reg111; reg112=pos_nodes[17][1]*reg110; reg115=reg13*reg105; reg93=reg109+reg93; reg109=reg7*pos_nodes[17][1];
    reg114=reg81+reg114; reg81=pos_nodes[19][1]*reg87; reg120=reg69+reg120; reg88=reg108+reg88; reg69=pos_nodes[19][2]*reg87;
    reg72=reg117+reg72; reg88=reg81+reg88; reg56=reg78-reg56; reg109=reg93+reg109; reg78=reg15*pos_nodes[18][1];
    reg121=reg49-reg121; reg123=reg82+reg123; reg49=pos_nodes[18][0]*reg115; reg91=reg71-reg91; reg71=pos_nodes[17][2]*reg110;
    reg81=reg7*pos_nodes[17][2]; reg98=reg72+reg98; reg120=reg113+reg120; reg72=pos_nodes[18][1]*reg115; reg112=reg111+reg112;
    reg62=reg116-reg62; reg103=reg13*reg103; reg114=reg69+reg114; reg13=reg15*pos_nodes[18][0]; reg122=reg74+reg122;
    reg69=reg121*reg114; reg74=reg120*reg56; reg82=reg62*reg114; reg93=reg15*pos_nodes[18][2]; reg81=reg98+reg81;
    reg98=reg88*reg56; reg49=reg123+reg49; reg108=pos_nodes[19][0]*reg115; reg78=reg109+reg78; reg109=reg103*pos_nodes[19][0];
    reg13=reg122+reg13; reg111=reg103*pos_nodes[19][1]; reg72=reg112+reg72; reg112=pos_nodes[19][1]*reg115; reg71=reg91+reg71;
    reg91=pos_nodes[18][2]*reg115; reg69=reg98-reg69; reg113=reg120*reg121; reg78=reg111+reg78; reg93=reg81+reg93;
    reg91=reg71+reg91; reg71=pos_nodes[19][2]*reg115; reg81=reg62*reg88; reg112=reg72-reg112; reg82=reg74-reg82;
    reg13=reg109+reg13; reg108=reg49-reg108; reg49=reg103*pos_nodes[19][2]; reg72=var_inter[0]*reg112; reg109=reg108*reg69;
    reg111=reg112*reg82; reg81=reg113-reg81; reg78=pos[1]-reg78; reg71=reg91-reg71; reg13=pos[0]-reg13;
    reg93=reg49+reg93; reg49=var_inter[0]*reg108; reg91=reg112*reg114; reg116=reg121*reg71; reg117=reg112*reg56;
    reg119=reg88*reg71; reg122=reg71*reg81; reg109=reg111-reg109; reg93=pos[2]-reg93; reg111=var_inter[1]*reg120;
    reg49=reg13+reg49; reg13=reg108*reg56; reg123=reg62*reg71; T reg124=reg108*reg114; T reg125=reg120*reg71;
    T reg126=var_inter[0]*reg71; reg72=reg78+reg72; reg78=var_inter[1]*reg88; reg119=reg91-reg119; reg123=reg13-reg123;
    reg125=reg124-reg125; T reg127=reg108*reg121; T reg128=reg62*reg112; reg116=reg117-reg116; T reg129=reg108*reg88;
    T reg130=reg120*reg112; reg49=reg111+reg49; reg72=reg78+reg72; reg78=var_inter[1]*reg114; reg126=reg93+reg126;
    reg93=var_inter[2]*reg121; reg111=var_inter[2]*reg62; reg122=reg109-reg122; reg82=reg82/reg122; reg126=reg78+reg126;
    reg123=reg123/reg122; reg119=reg119/reg122; reg69=reg69/reg122; reg130=reg129-reg130; reg72=reg93+reg72;
    reg125=reg125/reg122; reg116=reg116/reg122; reg78=var_inter[2]*reg56; reg49=reg111+reg49; reg128=reg127-reg128;
    reg82=reg72*reg82; reg116=reg49*reg116; reg123=reg72*reg123; reg119=reg49*reg119; reg125=reg72*reg125;
    reg69=reg49*reg69; reg130=reg130/reg122; reg128=reg128/reg122; reg122=reg81/reg122; reg126=reg78+reg126;
    reg122=reg126*reg122; reg69=reg82-reg69; reg128=reg126*reg128; reg123=reg116-reg123; reg130=reg126*reg130;
    reg119=reg125-reg119; var_inter[0]+=reg69-reg122; var_inter[1]+=reg128+reg123; var_inter[2]+=reg119-reg130;

}
#ifndef STRUCT_Global
#define STRUCT_Global
struct Global {};
#endif // STRUCT_Global
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Global &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary_mul_nb_nodes
#define STRUCT_Elementary_mul_nb_nodes
struct Elementary_mul_nb_nodes {};
#endif // STRUCT_Elementary_mul_nb_nodes
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Nodal
#define STRUCT_Nodal
struct Nodal {};
#endif // STRUCT_Nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; T reg2=1+reg0; reg1=reg1-1;
    T reg3=2*var_inter[2]; T reg4=1-reg0; T reg5=0.125*reg2; T reg6=reg0-reg1; T reg7=reg0+reg1;
    reg3=reg3-1; T reg8=0.125*reg4; T reg9=1-reg1; T reg10=reg8*reg9; T reg11=1-reg3;
    T reg12=reg3+reg7; T reg13=1+reg1; T reg14=reg9*reg5; T reg15=reg6-reg3; reg5=reg13*reg5;
    T reg16=reg7-reg3; T reg17=reg10*reg11; T reg18=2+reg12; T reg19=reg1-reg0; T reg20=reg11*reg14;
    reg15=reg15-2; reg18=reg17*reg18; reg15=reg20*reg15; reg17=reg11*reg5; reg16=reg16-2;
    reg20=reg19-reg3; reg8=reg8*reg13; reg7=reg3-reg7; T reg21=1+reg3; reg20=reg20-2;
    T reg22=reg11*reg8; reg18=val[0]*reg18; reg16=reg17*reg16; reg15=val[1]*reg15; reg16=val[2]*reg16;
    reg20=reg22*reg20; reg18=reg15-reg18; reg10=reg10*reg21; reg7=reg7-2; reg6=reg3+reg6;
    reg7=reg10*reg7; reg6=reg6-2; reg0=pow(reg0,2); reg20=val[3]*reg20; reg16=reg18+reg16;
    reg14=reg14*reg21; reg6=reg14*reg6; reg12=reg12-2; reg20=reg16+reg20; reg1=pow(reg1,2);
    reg19=reg3+reg19; reg5=reg5*reg21; reg0=1-reg0; reg7=val[4]*reg7; reg7=reg20+reg7;
    reg6=val[5]*reg6; reg0=0.25*reg0; reg8=reg8*reg21; reg19=reg19-2; reg1=1-reg1;
    reg12=reg5*reg12; reg6=reg7+reg6; reg12=val[6]*reg12; reg5=reg9*reg0; reg1=0.25*reg1;
    reg19=reg8*reg19; reg19=val[7]*reg19; reg12=reg6+reg12; reg6=reg11*reg5; reg7=reg2*reg1;
    reg6=val[8]*reg6; reg8=reg11*reg7; reg19=reg12+reg19; reg0=reg13*reg0; reg1=reg4*reg1;
    reg8=val[9]*reg8; reg6=reg19+reg6; reg10=reg11*reg0; reg11=reg11*reg1; reg8=reg6+reg8;
    reg10=val[10]*reg10; reg10=reg8+reg10; reg3=pow(reg3,2); reg11=val[11]*reg11; reg5=reg21*reg5;
    reg11=reg10+reg11; reg5=val[12]*reg5; reg3=1-reg3; reg7=reg21*reg7; reg5=reg11+reg5;
    reg7=val[13]*reg7; reg0=reg21*reg0; reg3=0.25*reg3; reg1=reg21*reg1; reg0=val[14]*reg0;
    reg4=reg4*reg3; reg7=reg5+reg7; reg0=reg7+reg0; reg1=val[15]*reg1; reg5=reg9*reg4;
    reg3=reg2*reg3; reg5=val[16]*reg5; reg9=reg9*reg3; reg1=reg0+reg1; reg5=reg1+reg5;
    reg9=val[17]*reg9; reg3=reg13*reg3; reg9=reg5+reg9; reg3=val[18]*reg3; reg4=reg13*reg4;
    reg3=reg9+reg3; reg4=val[19]*reg4; res=reg3+reg4;

}
#ifndef STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
#define STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
struct Elementary_mul_nb_nodes_of_each_children_elem {};
#endif // STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes_of_each_children_elem &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss
#define STRUCT_Gauss
struct Gauss {};
#endif // STRUCT_Gauss
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Gauss &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Der_nodal
#define STRUCT_Der_nodal
struct Der_nodal {};
#endif // STRUCT_Der_nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Der_nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary
#define STRUCT_Elementary
struct Elementary {};
#endif // STRUCT_Elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Skin_elementary
#define STRUCT_Skin_elementary
struct Skin_elementary {};
#endif // STRUCT_Skin_elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Skin_elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef AUTORIZEDPERM
#define AUTORIZEDPERM
template<class T> struct AuthorizedPerm;
#endif // AUTORIZEDPERM
template<> struct AuthorizedPerm<Hexa_20> {
    static const unsigned nb_permutations = 0;
    template<class TE> static void make_permutation( TE &e, unsigned nb_perm ) {
    }
    template<class TE> static void unmake_permutation( TE &e, unsigned nb_perm ) {
    }
};

}
#endif // LMT_HEXA_20
