#ifndef LMT_HEXA_20
#define LMT_HEXA_20
namespace LMT {
inline const double *gauss_point_for_order(unsigned order, const Hexa_20 &elem) { /// order -> degre du polynome a integrer exactement
    static const unsigned offset[] = { 0, 33, 66, 99, 132, 269, 406, 543, 680, 817, }; // fonction de lordre du poly
    static const double values[] = {
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.0,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.0,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.0,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.0,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
    };
    return values + offset[order];
}
template<class TNode> void permutation_if_jac_neg(const Hexa_20 &elem,TNode **nodes) {
    typedef typename TNode::T T;
    T reg0=0.25*nodes[1]->pos[1]; T reg1=0.25*nodes[0]->pos[1]; T reg2=0.25*nodes[1]->pos[2]; T reg3=0.25*nodes[0]->pos[2]; T reg4=0.25*nodes[2]->pos[1];
    T reg5=reg0+reg1; T reg6=reg2+reg3; T reg7=0.25*nodes[2]->pos[2]; T reg8=reg1-reg0; T reg9=reg3-reg2;
    T reg10=0.25*nodes[1]->pos[0]; T reg11=0.25*nodes[0]->pos[0]; reg9=reg9-reg7; T reg12=reg5-reg4; T reg13=0.25*nodes[3]->pos[1];
    T reg14=reg6+reg7; T reg15=0.25*nodes[3]->pos[2]; T reg16=reg6-reg7; T reg17=reg4+reg5; reg8=reg8-reg4;
    T reg18=reg11-reg10; T reg19=0.25*nodes[2]->pos[0]; reg9=reg15+reg9; reg8=reg13+reg8; reg12=reg12-reg13;
    T reg20=0.25*nodes[4]->pos[1]; T reg21=0.25*nodes[4]->pos[2]; reg16=reg16-reg15; T reg22=reg10+reg11; T reg23=reg13+reg17;
    T reg24=reg14+reg15; reg9=reg21+reg9; reg8=reg20+reg8; reg16=reg21+reg16; T reg25=0.25*nodes[5]->pos[2];
    reg18=reg18-reg19; T reg26=0.25*nodes[3]->pos[0]; T reg27=reg24-reg21; T reg28=reg23-reg20; T reg29=reg22-reg19;
    reg12=reg12+reg20; T reg30=0.25*nodes[5]->pos[1]; reg9=reg9-reg25; reg29=reg29-reg26; reg12=reg12+reg30;
    T reg31=0.25*nodes[6]->pos[1]; reg28=reg28-reg30; T reg32=0.25*nodes[4]->pos[0]; reg18=reg18+reg26; T reg33=reg19+reg22;
    reg16=reg25+reg16; reg27=reg27-reg25; T reg34=0.25*nodes[6]->pos[2]; reg8=reg8-reg30; reg29=reg32+reg29;
    reg12=reg12-reg31; T reg35=0.25*nodes[7]->pos[1]; reg28=reg28-reg31; reg16=reg16-reg34; reg27=reg27-reg34;
    T reg36=0.25*nodes[7]->pos[2]; T reg37=reg26+reg33; reg18=reg18+reg32; T reg38=0.25*nodes[5]->pos[0]; reg9=reg9-reg34;
    reg8=reg8-reg31; reg27=reg27-reg36; T reg39=0.5*nodes[8]->pos[2]; reg18=reg18-reg38; reg28=reg28-reg35;
    reg16=reg16-reg36; T reg40=0.5*nodes[9]->pos[1]; reg8=reg35+reg8; T reg41=reg37-reg32; T reg42=0.5*nodes[8]->pos[1];
    reg12=reg12-reg35; T reg43=0.25*nodes[6]->pos[0]; T reg44=0.5*nodes[9]->pos[2]; reg9=reg36+reg9; reg29=reg38+reg29;
    reg16=reg16-reg39; reg41=reg41-reg38; reg8=reg40+reg8; reg28=reg28-reg42; reg39=reg27-reg39;
    reg27=0.5*nodes[10]->pos[1]; reg42=reg12-reg42; reg18=reg18-reg43; reg12=0.25*nodes[7]->pos[0]; reg9=reg44+reg9;
    T reg45=0.5*nodes[11]->pos[1]; T reg46=0.5*nodes[10]->pos[2]; reg29=reg29-reg43; T reg47=0.5*nodes[11]->pos[2]; T reg48=0.5*nodes[12]->pos[2];
    reg41=reg41-reg43; T reg49=0.5*nodes[13]->pos[2]; reg16=reg46+reg16; reg9=reg9-reg47; reg40=reg28-reg40;
    reg28=0.5*nodes[13]->pos[1]; T reg50=0.5*nodes[8]->pos[0]; reg8=reg8-reg45; reg29=reg29-reg12; T reg51=0.5*nodes[9]->pos[0];
    reg44=reg39-reg44; reg18=reg18+reg12; reg42=reg42+reg27; reg39=0.5*nodes[12]->pos[1]; reg18=reg18+reg51;
    T reg52=0.5*nodes[11]->pos[0]; reg8=reg28+reg8; T reg53=0.5*nodes[14]->pos[1]; reg42=reg42-reg39; reg27=reg40-reg27;
    reg40=0.5*nodes[15]->pos[1]; T reg54=0.5*nodes[10]->pos[0]; reg29=reg29-reg50; reg46=reg44-reg46; reg16=reg16-reg48;
    reg9=reg49+reg9; reg44=0.5*nodes[14]->pos[2]; reg41=reg41-reg12; T reg55=0.5*nodes[15]->pos[2]; reg47=reg46-reg47;
    reg50=reg41-reg50; reg29=reg29+reg54; reg41=0.5*nodes[12]->pos[0]; reg45=reg27-reg45; reg16=reg44+reg16;
    reg27=0.5*nodes[16]->pos[2]; reg18=reg18-reg52; reg46=0.5*nodes[13]->pos[0]; reg8=reg8-reg40; reg9=reg9-reg55;
    T reg56=0.5*nodes[16]->pos[1]; reg42=reg42+reg53; T reg57=0.5*nodes[14]->pos[0]; reg29=reg29-reg41; reg8=reg8-reg56;
    T reg58=0.5*nodes[15]->pos[0]; reg18=reg18+reg46; reg9=reg9-reg27; reg51=reg50-reg51; reg48=reg47+reg48;
    reg47=0.5*nodes[17]->pos[1]; reg45=reg39+reg45; reg56=reg42-reg56; reg27=reg16-reg27; reg16=0.5*nodes[17]->pos[2];
    reg39=0.5*nodes[16]->pos[0]; reg18=reg18-reg58; reg56=reg56-reg47; reg8=reg47+reg8; reg42=0.5*nodes[18]->pos[2];
    reg27=reg27-reg16; reg47=0.5*nodes[18]->pos[1]; reg9=reg16+reg9; reg49=reg48+reg49; reg54=reg51-reg54;
    reg28=reg45+reg28; reg29=reg29+reg57; reg52=reg54-reg52; reg44=reg49+reg44; reg28=reg53+reg28;
    reg9=reg42+reg9; reg16=0.5*nodes[19]->pos[1]; reg56=reg56+reg47; reg29=reg29-reg39; reg42=reg27+reg42;
    reg27=0.5*nodes[19]->pos[2]; reg45=0.5*nodes[17]->pos[0]; reg8=reg47+reg8; reg39=reg18-reg39; reg55=reg44+reg55;
    reg18=0.5*nodes[18]->pos[0]; reg9=reg9-reg27; reg39=reg39+reg45; reg56=reg56+reg16; reg40=reg28+reg40;
    reg27=reg42+reg27; reg16=reg8-reg16; reg45=reg29-reg45; reg52=reg41+reg52; reg8=reg40*reg27;
    reg52=reg46+reg52; reg28=reg56*reg55; reg40=reg40*reg9; reg39=reg39+reg18; reg29=0.5*nodes[19]->pos[0];
    reg55=reg55*reg16; reg45=reg18+reg45; reg9=reg56*reg9; reg40=reg55-reg40; reg8=reg28-reg8;
    reg16=reg27*reg16; reg39=reg39-reg29; reg45=reg29+reg45; reg52=reg57+reg52; reg9=reg16-reg9;
    reg52=reg58+reg52; reg8=reg39*reg8; reg40=reg45*reg40; reg9=reg52*reg9; reg40=reg8-reg40;
    T det_jac=reg40+reg9;

    if ( det_jac < 0 ) {
        TNode *tmp[] = {nodes[0],nodes[3],nodes[2],nodes[1],nodes[4],nodes[7],nodes[6],nodes[5],nodes[11],nodes[10],nodes[9],nodes[8],nodes[15],nodes[14],nodes[13],nodes[12],nodes[16],nodes[19],nodes[18],nodes[17]};
        for(unsigned i=0;i<20;++i) nodes[i] = tmp[i];
    }
}
template<class PosNodes,class Pvec,class TVI> void get_var_inter_linear(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; reg0=reg0-1; T reg1=2*var_inter[1]; T reg2=1+reg0; reg1=reg1-1;
    T reg3=2*var_inter[2]; T reg4=1-reg0; reg3=reg3-1; T reg5=0.125*reg4; T reg6=1-reg1;
    T reg7=reg0+reg1; T reg8=reg0-reg1; T reg9=0.125*reg2; T reg10=reg5*reg6; T reg11=0.25*reg4;
    T reg12=0.25*reg2; T reg13=1-reg3; T reg14=reg9*reg6; T reg15=1+reg1; T reg16=reg3+reg7;
    T reg17=reg8-reg3; T reg18=2+reg16; T reg19=reg10*reg13; T reg20=reg14*reg13; reg17=reg17-2;
    reg9=reg15*reg9; T reg21=reg7-reg3; T reg22=reg1-reg0; T reg23=2*reg10; T reg24=2*reg14;
    T reg25=reg13*reg11; T reg26=reg13*reg12; T reg27=2*reg9; T reg28=2*reg20; T reg29=reg13*reg9;
    reg21=reg21-2; T reg30=reg18*reg25; reg5=reg15*reg5; T reg31=0.25*reg6; T reg32=reg22-reg3;
    T reg33=reg18*reg23; T reg34=reg17*reg24; T reg35=2*reg19; T reg36=reg17*reg26; reg32=reg32-2;
    T reg37=reg13*reg5; T reg38=1+reg3; reg7=reg3-reg7; reg34=reg28+reg34; T reg39=reg21*reg26;
    reg30=reg35-reg30; T reg40=2*reg5; reg33=reg35-reg33; reg36=reg28+reg36; T reg41=reg21*reg27;
    T reg42=2*reg29; T reg43=reg13*reg31; T reg44=0.25*reg15; reg8=reg3+reg8; T reg45=pos_nodes[0][0]*reg30;
    T reg46=pos_nodes[1][0]*reg36; T reg47=pos_nodes[1][1]*reg34; T reg48=pos_nodes[1][2]*reg34; T reg49=pos_nodes[0][2]*reg33; T reg50=reg38*reg11;
    T reg51=pos_nodes[0][1]*reg33; T reg52=reg32*reg25; reg39=reg42+reg39; T reg53=reg13*reg44; T reg54=pos_nodes[1][0]*reg34;
    T reg55=pos_nodes[0][0]*reg33; reg41=reg42+reg41; T reg56=reg32*reg40; T reg57=2*reg37; T reg58=pos_nodes[1][2]*reg36;
    T reg59=pos_nodes[1][1]*reg36; T reg60=pos_nodes[0][1]*reg30; T reg61=pos_nodes[0][2]*reg30; T reg62=reg17*reg43; T reg63=reg18*reg43;
    reg10=reg10*reg38; reg7=reg7-2; reg51=reg47+reg51; reg47=pos_nodes[2][1]*reg41; T reg64=pos_nodes[2][2]*reg41;
    reg62=reg28+reg62; reg49=reg48+reg49; reg28=2*reg10; reg48=pos_nodes[2][2]*reg39; T reg65=reg7*reg23;
    reg56=reg57+reg56; reg61=reg58+reg61; reg63=reg35-reg63; reg35=reg21*reg53; reg58=reg38*reg12;
    reg14=reg14*reg38; reg8=reg8-2; T reg66=reg7*reg50; reg17=reg20*reg17; reg19=reg18*reg19;
    reg18=pos_nodes[2][1]*reg39; reg20=pos_nodes[2][0]*reg39; reg60=reg59+reg60; reg45=reg46+reg45; reg55=reg54+reg55;
    reg46=pos_nodes[2][0]*reg41; reg52=reg57+reg52; reg54=pos_nodes[3][2]*reg52; reg61=reg48-reg61; reg21=reg29*reg21;
    reg29=reg8*reg58; reg65=reg28+reg65; reg48=pos_nodes[3][0]*reg56; reg59=2*reg14; T reg67=pos_nodes[3][1]*reg52;
    reg60=reg18-reg60; reg45=reg20-reg45; reg35=reg42+reg35; reg18=pos_nodes[3][0]*reg52; reg20=reg32*reg53;
    reg42=reg38*reg31; T reg68=pos_nodes[0][0]*reg19; T reg69=pos_nodes[1][0]*reg17; T reg70=pow(reg0,2); reg47=reg51+reg47;
    reg51=pos_nodes[3][1]*reg56; T reg71=pos_nodes[1][1]*reg17; T reg72=pos_nodes[0][1]*reg19; T reg73=pos_nodes[3][2]*reg56; reg64=reg49+reg64;
    reg22=reg3+reg22; reg46=reg55+reg46; reg16=reg16-2; reg9=reg9*reg38; reg66=reg28+reg66;
    reg49=pos_nodes[1][0]*reg62; reg55=reg8*reg24; T reg74=pos_nodes[0][1]*reg63; T reg75=pos_nodes[0][0]*reg63; T reg76=pos_nodes[1][1]*reg62;
    T reg77=pos_nodes[4][0]*reg66; reg18=reg45+reg18; reg75=reg49-reg75; reg51=reg47+reg51; reg45=pos_nodes[0][2]*reg63;
    reg47=pos_nodes[2][1]*reg35; reg49=pos_nodes[2][0]*reg35; T reg78=pos_nodes[1][2]*reg62; reg72=reg71-reg72; reg71=pos_nodes[2][1]*reg21;
    reg29=reg59+reg29; T reg79=reg16*reg58; reg74=reg76-reg74; reg76=pos_nodes[4][1]*reg65; reg67=reg60+reg67;
    reg60=pos_nodes[4][1]*reg66; reg32=reg37*reg32; reg37=pos_nodes[4][0]*reg65; reg68=reg69-reg68; reg73=reg64+reg73;
    reg64=reg16*reg27; reg55=reg59+reg55; reg48=reg46+reg48; reg5=reg5*reg38; reg46=pos_nodes[0][2]*reg19;
    reg69=pos_nodes[4][2]*reg66; reg54=reg61+reg54; reg20=reg57+reg20; reg57=reg7*reg42; reg61=pos_nodes[1][2]*reg17;
    T reg80=pos_nodes[2][0]*reg21; reg22=reg22-2; reg70=1-reg70; T reg81=pow(reg1,2); T reg82=2*reg9;
    T reg83=pos_nodes[4][2]*reg65; reg81=1-reg81; T reg84=pos_nodes[2][2]*reg21; reg46=reg61-reg46; reg80=reg68+reg80;
    reg61=pos_nodes[3][0]*reg32; reg51=reg76-reg51; reg68=pos_nodes[5][1]*reg55; reg76=0.25*reg70; reg7=reg10*reg7;
    reg79=reg82+reg79; reg10=reg22*reg50; reg48=reg37-reg48; reg37=pos_nodes[5][0]*reg55; T reg85=pos_nodes[5][0]*reg29;
    T reg86=pos_nodes[5][1]*reg29; reg60=reg67-reg60; reg77=reg18-reg77; reg18=2*reg5; reg67=reg38*reg44;
    T reg87=reg8*reg42; reg57=reg28+reg57; reg28=pos_nodes[2][2]*reg35; reg45=reg78-reg45; reg69=reg54-reg69;
    reg54=pos_nodes[5][2]*reg29; reg64=reg82+reg64; reg49=reg75+reg49; reg75=pos_nodes[3][0]*reg20; reg78=reg22*reg40;
    T reg88=pos_nodes[3][1]*reg32; reg71=reg72+reg71; reg73=reg83-reg73; reg72=pos_nodes[5][2]*reg55; reg83=pos_nodes[3][1]*reg20;
    reg47=reg74+reg47; reg54=reg69-reg54; reg83=reg47-reg83; reg47=pos_nodes[6][0]*reg79; reg85=reg77-reg85;
    reg37=reg48+reg37; reg61=reg80+reg61; reg48=pos_nodes[6][1]*reg79; reg86=reg60-reg86; reg60=pos_nodes[4][0]*reg7;
    reg69=pos_nodes[6][0]*reg64; reg28=reg45+reg28; reg45=pos_nodes[3][2]*reg20; reg74=pos_nodes[4][1]*reg57; reg87=reg59+reg87;
    reg68=reg51+reg68; reg51=pos_nodes[6][1]*reg64; reg84=reg46+reg84; reg46=pos_nodes[3][2]*reg32; reg88=reg71+reg88;
    reg59=pos_nodes[4][1]*reg7; reg78=reg18+reg78; reg72=reg73+reg72; reg8=reg14*reg8; reg14=pos_nodes[4][0]*reg57;
    reg75=reg49-reg75; reg49=reg6*reg76; reg71=pos_nodes[6][2]*reg64; reg73=reg16*reg67; reg10=reg18+reg10;
    reg70=0.5*reg70; reg77=0.25*reg81; reg80=pos_nodes[6][2]*reg79; T reg89=2*reg49; reg69=reg37+reg69;
    reg37=pos_nodes[7][0]*reg78; reg60=reg61+reg60; reg61=pos_nodes[5][0]*reg8; reg74=reg83-reg74; reg83=pos_nodes[5][1]*reg87;
    reg47=reg85+reg47; reg85=pos_nodes[7][0]*reg10; reg59=reg88+reg59; reg88=pos_nodes[5][1]*reg8; T reg90=pos_nodes[5][0]*reg87;
    reg14=reg75-reg14; reg45=reg28-reg45; reg28=pos_nodes[4][2]*reg57; reg75=reg22*reg67; reg80=reg54+reg80;
    reg54=pos_nodes[7][2]*reg10; reg71=reg72+reg71; reg72=pos_nodes[7][2]*reg78; reg46=reg84+reg46; reg84=pos_nodes[4][2]*reg7;
    T reg91=reg2*reg77; reg16=reg9*reg16; reg82=reg73+reg82; reg48=reg86+reg48; reg9=pos_nodes[7][1]*reg10;
    reg73=reg13*reg70; reg86=pos_nodes[7][1]*reg78; reg51=reg68+reg51; reg68=reg2*reg1; T reg92=pos_nodes[6][1]*reg82;
    T reg93=pos_nodes[8][1]*reg73; reg22=reg5*reg22; reg54=reg80+reg54; reg5=pos_nodes[8][2]*reg73; reg85=reg47+reg85;
    reg47=2*reg91; reg80=reg13*reg68; reg72=reg71+reg72; reg71=pos_nodes[8][2]*reg89; T reg94=pos_nodes[5][2]*reg8;
    reg76=reg15*reg76; reg37=reg69+reg37; reg69=pos_nodes[8][0]*reg73; reg84=reg46+reg84; reg46=pos_nodes[8][0]*reg89;
    T reg95=pos_nodes[8][1]*reg89; reg86=reg51+reg86; reg90=reg14+reg90; reg9=reg48+reg9; reg14=pos_nodes[6][0]*reg16;
    reg61=reg60+reg61; reg48=pos_nodes[6][0]*reg82; reg88=reg59+reg88; reg51=pos_nodes[6][1]*reg16; reg83=reg74+reg83;
    reg28=reg45-reg28; reg45=pos_nodes[5][2]*reg87; reg59=reg0*reg6; reg75=reg18+reg75; reg94=reg84+reg94;
    reg93=reg9-reg93; reg9=pos_nodes[6][2]*reg16; reg95=reg86-reg95; reg18=pos_nodes[9][1]*reg47; reg60=pos_nodes[7][0]*reg22;
    reg14=reg61+reg14; reg51=reg88+reg51; reg61=pos_nodes[7][1]*reg22; reg45=reg28+reg45; reg28=pos_nodes[6][2]*reg82;
    reg92=reg83+reg92; reg74=pos_nodes[7][1]*reg75; reg5=reg54-reg5; reg54=pos_nodes[9][2]*reg80; reg71=reg72-reg71;
    reg72=pos_nodes[9][2]*reg47; reg83=pos_nodes[9][1]*reg80; reg84=pos_nodes[9][0]*reg47; reg46=reg37-reg46; reg90=reg48+reg90;
    reg37=pos_nodes[7][0]*reg75; reg77=reg4*reg77; reg48=reg13*reg49; reg86=pos_nodes[9][0]*reg80; reg69=reg85-reg69;
    reg85=2*reg76; reg81=0.5*reg81; reg88=reg13*reg59; T reg96=reg1*reg4; T reg97=pos_nodes[10][0]*reg85;
    reg86=reg69-reg86; reg69=pos_nodes[10][2]*reg73; reg54=reg5-reg54; reg60=reg14+reg60; reg5=pos_nodes[8][0]*reg48;
    reg14=pos_nodes[8][1]*reg88; reg74=reg92-reg74; reg92=pos_nodes[10][0]*reg73; T reg98=pos_nodes[8][0]*reg88; T reg99=pos_nodes[8][1]*reg48;
    reg61=reg51+reg61; reg51=pos_nodes[7][2]*reg22; reg9=reg94+reg9; reg84=reg46-reg84; reg46=pos_nodes[7][2]*reg75;
    reg94=reg13*reg91; reg37=reg90-reg37; reg28=reg45+reg28; reg45=pos_nodes[10][1]*reg85; reg18=reg95-reg18;
    reg90=pos_nodes[10][1]*reg73; reg95=reg15*reg0; T reg100=reg13*reg81; reg83=reg93-reg83; reg93=reg13*reg96;
    T reg101=pos_nodes[10][2]*reg85; T reg102=2*reg77; reg72=reg71-reg72; reg71=pos_nodes[11][2]*reg93; reg69=reg54+reg69;
    reg98=reg37-reg98; reg37=pos_nodes[9][0]*reg100; reg54=pos_nodes[11][0]*reg93; reg92=reg86+reg92; reg86=pos_nodes[11][1]*reg93;
    reg90=reg83+reg90; reg14=reg74-reg14; reg74=pos_nodes[9][1]*reg100; reg83=pow(reg3,2); T reg103=reg38*reg70;
    reg45=reg18-reg45; reg101=reg72-reg101; reg18=pos_nodes[11][2]*reg102; reg72=pos_nodes[11][1]*reg102; reg46=reg28-reg46;
    reg97=reg84-reg97; reg28=pos_nodes[11][0]*reg102; reg84=reg13*reg76; reg99=reg61+reg99; reg61=pos_nodes[9][1]*reg94;
    T reg104=pos_nodes[9][0]*reg94; reg5=reg60+reg5; reg60=reg13*reg95; T reg105=pos_nodes[8][2]*reg88; reg51=reg9+reg51;
    reg9=pos_nodes[8][2]*reg48; reg72=reg45-reg72; reg45=pos_nodes[12][1]*reg89; T reg106=pos_nodes[9][2]*reg94; reg9=reg51+reg9;
    reg83=1-reg83; reg51=pos_nodes[12][2]*reg89; reg18=reg101-reg18; reg101=reg38*reg68; T reg107=pos_nodes[9][2]*reg100;
    reg105=reg46-reg105; reg86=reg90-reg86; reg46=pos_nodes[12][1]*reg103; reg90=pos_nodes[12][2]*reg103; T reg108=pos_nodes[12][0]*reg89;
    reg28=reg97-reg28; reg71=reg69-reg71; reg74=reg14+reg74; reg14=pos_nodes[10][1]*reg60; reg54=reg92-reg54;
    reg69=reg84*pos_nodes[10][1]; reg92=pos_nodes[12][0]*reg103; reg37=reg98+reg37; reg104=reg5+reg104; reg5=pos_nodes[10][0]*reg60;
    reg97=pos_nodes[10][0]*reg84; reg61=reg99+reg61; reg13=reg13*reg77; reg69=reg61+reg69; reg61=pos_nodes[13][2]*reg101;
    reg98=reg84*pos_nodes[10][2]; reg99=reg13*pos_nodes[11][1]; reg46=reg86-reg46; reg86=pos_nodes[13][1]*reg101; reg90=reg71-reg90;
    reg71=reg38*reg59; reg92=reg54-reg92; reg54=0.25*reg83; T reg109=pos_nodes[13][0]*reg47; reg108=reg28+reg108;
    reg28=pos_nodes[13][0]*reg101; reg49=reg49*reg38; T reg110=pos_nodes[11][1]*reg100; reg14=reg74-reg14; reg5=reg37-reg5;
    reg37=pos_nodes[11][0]*reg100; reg74=pos_nodes[13][1]*reg47; reg45=reg72+reg45; reg106=reg9+reg106; reg9=pos_nodes[13][2]*reg47;
    reg51=reg18+reg51; reg18=pos_nodes[10][2]*reg60; reg107=reg105+reg107; reg97=reg104+reg97; reg72=reg13*pos_nodes[11][0];
    reg104=pos_nodes[14][1]*reg85; reg105=pos_nodes[11][2]*reg100; reg18=reg107-reg18; reg99=reg69+reg99; reg74=reg45+reg74;
    reg45=reg38*reg81; reg69=pos_nodes[12][0]*reg71; reg37=reg5-reg37; reg5=reg49*pos_nodes[12][1]; reg61=reg90-reg61;
    reg90=pos_nodes[14][2]*reg103; reg98=reg106+reg98; reg91=reg38*reg91; reg106=pos_nodes[14][2]*reg85; reg9=reg51+reg9;
    reg51=reg38*reg96; reg86=reg46-reg86; reg46=pos_nodes[14][1]*reg103; reg107=pos_nodes[14][0]*reg103; reg28=reg92-reg28;
    reg110=reg14-reg110; reg14=reg49*pos_nodes[12][0]; reg72=reg97+reg72; reg92=reg3*reg4; reg97=pos_nodes[12][1]*reg71;
    T reg111=pos_nodes[14][0]*reg85; reg4=reg4*reg54; reg109=reg108+reg109; reg108=reg13*pos_nodes[11][2]; reg107=reg28+reg107;
    reg28=pos_nodes[15][0]*reg51; reg97=reg110-reg97; reg90=reg61+reg90; reg61=pos_nodes[15][2]*reg51; reg110=2*reg4;
    T reg112=reg91*pos_nodes[13][0]; reg14=reg72+reg14; reg5=reg99+reg5; reg72=reg91*pos_nodes[13][1]; reg99=reg6*reg92;
    T reg113=reg2*reg3; reg54=reg2*reg54; reg111=reg109+reg111; reg2=pos_nodes[15][0]*reg102; reg109=pos_nodes[13][0]*reg45;
    reg69=reg37-reg69; reg37=pos_nodes[15][1]*reg51; reg46=reg86+reg46; reg106=reg9+reg106; reg9=pos_nodes[15][2]*reg102;
    reg86=reg38*reg95; T reg114=pos_nodes[13][1]*reg45; reg104=reg74+reg104; reg74=pos_nodes[15][1]*reg102; reg108=reg98+reg108;
    reg98=reg49*pos_nodes[12][2]; T reg115=pos_nodes[12][2]*reg71; reg105=reg18-reg105; reg76=reg38*reg76; reg18=reg91*pos_nodes[13][2];
    T reg116=reg6*reg113; reg2=reg111+reg2; reg111=pos_nodes[16][0]*reg99; T reg117=pos_nodes[16][2]*reg110; reg61=reg90-reg61;
    reg98=reg108+reg98; reg83=0.5*reg83; reg90=pos_nodes[16][1]*reg110; reg37=reg46-reg37; reg46=pos_nodes[13][2]*reg45;
    reg115=reg105-reg115; reg105=pos_nodes[14][0]*reg86; reg109=reg69+reg109; reg9=reg106+reg9; reg69=pos_nodes[16][2]*reg99;
    reg77=reg38*reg77; reg74=reg104+reg74; reg38=pos_nodes[16][1]*reg99; reg104=pos_nodes[14][1]*reg86; reg114=reg97+reg114;
    reg28=reg107-reg28; reg97=pos_nodes[16][0]*reg110; reg106=2*reg54; reg107=reg76*pos_nodes[14][0]; reg112=reg14+reg112;
    reg72=reg5+reg72; reg5=reg76*pos_nodes[14][1]; reg14=pos_nodes[14][2]*reg86; reg46=reg115+reg46; reg108=reg76*pos_nodes[14][2];
    reg18=reg98+reg18; reg111=reg2-reg111; reg2=pos_nodes[17][0]*reg116; reg98=reg15*reg113; reg115=pos_nodes[17][0]*reg106;
    reg107=reg112+reg107; reg112=reg77*pos_nodes[15][0]; reg97=reg28-reg97; reg104=reg114-reg104; reg28=pos_nodes[15][1]*reg45;
    reg114=pos_nodes[17][2]*reg116; reg69=reg9-reg69; reg90=reg37-reg90; reg9=reg6*reg83; reg117=reg61-reg117;
    reg37=pos_nodes[17][2]*reg106; reg61=reg77*pos_nodes[15][1]; reg5=reg72+reg5; reg72=pos_nodes[17][1]*reg116; reg38=reg74-reg38;
    reg105=reg109-reg105; reg74=pos_nodes[15][0]*reg45; reg109=reg6*reg4; T reg118=pos_nodes[17][1]*reg106; T reg119=pos_nodes[18][2]*reg106;
    reg37=reg117-reg37; reg117=pos_nodes[18][2]*reg98; reg114=reg69-reg114; reg6=reg6*reg54; reg108=reg18+reg108;
    reg74=reg105-reg74; reg72=reg38-reg72; reg18=pos_nodes[18][1]*reg98; reg38=pos_nodes[16][0]*reg9; reg69=pos_nodes[18][1]*reg106;
    reg118=reg90-reg118; reg61=reg5+reg61; reg5=reg109*pos_nodes[16][1]; reg90=pos_nodes[16][1]*reg9; reg28=reg104-reg28;
    reg104=reg109*pos_nodes[16][0]; reg112=reg107+reg112; reg14=reg46-reg14; reg2=reg111-reg2; reg46=reg77*pos_nodes[15][2];
    reg105=pos_nodes[18][0]*reg98; reg107=reg15*reg92; reg111=pos_nodes[15][2]*reg45; reg115=reg97-reg115; reg97=pos_nodes[18][0]*reg106;
    reg97=reg115+reg97; reg38=reg74-reg38; reg74=pos_nodes[17][0]*reg9; reg54=reg15*reg54; reg115=pos_nodes[19][1]*reg110;
    reg69=reg118+reg69; reg104=reg112+reg104; reg112=reg6*pos_nodes[17][0]; reg105=reg2-reg105; reg2=pos_nodes[19][0]*reg107;
    reg117=reg114-reg117; reg114=pos_nodes[19][2]*reg107; reg118=pos_nodes[17][1]*reg9; reg90=reg28-reg90; reg28=pos_nodes[19][0]*reg110;
    T reg120=pos_nodes[16][2]*reg9; reg111=reg14-reg111; reg46=reg108+reg46; reg14=reg109*pos_nodes[16][2]; reg108=reg6*pos_nodes[17][1];
    reg5=reg61+reg5; reg61=reg15*reg83; reg119=reg37+reg119; reg37=pos_nodes[19][2]*reg110; T reg121=pos_nodes[19][1]*reg107;
    reg18=reg72-reg18; reg121=reg18-reg121; reg74=reg38+reg74; reg120=reg111-reg120; reg112=reg104+reg112;
    reg18=reg54*pos_nodes[18][0]; reg38=pos_nodes[17][2]*reg9; reg28=reg97+reg28; reg72=reg54*pos_nodes[18][1]; reg108=reg5+reg108;
    reg114=reg117-reg114; reg5=pos_nodes[18][0]*reg61; reg118=reg90+reg118; reg90=pos_nodes[18][1]*reg61; reg2=reg105-reg2;
    reg115=reg69+reg115; reg37=reg119+reg37; reg4=reg15*reg4; reg14=reg46+reg14; reg15=reg6*pos_nodes[17][2];
    reg46=reg115*reg114; reg69=pos_nodes[19][0]*reg61; reg97=reg121*reg37; reg18=reg112+reg18; reg104=reg4*pos_nodes[19][0];
    reg105=reg4*pos_nodes[19][1]; reg72=reg108+reg72; reg108=reg28*reg114; reg111=reg2*reg37; reg5=reg74+reg5;
    reg15=reg14+reg15; reg14=pos_nodes[18][2]*reg61; reg90=reg118+reg90; reg74=pos_nodes[19][1]*reg61; reg38=reg120+reg38;
    reg112=reg54*pos_nodes[18][2]; reg117=pos_nodes[19][2]*reg61; reg14=reg38+reg14; reg105=reg72+reg105; reg104=reg18+reg104;
    reg18=reg4*pos_nodes[19][2]; reg74=reg90-reg74; reg112=reg15+reg112; reg15=reg2*reg115; reg111=reg108-reg111;
    reg38=reg28*reg121; reg97=reg46-reg97; reg69=reg5-reg69; reg18=reg112+reg18; reg5=var_inter[0]*reg69;
    reg72=var_inter[0]*reg74; reg117=reg14-reg117; reg105=pos[1]-reg105; reg14=reg69*reg97; reg90=reg74*reg111;
    reg15=reg38-reg15; reg104=pos[0]-reg104; reg14=reg90-reg14; reg90=reg117*reg15; reg112=reg74*reg114;
    reg118=reg121*reg117; reg119=var_inter[0]*reg117; reg120=reg74*reg37; reg72=reg105+reg72; reg105=var_inter[1]*reg115;
    T reg122=reg115*reg117; T reg123=reg2*reg117; reg5=reg104+reg5; reg104=var_inter[1]*reg28; T reg124=reg28*reg117;
    T reg125=reg69*reg37; reg18=pos[2]-reg18; T reg126=reg69*reg114; T reg127=reg28*reg74; reg90=reg14-reg90;
    reg14=reg69*reg115; T reg128=reg2*reg74; T reg129=reg69*reg121; reg124=reg125-reg124; reg123=reg126-reg123;
    reg118=reg112-reg118; reg119=reg18+reg119; reg18=var_inter[1]*reg37; T reg130=var_inter[2]*reg2; reg72=reg105+reg72;
    reg122=reg120-reg122; reg105=var_inter[2]*reg121; reg5=reg104+reg5; reg118=reg118/reg90; reg122=reg122/reg90;
    reg123=reg123/reg90; reg127=reg14-reg127; reg97=reg97/reg90; reg128=reg129-reg128; reg124=reg124/reg90;
    reg111=reg111/reg90; reg119=reg18+reg119; reg72=reg105+reg72; reg18=var_inter[2]*reg114; reg5=reg130+reg5;
    reg122=reg5*reg122; reg123=reg123*reg72; reg118=reg5*reg118; reg124=reg124*reg72; reg111=reg111*reg72;
    reg97=reg5*reg97; reg127=reg127/reg90; reg119=reg18+reg119; reg15=reg15/reg90; reg90=reg128/reg90;
    reg122=reg124-reg122; reg127=reg119*reg127; reg123=reg118-reg123; reg90=reg90*reg119; reg97=reg111-reg97;
    reg15=reg15*reg119; var_inter[1]=reg90+reg123; var_inter[0]=reg97-reg15; var_inter[2]=reg122-reg127;

}
template<class PosNodes,class Pvec,class TVI> void get_var_inter(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; T reg2=1-reg0; T reg3=2*var_inter[2];
    reg1=reg1-1; T reg4=1+reg0; reg3=reg3-1; T reg5=0.125*reg4; T reg6=reg1+reg0;
    T reg7=0.125*reg2; T reg8=1-reg1; T reg9=reg0-reg1; T reg10=1+reg1; T reg11=reg5*reg8;
    T reg12=reg9-reg3; T reg13=reg7*reg8; T reg14=1-reg3; T reg15=reg3+reg6; T reg16=0.25*reg4;
    T reg17=0.25*reg2; reg12=reg12-2; T reg18=reg13*reg14; T reg19=2*reg11; reg5=reg10*reg5;
    T reg20=2+reg15; T reg21=2*reg13; T reg22=reg11*reg14; T reg23=reg6-reg3; T reg24=reg14*reg17;
    T reg25=reg14*reg16; T reg26=reg1-reg0; T reg27=reg20*reg24; T reg28=reg12*reg25; T reg29=0.25*reg8;
    T reg30=2*reg22; T reg31=2*reg5; T reg32=2*reg18; reg23=reg23-2; reg7=reg10*reg7;
    T reg33=reg5*reg14; T reg34=reg12*reg19; T reg35=reg26-reg3; T reg36=reg20*reg21; reg35=reg35-2;
    T reg37=0.25*reg10; T reg38=reg14*reg29; reg36=reg32-reg36; reg28=reg30+reg28; T reg39=2*reg33;
    T reg40=reg7*reg14; reg6=reg3-reg6; reg27=reg32-reg27; reg34=reg30+reg34; T reg41=1+reg3;
    T reg42=reg23*reg31; T reg43=reg23*reg25; T reg44=2*reg7; T reg45=pos_nodes[1][1]*reg28; T reg46=pos_nodes[1][0]*reg28;
    T reg47=pos_nodes[0][0]*reg27; T reg48=pos_nodes[0][1]*reg27; reg6=reg6-2; reg43=reg39+reg43; T reg49=pos_nodes[0][2]*reg27;
    T reg50=pos_nodes[1][2]*reg28; T reg51=2*reg40; T reg52=pos_nodes[1][0]*reg34; T reg53=pos_nodes[1][2]*reg34; T reg54=pos_nodes[0][2]*reg36;
    T reg55=pos_nodes[0][0]*reg36; T reg56=pos_nodes[1][1]*reg34; T reg57=pos_nodes[0][1]*reg36; T reg58=reg41*reg17; T reg59=reg12*reg38;
    reg9=reg3+reg9; T reg60=reg35*reg24; T reg61=reg35*reg44; reg42=reg39+reg42; T reg62=reg14*reg37;
    T reg63=reg20*reg38; reg13=reg41*reg13; reg9=reg9-2; reg22=reg12*reg22; reg57=reg56+reg57;
    reg12=pos_nodes[2][1]*reg42; reg56=reg41*reg16; T reg64=pos_nodes[2][2]*reg42; reg54=reg53+reg54; reg53=pos_nodes[2][2]*reg43;
    reg61=reg51+reg61; reg18=reg20*reg18; reg49=reg50+reg49; reg30=reg59+reg30; reg63=reg32-reg63;
    reg20=pos_nodes[2][1]*reg43; reg60=reg51+reg60; reg32=reg6*reg58; reg47=reg46+reg47; reg46=reg23*reg62;
    reg50=reg6*reg21; reg48=reg45+reg48; reg45=pos_nodes[2][0]*reg43; reg59=pos_nodes[2][0]*reg42; reg11=reg41*reg11;
    reg55=reg52+reg55; reg52=2*reg13; reg47=reg45-reg47; reg45=reg18*pos_nodes[0][0]; T reg65=pos_nodes[3][2]*reg60;
    reg49=reg53-reg49; reg53=pos_nodes[1][0]*reg22; T reg66=pow(reg0,2); T reg67=reg9*reg56; T reg68=pos_nodes[3][0]*reg60;
    T reg69=pos_nodes[1][1]*reg30; T reg70=pos_nodes[0][1]*reg63; T reg71=reg41*reg29; reg39=reg46+reg39; reg46=2*reg11;
    T reg72=reg35*reg62; reg26=reg26+reg3; reg55=reg59+reg55; reg33=reg23*reg33; reg23=pos_nodes[3][0]*reg61;
    reg15=reg15-2; reg59=pos_nodes[1][1]*reg22; T reg73=reg18*pos_nodes[0][1]; reg32=reg52+reg32; T reg74=pos_nodes[3][1]*reg61;
    reg57=reg12+reg57; reg50=reg52+reg50; reg12=pos_nodes[3][2]*reg61; reg5=reg5*reg41; reg54=reg64+reg54;
    reg64=pos_nodes[0][0]*reg63; T reg75=pos_nodes[1][0]*reg30; T reg76=reg9*reg19; T reg77=pos_nodes[3][1]*reg60; reg48=reg20-reg48;
    reg76=reg46+reg76; reg68=reg47+reg68; reg20=reg15*reg31; reg47=pos_nodes[4][0]*reg32; T reg78=pos_nodes[4][0]*reg50;
    reg51=reg72+reg51; reg72=reg6*reg71; T reg79=pos_nodes[2][1]*reg39; reg23=reg55+reg23; reg55=pos_nodes[1][2]*reg22;
    reg45=reg53-reg45; reg12=reg54+reg12; reg53=reg15*reg56; reg67=reg46+reg67; reg54=pos_nodes[4][2]*reg50;
    reg64=reg75-reg64; reg75=pos_nodes[2][0]*reg39; T reg80=reg33*pos_nodes[2][0]; T reg81=reg33*pos_nodes[2][1]; reg73=reg59-reg73;
    reg65=reg49+reg65; reg49=pos_nodes[0][2]*reg18; reg77=reg48+reg77; reg48=pos_nodes[4][1]*reg32; reg59=pos_nodes[4][2]*reg32;
    T reg82=pow(reg1,2); T reg83=pos_nodes[4][1]*reg50; T reg84=pos_nodes[0][2]*reg63; reg26=reg26-2; reg7=reg7*reg41;
    reg66=1-reg66; reg70=reg69-reg70; reg40=reg35*reg40; reg35=2*reg5; reg69=pos_nodes[1][2]*reg30;
    reg74=reg57+reg74; reg57=reg33*pos_nodes[2][2]; reg23=reg78-reg23; reg78=pos_nodes[5][1]*reg76; T reg85=pos_nodes[5][2]*reg76;
    T reg86=pos_nodes[5][0]*reg76; reg12=reg54-reg12; reg74=reg83-reg74; reg6=reg13*reg6; reg73=reg81+reg73;
    reg13=reg40*pos_nodes[3][1]; reg54=reg26*reg44; reg81=0.25*reg66; reg20=reg35+reg20; reg82=1-reg82;
    reg83=pos_nodes[5][0]*reg67; reg47=reg68-reg47; reg84=reg69-reg84; reg68=pos_nodes[2][2]*reg39; reg53=reg35+reg53;
    reg48=reg77-reg48; reg69=pos_nodes[5][1]*reg67; reg64=reg75+reg64; reg49=reg55-reg49; reg45=reg80+reg45;
    reg55=pos_nodes[3][0]*reg51; reg59=reg65-reg59; reg65=pos_nodes[5][2]*reg67; reg75=pos_nodes[3][1]*reg51; reg77=reg40*pos_nodes[3][0];
    reg80=reg41*reg37; T reg87=2*reg7; reg72=reg52+reg72; reg70=reg79+reg70; reg52=reg26*reg58;
    reg79=reg9*reg71; T reg88=reg81*reg8; reg77=reg45+reg77; reg54=reg87+reg54; reg45=reg6*pos_nodes[4][1];
    reg13=reg73+reg13; reg75=reg70-reg75; reg70=pos_nodes[4][1]*reg72; reg73=0.25*reg82; reg66=0.5*reg66;
    T reg89=reg6*pos_nodes[4][0]; reg9=reg11*reg9; reg11=pos_nodes[3][2]*reg51; reg84=reg68+reg84; reg83=reg47-reg83;
    reg47=pos_nodes[6][0]*reg53; reg68=reg15*reg80; reg79=reg46+reg79; reg46=pos_nodes[6][2]*reg20; T reg90=pos_nodes[4][0]*reg72;
    reg69=reg48-reg69; reg48=pos_nodes[6][2]*reg53; T reg91=pos_nodes[6][1]*reg20; reg55=reg64-reg55; reg23=reg86+reg23;
    reg64=pos_nodes[6][1]*reg53; reg65=reg59-reg65; reg59=reg40*pos_nodes[3][2]; reg49=reg57+reg49; reg57=pos_nodes[6][0]*reg20;
    reg12=reg85+reg12; reg74=reg78+reg74; reg52=reg87+reg52; reg78=reg9*pos_nodes[5][0]; reg85=pos_nodes[7][2]*reg54;
    reg12=reg46+reg12; reg46=2*reg88; reg69=reg64+reg69; reg70=reg75-reg70; reg64=pos_nodes[5][1]*reg79;
    reg75=pos_nodes[7][2]*reg52; reg89=reg77+reg89; reg77=pos_nodes[7][1]*reg54; reg86=reg9*pos_nodes[5][1]; reg23=reg57+reg23;
    reg11=reg84-reg11; reg83=reg47+reg83; reg74=reg91+reg74; reg47=pos_nodes[4][2]*reg72; reg45=reg13+reg45;
    reg13=pos_nodes[7][1]*reg52; reg65=reg48+reg65; reg48=pos_nodes[7][0]*reg54; reg57=reg26*reg80; reg35=reg68+reg35;
    reg59=reg49+reg59; reg49=reg14*reg66; reg68=reg73*reg4; reg5=reg15*reg5; reg15=reg1*reg4;
    reg84=reg6*pos_nodes[4][2]; reg91=pos_nodes[5][0]*reg79; reg90=reg55-reg90; reg55=pos_nodes[7][0]*reg52; reg84=reg59+reg84;
    reg65=reg75+reg65; reg69=reg13+reg69; reg13=pos_nodes[8][1]*reg49; reg59=pos_nodes[8][2]*reg49; reg70=reg64+reg70;
    reg64=reg9*pos_nodes[5][2]; reg57=reg87+reg57; reg23=reg48+reg23; reg48=pos_nodes[8][0]*reg46; reg75=reg0*reg8;
    reg87=pos_nodes[6][1]*reg35; reg89=reg78+reg89; reg78=reg14*reg15; T reg92=pos_nodes[6][0]*reg35; T reg93=reg5*pos_nodes[6][0];
    reg90=reg91+reg90; reg45=reg86+reg45; reg86=reg5*pos_nodes[6][1]; reg91=pos_nodes[8][1]*reg46; reg74=reg77+reg74;
    reg47=reg11-reg47; reg26=reg7*reg26; reg81=reg81*reg10; reg7=pos_nodes[8][0]*reg49; reg11=pos_nodes[8][2]*reg46;
    reg83=reg55+reg83; reg12=reg85+reg12; reg55=2*reg68; reg77=pos_nodes[5][2]*reg79; reg47=reg77+reg47;
    reg77=reg26*pos_nodes[7][0]; reg85=pos_nodes[6][2]*reg35; reg89=reg93+reg89; reg45=reg86+reg45; reg86=reg14*reg75;
    reg90=reg92+reg90; reg92=pos_nodes[7][0]*reg57; reg93=reg88*reg14; T reg94=reg26*pos_nodes[7][1]; T reg95=pos_nodes[9][1]*reg55;
    reg91=reg74-reg91; reg70=reg87+reg70; reg74=pos_nodes[7][1]*reg57; reg87=pos_nodes[9][2]*reg78; reg59=reg65-reg59;
    reg73=reg73*reg2; reg82=0.5*reg82; reg84=reg64+reg84; reg13=reg69-reg13; reg64=pos_nodes[9][1]*reg78;
    reg7=reg83-reg7; reg65=pos_nodes[9][0]*reg78; reg69=pos_nodes[9][0]*reg55; reg48=reg23-reg48; reg23=reg1*reg2;
    reg83=reg5*pos_nodes[6][2]; T reg96=2*reg81; reg11=reg12-reg11; reg12=pos_nodes[9][2]*reg55; T reg97=2*reg73;
    T reg98=reg14*reg23; T reg99=pos_nodes[10][1]*reg49; reg84=reg83+reg84; reg87=reg59-reg87; reg59=pos_nodes[8][1]*reg86;
    reg74=reg70-reg74; reg70=reg26*pos_nodes[7][2]; reg83=reg10*reg0; T reg100=reg14*reg82; reg69=reg48-reg69;
    reg64=reg13-reg64; reg13=pos_nodes[10][2]*reg49; reg12=reg11-reg12; reg11=pos_nodes[10][2]*reg96; reg95=reg91-reg95;
    reg48=pos_nodes[10][1]*reg96; reg91=pos_nodes[7][2]*reg57; T reg101=reg68*reg14; reg45=reg94+reg45; reg94=reg93*pos_nodes[8][1];
    reg47=reg85+reg47; reg65=reg7-reg65; reg7=pos_nodes[10][0]*reg49; reg89=reg77+reg89; reg77=pos_nodes[10][0]*reg96;
    reg85=pos_nodes[8][0]*reg86; T reg102=reg93*pos_nodes[8][0]; reg92=reg90-reg92; reg91=reg47-reg91; reg47=pos_nodes[8][2]*reg86;
    reg102=reg89+reg102; reg89=reg93*pos_nodes[8][2]; reg84=reg70+reg84; reg59=reg74-reg59; reg70=pos_nodes[11][1]*reg97;
    reg48=reg95-reg48; reg74=reg101*pos_nodes[9][0]; reg90=pos_nodes[11][2]*reg97; reg11=reg12-reg11; reg12=pos_nodes[9][0]*reg100;
    reg95=pos_nodes[11][0]*reg97; T reg103=reg41*reg66; T reg104=reg81*reg14; reg85=reg92-reg85; reg65=reg7+reg65;
    reg7=pos_nodes[11][0]*reg98; reg92=pos_nodes[11][2]*reg98; reg87=reg13+reg87; reg13=pos_nodes[9][1]*reg100; reg77=reg69-reg77;
    reg64=reg99+reg64; reg94=reg45+reg94; reg45=pos_nodes[11][1]*reg98; reg69=pow(reg3,2); reg99=reg101*pos_nodes[9][1];
    T reg105=reg14*reg83; T reg106=pos_nodes[12][1]*reg103; reg45=reg64-reg45; reg64=pos_nodes[10][0]*reg105; T reg107=pos_nodes[9][2]*reg100;
    reg85=reg12+reg85; reg7=reg65-reg7; reg94=reg99+reg94; reg12=pos_nodes[12][0]*reg103; reg69=1-reg69;
    reg65=reg104*pos_nodes[10][1]; reg99=reg104*pos_nodes[10][0]; reg47=reg91-reg47; reg91=pos_nodes[12][1]*reg46; reg70=reg48-reg70;
    reg90=reg11-reg90; reg14=reg14*reg73; reg11=pos_nodes[12][2]*reg46; reg48=reg41*reg15; T reg108=pos_nodes[12][0]*reg46;
    reg95=reg77-reg95; reg59=reg13+reg59; reg13=pos_nodes[10][1]*reg105; reg102=reg74+reg102; reg74=pos_nodes[12][2]*reg103;
    reg92=reg87-reg92; reg77=reg101*pos_nodes[9][2]; reg89=reg84+reg89; reg84=pos_nodes[13][2]*reg55; reg12=reg7-reg12;
    reg7=pos_nodes[13][0]*reg48; reg88=reg41*reg88; reg87=0.25*reg69; T reg109=reg104*pos_nodes[10][2]; T reg110=reg14*pos_nodes[11][0];
    reg108=reg95+reg108; reg95=pos_nodes[13][0]*reg55; reg47=reg107+reg47; reg107=pos_nodes[10][2]*reg105; T reg111=pos_nodes[13][1]*reg55;
    reg91=reg70+reg91; reg70=pos_nodes[11][1]*reg100; reg102=reg99+reg102; reg13=reg59-reg13; reg11=reg90+reg11;
    reg59=pos_nodes[11][0]*reg100; reg64=reg85-reg64; reg85=pos_nodes[13][2]*reg48; reg74=reg92-reg74; reg94=reg65+reg94;
    reg65=reg41*reg75; reg90=pos_nodes[13][1]*reg48; reg106=reg45-reg106; reg89=reg77+reg89; reg45=reg14*pos_nodes[11][1];
    reg77=pos_nodes[11][2]*reg100; reg111=reg91+reg111; reg85=reg74-reg85; reg74=pos_nodes[14][0]*reg103; reg107=reg47-reg107;
    reg47=reg88*pos_nodes[12][1]; reg45=reg94+reg45; reg110=reg102+reg110; reg91=reg88*pos_nodes[12][0]; reg7=reg12-reg7;
    reg12=reg14*pos_nodes[11][2]; reg92=reg2*reg87; reg94=pos_nodes[14][2]*reg96; reg59=reg64-reg59; reg64=pos_nodes[12][0]*reg65;
    reg89=reg109+reg89; reg90=reg106-reg90; reg99=reg41*reg23; reg2=reg3*reg2; reg95=reg108+reg95;
    reg102=reg41*reg82; reg68=reg68*reg41; reg106=pos_nodes[14][1]*reg96; reg108=pos_nodes[14][1]*reg103; reg109=pos_nodes[14][0]*reg96;
    reg84=reg11+reg84; reg11=pos_nodes[14][2]*reg103; T reg112=pos_nodes[12][1]*reg65; reg70=reg13-reg70; reg13=pos_nodes[15][1]*reg99;
    T reg113=reg68*pos_nodes[13][0]; reg90=reg108+reg90; reg84=reg94+reg84; reg94=2*reg92; reg47=reg45+reg47;
    reg45=reg68*pos_nodes[13][1]; reg108=reg3*reg4; reg87=reg4*reg87; reg85=reg11+reg85; reg4=pos_nodes[15][2]*reg99;
    reg11=pos_nodes[15][0]*reg97; T reg114=pos_nodes[15][0]*reg99; reg95=reg109+reg95; reg111=reg106+reg111; reg106=pos_nodes[15][1]*reg97;
    reg109=pos_nodes[12][2]*reg65; reg77=reg107-reg77; reg112=reg70-reg112; reg81=reg81*reg41; reg70=reg8*reg2;
    reg107=pos_nodes[13][1]*reg102; T reg115=reg41*reg83; reg91=reg110+reg91; reg7=reg74+reg7; reg12=reg89+reg12;
    reg74=reg88*pos_nodes[12][2]; reg89=pos_nodes[13][0]*reg102; reg64=reg59-reg64; reg59=pos_nodes[15][2]*reg97; reg110=pos_nodes[16][2]*reg94;
    T reg116=pos_nodes[16][2]*reg70; reg59=reg84+reg59; reg74=reg12+reg74; reg12=reg68*pos_nodes[13][2]; reg109=reg77-reg109;
    reg77=pos_nodes[13][2]*reg102; reg4=reg85-reg4; reg84=reg81*pos_nodes[14][0]; reg85=pos_nodes[16][0]*reg70; reg11=reg95+reg11;
    reg95=reg8*reg108; T reg117=pos_nodes[16][1]*reg94; reg13=reg90-reg13; reg113=reg91+reg113; reg90=pos_nodes[16][0]*reg94;
    reg106=reg111+reg106; reg91=pos_nodes[16][1]*reg70; reg114=reg7-reg114; reg7=2*reg87; reg73=reg41*reg73;
    reg69=0.5*reg69; reg89=reg64+reg89; reg41=reg81*pos_nodes[14][1]; reg45=reg47+reg45; reg47=pos_nodes[14][1]*reg115;
    reg107=reg112+reg107; reg64=pos_nodes[14][0]*reg115; reg110=reg4-reg110; reg4=pos_nodes[17][1]*reg7; reg117=reg13-reg117;
    reg113=reg84+reg113; reg13=reg73*pos_nodes[15][0]; reg84=pos_nodes[17][2]*reg7; reg12=reg74+reg12; reg47=reg107-reg47;
    reg74=pos_nodes[15][1]*reg102; reg107=reg92*reg8; reg111=reg8*reg69; reg64=reg89-reg64; reg89=pos_nodes[15][0]*reg102;
    reg112=reg81*pos_nodes[14][2]; T reg118=reg73*pos_nodes[15][1]; reg45=reg41+reg45; reg41=pos_nodes[17][2]*reg95; reg116=reg59-reg116;
    reg59=pos_nodes[17][1]*reg95; reg91=reg106-reg91; reg77=reg109+reg77; reg106=pos_nodes[17][0]*reg95; reg85=reg11-reg85;
    reg11=reg10*reg108; reg109=pos_nodes[14][2]*reg115; T reg119=pos_nodes[17][0]*reg7; reg90=reg114-reg90; reg106=reg85-reg106;
    reg85=pos_nodes[18][0]*reg11; reg89=reg64-reg89; reg84=reg110-reg84; reg64=pos_nodes[18][2]*reg7; reg110=pos_nodes[16][0]*reg111;
    reg114=reg73*pos_nodes[15][2]; reg12=reg112+reg12; reg112=reg107*pos_nodes[16][0]; T reg120=reg10*reg2; T reg121=pos_nodes[18][2]*reg11;
    reg41=reg116-reg41; reg8=reg87*reg8; reg116=pos_nodes[18][0]*reg7; reg119=reg90-reg119; reg118=reg45+reg118;
    reg45=reg107*pos_nodes[16][1]; reg90=pos_nodes[18][1]*reg11; reg59=reg91-reg59; reg109=reg77-reg109; reg77=pos_nodes[15][2]*reg102;
    reg91=pos_nodes[18][1]*reg7; reg4=reg117-reg4; reg117=pos_nodes[16][1]*reg111; reg74=reg47-reg74; reg13=reg113+reg13;
    reg47=pos_nodes[19][0]*reg94; reg116=reg119+reg116; reg113=pos_nodes[19][1]*reg94; reg91=reg4+reg91; reg85=reg106-reg85;
    reg4=pos_nodes[19][0]*reg120; reg106=pos_nodes[16][2]*reg111; reg77=reg109-reg77; reg109=pos_nodes[19][2]*reg94; reg64=reg84+reg64;
    reg84=pos_nodes[17][1]*reg111; reg87=reg87*reg10; reg117=reg74-reg117; reg74=pos_nodes[17][0]*reg111; reg110=reg89-reg110;
    reg90=reg59-reg90; reg59=pos_nodes[19][1]*reg120; reg114=reg12+reg114; reg12=reg8*pos_nodes[17][0]; reg121=reg41-reg121;
    reg41=pos_nodes[19][2]*reg120; reg89=reg10*reg69; reg119=reg8*pos_nodes[17][1]; T reg122=reg107*pos_nodes[16][2]; reg13=reg112+reg13;
    reg118=reg45+reg118; reg45=pos_nodes[17][2]*reg111; reg106=reg77-reg106; reg47=reg116+reg47; reg77=reg87*pos_nodes[18][1];
    reg119=reg118+reg119; reg41=reg121-reg41; reg12=reg13+reg12; reg109=reg64+reg109; reg113=reg91+reg113;
    reg13=pos_nodes[18][0]*reg89; reg74=reg110+reg74; reg59=reg90-reg59; reg64=reg87*pos_nodes[18][0]; reg4=reg85-reg4;
    reg85=reg8*pos_nodes[17][2]; reg114=reg122+reg114; reg90=pos_nodes[18][1]*reg89; reg92=reg10*reg92; reg84=reg117+reg84;
    reg10=reg59*reg109; reg91=reg92*pos_nodes[19][1]; reg77=reg119+reg77; reg110=reg113*reg41; reg64=reg12+reg64;
    reg12=reg87*pos_nodes[18][2]; reg85=reg114+reg85; reg112=reg92*pos_nodes[19][0]; reg45=reg106+reg45; reg106=pos_nodes[18][2]*reg89;
    reg114=reg4*reg109; reg116=reg47*reg41; reg117=pos_nodes[19][1]*reg89; reg90=reg84+reg90; reg84=pos_nodes[19][0]*reg89;
    reg13=reg74+reg13; reg84=reg13-reg84; reg112=reg64+reg112; reg114=reg116-reg114; reg117=reg90-reg117;
    reg10=reg110-reg10; reg12=reg85+reg12; reg13=reg92*pos_nodes[19][2]; reg64=reg47*reg59; reg74=reg4*reg113;
    reg85=pos_nodes[19][2]*reg89; reg106=reg45+reg106; reg91=reg77+reg91; reg13=reg12+reg13; reg12=var_inter[0]*reg84;
    reg45=var_inter[0]*reg117; reg77=reg84*reg10; reg90=reg117*reg114; reg74=reg64-reg74; reg91=pos[1]-reg91;
    reg85=reg106-reg85; reg112=pos[0]-reg112; reg106=var_inter[1]*reg113; reg12=reg112+reg12; reg112=var_inter[1]*reg47;
    reg45=reg91+reg45; reg13=pos[2]-reg13; reg91=var_inter[0]*reg85; reg118=reg47*reg85; reg119=reg84*reg109;
    reg121=reg4*reg85; reg122=reg84*reg41; reg77=reg90-reg77; reg90=reg85*reg74; T reg123=reg117*reg41;
    T reg124=reg59*reg85; T reg125=reg117*reg109; T reg126=reg113*reg85; reg121=reg122-reg121; reg90=reg77-reg90;
    reg91=reg13+reg91; reg13=var_inter[1]*reg109; reg45=reg106+reg45; reg77=var_inter[2]*reg59; reg124=reg123-reg124;
    reg126=reg125-reg126; reg118=reg119-reg118; reg12=reg112+reg12; reg106=var_inter[2]*reg4; reg112=reg84*reg59;
    T reg127=reg4*reg117; T reg128=reg84*reg113; T reg129=reg47*reg117; reg126=reg126/reg90; reg124=reg124/reg90;
    reg10=reg10/reg90; reg114=reg114/reg90; reg129=reg128-reg129; reg121=reg121/reg90; reg12=reg106+reg12;
    reg118=reg118/reg90; reg91=reg13+reg91; reg127=reg112-reg127; reg45=reg77+reg45; reg13=var_inter[2]*reg41;
    reg118=reg118*reg45; reg126=reg12*reg126; reg121=reg121*reg45; reg124=reg12*reg124; reg114=reg114*reg45;
    reg10=reg12*reg10; reg129=reg129/reg90; reg74=reg74/reg90; reg90=reg127/reg90; reg91=reg13+reg91;
    reg10=reg114-reg10; reg74=reg74*reg91; reg90=reg90*reg91; reg121=reg124-reg121; reg126=reg118-reg126;
    reg129=reg129*reg91; var_inter[2]+=reg126-reg129; var_inter[1]+=reg90+reg121; var_inter[0]+=reg10-reg74;

}
#ifndef STRUCT_Global
#define STRUCT_Global
struct Global {};
#endif // STRUCT_Global
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Global &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary_mul_nb_nodes
#define STRUCT_Elementary_mul_nb_nodes
struct Elementary_mul_nb_nodes {};
#endif // STRUCT_Elementary_mul_nb_nodes
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Nodal
#define STRUCT_Nodal
struct Nodal {};
#endif // STRUCT_Nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=2*var_inter[0]; reg0=reg0-1; T reg1=2*var_inter[1]; T reg2=1+reg0; T reg3=1-reg0;
    T reg4=2*var_inter[2]; reg1=reg1-1; T reg5=1-reg1; T reg6=0.125*reg3; T reg7=reg0-reg1;
    T reg8=reg0+reg1; reg4=reg4-1; T reg9=0.125*reg2; T reg10=1-reg4; T reg11=reg6*reg5;
    T reg12=1+reg1; T reg13=reg4+reg8; T reg14=reg7-reg4; T reg15=reg9*reg5; T reg16=reg8-reg4;
    T reg17=reg15*reg10; reg9=reg9*reg12; reg14=reg14-2; T reg18=2+reg13; T reg19=reg1-reg0;
    T reg20=reg11*reg10; reg16=reg16-2; T reg21=reg9*reg10; T reg22=reg19-reg4; reg6=reg12*reg6;
    reg18=reg20*reg18; reg17=reg14*reg17; reg22=reg22-2; reg14=1+reg4; reg20=reg6*reg10;
    reg8=reg4-reg8; reg16=reg21*reg16; reg17=val[1]*reg17; reg18=val[0]*reg18; reg16=val[2]*reg16;
    reg18=reg17-reg18; reg22=reg20*reg22; reg11=reg14*reg11; reg8=reg8-2; reg7=reg7+reg4;
    reg7=reg7-2; reg15=reg15*reg14; reg0=pow(reg0,2); reg8=reg11*reg8; reg22=val[3]*reg22;
    reg16=reg18+reg16; reg0=1-reg0; reg1=pow(reg1,2); reg19=reg19+reg4; reg13=reg13-2;
    reg9=reg9*reg14; reg7=reg15*reg7; reg8=val[4]*reg8; reg22=reg16+reg22; reg13=reg9*reg13;
    reg6=reg6*reg14; reg19=reg19-2; reg7=val[5]*reg7; reg8=reg22+reg8; reg0=0.25*reg0;
    reg1=1-reg1; reg1=0.25*reg1; reg9=reg0*reg5; reg19=reg6*reg19; reg13=val[6]*reg13;
    reg7=reg8+reg7; reg19=val[7]*reg19; reg6=reg9*reg10; reg8=reg2*reg1; reg13=reg7+reg13;
    reg6=val[8]*reg6; reg19=reg13+reg19; reg7=reg8*reg10; reg0=reg12*reg0; reg1=reg1*reg3;
    reg11=reg0*reg10; reg7=val[9]*reg7; reg6=reg19+reg6; reg10=reg1*reg10; reg11=val[10]*reg11;
    reg7=reg6+reg7; reg4=pow(reg4,2); reg11=reg7+reg11; reg10=val[11]*reg10; reg9=reg14*reg9;
    reg4=1-reg4; reg10=reg11+reg10; reg9=val[12]*reg9; reg8=reg14*reg8; reg4=0.25*reg4;
    reg9=reg10+reg9; reg8=val[13]*reg8; reg0=reg14*reg0; reg8=reg9+reg8; reg0=val[14]*reg0;
    reg1=reg14*reg1; reg3=reg4*reg3; reg1=val[15]*reg1; reg0=reg8+reg0; reg6=reg3*reg5;
    reg4=reg2*reg4; reg1=reg0+reg1; reg5=reg4*reg5; reg6=val[16]*reg6; reg4=reg12*reg4;
    reg5=val[17]*reg5; reg6=reg1+reg6; reg5=reg6+reg5; reg4=val[18]*reg4; reg3=reg12*reg3;
    reg3=val[19]*reg3; reg4=reg5+reg4; res=reg4+reg3;

}
#ifndef STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
#define STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
struct Elementary_mul_nb_nodes_of_each_children_elem {};
#endif // STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes_of_each_children_elem &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss
#define STRUCT_Gauss
struct Gauss {};
#endif // STRUCT_Gauss
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Gauss &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Der_nodal
#define STRUCT_Der_nodal
struct Der_nodal {};
#endif // STRUCT_Der_nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Der_nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary
#define STRUCT_Elementary
struct Elementary {};
#endif // STRUCT_Elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Skin_elementary
#define STRUCT_Skin_elementary
struct Skin_elementary {};
#endif // STRUCT_Skin_elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Skin_elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef AUTORIZEDPERM
#define AUTORIZEDPERM
template<class T> struct AuthorizedPerm;
#endif // AUTORIZEDPERM
template<> struct AuthorizedPerm<Hexa_20> {
    static const unsigned nb_permutations = 0;
    template<class TE> static void make_permutation( TE &e, unsigned nb_perm ) {
    }
    template<class TE> static void unmake_permutation( TE &e, unsigned nb_perm ) {
    }
};

}
#endif // LMT_HEXA_20
