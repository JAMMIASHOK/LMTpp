#ifndef LMT_HEXA_20
#define LMT_HEXA_20
namespace LMT {
inline const double *gauss_point_for_order(unsigned order, const Hexa_20 &elem) { /// order -> degre du polynome a integrer exactement
    static const unsigned offset[] = { 0, 33, 66, 99, 132, 269, 406, 543, 680, 817, }; // fonction de lordre du poly
    static const double values[] = {
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
    };
    return values + offset[order];
}
template<class TNode> void permutation_if_jac_neg(const Hexa_20 &elem,TNode **nodes) {
    typedef typename TNode::T T;
    T reg0=0.25*nodes[1]->pos[1]; T reg1=0.25*nodes[0]->pos[1]; T reg2=0.25*nodes[1]->pos[2]; T reg3=0.25*nodes[0]->pos[2]; T reg4=0.25*nodes[2]->pos[1];
    T reg5=reg0+reg1; T reg6=reg2+reg3; T reg7=0.25*nodes[2]->pos[2]; T reg8=reg1-reg0; T reg9=reg3-reg2;
    T reg10=reg4+reg5; T reg11=reg6+reg7; T reg12=reg6-reg7; T reg13=0.25*nodes[3]->pos[1]; reg8=reg8-reg4;
    T reg14=reg5-reg4; T reg15=0.25*nodes[1]->pos[0]; T reg16=0.25*nodes[0]->pos[0]; T reg17=0.25*nodes[3]->pos[2]; reg9=reg9-reg7;
    T reg18=reg11+reg17; T reg19=0.25*nodes[4]->pos[2]; T reg20=0.25*nodes[4]->pos[1]; reg14=reg14-reg13; T reg21=reg16-reg15;
    T reg22=0.25*nodes[2]->pos[0]; reg12=reg12-reg17; reg9=reg17+reg9; T reg23=reg13+reg10; reg8=reg13+reg8;
    T reg24=reg15+reg16; T reg25=0.25*nodes[3]->pos[0]; reg21=reg21-reg22; reg9=reg19+reg9; reg8=reg20+reg8;
    T reg26=reg24-reg22; reg14=reg14+reg20; T reg27=0.25*nodes[5]->pos[1]; T reg28=0.25*nodes[5]->pos[2]; T reg29=reg18-reg19;
    T reg30=reg23-reg20; reg12=reg19+reg12; T reg31=reg22+reg24; reg9=reg9-reg28; reg29=reg29-reg28;
    T reg32=0.25*nodes[6]->pos[2]; reg8=reg8-reg27; reg12=reg28+reg12; reg26=reg26-reg25; T reg33=0.25*nodes[6]->pos[1];
    reg14=reg14+reg27; reg30=reg30-reg27; reg21=reg21+reg25; T reg34=0.25*nodes[4]->pos[0]; reg29=reg29-reg32;
    T reg35=0.25*nodes[7]->pos[2]; T reg36=0.25*nodes[7]->pos[1]; reg14=reg14-reg33; reg12=reg12-reg32; reg30=reg30-reg33;
    reg21=reg21+reg34; T reg37=0.25*nodes[5]->pos[0]; reg26=reg34+reg26; T reg38=reg25+reg31; reg9=reg9-reg32;
    reg8=reg8-reg33; T reg39=reg38-reg34; reg29=reg29-reg35; reg9=reg35+reg9; T reg40=0.5*nodes[8]->pos[2];
    T reg41=0.5*nodes[9]->pos[2]; reg12=reg12-reg35; reg30=reg30-reg36; reg8=reg36+reg8; T reg42=0.5*nodes[9]->pos[1];
    reg26=reg37+reg26; T reg43=0.5*nodes[8]->pos[1]; reg14=reg14-reg36; reg21=reg21-reg37; T reg44=0.25*nodes[6]->pos[0];
    reg14=reg14-reg43; reg39=reg39-reg37; reg29=reg29-reg40; T reg45=0.5*nodes[10]->pos[2]; T reg46=0.5*nodes[11]->pos[2];
    reg40=reg12-reg40; reg43=reg30-reg43; reg12=0.5*nodes[11]->pos[1]; reg26=reg26-reg44; reg8=reg42+reg8;
    reg30=0.25*nodes[7]->pos[0]; reg9=reg41+reg9; reg21=reg21-reg44; T reg47=0.5*nodes[10]->pos[1]; reg39=reg39-reg44;
    reg14=reg14+reg47; T reg48=0.5*nodes[12]->pos[1]; reg9=reg9-reg46; reg21=reg21+reg30; reg8=reg8-reg12;
    T reg49=0.5*nodes[8]->pos[0]; reg26=reg26-reg30; T reg50=0.5*nodes[13]->pos[1]; reg42=reg43-reg42; reg43=0.5*nodes[9]->pos[0];
    reg40=reg45+reg40; T reg51=0.5*nodes[13]->pos[2]; reg41=reg29-reg41; reg29=0.5*nodes[12]->pos[2]; reg9=reg51+reg9;
    reg21=reg43+reg21; T reg52=0.5*nodes[11]->pos[0]; reg47=reg42-reg47; reg8=reg50+reg8; reg45=reg41-reg45;
    reg41=0.5*nodes[15]->pos[1]; reg42=0.5*nodes[10]->pos[0]; reg26=reg26-reg49; T reg53=0.5*nodes[14]->pos[1]; T reg54=0.5*nodes[14]->pos[2];
    T reg55=0.5*nodes[15]->pos[2]; reg39=reg39-reg30; reg40=reg40-reg29; reg14=reg14-reg48; reg26=reg26+reg42;
    T reg56=0.5*nodes[12]->pos[0]; reg49=reg39-reg49; reg12=reg47-reg12; reg8=reg8-reg41; reg39=0.5*nodes[13]->pos[0];
    reg46=reg45-reg46; reg21=reg21-reg52; reg9=reg9-reg55; reg45=0.5*nodes[16]->pos[2]; reg40=reg54+reg40;
    reg14=reg14+reg53; reg47=0.5*nodes[16]->pos[1]; reg9=reg9-reg45; reg43=reg49-reg43; reg26=reg26-reg56;
    reg49=0.5*nodes[14]->pos[0]; T reg57=0.5*nodes[17]->pos[1]; T reg58=0.5*nodes[15]->pos[0]; reg14=reg14-reg47; reg21=reg21+reg39;
    reg47=reg8-reg47; reg29=reg46+reg29; reg45=reg40-reg45; reg8=0.5*nodes[17]->pos[2]; reg12=reg48+reg12;
    reg47=reg57+reg47; reg40=0.5*nodes[18]->pos[1]; reg50=reg12+reg50; reg12=0.5*nodes[18]->pos[2]; reg45=reg45-reg8;
    reg21=reg21-reg58; reg9=reg8+reg9; reg8=0.5*nodes[16]->pos[0]; reg57=reg14-reg57; reg51=reg29+reg51;
    reg42=reg43-reg42; reg26=reg26+reg49; reg9=reg12+reg9; reg54=reg51+reg54; reg12=reg45+reg12;
    reg14=0.5*nodes[19]->pos[2]; reg52=reg42-reg52; reg29=0.5*nodes[19]->pos[1]; reg57=reg57+reg40; reg42=0.5*nodes[17]->pos[0];
    reg26=reg26-reg8; reg47=reg40+reg47; reg8=reg21-reg8; reg50=reg53+reg50; reg55=reg54+reg55;
    reg26=reg26-reg42; reg9=reg9-reg14; reg42=reg8+reg42; reg52=reg56+reg52; reg8=0.5*nodes[18]->pos[0];
    reg14=reg12+reg14; reg57=reg57+reg29; reg41=reg50+reg41; reg29=reg47-reg29; reg12=0.5*nodes[19]->pos[0];
    reg26=reg8+reg26; reg21=reg57*reg55; reg52=reg39+reg52; reg8=reg42+reg8; reg55=reg55*reg29;
    reg39=reg41*reg9; reg41=reg41*reg14; reg8=reg8-reg12; reg9=reg57*reg9; reg29=reg14*reg29;
    reg52=reg49+reg52; reg41=reg21-reg41; reg39=reg55-reg39; reg26=reg12+reg26; reg39=reg26*reg39;
    reg52=reg58+reg52; reg41=reg8*reg41; reg9=reg29-reg9; reg39=reg41-reg39; reg9=reg52*reg9;
    T det_jac=reg39+reg9;

    if ( det_jac < 0 ) {
        TNode *tmp[] = {nodes[0],nodes[3],nodes[2],nodes[1],nodes[4],nodes[7],nodes[6],nodes[5],nodes[11],nodes[10],nodes[9],nodes[8],nodes[15],nodes[14],nodes[13],nodes[12],nodes[16],nodes[19],nodes[18],nodes[17]};
        for(unsigned i=0;i<20;++i) nodes[i] = tmp[i];
    }
}
template<class PosNodes,class Pvec,class TVI> void get_var_inter_linear(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; reg0=reg0-1; T reg1=2*var_inter[1]; T reg2=2*var_inter[2]; reg1=reg1-1;
    T reg3=1-reg0; T reg4=1+reg0; T reg5=1-reg1; T reg6=0.125*reg3; reg2=reg2-1;
    T reg7=reg0-reg1; T reg8=0.125*reg4; T reg9=reg0+reg1; T reg10=1+reg1; T reg11=reg8*reg5;
    T reg12=reg7-reg2; T reg13=reg9+reg2; T reg14=1-reg2; T reg15=reg6*reg5; T reg16=0.25*reg4;
    T reg17=0.25*reg3; T reg18=reg1-reg0; T reg19=2*reg15; T reg20=reg14*reg17; T reg21=2*reg11;
    T reg22=reg14*reg15; T reg23=reg9-reg2; reg8=reg10*reg8; reg12=reg12-2; T reg24=reg14*reg11;
    T reg25=reg14*reg16; T reg26=2+reg13; T reg27=reg14*reg8; T reg28=reg12*reg25; T reg29=reg18-reg2;
    reg6=reg10*reg6; reg23=reg23-2; T reg30=reg26*reg20; T reg31=2*reg22; T reg32=2*reg24;
    T reg33=reg26*reg19; T reg34=0.25*reg5; T reg35=reg12*reg21; T reg36=2*reg8; reg30=reg31-reg30;
    T reg37=reg23*reg25; T reg38=reg14*reg34; T reg39=2*reg27; T reg40=0.25*reg10; reg28=reg32+reg28;
    T reg41=reg23*reg36; reg35=reg32+reg35; reg33=reg31-reg33; T reg42=2*reg6; T reg43=1+reg2;
    reg9=reg2-reg9; reg29=reg29-2; T reg44=reg14*reg6; T reg45=reg26*reg38; T reg46=pos_nodes[1][2]*reg35;
    T reg47=pos_nodes[0][0]*reg30; T reg48=pos_nodes[1][0]*reg28; T reg49=reg12*reg38; T reg50=pos_nodes[0][1]*reg30; T reg51=pos_nodes[1][1]*reg28;
    T reg52=reg14*reg40; reg41=reg39+reg41; T reg53=pos_nodes[1][1]*reg35; T reg54=2*reg44; reg37=reg39+reg37;
    T reg55=reg29*reg42; T reg56=pos_nodes[0][2]*reg33; T reg57=pos_nodes[1][2]*reg28; T reg58=pos_nodes[0][2]*reg30; T reg59=reg29*reg20;
    T reg60=pos_nodes[0][1]*reg33; T reg61=pos_nodes[0][0]*reg33; reg15=reg43*reg15; reg9=reg9-2; T reg62=reg43*reg17;
    T reg63=pos_nodes[1][0]*reg35; reg7=reg7+reg2; reg61=reg63+reg61; reg58=reg57+reg58; reg57=pos_nodes[2][2]*reg41;
    reg63=reg23*reg52; reg49=reg32+reg49; reg32=pos_nodes[2][2]*reg37; T reg64=pos_nodes[2][0]*reg41; T reg65=pos_nodes[2][1]*reg37;
    reg55=reg54+reg55; T reg66=reg9*reg19; reg51=reg50+reg51; reg45=reg31-reg45; reg31=reg9*reg62;
    reg50=pos_nodes[2][1]*reg41; reg11=reg43*reg11; reg7=reg7-2; T reg67=reg43*reg16; reg59=reg54+reg59;
    T reg68=pos_nodes[2][0]*reg37; reg47=reg48+reg47; reg56=reg46+reg56; reg46=2*reg15; reg60=reg53+reg60;
    reg48=pos_nodes[1][0]*reg49; reg53=pos_nodes[0][0]*reg45; reg56=reg57+reg56; reg57=pos_nodes[3][2]*reg55; reg58=reg32-reg58;
    reg32=pos_nodes[3][2]*reg59; reg31=reg46+reg31; reg39=reg63+reg39; reg63=reg7*reg67; reg47=reg68-reg47;
    reg68=pos_nodes[3][0]*reg59; T reg69=2*reg11; T reg70=reg43*reg34; T reg71=reg29*reg52; T reg72=pos_nodes[1][1]*reg49;
    T reg73=pos_nodes[0][1]*reg45; reg51=reg65-reg51; reg8=reg43*reg8; reg13=reg13-2; reg65=pos_nodes[3][1]*reg55;
    T reg74=pos_nodes[3][1]*reg59; T reg75=pos_nodes[3][0]*reg55; reg61=reg64+reg61; reg18=reg18+reg2; reg64=pow(reg0,2);
    reg60=reg50+reg60; reg50=reg7*reg21; reg66=reg46+reg66; reg68=reg47+reg68; reg47=2*reg8;
    T reg76=pos_nodes[4][0]*reg31; T reg77=pos_nodes[4][1]*reg31; T reg78=pos_nodes[1][2]*reg49; T reg79=reg13*reg67; reg63=reg69+reg63;
    T reg80=pos_nodes[4][1]*reg66; reg65=reg60+reg65; reg60=pos_nodes[2][0]*reg39; reg53=reg48-reg53; reg6=reg6*reg43;
    reg64=1-reg64; reg57=reg56+reg57; reg48=pow(reg1,2); reg18=reg18-2; reg50=reg69+reg50;
    reg56=pos_nodes[0][2]*reg45; T reg81=reg13*reg36; T reg82=pos_nodes[4][0]*reg66; reg75=reg61+reg75; reg32=reg58+reg32;
    reg58=pos_nodes[4][2]*reg31; reg61=pos_nodes[2][1]*reg39; T reg83=reg9*reg70; reg71=reg54+reg71; reg74=reg51+reg74;
    reg51=pos_nodes[4][2]*reg66; reg73=reg72-reg73; reg54=pos_nodes[5][2]*reg50; reg72=pos_nodes[2][2]*reg39; reg56=reg78-reg56;
    reg57=reg51-reg57; reg51=reg18*reg62; reg81=reg47+reg81; reg78=reg18*reg42; reg79=reg47+reg79;
    T reg84=pos_nodes[5][2]*reg63; T reg85=pos_nodes[3][1]*reg71; T reg86=pos_nodes[5][0]*reg63; reg76=reg68-reg76; reg73=reg61+reg73;
    reg75=reg82-reg75; reg61=pos_nodes[5][0]*reg50; reg65=reg80-reg65; reg68=pos_nodes[5][1]*reg50; reg58=reg32-reg58;
    reg32=pos_nodes[5][1]*reg63; reg77=reg74-reg77; reg74=2*reg6; reg80=reg43*reg40; reg53=reg60+reg53;
    reg60=pos_nodes[3][0]*reg71; reg82=reg7*reg70; reg83=reg46+reg83; reg26=reg22*reg26; reg48=1-reg48;
    reg12=reg24*reg12; reg22=0.25*reg64; reg51=reg74+reg51; reg84=reg58-reg84; reg24=pos_nodes[1][0]*reg12;
    reg46=reg26*pos_nodes[0][0]; reg58=pos_nodes[6][2]*reg79; reg85=reg73-reg85; reg82=reg69+reg82; reg69=pos_nodes[4][1]*reg83;
    reg73=pos_nodes[6][0]*reg81; reg86=reg76-reg86; reg76=pos_nodes[6][0]*reg79; T reg87=pos_nodes[3][2]*reg71; reg56=reg72+reg56;
    reg27=reg23*reg27; reg23=reg26*pos_nodes[0][1]; reg72=pos_nodes[1][1]*reg12; T reg88=pos_nodes[6][1]*reg81; reg68=reg65+reg68;
    reg61=reg75+reg61; reg78=reg74+reg78; reg65=pos_nodes[6][1]*reg79; reg32=reg77-reg32; reg75=reg13*reg80;
    reg77=reg22*reg5; T reg89=pos_nodes[4][0]*reg83; reg60=reg53-reg60; reg53=0.25*reg48; reg64=0.5*reg64;
    reg54=reg57+reg54; reg57=pos_nodes[6][2]*reg81; reg47=reg75+reg47; reg76=reg86+reg76; reg75=pos_nodes[7][0]*reg51;
    reg65=reg32+reg65; reg32=pos_nodes[7][1]*reg51; reg86=pos_nodes[4][2]*reg83; reg87=reg56-reg87; reg46=reg24-reg46;
    reg24=reg14*reg64; reg56=pos_nodes[7][2]*reg78; reg57=reg54+reg57; reg23=reg72-reg23; reg54=pos_nodes[2][1]*reg27;
    reg29=reg44*reg29; reg44=reg53*reg4; reg88=reg68+reg88; reg68=2*reg77; reg72=pos_nodes[7][1]*reg78;
    T reg90=reg4*reg1; T reg91=pos_nodes[2][0]*reg27; T reg92=pos_nodes[7][0]*reg78; reg73=reg61+reg73; reg61=pos_nodes[0][2]*reg26;
    T reg93=pos_nodes[5][1]*reg82; reg69=reg85-reg69; reg85=reg18*reg80; reg58=reg84+reg58; reg84=pos_nodes[7][2]*reg51;
    reg89=reg60-reg89; reg60=pos_nodes[1][2]*reg12; T reg94=pos_nodes[5][0]*reg82; reg22=reg22*reg10; reg9=reg15*reg9;
    reg93=reg69+reg93; reg15=reg47*pos_nodes[6][1]; reg69=pos_nodes[8][0]*reg68; reg92=reg73+reg92; reg73=pos_nodes[8][1]*reg24;
    reg61=reg60-reg61; reg60=2*reg44; reg32=reg65+reg32; reg56=reg57+reg56; reg57=pos_nodes[8][2]*reg68;
    reg65=pos_nodes[2][2]*reg27; reg84=reg58+reg84; reg58=pos_nodes[8][2]*reg24; T reg95=reg14*reg90; T reg96=pos_nodes[5][2]*reg82;
    reg86=reg87-reg86; reg85=reg74+reg85; reg74=reg47*pos_nodes[6][0]; reg87=reg5*reg0; reg94=reg89+reg94;
    reg75=reg76+reg75; reg76=pos_nodes[8][0]*reg24; reg46=reg91+reg46; reg89=pos_nodes[3][0]*reg29; reg72=reg88+reg72;
    reg88=pos_nodes[8][1]*reg68; reg23=reg54+reg23; reg54=reg29*pos_nodes[3][1]; reg89=reg46+reg89; reg48=0.5*reg48;
    reg46=reg9*pos_nodes[4][0]; reg91=pos_nodes[9][1]*reg60; reg96=reg86+reg96; reg86=reg47*pos_nodes[6][2]; T reg97=reg3*reg1;
    reg88=reg72-reg88; reg69=reg92-reg69; reg72=pos_nodes[9][0]*reg60; reg92=pos_nodes[7][1]*reg85; reg15=reg93+reg15;
    reg93=pos_nodes[9][2]*reg95; reg58=reg84-reg58; reg61=reg65+reg61; reg65=reg29*pos_nodes[3][2]; reg84=pos_nodes[9][1]*reg95;
    reg73=reg32-reg73; reg32=reg9*pos_nodes[4][1]; reg54=reg23+reg54; reg23=pos_nodes[7][0]*reg85; T reg98=2*reg22;
    reg94=reg74+reg94; reg74=pos_nodes[9][0]*reg95; reg76=reg75-reg76; reg57=reg56-reg57; reg53=reg53*reg3;
    reg56=pos_nodes[9][2]*reg60; reg75=reg14*reg87; reg7=reg11*reg7; reg46=reg89+reg46; reg11=reg9*pos_nodes[4][2];
    reg65=reg61+reg65; reg61=reg7*pos_nodes[5][0]; reg92=reg15-reg92; reg15=pos_nodes[8][1]*reg75; reg89=pos_nodes[10][2]*reg98;
    reg56=reg57-reg56; reg84=reg73-reg84; reg57=pos_nodes[10][1]*reg24; reg13=reg8*reg13; reg91=reg88-reg91;
    reg8=pos_nodes[10][1]*reg98; reg32=reg54+reg32; reg54=reg7*pos_nodes[5][1]; reg73=pos_nodes[10][2]*reg24; reg93=reg58-reg93;
    reg86=reg96+reg86; reg58=pos_nodes[7][2]*reg85; reg88=2*reg53; reg72=reg69-reg72; reg69=pos_nodes[10][0]*reg98;
    reg96=pos_nodes[10][0]*reg24; reg74=reg76-reg74; reg76=reg14*reg97; T reg99=reg14*reg48; T reg100=reg10*reg0;
    reg23=reg94-reg23; reg94=pos_nodes[8][0]*reg75; reg61=reg46+reg61; reg46=reg43*reg64; T reg101=pos_nodes[9][0]*reg99;
    reg94=reg23-reg94; reg96=reg74+reg96; reg23=pos_nodes[11][0]*reg76; reg18=reg6*reg18; reg6=pos_nodes[9][1]*reg99;
    reg15=reg92-reg15; reg74=reg13*pos_nodes[6][1]; reg54=reg32+reg54; reg32=reg7*pos_nodes[5][2]; reg92=pos_nodes[11][1]*reg88;
    reg8=reg91-reg8; reg91=pos_nodes[11][0]*reg88; reg69=reg72-reg69; reg11=reg65+reg11; reg65=pos_nodes[11][2]*reg88;
    reg89=reg56-reg89; reg56=pos_nodes[11][2]*reg76; reg73=reg93+reg73; reg72=reg14*reg100; reg93=reg13*pos_nodes[6][0];
    T reg102=pow(reg2,2); reg57=reg84+reg57; reg84=pos_nodes[11][1]*reg76; T reg103=pos_nodes[8][2]*reg75; reg58=reg86-reg58;
    reg86=reg13*pos_nodes[6][2]; reg32=reg11+reg32; reg11=pos_nodes[12][1]*reg46; reg84=reg57-reg84; reg57=pos_nodes[12][2]*reg68;
    reg65=reg89-reg65; reg89=reg14*reg77; T reg104=pos_nodes[12][2]*reg46; reg56=reg73-reg56; reg73=pos_nodes[10][0]*reg72;
    reg102=1-reg102; T reg105=pos_nodes[9][2]*reg99; reg103=reg58-reg103; reg101=reg94+reg101; reg58=reg43*reg90;
    reg23=reg96-reg23; reg94=pos_nodes[12][0]*reg46; reg96=pos_nodes[7][1]*reg18; reg74=reg54+reg74; reg54=pos_nodes[12][1]*reg68;
    reg92=reg8-reg92; reg8=pos_nodes[10][1]*reg72; reg93=reg61+reg93; reg6=reg15+reg6; reg91=reg69-reg91;
    reg15=pos_nodes[12][0]*reg68; reg61=reg18*pos_nodes[7][0]; reg11=reg84-reg11; reg69=pos_nodes[13][1]*reg58; reg15=reg91+reg15;
    reg84=pos_nodes[13][0]*reg60; reg54=reg92+reg54; reg91=pos_nodes[13][1]*reg60; reg92=reg89*pos_nodes[8][1]; T reg106=pos_nodes[13][0]*reg58;
    reg94=reg23-reg94; reg96=reg74+reg96; reg105=reg103+reg105; reg23=pos_nodes[10][2]*reg72; reg74=0.25*reg102;
    reg103=reg43*reg87; reg104=reg56-reg104; reg56=pos_nodes[13][2]*reg58; T reg107=reg14*reg44; reg61=reg93+reg61;
    reg57=reg65+reg57; reg65=pos_nodes[13][2]*reg60; reg93=pos_nodes[11][0]*reg99; reg73=reg101-reg73; reg86=reg32+reg86;
    reg32=pos_nodes[7][2]*reg18; reg101=pos_nodes[8][0]*reg89; reg8=reg6-reg8; reg6=pos_nodes[11][1]*reg99; T reg108=pos_nodes[14][2]*reg46;
    reg84=reg15+reg84; reg93=reg73-reg93; reg15=pos_nodes[12][0]*reg103; reg73=reg89*pos_nodes[8][2]; T reg109=pos_nodes[14][0]*reg98;
    T reg110=pos_nodes[14][1]*reg98; reg91=reg54+reg91; reg54=reg107*pos_nodes[9][1]; reg96=reg92+reg96; reg92=pos_nodes[14][2]*reg98;
    reg65=reg57+reg65; reg57=reg14*reg22; T reg111=pos_nodes[12][1]*reg103; T reg112=reg2*reg3; reg6=reg8-reg6;
    reg69=reg11-reg69; reg8=pos_nodes[14][1]*reg46; reg11=pos_nodes[11][2]*reg99; reg23=reg105-reg23; reg3=reg74*reg3;
    reg105=reg43*reg97; T reg113=pos_nodes[14][0]*reg46; reg32=reg86+reg32; reg86=reg43*reg48; T reg114=reg107*pos_nodes[9][0];
    reg61=reg101+reg61; reg106=reg94-reg106; reg56=reg104-reg56; reg109=reg84+reg109; reg113=reg106+reg113;
    reg84=pos_nodes[15][0]*reg105; reg114=reg61+reg114; reg61=reg4*reg2; reg94=pos_nodes[15][0]*reg88; reg54=reg96+reg54;
    reg96=reg57*pos_nodes[10][1]; reg14=reg14*reg53; reg101=pos_nodes[15][2]*reg105; reg108=reg56+reg108; reg56=reg57*pos_nodes[10][0];
    reg104=2*reg3; reg106=reg43*reg100; T reg115=pos_nodes[13][1]*reg86; reg111=reg6-reg111; reg4=reg74*reg4;
    reg6=pos_nodes[12][2]*reg103; reg11=reg23-reg11; reg32=reg73+reg32; reg23=pos_nodes[15][2]*reg88; reg92=reg65+reg92;
    reg65=reg5*reg112; reg110=reg91+reg110; reg73=pos_nodes[15][1]*reg88; reg74=reg107*pos_nodes[9][2]; reg15=reg93-reg15;
    reg91=pos_nodes[13][0]*reg86; reg93=pos_nodes[15][1]*reg105; reg8=reg69+reg8; reg56=reg114+reg56; reg69=reg14*pos_nodes[11][0];
    reg115=reg111+reg115; reg111=pos_nodes[14][1]*reg106; reg94=reg109+reg94; reg109=pos_nodes[16][0]*reg65; reg102=0.5*reg102;
    reg114=2*reg4; reg74=reg32+reg74; reg32=reg57*pos_nodes[10][2]; T reg116=pos_nodes[13][2]*reg86; reg6=reg11-reg6;
    reg11=pos_nodes[16][1]*reg104; reg93=reg8-reg93; reg8=reg5*reg61; reg73=reg110+reg73; reg23=reg92+reg23;
    reg92=pos_nodes[16][2]*reg65; reg96=reg54+reg96; reg54=reg14*pos_nodes[11][1]; reg110=pos_nodes[16][1]*reg65; reg77=reg43*reg77;
    reg91=reg15+reg91; reg84=reg113-reg84; reg15=pos_nodes[16][0]*reg104; reg113=pos_nodes[16][2]*reg104; reg101=reg108-reg101;
    reg108=pos_nodes[14][0]*reg106; T reg117=reg14*pos_nodes[11][2]; reg116=reg6+reg116; reg6=pos_nodes[14][2]*reg106; reg32=reg74+reg32;
    reg74=pos_nodes[15][0]*reg86; reg108=reg91-reg108; reg111=reg115-reg111; reg91=pos_nodes[15][1]*reg86; reg44=reg44*reg43;
    reg115=reg5*reg102; reg92=reg23-reg92; reg23=pos_nodes[17][2]*reg114; T reg118=reg77*pos_nodes[12][0]; reg69=reg56+reg69;
    reg113=reg101-reg113; reg56=pos_nodes[17][2]*reg8; reg109=reg94-reg109; reg94=pos_nodes[17][0]*reg8; reg110=reg73-reg110;
    reg73=pos_nodes[17][1]*reg8; reg101=pos_nodes[17][0]*reg114; reg15=reg84-reg15; reg84=reg10*reg61; reg54=reg96+reg54;
    reg96=reg77*pos_nodes[12][1]; T reg119=pos_nodes[17][1]*reg114; reg11=reg93-reg11; reg93=reg10*reg112; T reg120=pos_nodes[18][2]*reg114;
    T reg121=pos_nodes[16][0]*reg115; reg74=reg108-reg74; reg23=reg113-reg23; reg108=pos_nodes[18][1]*reg84; reg73=reg110-reg73;
    reg96=reg54+reg96; reg54=reg44*pos_nodes[13][1]; reg101=reg15-reg101; reg15=pos_nodes[18][0]*reg114; reg56=reg92-reg56;
    reg92=pos_nodes[18][2]*reg84; reg94=reg109-reg94; reg109=pos_nodes[18][0]*reg84; reg110=pos_nodes[16][1]*reg115; reg113=pos_nodes[18][1]*reg114;
    reg119=reg11-reg119; reg117=reg32+reg117; reg11=reg77*pos_nodes[12][2]; reg91=reg111-reg91; reg32=reg44*pos_nodes[13][0];
    reg118=reg69+reg118; reg22=reg22*reg43; reg6=reg116-reg6; reg69=pos_nodes[15][2]*reg86; reg32=reg118+reg32;
    reg111=pos_nodes[19][0]*reg93; reg109=reg94-reg109; reg94=pos_nodes[16][2]*reg115; reg43=reg53*reg43; reg108=reg73-reg108;
    reg53=pos_nodes[17][1]*reg115; reg73=pos_nodes[19][1]*reg93; reg92=reg56-reg92; reg56=pos_nodes[17][0]*reg115; reg121=reg74-reg121;
    reg74=pos_nodes[19][2]*reg93; reg116=pos_nodes[19][2]*reg104; reg120=reg23+reg120; reg110=reg91-reg110; reg23=reg10*reg102;
    reg69=reg6-reg69; reg6=reg22*pos_nodes[14][0]; reg54=reg96+reg54; reg91=reg22*pos_nodes[14][1]; reg96=pos_nodes[19][1]*reg104;
    reg113=reg119+reg113; reg11=reg117+reg11; reg117=reg44*pos_nodes[13][2]; reg118=pos_nodes[19][0]*reg104; reg15=reg101+reg15;
    reg118=reg15+reg118; reg15=reg3*reg5; reg74=reg92-reg74; reg92=pos_nodes[18][1]*reg23; reg53=reg110+reg53;
    reg101=pos_nodes[17][2]*reg115; reg94=reg69-reg94; reg111=reg109-reg111; reg96=reg113+reg96; reg69=reg43*pos_nodes[15][0];
    reg117=reg11+reg117; reg11=reg22*pos_nodes[14][2]; reg6=reg32+reg6; reg32=pos_nodes[18][0]*reg23; reg116=reg120+reg116;
    reg56=reg121+reg56; reg91=reg54+reg91; reg73=reg108-reg73; reg54=reg43*pos_nodes[15][1]; reg101=reg94+reg101;
    reg94=pos_nodes[19][0]*reg23; reg54=reg91+reg54; reg91=reg15*pos_nodes[16][1]; reg108=reg15*pos_nodes[16][0]; reg69=reg6+reg69;
    reg11=reg117+reg11; reg6=reg43*pos_nodes[15][2]; reg109=reg96*reg74; reg110=reg73*reg116; reg113=reg118*reg74;
    reg117=reg111*reg116; reg32=reg56+reg32; reg56=pos_nodes[18][2]*reg23; reg92=reg53+reg92; reg53=pos_nodes[19][1]*reg23;
    reg5=reg4*reg5; reg119=reg111*reg96; reg117=reg113-reg117; reg120=reg118*reg73; reg110=reg109-reg110;
    reg53=reg92-reg53; reg92=reg15*pos_nodes[16][2]; reg6=reg11+reg6; reg11=reg5*pos_nodes[17][1]; reg91=reg54+reg91;
    reg108=reg69+reg108; reg54=reg5*pos_nodes[17][0]; reg94=reg32-reg94; reg56=reg101+reg56; reg4=reg4*reg10;
    reg32=pos_nodes[19][2]*reg23; reg69=reg53*reg117; reg101=reg94*reg110; reg54=reg108+reg54; reg119=reg120-reg119;
    reg108=reg5*pos_nodes[17][2]; reg92=reg6+reg92; reg10=reg3*reg10; reg3=reg4*pos_nodes[18][0]; reg6=reg4*pos_nodes[18][1];
    reg11=reg91+reg11; reg32=reg56-reg32; reg56=reg53*reg116; reg91=reg96*reg32; reg121=reg73*reg32;
    T reg122=reg53*reg74; T reg123=reg94*reg74; T reg124=reg32*reg119; T reg125=reg10*pos_nodes[19][0]; reg101=reg69-reg101;
    reg69=reg111*reg32; T reg126=reg94*reg116; T reg127=reg118*reg32; T reg128=reg10*pos_nodes[19][1]; reg3=reg54+reg3;
    reg54=reg4*pos_nodes[18][2]; reg108=reg92+reg108; reg6=reg11+reg6; reg11=reg118*reg53; reg92=reg94*reg96;
    T reg129=reg111*reg53; T reg130=reg94*reg73; reg127=reg126-reg127; reg69=reg123-reg69; reg128=reg6+reg128;
    reg91=reg56-reg91; reg125=reg3+reg125; reg121=reg122-reg121; reg3=reg10*pos_nodes[19][2]; reg124=reg101-reg124;
    reg54=reg108+reg54; reg11=reg92-reg11; reg125=pos[0]-reg125; reg129=reg130-reg129; reg3=reg54+reg3;
    reg127=reg127/reg124; reg91=reg91/reg124; reg110=reg110/reg124; reg128=pos[1]-reg128; reg69=reg69/reg124;
    reg117=reg117/reg124; reg121=reg121/reg124; reg127=reg128*reg127; reg91=reg125*reg91; reg69=reg128*reg69;
    reg121=reg125*reg121; reg117=reg128*reg117; reg110=reg125*reg110; reg11=reg11/reg124; reg129=reg129/reg124;
    reg3=pos[2]-reg3; reg124=reg119/reg124; reg124=reg3*reg124; reg110=reg117-reg110; reg129=reg3*reg129;
    reg69=reg121-reg69; reg11=reg3*reg11; reg91=reg127-reg91; var_inter[0]=reg110-reg124; var_inter[1]=reg129+reg69;
    var_inter[2]=reg91-reg11;

}
template<class PosNodes,class Pvec,class TVI> void get_var_inter(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; reg0=reg0-1; T reg1=2*var_inter[1]; reg1=reg1-1; T reg2=2*var_inter[2];
    T reg3=1+reg0; T reg4=1-reg0; T reg5=reg0-reg1; T reg6=1-reg1; T reg7=0.125*reg4;
    reg2=reg2-1; T reg8=reg0+reg1; T reg9=0.125*reg3; T reg10=0.25*reg3; T reg11=reg5-reg2;
    T reg12=1+reg1; T reg13=0.25*reg4; T reg14=reg6*reg9; T reg15=reg8+reg2; T reg16=reg6*reg7;
    T reg17=1-reg2; T reg18=reg17*reg13; T reg19=2+reg15; T reg20=reg1-reg0; T reg21=reg16*reg17;
    T reg22=reg8-reg2; reg9=reg12*reg9; T reg23=2*reg14; T reg24=reg17*reg10; T reg25=2*reg16;
    reg11=reg11-2; T reg26=reg17*reg14; T reg27=reg19*reg18; T reg28=reg19*reg25; T reg29=reg11*reg24;
    reg7=reg7*reg12; T reg30=0.25*reg6; T reg31=reg20-reg2; reg22=reg22-2; T reg32=reg17*reg9;
    T reg33=2*reg26; T reg34=reg11*reg23; T reg35=2*reg9; T reg36=2*reg21; reg28=reg36-reg28;
    reg34=reg33+reg34; T reg37=reg17*reg30; T reg38=2*reg32; reg27=reg36-reg27; reg29=reg33+reg29;
    T reg39=1+reg2; T reg40=reg22*reg24; reg8=reg2-reg8; T reg41=reg7*reg17; T reg42=0.25*reg12;
    T reg43=2*reg7; T reg44=reg22*reg35; reg31=reg31-2; T reg45=reg39*reg13; T reg46=pos_nodes[0][0]*reg27;
    T reg47=pos_nodes[1][0]*reg29; T reg48=pos_nodes[1][1]*reg34; T reg49=pos_nodes[0][1]*reg27; reg40=reg38+reg40; T reg50=pos_nodes[1][1]*reg29;
    T reg51=pos_nodes[1][2]*reg29; T reg52=reg31*reg43; reg44=reg38+reg44; T reg53=2*reg41; T reg54=reg31*reg18;
    T reg55=reg17*reg42; T reg56=pos_nodes[0][2]*reg27; T reg57=pos_nodes[1][2]*reg34; T reg58=pos_nodes[0][0]*reg28; reg8=reg8-2;
    T reg59=pos_nodes[1][0]*reg34; reg16=reg16*reg39; T reg60=pos_nodes[0][2]*reg28; reg5=reg2+reg5; T reg61=reg19*reg37;
    T reg62=reg11*reg37; T reg63=pos_nodes[0][1]*reg28; reg49=reg50+reg49; reg60=reg57+reg60; reg5=reg5-2;
    reg14=reg39*reg14; reg46=reg47+reg46; reg47=pos_nodes[2][2]*reg40; reg50=pos_nodes[2][0]*reg40; reg57=reg8*reg45;
    reg56=reg51+reg56; reg51=pos_nodes[2][1]*reg40; reg33=reg62+reg33; reg62=pos_nodes[2][1]*reg44; T reg64=reg22*reg55;
    reg61=reg36-reg61; reg36=reg8*reg25; T reg65=pos_nodes[2][0]*reg44; T reg66=2*reg16; reg63=reg48+reg63;
    reg58=reg59+reg58; reg54=reg53+reg54; reg48=reg39*reg10; reg59=pos_nodes[2][2]*reg44; reg52=reg53+reg52;
    reg57=reg66+reg57; T reg67=reg5*reg48; T reg68=pos_nodes[0][0]*reg61; T reg69=pos_nodes[1][0]*reg33; reg64=reg38+reg64;
    reg60=reg59+reg60; reg49=reg51-reg49; reg38=reg39*reg30; reg51=reg31*reg55; reg59=2*reg14;
    T reg70=pos_nodes[3][1]*reg54; T reg71=pos_nodes[3][0]*reg52; reg15=reg15-2; T reg72=pos_nodes[3][2]*reg54; reg9=reg39*reg9;
    reg58=reg65+reg58; reg65=pos_nodes[1][1]*reg33; T reg73=pos_nodes[0][1]*reg61; reg20=reg20+reg2; reg56=reg47-reg56;
    reg47=pos_nodes[3][1]*reg52; reg46=reg50-reg46; reg50=pos_nodes[3][0]*reg54; T reg74=pos_nodes[3][2]*reg52; T reg75=pow(reg0,2);
    T reg76=reg5*reg23; reg63=reg62+reg63; reg36=reg66+reg36; reg76=reg59+reg76; reg75=1-reg75;
    reg62=pos_nodes[4][0]*reg36; T reg77=pow(reg1,2); T reg78=reg8*reg38; T reg79=reg15*reg48; reg58=reg71+reg58;
    reg7=reg7*reg39; reg56=reg72+reg56; reg71=pos_nodes[4][2]*reg57; reg72=pos_nodes[1][2]*reg33; reg60=reg74+reg60;
    reg74=pos_nodes[2][0]*reg64; reg68=reg69-reg68; reg69=pos_nodes[0][2]*reg61; reg67=reg59+reg67; reg46=reg50+reg46;
    reg50=pos_nodes[4][0]*reg57; T reg80=pos_nodes[4][1]*reg57; reg49=reg70+reg49; reg73=reg65-reg73; reg65=pos_nodes[4][1]*reg36;
    reg70=pos_nodes[2][1]*reg64; T reg81=pos_nodes[4][2]*reg36; T reg82=reg15*reg35; T reg83=2*reg9; reg53=reg51+reg53;
    reg20=reg20-2; reg63=reg47+reg63; reg69=reg72-reg69; reg47=pos_nodes[5][2]*reg76; reg60=reg81-reg60;
    reg51=reg20*reg45; reg72=pos_nodes[3][1]*reg53; reg81=pos_nodes[5][2]*reg67; reg71=reg56-reg71; reg73=reg70+reg73;
    reg50=reg46-reg50; reg46=pos_nodes[5][0]*reg67; reg56=pos_nodes[5][0]*reg76; reg58=reg62-reg58; reg79=reg83+reg79;
    reg82=reg83+reg82; reg62=reg20*reg43; reg80=reg49-reg80; reg49=pos_nodes[5][1]*reg67; reg70=reg39*reg42;
    reg78=reg66+reg78; reg66=reg5*reg38; T reg84=2*reg7; T reg85=pos_nodes[2][2]*reg64; reg68=reg74+reg68;
    reg74=pos_nodes[3][0]*reg53; reg19=reg21*reg19; reg26=reg11*reg26; reg63=reg65-reg63; reg11=pos_nodes[5][1]*reg76;
    reg21=0.25*reg75; reg77=1-reg77; reg81=reg71-reg81; reg49=reg80-reg49; reg51=reg84+reg51;
    reg65=pos_nodes[1][0]*reg26; reg56=reg58+reg56; reg58=pos_nodes[4][1]*reg78; reg72=reg73-reg72; reg71=pos_nodes[6][0]*reg79;
    reg73=pos_nodes[0][1]*reg19; reg80=pos_nodes[1][1]*reg26; reg46=reg50-reg46; reg50=pos_nodes[6][1]*reg82; T reg86=pos_nodes[3][2]*reg53;
    T reg87=pos_nodes[6][2]*reg82; T reg88=pos_nodes[6][2]*reg79; T reg89=0.25*reg77; T reg90=pos_nodes[6][0]*reg82; T reg91=pos_nodes[0][0]*reg19;
    reg62=reg84+reg62; T reg92=reg6*reg21; reg11=reg63+reg11; reg22=reg32*reg22; reg32=pos_nodes[6][1]*reg79;
    reg63=reg15*reg70; reg75=0.5*reg75; reg47=reg60+reg47; reg66=reg59+reg66; reg69=reg85+reg69;
    reg59=pos_nodes[4][0]*reg78; reg74=reg68-reg74; reg58=reg72-reg58; reg60=pos_nodes[7][2]*reg62; reg47=reg87+reg47;
    reg68=2*reg92; reg72=pos_nodes[4][2]*reg78; reg86=reg69-reg86; reg69=pos_nodes[2][1]*reg22; reg85=pos_nodes[5][1]*reg66;
    reg11=reg50+reg11; reg91=reg65-reg91; reg50=reg89*reg3; reg65=pos_nodes[7][1]*reg62; reg56=reg90+reg56;
    reg87=pos_nodes[7][0]*reg62; reg90=pos_nodes[2][0]*reg22; T reg93=pos_nodes[5][0]*reg66; reg41=reg31*reg41; reg31=pos_nodes[7][2]*reg51;
    reg81=reg88+reg81; reg59=reg74-reg59; reg49=reg32+reg49; reg32=pos_nodes[7][1]*reg51; reg74=pos_nodes[1][2]*reg26;
    reg63=reg83+reg63; reg83=reg20*reg70; reg88=pos_nodes[0][2]*reg19; T reg94=reg17*reg75; reg73=reg80-reg73;
    reg80=reg1*reg3; reg46=reg71+reg46; reg71=pos_nodes[7][0]*reg51; reg73=reg69+reg73; reg69=pos_nodes[8][0]*reg94;
    reg91=reg90+reg91; reg90=pos_nodes[6][0]*reg63; T reg95=pos_nodes[8][0]*reg68; reg87=reg56+reg87; reg56=pos_nodes[8][1]*reg94;
    T reg96=pos_nodes[2][2]*reg22; reg60=reg47+reg60; reg47=pos_nodes[8][2]*reg68; reg65=reg11+reg65; reg11=pos_nodes[8][1]*reg68;
    reg21=reg21*reg12; T reg97=reg41*pos_nodes[3][1]; reg85=reg58+reg85; reg88=reg74-reg88; reg58=pos_nodes[6][1]*reg63;
    reg74=reg17*reg80; reg83=reg84+reg83; reg72=reg86-reg72; reg84=pos_nodes[5][2]*reg66; reg86=reg6*reg0;
    reg31=reg81+reg31; reg81=pos_nodes[8][2]*reg94; reg8=reg16*reg8; reg71=reg46+reg71; reg93=reg59+reg93;
    reg16=reg41*pos_nodes[3][0]; reg32=reg49+reg32; reg46=2*reg50; reg49=reg4*reg1; reg69=reg71-reg69;
    reg59=pos_nodes[9][0]*reg74; reg11=reg65-reg11; reg65=pos_nodes[9][1]*reg46; reg71=pos_nodes[7][0]*reg83; T reg98=reg41*pos_nodes[3][2];
    reg95=reg87-reg95; reg87=pos_nodes[9][0]*reg46; reg93=reg90+reg93; reg5=reg14*reg5; reg14=reg17*reg86;
    reg77=0.5*reg77; reg84=reg72+reg84; reg72=pos_nodes[6][2]*reg63; reg90=reg8*pos_nodes[4][0]; reg91=reg16+reg91;
    reg73=reg97+reg73; reg16=reg8*pos_nodes[4][1]; reg97=pos_nodes[9][1]*reg74; reg88=reg96+reg88; reg47=reg60-reg47;
    reg60=pos_nodes[9][2]*reg46; reg81=reg31-reg81; reg89=reg4*reg89; reg56=reg32-reg56; reg85=reg58+reg85;
    reg31=pos_nodes[7][1]*reg83; reg32=pos_nodes[9][2]*reg74; reg58=2*reg21; reg96=pos_nodes[8][1]*reg14; T reg99=reg5*pos_nodes[5][1];
    reg84=reg72+reg84; reg72=pos_nodes[7][2]*reg83; reg31=reg85-reg31; reg85=reg5*pos_nodes[5][0]; reg90=reg91+reg90;
    reg91=pos_nodes[10][1]*reg58; reg65=reg11-reg65; reg16=reg73+reg16; reg11=pos_nodes[10][1]*reg94; reg97=reg56-reg97;
    reg56=reg0*reg12; reg73=reg17*reg77; T reg100=reg8*pos_nodes[4][2]; reg15=reg9*reg15; reg88=reg98+reg88;
    reg9=pos_nodes[10][2]*reg58; reg98=pos_nodes[10][0]*reg94; reg59=reg69-reg59; reg69=2*reg89; T reg101=pos_nodes[10][2]*reg94;
    T reg102=pos_nodes[8][0]*reg14; reg60=reg47-reg60; reg47=reg17*reg49; reg71=reg93-reg71; reg93=pos_nodes[10][0]*reg58;
    reg87=reg95-reg87; reg32=reg81-reg32; reg96=reg31-reg96; reg100=reg88+reg100; reg31=reg17*reg56;
    reg81=pos_nodes[8][2]*reg14; reg72=reg84-reg72; reg84=pow(reg2,2); reg99=reg16+reg99; reg102=reg71-reg102;
    reg16=reg5*pos_nodes[5][2]; reg9=reg60-reg9; reg60=pos_nodes[9][1]*reg73; reg71=reg39*reg75; reg88=pos_nodes[11][0]*reg47;
    reg98=reg59+reg98; reg59=pos_nodes[9][0]*reg73; reg95=pos_nodes[11][0]*reg69; T reg103=pos_nodes[11][1]*reg47; reg11=reg97+reg11;
    reg97=reg15*pos_nodes[6][0]; reg93=reg87-reg93; reg101=reg32+reg101; reg32=pos_nodes[11][2]*reg47; reg85=reg90+reg85;
    reg87=reg15*pos_nodes[6][1]; reg20=reg7*reg20; reg7=pos_nodes[11][2]*reg69; reg90=pos_nodes[11][1]*reg69; reg91=reg65-reg91;
    reg65=pos_nodes[10][1]*reg31; T reg104=pos_nodes[12][1]*reg71; reg103=reg11-reg103; reg7=reg9-reg7; reg9=pos_nodes[12][2]*reg68;
    reg99=reg87+reg99; reg11=pos_nodes[7][1]*reg20; reg84=1-reg84; reg87=pos_nodes[9][2]*reg73; T reg105=reg15*pos_nodes[6][2];
    T reg106=pos_nodes[12][0]*reg68; reg95=reg93-reg95; reg32=reg101-reg32; reg85=reg97+reg85; reg93=reg20*pos_nodes[7][0];
    reg97=pos_nodes[12][2]*reg71; reg101=pos_nodes[12][1]*reg68; reg90=reg91-reg90; reg81=reg72-reg81; reg72=pos_nodes[12][0]*reg71;
    reg88=reg98-reg88; reg91=reg17*reg92; reg98=pos_nodes[10][0]*reg31; reg16=reg100+reg16; reg96=reg60+reg96;
    reg102=reg59+reg102; reg59=reg39*reg80; reg98=reg102-reg98; reg101=reg90+reg101; reg60=reg91*pos_nodes[8][1];
    reg93=reg85+reg93; reg85=pos_nodes[11][1]*reg73; reg65=reg96-reg65; reg90=pos_nodes[13][1]*reg46; reg96=reg91*pos_nodes[8][0];
    reg104=reg103-reg104; reg100=pos_nodes[13][1]*reg59; reg106=reg95+reg106; reg95=pos_nodes[13][0]*reg46; reg102=0.25*reg84;
    reg103=pos_nodes[13][0]*reg59; reg11=reg99+reg11; reg16=reg105+reg16; reg99=pos_nodes[7][2]*reg20; reg72=reg88-reg72;
    reg88=reg17*reg50; reg105=reg39*reg86; reg81=reg87+reg81; reg87=pos_nodes[10][2]*reg31; T reg107=pos_nodes[11][0]*reg73;
    reg9=reg7+reg9; reg7=pos_nodes[13][2]*reg46; T reg108=pos_nodes[13][2]*reg59; reg97=reg32-reg97; reg32=pos_nodes[14][1]*reg58;
    T reg109=reg88*pos_nodes[9][1]; T reg110=reg4*reg102; T reg111=reg17*reg21; reg90=reg101+reg90; reg99=reg16+reg99;
    reg16=pos_nodes[14][0]*reg58; reg95=reg106+reg95; reg101=reg88*pos_nodes[9][0]; reg4=reg2*reg4; reg93=reg96+reg93;
    reg108=reg97-reg108; reg96=pos_nodes[11][2]*reg73; reg87=reg81-reg87; reg81=pos_nodes[14][2]*reg71; reg97=pos_nodes[14][0]*reg71;
    reg103=reg72-reg103; reg72=reg39*reg49; reg106=pos_nodes[12][0]*reg105; reg107=reg98-reg107; reg85=reg65-reg85;
    reg65=pos_nodes[14][1]*reg71; reg100=reg104-reg100; reg98=reg91*pos_nodes[8][2]; reg104=pos_nodes[14][2]*reg58; reg7=reg9+reg7;
    reg9=reg39*reg77; reg11=reg60+reg11; reg60=pos_nodes[12][1]*reg105; T reg112=pos_nodes[15][2]*reg72; reg81=reg108+reg81;
    reg104=reg7+reg104; reg7=pos_nodes[15][2]*reg69; reg99=reg98+reg99; reg98=reg88*pos_nodes[9][2]; reg96=reg87-reg96;
    reg87=pos_nodes[12][2]*reg105; reg11=reg109+reg11; reg108=reg111*pos_nodes[10][1]; reg109=pos_nodes[15][1]*reg72; reg65=reg100+reg65;
    reg100=pos_nodes[13][1]*reg9; reg60=reg85-reg60; reg85=reg111*pos_nodes[10][0]; reg93=reg101+reg93; reg101=pos_nodes[15][0]*reg69;
    reg16=reg95+reg16; reg95=reg2*reg3; T reg113=reg6*reg4; T reg114=pos_nodes[15][0]*reg72; reg97=reg103+reg97;
    reg103=2*reg110; T reg115=pos_nodes[13][0]*reg9; reg106=reg107-reg106; reg107=reg39*reg56; reg17=reg17*reg89;
    reg3=reg102*reg3; reg102=pos_nodes[15][1]*reg69; reg32=reg90+reg32; reg90=pos_nodes[16][2]*reg113; reg7=reg104+reg7;
    reg84=0.5*reg84; reg115=reg106+reg115; reg104=pos_nodes[14][0]*reg107; reg106=2*reg3; T reg116=pos_nodes[14][1]*reg107;
    reg100=reg60+reg100; reg60=pos_nodes[16][2]*reg103; reg112=reg81-reg112; reg114=reg97-reg114; reg81=pos_nodes[16][0]*reg103;
    reg97=reg6*reg95; reg101=reg16+reg101; reg16=pos_nodes[16][0]*reg113; reg85=reg93+reg85; reg93=reg17*pos_nodes[11][0];
    reg87=reg96-reg87; reg96=pos_nodes[13][2]*reg9; reg109=reg65-reg109; reg65=pos_nodes[16][1]*reg103; T reg117=reg111*pos_nodes[10][2];
    reg99=reg98+reg99; reg102=reg32+reg102; reg92=reg39*reg92; reg108=reg11+reg108; reg11=reg17*pos_nodes[11][1];
    reg32=pos_nodes[16][1]*reg113; reg90=reg7-reg90; reg7=pos_nodes[17][2]*reg97; reg96=reg87+reg96; reg87=pos_nodes[14][2]*reg107;
    reg98=reg17*pos_nodes[11][2]; reg117=reg99+reg117; reg99=pos_nodes[17][0]*reg97; reg16=reg101-reg16; reg101=reg12*reg95;
    T reg118=reg6*reg84; T reg119=pos_nodes[17][0]*reg106; reg81=reg114-reg81; reg50=reg39*reg50; reg104=reg115-reg104;
    reg60=reg112-reg60; reg112=pos_nodes[17][2]*reg106; reg32=reg102-reg32; reg102=pos_nodes[17][1]*reg97; reg114=pos_nodes[15][0]*reg9;
    reg11=reg108+reg11; reg108=reg92*pos_nodes[12][1]; reg115=pos_nodes[17][1]*reg106; reg65=reg109-reg65; reg116=reg100-reg116;
    reg100=pos_nodes[15][1]*reg9; reg93=reg85+reg93; reg85=reg92*pos_nodes[12][0]; reg109=reg12*reg4; T reg120=pos_nodes[16][1]*reg118;
    T reg121=pos_nodes[18][0]*reg106; reg119=reg81-reg119; reg108=reg11+reg108; reg11=reg50*pos_nodes[13][1]; reg81=pos_nodes[18][1]*reg101;
    reg102=reg32-reg102; reg112=reg60-reg112; reg32=pos_nodes[18][2]*reg106; reg100=reg116-reg100; reg60=pos_nodes[18][2]*reg101;
    reg7=reg90-reg7; reg90=pos_nodes[16][0]*reg118; reg114=reg104-reg114; reg87=reg96-reg87; reg96=pos_nodes[15][2]*reg9;
    reg104=reg92*pos_nodes[12][2]; reg98=reg117+reg98; reg85=reg93+reg85; reg93=reg50*pos_nodes[13][0]; reg115=reg65-reg115;
    reg65=pos_nodes[18][1]*reg106; reg21=reg39*reg21; reg116=pos_nodes[18][0]*reg101; reg99=reg16-reg99; reg16=pos_nodes[17][1]*reg118;
    reg81=reg102-reg81; reg102=reg12*reg84; reg65=reg115+reg65; reg96=reg87-reg96; reg87=pos_nodes[16][2]*reg118;
    reg90=reg114-reg90; reg114=pos_nodes[17][0]*reg118; reg115=reg50*pos_nodes[13][2]; reg104=reg98+reg104; reg98=pos_nodes[19][1]*reg103;
    reg89=reg39*reg89; reg39=pos_nodes[19][1]*reg109; reg60=reg7-reg60; reg7=pos_nodes[19][2]*reg109; reg121=reg119+reg121;
    reg117=pos_nodes[19][2]*reg103; reg119=pos_nodes[19][0]*reg103; reg32=reg112+reg32; reg116=reg99-reg116; reg120=reg100-reg120;
    reg99=reg21*pos_nodes[14][0]; reg93=reg85+reg93; reg85=pos_nodes[19][0]*reg109; reg11=reg108+reg11; reg100=reg21*pos_nodes[14][1];
    reg108=reg21*pos_nodes[14][2]; reg115=reg104+reg115; reg100=reg11+reg100; reg11=reg89*pos_nodes[15][1]; reg16=reg120+reg16;
    reg104=pos_nodes[18][1]*reg102; reg112=reg6*reg110; reg7=reg60-reg7; reg60=reg89*pos_nodes[15][0]; reg98=reg65+reg98;
    reg99=reg93+reg99; reg119=reg121+reg119; reg87=reg96-reg87; reg114=reg90+reg114; reg65=pos_nodes[18][0]*reg102;
    reg85=reg116-reg85; reg90=pos_nodes[17][2]*reg118; reg117=reg32+reg117; reg39=reg81-reg39; reg60=reg99+reg60;
    reg108=reg115+reg108; reg32=reg119*reg7; reg81=reg85*reg117; reg93=reg112*pos_nodes[16][1]; reg6=reg6*reg3;
    reg96=pos_nodes[19][0]*reg102; reg11=reg100+reg11; reg99=reg112*pos_nodes[16][0]; reg90=reg87+reg90; reg87=reg89*pos_nodes[15][2];
    reg104=reg16+reg104; reg65=reg114+reg65; reg16=pos_nodes[19][1]*reg102; reg100=reg39*reg117; reg114=reg98*reg7;
    reg115=pos_nodes[18][2]*reg102; reg3=reg3*reg12; reg16=reg104-reg16; reg104=pos_nodes[19][2]*reg102; reg115=reg90+reg115;
    reg60=reg99+reg60; reg90=reg6*pos_nodes[17][0]; reg100=reg114-reg100; reg99=reg119*reg39; reg116=reg112*pos_nodes[16][2];
    reg96=reg65-reg96; reg11=reg93+reg11; reg65=reg6*pos_nodes[17][1]; reg87=reg108+reg87; reg81=reg32-reg81;
    reg93=reg85*reg98; reg87=reg116+reg87; reg108=reg6*pos_nodes[17][2]; reg116=reg96*reg100; reg104=reg115-reg104;
    reg12=reg110*reg12; reg90=reg60+reg90; reg60=reg3*pos_nodes[18][0]; reg65=reg11+reg65; reg11=reg3*pos_nodes[18][1];
    reg110=reg16*reg81; reg93=reg99-reg93; reg115=reg39*reg104; reg116=reg110-reg116; reg110=reg104*reg93;
    reg120=reg16*reg7; reg121=reg16*reg117; T reg122=reg98*reg104; T reg123=reg3*pos_nodes[18][2]; reg108=reg87+reg108;
    reg60=reg90+reg60; reg87=reg12*pos_nodes[19][0]; reg90=reg96*reg7; T reg124=reg119*reg104; T reg125=reg85*reg104;
    reg11=reg65+reg11; reg65=reg12*pos_nodes[19][1]; T reg126=reg96*reg117; reg115=reg120-reg115; reg124=reg126-reg124;
    reg122=reg121-reg122; reg125=reg90-reg125; reg110=reg116-reg110; reg116=reg96*reg39; T reg127=reg85*reg16;
    T reg128=reg96*reg98; T reg129=reg12*pos_nodes[19][2]; reg123=reg108+reg123; reg87=reg60+reg87; reg60=reg119*reg16;
    reg65=reg11+reg65; reg124=reg124/reg110; reg127=reg116-reg127; reg60=reg128-reg60; reg65=pos[1]-reg65;
    reg87=pos[0]-reg87; reg129=reg123+reg129; reg100=reg100/reg110; reg115=reg115/reg110; reg122=reg122/reg110;
    reg81=reg81/reg110; reg125=reg125/reg110; reg129=pos[2]-reg129; reg93=reg93/reg110; reg127=reg127/reg110;
    reg110=reg60/reg110; reg100=reg87*reg100; reg81=reg65*reg81; reg124=reg65*reg124; reg115=reg87*reg115;
    reg125=reg65*reg125; reg122=reg87*reg122; reg122=reg124-reg122; reg110=reg129*reg110; reg125=reg115-reg125;
    reg127=reg129*reg127; reg100=reg81-reg100; reg93=reg129*reg93; var_inter[1]+=reg127+reg125; var_inter[0]+=reg100-reg93;
    var_inter[2]+=reg122-reg110;

}
template<> struct ElemVarInterFromPosNonLinear<Hexa_20> { static const bool res = 3; };
#ifndef STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
#define STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
struct Elementary_mul_nb_nodes_of_each_children_elem {};
#endif // STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes_of_each_children_elem &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary_mul_nb_nodes
#define STRUCT_Elementary_mul_nb_nodes
struct Elementary_mul_nb_nodes {};
#endif // STRUCT_Elementary_mul_nb_nodes
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Nodal
#define STRUCT_Nodal
struct Nodal {};
#endif // STRUCT_Nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; T reg2=2*var_inter[2]; T reg3=1-reg0;
    reg1=reg1-1; T reg4=1+reg0; T reg5=1-reg1; T reg6=0.125*reg3; T reg7=reg1+reg0;
    reg2=reg2-1; T reg8=0.125*reg4; T reg9=reg0-reg1; T reg10=reg9-reg2; T reg11=reg5*reg8;
    T reg12=1+reg1; T reg13=reg2+reg7; T reg14=reg6*reg5; T reg15=1-reg2; T reg16=2+reg13;
    reg8=reg12*reg8; T reg17=reg14*reg15; T reg18=reg7-reg2; T reg19=reg1-reg0; T reg20=reg15*reg11;
    reg10=reg10-2; T reg21=reg19-reg2; reg6=reg6*reg12; reg18=reg18-2; reg10=reg20*reg10;
    reg20=reg15*reg8; reg16=reg17*reg16; reg18=reg20*reg18; reg16=val[0]*reg16; reg7=reg2-reg7;
    reg17=1+reg2; reg10=val[1]*reg10; reg21=reg21-2; reg20=reg15*reg6; reg16=reg10-reg16;
    reg18=val[2]*reg18; reg21=reg20*reg21; reg14=reg14*reg17; reg7=reg7-2; reg9=reg2+reg9;
    reg21=val[3]*reg21; reg7=reg14*reg7; reg11=reg11*reg17; reg9=reg9-2; reg0=pow(reg0,2);
    reg18=reg16+reg18; reg0=1-reg0; reg13=reg13-2; reg8=reg8*reg17; reg21=reg18+reg21;
    reg9=reg11*reg9; reg1=pow(reg1,2); reg19=reg2+reg19; reg7=val[4]*reg7; reg6=reg6*reg17;
    reg13=reg8*reg13; reg9=val[5]*reg9; reg19=reg19-2; reg7=reg21+reg7; reg1=1-reg1;
    reg0=0.25*reg0; reg1=0.25*reg1; reg19=reg6*reg19; reg9=reg7+reg9; reg6=reg5*reg0;
    reg13=val[6]*reg13; reg19=val[7]*reg19; reg13=reg9+reg13; reg7=reg4*reg1; reg8=reg15*reg6;
    reg9=reg15*reg7; reg8=val[8]*reg8; reg0=reg12*reg0; reg19=reg13+reg19; reg10=reg15*reg0;
    reg1=reg3*reg1; reg8=reg19+reg8; reg9=val[9]*reg9; reg10=val[10]*reg10; reg15=reg15*reg1;
    reg9=reg8+reg9; reg10=reg9+reg10; reg15=val[11]*reg15; reg6=reg17*reg6; reg2=pow(reg2,2);
    reg2=1-reg2; reg15=reg10+reg15; reg6=val[12]*reg6; reg7=reg17*reg7; reg2=0.25*reg2;
    reg6=reg15+reg6; reg7=val[13]*reg7; reg0=reg17*reg0; reg1=reg17*reg1; reg0=val[14]*reg0;
    reg7=reg6+reg7; reg3=reg3*reg2; reg6=reg5*reg3; reg2=reg4*reg2; reg1=val[15]*reg1;
    reg0=reg7+reg0; reg1=reg0+reg1; reg6=val[16]*reg6; reg5=reg5*reg2; reg5=val[17]*reg5;
    reg2=reg12*reg2; reg6=reg1+reg6; reg5=reg6+reg5; reg2=val[18]*reg2; reg3=reg12*reg3;
    reg2=reg5+reg2; reg3=val[19]*reg3; res=reg2+reg3;

}
#ifndef STRUCT_Global
#define STRUCT_Global
struct Global {};
#endif // STRUCT_Global
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Global &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss
#define STRUCT_Gauss
struct Gauss {};
#endif // STRUCT_Gauss
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Gauss &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; reg0=reg0-0.21132486540518707896; T reg2=var_inter[1]-0.21132486540518707896; T reg3=var_inter[0]-0.21132486540518707896;
    reg1=reg1-0.21132486540518707896; reg0=reg0/0.57735026918962573106; reg3=reg3/0.57735026918962573106; T reg4=var_inter[2]-0.21132486540518707896; reg2=reg2/0.57735026918962573106;
    reg1=reg1/0.57735026918962573106; reg0=1-reg0; reg4=reg4/0.57735026918962573106; reg2=1-reg2; reg3=1-reg3;
    T reg5=reg3*reg2; reg4=1-reg4; reg1=1-reg1; T reg6=1-var_inter[2]; reg2=reg2*reg0;
    T reg7=reg5*reg4; reg6=reg6-0.21132486540518707896; T reg8=reg4*reg2; reg0=reg0*reg1; reg1=reg3*reg1;
    reg3=reg4*reg0; reg6=reg6/0.57735026918962573106; reg8=val[1]*reg8; reg7=val[0]*reg7; reg8=reg7+reg8;
    reg3=val[2]*reg3; reg4=reg4*reg1; reg6=1-reg6; reg3=reg8+reg3; reg4=val[3]*reg4;
    reg7=reg5*reg6; reg7=val[4]*reg7; reg8=reg2*reg6; reg4=reg3+reg4; reg7=reg4+reg7;
    reg8=val[5]*reg8; reg3=reg0*reg6; reg8=reg7+reg8; reg3=val[6]*reg3; reg6=reg1*reg6;
    reg3=reg8+reg3; reg6=val[7]*reg6; res=reg3+reg6;

}
#ifndef STRUCT_Flat_interpolation
#define STRUCT_Flat_interpolation
struct Flat_interpolation {};
#endif // STRUCT_Flat_interpolation
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Flat_interpolation &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=var_inter[1]-0.21132486540518707896; reg0=reg0-0.21132486540518707896; T reg3=var_inter[0]-0.21132486540518707896;
    reg2=reg2/0.57735026918962573106; reg1=reg1-0.21132486540518707896; reg0=reg0/0.57735026918962573106; reg3=reg3/0.57735026918962573106; reg2=1-reg2;
    reg3=1-reg3; reg0=1-reg0; reg1=reg1/0.57735026918962573106; T reg4=reg3*reg2; reg2=reg2*reg0;
    reg1=1-reg1; T reg5=val[1]*reg2; reg0=reg0*reg1; T reg6=val[0]*reg4; T reg7=val[2]*reg0;
    reg6=reg5+reg6; reg1=reg3*reg1; reg3=val[3]*reg1; reg7=reg6+reg7; res=reg7+reg3;

}
#ifndef STRUCT_Der_nodal
#define STRUCT_Der_nodal
struct Der_nodal {};
#endif // STRUCT_Der_nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Der_nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary
#define STRUCT_Elementary
struct Elementary {};
#endif // STRUCT_Elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Skin_elementary
#define STRUCT_Skin_elementary
struct Skin_elementary {};
#endif // STRUCT_Skin_elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Skin_elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
template<class TVI,class TVAL> void get_shape_functions(const Hexa_20 &ne,const TVI &var_inter,TVAL &res) {
    typedef typename TVAL::template SubType<0>::T T;
    T reg0=2*var_inter[0]; T reg1=2*var_inter[2]; reg0=reg0-1; T reg2=2*var_inter[1]; reg2=reg2-1;
    reg1=reg1-1; T reg3=1-reg0; T reg4=1+reg0; T reg5=pow(reg2,2); T reg6=pow(reg0,2);
    T reg7=reg2+reg0; T reg8=pow(reg1,2); T reg9=0.125*reg3; T reg10=1-reg2; T reg11=reg2-reg0;
    reg6=1-reg6; reg0=reg0-reg2; reg5=1-reg5; T reg12=0.125*reg4; reg2=1+reg2;
    reg8=1-reg8; T reg13=reg1+reg7; T reg14=reg9*reg10; T reg15=1-reg1; reg8=0.25*reg8;
    reg5=0.25*reg5; reg6=0.25*reg6; T reg16=reg1+reg11; T reg17=reg1+reg0; T reg18=reg1-reg7;
    T reg19=1+reg1; reg11=reg11-reg1; reg9=reg9*reg2; T reg20=reg2*reg12; T reg21=reg14*reg15;
    reg0=reg0-reg1; T reg22=2+reg13; reg12=reg10*reg12; reg1=reg7-reg1; reg16=reg16-2;
    reg0=reg0-2; reg7=reg10*reg6; T reg23=reg15*reg12; T reg24=reg4*reg5; reg6=reg2*reg6;
    reg5=reg3*reg5; reg22=reg21*reg22; reg3=reg3*reg8; reg8=reg4*reg8; reg14=reg14*reg19;
    reg1=reg1-2; reg18=reg18-2; reg11=reg11-2; reg12=reg12*reg19; reg17=reg17-2;
    reg4=reg15*reg9; reg21=reg20*reg19; reg13=reg13-2; reg9=reg9*reg19; reg20=reg15*reg20;
    T reg25=reg10*reg3; res[16]=reg25; reg10=reg10*reg8; res[17]=reg10; reg8=reg2*reg8;
    res[18]=reg8; reg3=reg2*reg3; res[19]=reg3; reg11=reg4*reg11; res[3]=reg11;
    res[0]=-reg22; reg1=reg20*reg1; res[2]=reg1; reg2=reg19*reg5; res[15]=reg2;
    reg4=reg19*reg6; res[14]=reg4; reg20=reg19*reg24; res[13]=reg20; reg19=reg19*reg7;
    res[12]=reg19; reg5=reg15*reg5; res[11]=reg5; reg6=reg15*reg6; res[10]=reg6;
    reg24=reg15*reg24; res[9]=reg24; reg18=reg14*reg18; res[4]=reg18; reg7=reg15*reg7;
    res[8]=reg7; reg17=reg12*reg17; res[5]=reg17; reg0=reg23*reg0; res[1]=reg0;
    reg13=reg21*reg13; res[6]=reg13; reg16=reg9*reg16; res[7]=reg16;

}
#ifndef AUTORIZEDPERM
#define AUTORIZEDPERM
template<class T> struct AuthorizedPerm;
#endif // AUTORIZEDPERM
template<> struct AuthorizedPerm<Hexa_20> {
    static const unsigned nb_permutations = 23;
    template<class TE> static void make_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[16],e.nodes[19],e.nodes[18],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[11],e.nodes[9],e.nodes[13],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[11],e.nodes[15],e.nodes[13],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[8],e.nodes[12],e.nodes[14],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[8],e.nodes[10],e.nodes[14],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[9],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[13],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[17],e.nodes[18],e.nodes[19],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[19],e.nodes[18],e.nodes[17],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[9],e.nodes[13],e.nodes[15],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[15],e.nodes[13],e.nodes[9],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[12],e.nodes[14],e.nodes[10],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[10],e.nodes[14],e.nodes[12],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[18],e.nodes[19],e.nodes[16],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[18],e.nodes[17],e.nodes[16],e.nodes[19]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[13],e.nodes[15],e.nodes[11],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[13],e.nodes[9],e.nodes[11],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[14],e.nodes[10],e.nodes[8],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[14],e.nodes[12],e.nodes[8],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[10],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[14],e.nodes[19],e.nodes[16],e.nodes[17],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[17],e.nodes[16],e.nodes[19],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[15],e.nodes[11],e.nodes[9],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[9],e.nodes[11],e.nodes[15],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[10],e.nodes[8],e.nodes[12],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[12],e.nodes[8],e.nodes[10],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
    template<class TE> static void unmake_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[16],e.nodes[19],e.nodes[18],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[15],e.nodes[13],e.nodes[9],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[8],e.nodes[10],e.nodes[14],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[12],e.nodes[8],e.nodes[10],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[11],e.nodes[15],e.nodes[13],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[10],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[14],e.nodes[19],e.nodes[16],e.nodes[17],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[19],e.nodes[18],e.nodes[17],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[14],e.nodes[12],e.nodes[8],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[11],e.nodes[9],e.nodes[13],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[15],e.nodes[11],e.nodes[9],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[10],e.nodes[14],e.nodes[12],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[18],e.nodes[19],e.nodes[16],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[18],e.nodes[17],e.nodes[16],e.nodes[19]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[13],e.nodes[15],e.nodes[11],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[10],e.nodes[8],e.nodes[12],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[14],e.nodes[10],e.nodes[8],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[9],e.nodes[13],e.nodes[15],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[9],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[13],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[17],e.nodes[18],e.nodes[19],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[17],e.nodes[16],e.nodes[19],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[12],e.nodes[14],e.nodes[10],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[9],e.nodes[11],e.nodes[15],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[13],e.nodes[9],e.nodes[11],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[8],e.nodes[12],e.nodes[14],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
};

}
#endif // LMT_HEXA_20
