#ifndef LMT_HEXA_20
#define LMT_HEXA_20
namespace LMT {
inline const double *gauss_point_for_order(unsigned order, const Hexa_20 &elem) { /// order -> degre du polynome a integrer exactement
    static const unsigned offset[] = { 0, 33, 66, 99, 132, 269, 406, 543, 680, 817, }; // fonction de lordre du poly
    static const double values[] = {
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
    };
    return values + offset[order];
}
template<class TNode> void permutation_if_jac_neg(const Hexa_20 &elem,TNode **nodes) {
    typedef typename TNode::T T;
    T reg0=0.25*nodes[0]->pos[2]; T reg1=0.25*nodes[1]->pos[2]; T reg2=0.25*nodes[1]->pos[1]; T reg3=0.25*nodes[0]->pos[1]; T reg4=0.25*nodes[2]->pos[1];
    T reg5=reg2+reg3; T reg6=reg1+reg0; T reg7=0.25*nodes[2]->pos[2]; T reg8=reg3-reg2; T reg9=reg0-reg1;
    T reg10=reg6-reg7; T reg11=0.25*nodes[3]->pos[2]; T reg12=reg6+reg7; T reg13=reg4+reg5; reg8=reg8-reg4;
    T reg14=0.25*nodes[3]->pos[1]; T reg15=0.25*nodes[0]->pos[0]; T reg16=0.25*nodes[1]->pos[0]; reg9=reg9-reg7; T reg17=reg5-reg4;
    T reg18=0.25*nodes[4]->pos[1]; reg17=reg17-reg14; T reg19=0.25*nodes[4]->pos[2]; T reg20=reg12+reg11; reg10=reg10-reg11;
    T reg21=reg14+reg13; reg9=reg11+reg9; T reg22=reg16+reg15; T reg23=reg15-reg16; T reg24=0.25*nodes[2]->pos[0];
    reg8=reg14+reg8; reg8=reg18+reg8; reg17=reg17+reg18; T reg25=0.25*nodes[5]->pos[1]; T reg26=reg22-reg24;
    T reg27=reg21-reg18; reg9=reg19+reg9; reg10=reg19+reg10; T reg28=0.25*nodes[5]->pos[2]; T reg29=reg20-reg19;
    T reg30=0.25*nodes[3]->pos[0]; reg23=reg23-reg24; reg26=reg26-reg30; T reg31=0.25*nodes[4]->pos[0]; reg23=reg23+reg30;
    reg29=reg29-reg28; T reg32=0.25*nodes[6]->pos[2]; reg8=reg8-reg25; T reg33=reg24+reg22; reg10=reg28+reg10;
    reg9=reg9-reg28; reg27=reg27-reg25; reg17=reg17+reg25; T reg34=0.25*nodes[6]->pos[1]; reg27=reg27-reg34;
    reg9=reg9-reg32; reg10=reg10-reg32; T reg35=reg30+reg33; reg8=reg8-reg34; T reg36=0.25*nodes[5]->pos[0];
    reg17=reg17-reg34; T reg37=0.25*nodes[7]->pos[2]; reg29=reg29-reg32; T reg38=0.25*nodes[7]->pos[1]; reg23=reg23+reg31;
    reg26=reg31+reg26; reg10=reg10-reg37; reg9=reg37+reg9; T reg39=0.5*nodes[9]->pos[1]; reg23=reg23-reg36;
    T reg40=0.25*nodes[6]->pos[0]; T reg41=reg35-reg31; reg8=reg38+reg8; reg27=reg27-reg38; reg26=reg36+reg26;
    T reg42=0.5*nodes[9]->pos[2]; T reg43=0.5*nodes[8]->pos[2]; reg29=reg29-reg37; reg17=reg17-reg38; T reg44=0.5*nodes[8]->pos[1];
    reg26=reg26-reg40; T reg45=0.5*nodes[10]->pos[1]; reg17=reg17-reg44; reg9=reg42+reg9; reg44=reg27-reg44;
    reg10=reg10-reg43; reg23=reg23-reg40; reg27=0.25*nodes[7]->pos[0]; reg8=reg39+reg8; reg43=reg29-reg43;
    reg41=reg41-reg36; reg29=0.5*nodes[11]->pos[1]; T reg46=0.5*nodes[10]->pos[2]; T reg47=0.5*nodes[11]->pos[2]; T reg48=0.5*nodes[8]->pos[0];
    reg26=reg26-reg27; reg39=reg44-reg39; reg44=0.5*nodes[13]->pos[1]; T reg49=0.5*nodes[9]->pos[0]; reg17=reg17+reg45;
    T reg50=0.5*nodes[12]->pos[1]; reg42=reg43-reg42; reg43=0.5*nodes[12]->pos[2]; reg41=reg41-reg40; T reg51=0.5*nodes[13]->pos[2];
    reg9=reg9-reg47; reg23=reg23+reg27; reg10=reg46+reg10; reg8=reg8-reg29; reg41=reg41-reg27;
    T reg52=0.5*nodes[10]->pos[0]; reg9=reg51+reg9; reg8=reg44+reg8; reg10=reg10-reg43; T reg53=0.5*nodes[15]->pos[2];
    reg45=reg39-reg45; reg39=0.5*nodes[14]->pos[2]; reg46=reg42-reg46; reg42=0.5*nodes[15]->pos[1]; reg23=reg49+reg23;
    T reg54=0.5*nodes[11]->pos[0]; T reg55=0.5*nodes[14]->pos[1]; reg17=reg17-reg50; reg26=reg26-reg48; reg23=reg23-reg54;
    T reg56=0.5*nodes[13]->pos[0]; T reg57=0.5*nodes[16]->pos[1]; reg17=reg17+reg55; reg48=reg41-reg48; reg47=reg46-reg47;
    reg9=reg9-reg53; reg10=reg39+reg10; reg41=0.5*nodes[16]->pos[2]; reg29=reg45-reg29; reg26=reg26+reg52;
    reg45=0.5*nodes[12]->pos[0]; reg8=reg8-reg42; reg49=reg48-reg49; reg29=reg50+reg29; reg43=reg47+reg43;
    reg26=reg26-reg45; reg46=0.5*nodes[14]->pos[0]; reg17=reg17-reg57; reg47=0.5*nodes[17]->pos[1]; reg9=reg9-reg41;
    reg57=reg8-reg57; reg41=reg10-reg41; reg8=0.5*nodes[17]->pos[2]; reg23=reg23+reg56; reg10=0.5*nodes[15]->pos[0];
    reg26=reg26+reg46; reg23=reg23-reg10; reg52=reg49-reg52; reg48=0.5*nodes[16]->pos[0]; reg49=0.5*nodes[18]->pos[1];
    reg17=reg17-reg47; reg44=reg29+reg44; reg51=reg43+reg51; reg29=0.5*nodes[18]->pos[2]; reg41=reg41-reg8;
    reg57=reg47+reg57; reg9=reg8+reg9; reg57=reg49+reg57; reg49=reg17+reg49; reg8=0.5*nodes[19]->pos[1];
    reg17=0.5*nodes[17]->pos[0]; reg23=reg23-reg48; reg41=reg41+reg29; reg48=reg26-reg48; reg26=0.5*nodes[19]->pos[2];
    reg9=reg29+reg9; reg54=reg52-reg54; reg44=reg55+reg44; reg39=reg51+reg39; reg57=reg57-reg8;
    reg54=reg45+reg54; reg42=reg44+reg42; reg8=reg49+reg8; reg29=0.5*nodes[18]->pos[0]; reg23=reg23+reg17;
    reg41=reg41+reg26; reg53=reg39+reg53; reg17=reg48-reg17; reg26=reg9-reg26; reg9=0.5*nodes[19]->pos[0];
    reg23=reg23+reg29; reg39=reg8*reg53; reg53=reg53*reg57; reg43=reg42*reg41; reg54=reg56+reg54;
    reg17=reg29+reg17; reg42=reg42*reg26; reg23=reg23-reg9; reg17=reg9+reg17; reg43=reg39-reg43;
    reg26=reg8*reg26; reg57=reg41*reg57; reg54=reg46+reg54; reg42=reg53-reg42; reg26=reg57-reg26;
    reg54=reg10+reg54; reg42=reg17*reg42; reg43=reg23*reg43; reg26=reg54*reg26; reg42=reg43-reg42;
    T det_jac=reg42+reg26;

    if ( det_jac < 0 ) {
        TNode *tmp[] = {nodes[0],nodes[3],nodes[2],nodes[1],nodes[4],nodes[7],nodes[6],nodes[5],nodes[11],nodes[10],nodes[9],nodes[8],nodes[15],nodes[14],nodes[13],nodes[12],nodes[16],nodes[19],nodes[18],nodes[17]};
        for(unsigned i=0;i<20;++i) nodes[i] = tmp[i];
    }
}
template<class PosNodes,class Pvec,class TVI> void get_var_inter_linear(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; T reg2=1-reg0; T reg3=1+reg0;
    reg1=reg1-1; T reg4=2*var_inter[2]; T reg5=reg0-reg1; T reg6=0.125*reg3; reg4=reg4-1;
    T reg7=reg0+reg1; T reg8=0.125*reg2; T reg9=1-reg1; T reg10=1-reg4; T reg11=reg5-reg4;
    T reg12=reg6*reg9; T reg13=1+reg1; T reg14=reg7+reg4; T reg15=0.25*reg2; T reg16=0.25*reg3;
    T reg17=reg8*reg9; T reg18=2*reg12; T reg19=reg12*reg10; reg11=reg11-2; reg6=reg13*reg6;
    T reg20=reg7-reg4; T reg21=reg10*reg17; T reg22=2+reg14; T reg23=reg1-reg0; T reg24=2*reg17;
    T reg25=reg16*reg10; T reg26=reg15*reg10; T reg27=reg23-reg4; T reg28=reg24*reg22; reg8=reg13*reg8;
    reg20=reg20-2; T reg29=0.25*reg9; T reg30=reg25*reg11; T reg31=reg6*reg10; T reg32=reg26*reg22;
    T reg33=2*reg6; T reg34=2*reg19; T reg35=2*reg21; T reg36=reg18*reg11; T reg37=0.25*reg13;
    T reg38=reg29*reg10; T reg39=2*reg31; reg36=reg34+reg36; T reg40=2*reg8; T reg41=reg33*reg20;
    reg28=reg35-reg28; T reg42=reg25*reg20; reg30=reg34+reg30; reg32=reg35-reg32; reg7=reg4-reg7;
    T reg43=1+reg4; reg27=reg27-2; T reg44=reg10*reg8; T reg45=reg40*reg27; T reg46=reg28*pos_nodes[0][2];
    T reg47=pos_nodes[1][2]*reg36; T reg48=reg32*pos_nodes[0][0]; T reg49=reg26*reg27; T reg50=reg36*pos_nodes[1][0]; T reg51=reg28*pos_nodes[0][0];
    T reg52=reg32*pos_nodes[0][2]; T reg53=pos_nodes[1][2]*reg30; T reg54=reg15*reg43; T reg55=reg30*pos_nodes[1][1]; T reg56=reg32*pos_nodes[0][1];
    T reg57=reg36*pos_nodes[1][1]; T reg58=reg28*pos_nodes[0][1]; reg7=reg7-2; T reg59=reg30*pos_nodes[1][0]; reg17=reg43*reg17;
    T reg60=reg38*reg11; reg42=reg39+reg42; T reg61=reg38*reg22; T reg62=reg37*reg10; reg5=reg5+reg4;
    T reg63=2*reg44; reg41=reg39+reg41; reg49=reg63+reg49; reg51=reg50+reg51; reg12=reg12*reg43;
    reg50=pos_nodes[2][0]*reg41; T reg64=reg24*reg7; T reg65=reg54*reg7; T reg66=pos_nodes[2][1]*reg42; reg45=reg63+reg45;
    reg5=reg5-2; reg56=reg55+reg56; reg48=reg59+reg48; reg55=pos_nodes[2][0]*reg42; reg60=reg34+reg60;
    reg61=reg35-reg61; reg34=reg62*reg20; reg35=2*reg17; reg59=pos_nodes[2][2]*reg41; reg46=reg47+reg46;
    reg52=reg53+reg52; reg47=pos_nodes[2][2]*reg42; reg58=reg57+reg58; reg53=reg16*reg43; reg57=pos_nodes[2][1]*reg41;
    T reg67=pos_nodes[3][0]*reg49; reg6=reg6*reg43; reg59=reg46+reg59; reg46=reg62*reg27; reg34=reg39+reg34;
    reg48=reg55-reg48; reg39=pow(reg0,2); reg55=reg5*reg53; T reg68=pos_nodes[3][2]*reg45; T reg69=2*reg12;
    T reg70=reg29*reg43; T reg71=reg61*pos_nodes[0][0]; T reg72=reg60*pos_nodes[1][0]; T reg73=pos_nodes[3][1]*reg45; reg65=reg35+reg65;
    reg14=reg14-2; T reg74=reg61*pos_nodes[0][1]; T reg75=reg60*pos_nodes[1][1]; T reg76=pos_nodes[3][0]*reg45; reg50=reg51+reg50;
    reg57=reg58+reg57; reg52=reg47-reg52; reg47=pos_nodes[3][2]*reg49; reg51=reg5*reg18; reg23=reg23+reg4;
    reg64=reg35+reg64; reg56=reg66-reg56; reg58=pos_nodes[3][1]*reg49; reg51=reg69+reg51; reg66=pow(reg1,2);
    reg68=reg59+reg68; reg59=pos_nodes[4][2]*reg64; T reg77=pos_nodes[4][2]*reg65; reg47=reg52+reg47; reg52=reg61*pos_nodes[0][2];
    T reg78=pos_nodes[1][2]*reg60; reg73=reg57+reg73; reg57=pos_nodes[4][1]*reg64; T reg79=pos_nodes[4][1]*reg65; reg58=reg56+reg58;
    reg56=pos_nodes[2][1]*reg34; reg74=reg75-reg74; reg76=reg50+reg76; reg50=pos_nodes[4][0]*reg64; reg75=reg14*reg33;
    T reg80=pos_nodes[4][0]*reg65; reg67=reg48+reg67; reg48=2*reg6; reg39=1-reg39; reg23=reg23-2;
    T reg81=reg70*reg7; reg46=reg63+reg46; reg63=pos_nodes[2][0]*reg34; reg71=reg72-reg71; reg55=reg69+reg55;
    reg72=reg14*reg53; reg8=reg8*reg43; reg56=reg74+reg56; reg11=reg19*reg11; reg22=reg21*reg22;
    reg76=reg50-reg76; reg19=pos_nodes[5][0]*reg51; reg21=reg23*reg40; reg75=reg48+reg75; reg50=pos_nodes[5][2]*reg51;
    reg74=2*reg8; T reg82=pos_nodes[5][2]*reg55; reg77=reg47-reg77; reg47=reg37*reg43; reg81=reg35+reg81;
    reg35=reg5*reg70; reg68=reg59-reg68; reg59=pos_nodes[2][2]*reg34; reg52=reg78-reg52; reg78=pos_nodes[5][1]*reg51;
    reg73=reg57-reg73; reg63=reg71+reg63; reg57=pos_nodes[5][1]*reg55; reg79=reg58-reg79; reg58=pos_nodes[3][0]*reg46;
    reg71=pos_nodes[3][1]*reg46; T reg83=0.25*reg39; reg80=reg67-reg80; reg72=reg48+reg72; reg66=1-reg66;
    reg67=pos_nodes[5][0]*reg55; T reg84=reg23*reg54; reg20=reg31*reg20; reg31=pos_nodes[6][1]*reg75; reg78=reg73+reg78;
    reg73=pos_nodes[1][0]*reg11; T reg85=reg22*pos_nodes[0][0]; reg39=0.5*reg39; T reg86=reg22*pos_nodes[0][1]; T reg87=pos_nodes[1][1]*reg11;
    reg67=reg80-reg67; reg80=pos_nodes[6][0]*reg72; reg76=reg19+reg76; reg19=pos_nodes[6][0]*reg75; T reg88=pos_nodes[6][1]*reg72;
    reg57=reg79-reg57; reg58=reg63-reg58; reg63=pos_nodes[4][0]*reg81; reg79=pos_nodes[4][1]*reg81; reg71=reg56-reg71;
    reg56=reg83*reg9; T reg89=reg14*reg47; reg35=reg69+reg35; reg84=reg74+reg84; reg68=reg50+reg68;
    reg50=pos_nodes[6][2]*reg75; reg69=0.25*reg66; reg21=reg74+reg21; T reg90=pos_nodes[3][2]*reg46; reg59=reg52+reg59;
    reg82=reg77-reg82; reg52=pos_nodes[6][2]*reg72; reg77=reg23*reg47; T reg91=2*reg56; reg79=reg71-reg79;
    reg71=pos_nodes[5][1]*reg35; reg63=reg58-reg63; reg58=reg3*reg1; reg52=reg82+reg52; reg48=reg89+reg48;
    reg82=pos_nodes[7][0]*reg84; reg89=pos_nodes[2][0]*reg20; T reg92=pos_nodes[7][2]*reg84; reg88=reg57+reg88; reg57=reg84*pos_nodes[7][1];
    reg80=reg67+reg80; reg50=reg68+reg50; reg67=pos_nodes[7][2]*reg21; reg68=pos_nodes[4][2]*reg81; T reg93=reg39*reg10;
    reg90=reg59-reg90; reg59=pos_nodes[5][0]*reg35; T reg94=pos_nodes[1][2]*reg11; T reg95=pos_nodes[0][2]*reg22; T reg96=pos_nodes[2][1]*reg20;
    reg86=reg87-reg86; reg31=reg78+reg31; reg78=reg21*pos_nodes[7][1]; reg85=reg73-reg85; reg19=reg76+reg19;
    reg73=pos_nodes[7][0]*reg21; reg27=reg44*reg27; reg44=reg69*reg3; reg95=reg94-reg95; reg76=pos_nodes[2][2]*reg20;
    reg87=pos_nodes[8][0]*reg91; reg73=reg19+reg73; reg19=pos_nodes[6][1]*reg48; reg71=reg79+reg71; reg79=pos_nodes[3][1]*reg27;
    reg96=reg86+reg96; reg83=reg83*reg13; reg57=reg88+reg57; reg86=reg0*reg9; reg88=pos_nodes[8][1]*reg91;
    reg78=reg31+reg78; reg31=pos_nodes[8][1]*reg93; reg94=pos_nodes[6][0]*reg48; T reg97=reg58*reg10; reg7=reg17*reg7;
    reg89=reg85+reg89; reg17=pos_nodes[3][0]*reg27; reg77=reg74+reg77; reg92=reg52+reg92; reg52=pos_nodes[8][2]*reg93;
    reg67=reg50+reg67; reg50=pos_nodes[8][2]*reg91; reg63=reg59+reg63; reg68=reg90-reg68; reg59=2*reg44;
    reg74=pos_nodes[8][0]*reg93; reg82=reg80+reg82; reg80=pos_nodes[5][2]*reg35; reg63=reg94+reg63; reg85=pos_nodes[7][0]*reg77;
    reg90=pos_nodes[9][0]*reg59; reg31=reg57-reg31; reg87=reg73-reg87; reg57=pos_nodes[9][2]*reg97; reg52=reg92-reg52;
    reg73=pos_nodes[6][2]*reg48; reg68=reg80+reg68; reg80=2*reg83; reg50=reg67-reg50; reg67=pos_nodes[9][2]*reg59;
    reg76=reg95+reg76; reg92=pos_nodes[3][2]*reg27; reg94=pos_nodes[4][1]*reg7; reg79=reg96+reg79; reg95=pos_nodes[9][1]*reg59;
    reg88=reg78-reg88; reg78=reg1*reg2; reg96=pos_nodes[9][1]*reg97; T reg98=reg77*pos_nodes[7][1]; reg19=reg71+reg19;
    reg5=reg12*reg5; reg74=reg82-reg74; reg12=pos_nodes[9][0]*reg97; reg71=pos_nodes[4][0]*reg7; reg17=reg89+reg17;
    reg82=reg86*reg10; reg66=0.5*reg66; reg69=reg69*reg2; reg89=pos_nodes[8][0]*reg82; reg73=reg68+reg73;
    reg68=pos_nodes[5][0]*reg5; reg67=reg50-reg67; reg50=pos_nodes[10][2]*reg80; reg96=reg31-reg96; reg31=pos_nodes[10][1]*reg93;
    reg14=reg6*reg14; reg6=pos_nodes[5][1]*reg5; reg95=reg88-reg95; reg94=reg79+reg94; reg79=pos_nodes[10][0]*reg93;
    reg12=reg74-reg12; reg92=reg76+reg92; reg74=pos_nodes[4][2]*reg7; reg76=pos_nodes[10][1]*reg80; reg88=reg0*reg13;
    T reg99=reg66*reg10; T reg100=reg78*reg10; reg71=reg17+reg71; reg17=2*reg69; reg85=reg63-reg85;
    reg57=reg52-reg57; reg52=pos_nodes[10][2]*reg93; reg63=pos_nodes[10][0]*reg80; reg90=reg87-reg90; reg87=pos_nodes[7][2]*reg77;
    T reg101=pos_nodes[8][1]*reg82; reg98=reg19-reg98; reg19=pos_nodes[9][0]*reg99; reg52=reg57+reg52; reg89=reg85-reg89;
    reg76=reg95-reg76; reg57=reg100*pos_nodes[11][2]; reg85=reg17*pos_nodes[11][1]; reg74=reg92+reg74; reg92=pow(reg4,2);
    reg95=reg88*reg10; T reg102=pos_nodes[5][2]*reg5; T reg103=reg39*reg43; reg79=reg12+reg79; reg23=reg8*reg23;
    reg6=reg94+reg6; reg8=pos_nodes[6][1]*reg14; reg12=pos_nodes[11][0]*reg100; reg94=reg17*pos_nodes[11][2]; reg50=reg67-reg50;
    reg71=reg68+reg71; reg67=pos_nodes[6][0]*reg14; reg68=pos_nodes[8][2]*reg82; reg87=reg73-reg87; reg63=reg90-reg63;
    reg101=reg98-reg101; reg73=pos_nodes[9][1]*reg99; reg90=pos_nodes[11][0]*reg17; reg31=reg96+reg31; reg96=reg100*pos_nodes[11][1];
    reg98=reg23*pos_nodes[7][1]; T reg104=pos_nodes[10][1]*reg95; reg67=reg71+reg67; reg71=pos_nodes[7][0]*reg23; reg8=reg6+reg8;
    reg6=pos_nodes[6][2]*reg14; reg74=reg102+reg74; reg102=pos_nodes[9][2]*reg99; reg68=reg87-reg68; reg73=reg101+reg73;
    reg87=reg103*pos_nodes[12][0]; reg96=reg31-reg96; reg12=reg79-reg12; reg31=reg103*pos_nodes[12][2]; reg57=reg52-reg57;
    reg19=reg89+reg19; reg52=reg103*pos_nodes[12][1]; reg92=1-reg92; reg79=reg58*reg43; reg89=reg91*pos_nodes[12][2];
    reg94=reg50-reg94; reg50=pos_nodes[10][0]*reg95; reg101=reg91*pos_nodes[12][0]; reg85=reg76-reg85; reg76=reg91*pos_nodes[12][1];
    T reg105=reg56*reg10; reg90=reg63-reg90; reg89=reg94+reg89; reg63=reg59*pos_nodes[13][2]; reg71=reg67+reg71;
    reg102=reg68+reg102; reg67=pos_nodes[10][2]*reg95; reg104=reg73-reg104; reg68=reg79*pos_nodes[13][0]; reg73=reg86*reg43;
    reg87=reg12-reg87; reg12=0.25*reg92; reg94=reg44*reg10; reg31=reg57-reg31; reg57=reg79*pos_nodes[13][2];
    T reg106=reg99*pos_nodes[11][1]; T reg107=reg59*pos_nodes[13][1]; reg76=reg85+reg76; reg85=pos_nodes[11][0]*reg99; T reg108=pos_nodes[7][2]*reg23;
    reg6=reg74+reg6; reg101=reg90+reg101; reg74=reg59*pos_nodes[13][0]; reg90=reg105*pos_nodes[8][0]; T reg109=reg79*pos_nodes[13][1];
    reg52=reg96-reg52; reg98=reg8+reg98; reg8=reg105*pos_nodes[8][1]; reg50=reg19-reg50; reg107=reg76+reg107;
    reg19=reg80*pos_nodes[14][1]; reg76=reg12*reg2; reg108=reg6+reg108; reg6=reg66*reg43; reg96=reg83*reg10;
    T reg110=reg99*pos_nodes[11][2]; reg67=reg102-reg67; reg102=reg105*pos_nodes[8][2]; T reg111=reg103*pos_nodes[14][2]; T reg112=reg103*pos_nodes[14][0];
    T reg113=reg80*pos_nodes[14][2]; reg63=reg89+reg63; reg8=reg98+reg8; reg89=reg94*pos_nodes[9][1]; reg98=reg73*pos_nodes[12][0];
    reg74=reg101+reg74; reg101=reg80*pos_nodes[14][0]; T reg114=reg78*reg43; reg85=reg50-reg85; reg2=reg4*reg2;
    reg57=reg31-reg57; reg106=reg104-reg106; reg31=reg73*pos_nodes[12][1]; reg50=reg94*pos_nodes[9][0]; reg71=reg90+reg71;
    reg109=reg52-reg109; reg52=reg103*pos_nodes[14][1]; reg68=reg87-reg68; reg87=reg17*pos_nodes[15][0]; reg12=reg3*reg12;
    reg90=reg6*pos_nodes[13][1]; reg31=reg106-reg31; reg98=reg85-reg98; reg111=reg57+reg111; reg57=reg114*pos_nodes[15][2];
    reg85=2*reg76; reg104=reg6*pos_nodes[13][0]; reg3=reg3*reg4; reg106=reg17*pos_nodes[15][2]; reg113=reg63+reg113;
    reg10=reg69*reg10; reg63=reg96*pos_nodes[10][1]; reg89=reg8+reg89; reg8=reg2*reg9; T reg115=reg96*pos_nodes[10][0];
    reg50=reg71+reg50; reg112=reg68+reg112; reg52=reg109+reg52; reg68=reg114*pos_nodes[15][1]; reg71=reg88*reg43;
    reg109=reg94*pos_nodes[9][2]; reg101=reg74+reg101; reg19=reg107+reg19; reg74=reg17*pos_nodes[15][1]; reg107=reg114*pos_nodes[15][0];
    reg108=reg102+reg108; reg102=reg73*pos_nodes[12][2]; reg110=reg67-reg110; reg67=reg96*pos_nodes[10][2]; reg109=reg108+reg109;
    reg56=reg56*reg43; reg106=reg113+reg106; reg108=reg8*pos_nodes[16][2]; reg68=reg52-reg68; reg52=reg71*pos_nodes[14][1];
    reg90=reg31+reg90; reg31=reg85*pos_nodes[16][1]; reg102=reg110-reg102; reg110=reg6*pos_nodes[13][2]; reg113=reg10*pos_nodes[11][0];
    reg115=reg50+reg115; reg74=reg19+reg74; reg19=reg8*pos_nodes[16][1]; reg50=reg8*pos_nodes[16][0]; reg101=reg87+reg101;
    reg104=reg98+reg104; reg87=2*reg12; reg98=reg3*reg9; T reg116=reg71*pos_nodes[14][0]; reg107=reg112-reg107;
    reg92=0.5*reg92; reg57=reg111-reg57; reg111=reg85*pos_nodes[16][2]; reg63=reg89+reg63; reg89=reg85*pos_nodes[16][0];
    reg112=reg10*pos_nodes[11][1]; T reg117=pos_nodes[12][1]*reg56; reg112=reg63+reg112; reg31=reg68-reg31; reg63=reg87*pos_nodes[17][1];
    reg68=reg10*pos_nodes[11][2]; reg67=reg109+reg67; reg109=reg98*pos_nodes[17][1]; reg19=reg74-reg19; reg74=reg6*pos_nodes[15][1];
    reg52=reg90-reg52; reg90=pos_nodes[12][0]*reg56; reg113=reg115+reg113; reg115=reg98*pos_nodes[17][0]; reg50=reg101-reg50;
    reg101=reg3*reg13; reg116=reg104-reg116; reg104=reg6*pos_nodes[15][0]; reg44=reg44*reg43; T reg118=reg87*pos_nodes[17][0];
    reg89=reg107-reg89; reg111=reg57-reg111; reg57=reg87*pos_nodes[17][2]; reg107=reg92*reg9; T reg119=reg98*pos_nodes[17][2];
    reg108=reg106-reg108; reg110=reg102+reg110; reg102=reg71*pos_nodes[14][2]; reg106=reg87*pos_nodes[18][1]; reg63=reg31-reg63;
    reg31=reg107*pos_nodes[16][1]; reg74=reg52-reg74; reg52=pos_nodes[13][0]*reg44; reg90=reg113+reg90; reg102=reg110-reg102;
    reg110=reg6*pos_nodes[15][2]; reg113=reg101*pos_nodes[18][0]; reg115=reg50-reg115; reg50=reg2*reg13; reg104=reg116-reg104;
    reg116=reg107*pos_nodes[16][0]; reg83=reg83*reg43; T reg120=reg87*pos_nodes[18][0]; reg118=reg89-reg118; reg89=reg87*pos_nodes[18][2];
    reg57=reg111-reg57; reg109=reg19-reg109; reg19=reg101*pos_nodes[18][1]; reg119=reg108-reg119; reg68=reg67+reg68;
    reg67=pos_nodes[12][2]*reg56; reg117=reg112+reg117; reg108=pos_nodes[13][1]*reg44; reg111=reg101*pos_nodes[18][2]; reg31=reg74-reg31;
    reg74=reg107*pos_nodes[17][1]; reg67=reg68+reg67; reg68=reg92*reg13; reg106=reg63+reg106; reg63=reg85*pos_nodes[19][1];
    reg112=pos_nodes[14][0]*reg83; reg52=reg90+reg52; reg90=pos_nodes[14][1]*reg83; T reg121=pos_nodes[13][2]*reg44; reg110=reg102-reg110;
    reg102=reg107*pos_nodes[16][2]; T reg122=reg50*pos_nodes[19][0]; reg113=reg115-reg113; reg19=reg109-reg19; reg109=reg50*pos_nodes[19][1];
    reg108=reg117+reg108; reg116=reg104-reg116; reg104=reg107*pos_nodes[17][0]; reg115=reg85*pos_nodes[19][2]; reg43=reg69*reg43;
    reg69=reg85*pos_nodes[19][0]; reg120=reg118+reg120; reg89=reg57+reg89; reg57=reg50*pos_nodes[19][2]; reg111=reg119-reg111;
    reg115=reg89+reg115; reg109=reg19-reg109; reg63=reg106+reg63; reg104=reg116+reg104; reg19=reg68*pos_nodes[18][0];
    reg122=reg113-reg122; reg89=pos_nodes[15][0]*reg43; reg69=reg120+reg69; reg102=reg110-reg102; reg106=reg76*reg9;
    reg110=reg107*pos_nodes[17][2]; reg74=reg31+reg74; reg31=reg68*pos_nodes[18][1]; reg112=reg52+reg112; reg52=pos_nodes[15][1]*reg43;
    reg57=reg111-reg57; reg90=reg108+reg90; reg108=pos_nodes[14][2]*reg83; reg121=reg67+reg121; reg110=reg102+reg110;
    reg67=reg109*reg115; reg102=reg68*pos_nodes[18][2]; reg111=reg63*reg57; reg113=reg69*reg57; reg116=pos_nodes[16][1]*reg106;
    reg117=reg68*pos_nodes[19][1]; reg31=reg74+reg31; reg74=reg122*reg115; reg19=reg104+reg19; reg104=reg68*pos_nodes[19][0];
    reg52=reg90+reg52; reg90=pos_nodes[16][0]*reg106; reg9=reg12*reg9; reg112=reg89+reg112; reg89=pos_nodes[15][2]*reg43;
    reg108=reg121+reg108; reg67=reg111-reg67; reg116=reg52+reg116; reg74=reg113-reg74; reg12=reg13*reg12;
    reg52=pos_nodes[17][0]*reg9; reg90=reg112+reg90; reg112=reg122*reg63; reg117=reg31-reg117; reg89=reg108+reg89;
    reg31=pos_nodes[16][2]*reg106; reg108=pos_nodes[17][1]*reg9; reg104=reg19-reg104; reg102=reg110+reg102; reg19=reg69*reg109;
    reg110=reg68*pos_nodes[19][2]; reg112=reg19-reg112; reg31=reg89+reg31; reg89=pos_nodes[17][2]*reg9; reg76=reg13*reg76;
    reg52=reg90+reg52; reg13=pos_nodes[18][0]*reg12; reg90=reg117*reg74; reg110=reg102-reg110; reg102=pos_nodes[18][1]*reg12;
    reg118=reg104*reg67; reg108=reg116+reg108; reg116=reg104*reg57; reg119=reg122*reg110; reg120=reg104*reg115;
    reg121=reg110*reg112; reg102=reg108+reg102; reg108=reg69*reg110; T reg123=reg117*reg115; T reg124=reg109*reg110;
    T reg125=pos_nodes[19][1]*reg76; T reg126=reg63*reg110; T reg127=reg117*reg57; reg13=reg52+reg13; reg52=pos_nodes[19][0]*reg76;
    reg118=reg90-reg118; reg89=reg31+reg89; reg31=pos_nodes[18][2]*reg12; reg31=reg89+reg31; reg89=pos_nodes[19][2]*reg76;
    reg126=reg123-reg126; reg119=reg116-reg119; reg108=reg120-reg108; reg90=reg104*reg109; T reg128=reg122*reg117;
    T reg129=reg104*reg63; T reg130=reg69*reg117; reg124=reg127-reg124; reg52=reg13+reg52; reg121=reg118-reg121;
    reg125=reg102+reg125; reg74=reg74/reg121; reg119=reg119/reg121; reg125=pos[1]-reg125; reg108=reg108/reg121;
    reg124=reg124/reg121; reg67=reg67/reg121; reg126=reg126/reg121; reg89=reg31+reg89; reg128=reg90-reg128;
    reg52=pos[0]-reg52; reg130=reg129-reg130; reg112=reg112/reg121; reg128=reg128/reg121; reg121=reg130/reg121;
    reg67=reg52*reg67; reg74=reg125*reg74; reg124=reg52*reg124; reg89=pos[2]-reg89; reg119=reg125*reg119;
    reg126=reg52*reg126; reg108=reg125*reg108; reg112=reg89*reg112; reg67=reg74-reg67; reg128=reg89*reg128;
    reg119=reg124-reg119; reg121=reg89*reg121; reg126=reg108-reg126; var_inter[0]=reg67-reg112; var_inter[1]=reg128+reg119;
    var_inter[2]=reg126-reg121;

}
template<class PosNodes,class Pvec,class TVI> void get_var_inter(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; reg1=reg1-1; T reg2=1+reg0;
    T reg3=2*var_inter[2]; T reg4=1-reg0; T reg5=1-reg1; T reg6=0.125*reg4; T reg7=0.125*reg2;
    T reg8=reg0-reg1; T reg9=reg0+reg1; reg3=reg3-1; T reg10=0.25*reg2; T reg11=0.25*reg4;
    T reg12=reg5*reg7; T reg13=1+reg1; T reg14=reg9+reg3; T reg15=1-reg3; T reg16=reg6*reg5;
    T reg17=reg8-reg3; T reg18=reg15*reg10; T reg19=reg9-reg3; T reg20=reg15*reg11; T reg21=reg15*reg12;
    T reg22=reg1-reg0; reg7=reg13*reg7; T reg23=2*reg12; T reg24=2+reg14; T reg25=2*reg16;
    reg17=reg17-2; T reg26=reg16*reg15; T reg27=reg15*reg7; T reg28=0.25*reg5; T reg29=2*reg21;
    T reg30=2*reg26; reg19=reg19-2; T reg31=reg17*reg18; T reg32=reg24*reg20; T reg33=reg24*reg25;
    T reg34=reg22-reg3; T reg35=2*reg7; reg6=reg6*reg13; T reg36=reg17*reg23; T reg37=2*reg6;
    reg33=reg30-reg33; reg36=reg29+reg36; T reg38=1+reg3; reg9=reg3-reg9; T reg39=reg19*reg35;
    reg32=reg30-reg32; T reg40=0.25*reg13; T reg41=2*reg27; T reg42=reg15*reg28; reg31=reg29+reg31;
    T reg43=reg19*reg18; T reg44=reg15*reg6; reg34=reg34-2; T reg45=pos_nodes[0][2]*reg33; T reg46=reg36*pos_nodes[1][2];
    T reg47=pos_nodes[0][2]*reg32; T reg48=reg31*pos_nodes[1][2]; T reg49=pos_nodes[0][1]*reg33; T reg50=reg15*reg40; T reg51=reg36*pos_nodes[1][1];
    T reg52=reg17*reg42; T reg53=reg24*reg42; T reg54=2*reg44; T reg55=pos_nodes[0][1]*reg32; T reg56=reg31*pos_nodes[1][1];
    T reg57=pos_nodes[0][0]*reg33; T reg58=reg36*pos_nodes[1][0]; T reg59=reg34*reg37; reg39=reg41+reg39; reg43=reg41+reg43;
    T reg60=reg34*reg20; T reg61=reg38*reg11; T reg62=reg31*pos_nodes[1][0]; T reg63=pos_nodes[0][0]*reg32; reg8=reg3+reg8;
    reg16=reg16*reg38; reg9=reg9-2; reg29=reg52+reg29; reg53=reg30-reg53; reg49=reg51+reg49;
    reg30=2*reg16; reg51=reg19*reg50; reg55=reg56+reg55; reg52=reg43*pos_nodes[2][1]; reg57=reg58+reg57;
    reg56=reg39*pos_nodes[2][1]; reg58=reg43*pos_nodes[2][2]; reg12=reg38*reg12; reg47=reg48+reg47; reg48=reg39*pos_nodes[2][0];
    reg63=reg62+reg63; reg62=reg43*pos_nodes[2][0]; reg8=reg8-2; T reg64=reg9*reg61; reg60=reg54+reg60;
    reg45=reg46+reg45; reg46=reg39*pos_nodes[2][2]; T reg65=reg9*reg25; reg59=reg54+reg59; T reg66=reg38*reg10;
    reg65=reg30+reg65; reg63=reg62-reg63; reg62=reg60*pos_nodes[3][0]; reg64=reg30+reg64; reg22=reg22+reg3;
    T reg67=reg34*reg50; T reg68=reg8*reg66; T reg69=reg60*pos_nodes[3][1]; reg55=reg52-reg55; reg52=reg8*reg23;
    T reg70=reg29*pos_nodes[1][0]; T reg71=pos_nodes[0][0]*reg53; T reg72=pos_nodes[0][1]*reg53; T reg73=reg29*pos_nodes[1][1]; T reg74=reg59*pos_nodes[3][0];
    reg57=reg48+reg57; reg7=reg7*reg38; reg14=reg14-2; reg45=reg46+reg45; reg46=reg59*pos_nodes[3][1];
    reg48=reg59*pos_nodes[3][2]; reg49=reg56+reg49; reg56=reg38*reg28; T reg75=2*reg12; reg51=reg41+reg51;
    reg41=reg60*pos_nodes[3][2]; T reg76=pow(reg0,2); reg47=reg58-reg47; reg58=reg65*pos_nodes[4][2]; reg71=reg70-reg71;
    reg70=reg14*reg35; reg52=reg75+reg52; T reg77=reg64*pos_nodes[4][2]; reg41=reg47+reg41; reg68=reg75+reg68;
    reg72=reg73-reg72; reg47=reg29*pos_nodes[1][2]; reg73=reg51*pos_nodes[2][1]; T reg78=reg14*reg66; reg74=reg57+reg74;
    reg57=pos_nodes[0][2]*reg53; reg22=reg22-2; T reg79=reg65*pos_nodes[4][0]; reg76=1-reg76; T reg80=pow(reg1,2);
    reg6=reg6*reg38; reg62=reg63+reg62; reg67=reg54+reg67; reg54=reg9*reg56; reg63=reg64*pos_nodes[4][0];
    T reg81=reg65*pos_nodes[4][1]; reg48=reg45+reg48; reg45=reg64*pos_nodes[4][1]; reg69=reg55+reg69; reg55=reg51*pos_nodes[2][0];
    reg46=reg49+reg46; reg49=2*reg7; T reg82=reg22*reg37; T reg83=reg52*pos_nodes[5][2]; reg70=reg49+reg70;
    reg77=reg41-reg77; reg24=reg26*reg24; reg63=reg62-reg63; reg21=reg17*reg21; reg17=reg68*pos_nodes[5][2];
    reg26=reg68*pos_nodes[5][0]; reg48=reg58-reg48; reg78=reg49+reg78; reg41=reg22*reg61; reg46=reg81-reg46;
    reg58=reg38*reg40; reg71=reg55+reg71; reg55=reg67*pos_nodes[3][0]; reg45=reg69-reg45; reg62=reg68*pos_nodes[5][1];
    reg69=reg52*pos_nodes[5][1]; reg81=reg67*pos_nodes[3][1]; reg72=reg73+reg72; reg73=2*reg6; T reg84=reg51*pos_nodes[2][2];
    reg54=reg30+reg54; reg30=reg8*reg56; reg74=reg79-reg74; reg57=reg47-reg57; reg47=0.25*reg76;
    reg80=1-reg80; reg79=reg52*pos_nodes[5][0]; reg48=reg83+reg48; reg26=reg63-reg26; reg63=reg70*pos_nodes[6][1];
    reg62=reg45-reg62; reg46=reg69+reg46; reg45=reg21*pos_nodes[1][1]; reg69=pos_nodes[0][1]*reg24; reg83=reg70*pos_nodes[6][2];
    T reg85=reg78*pos_nodes[6][1]; T reg86=reg54*pos_nodes[4][1]; reg81=reg72-reg81; reg17=reg77-reg17; reg72=pos_nodes[0][0]*reg24;
    reg77=reg21*pos_nodes[1][0]; reg74=reg79+reg74; reg57=reg84+reg57; reg79=reg67*pos_nodes[3][2]; reg84=reg78*pos_nodes[6][2];
    T reg87=reg70*pos_nodes[6][0]; reg82=reg73+reg82; T reg88=0.25*reg80; reg41=reg73+reg41; T reg89=reg5*reg47;
    reg76=0.5*reg76; T reg90=reg54*pos_nodes[4][0]; reg55=reg71-reg55; reg75=reg30+reg75; reg30=reg14*reg58;
    reg19=reg27*reg19; reg27=reg78*pos_nodes[6][0]; reg71=reg88*reg2; T reg91=reg15*reg76; T reg92=reg1*reg2;
    reg74=reg87+reg74; reg87=reg82*pos_nodes[7][0]; T reg93=reg19*pos_nodes[2][0]; reg72=reg77-reg72; reg77=reg75*pos_nodes[5][1];
    reg86=reg81-reg86; reg90=reg55-reg90; reg34=reg44*reg34; reg44=reg82*pos_nodes[7][2]; reg48=reg83+reg48;
    reg55=reg41*pos_nodes[7][2]; reg17=reg84+reg17; reg81=reg54*pos_nodes[4][2]; reg79=reg57-reg79; reg69=reg45-reg69;
    reg45=reg19*pos_nodes[2][1]; reg57=pos_nodes[7][1]*reg82; reg46=reg63+reg46; reg63=reg21*pos_nodes[1][2]; reg30=reg49+reg30;
    reg49=pos_nodes[0][2]*reg24; reg83=reg22*reg58; reg84=pos_nodes[7][1]*reg41; reg62=reg85+reg62; reg85=reg75*pos_nodes[5][0];
    T reg94=reg41*pos_nodes[7][0]; reg26=reg27+reg26; reg27=2*reg89; reg55=reg17+reg55; reg94=reg26+reg94;
    reg17=reg19*pos_nodes[2][2]; reg49=reg63-reg49; reg87=reg74+reg87; reg26=reg27*pos_nodes[8][0]; reg81=reg79-reg81;
    reg63=reg91*pos_nodes[8][0]; reg74=reg75*pos_nodes[5][2]; reg79=reg34*pos_nodes[3][1]; reg69=reg45+reg69; reg72=reg93+reg72;
    reg45=reg34*pos_nodes[3][0]; reg93=reg30*pos_nodes[6][0]; T reg95=reg27*pos_nodes[8][1]; reg57=reg46+reg57; reg46=reg0*reg5;
    reg83=reg73+reg83; reg9=reg16*reg9; reg16=reg30*pos_nodes[6][1]; reg73=reg91*pos_nodes[8][1]; reg84=reg62+reg84;
    reg90=reg85+reg90; reg86=reg77+reg86; reg62=reg27*pos_nodes[8][2]; reg47=reg47*reg13; reg77=reg15*reg92;
    reg44=reg48+reg44; reg48=2*reg71; reg85=reg91*pos_nodes[8][2]; T reg96=pos_nodes[9][2]*reg48; T reg97=reg30*pos_nodes[6][2];
    T reg98=reg9*pos_nodes[4][1]; reg79=reg69+reg79; reg69=2*reg47; T reg99=reg77*pos_nodes[9][0]; reg80=0.5*reg80;
    reg62=reg44-reg62; reg95=reg57-reg95; reg44=pos_nodes[9][1]*reg48; reg57=reg4*reg1; reg88=reg4*reg88;
    reg45=reg72+reg45; reg72=reg9*pos_nodes[4][0]; T reg100=reg15*reg46; reg85=reg55-reg85; reg12=reg8*reg12;
    reg8=pos_nodes[9][2]*reg77; reg49=reg17+reg49; reg17=pos_nodes[7][1]*reg83; reg86=reg16+reg86; reg26=reg87-reg26;
    reg16=reg48*pos_nodes[9][0]; reg90=reg93+reg90; reg55=reg83*pos_nodes[7][0]; reg87=pos_nodes[9][1]*reg77; reg73=reg84-reg73;
    reg81=reg74+reg81; reg74=reg34*pos_nodes[3][2]; reg63=reg94-reg63; reg84=pos_nodes[10][0]*reg91; reg14=reg7*reg14;
    reg7=reg100*pos_nodes[8][1]; reg87=reg73-reg87; reg17=reg86-reg17; reg73=reg0*reg13; reg86=pos_nodes[10][1]*reg91;
    reg96=reg62-reg96; reg62=pos_nodes[10][2]*reg69; reg93=reg100*pos_nodes[8][0]; reg55=reg90-reg55; reg90=reg83*pos_nodes[7][2];
    reg81=reg97+reg81; reg94=pos_nodes[10][0]*reg69; reg16=reg26-reg16; reg74=reg49+reg74; reg26=reg9*pos_nodes[4][2];
    reg98=reg79+reg98; reg49=2*reg88; reg79=reg12*pos_nodes[5][0]; reg97=reg15*reg80; reg99=reg63-reg99;
    reg63=reg12*pos_nodes[5][1]; T reg101=pos_nodes[10][2]*reg91; reg8=reg85-reg8; reg72=reg45+reg72; reg45=reg15*reg57;
    reg85=pos_nodes[10][1]*reg69; reg44=reg95-reg44; reg90=reg81-reg90; reg81=reg100*pos_nodes[8][2]; reg95=reg97*pos_nodes[9][0];
    T reg102=pos_nodes[11][2]*reg49; reg62=reg96-reg62; reg96=reg15*reg73; reg101=reg8+reg101; reg8=reg38*reg76;
    T reg103=reg12*pos_nodes[5][2]; T reg104=pos_nodes[11][2]*reg45; reg26=reg74+reg26; reg98=reg63+reg98; reg86=reg87+reg86;
    reg63=pos_nodes[11][1]*reg45; reg74=reg14*pos_nodes[6][1]; reg87=pos_nodes[11][0]*reg45; reg22=reg6*reg22; reg6=pos_nodes[11][1]*reg49;
    reg84=reg99+reg84; reg85=reg44-reg85; reg72=reg79+reg72; reg93=reg55-reg93; reg7=reg17-reg7;
    reg17=reg14*pos_nodes[6][0]; reg44=pos_nodes[9][1]*reg97; reg55=pow(reg3,2); reg94=reg16-reg94; reg16=pos_nodes[11][0]*reg49;
    reg93=reg95+reg93; reg79=pos_nodes[10][0]*reg96; reg55=1-reg55; reg95=reg38*reg92; reg63=reg86-reg63;
    reg86=pos_nodes[12][1]*reg8; reg99=pos_nodes[12][0]*reg27; reg16=reg94-reg16; reg81=reg90-reg81; reg90=pos_nodes[12][2]*reg8;
    reg94=pos_nodes[12][0]*reg8; reg104=reg101-reg104; reg87=reg84-reg87; reg84=reg14*pos_nodes[6][2]; reg101=pos_nodes[12][1]*reg27;
    T reg105=reg22*pos_nodes[7][0]; reg72=reg17+reg72; reg6=reg85-reg6; reg102=reg62-reg102; reg26=reg103+reg26;
    reg17=pos_nodes[10][1]*reg96; reg62=pos_nodes[12][2]*reg27; reg98=reg74+reg98; reg74=pos_nodes[9][2]*reg97; reg85=reg15*reg89;
    reg103=pos_nodes[7][1]*reg22; reg7=reg44+reg7; reg44=reg22*pos_nodes[7][2]; reg26=reg84+reg26; reg81=reg74+reg81;
    reg74=pos_nodes[13][2]*reg95; reg90=reg104-reg90; reg84=0.25*reg55; reg104=pos_nodes[10][2]*reg96; reg94=reg87-reg94;
    reg105=reg72+reg105; reg103=reg98+reg103; reg62=reg102+reg62; reg72=pos_nodes[13][2]*reg48; reg87=reg85*pos_nodes[8][0];
    reg101=reg6+reg101; reg6=pos_nodes[13][1]*reg48; reg98=pos_nodes[13][0]*reg48; reg102=pos_nodes[13][0]*reg95; T reg106=pos_nodes[11][0]*reg97;
    reg99=reg16+reg99; reg16=reg15*reg71; reg86=reg63-reg86; reg63=pos_nodes[13][1]*reg95; reg79=reg93-reg79;
    reg93=reg38*reg46; T reg107=reg85*pos_nodes[8][1]; reg17=reg7-reg17; reg7=pos_nodes[11][1]*reg97; reg103=reg107+reg103;
    reg44=reg26+reg44; reg98=reg99+reg98; reg6=reg101+reg6; reg26=pos_nodes[14][1]*reg69; reg99=pos_nodes[12][0]*reg93;
    reg106=reg79-reg106; reg79=pos_nodes[14][0]*reg69; reg101=pos_nodes[11][2]*reg97; reg104=reg81-reg104; reg81=reg16*pos_nodes[9][1];
    reg7=reg17-reg7; reg17=pos_nodes[12][1]*reg93; reg107=pos_nodes[14][2]*reg69; reg72=reg62+reg72; reg62=reg4*reg3;
    T reg108=reg38*reg57; T reg109=pos_nodes[14][0]*reg8; T reg110=reg38*reg80; reg102=reg94-reg102; reg63=reg86-reg63;
    reg86=pos_nodes[14][1]*reg8; reg94=reg85*pos_nodes[8][2]; reg105=reg87+reg105; reg87=pos_nodes[14][2]*reg8; reg74=reg90-reg74;
    reg4=reg4*reg84; reg90=reg15*reg47; T reg111=reg16*pos_nodes[9][0]; reg44=reg94+reg44; reg99=reg106-reg99;
    reg94=reg16*pos_nodes[9][2]; reg106=pos_nodes[15][2]*reg49; reg107=reg72+reg107; reg72=pos_nodes[13][0]*reg110; reg84=reg84*reg2;
    T reg112=reg5*reg62; T reg113=pos_nodes[15][0]*reg49; reg79=reg98+reg79; reg2=reg3*reg2; reg98=pos_nodes[12][2]*reg93;
    reg101=reg104-reg101; reg104=pos_nodes[15][2]*reg108; reg87=reg74+reg87; reg74=reg90*pos_nodes[10][0]; reg105=reg111+reg105;
    reg26=reg6+reg26; reg6=pos_nodes[15][1]*reg49; reg15=reg15*reg88; reg111=pos_nodes[15][1]*reg108; reg86=reg63+reg86;
    reg63=reg38*reg73; T reg114=2*reg4; reg109=reg102+reg109; reg102=pos_nodes[15][0]*reg108; reg103=reg81+reg103;
    reg81=reg90*pos_nodes[10][1]; T reg115=pos_nodes[13][1]*reg110; reg17=reg7-reg17; reg111=reg86-reg111; reg7=pos_nodes[16][1]*reg114;
    reg86=pos_nodes[16][2]*reg114; reg104=reg87-reg104; reg87=pos_nodes[16][1]*reg112; reg6=reg26+reg6; reg98=reg101-reg98;
    reg26=pos_nodes[13][2]*reg110; reg106=reg107+reg106; reg101=pos_nodes[16][2]*reg112; reg72=reg99+reg72; reg99=pos_nodes[14][0]*reg63;
    reg74=reg105+reg74; reg105=reg15*pos_nodes[11][0]; reg81=reg103+reg81; reg103=reg15*pos_nodes[11][1]; reg107=pos_nodes[16][0]*reg112;
    reg102=reg109-reg102; reg113=reg79+reg113; reg89=reg89*reg38; reg55=0.5*reg55; reg44=reg94+reg44;
    reg79=2*reg84; reg115=reg17+reg115; reg17=pos_nodes[16][0]*reg114; reg94=pos_nodes[14][1]*reg63; reg109=reg90*pos_nodes[10][2];
    T reg116=reg5*reg2; T reg117=reg13*reg2; T reg118=pos_nodes[15][0]*reg110; reg99=reg72-reg99; reg72=reg89*pos_nodes[12][0];
    T reg119=pos_nodes[17][1]*reg79; reg101=reg106-reg101; reg106=pos_nodes[17][2]*reg116; reg94=reg115-reg94; reg71=reg71*reg38;
    reg86=reg104-reg86; reg104=pos_nodes[17][2]*reg79; reg105=reg74+reg105; reg7=reg111-reg7; reg74=pos_nodes[15][1]*reg110;
    reg17=reg102-reg17; reg103=reg81+reg103; reg81=reg89*pos_nodes[12][1]; reg102=reg15*pos_nodes[11][2]; reg109=reg44+reg109;
    reg107=reg113-reg107; reg44=pos_nodes[17][0]*reg116; reg111=reg5*reg55; reg113=pos_nodes[17][0]*reg79; reg115=pos_nodes[17][1]*reg116;
    reg87=reg6-reg87; reg26=reg98+reg26; reg6=pos_nodes[14][2]*reg63; reg98=pos_nodes[18][0]*reg79; T reg120=reg89*pos_nodes[12][2];
    reg113=reg17-reg113; reg47=reg47*reg38; reg17=pos_nodes[18][0]*reg117; reg72=reg105+reg72; reg44=reg107-reg44;
    reg105=pos_nodes[16][1]*reg111; reg74=reg94-reg74; reg102=reg109+reg102; reg94=reg71*pos_nodes[13][1]; reg81=reg103+reg81;
    reg106=reg101-reg106; reg101=pos_nodes[18][2]*reg117; reg103=pos_nodes[16][0]*reg111; reg119=reg7-reg119; reg7=pos_nodes[18][1]*reg79;
    reg107=reg13*reg62; reg109=pos_nodes[18][2]*reg79; reg6=reg26-reg6; reg104=reg86-reg104; reg26=reg71*pos_nodes[13][0];
    reg118=reg99-reg118; reg86=pos_nodes[18][1]*reg117; reg99=pos_nodes[15][2]*reg110; reg115=reg87-reg115; reg105=reg74-reg105;
    reg7=reg119+reg7; reg74=pos_nodes[19][1]*reg114; reg87=reg71*pos_nodes[13][2]; reg119=reg47*pos_nodes[14][0]; T reg121=reg47*pos_nodes[14][1];
    reg94=reg81+reg94; reg26=reg72+reg26; reg72=pos_nodes[17][0]*reg111; reg103=reg118-reg103; reg101=reg106-reg101;
    reg81=pos_nodes[19][2]*reg107; reg106=pos_nodes[19][2]*reg114; reg86=reg115-reg86; reg98=reg113+reg98; reg109=reg104+reg109;
    reg104=pos_nodes[19][1]*reg107; reg120=reg102+reg120; reg99=reg6-reg99; reg6=reg13*reg55; reg38=reg88*reg38;
    reg88=pos_nodes[19][0]*reg107; reg17=reg44-reg17; reg44=pos_nodes[19][0]*reg114; reg102=pos_nodes[16][2]*reg111; reg113=pos_nodes[17][1]*reg111;
    reg115=reg5*reg4; reg87=reg120+reg87; reg118=reg47*pos_nodes[14][2]; reg121=reg94+reg121; reg94=reg38*pos_nodes[15][1];
    reg104=reg86-reg104; reg74=reg7+reg74; reg113=reg105+reg113; reg7=reg38*pos_nodes[15][0]; reg119=reg26+reg119;
    reg88=reg17-reg88; reg72=reg103+reg72; reg17=pos_nodes[18][0]*reg6; reg26=pos_nodes[18][1]*reg6; reg102=reg99-reg102;
    reg86=pos_nodes[17][2]*reg111; reg44=reg98+reg44; reg106=reg109+reg106; reg81=reg101-reg81; reg98=reg38*pos_nodes[15][2];
    reg26=reg113+reg26; reg99=reg88*reg106; reg101=reg44*reg81; reg118=reg87+reg118; reg87=pos_nodes[19][1]*reg6;
    reg103=reg104*reg106; reg105=reg74*reg81; reg5=reg5*reg84; reg109=pos_nodes[19][0]*reg6; reg113=pos_nodes[18][2]*reg6;
    reg86=reg102+reg86; reg17=reg72+reg17; reg72=reg115*pos_nodes[16][0]; reg7=reg119+reg7; reg94=reg121+reg94;
    reg102=reg115*pos_nodes[16][1]; reg7=reg72+reg7; reg72=reg5*pos_nodes[17][0]; reg119=reg88*reg74; reg99=reg101-reg99;
    reg84=reg84*reg13; reg120=reg44*reg104; reg103=reg105-reg103; reg109=reg17-reg109; reg17=pos_nodes[19][2]*reg6;
    reg113=reg86+reg113; reg86=reg5*pos_nodes[17][1]; reg94=reg102+reg94; reg98=reg118+reg98; reg87=reg26-reg87;
    reg26=reg115*pos_nodes[16][2]; reg98=reg26+reg98; reg26=reg87*reg99; reg102=reg84*pos_nodes[18][0]; reg118=reg5*pos_nodes[17][2];
    reg72=reg7+reg72; reg119=reg120-reg119; reg13=reg4*reg13; reg86=reg94+reg86; reg4=reg84*pos_nodes[18][1];
    reg17=reg113-reg17; reg7=reg109*reg103; reg94=reg109*reg106; reg113=reg44*reg17; reg121=reg13*pos_nodes[19][1];
    reg4=reg86+reg4; reg86=reg13*pos_nodes[19][0]; reg102=reg72+reg102; reg72=reg88*reg17; T reg122=reg87*reg81;
    T reg123=reg104*reg17; T reg124=reg109*reg81; T reg125=reg87*reg106; T reg126=reg17*reg119; reg7=reg26-reg7;
    reg118=reg98+reg118; reg26=reg84*pos_nodes[18][2]; reg98=reg74*reg17; reg126=reg7-reg126; reg123=reg122-reg123;
    reg121=reg4+reg121; reg4=reg44*reg87; reg26=reg118+reg26; reg7=reg13*pos_nodes[19][2]; reg118=reg109*reg74;
    T reg127=reg88*reg87; T reg128=reg109*reg104; reg113=reg94-reg113; reg98=reg125-reg98; reg86=reg102+reg86;
    reg72=reg124-reg72; reg86=pos[0]-reg86; reg7=reg26+reg7; reg103=reg103/reg126; reg123=reg123/reg126;
    reg121=pos[1]-reg121; reg4=reg118-reg4; reg98=reg98/reg126; reg127=reg128-reg127; reg113=reg113/reg126;
    reg99=reg99/reg126; reg72=reg72/reg126; reg7=pos[2]-reg7; reg113=reg121*reg113; reg98=reg86*reg98;
    reg119=reg119/reg126; reg72=reg121*reg72; reg127=reg127/reg126; reg123=reg86*reg123; reg99=reg121*reg99;
    reg103=reg86*reg103; reg126=reg4/reg126; reg98=reg113-reg98; reg126=reg7*reg126; reg72=reg123-reg72;
    reg127=reg7*reg127; reg103=reg99-reg103; reg119=reg7*reg119; var_inter[0]+=reg103-reg119; var_inter[1]+=reg127+reg72;
    var_inter[2]+=reg98-reg126;

}
template<> struct ElemVarInterFromPosNonLinear<Hexa_20> { static const bool res = 3; };
#ifndef STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
#define STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
struct Elementary_mul_nb_nodes_of_each_children_elem {};
#endif // STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes_of_each_children_elem &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary_mul_nb_nodes
#define STRUCT_Elementary_mul_nb_nodes
struct Elementary_mul_nb_nodes {};
#endif // STRUCT_Elementary_mul_nb_nodes
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Nodal
#define STRUCT_Nodal
struct Nodal {};
#endif // STRUCT_Nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; T reg2=1+reg0; T reg3=1-reg0;
    reg1=reg1-1; T reg4=2*var_inter[2]; T reg5=0.125*reg3; reg4=reg4-1; T reg6=0.125*reg2;
    T reg7=reg0+reg1; T reg8=reg0-reg1; T reg9=1-reg1; T reg10=reg9*reg6; T reg11=reg8-reg4;
    T reg12=reg4+reg7; T reg13=reg5*reg9; T reg14=1-reg4; T reg15=1+reg1; T reg16=2+reg12;
    T reg17=reg13*reg14; T reg18=reg1-reg0; T reg19=reg14*reg10; reg11=reg11-2; reg6=reg15*reg6;
    T reg20=reg7-reg4; reg16=reg17*reg16; reg11=reg19*reg11; reg17=reg14*reg6; reg20=reg20-2;
    reg5=reg5*reg15; reg19=reg18-reg4; reg20=reg17*reg20; reg7=reg4-reg7; reg11=val[1]*reg11;
    reg17=1+reg4; reg19=reg19-2; T reg21=reg14*reg5; reg16=val[0]*reg16; reg19=reg21*reg19;
    reg8=reg4+reg8; reg16=reg11-reg16; reg13=reg13*reg17; reg7=reg7-2; reg20=val[2]*reg20;
    reg19=val[3]*reg19; reg10=reg10*reg17; reg8=reg8-2; reg7=reg13*reg7; reg0=pow(reg0,2);
    reg20=reg16+reg20; reg12=reg12-2; reg1=pow(reg1,2); reg6=reg6*reg17; reg19=reg20+reg19;
    reg0=1-reg0; reg8=reg10*reg8; reg7=val[4]*reg7; reg18=reg4+reg18; reg12=reg6*reg12;
    reg8=val[5]*reg8; reg5=reg5*reg17; reg7=reg19+reg7; reg18=reg18-2; reg0=0.25*reg0;
    reg1=1-reg1; reg18=reg5*reg18; reg12=val[6]*reg12; reg5=reg9*reg0; reg1=0.25*reg1;
    reg8=reg7+reg8; reg12=reg8+reg12; reg18=val[7]*reg18; reg6=reg2*reg1; reg7=reg14*reg5;
    reg18=reg12+reg18; reg0=reg15*reg0; reg8=reg14*reg6; reg7=val[8]*reg7; reg1=reg3*reg1;
    reg10=reg14*reg0; reg8=val[9]*reg8; reg7=reg18+reg7; reg8=reg7+reg8; reg10=val[10]*reg10;
    reg14=reg14*reg1; reg5=reg17*reg5; reg4=pow(reg4,2); reg10=reg8+reg10; reg14=val[11]*reg14;
    reg14=reg10+reg14; reg5=val[12]*reg5; reg6=reg17*reg6; reg4=1-reg4; reg5=reg14+reg5;
    reg6=val[13]*reg6; reg0=reg17*reg0; reg4=0.25*reg4; reg6=reg5+reg6; reg0=val[14]*reg0;
    reg3=reg3*reg4; reg1=reg17*reg1; reg4=reg2*reg4; reg2=reg9*reg3; reg1=val[15]*reg1;
    reg0=reg6+reg0; reg1=reg0+reg1; reg2=val[16]*reg2; reg9=reg9*reg4; reg9=val[17]*reg9;
    reg4=reg15*reg4; reg2=reg1+reg2; reg4=val[18]*reg4; reg3=reg15*reg3; reg9=reg2+reg9;
    reg4=reg9+reg4; reg3=val[19]*reg3; res=reg4+reg3;

}
#ifndef STRUCT_Global
#define STRUCT_Global
struct Global {};
#endif // STRUCT_Global
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Global &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss
#define STRUCT_Gauss
struct Gauss {};
#endif // STRUCT_Gauss
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Gauss &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; reg0=reg0-0.21132486540518707896; T reg1=var_inter[1]-0.21132486540518707896; T reg2=var_inter[0]-0.21132486540518707896; T reg3=1-var_inter[1];
    reg0=reg0/0.57735026918962573106; reg3=reg3-0.21132486540518707896; reg2=reg2/0.57735026918962573106; T reg4=var_inter[2]-0.21132486540518707896; reg1=reg1/0.57735026918962573106;
    reg0=1-reg0; reg4=reg4/0.57735026918962573106; reg1=1-reg1; reg2=1-reg2; reg3=reg3/0.57735026918962573106;
    T reg5=reg2*reg1; reg3=1-reg3; reg4=1-reg4; reg1=reg1*reg0; T reg6=1-var_inter[2];
    reg0=reg0*reg3; reg6=reg6-0.21132486540518707896; T reg7=reg4*reg1; T reg8=reg5*reg4; reg6=reg6/0.57735026918962573106;
    reg3=reg2*reg3; reg2=reg4*reg0; reg7=val[1]*reg7; reg8=val[0]*reg8; reg7=reg8+reg7;
    reg2=val[2]*reg2; reg4=reg4*reg3; reg6=1-reg6; reg2=reg7+reg2; reg4=val[3]*reg4;
    reg7=reg5*reg6; reg7=val[4]*reg7; reg8=reg1*reg6; reg4=reg2+reg4; reg7=reg4+reg7;
    reg8=val[5]*reg8; reg2=reg0*reg6; reg8=reg7+reg8; reg2=val[6]*reg2; reg6=reg3*reg6;
    reg2=reg8+reg2; reg6=val[7]*reg6; res=reg2+reg6;

}
#ifndef STRUCT_Flat_interpolation
#define STRUCT_Flat_interpolation
struct Flat_interpolation {};
#endif // STRUCT_Flat_interpolation
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Flat_interpolation &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; reg0=reg0-0.21132486540518707896; T reg2=var_inter[1]-0.21132486540518707896; T reg3=var_inter[0]-0.21132486540518707896;
    reg1=reg1-0.21132486540518707896; reg0=reg0/0.57735026918962573106; reg2=reg2/0.57735026918962573106; reg3=reg3/0.57735026918962573106; reg1=reg1/0.57735026918962573106;
    reg3=1-reg3; reg2=1-reg2; reg0=1-reg0; reg1=1-reg1; T reg4=reg3*reg2;
    reg2=reg2*reg0; reg0=reg0*reg1; T reg5=val[1]*reg2; T reg6=val[0]*reg4; reg1=reg3*reg1;
    reg5=reg6+reg5; reg3=val[2]*reg0; reg3=reg5+reg3; reg5=val[3]*reg1; res=reg3+reg5;

}
#ifndef STRUCT_Der_nodal
#define STRUCT_Der_nodal
struct Der_nodal {};
#endif // STRUCT_Der_nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Der_nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary
#define STRUCT_Elementary
struct Elementary {};
#endif // STRUCT_Elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Skin_elementary
#define STRUCT_Skin_elementary
struct Skin_elementary {};
#endif // STRUCT_Skin_elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Skin_elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
template<class TVI,class TVAL> void get_shape_functions(const Hexa_20 &ne,const TVI &var_inter,TVAL &res) {
    typedef typename TVAL::template SubType<0>::T T;
    T reg0=2*var_inter[0]; reg0=reg0-1; T reg1=2*var_inter[2]; T reg2=2*var_inter[1]; T reg3=1-reg0;
    reg1=reg1-1; reg2=reg2-1; T reg4=pow(reg0,2); T reg5=pow(reg2,2); T reg6=1+reg0;
    T reg7=pow(reg1,2); T reg8=reg0+reg2; T reg9=0.125*reg3; T reg10=1-reg2; T reg11=reg2-reg0;
    reg4=1-reg4; reg5=1-reg5; reg0=reg0-reg2; T reg12=reg9*reg10; T reg13=0.125*reg6;
    reg2=1+reg2; T reg14=1-reg1; reg7=1-reg7; T reg15=reg1+reg8; reg5=0.25*reg5;
    reg4=0.25*reg4; reg7=0.25*reg7; T reg16=reg1+reg11; T reg17=reg1+reg0; T reg18=reg1-reg8;
    T reg19=1+reg1; reg11=reg11-reg1; T reg20=2+reg15; reg8=reg8-reg1; reg9=reg9*reg2;
    reg1=reg0-reg1; reg0=reg10*reg13; reg13=reg2*reg13; T reg21=reg12*reg14; reg16=reg16-2;
    T reg22=reg14*reg13; T reg23=reg3*reg7; T reg24=reg10*reg4; reg1=reg1-2; T reg25=reg14*reg0;
    T reg26=reg6*reg5; reg20=reg21*reg20; reg4=reg2*reg4; reg8=reg8-2; reg21=reg9*reg19;
    reg7=reg6*reg7; reg15=reg15-2; reg13=reg13*reg19; reg5=reg3*reg5; reg17=reg17-2;
    reg0=reg0*reg19; reg18=reg18-2; reg12=reg12*reg19; reg9=reg14*reg9; reg11=reg11-2;
    reg3=reg19*reg5; res[15]=reg3; reg6=reg19*reg4; res[14]=reg6; T reg27=reg10*reg23;
    res[16]=reg27; reg10=reg10*reg7; res[17]=reg10; reg7=reg2*reg7; res[18]=reg7;
    reg23=reg2*reg23; res[19]=reg23; res[0]=-reg20; reg2=reg19*reg26; res[13]=reg2;
    reg19=reg19*reg24; res[12]=reg19; reg5=reg14*reg5; res[11]=reg5; reg4=reg14*reg4;
    res[10]=reg4; reg26=reg14*reg26; res[9]=reg26; reg24=reg14*reg24; res[8]=reg24;
    reg1=reg25*reg1; res[1]=reg1; reg16=reg21*reg16; res[7]=reg16; reg15=reg13*reg15;
    res[6]=reg15; reg17=reg0*reg17; res[5]=reg17; reg8=reg22*reg8; res[2]=reg8;
    reg18=reg12*reg18; res[4]=reg18; reg11=reg9*reg11; res[3]=reg11;

}
#ifndef AUTORIZEDPERM
#define AUTORIZEDPERM
template<class T> struct AuthorizedPerm;
#endif // AUTORIZEDPERM
template<> struct AuthorizedPerm<Hexa_20> {
    static const unsigned nb_permutations = 23;
    template<class TE> static void make_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[16],e.nodes[19],e.nodes[18],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[11],e.nodes[9],e.nodes[13],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[11],e.nodes[15],e.nodes[13],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[8],e.nodes[12],e.nodes[14],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[8],e.nodes[10],e.nodes[14],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[9],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[13],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[17],e.nodes[18],e.nodes[19],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[19],e.nodes[18],e.nodes[17],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[9],e.nodes[13],e.nodes[15],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[15],e.nodes[13],e.nodes[9],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[12],e.nodes[14],e.nodes[10],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[10],e.nodes[14],e.nodes[12],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[18],e.nodes[19],e.nodes[16],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[18],e.nodes[17],e.nodes[16],e.nodes[19]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[13],e.nodes[15],e.nodes[11],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[13],e.nodes[9],e.nodes[11],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[14],e.nodes[10],e.nodes[8],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[14],e.nodes[12],e.nodes[8],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[10],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[14],e.nodes[19],e.nodes[16],e.nodes[17],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[17],e.nodes[16],e.nodes[19],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[15],e.nodes[11],e.nodes[9],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[9],e.nodes[11],e.nodes[15],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[10],e.nodes[8],e.nodes[12],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[12],e.nodes[8],e.nodes[10],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
    template<class TE> static void unmake_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[16],e.nodes[19],e.nodes[18],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[15],e.nodes[13],e.nodes[9],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[8],e.nodes[10],e.nodes[14],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[12],e.nodes[8],e.nodes[10],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[11],e.nodes[15],e.nodes[13],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[10],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[14],e.nodes[19],e.nodes[16],e.nodes[17],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[19],e.nodes[18],e.nodes[17],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[14],e.nodes[12],e.nodes[8],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[11],e.nodes[9],e.nodes[13],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[15],e.nodes[11],e.nodes[9],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[10],e.nodes[14],e.nodes[12],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[18],e.nodes[19],e.nodes[16],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[18],e.nodes[17],e.nodes[16],e.nodes[19]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[13],e.nodes[15],e.nodes[11],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[10],e.nodes[8],e.nodes[12],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[14],e.nodes[10],e.nodes[8],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[9],e.nodes[13],e.nodes[15],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[9],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[13],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[17],e.nodes[18],e.nodes[19],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[17],e.nodes[16],e.nodes[19],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[12],e.nodes[14],e.nodes[10],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[9],e.nodes[11],e.nodes[15],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[13],e.nodes[9],e.nodes[11],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[8],e.nodes[12],e.nodes[14],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
};

}
#endif // LMT_HEXA_20
