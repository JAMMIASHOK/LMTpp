#ifndef LMT_HEXA_20
#define LMT_HEXA_20
namespace LMT {
inline const double *gauss_point_for_order(unsigned order, const Hexa_20 &elem) { /// order -> degre du polynome a integrer exactement
    static const unsigned offset[] = { 0, 5, 10, 43, 180, 317, 454, 591, 728, 865, }; // fonction de lordre du poly
    static const double values[] = {
        1.0,0.5,0.5,0.5,
        0.0,
        1.0,0.5,0.5,0.5,
        0.0,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
    };
    return values + offset[order];
}
template<class TNode> void permutation_if_jac_neg(const Hexa_20 &elem,TNode **nodes) {
    typedef typename TNode::T T;
    T reg0=0.25*nodes[1]->pos[2]; T reg1=0.25*nodes[0]->pos[2]; T reg2=0.25*nodes[1]->pos[1]; T reg3=0.25*nodes[0]->pos[1]; T reg4=reg1-reg0;
    T reg5=0.25*nodes[2]->pos[1]; T reg6=reg2+reg3; T reg7=reg3-reg2; T reg8=reg0+reg1; T reg9=0.25*nodes[2]->pos[2];
    reg7=reg7-reg5; T reg10=reg8+reg9; T reg11=0.25*nodes[3]->pos[2]; T reg12=reg5+reg6; T reg13=reg8-reg9;
    reg4=reg4-reg9; T reg14=0.25*nodes[0]->pos[0]; T reg15=0.25*nodes[1]->pos[0]; T reg16=reg6-reg5; T reg17=0.25*nodes[3]->pos[1];
    T reg18=0.25*nodes[4]->pos[2]; reg16=reg16-reg17; T reg19=reg10+reg11; T reg20=0.25*nodes[4]->pos[1]; reg4=reg11+reg4;
    T reg21=reg14-reg15; T reg22=0.25*nodes[2]->pos[0]; reg7=reg17+reg7; T reg23=reg15+reg14; T reg24=reg17+reg12;
    reg13=reg13-reg11; T reg25=reg23-reg22; reg7=reg20+reg7; T reg26=reg24-reg20; T reg27=0.25*nodes[5]->pos[1];
    reg16=reg16+reg20; reg13=reg18+reg13; reg4=reg18+reg4; T reg28=reg19-reg18; T reg29=0.25*nodes[5]->pos[2];
    reg21=reg21-reg22; T reg30=0.25*nodes[3]->pos[0]; T reg31=reg22+reg23; reg26=reg26-reg27; reg4=reg4-reg29;
    T reg32=0.25*nodes[4]->pos[0]; reg21=reg21+reg30; reg7=reg7-reg27; reg28=reg28-reg29; reg13=reg29+reg13;
    T reg33=0.25*nodes[6]->pos[2]; T reg34=0.25*nodes[6]->pos[1]; reg16=reg16+reg27; reg25=reg25-reg30; reg28=reg28-reg33;
    T reg35=0.25*nodes[7]->pos[2]; T reg36=reg30+reg31; reg25=reg32+reg25; reg16=reg16-reg34; T reg37=0.25*nodes[7]->pos[1];
    reg13=reg13-reg33; reg7=reg7-reg34; reg21=reg21+reg32; T reg38=0.25*nodes[5]->pos[0]; reg26=reg26-reg34;
    reg4=reg4-reg33; reg26=reg26-reg37; T reg39=0.5*nodes[9]->pos[1]; T reg40=reg36-reg32; T reg41=0.25*nodes[6]->pos[0];
    reg21=reg21-reg38; reg13=reg13-reg35; reg7=reg37+reg7; reg16=reg16-reg37; T reg42=0.5*nodes[8]->pos[1];
    reg4=reg35+reg4; reg28=reg28-reg35; T reg43=0.5*nodes[8]->pos[2]; reg25=reg38+reg25; T reg44=0.5*nodes[9]->pos[2];
    reg40=reg40-reg38; T reg45=0.5*nodes[11]->pos[1]; reg4=reg44+reg4; reg26=reg26-reg42; reg25=reg25-reg41;
    reg21=reg21-reg41; T reg46=0.25*nodes[7]->pos[0]; reg7=reg39+reg7; reg42=reg16-reg42; reg16=0.5*nodes[10]->pos[1];
    reg13=reg13-reg43; T reg47=0.5*nodes[11]->pos[2]; T reg48=0.5*nodes[10]->pos[2]; reg43=reg28-reg43; reg28=0.5*nodes[13]->pos[1];
    T reg49=0.5*nodes[12]->pos[2]; reg4=reg4-reg47; reg44=reg43-reg44; reg25=reg25-reg46; reg43=0.5*nodes[8]->pos[0];
    T reg50=0.5*nodes[9]->pos[0]; T reg51=0.5*nodes[12]->pos[1]; reg42=reg42+reg16; reg7=reg7-reg45; reg13=reg48+reg13;
    reg40=reg40-reg41; reg21=reg21+reg46; T reg52=0.5*nodes[13]->pos[2]; reg39=reg26-reg39; reg13=reg13-reg49;
    reg42=reg42-reg51; reg26=0.5*nodes[14]->pos[1]; reg7=reg28+reg7; reg40=reg40-reg46; T reg53=0.5*nodes[14]->pos[2];
    T reg54=0.5*nodes[15]->pos[1]; reg21=reg50+reg21; T reg55=0.5*nodes[10]->pos[0]; reg25=reg25-reg43; T reg56=0.5*nodes[11]->pos[0];
    reg4=reg52+reg4; T reg57=0.5*nodes[15]->pos[2]; reg16=reg39-reg16; reg48=reg44-reg48; reg43=reg40-reg43;
    reg7=reg7-reg54; reg4=reg4-reg57; reg39=0.5*nodes[16]->pos[2]; reg40=0.5*nodes[16]->pos[1]; reg42=reg42+reg26;
    reg25=reg25+reg55; reg44=0.5*nodes[12]->pos[0]; reg45=reg16-reg45; reg13=reg53+reg13; reg21=reg21-reg56;
    reg16=0.5*nodes[13]->pos[0]; reg47=reg48-reg47; reg48=0.5*nodes[17]->pos[2]; reg50=reg43-reg50; reg45=reg51+reg45;
    reg43=0.5*nodes[17]->pos[1]; reg42=reg42-reg40; reg51=0.5*nodes[15]->pos[0]; reg21=reg21+reg16; reg13=reg13-reg39;
    reg49=reg47+reg49; reg39=reg4-reg39; reg25=reg25-reg44; reg4=0.5*nodes[14]->pos[0]; reg40=reg7-reg40;
    reg7=0.5*nodes[18]->pos[2]; reg47=0.5*nodes[18]->pos[1]; reg42=reg42-reg43; reg40=reg43+reg40; reg52=reg49+reg52;
    reg55=reg50-reg55; reg13=reg13-reg48; reg25=reg25+reg4; reg28=reg45+reg28; reg43=0.5*nodes[16]->pos[0];
    reg21=reg21-reg51; reg39=reg48+reg39; reg53=reg52+reg53; reg45=0.5*nodes[19]->pos[1]; reg42=reg42+reg47;
    reg40=reg47+reg40; reg56=reg55-reg56; reg13=reg13+reg7; reg47=0.5*nodes[19]->pos[2]; reg28=reg26+reg28;
    reg26=0.5*nodes[17]->pos[0]; reg39=reg7+reg39; reg21=reg21-reg43; reg43=reg25-reg43; reg7=0.5*nodes[18]->pos[0];
    reg21=reg21+reg26; reg40=reg40-reg45; reg57=reg53+reg57; reg26=reg43-reg26; reg39=reg39-reg47;
    reg47=reg13+reg47; reg56=reg44+reg56; reg54=reg28+reg54; reg45=reg42+reg45; reg13=reg45*reg57;
    reg21=reg21+reg7; reg56=reg16+reg56; reg16=reg54*reg39; reg54=reg54*reg47; reg25=0.5*nodes[19]->pos[0];
    reg57=reg57*reg40; reg26=reg7+reg26; reg21=reg21-reg25; reg39=reg45*reg39; reg40=reg47*reg40;
    reg56=reg4+reg56; reg16=reg57-reg16; reg54=reg13-reg54; reg26=reg25+reg26; reg39=reg40-reg39;
    reg56=reg51+reg56; reg16=reg26*reg16; reg54=reg21*reg54; reg39=reg56*reg39; reg16=reg54-reg16;
    T det_jac=reg16+reg39;

    if ( det_jac < 0 ) {
        TNode *tmp[] = {nodes[0],nodes[3],nodes[2],nodes[1],nodes[4],nodes[7],nodes[6],nodes[5],nodes[11],nodes[10],nodes[9],nodes[8],nodes[15],nodes[14],nodes[13],nodes[12],nodes[16],nodes[19],nodes[18],nodes[17]};
        for(unsigned i=0;i<20;++i) nodes[i] = tmp[i];
    }
}
template<class PosNodes,class Pvec,class TVI> void get_var_inter_linear(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; T reg2=2*var_inter[2]; reg1=reg1-1;
    T reg3=1-reg0; T reg4=1+reg0; T reg5=reg0+reg1; T reg6=reg0-reg1; reg2=reg2-1;
    T reg7=0.125*reg3; T reg8=0.125*reg4; T reg9=1-reg1; T reg10=reg2+reg5; T reg11=reg7*reg9;
    T reg12=1-reg2; T reg13=1+reg1; T reg14=reg6-reg2; T reg15=0.25*reg3; T reg16=reg8*reg9;
    T reg17=0.25*reg4; T reg18=reg15*reg12; T reg19=reg5-reg2; reg14=reg14-2; reg8=reg13*reg8;
    T reg20=reg17*reg12; T reg21=reg11*reg12; T reg22=reg16*reg12; T reg23=2*reg11; T reg24=reg1-reg0;
    T reg25=2*reg16; T reg26=2+reg10; reg19=reg19-2; T reg27=reg24-reg2; reg7=reg13*reg7;
    T reg28=0.25*reg9; T reg29=reg20*reg14; T reg30=reg18*reg26; T reg31=2*reg22; T reg32=2*reg21;
    T reg33=reg14*reg25; T reg34=reg26*reg23; T reg35=2*reg8; T reg36=reg8*reg12; T reg37=2*reg36;
    T reg38=2*reg7; reg29=reg31+reg29; reg30=reg32-reg30; T reg39=reg20*reg19; T reg40=reg28*reg12;
    reg33=reg31+reg33; T reg41=0.25*reg13; reg34=reg32-reg34; reg27=reg27-2; reg5=reg2-reg5;
    T reg42=reg7*reg12; T reg43=1+reg2; T reg44=reg19*reg35; T reg45=reg30*pos_nodes[0][1]; T reg46=reg15*reg43;
    reg39=reg37+reg39; reg6=reg6+reg2; T reg47=2*reg42; reg5=reg5-2; T reg48=reg29*pos_nodes[1][1];
    reg11=reg43*reg11; T reg49=reg18*reg27; T reg50=reg41*reg12; T reg51=reg40*reg14; T reg52=reg40*reg26;
    T reg53=reg29*pos_nodes[1][0]; T reg54=reg27*reg38; T reg55=reg30*pos_nodes[0][0]; reg44=reg37+reg44; T reg56=pos_nodes[0][2]*reg34;
    T reg57=pos_nodes[1][2]*reg33; T reg58=pos_nodes[1][0]*reg33; T reg59=pos_nodes[0][0]*reg34; T reg60=reg30*pos_nodes[0][2]; T reg61=reg29*pos_nodes[1][2];
    T reg62=pos_nodes[1][1]*reg33; T reg63=pos_nodes[0][1]*reg34; reg6=reg6-2; reg56=reg57+reg56; reg57=pos_nodes[2][2]*reg44;
    T reg64=reg39*pos_nodes[2][1]; T reg65=pos_nodes[2][1]*reg44; reg45=reg48+reg45; reg55=reg53+reg55; reg49=reg47+reg49;
    reg54=reg47+reg54; reg63=reg62+reg63; reg48=2*reg11; reg53=reg50*reg19; reg52=reg32-reg52;
    reg51=reg31+reg51; reg31=reg46*reg5; reg32=reg17*reg43; reg62=pos_nodes[2][0]*reg44; T reg66=reg39*pos_nodes[2][0];
    T reg67=reg39*pos_nodes[2][2]; reg60=reg61+reg60; reg59=reg58+reg59; reg58=reg5*reg23; reg16=reg43*reg16;
    reg55=reg66-reg55; reg45=reg64-reg45; reg61=reg49*pos_nodes[3][1]; reg64=reg49*pos_nodes[3][0]; reg66=pos_nodes[3][0]*reg54;
    T reg68=reg6*reg25; reg58=reg48+reg58; reg62=reg59+reg62; reg59=reg51*pos_nodes[1][1]; T reg69=reg52*pos_nodes[0][1];
    reg65=reg63+reg65; reg63=pos_nodes[3][1]*reg54; reg31=reg48+reg31; T reg70=reg32*reg6; reg57=reg56+reg57;
    reg56=pos_nodes[3][2]*reg54; T reg71=2*reg16; T reg72=reg51*pos_nodes[1][0]; reg8=reg43*reg8; T reg73=reg52*pos_nodes[0][0];
    reg10=reg10-2; reg24=reg24+reg2; T reg74=reg28*reg43; T reg75=reg49*pos_nodes[3][2]; reg53=reg37+reg53;
    reg37=reg50*reg27; T reg76=pow(reg0,2); reg60=reg67-reg60; reg57=reg56+reg57; reg56=reg53*pos_nodes[2][1];
    reg69=reg59-reg69; reg59=reg53*pos_nodes[2][0]; reg67=reg31*pos_nodes[4][2]; reg60=reg75+reg60; reg75=reg51*pos_nodes[1][2];
    T reg77=reg52*pos_nodes[0][2]; T reg78=pos_nodes[4][2]*reg58; reg68=reg71+reg68; T reg79=reg10*reg35; reg62=reg66+reg62;
    reg66=pos_nodes[4][0]*reg58; reg73=reg72-reg73; reg72=reg31*pos_nodes[4][1]; reg45=reg61+reg45; reg76=1-reg76;
    reg47=reg37+reg47; reg37=pow(reg1,2); reg24=reg24-2; reg7=reg43*reg7; reg61=reg74*reg5;
    T reg80=pos_nodes[4][1]*reg58; T reg81=reg32*reg10; reg55=reg64+reg55; reg64=2*reg8; reg65=reg63+reg65;
    reg63=reg31*pos_nodes[4][0]; reg70=reg71+reg70; T reg82=reg74*reg6; T reg83=reg43*reg41; reg79=reg64+reg79;
    T reg84=reg24*reg38; reg61=reg48+reg61; reg63=reg55-reg63; reg48=reg46*reg24; reg55=reg70*pos_nodes[5][0];
    reg57=reg78-reg57; reg78=reg70*pos_nodes[5][2]; T reg85=pos_nodes[5][2]*reg68; reg67=reg60-reg67; reg60=2*reg7;
    reg21=reg26*reg21; reg26=0.25*reg76; reg72=reg45-reg72; reg37=1-reg37; reg45=reg70*pos_nodes[5][1];
    reg14=reg22*reg14; reg81=reg64+reg81; reg22=reg47*pos_nodes[3][1]; reg65=reg80-reg65; reg80=pos_nodes[5][1]*reg68;
    reg56=reg69+reg56; reg59=reg73+reg59; reg69=reg47*pos_nodes[3][0]; reg62=reg66-reg62; reg66=pos_nodes[5][0]*reg68;
    reg77=reg75-reg77; reg73=reg53*pos_nodes[2][2]; reg75=reg21*pos_nodes[0][1]; T reg86=reg47*pos_nodes[3][2]; reg78=reg67-reg78;
    reg67=reg14*pos_nodes[1][1]; T reg87=reg81*pos_nodes[6][2]; reg45=reg72-reg45; reg72=reg81*pos_nodes[6][1]; T reg88=reg61*pos_nodes[4][1];
    reg66=reg62+reg66; reg22=reg56-reg22; reg56=pos_nodes[6][0]*reg79; reg84=reg60+reg84; reg62=reg14*pos_nodes[1][0];
    reg55=reg63-reg55; reg63=reg81*pos_nodes[6][0]; reg80=reg65+reg80; reg65=pos_nodes[6][1]*reg79; T reg89=reg21*pos_nodes[0][0];
    T reg90=pos_nodes[6][2]*reg79; reg85=reg57+reg85; reg73=reg77+reg73; reg19=reg36*reg19; reg36=0.25*reg37;
    reg57=reg83*reg10; reg82=reg71+reg82; reg71=reg26*reg9; reg48=reg60+reg48; reg76=0.5*reg76;
    reg77=reg61*pos_nodes[4][0]; reg69=reg59-reg69; reg59=pos_nodes[7][2]*reg48; T reg91=reg14*pos_nodes[1][2]; T reg92=pos_nodes[0][2]*reg21;
    T reg93=pos_nodes[7][1]*reg48; reg72=reg45+reg72; reg45=reg82*pos_nodes[5][1]; reg88=reg22-reg88; reg87=reg78+reg87;
    reg22=reg76*reg12; reg78=reg4*reg1; reg77=reg69-reg77; reg69=reg82*pos_nodes[5][0]; T reg94=pos_nodes[7][0]*reg84;
    reg56=reg66+reg56; reg86=reg73-reg86; reg66=reg61*pos_nodes[4][2]; reg73=reg83*reg24; T reg95=2*reg71;
    reg42=reg27*reg42; reg27=reg4*reg36; reg57=reg64+reg57; reg65=reg80+reg65; reg64=pos_nodes[7][1]*reg84;
    reg80=pos_nodes[7][2]*reg84; reg90=reg85+reg90; reg63=reg55+reg63; reg55=pos_nodes[7][0]*reg48; reg75=reg67-reg75;
    reg89=reg62-reg89; reg62=reg19*pos_nodes[2][0]; reg67=reg19*pos_nodes[2][1]; reg85=reg42*pos_nodes[3][0]; T reg96=2*reg27;
    T reg97=reg82*pos_nodes[5][2]; reg66=reg86-reg66; reg86=reg42*pos_nodes[3][1]; reg62=reg89+reg62; reg67=reg75+reg67;
    reg64=reg65+reg64; reg65=pos_nodes[8][1]*reg95; reg94=reg56+reg94; reg45=reg88+reg45; reg56=reg19*pos_nodes[2][2];
    reg92=reg91-reg92; reg75=pos_nodes[8][0]*reg95; reg88=reg57*pos_nodes[6][1]; reg69=reg77+reg69; reg77=reg57*pos_nodes[6][0];
    reg89=reg78*reg12; reg91=reg22*pos_nodes[8][1]; reg59=reg87+reg59; reg87=reg22*pos_nodes[8][0]; reg55=reg63+reg55;
    reg63=reg0*reg9; reg73=reg60+reg73; reg5=reg11*reg5; reg93=reg72+reg93; reg80=reg90+reg80;
    reg11=pos_nodes[8][2]*reg95; reg26=reg13*reg26; reg60=reg22*pos_nodes[8][2]; reg6=reg16*reg6; reg56=reg92+reg56;
    reg16=reg5*pos_nodes[4][1]; reg36=reg36*reg3; reg37=0.5*reg37; reg72=reg89*pos_nodes[9][2]; reg60=reg59-reg60;
    reg59=reg42*pos_nodes[3][2]; reg62=reg85+reg62; reg85=reg5*pos_nodes[4][0]; reg67=reg86+reg67; reg86=reg89*pos_nodes[9][0];
    reg87=reg55-reg87; reg55=reg63*reg12; reg90=pos_nodes[9][1]*reg96; reg65=reg64-reg65; reg11=reg80-reg11;
    reg64=pos_nodes[9][2]*reg96; reg80=reg1*reg3; reg92=2*reg26; reg77=reg69+reg77; reg69=reg73*pos_nodes[7][0];
    T reg98=reg57*pos_nodes[6][2]; reg97=reg66+reg97; reg66=reg89*pos_nodes[9][1]; reg91=reg93-reg91; reg75=reg94-reg75;
    reg93=pos_nodes[9][0]*reg96; reg88=reg45+reg88; reg45=reg73*pos_nodes[7][1]; reg94=reg22*pos_nodes[10][2]; reg98=reg97+reg98;
    reg97=reg73*pos_nodes[7][2]; T reg99=pos_nodes[10][1]*reg92; reg90=reg65-reg90; reg65=reg22*pos_nodes[10][1]; reg66=reg91-reg66;
    reg72=reg60-reg72; reg60=reg5*pos_nodes[4][2]; reg64=reg11-reg64; reg11=pos_nodes[10][2]*reg92; reg45=reg88-reg45;
    reg88=reg80*reg12; reg91=2*reg36; T reg100=reg6*pos_nodes[5][1]; reg16=reg67+reg16; reg67=reg37*reg12;
    reg93=reg75-reg93; reg75=reg13*reg0; T reg101=pos_nodes[10][0]*reg92; reg10=reg8*reg10; reg69=reg77-reg69;
    reg85=reg62+reg85; reg8=reg6*pos_nodes[5][0]; reg62=reg22*pos_nodes[10][0]; reg86=reg87-reg86; reg77=reg55*pos_nodes[8][1];
    reg87=reg55*pos_nodes[8][0]; reg56=reg59+reg56; reg65=reg66+reg65; reg59=pos_nodes[11][1]*reg88; reg77=reg45-reg77;
    reg24=reg7*reg24; reg7=reg67*pos_nodes[9][1]; reg94=reg72+reg94; reg45=pos_nodes[11][2]*reg88; reg66=reg55*pos_nodes[8][2];
    reg97=reg98-reg97; reg72=reg75*reg12; reg98=pow(reg2,2); reg101=reg93-reg101; reg93=pos_nodes[11][0]*reg91;
    reg87=reg69-reg87; reg69=reg67*pos_nodes[9][0]; T reg102=pos_nodes[11][0]*reg88; reg62=reg86+reg62; reg86=reg76*reg43;
    reg11=reg64-reg11; reg64=reg10*pos_nodes[6][1]; reg100=reg16+reg100; reg8=reg85+reg8; reg16=reg10*pos_nodes[6][0];
    reg85=pos_nodes[11][2]*reg91; T reg103=pos_nodes[11][1]*reg91; T reg104=reg6*pos_nodes[5][2]; reg99=reg90-reg99; reg60=reg56+reg60;
    reg56=pos_nodes[12][2]*reg95; reg85=reg11-reg85; reg45=reg94-reg45; reg11=pos_nodes[12][2]*reg86; reg90=reg71*reg12;
    reg94=reg67*pos_nodes[9][2]; reg66=reg97-reg66; reg59=reg65-reg59; reg65=pos_nodes[12][1]*reg86; reg69=reg87+reg69;
    reg87=reg72*pos_nodes[10][0]; reg97=reg24*pos_nodes[7][1]; reg64=reg100+reg64; reg100=pos_nodes[12][1]*reg95; reg103=reg99-reg103;
    reg104=reg60+reg104; reg60=reg10*pos_nodes[6][2]; reg99=reg24*pos_nodes[7][0]; T reg105=reg72*pos_nodes[10][1]; T reg106=pos_nodes[12][0]*reg86;
    reg102=reg62-reg102; reg98=1-reg98; reg62=reg78*reg43; reg93=reg101-reg93; reg101=pos_nodes[12][0]*reg95;
    reg7=reg77+reg7; reg16=reg8+reg16; reg8=reg90*pos_nodes[8][1]; reg97=reg64+reg97; reg60=reg104+reg60;
    reg64=reg72*pos_nodes[10][2]; reg94=reg66+reg94; reg66=0.25*reg98; reg101=reg93+reg101; reg77=pos_nodes[13][0]*reg96;
    reg93=reg67*pos_nodes[11][0]; reg87=reg69-reg87; reg100=reg103+reg100; reg106=reg102-reg106; reg56=reg85+reg56;
    reg69=pos_nodes[13][0]*reg62; reg85=reg63*reg43; reg102=pos_nodes[13][2]*reg96; reg103=pos_nodes[13][1]*reg96; reg104=reg24*pos_nodes[7][2];
    T reg107=reg27*reg12; T reg108=reg90*pos_nodes[8][0]; reg99=reg16+reg99; reg16=pos_nodes[13][2]*reg62; reg11=reg45-reg11;
    reg45=reg67*pos_nodes[11][1]; reg105=reg7-reg105; reg65=reg59-reg65; reg7=pos_nodes[13][1]*reg62; reg59=pos_nodes[14][1]*reg92;
    reg93=reg87-reg93; reg87=reg85*pos_nodes[12][0]; reg108=reg99+reg108; reg99=pos_nodes[14][0]*reg92; T reg109=reg107*pos_nodes[9][1];
    reg8=reg97+reg8; reg77=reg101+reg77; reg97=reg66*reg3; reg64=reg94-reg64; reg94=reg67*pos_nodes[11][2];
    reg3=reg2*reg3; reg101=pos_nodes[14][0]*reg86; reg69=reg106-reg69; reg16=reg11-reg16; reg11=pos_nodes[14][2]*reg86;
    reg106=reg37*reg43; T reg110=reg43*reg80; reg102=reg56+reg102; reg56=pos_nodes[14][2]*reg92; reg7=reg65-reg7;
    reg65=pos_nodes[14][1]*reg86; T reg111=reg107*pos_nodes[9][0]; reg45=reg105-reg45; reg105=reg90*pos_nodes[8][2]; reg104=reg60+reg104;
    reg60=reg26*reg12; T reg112=reg85*pos_nodes[12][1]; reg103=reg100+reg103; reg112=reg45-reg112; reg45=reg106*pos_nodes[13][1];
    reg11=reg16+reg11; reg16=reg60*pos_nodes[10][1]; reg109=reg8+reg109; reg101=reg69+reg101; reg8=pos_nodes[15][0]*reg110;
    reg69=pos_nodes[15][0]*reg91; reg99=reg77+reg99; reg77=reg106*pos_nodes[13][0]; reg87=reg93-reg87; reg65=reg7+reg65;
    reg7=pos_nodes[15][1]*reg110; reg93=reg3*reg9; reg100=reg85*pos_nodes[12][2]; reg94=reg64-reg94; reg66=reg4*reg66;
    reg4=reg4*reg2; reg59=reg103+reg59; reg64=pos_nodes[15][1]*reg91; reg103=pos_nodes[15][2]*reg91; reg56=reg102+reg56;
    reg105=reg104+reg105; reg102=reg107*pos_nodes[9][2]; reg104=2*reg97; reg111=reg108+reg111; reg108=reg60*pos_nodes[10][0];
    reg12=reg36*reg12; T reg113=pos_nodes[15][2]*reg110; T reg114=reg75*reg43; T reg115=reg4*reg9; T reg116=reg60*pos_nodes[10][2];
    reg113=reg11-reg113; reg102=reg105+reg102; reg11=pos_nodes[16][2]*reg93; reg103=reg56+reg103; reg100=reg94-reg100;
    reg56=reg106*pos_nodes[13][2]; reg94=pos_nodes[16][2]*reg104; reg105=pos_nodes[16][1]*reg104; reg7=reg65-reg7; reg98=0.5*reg98;
    reg45=reg112+reg45; reg65=reg114*pos_nodes[14][1]; reg112=2*reg66; T reg117=pos_nodes[16][0]*reg104; reg8=reg101-reg8;
    reg16=reg109+reg16; reg101=reg12*pos_nodes[11][1]; reg109=pos_nodes[16][0]*reg93; reg71=reg43*reg71; T reg118=reg12*pos_nodes[11][0];
    reg69=reg99+reg69; reg108=reg111+reg108; reg77=reg87+reg77; reg87=reg114*pos_nodes[14][0]; reg99=pos_nodes[16][1]*reg93;
    reg64=reg59+reg64; reg59=pos_nodes[17][0]*reg112; reg117=reg8-reg117; reg87=reg77-reg87; reg8=reg106*pos_nodes[15][0];
    reg109=reg69-reg109; reg69=reg71*pos_nodes[12][1]; reg101=reg16+reg101; reg16=reg71*pos_nodes[12][0]; reg94=reg113-reg94;
    reg77=pos_nodes[17][2]*reg112; reg11=reg103-reg11; reg103=reg98*reg9; reg118=reg108+reg118; reg108=pos_nodes[17][0]*reg115;
    reg65=reg45-reg65; reg45=reg106*pos_nodes[15][1]; reg111=pos_nodes[17][1]*reg115; reg99=reg64-reg99; reg116=reg102+reg116;
    reg64=reg13*reg4; reg102=reg12*pos_nodes[11][2]; reg27=reg43*reg27; reg56=reg100+reg56; reg100=reg114*pos_nodes[14][2];
    reg113=pos_nodes[17][2]*reg115; reg105=reg7-reg105; reg7=pos_nodes[17][1]*reg112; T reg119=reg27*pos_nodes[13][0]; reg16=reg118+reg16;
    reg118=reg106*pos_nodes[15][2]; reg77=reg94-reg77; reg94=pos_nodes[18][2]*reg112; reg100=reg56-reg100; reg26=reg43*reg26;
    reg7=reg105-reg7; reg108=reg109-reg108; reg56=reg71*pos_nodes[12][2]; reg45=reg65-reg45; reg65=reg103*pos_nodes[16][1];
    reg105=pos_nodes[18][0]*reg64; reg109=reg13*reg3; reg111=reg99-reg111; reg99=pos_nodes[18][0]*reg112; reg59=reg117-reg59;
    reg117=pos_nodes[18][1]*reg112; T reg120=pos_nodes[18][1]*reg64; T reg121=reg103*pos_nodes[16][0]; reg113=reg11-reg113; reg8=reg87-reg8;
    reg11=reg27*pos_nodes[13][1]; reg69=reg101+reg69; reg87=pos_nodes[18][2]*reg64; reg102=reg116+reg102; reg36=reg43*reg36;
    reg120=reg111-reg120; reg43=pos_nodes[19][1]*reg109; reg101=pos_nodes[19][1]*reg104; reg111=reg27*pos_nodes[13][2]; reg116=reg103*pos_nodes[17][1];
    T reg122=pos_nodes[19][0]*reg109; T reg123=reg98*reg13; T reg124=pos_nodes[19][0]*reg104; reg99=reg59+reg99; reg117=reg7+reg117;
    reg119=reg16+reg119; reg7=reg26*pos_nodes[14][1]; reg11=reg69+reg11; reg87=reg113-reg87; reg16=pos_nodes[19][2]*reg109;
    reg59=reg103*pos_nodes[16][2]; reg118=reg100-reg118; reg94=reg77+reg94; reg69=pos_nodes[19][2]*reg104; reg77=reg26*pos_nodes[14][0];
    reg56=reg102+reg56; reg121=reg8-reg121; reg8=reg103*pos_nodes[17][0]; reg65=reg45-reg65; reg105=reg108-reg105;
    reg16=reg87-reg16; reg45=reg26*pos_nodes[14][2]; reg111=reg56+reg111; reg124=reg99+reg124; reg122=reg105-reg122;
    reg77=reg119+reg77; reg56=reg36*pos_nodes[15][0]; reg87=reg97*reg9; reg116=reg65+reg116; reg65=reg123*pos_nodes[18][1];
    reg101=reg117+reg101; reg99=reg123*pos_nodes[18][0]; reg8=reg121+reg8; reg43=reg120-reg43; reg7=reg11+reg7;
    reg11=reg36*pos_nodes[15][1]; reg69=reg94+reg69; reg59=reg118-reg59; reg94=reg103*pos_nodes[17][2]; reg100=reg36*pos_nodes[15][2];
    reg45=reg111+reg45; reg9=reg9*reg66; reg102=reg123*pos_nodes[18][2]; reg56=reg77+reg56; reg77=pos_nodes[16][0]*reg87;
    reg105=reg122*reg69; reg108=reg124*reg16; reg94=reg59+reg94; reg65=reg116+reg65; reg59=reg123*pos_nodes[19][1];
    reg111=reg101*reg16; reg113=reg43*reg69; reg116=reg123*pos_nodes[19][0]; reg99=reg8+reg99; reg8=pos_nodes[16][1]*reg87;
    reg11=reg7+reg11; reg7=reg124*reg43; reg105=reg108-reg105; reg117=reg122*reg101; reg113=reg111-reg113;
    reg118=pos_nodes[16][2]*reg87; reg100=reg45+reg100; reg66=reg13*reg66; reg45=reg123*pos_nodes[19][2]; reg102=reg94+reg102;
    reg77=reg56+reg77; reg56=pos_nodes[17][0]*reg9; reg59=reg65-reg59; reg65=pos_nodes[17][1]*reg9; reg116=reg99-reg116;
    reg8=reg11+reg8; reg97=reg13*reg97; reg117=reg7-reg117; reg11=reg59*reg105; reg13=pos_nodes[17][2]*reg9;
    reg118=reg100+reg118; reg45=reg102-reg45; reg94=pos_nodes[18][1]*reg66; reg65=reg8+reg65; reg8=reg116*reg113;
    reg56=reg77+reg56; reg77=pos_nodes[18][0]*reg66; reg99=reg124*reg45; reg100=reg116*reg69; reg102=reg122*reg45;
    reg119=pos_nodes[19][1]*reg97; reg120=reg116*reg16; reg94=reg65+reg94; reg65=reg101*reg45; reg121=reg59*reg69;
    T reg125=reg43*reg45; T reg126=reg59*reg16; T reg127=pos_nodes[19][0]*reg97; reg77=reg56+reg77; reg13=reg118+reg13;
    reg56=reg45*reg117; reg118=pos_nodes[18][2]*reg66; reg8=reg11-reg8; reg127=reg77+reg127; reg119=reg94+reg119;
    reg11=reg124*reg59; reg77=reg116*reg101; reg99=reg100-reg99; reg102=reg120-reg102; reg65=reg121-reg65;
    reg125=reg126-reg125; reg56=reg8-reg56; reg118=reg13+reg118; reg8=pos_nodes[19][2]*reg97; reg13=reg116*reg43;
    reg94=reg122*reg59; reg11=reg77-reg11; reg8=reg118+reg8; reg113=reg113/reg56; reg99=reg99/reg56;
    reg127=pos[0]-reg127; reg125=reg125/reg56; reg65=reg65/reg56; reg94=reg13-reg94; reg105=reg105/reg56;
    reg102=reg102/reg56; reg119=pos[1]-reg119; reg8=pos[2]-reg8; reg117=reg117/reg56; reg94=reg94/reg56;
    reg56=reg11/reg56; reg113=reg127*reg113; reg105=reg119*reg105; reg125=reg127*reg125; reg102=reg119*reg102;
    reg65=reg127*reg65; reg99=reg119*reg99; reg102=reg125-reg102; reg94=reg8*reg94; reg113=reg105-reg113;
    reg56=reg8*reg56; reg117=reg8*reg117; reg65=reg99-reg65; var_inter[1]=reg94+reg102; var_inter[0]=reg113-reg117;
    var_inter[2]=reg65-reg56;

}
template<class PosNodes,class Pvec,class TVI> void get_var_inter(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; reg0=reg0-1; T reg1=2*var_inter[1]; T reg2=1-reg0; reg1=reg1-1;
    T reg3=1+reg0; T reg4=2*var_inter[2]; T reg5=1-reg1; T reg6=0.125*reg2; reg4=reg4-1;
    T reg7=reg1+reg0; T reg8=0.125*reg3; T reg9=reg0-reg1; T reg10=1-reg4; T reg11=reg6*reg5;
    T reg12=reg4+reg7; T reg13=reg9-reg4; T reg14=0.25*reg2; T reg15=0.25*reg3; T reg16=reg8*reg5;
    T reg17=1+reg1; T reg18=2*reg11; T reg19=2*reg16; T reg20=reg11*reg10; T reg21=reg7-reg4;
    T reg22=2+reg12; reg8=reg17*reg8; reg13=reg13-2; T reg23=reg16*reg10; T reg24=reg10*reg15;
    T reg25=reg1-reg0; T reg26=reg10*reg14; T reg27=reg24*reg13; T reg28=reg22*reg18; reg21=reg21-2;
    T reg29=reg10*reg8; T reg30=2*reg23; T reg31=2*reg20; reg6=reg17*reg6; T reg32=reg25-reg4;
    T reg33=reg13*reg19; T reg34=reg22*reg26; T reg35=0.25*reg5; T reg36=2*reg8; T reg37=reg21*reg24;
    reg34=reg31-reg34; T reg38=0.25*reg17; T reg39=1+reg4; reg7=reg4-reg7; T reg40=2*reg6;
    T reg41=reg10*reg35; T reg42=2*reg29; T reg43=reg21*reg36; reg27=reg30+reg27; reg28=reg31-reg28;
    reg33=reg30+reg33; T reg44=reg6*reg10; reg32=reg32-2; reg43=reg42+reg43; T reg45=pos_nodes[0][2]*reg34;
    T reg46=reg32*reg26; T reg47=pos_nodes[1][2]*reg27; T reg48=pos_nodes[1][1]*reg33; T reg49=pos_nodes[0][1]*reg28; T reg50=pos_nodes[0][0]*reg34;
    T reg51=pos_nodes[1][0]*reg27; reg9=reg9+reg4; reg7=reg7-2; T reg52=2*reg44; reg11=reg11*reg39;
    T reg53=pos_nodes[0][0]*reg28; T reg54=reg22*reg41; T reg55=reg10*reg38; T reg56=pos_nodes[0][2]*reg28; T reg57=pos_nodes[0][1]*reg34;
    T reg58=pos_nodes[1][1]*reg27; T reg59=reg32*reg40; T reg60=reg41*reg13; T reg61=reg14*reg39; reg37=reg42+reg37;
    T reg62=pos_nodes[1][0]*reg33; T reg63=pos_nodes[1][2]*reg33; reg60=reg30+reg60; reg54=reg31-reg54; reg9=reg9-2;
    reg30=pos_nodes[2][2]*reg43; reg16=reg16*reg39; reg31=pos_nodes[2][2]*reg37; reg46=reg52+reg46; T reg64=reg21*reg55;
    reg45=reg47+reg45; reg47=2*reg11; reg53=reg62+reg53; reg62=pos_nodes[2][0]*reg43; reg59=reg52+reg59;
    T reg65=pos_nodes[2][1]*reg37; reg57=reg58+reg57; reg58=reg15*reg39; T reg66=pos_nodes[2][1]*reg43; T reg67=reg7*reg18;
    T reg68=reg61*reg7; reg50=reg51+reg50; reg51=pos_nodes[2][0]*reg37; reg49=reg48+reg49; reg56=reg63+reg56;
    reg48=reg9*reg58; reg68=reg47+reg68; reg63=pos_nodes[3][2]*reg59; reg56=reg30+reg56; reg30=pos_nodes[0][0]*reg54;
    T reg69=pos_nodes[1][0]*reg60; T reg70=pos_nodes[3][2]*reg46; reg45=reg31-reg45; reg31=pos_nodes[3][1]*reg59; reg49=reg66+reg49;
    reg25=reg25+reg4; reg50=reg51-reg50; reg51=pos_nodes[3][0]*reg46; reg66=reg9*reg19; reg67=reg47+reg67;
    T reg71=pos_nodes[3][1]*reg46; reg57=reg65-reg57; reg65=pos_nodes[0][1]*reg54; T reg72=pos_nodes[1][1]*reg60; T reg73=pos_nodes[3][0]*reg59;
    reg53=reg62+reg53; reg62=pow(reg0,2); T reg74=reg35*reg39; T reg75=2*reg16; reg64=reg42+reg64;
    reg42=reg32*reg55; reg8=reg8*reg39; reg12=reg12-2; T reg76=pos_nodes[4][2]*reg68; T reg77=pos_nodes[4][0]*reg68;
    reg51=reg50+reg51; reg50=pos_nodes[4][2]*reg67; reg63=reg56+reg63; reg25=reg25-2; reg6=reg6*reg39;
    reg56=pow(reg1,2); T reg78=reg12*reg58; reg48=reg75+reg48; T reg79=reg74*reg7; T reg80=2*reg8;
    reg42=reg52+reg42; reg65=reg72-reg65; reg52=pos_nodes[2][1]*reg64; reg71=reg57+reg71; reg57=pos_nodes[4][1]*reg68;
    reg72=pos_nodes[4][1]*reg67; reg31=reg49+reg31; reg73=reg53+reg73; reg62=1-reg62; reg49=pos_nodes[4][0]*reg67;
    reg53=reg12*reg36; T reg81=pos_nodes[1][2]*reg60; T reg82=pos_nodes[0][2]*reg54; reg66=reg75+reg66; reg70=reg45+reg70;
    reg45=pos_nodes[2][0]*reg64; reg30=reg69-reg30; reg76=reg70-reg76; reg78=reg80+reg78; reg31=reg72-reg31;
    reg69=reg25*reg40; reg70=2*reg6; reg13=reg23*reg13; reg23=reg38*reg39; reg82=reg81-reg82;
    reg22=reg20*reg22; reg73=reg49-reg73; reg20=0.25*reg62; reg49=pos_nodes[2][2]*reg64; reg53=reg80+reg53;
    reg56=1-reg56; reg72=pos_nodes[5][0]*reg66; reg77=reg51-reg77; reg51=pos_nodes[5][0]*reg48; reg81=pos_nodes[3][1]*reg42;
    reg65=reg52+reg65; reg52=reg61*reg25; reg30=reg45+reg30; reg45=pos_nodes[3][0]*reg42; reg57=reg71-reg57;
    reg71=pos_nodes[5][1]*reg48; reg63=reg50-reg63; reg50=pos_nodes[5][2]*reg66; T reg83=pos_nodes[5][1]*reg66; reg79=reg47+reg79;
    reg47=pos_nodes[5][2]*reg48; T reg84=reg9*reg74; reg82=reg49+reg82; reg49=pos_nodes[3][2]*reg42; reg69=reg70+reg69;
    T reg85=reg78*pos_nodes[6][0]; reg51=reg77-reg51; reg77=reg78*pos_nodes[6][2]; reg47=reg76-reg47; reg76=pos_nodes[4][1]*reg79;
    reg81=reg65-reg81; reg45=reg30-reg45; reg30=pos_nodes[4][0]*reg79; reg71=reg57-reg71; reg57=reg78*pos_nodes[6][1];
    reg65=pos_nodes[0][0]*reg22; T reg86=pos_nodes[1][0]*reg13; reg31=reg83+reg31; reg83=reg53*pos_nodes[6][1]; T reg87=pos_nodes[1][1]*reg13;
    T reg88=pos_nodes[0][1]*reg22; T reg89=reg53*pos_nodes[6][0]; reg73=reg72+reg73; reg72=reg20*reg5; reg21=reg29*reg21;
    reg29=reg53*pos_nodes[6][2]; reg52=reg70+reg52; reg84=reg75+reg84; reg63=reg50+reg63; reg62=0.5*reg62;
    reg50=0.25*reg56; reg75=reg12*reg23; T reg90=pos_nodes[7][1]*reg69; reg29=reg63+reg29; reg63=pos_nodes[5][1]*reg84;
    T reg91=pos_nodes[7][1]*reg52; reg32=reg44*reg32; reg44=pos_nodes[2][0]*reg21; T reg92=pos_nodes[7][2]*reg52; T reg93=2*reg72;
    reg57=reg71+reg57; reg75=reg80+reg75; reg49=reg82-reg49; reg71=pos_nodes[4][2]*reg79; reg30=reg45-reg30;
    reg65=reg86-reg65; reg45=reg22*pos_nodes[0][2]; reg80=reg69*pos_nodes[7][0]; reg82=pos_nodes[2][1]*reg21; reg86=reg23*reg25;
    reg88=reg87-reg88; reg85=reg51+reg85; reg83=reg31+reg83; reg76=reg81-reg76; reg31=pos_nodes[7][2]*reg69;
    reg51=pos_nodes[1][2]*reg13; reg81=reg52*pos_nodes[7][0]; reg77=reg47+reg77; reg47=reg3*reg50; reg87=reg10*reg62;
    T reg94=pos_nodes[5][0]*reg84; reg89=reg73+reg89; reg73=reg1*reg3; reg89=reg80+reg89; reg80=reg93*pos_nodes[8][0];
    reg83=reg90+reg83; reg20=reg17*reg20; reg86=reg70+reg86; reg70=reg93*pos_nodes[8][1]; reg65=reg44+reg65;
    reg88=reg82+reg88; reg44=reg32*pos_nodes[3][1]; reg82=reg32*pos_nodes[3][0]; reg90=pos_nodes[5][2]*reg84; T reg95=reg5*reg0;
    T reg96=reg75*pos_nodes[6][0]; T reg97=reg75*pos_nodes[6][1]; reg76=reg63+reg76; reg63=reg10*reg73; T reg98=pos_nodes[2][2]*reg21;
    T reg99=reg87*pos_nodes[8][0]; reg85=reg81+reg85; reg81=reg87*pos_nodes[8][2]; reg77=reg92+reg77; reg29=reg31+reg29;
    reg7=reg11*reg7; reg11=2*reg47; reg31=reg93*pos_nodes[8][2]; reg30=reg94+reg30; reg45=reg51-reg45;
    reg71=reg49-reg71; reg57=reg91+reg57; reg49=reg87*pos_nodes[8][1]; reg51=pos_nodes[7][1]*reg86; reg97=reg76+reg97;
    reg70=reg83-reg70; reg76=reg11*pos_nodes[9][1]; reg83=reg1*reg2; reg96=reg30+reg96; reg9=reg16*reg9;
    reg16=reg7*pos_nodes[4][0]; reg30=reg10*reg95; reg45=reg98+reg45; reg82=reg65+reg82; reg49=reg57-reg49;
    reg57=reg32*pos_nodes[3][2]; reg65=reg63*pos_nodes[9][1]; reg44=reg88+reg44; reg50=reg2*reg50; reg88=reg75*pos_nodes[6][2];
    reg71=reg90+reg71; reg90=reg86*pos_nodes[7][0]; reg81=reg77-reg81; reg56=0.5*reg56; reg77=reg63*pos_nodes[9][2];
    reg80=reg89-reg80; reg31=reg29-reg31; reg29=reg11*pos_nodes[9][0]; reg89=reg11*pos_nodes[9][2]; reg91=2*reg20;
    reg92=reg7*pos_nodes[4][1]; reg94=reg63*pos_nodes[9][0]; reg99=reg85-reg99; reg89=reg31-reg89; reg88=reg71+reg88;
    reg31=pos_nodes[7][2]*reg86; reg71=reg17*reg0; reg85=reg7*pos_nodes[4][2]; reg77=reg81-reg77; reg81=reg87*pos_nodes[10][2];
    reg98=reg87*pos_nodes[10][0]; reg94=reg99-reg94; reg12=reg8*reg12; reg51=reg97-reg51; reg8=reg30*pos_nodes[8][1];
    reg97=reg9*pos_nodes[5][1]; reg99=reg91*pos_nodes[10][1]; reg76=reg70-reg76; reg70=reg91*pos_nodes[10][0]; reg29=reg80-reg29;
    reg80=reg10*reg83; T reg100=reg10*reg56; reg90=reg96-reg90; reg96=reg9*pos_nodes[5][0]; T reg101=reg30*pos_nodes[8][0];
    reg65=reg49-reg65; reg49=reg87*pos_nodes[10][1]; T reg102=reg91*pos_nodes[10][2]; T reg103=2*reg50; reg57=reg45+reg57;
    reg82=reg16+reg82; reg44=reg92+reg44; reg16=reg103*pos_nodes[11][1]; reg45=pow(reg4,2); reg99=reg76-reg99;
    reg57=reg85+reg57; reg49=reg65+reg49; reg65=reg9*pos_nodes[5][2]; reg76=reg80*pos_nodes[11][1]; reg85=reg80*pos_nodes[11][2];
    reg81=reg77+reg81; reg31=reg88-reg31; reg102=reg89-reg102; reg77=reg103*pos_nodes[11][2]; reg88=reg30*pos_nodes[8][2];
    reg8=reg51-reg8; reg51=reg12*pos_nodes[6][1]; reg44=reg97+reg44; reg89=reg100*pos_nodes[9][0]; reg101=reg90-reg101;
    reg90=reg62*reg39; reg92=reg10*reg71; reg25=reg6*reg25; reg98=reg94+reg98; reg6=reg80*pos_nodes[11][0];
    reg70=reg29-reg70; reg29=reg103*pos_nodes[11][0]; reg82=reg96+reg82; reg94=reg12*pos_nodes[6][0]; reg96=reg100*pos_nodes[9][1];
    reg97=reg92*pos_nodes[10][1]; T reg104=reg73*reg39; reg76=reg49-reg76; reg49=reg90*pos_nodes[12][1]; reg77=reg102-reg77;
    reg102=reg72*reg10; reg45=1-reg45; T reg105=reg93*pos_nodes[12][1]; reg94=reg82+reg94; reg82=reg25*pos_nodes[7][0];
    T reg106=reg93*pos_nodes[12][2]; T reg107=reg90*pos_nodes[12][2]; reg85=reg81-reg85; reg6=reg98-reg6; reg81=reg90*pos_nodes[12][0];
    reg16=reg99-reg16; reg98=pos_nodes[7][1]*reg25; reg29=reg70-reg29; reg88=reg31-reg88; reg31=reg93*pos_nodes[12][0];
    reg51=reg44+reg51; reg44=reg100*pos_nodes[9][2]; reg57=reg65+reg57; reg65=reg12*pos_nodes[6][2]; reg70=reg92*pos_nodes[10][0];
    reg101=reg89+reg101; reg8=reg96+reg8; reg94=reg82+reg94; reg82=0.25*reg45; reg89=reg47*reg10;
    reg96=reg104*pos_nodes[13][2]; reg107=reg85-reg107; reg85=reg100*pos_nodes[11][0]; reg70=reg101-reg70; reg81=reg6-reg81;
    reg16=reg105+reg16; reg6=reg11*pos_nodes[13][1]; reg99=reg104*pos_nodes[13][0]; reg101=reg92*pos_nodes[10][2]; reg88=reg44+reg88;
    reg44=reg11*pos_nodes[13][0]; reg29=reg31+reg29; reg51=reg98+reg51; reg31=reg102*pos_nodes[8][1]; reg65=reg57+reg65;
    reg57=reg11*pos_nodes[13][2]; reg49=reg76-reg49; reg76=reg104*pos_nodes[13][1]; reg77=reg106+reg77; reg98=reg102*pos_nodes[8][0];
    reg105=reg95*reg39; reg106=reg100*pos_nodes[11][1]; T reg108=pos_nodes[7][2]*reg25; reg97=reg8-reg97; reg8=reg90*pos_nodes[14][1];
    reg6=reg16+reg6; reg16=reg91*pos_nodes[14][1]; reg76=reg49-reg76; reg99=reg81-reg99; reg49=reg90*pos_nodes[14][0];
    reg98=reg94+reg98; reg81=reg4*reg2; reg94=reg100*pos_nodes[11][2]; reg101=reg88-reg101; reg88=reg89*pos_nodes[9][1];
    T reg109=reg91*pos_nodes[14][0]; reg44=reg29+reg44; reg29=reg56*reg39; reg2=reg82*reg2; T reg110=reg105*pos_nodes[12][0];
    T reg111=reg20*reg10; T reg112=reg89*pos_nodes[9][0]; T reg113=reg83*reg39; reg106=reg97-reg106; reg97=reg105*pos_nodes[12][1];
    reg85=reg70-reg85; reg70=pos_nodes[14][2]*reg90; reg96=reg107-reg96; reg31=reg51+reg31; reg51=reg102*pos_nodes[8][2];
    reg65=reg108+reg65; reg57=reg77+reg57; reg77=pos_nodes[14][2]*reg91; reg107=pos_nodes[15][2]*reg103; reg108=reg89*pos_nodes[9][2];
    T reg114=reg3*reg4; T reg115=2*reg2; T reg116=reg5*reg81; reg77=reg57+reg77; reg57=reg71*reg39;
    reg94=reg101-reg94; reg101=reg105*pos_nodes[12][2]; reg3=reg82*reg3; reg82=pos_nodes[15][0]*reg113; reg49=reg99+reg49;
    reg10=reg10*reg50; reg70=reg96+reg70; reg96=pos_nodes[15][2]*reg113; reg51=reg65+reg51; reg110=reg85-reg110;
    reg65=reg29*pos_nodes[13][0]; reg98=reg112+reg98; reg85=reg111*pos_nodes[10][0]; reg8=reg76+reg8; reg31=reg88+reg31;
    reg76=reg111*pos_nodes[10][1]; reg88=pos_nodes[15][1]*reg113; reg97=reg106-reg97; reg99=pos_nodes[15][0]*reg103; reg109=reg44+reg109;
    reg44=reg29*pos_nodes[13][1]; reg106=pos_nodes[15][1]*reg103; reg16=reg6+reg16; reg88=reg8-reg88; reg6=pos_nodes[16][1]*reg115;
    reg99=reg109+reg99; reg45=0.5*reg45; reg8=2*reg3; reg101=reg94-reg101; reg94=reg29*pos_nodes[13][2];
    reg109=reg57*pos_nodes[14][1]; reg44=reg97+reg44; reg97=pos_nodes[16][0]*reg116; reg112=pos_nodes[16][2]*reg115; reg96=reg70-reg96;
    reg65=reg110+reg65; reg70=reg57*pos_nodes[14][0]; reg110=pos_nodes[16][0]*reg115; reg82=reg49-reg82; reg49=pos_nodes[16][1]*reg116;
    T reg117=reg111*pos_nodes[10][2]; reg51=reg108+reg51; reg106=reg16+reg106; reg16=reg10*pos_nodes[11][0]; reg85=reg98+reg85;
    reg98=pos_nodes[16][2]*reg116; reg108=reg10*pos_nodes[11][1]; reg107=reg77+reg107; reg76=reg31+reg76; reg31=reg5*reg114;
    reg72=reg72*reg39; reg49=reg106-reg49; reg97=reg99-reg97; reg77=pos_nodes[17][0]*reg31; reg110=reg82-reg110;
    reg82=pos_nodes[17][0]*reg8; reg112=reg96-reg112; reg96=pos_nodes[17][2]*reg8; reg99=reg72*pos_nodes[12][0]; reg106=reg5*reg45;
    T reg118=pos_nodes[17][1]*reg8; reg6=reg88-reg6; reg98=reg107-reg98; reg88=pos_nodes[17][2]*reg31; reg16=reg85+reg16;
    reg117=reg51+reg117; reg51=reg10*pos_nodes[11][2]; reg85=pos_nodes[15][0]*reg29; reg70=reg65-reg70; reg65=pos_nodes[15][1]*reg29;
    reg109=reg44-reg109; reg44=pos_nodes[14][2]*reg57; reg107=pos_nodes[17][1]*reg31; reg94=reg101+reg94; reg101=reg17*reg114;
    reg47=reg47*reg39; reg108=reg76+reg108; reg76=reg72*pos_nodes[12][1]; reg118=reg6-reg118; reg20=reg20*reg39;
    reg6=pos_nodes[18][1]*reg8; T reg119=pos_nodes[18][1]*reg101; reg44=reg94-reg44; reg94=reg17*reg81; reg88=reg98-reg88;
    reg98=pos_nodes[18][2]*reg101; T reg120=reg72*pos_nodes[12][2]; reg16=reg99+reg16; reg99=reg47*pos_nodes[13][0]; reg51=reg117+reg51;
    reg117=pos_nodes[16][0]*reg106; reg85=reg70-reg85; reg70=pos_nodes[16][1]*reg106; reg65=reg109-reg65; reg109=reg47*pos_nodes[13][1];
    reg108=reg76+reg108; reg82=reg110-reg82; reg76=pos_nodes[18][0]*reg8; reg110=pos_nodes[18][0]*reg101; reg77=reg97-reg77;
    reg97=pos_nodes[18][2]*reg8; reg96=reg112-reg96; reg107=reg49-reg107; reg49=pos_nodes[15][2]*reg29; reg112=pos_nodes[19][0]*reg94;
    reg110=reg77-reg110; reg77=reg17*reg45; reg109=reg108+reg109; reg98=reg88-reg98; reg88=pos_nodes[19][2]*reg94;
    reg108=reg20*pos_nodes[14][1]; T reg121=pos_nodes[19][0]*reg115; reg117=reg85-reg117; reg99=reg16+reg99; reg16=reg20*pos_nodes[14][0];
    reg85=pos_nodes[17][0]*reg106; T reg122=reg47*pos_nodes[13][2]; reg51=reg120+reg51; reg120=pos_nodes[19][2]*reg115; reg97=reg96+reg97;
    reg76=reg82+reg76; reg70=reg65-reg70; reg65=pos_nodes[19][1]*reg115; reg6=reg118+reg6; reg119=reg107-reg119;
    reg49=reg44-reg49; reg44=pos_nodes[19][1]*reg94; reg50=reg39*reg50; reg39=pos_nodes[16][2]*reg106; reg82=pos_nodes[17][1]*reg106;
    reg120=reg97+reg120; reg96=reg2*reg5; reg122=reg51+reg122; reg51=pos_nodes[14][2]*reg20; reg97=pos_nodes[15][0]*reg50;
    reg16=reg99+reg16; reg85=reg117+reg85; reg99=pos_nodes[18][0]*reg77; reg112=reg110-reg112; reg65=reg6+reg65;
    reg82=reg70+reg82; reg6=pos_nodes[18][1]*reg77; reg70=pos_nodes[17][2]*reg106; reg88=reg98-reg88; reg108=reg109+reg108;
    reg98=pos_nodes[15][1]*reg50; reg39=reg49-reg39; reg44=reg119-reg44; reg121=reg76+reg121; reg49=reg121*reg88;
    reg76=reg112*reg120; reg5=reg3*reg5; reg107=reg44*reg120; reg109=pos_nodes[15][2]*reg50; reg51=reg122+reg51;
    reg110=pos_nodes[19][1]*reg77; reg6=reg82+reg6; reg82=reg96*pos_nodes[16][0]; reg117=reg65*reg88; reg118=reg96*pos_nodes[16][1];
    reg70=reg39+reg70; reg39=pos_nodes[18][2]*reg77; reg119=pos_nodes[19][0]*reg77; reg99=reg85+reg99; reg97=reg16+reg97;
    reg98=reg108+reg98; reg98=reg118+reg98; reg16=reg5*pos_nodes[17][1]; reg39=reg70+reg39; reg110=reg6-reg110;
    reg6=pos_nodes[19][2]*reg77; reg70=reg96*pos_nodes[16][2]; reg3=reg3*reg17; reg119=reg99-reg119; reg85=reg112*reg65;
    reg76=reg49-reg76; reg99=reg5*pos_nodes[17][0]; reg109=reg51+reg109; reg97=reg82+reg97; reg51=reg121*reg44;
    reg107=reg117-reg107; reg17=reg2*reg17; reg109=reg70+reg109; reg2=reg5*pos_nodes[17][2]; reg16=reg98+reg16;
    reg70=reg3*pos_nodes[18][0]; reg6=reg39-reg6; reg39=reg3*pos_nodes[18][1]; reg99=reg97+reg99; reg82=reg110*reg76;
    reg97=reg119*reg107; reg85=reg51-reg85; reg97=reg82-reg97; reg82=reg6*reg85; reg2=reg109+reg2;
    reg98=reg3*pos_nodes[18][2]; reg108=reg17*pos_nodes[19][0]; reg70=reg99+reg70; reg99=reg17*pos_nodes[19][1]; reg39=reg16+reg39;
    reg16=reg121*reg6; reg109=reg110*reg88; reg118=reg44*reg6; reg122=reg110*reg120; T reg123=reg65*reg6;
    T reg124=reg119*reg88; T reg125=reg112*reg6; T reg126=reg119*reg120; reg125=reg124-reg125; reg118=reg109-reg118;
    reg99=reg39+reg99; reg16=reg126-reg16; reg108=reg70+reg108; reg123=reg122-reg123; reg98=reg2+reg98;
    reg2=reg17*pos_nodes[19][2]; reg39=reg119*reg44; reg82=reg97-reg82; reg70=reg112*reg110; reg97=reg119*reg65;
    T reg127=reg121*reg110; reg70=reg39-reg70; reg118=reg118/reg82; reg99=pos[1]-reg99; reg127=reg97-reg127;
    reg123=reg123/reg82; reg108=pos[0]-reg108; reg16=reg16/reg82; reg76=reg76/reg82; reg107=reg107/reg82;
    reg2=reg98+reg2; reg125=reg125/reg82; reg125=reg99*reg125; reg70=reg70/reg82; reg85=reg85/reg82;
    reg123=reg108*reg123; reg16=reg99*reg16; reg82=reg127/reg82; reg2=pos[2]-reg2; reg107=reg108*reg107;
    reg76=reg99*reg76; reg118=reg108*reg118; reg123=reg16-reg123; reg85=reg2*reg85; reg82=reg2*reg82;
    reg107=reg76-reg107; reg125=reg118-reg125; reg70=reg2*reg70; var_inter[2]+=reg123-reg82; var_inter[0]+=reg107-reg85;
    var_inter[1]+=reg70+reg125;

}
template<> struct ElemVarInterFromPosNonLinear<Hexa_20> { static const bool res = 3; };
#ifndef STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
#define STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
struct Elementary_mul_nb_nodes_of_each_children_elem {};
#endif // STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes_of_each_children_elem &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary_mul_nb_nodes
#define STRUCT_Elementary_mul_nb_nodes
struct Elementary_mul_nb_nodes {};
#endif // STRUCT_Elementary_mul_nb_nodes
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Nodal
#define STRUCT_Nodal
struct Nodal {};
#endif // STRUCT_Nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; T reg2=1-reg0; reg1=reg1-1;
    T reg3=1+reg0; T reg4=2*var_inter[2]; reg4=reg4-1; T reg5=reg0+reg1; T reg6=0.125*reg2;
    T reg7=1-reg1; T reg8=reg0-reg1; T reg9=0.125*reg3; T reg10=1+reg1; T reg11=reg7*reg9;
    T reg12=reg6*reg7; T reg13=1-reg4; T reg14=reg8-reg4; T reg15=reg4+reg5; T reg16=reg5-reg4;
    reg9=reg10*reg9; T reg17=reg13*reg11; T reg18=reg12*reg13; T reg19=reg1-reg0; reg14=reg14-2;
    T reg20=2+reg15; reg20=reg18*reg20; reg18=reg13*reg9; reg16=reg16-2; reg6=reg6*reg10;
    T reg21=reg19-reg4; reg14=reg17*reg14; reg20=val[0]*reg20; reg14=val[1]*reg14; reg5=reg4-reg5;
    reg16=reg18*reg16; reg17=reg13*reg6; reg18=1+reg4; reg21=reg21-2; reg8=reg4+reg8;
    reg5=reg5-2; reg12=reg12*reg18; reg16=val[2]*reg16; reg21=reg17*reg21; reg20=reg14-reg20;
    reg0=pow(reg0,2); reg8=reg8-2; reg11=reg11*reg18; reg5=reg12*reg5; reg21=val[3]*reg21;
    reg16=reg20+reg16; reg1=pow(reg1,2); reg0=1-reg0; reg19=reg4+reg19; reg21=reg16+reg21;
    reg15=reg15-2; reg9=reg9*reg18; reg5=val[4]*reg5; reg8=reg11*reg8; reg19=reg19-2;
    reg6=reg6*reg18; reg15=reg9*reg15; reg8=val[5]*reg8; reg5=reg21+reg5; reg0=0.25*reg0;
    reg1=1-reg1; reg19=reg6*reg19; reg6=reg7*reg0; reg15=val[6]*reg15; reg1=0.25*reg1;
    reg8=reg5+reg8; reg15=reg8+reg15; reg5=reg3*reg1; reg8=reg13*reg6; reg19=val[7]*reg19;
    reg0=reg10*reg0; reg8=val[8]*reg8; reg9=reg13*reg5; reg19=reg15+reg19; reg1=reg2*reg1;
    reg8=reg19+reg8; reg11=reg13*reg0; reg9=val[9]*reg9; reg13=reg13*reg1; reg11=val[10]*reg11;
    reg9=reg8+reg9; reg6=reg18*reg6; reg13=val[11]*reg13; reg4=pow(reg4,2); reg11=reg9+reg11;
    reg13=reg11+reg13; reg6=val[12]*reg6; reg5=reg18*reg5; reg4=1-reg4; reg6=reg13+reg6;
    reg5=val[13]*reg5; reg0=reg18*reg0; reg4=0.25*reg4; reg2=reg2*reg4; reg5=reg6+reg5;
    reg0=val[14]*reg0; reg1=reg18*reg1; reg4=reg3*reg4; reg3=reg7*reg2; reg1=val[15]*reg1;
    reg0=reg5+reg0; reg1=reg0+reg1; reg3=val[16]*reg3; reg7=reg7*reg4; reg7=val[17]*reg7;
    reg4=reg10*reg4; reg3=reg1+reg3; reg4=val[18]*reg4; reg2=reg10*reg2; reg7=reg3+reg7;
    reg4=reg7+reg4; reg2=val[19]*reg2; res=reg4+reg2;

}
#ifndef STRUCT_Global
#define STRUCT_Global
struct Global {};
#endif // STRUCT_Global
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Global &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss_0
#define STRUCT_Gauss_0
struct Gauss_0 {};
#endif // STRUCT_Gauss_0
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Gauss_0 &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss
#define STRUCT_Gauss
struct Gauss {};
#endif // STRUCT_Gauss
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Gauss &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; reg0=reg0-0.21132486540518707896; T reg1=var_inter[1]-0.21132486540518707896; T reg2=var_inter[0]-0.21132486540518707896; T reg3=1-var_inter[1];
    reg0=reg0/0.57735026918962573106; reg3=reg3-0.21132486540518707896; reg2=reg2/0.57735026918962573106; T reg4=var_inter[2]-0.21132486540518707896; reg1=reg1/0.57735026918962573106;
    reg0=1-reg0; reg4=reg4/0.57735026918962573106; reg1=1-reg1; reg2=1-reg2; reg3=reg3/0.57735026918962573106;
    T reg5=reg2*reg1; reg3=1-reg3; reg4=1-reg4; reg1=reg1*reg0; T reg6=1-var_inter[2];
    reg0=reg0*reg3; reg6=reg6-0.21132486540518707896; T reg7=reg4*reg1; T reg8=reg5*reg4; reg6=reg6/0.57735026918962573106;
    reg3=reg2*reg3; reg2=reg4*reg0; reg7=val[1]*reg7; reg8=val[0]*reg8; reg7=reg8+reg7;
    reg2=val[2]*reg2; reg4=reg4*reg3; reg6=1-reg6; reg2=reg7+reg2; reg4=val[3]*reg4;
    reg7=reg5*reg6; reg7=val[4]*reg7; reg8=reg1*reg6; reg4=reg2+reg4; reg7=reg4+reg7;
    reg8=val[5]*reg8; reg2=reg0*reg6; reg8=reg7+reg8; reg2=val[6]*reg2; reg6=reg3*reg6;
    reg2=reg8+reg2; reg6=val[7]*reg6; res=reg2+reg6;

}
#ifndef STRUCT_Gauss_2
#define STRUCT_Gauss_2
struct Gauss_2 {};
#endif // STRUCT_Gauss_2
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Gauss_2 &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; reg0=reg0-0.21132486540518707896; T reg1=var_inter[1]-0.21132486540518707896; T reg2=var_inter[0]-0.21132486540518707896; T reg3=1-var_inter[1];
    reg0=reg0/0.57735026918962573106; reg3=reg3-0.21132486540518707896; reg2=reg2/0.57735026918962573106; T reg4=var_inter[2]-0.21132486540518707896; reg1=reg1/0.57735026918962573106;
    reg0=1-reg0; reg4=reg4/0.57735026918962573106; reg1=1-reg1; reg2=1-reg2; reg3=reg3/0.57735026918962573106;
    T reg5=reg2*reg1; reg3=1-reg3; reg4=1-reg4; reg1=reg1*reg0; T reg6=1-var_inter[2];
    reg0=reg0*reg3; reg6=reg6-0.21132486540518707896; T reg7=reg4*reg1; T reg8=reg5*reg4; reg6=reg6/0.57735026918962573106;
    reg3=reg2*reg3; reg2=reg4*reg0; reg7=val[1]*reg7; reg8=val[0]*reg8; reg7=reg8+reg7;
    reg2=val[2]*reg2; reg4=reg4*reg3; reg6=1-reg6; reg2=reg7+reg2; reg4=val[3]*reg4;
    reg7=reg5*reg6; reg7=val[4]*reg7; reg8=reg1*reg6; reg4=reg2+reg4; reg7=reg4+reg7;
    reg8=val[5]*reg8; reg2=reg0*reg6; reg8=reg7+reg8; reg2=val[6]*reg2; reg6=reg3*reg6;
    reg2=reg8+reg2; reg6=val[7]*reg6; res=reg2+reg6;

}
#ifndef STRUCT_Flat_interpolation
#define STRUCT_Flat_interpolation
struct Flat_interpolation {};
#endif // STRUCT_Flat_interpolation
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Flat_interpolation &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; reg0=reg0-0.21132486540518707896; T reg2=var_inter[1]-0.21132486540518707896; T reg3=var_inter[0]-0.21132486540518707896;
    reg3=reg3/0.57735026918962573106; reg2=reg2/0.57735026918962573106; reg1=reg1-0.21132486540518707896; reg0=reg0/0.57735026918962573106; reg3=1-reg3;
    reg2=1-reg2; reg1=reg1/0.57735026918962573106; reg0=1-reg0; reg1=1-reg1; T reg4=reg2*reg0;
    reg2=reg3*reg2; reg0=reg0*reg1; T reg5=val[0]*reg2; T reg6=val[1]*reg4; reg1=reg3*reg1;
    reg6=reg5+reg6; reg3=val[2]*reg0; reg3=reg6+reg3; reg5=val[3]*reg1; res=reg3+reg5;

}
#ifndef STRUCT_Der_nodal
#define STRUCT_Der_nodal
struct Der_nodal {};
#endif // STRUCT_Der_nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Der_nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary
#define STRUCT_Elementary
struct Elementary {};
#endif // STRUCT_Elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Skin_elementary
#define STRUCT_Skin_elementary
struct Skin_elementary {};
#endif // STRUCT_Skin_elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Skin_elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
template<class TVI,class TVAL> void get_shape_functions(const Hexa_20 &ne,const TVI &var_inter,TVAL &res) {
    typedef typename TVAL::template SubType<0>::T T;
    T reg0=2*var_inter[0]; T reg1=2*var_inter[2]; reg0=reg0-1; T reg2=2*var_inter[1]; reg2=reg2-1;
    reg1=reg1-1; T reg3=1-reg0; T reg4=pow(reg1,2); T reg5=1+reg0; T reg6=reg0+reg2;
    T reg7=pow(reg2,2); T reg8=pow(reg0,2); T reg9=1-reg2; T reg10=0.125*reg3; reg8=1-reg8;
    reg7=1-reg7; T reg11=reg2-reg0; reg4=1-reg4; reg0=reg0-reg2; T reg12=0.125*reg5;
    T reg13=reg1+reg6; reg2=1+reg2; T reg14=1-reg1; T reg15=reg10*reg9; T reg16=reg15*reg14;
    reg8=0.25*reg8; T reg17=reg1+reg0; T reg18=reg1-reg6; T reg19=1+reg1; T reg20=2+reg13;
    reg7=0.25*reg7; T reg21=reg11-reg1; reg10=reg10*reg2; reg11=reg1+reg11; reg6=reg6-reg1;
    T reg22=reg2*reg12; reg4=0.25*reg4; reg1=reg0-reg1; reg12=reg9*reg12; reg11=reg11-2;
    reg0=reg10*reg19; T reg23=reg9*reg8; T reg24=reg5*reg4; reg5=reg5*reg7; reg8=reg2*reg8;
    reg7=reg3*reg7; reg4=reg3*reg4; reg13=reg13-2; reg3=reg22*reg19; reg22=reg14*reg22;
    reg17=reg17-2; T reg25=reg12*reg19; reg6=reg6-2; reg18=reg18-2; reg20=reg16*reg20;
    reg15=reg15*reg19; reg21=reg21-2; reg10=reg14*reg10; reg12=reg14*reg12; reg1=reg1-2;
    reg16=reg19*reg8; res[14]=reg16; T reg26=reg19*reg7; res[15]=reg26; reg1=reg12*reg1;
    res[1]=reg1; reg12=reg9*reg4; res[16]=reg12; reg9=reg9*reg24; res[17]=reg9;
    reg24=reg2*reg24; res[18]=reg24; reg4=reg2*reg4; res[19]=reg4; res[0]=-reg20;
    reg2=reg19*reg5; res[13]=reg2; reg19=reg19*reg23; res[12]=reg19; reg7=reg14*reg7;
    res[11]=reg7; reg8=reg14*reg8; res[10]=reg8; reg6=reg22*reg6; res[2]=reg6;
    reg5=reg14*reg5; res[9]=reg5; reg21=reg10*reg21; res[3]=reg21; reg23=reg14*reg23;
    res[8]=reg23; reg18=reg15*reg18; res[4]=reg18; reg17=reg25*reg17; res[5]=reg17;
    reg11=reg0*reg11; res[7]=reg11; reg13=reg3*reg13; res[6]=reg13;

}
#ifndef AUTORIZEDPERM
#define AUTORIZEDPERM
template<class T> struct AuthorizedPerm;
#endif // AUTORIZEDPERM
template<> struct AuthorizedPerm<Hexa_20> {
    static const unsigned nb_permutations = 23;
    template<class TE> static void make_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[16],e.nodes[19],e.nodes[18],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[11],e.nodes[9],e.nodes[13],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[11],e.nodes[15],e.nodes[13],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[8],e.nodes[12],e.nodes[14],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[8],e.nodes[10],e.nodes[14],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[9],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[13],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[17],e.nodes[18],e.nodes[19],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[19],e.nodes[18],e.nodes[17],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[9],e.nodes[13],e.nodes[15],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[15],e.nodes[13],e.nodes[9],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[12],e.nodes[14],e.nodes[10],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[10],e.nodes[14],e.nodes[12],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[18],e.nodes[19],e.nodes[16],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[18],e.nodes[17],e.nodes[16],e.nodes[19]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[13],e.nodes[15],e.nodes[11],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[13],e.nodes[9],e.nodes[11],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[14],e.nodes[10],e.nodes[8],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[14],e.nodes[12],e.nodes[8],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[10],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[14],e.nodes[19],e.nodes[16],e.nodes[17],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[17],e.nodes[16],e.nodes[19],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[15],e.nodes[11],e.nodes[9],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[9],e.nodes[11],e.nodes[15],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[10],e.nodes[8],e.nodes[12],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[12],e.nodes[8],e.nodes[10],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
    template<class TE> static void unmake_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[16],e.nodes[19],e.nodes[18],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[15],e.nodes[13],e.nodes[9],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[8],e.nodes[10],e.nodes[14],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[12],e.nodes[8],e.nodes[10],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[11],e.nodes[15],e.nodes[13],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[10],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[14],e.nodes[19],e.nodes[16],e.nodes[17],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[19],e.nodes[18],e.nodes[17],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[14],e.nodes[12],e.nodes[8],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[11],e.nodes[9],e.nodes[13],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[15],e.nodes[11],e.nodes[9],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[10],e.nodes[14],e.nodes[12],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[18],e.nodes[19],e.nodes[16],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[18],e.nodes[17],e.nodes[16],e.nodes[19]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[13],e.nodes[15],e.nodes[11],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[10],e.nodes[8],e.nodes[12],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[14],e.nodes[10],e.nodes[8],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[9],e.nodes[13],e.nodes[15],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[9],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[13],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[17],e.nodes[18],e.nodes[19],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[17],e.nodes[16],e.nodes[19],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[12],e.nodes[14],e.nodes[10],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[9],e.nodes[11],e.nodes[15],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[13],e.nodes[9],e.nodes[11],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[8],e.nodes[12],e.nodes[14],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
};

template<class TN,class TNG,class TD,unsigned NET,class TVI>
typename TNG::T get_det_jac( const Element<Hexa_20,TN,TNG,TD,NET> &elem, const TVI &var_inter ) {
    typedef typename TNG::T T;
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; T reg2=1+reg0; T reg3=1-reg0;
    reg1=reg1-1; T reg4=2*var_inter[2]; T reg5=0.125*reg2; T reg6=reg0+reg1; reg4=reg4-1;
    T reg7=reg0-reg1; T reg8=0.125*reg3; T reg9=1-reg1; T reg10=0.25*reg2; T reg11=reg4+reg6;
    T reg12=0.25*reg9; T reg13=reg7-reg4; T reg14=0.25*reg3; T reg15=reg8*reg9; T reg16=1+reg1;
    T reg17=reg9*reg5; T reg18=1-reg4; T reg19=2+reg11; T reg20=0.25*reg16; T reg21=reg15*reg18;
    reg5=reg16*reg5; reg13=reg13-2; T reg22=2*reg15; T reg23=reg18*reg10; T reg24=reg14*reg18;
    T reg25=reg12*reg18; T reg26=2*reg17; T reg27=reg1-reg0; T reg28=reg6-reg4; T reg29=reg18*reg17;
    T reg30=reg19*reg25; T reg31=2*reg21; reg28=reg28-2; T reg32=reg18*reg5; T reg33=reg26*reg13;
    T reg34=reg13*reg25; T reg35=reg13*reg23; T reg36=2*reg5; T reg37=reg18*reg20; T reg38=2*reg29;
    reg8=reg8*reg16; T reg39=reg24*reg19; T reg40=reg19*reg22; T reg41=reg27-reg4; reg41=reg41-2;
    reg40=reg31-reg40; T reg42=1+reg4; T reg43=reg18*reg8; reg6=reg4-reg6; reg33=reg38+reg33;
    reg35=reg38+reg35; T reg44=2*reg32; T reg45=reg37*reg28; T reg46=reg28*reg23; reg30=reg31-reg30;
    reg39=reg31-reg39; reg31=reg36*reg28; T reg47=2*reg8; reg34=reg38+reg34; reg38=elem.pos(1)[2]*reg35;
    reg7=reg4+reg7; T reg48=elem.pos(0)[2]*reg39; reg6=reg6-2; reg45=reg44+reg45; T reg49=reg14*reg42;
    reg15=reg15*reg42; T reg50=elem.pos(1)[1]*reg35; reg46=reg44+reg46; T reg51=reg37*reg41; T reg52=elem.pos(0)[1]*reg39;
    T reg53=reg12*reg42; reg31=reg44+reg31; reg44=elem.pos(1)[2]*reg33; T reg54=elem.pos(0)[2]*reg40; T reg55=reg24*reg41;
    T reg56=elem.pos(1)[1]*reg33; T reg57=elem.pos(0)[1]*reg40; T reg58=2*reg43; T reg59=elem.pos(0)[1]*reg30; T reg60=elem.pos(1)[1]*reg34;
    T reg61=elem.pos(1)[2]*reg34; T reg62=reg41*reg47; T reg63=elem.pos(0)[2]*reg30; T reg64=reg49*reg6; reg55=reg55+reg58;
    T reg65=reg53*reg6; reg63=reg61-reg63; reg61=reg42*reg10; T reg66=elem.pos(2)[2]*reg46; reg59=reg60-reg59;
    reg62=reg62+reg58; reg60=elem.pos(2)[2]*reg31; reg48=reg38+reg48; T reg67=2*reg15; T reg68=elem.pos(2)[1]*reg45;
    T reg69=reg6*reg22; reg58=reg51+reg58; reg51=elem.pos(2)[2]*reg45; reg54=reg44+reg54; reg57=reg56+reg57;
    T reg70=elem.pos(2)[1]*reg46; reg52=reg50+reg52; T reg71=elem.pos(2)[1]*reg31; reg7=reg7-2; reg17=reg17*reg42;
    reg64=reg64+reg67; reg65=reg67+reg65; reg39=reg39*elem.pos(0)[0]; T reg72=elem.pos(3)[1]*reg58; reg68=reg59+reg68;
    reg69=reg67+reg69; reg59=reg57+reg71; reg67=reg54+reg60; T reg73=reg62*elem.pos(3)[2]; reg30=reg30*elem.pos(0)[0];
    reg34=elem.pos(1)[0]*reg34; T reg74=reg55*elem.pos(3)[1]; reg63=reg51+reg63; reg51=elem.pos(3)[2]*reg58; reg70=reg70-reg52;
    T reg75=reg42*reg20; T reg76=2*reg17; T reg77=reg53*reg7; T reg78=elem.pos(1)[0]*reg35; T reg79=reg62*elem.pos(3)[1];
    T reg80=reg55*elem.pos(3)[2]; T reg81=reg7*reg61; reg5=reg5*reg42; reg11=reg11-2; reg27=reg4+reg27;
    T reg82=pow(reg0,2); T reg83=reg26*reg7; reg66=reg66-reg48; T reg84=reg69*elem.pos(4)[1]; T reg85=reg79+reg59;
    T reg86=reg75*reg11; T reg87=2*reg5; T reg88=reg73+reg67; reg46=elem.pos(2)[0]*reg46; reg81=reg76+reg81;
    T reg89=reg11*reg61; reg40=elem.pos(0)[0]*reg40; reg68=reg68-reg72; reg39=reg39+reg78; T reg90=reg65*elem.pos(4)[2];
    reg63=reg63-reg51; reg74=reg70+reg74; reg8=reg8*reg42; reg70=reg65*elem.pos(4)[1]; reg27=reg27-2;
    reg45=elem.pos(2)[0]*reg45; reg82=1-reg82; T reg91=elem.pos(1)[0]*reg33; T reg92=pow(reg1,2); T reg93=reg69*elem.pos(4)[2];
    reg83=reg76+reg83; reg30=reg34-reg30; reg34=reg36*reg11; T reg94=reg64*elem.pos(4)[1]; reg77=reg76+reg77;
    reg80=reg66+reg80; reg66=reg64*elem.pos(4)[2]; reg63=reg63-reg90; reg76=reg77*elem.pos(5)[2]; reg45=reg30+reg45;
    reg30=reg83*elem.pos(5)[2]; reg34=reg34+reg87; T reg95=reg83*elem.pos(5)[1]; reg40=reg91+reg40; reg89=reg87+reg89;
    reg93=reg93-reg88; T reg96=2*reg8; T reg97=reg49*reg27; T reg98=reg27*reg47; T reg99=elem.pos(5)[1]*reg81;
    reg55=reg55*elem.pos(3)[0]; reg46=reg46-reg39; reg80=reg80-reg66; T reg100=elem.pos(5)[2]*reg81; reg92=1-reg92;
    T reg101=0.25*reg82; reg84=reg84-reg85; T reg102=elem.pos(3)[0]*reg58; reg87=reg86+reg87; reg74=reg74-reg94;
    reg68=reg68-reg70; reg86=reg75*reg27; T reg103=elem.pos(2)[0]*reg31; T reg104=reg77*elem.pos(5)[1]; reg45=reg45-reg102;
    reg76=reg63+reg76; reg63=reg0*reg9; reg46=reg55+reg46; reg55=reg87*elem.pos(6)[2]; reg82=0.5*reg82;
    T reg105=reg64*elem.pos(4)[0]; T reg106=reg65*elem.pos(4)[0]; T reg107=elem.pos(6)[2]*reg89; T reg108=reg34*elem.pos(6)[1]; reg84=reg95+reg84;
    reg95=reg62*elem.pos(3)[0]; reg98=reg96+reg98; reg86=reg96+reg86; T reg109=reg87*elem.pos(6)[1]; T reg110=reg9*reg101;
    T reg111=reg34*elem.pos(6)[2]; reg96=reg97+reg96; reg97=0.25*reg92; T reg112=reg40+reg103; reg68=reg104+reg68;
    reg74=reg74-reg99; reg104=elem.pos(6)[1]*reg89; reg80=reg80-reg100; reg30=reg93+reg30; reg93=reg2*reg97;
    reg107=reg80+reg107; reg80=reg82*reg18; T reg113=reg95+reg112; T reg114=elem.pos(7)[2]*reg96; T reg115=elem.pos(7)[1]*reg96;
    T reg116=elem.pos(7)[2]*reg98; T reg117=elem.pos(5)[0]*reg81; T reg118=2*reg110; reg92=0.5*reg92; reg111=reg30+reg111;
    reg104=reg74+reg104; reg69=reg69*elem.pos(4)[0]; reg77=reg77*elem.pos(5)[0]; reg45=reg45-reg106; reg46=reg46-reg105;
    reg30=reg98*elem.pos(7)[1]; reg74=reg63*reg18; reg108=reg84+reg108; reg68=reg109+reg68; reg84=reg86*elem.pos(7)[1];
    reg109=elem.pos(7)[2]*reg86; reg76=reg55+reg76; reg55=reg1*reg2; T reg119=elem.pos(8)[2]*reg118; reg83=reg83*elem.pos(5)[0];
    reg101=reg16*reg101; reg111=reg116+reg111; reg116=elem.pos(8)[1]*reg118; T reg120=elem.pos(8)[2]*reg74; reg76=reg76-reg109;
    reg115=reg104+reg115; reg69=reg69-reg113; reg104=elem.pos(8)[1]*reg80; T reg121=reg18*reg55; T reg122=2*reg93;
    reg89=elem.pos(6)[0]*reg89; reg46=reg46-reg117; reg68=reg68-reg84; reg114=reg107+reg114; reg107=reg18*reg92;
    T reg123=reg0*reg16; T reg124=elem.pos(8)[1]*reg74; T reg125=elem.pos(8)[2]*reg80; reg45=reg77+reg45; reg87=reg87*elem.pos(6)[0];
    reg30=reg108+reg30; reg96=elem.pos(7)[0]*reg96; reg77=elem.pos(9)[1]*reg107; reg108=2*reg101; reg34=reg34*elem.pos(6)[0];
    T reg126=reg121*elem.pos(9)[1]; reg68=reg68-reg124; T reg127=reg1*reg3; T reg128=elem.pos(9)[1]*reg122; reg76=reg76-reg120;
    reg30=reg30-reg116; T reg129=elem.pos(9)[2]*reg107; T reg130=reg86*elem.pos(7)[0]; reg45=reg87+reg45; reg87=elem.pos(9)[2]*reg122;
    T reg131=reg18*reg123; reg111=reg111-reg119; reg46=reg89+reg46; reg89=reg121*elem.pos(9)[2]; reg114=reg114-reg125;
    reg69=reg83+reg69; reg115=reg115-reg104; reg97=reg3*reg97; reg129=reg76+reg129; reg45=reg45-reg130;
    reg76=reg18*reg127; reg83=elem.pos(8)[0]*reg74; T reg132=elem.pos(8)[0]*reg80; reg30=reg30-reg128; T reg133=elem.pos(10)[1]*reg108;
    reg115=reg115-reg126; reg96=reg46+reg96; reg46=reg131*elem.pos(10)[2]; reg34=reg69+reg34; reg111=reg111-reg87;
    reg98=reg98*elem.pos(7)[0]; reg69=elem.pos(10)[2]*reg108; T reg134=reg80*elem.pos(10)[1]; T reg135=reg80*elem.pos(10)[2]; T reg136=2*reg97;
    reg68=reg77+reg68; reg77=reg131*elem.pos(10)[1]; reg114=reg114-reg89; T reg137=pow(reg4,2); T reg138=elem.pos(9)[0]*reg107;
    reg111=reg111-reg69; T reg139=reg63*reg42; T reg140=elem.pos(11)[2]*reg76; T reg141=reg136*elem.pos(11)[2]; reg98=reg34+reg98;
    reg34=reg136*elem.pos(11)[1]; T reg142=elem.pos(11)[2]*reg107; reg96=reg96-reg132; reg30=reg30-reg133; T reg143=reg82*reg42;
    T reg144=elem.pos(9)[0]*reg121; T reg145=elem.pos(8)[0]*reg118; reg135=reg114+reg135; reg114=elem.pos(11)[1]*reg107; reg129=reg129-reg46;
    reg68=reg68-reg77; reg115=reg134+reg115; reg45=reg45-reg83; reg134=elem.pos(11)[1]*reg76; reg30=reg30-reg34;
    T reg146=reg143*elem.pos(12)[1]; T reg147=reg143*elem.pos(12)[2]; T reg148=reg80*elem.pos(10)[0]; T reg149=elem.pos(9)[0]*reg122; T reg150=reg139*elem.pos(12)[2];
    reg129=reg129-reg142; reg135=reg135-reg140; reg96=reg96-reg144; reg115=reg115-reg134; reg138=reg45+reg138;
    reg45=reg139*elem.pos(12)[1]; T reg151=elem.pos(12)[2]*reg118; reg111=reg111-reg141; reg137=1-reg137; T reg152=reg42*reg55;
    T reg153=reg131*elem.pos(10)[0]; reg68=reg68-reg114; reg98=reg98-reg145; T reg154=elem.pos(12)[1]*reg118; T reg155=reg42*reg92;
    reg138=reg138-reg153; reg30=reg154+reg30; reg115=reg115-reg146; reg148=reg96+reg148; reg151=reg111+reg151;
    reg96=0.25*reg137; reg111=elem.pos(13)[1]*reg152; reg129=reg129-reg150; reg68=reg68-reg45; reg135=reg135-reg147;
    reg154=elem.pos(13)[1]*reg155; T reg156=elem.pos(13)[1]*reg122; T reg157=elem.pos(13)[2]*reg122; T reg158=elem.pos(11)[0]*reg76; reg98=reg98-reg149;
    T reg159=elem.pos(13)[2]*reg152; T reg160=reg42*reg123; T reg161=elem.pos(13)[2]*reg155; T reg162=elem.pos(11)[0]*reg107; T reg163=elem.pos(10)[0]*reg108;
    reg115=reg115-reg111; T reg164=elem.pos(14)[1]*reg160; reg129=reg161+reg129; reg161=elem.pos(14)[2]*reg160; reg68=reg154+reg68;
    reg138=reg138-reg162; reg154=elem.pos(14)[2]*reg108; T reg165=elem.pos(14)[1]*reg108; reg135=reg135-reg159; T reg166=elem.pos(14)[2]*reg143;
    reg98=reg98-reg163; T reg167=reg3*reg96; T reg168=reg42*reg127; T reg169=elem.pos(14)[1]*reg143; reg3=reg4*reg3;
    reg148=reg148-reg158; reg30=reg156+reg30; reg156=reg136*elem.pos(11)[0]; reg137=0.5*reg137; T reg170=reg139*elem.pos(12)[0];
    reg157=reg151+reg157; reg151=reg143*elem.pos(12)[0]; T reg171=elem.pos(12)[0]*reg118; T reg172=elem.pos(15)[2]*reg136; reg68=reg68-reg164;
    reg165=reg30+reg165; reg30=elem.pos(15)[2]*reg168; T reg173=elem.pos(15)[1]*reg136; T reg174=elem.pos(15)[2]*reg155; reg148=reg148-reg151;
    T reg175=2*reg167; T reg176=elem.pos(15)[1]*reg168; T reg177=reg9*reg3; reg154=reg157+reg154; reg166=reg135+reg166;
    reg115=reg169+reg115; reg129=reg129-reg161; reg135=elem.pos(13)[0]*reg155; reg157=reg137*reg9; reg98=reg98-reg156;
    reg169=reg4*reg2; T reg178=elem.pos(15)[1]*reg155; T reg179=elem.pos(13)[0]*reg152; reg96=reg2*reg96; reg138=reg138-reg170;
    reg2=reg157*elem.pos(16)[2]; T reg180=reg9*reg169; T reg181=reg175*elem.pos(16)[1]; reg115=reg115-reg176; reg172=reg154+reg172;
    reg154=elem.pos(13)[0]*reg122; reg166=reg166-reg30; reg148=reg148-reg179; reg129=reg129-reg174; T reg182=elem.pos(14)[0]*reg143;
    T reg183=elem.pos(16)[1]*reg177; reg173=reg165+reg173; reg165=elem.pos(16)[2]*reg177; reg171=reg98+reg171; reg98=2*reg96;
    T reg184=reg175*elem.pos(16)[2]; reg68=reg68-reg178; T reg185=reg157*