#ifndef LMT_HEXA_20
#define LMT_HEXA_20
namespace LMT {
inline const double *gauss_point_for_order(unsigned order, const Hexa_20 &elem) { /// order -> degre du polynome a integrer exactement
    static const unsigned offset[] = { 0, 33, 66, 99, 132, 269, 406, 543, 680, 817, }; // fonction de lordre du poly
    static const double values[] = {
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
    };
    return values + offset[order];
}
template<class TNode> void permutation_if_jac_neg(const Hexa_20 &elem,TNode **nodes) {
    typedef typename TNode::T T;
    T reg0=0.25*nodes[0]->pos[2]; T reg1=0.25*nodes[1]->pos[2]; T reg2=0.25*nodes[0]->pos[1]; T reg3=0.25*nodes[1]->pos[1]; T reg4=reg0-reg1;
    T reg5=reg3+reg2; T reg6=0.25*nodes[2]->pos[1]; T reg7=reg2-reg3; T reg8=reg1+reg0; T reg9=0.25*nodes[2]->pos[2];
    T reg10=reg6+reg5; T reg11=reg8-reg9; T reg12=0.25*nodes[3]->pos[2]; T reg13=reg8+reg9; T reg14=0.25*nodes[1]->pos[0];
    T reg15=0.25*nodes[3]->pos[1]; T reg16=reg5-reg6; T reg17=0.25*nodes[0]->pos[0]; reg7=reg7-reg6; reg4=reg4-reg9;
    reg7=reg15+reg7; reg16=reg16-reg15; T reg18=0.25*nodes[4]->pos[1]; T reg19=0.25*nodes[4]->pos[2]; T reg20=reg14+reg17;
    T reg21=reg13+reg12; T reg22=0.25*nodes[2]->pos[0]; T reg23=reg17-reg14; reg4=reg12+reg4; reg11=reg11-reg12;
    T reg24=reg15+reg10; reg23=reg23-reg22; T reg25=0.25*nodes[3]->pos[0]; reg4=reg19+reg4; reg7=reg18+reg7;
    reg16=reg16+reg18; T reg26=0.25*nodes[5]->pos[1]; T reg27=reg20-reg22; T reg28=reg21-reg19; T reg29=0.25*nodes[5]->pos[2];
    T reg30=reg24-reg18; reg11=reg19+reg11; reg27=reg27-reg25; reg7=reg7-reg26; reg11=reg29+reg11;
    reg28=reg28-reg29; T reg31=0.25*nodes[6]->pos[2]; T reg32=reg22+reg20; T reg33=0.25*nodes[4]->pos[0]; reg23=reg23+reg25;
    reg30=reg30-reg26; reg16=reg16+reg26; reg4=reg4-reg29; T reg34=0.25*nodes[6]->pos[1]; reg27=reg33+reg27;
    reg11=reg11-reg31; reg30=reg30-reg34; T reg35=0.25*nodes[7]->pos[1]; reg16=reg16-reg34; reg4=reg4-reg31;
    T reg36=0.25*nodes[7]->pos[2]; reg28=reg28-reg31; reg23=reg23+reg33; T reg37=0.25*nodes[5]->pos[0]; reg7=reg7-reg34;
    T reg38=reg25+reg32; reg11=reg11-reg36; T reg39=0.5*nodes[8]->pos[1]; reg16=reg16-reg35; reg28=reg28-reg36;
    T reg40=0.5*nodes[8]->pos[2]; T reg41=reg38-reg33; T reg42=0.5*nodes[9]->pos[2]; reg30=reg30-reg35; reg4=reg36+reg4;
    T reg43=0.5*nodes[9]->pos[1]; reg23=reg23-reg37; T reg44=0.25*nodes[6]->pos[0]; reg7=reg35+reg7; reg27=reg37+reg27;
    reg7=reg43+reg7; T reg45=0.5*nodes[11]->pos[2]; T reg46=0.25*nodes[7]->pos[0]; reg23=reg23-reg44; reg4=reg42+reg4;
    reg28=reg28-reg40; T reg47=0.5*nodes[10]->pos[2]; reg30=reg30-reg39; reg39=reg16-reg39; reg16=0.5*nodes[10]->pos[1];
    reg40=reg11-reg40; reg11=0.5*nodes[11]->pos[1]; reg27=reg27-reg44; reg41=reg41-reg37; T reg48=0.5*nodes[13]->pos[1];
    T reg49=0.5*nodes[12]->pos[2]; reg40=reg47+reg40; reg43=reg30-reg43; reg7=reg7-reg11; reg4=reg4-reg45;
    reg27=reg27-reg46; reg30=0.5*nodes[13]->pos[2]; T reg50=0.5*nodes[8]->pos[0]; T reg51=0.5*nodes[12]->pos[1]; reg39=reg39+reg16;
    T reg52=0.5*nodes[9]->pos[0]; reg41=reg41-reg44; reg23=reg23+reg46; reg42=reg28-reg42; reg27=reg27-reg50;
    reg41=reg41-reg46; reg28=0.5*nodes[15]->pos[1]; T reg53=0.5*nodes[10]->pos[0]; reg4=reg30+reg4; reg16=reg43-reg16;
    reg43=0.5*nodes[11]->pos[0]; reg23=reg52+reg23; reg7=reg48+reg7; reg39=reg39-reg51; T reg54=0.5*nodes[15]->pos[2];
    T reg55=0.5*nodes[14]->pos[2]; T reg56=0.5*nodes[14]->pos[1]; reg40=reg40-reg49; reg47=reg42-reg47; reg42=0.5*nodes[13]->pos[0];
    reg4=reg4-reg54; reg7=reg7-reg28; reg23=reg23-reg43; T reg57=0.5*nodes[12]->pos[0]; reg27=reg27+reg53;
    reg45=reg47-reg45; reg50=reg41-reg50; reg11=reg16-reg11; reg40=reg55+reg40; reg39=reg39+reg56;
    reg16=0.5*nodes[16]->pos[1]; reg41=0.5*nodes[16]->pos[2]; reg4=reg4-reg41; reg47=0.5*nodes[14]->pos[0]; reg27=reg27-reg57;
    reg11=reg51+reg11; reg41=reg40-reg41; reg7=reg7-reg16; reg40=0.5*nodes[15]->pos[0]; reg23=reg23+reg42;
    reg52=reg50-reg52; reg50=0.5*nodes[17]->pos[2]; reg16=reg39-reg16; reg39=0.5*nodes[17]->pos[1]; reg49=reg45+reg49;
    reg23=reg23-reg40; reg45=0.5*nodes[18]->pos[2]; reg41=reg41-reg50; reg27=reg27+reg47; reg30=reg49+reg30;
    reg49=0.5*nodes[16]->pos[0]; reg7=reg39+reg7; reg53=reg52-reg53; reg4=reg50+reg4; reg48=reg11+reg48;
    reg39=reg16-reg39; reg11=0.5*nodes[18]->pos[1]; reg7=reg11+reg7; reg27=reg27-reg49; reg49=reg23-reg49;
    reg16=0.5*nodes[17]->pos[0]; reg43=reg53-reg43; reg4=reg45+reg4; reg48=reg56+reg48; reg23=0.5*nodes[19]->pos[2];
    reg45=reg41+reg45; reg11=reg39+reg11; reg39=0.5*nodes[19]->pos[1]; reg55=reg30+reg55; reg4=reg4-reg23;
    reg43=reg57+reg43; reg7=reg7-reg39; reg49=reg49+reg16; reg16=reg27-reg16; reg27=0.5*nodes[18]->pos[0];
    reg28=reg48+reg28; reg39=reg11+reg39; reg54=reg55+reg54; reg23=reg45+reg23; reg43=reg42+reg43;
    reg49=reg49+reg27; reg11=0.5*nodes[19]->pos[0]; reg30=reg39*reg54; reg41=reg28*reg4; reg28=reg28*reg23;
    reg16=reg27+reg16; reg54=reg54*reg7; reg41=reg54-reg41; reg49=reg49-reg11; reg28=reg30-reg28;
    reg16=reg11+reg16; reg43=reg47+reg43; reg7=reg23*reg7; reg4=reg39*reg4; reg41=reg16*reg41;
    reg28=reg49*reg28; reg43=reg40+reg43; reg4=reg7-reg4; reg4=reg43*reg4; reg41=reg28-reg41;
    T det_jac=reg41+reg4;

    if ( det_jac < 0 ) {
        TNode *tmp[] = {nodes[0],nodes[3],nodes[2],nodes[1],nodes[4],nodes[7],nodes[6],nodes[5],nodes[11],nodes[10],nodes[9],nodes[8],nodes[15],nodes[14],nodes[13],nodes[12],nodes[16],nodes[19],nodes[18],nodes[17]};
        for(unsigned i=0;i<20;++i) nodes[i] = tmp[i];
    }
}
template<class PosNodes,class Pvec,class TVI> void get_var_inter_linear(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; T reg2=1-reg0; T reg3=2*var_inter[2];
    reg1=reg1-1; T reg4=1+reg0; T reg5=reg0-reg1; reg3=reg3-1; T reg6=reg0+reg1;
    T reg7=0.125*reg2; T reg8=1-reg1; T reg9=0.125*reg4; T reg10=0.25*reg4; T reg11=0.25*reg2;
    T reg12=reg3+reg6; T reg13=1-reg3; T reg14=reg7*reg8; T reg15=reg9*reg8; T reg16=1+reg1;
    T reg17=reg5-reg3; T reg18=2*reg14; T reg19=2*reg15; T reg20=reg13*reg11; T reg21=reg13*reg10;
    T reg22=reg1-reg0; reg17=reg17-2; T reg23=reg15*reg13; T reg24=reg14*reg13; T reg25=2+reg12;
    reg9=reg16*reg9; T reg26=reg6-reg3; T reg27=0.25*reg8; T reg28=2*reg9; T reg29=reg25*reg18;
    T reg30=reg17*reg19; T reg31=reg25*reg20; T reg32=reg13*reg9; T reg33=reg17*reg21; reg26=reg26-2;
    T reg34=2*reg24; T reg35=2*reg23; reg7=reg16*reg7; T reg36=reg22-reg3; T reg37=2*reg7;
    T reg38=reg26*reg28; reg36=reg36-2; reg29=reg34-reg29; T reg39=1+reg3; reg30=reg35+reg30;
    T reg40=2*reg32; T reg41=0.25*reg16; T reg42=reg26*reg21; reg31=reg34-reg31; T reg43=reg13*reg27;
    T reg44=reg13*reg7; reg6=reg3-reg6; reg33=reg35+reg33; T reg45=reg33*pos_nodes[1][0]; T reg46=pos_nodes[0][0]*reg31;
    T reg47=reg33*pos_nodes[1][1]; T reg48=reg31*pos_nodes[0][2]; T reg49=reg33*pos_nodes[1][2]; reg14=reg14*reg39; reg6=reg6-2;
    T reg50=reg31*pos_nodes[0][1]; reg5=reg5+reg3; reg38=reg40+reg38; T reg51=reg29*pos_nodes[0][1]; T reg52=reg30*pos_nodes[1][1];
    T reg53=reg36*reg37; reg42=reg40+reg42; T reg54=reg36*reg20; T reg55=reg39*reg11; T reg56=reg43*reg17;
    T reg57=reg29*pos_nodes[0][2]; T reg58=reg43*reg25; T reg59=pos_nodes[0][0]*reg29; T reg60=reg13*reg41; T reg61=reg30*pos_nodes[1][0];
    T reg62=reg30*pos_nodes[1][2]; T reg63=2*reg44; reg59=reg61+reg59; reg53=reg63+reg53; reg61=reg38*pos_nodes[2][0];
    T reg64=reg6*reg18; reg5=reg5-2; reg15=reg15*reg39; reg17=reg23*reg17; reg46=reg45+reg46;
    reg23=reg42*pos_nodes[2][0]; reg45=reg39*reg10; T reg65=reg6*reg55; reg54=reg63+reg54; T reg66=reg26*reg60;
    reg48=reg49+reg48; reg58=reg34-reg58; reg34=2*reg14; reg49=reg42*pos_nodes[2][2]; reg56=reg35+reg56;
    reg57=reg62+reg57; reg35=reg38*pos_nodes[2][2]; reg62=reg38*pos_nodes[2][1]; reg51=reg52+reg51; reg25=reg24*reg25;
    reg50=reg47+reg50; reg24=reg42*pos_nodes[2][1]; reg35=reg57+reg35; reg47=reg53*pos_nodes[3][2]; reg26=reg32*reg26;
    reg65=reg34+reg65; reg32=reg5*reg45; reg52=reg53*pos_nodes[3][0]; reg61=reg59+reg61; reg57=reg17*pos_nodes[1][0];
    reg59=pos_nodes[0][0]*reg25; T reg67=reg56*pos_nodes[1][1]; T reg68=reg58*pos_nodes[0][1]; T reg69=reg5*reg19; reg64=reg34+reg64;
    reg50=reg24-reg50; reg24=reg54*pos_nodes[3][1]; reg62=reg51+reg62; reg51=reg53*pos_nodes[3][1]; T reg70=reg17*pos_nodes[1][1];
    T reg71=reg25*pos_nodes[0][1]; T reg72=reg54*pos_nodes[3][0]; reg46=reg23-reg46; reg48=reg49-reg48; reg23=reg54*pos_nodes[3][2];
    reg49=pow(reg0,2); reg22=reg3+reg22; T reg73=reg56*pos_nodes[1][0]; T reg74=2*reg15; T reg75=reg39*reg27;
    T reg76=reg36*reg60; T reg77=pos_nodes[0][0]*reg58; reg12=reg12-2; reg9=reg9*reg39; reg66=reg40+reg66;
    reg49=1-reg49; reg22=reg22-2; reg36=reg44*reg36; reg7=reg7*reg39; reg40=reg26*pos_nodes[2][0];
    reg59=reg57-reg59; reg52=reg61+reg52; reg44=reg66*pos_nodes[2][0]; reg57=reg64*pos_nodes[4][0]; reg77=reg73-reg77;
    reg61=reg12*reg28; reg69=reg74+reg69; reg73=reg64*pos_nodes[4][2]; reg47=reg35+reg47; reg35=reg65*pos_nodes[4][2];
    reg23=reg48+reg23; reg76=reg63+reg76; reg48=reg6*reg75; reg63=reg58*pos_nodes[0][2]; T reg78=reg56*pos_nodes[1][2];
    T reg79=reg17*pos_nodes[1][2]; T reg80=reg25*pos_nodes[0][2]; T reg81=reg26*pos_nodes[2][1]; reg71=reg70-reg71; reg51=reg62+reg51;
    reg62=2*reg9; reg70=reg64*pos_nodes[4][1]; T reg82=reg65*pos_nodes[4][1]; reg24=reg50+reg24; reg50=reg66*pos_nodes[2][1];
    reg68=reg67-reg68; reg67=pow(reg1,2); reg32=reg74+reg32; T reg83=reg65*pos_nodes[4][0]; reg72=reg46+reg72;
    reg46=reg12*reg45; T reg84=reg66*pos_nodes[2][2]; reg63=reg78-reg63; reg80=reg79-reg80; reg78=reg26*pos_nodes[2][2];
    reg52=reg57-reg52; reg57=reg69*pos_nodes[5][0]; reg79=reg22*reg37; T reg85=reg22*reg55; reg82=reg24-reg82;
    reg24=reg32*pos_nodes[5][1]; T reg86=reg32*pos_nodes[5][0]; reg61=reg62+reg61; T reg87=reg5*reg75; T reg88=reg36*pos_nodes[3][1];
    reg81=reg71+reg81; reg71=reg76*pos_nodes[3][0]; reg77=reg44+reg77; reg83=reg72-reg83; reg44=reg39*reg41;
    reg72=reg36*pos_nodes[3][0]; reg40=reg59+reg40; reg59=0.25*reg49; reg47=reg73-reg47; reg73=reg69*pos_nodes[5][2];
    reg51=reg70-reg51; reg70=reg69*pos_nodes[5][1]; reg67=1-reg67; T reg89=reg32*pos_nodes[5][2]; reg35=reg23-reg35;
    reg6=reg14*reg6; reg48=reg34+reg48; reg14=2*reg7; reg50=reg68+reg50; reg23=reg76*pos_nodes[3][1];
    reg46=reg62+reg46; reg57=reg52+reg57; reg34=reg61*pos_nodes[6][0]; reg52=reg46*pos_nodes[6][1]; reg24=reg82-reg24;
    reg85=reg14+reg85; reg68=reg12*reg44; reg82=reg8*reg59; T reg90=reg48*pos_nodes[4][1]; reg23=reg50-reg23;
    reg49=0.5*reg49; reg50=reg6*pos_nodes[4][0]; reg72=reg40+reg72; reg86=reg83-reg86; reg40=reg46*pos_nodes[6][0];
    reg5=reg15*reg5; reg15=0.25*reg67; reg73=reg47+reg73; reg47=reg61*pos_nodes[6][2]; reg83=reg46*pos_nodes[6][2];
    reg89=reg35-reg89; reg35=reg76*pos_nodes[3][2]; reg84=reg63+reg84; reg78=reg80+reg78; reg63=reg36*pos_nodes[3][2];
    reg70=reg51+reg70; reg51=reg61*pos_nodes[6][1]; reg87=reg74+reg87; reg79=reg14+reg79; reg71=reg77-reg71;
    reg74=reg48*pos_nodes[4][0]; reg77=reg6*pos_nodes[4][1]; reg88=reg81+reg88; reg77=reg88+reg77; reg12=reg9*reg12;
    reg9=reg22*reg44; reg50=reg72+reg50; reg72=reg5*pos_nodes[5][0]; reg51=reg70+reg51; reg70=reg4*reg1;
    reg80=reg79*pos_nodes[7][1]; reg81=reg85*pos_nodes[7][1]; reg47=reg73+reg47; reg73=reg85*pos_nodes[7][2]; reg83=reg89+reg83;
    reg88=reg5*pos_nodes[5][1]; reg89=reg6*pos_nodes[4][2]; T reg91=reg4*reg15; T reg92=reg13*reg49; T reg93=reg79*pos_nodes[7][2];
    T reg94=reg48*pos_nodes[4][2]; reg35=reg84-reg35; reg63=reg78+reg63; reg90=reg23-reg90; reg23=reg87*pos_nodes[5][1];
    reg52=reg24+reg52; reg68=reg62+reg68; reg24=2*reg82; reg74=reg71-reg74; reg62=reg87*pos_nodes[5][0];
    reg71=reg85*pos_nodes[7][0]; reg78=reg79*pos_nodes[7][0]; reg34=reg57+reg34; reg40=reg86+reg40; reg57=reg12*pos_nodes[6][0];
    reg72=reg50+reg72; reg93=reg47+reg93; reg47=reg68*pos_nodes[6][0]; reg62=reg74+reg62; reg50=reg0*reg8;
    reg9=reg14+reg9; reg94=reg35-reg94; reg23=reg90+reg23; reg14=reg68*pos_nodes[6][1]; reg35=reg87*pos_nodes[5][2];
    reg80=reg51+reg80; reg51=reg24*pos_nodes[8][1]; reg59=reg16*reg59; reg74=reg92*pos_nodes[8][2]; reg73=reg83+reg73;
    reg83=reg5*pos_nodes[5][2]; reg84=reg24*pos_nodes[8][2]; reg89=reg63+reg89; reg81=reg52+reg81; reg52=reg92*pos_nodes[8][1];
    reg71=reg40+reg71; reg40=reg92*pos_nodes[8][0]; reg78=reg34+reg78; reg34=reg24*pos_nodes[8][0]; reg63=reg12*pos_nodes[6][1];
    reg88=reg77+reg88; reg77=2*reg91; reg86=reg13*reg70; reg22=reg7*reg22; reg52=reg81-reg52;
    reg7=reg77*pos_nodes[9][1]; reg51=reg80-reg51; reg67=0.5*reg67; reg80=reg13*reg50; reg81=reg86*pos_nodes[9][1];
    reg84=reg93-reg84; reg34=reg78-reg34; reg78=reg77*pos_nodes[9][0]; reg90=reg77*pos_nodes[9][2]; reg15=reg2*reg15;
    reg93=2*reg59; reg57=reg72+reg57; reg72=reg22*pos_nodes[7][0]; reg40=reg71-reg40; reg71=reg86*pos_nodes[9][0];
    T reg95=reg22*pos_nodes[7][1]; reg63=reg88+reg63; reg88=reg1*reg2; T reg96=reg13*reg82; T reg97=reg9*pos_nodes[7][0];
    reg47=reg62+reg47; reg83=reg89+reg83; reg62=reg12*pos_nodes[6][2]; reg74=reg73-reg74; reg14=reg23+reg14;
    reg23=reg9*pos_nodes[7][1]; reg73=reg86*pos_nodes[9][2]; reg35=reg94+reg35; reg89=reg68*pos_nodes[6][2]; reg94=reg80*pos_nodes[8][0];
    reg7=reg51-reg7; reg97=reg47-reg97; reg47=reg96*pos_nodes[8][1]; reg51=reg93*pos_nodes[10][1]; reg89=reg35+reg89;
    reg95=reg63+reg95; reg35=reg9*pos_nodes[7][2]; reg90=reg84-reg90; reg63=reg93*pos_nodes[10][2]; reg84=reg22*pos_nodes[7][2];
    reg62=reg83+reg62; reg83=2*reg15; reg72=reg57+reg72; reg57=reg96*pos_nodes[8][0]; reg71=reg40-reg71;
    reg40=reg13*reg88; T reg98=reg92*pos_nodes[10][0]; T reg99=reg13*reg91; T reg100=reg92*pos_nodes[10][2]; reg73=reg74-reg73;
    reg23=reg14-reg23; reg14=reg80*pos_nodes[8][1]; reg74=reg93*pos_nodes[10][0]; T reg101=reg92*pos_nodes[10][1]; T reg102=reg16*reg0;
    reg81=reg52-reg81; reg78=reg34-reg78; reg34=reg13*reg67; reg51=reg7-reg51; reg7=reg83*pos_nodes[11][1];
    reg52=reg34*pos_nodes[9][1]; reg14=reg23-reg14; reg23=reg83*pos_nodes[11][2]; reg63=reg90-reg63; reg90=reg96*pos_nodes[8][2];
    reg84=reg62+reg84; reg100=reg73+reg100; reg94=reg97-reg94; reg62=reg40*pos_nodes[11][2]; reg73=reg39*reg49;
    reg47=reg95+reg47; reg95=reg99*pos_nodes[9][1]; reg97=reg99*pos_nodes[9][0]; reg57=reg72+reg57; reg72=reg40*pos_nodes[11][1];
    reg101=reg81+reg101; reg81=reg13*reg102; T reg103=reg13*reg59; T reg104=reg80*pos_nodes[8][2]; reg74=reg78-reg74;
    reg78=reg83*pos_nodes[11][0]; T reg105=reg34*pos_nodes[9][0]; T reg106=pow(reg3,2); reg35=reg89-reg35; reg98=reg71+reg98;
    reg71=reg40*pos_nodes[11][0]; reg62=reg100-reg62; reg89=reg73*pos_nodes[12][2]; reg105=reg94+reg105; reg52=reg14+reg52;
    reg14=reg73*pos_nodes[12][1]; reg13=reg13*reg15; reg94=reg39*reg70; reg72=reg101-reg72; reg100=reg103*pos_nodes[10][0];
    reg101=reg81*pos_nodes[10][0]; reg104=reg35-reg104; reg95=reg47+reg95; reg35=reg103*pos_nodes[10][1]; reg97=reg57+reg97;
    reg47=reg34*pos_nodes[9][2]; reg57=reg81*pos_nodes[10][1]; T reg107=reg73*pos_nodes[12][0]; reg78=reg74-reg78; reg74=reg24*pos_nodes[12][2];
    T reg108=reg99*pos_nodes[9][2]; reg90=reg84+reg90; reg106=1-reg106; reg71=reg98-reg71; reg84=reg24*pos_nodes[12][0];
    reg98=reg24*pos_nodes[12][1]; reg7=reg51-reg7; reg23=reg63-reg23; reg74=reg23+reg74; reg23=reg81*pos_nodes[10][2];
    reg51=reg77*pos_nodes[13][2]; reg47=reg104+reg47; reg63=reg94*pos_nodes[13][2]; reg89=reg62-reg89; reg62=reg94*pos_nodes[13][0];
    reg107=reg71-reg107; reg71=0.25*reg106; reg104=reg103*pos_nodes[10][2]; reg98=reg7+reg98; reg7=reg77*pos_nodes[13][1];
    T reg109=reg34*pos_nodes[11][1]; reg57=reg52-reg57; reg84=reg78+reg84; reg108=reg90+reg108; reg52=reg77*pos_nodes[13][0];
    reg35=reg95+reg35; reg78=reg13*pos_nodes[11][1]; reg90=reg39*reg50; reg101=reg105-reg101; reg14=reg72-reg14;
    reg72=reg34*pos_nodes[11][0]; reg95=reg94*pos_nodes[13][1]; reg105=reg13*pos_nodes[11][0]; reg100=reg97+reg100; reg82=reg39*reg82;
    reg97=reg73*pos_nodes[14][0]; reg95=reg14-reg95; reg14=reg73*pos_nodes[14][1]; reg62=reg107-reg62; reg107=reg2*reg71;
    T reg110=reg90*pos_nodes[12][1]; reg109=reg57-reg109; reg52=reg84+reg52; reg57=reg93*pos_nodes[14][0]; reg84=reg39*reg67;
    reg63=reg89-reg63; reg89=reg73*pos_nodes[14][2]; T reg111=reg82*pos_nodes[12][0]; reg105=reg100+reg105; reg91=reg39*reg91;
    reg100=reg39*reg88; T reg112=reg93*pos_nodes[14][1]; T reg113=reg82*pos_nodes[12][1]; reg7=reg98+reg7; reg78=reg35+reg78;
    reg51=reg74+reg51; reg35=reg93*pos_nodes[14][2]; reg2=reg3*reg2; reg72=reg101-reg72; reg74=reg34*pos_nodes[11][2];
    reg98=reg90*pos_nodes[12][0]; reg23=reg47-reg23; reg47=reg13*pos_nodes[11][2]; reg104=reg108+reg104; reg101=reg39*reg102;
    reg35=reg51+reg35; reg51=reg83*pos_nodes[15][0]; reg57=reg52+reg57; reg52=reg83*pos_nodes[15][1]; reg108=reg83*pos_nodes[15][2];
    reg89=reg63+reg89; reg63=reg100*pos_nodes[15][2]; T reg114=reg91*pos_nodes[13][0]; reg111=reg105+reg111; reg105=reg84*pos_nodes[13][0];
    reg98=reg72-reg98; reg59=reg39*reg59; reg113=reg78+reg113; reg72=reg91*pos_nodes[13][1]; reg78=reg100*pos_nodes[15][1];
    reg14=reg95+reg14; reg95=reg82*pos_nodes[12][2]; T reg115=reg90*pos_nodes[12][2]; reg74=reg23-reg74; reg97=reg62+reg97;
    reg47=reg104+reg47; reg23=2*reg107; reg62=reg4*reg3; reg104=reg8*reg2; reg71=reg4*reg71;
    reg4=reg84*pos_nodes[13][1]; reg110=reg109-reg110; reg112=reg7+reg112; reg7=reg100*pos_nodes[15][0]; reg109=reg91*pos_nodes[13][2];
    reg95=reg47+reg95; reg47=reg104*pos_nodes[16][2]; reg108=reg35+reg108; reg15=reg39*reg15; reg35=2*reg71;
    reg72=reg113+reg72; reg39=reg59*pos_nodes[14][1]; reg113=reg104*pos_nodes[16][1]; reg51=reg57+reg51; reg57=reg104*pos_nodes[16][0];
    reg52=reg112+reg52; reg112=reg8*reg62; reg106=0.5*reg106; reg114=reg111+reg114; reg115=reg74-reg115;
    reg74=reg84*pos_nodes[13][2]; reg111=reg59*pos_nodes[14][0]; reg4=reg110+reg4; reg63=reg89-reg63; reg89=reg23*pos_nodes[16][2];
    reg110=reg23*pos_nodes[16][0]; T reg116=reg101*pos_nodes[14][0]; T reg117=reg23*pos_nodes[16][1]; T reg118=reg101*pos_nodes[14][1]; reg78=reg14-reg78;
    reg7=reg97-reg7; reg105=reg98+reg105; reg14=reg8*reg106; reg97=reg35*pos_nodes[17][1]; reg47=reg108-reg47;
    reg98=reg112*pos_nodes[17][2]; reg108=reg16*reg62; T reg119=reg112*pos_nodes[17][0]; reg57=reg51-reg57; reg113=reg52-reg113;
    reg51=reg15*pos_nodes[15][1]; reg39=reg72+reg39; reg52=reg84*pos_nodes[15][0]; reg116=reg105-reg116; reg72=reg112*pos_nodes[17][1];
    reg118=reg4-reg118; reg4=reg8*reg107; reg89=reg63-reg89; reg63=reg35*pos_nodes[17][2]; reg105=reg35*pos_nodes[17][0];
    T reg120=reg59*pos_nodes[14][2]; T reg121=reg15*pos_nodes[15][0]; reg111=reg114+reg111; reg110=reg7-reg110; reg7=reg84*pos_nodes[15][1];
    reg109=reg95+reg109; reg117=reg78-reg117; reg78=reg101*pos_nodes[14][2]; reg74=reg115+reg74; reg72=reg113-reg72;
    reg105=reg110-reg105; reg52=reg116-reg52; reg95=reg35*pos_nodes[18][0]; reg110=reg14*pos_nodes[16][0]; reg113=reg15*pos_nodes[15][2];
    reg120=reg109+reg120; reg109=reg35*pos_nodes[18][1]; reg97=reg117-reg97; reg7=reg118-reg7; reg114=reg14*pos_nodes[16][1];
    reg8=reg8*reg71; reg115=reg35*pos_nodes[18][2]; reg63=reg89-reg63; reg89=reg4*pos_nodes[16][0]; reg121=reg111+reg121;
    reg111=reg84*pos_nodes[15][2]; reg78=reg74-reg78; reg74=reg108*pos_nodes[18][1]; reg116=reg16*reg2; reg51=reg39+reg51;
    reg39=reg4*pos_nodes[16][1]; reg119=reg57-reg119; reg57=reg108*pos_nodes[18][0]; reg117=reg108*pos_nodes[18][2]; reg98=reg47-reg98;
    reg47=reg8*pos_nodes[17][0]; reg71=reg16*reg71; reg57=reg119-reg57; reg95=reg105+reg95; reg89=reg121+reg89;
    reg105=reg23*pos_nodes[19][0]; reg118=reg16*reg106; reg119=reg14*pos_nodes[17][1]; reg114=reg7-reg114; reg7=reg116*pos_nodes[19][0];
    reg39=reg51+reg39; reg51=reg14*pos_nodes[16][2]; reg111=reg78-reg111; reg78=reg116*pos_nodes[19][1]; reg110=reg52-reg110;
    reg74=reg72-reg74; reg52=reg23*pos_nodes[19][1]; reg72=reg8*pos_nodes[17][1]; reg109=reg97+reg109; reg113=reg120+reg113;
    reg97=reg4*pos_nodes[16][2]; reg117=reg98-reg117; reg98=reg14*pos_nodes[17][0]; reg115=reg63+reg115; reg63=reg23*pos_nodes[19][2];
    reg120=reg116*pos_nodes[19][2]; reg7=reg57-reg7; reg120=reg117-reg120; reg51=reg111-reg51; reg57=reg14*pos_nodes[17][2];
    reg47=reg89+reg47; reg89=reg71*pos_nodes[18][0]; reg111=reg118*pos_nodes[18][0]; reg107=reg16*reg107; reg63=reg115+reg63;
    reg98=reg110+reg98; reg16=reg71*pos_nodes[18][1]; reg72=reg39+reg72; reg39=reg118*pos_nodes[18][1]; reg110=reg8*pos_nodes[17][2];
    reg97=reg113+reg97; reg105=reg95+reg105; reg119=reg114+reg119; reg78=reg74-reg78; reg52=reg109+reg52;
    reg74=reg118*pos_nodes[19][0]; reg95=reg71*pos_nodes[18][2]; reg110=reg97+reg110; reg111=reg98+reg111; reg97=reg107*pos_nodes[19][0];
    reg89=reg47+reg89; reg47=reg52*reg120; reg98=reg118*pos_nodes[18][2]; reg57=reg51+reg57; reg51=reg78*reg63;
    reg109=reg105*reg120; reg113=reg118*pos_nodes[19][1]; reg114=reg107*pos_nodes[19][1]; reg115=reg7*reg63; reg16=reg72+reg16;
    reg39=reg119+reg39; reg113=reg39-reg113; reg74=reg111-reg74; reg39=reg118*pos_nodes[19][2]; reg97=reg89+reg97;
    reg98=reg57+reg98; reg114=reg16+reg114; reg16=reg7*reg52; reg115=reg109-reg115; reg57=reg105*reg78;
    reg51=reg47-reg51; reg95=reg110+reg95; reg72=reg107*pos_nodes[19][2]; reg97=pos[0]-reg97; reg39=reg98-reg39;
    reg114=pos[1]-reg114; reg72=reg95+reg72; reg16=reg57-reg16; reg89=reg74*var_inter[0]; reg95=reg113*var_inter[0];
    reg98=reg113*reg115; reg110=reg74*reg51; reg111=reg113*reg63; reg117=reg78*reg39; reg119=reg113*reg120;
    reg121=reg39*reg16; reg110=reg98-reg110; reg98=reg74*reg120; T reg122=reg39*var_inter[0]; reg95=reg114+reg95;
    reg114=reg52*var_inter[1]; reg89=reg97+reg89; reg97=reg105*var_inter[1]; reg72=pos[2]-reg72; T reg123=reg7*reg39;
    T reg124=reg105*reg39; T reg125=reg74*reg63; T reg126=reg52*reg39; reg124=reg125-reg124; T reg127=reg74*reg78;
    T reg128=reg7*reg113; T reg129=reg74*reg52; reg123=reg98-reg123; T reg130=reg7*var_inter[2]; T reg131=reg78*var_inter[2];
    reg89=reg97+reg89; reg95=reg114+reg95; reg97=reg63*var_inter[1]; reg122=reg72+reg122; reg121=reg110-reg121;
    reg126=reg111-reg126; reg117=reg119-reg117; reg72=reg105*reg113; reg128=reg127-reg128; reg126=reg126/reg121;
    reg123=reg123/reg121; reg115=reg115/reg121; reg51=reg51/reg121; reg117=reg117/reg121; reg124=reg124/reg121;
    reg89=reg130+reg89; reg110=reg120*var_inter[2]; reg72=reg129-reg72; reg95=reg131+reg95; reg122=reg97+reg122;
    reg72=reg72/reg121; reg117=reg89*reg117; reg123=reg123*reg95; reg16=reg16/reg121; reg115=reg115*reg95;
    reg126=reg89*reg126; reg124=reg124*reg95; reg122=reg110+reg122; reg121=reg128/reg121; reg51=reg89*reg51;
    reg126=reg124-reg126; reg72=reg122*reg72; reg123=reg117-reg123; reg121=reg121*reg122; reg51=reg115-reg51;
    reg16=reg16*reg122; var_inter[1]=reg121+reg123; var_inter[0]=reg51-reg16; var_inter[2]=reg126-reg72;

}
template<class PosNodes,class Pvec,class TVI> void get_var_inter(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; reg1=reg1-1; T reg2=1-reg0;
    T reg3=2*var_inter[2]; T reg4=1+reg0; T reg5=reg0-reg1; T reg6=0.125*reg2; T reg7=1-reg1;
    T reg8=0.125*reg4; T reg9=reg0+reg1; reg3=reg3-1; T reg10=reg6*reg7; T reg11=1+reg1;
    T reg12=reg8*reg7; T reg13=reg5-reg3; T reg14=0.25*reg2; T reg15=0.25*reg4; T reg16=reg3+reg9;
    T reg17=1-reg3; T reg18=reg14*reg17; T reg19=reg15*reg17; T reg20=2*reg12; reg13=reg13-2;
    T reg21=2*reg10; T reg22=2+reg16; T reg23=reg1-reg0; T reg24=reg10*reg17; reg8=reg11*reg8;
    T reg25=reg9-reg3; T reg26=reg12*reg17; T reg27=2*reg26; T reg28=2*reg24; T reg29=reg21*reg22;
    T reg30=reg13*reg20; T reg31=2*reg8; T reg32=0.25*reg7; T reg33=reg8*reg17; T reg34=reg13*reg19;
    reg25=reg25-2; T reg35=reg23-reg3; reg6=reg11*reg6; T reg36=reg18*reg22; T reg37=2*reg33;
    reg29=reg28-reg29; reg36=reg28-reg36; reg30=reg27+reg30; reg34=reg27+reg34; T reg38=reg32*reg17;
    T reg39=reg25*reg31; T reg40=reg6*reg17; T reg41=2*reg6; T reg42=1+reg3; reg9=reg3-reg9;
    T reg43=reg25*reg19; T reg44=0.25*reg11; reg35=reg35-2; reg43=reg37+reg43; T reg45=reg13*reg38;
    T reg46=pos_nodes[0][1]*reg36; T reg47=reg34*pos_nodes[1][1]; reg5=reg5+reg3; T reg48=2*reg40; T reg49=pos_nodes[0][0]*reg29;
    T reg50=reg30*pos_nodes[1][0]; T reg51=reg44*reg17; reg39=reg37+reg39; T reg52=reg35*reg41; T reg53=reg35*reg18;
    T reg54=pos_nodes[0][0]*reg36; T reg55=reg34*pos_nodes[1][0]; T reg56=reg36*pos_nodes[0][2]; T reg57=reg34*pos_nodes[1][2]; reg10=reg10*reg42;
    T reg58=reg14*reg42; reg9=reg9-2; T reg59=reg38*reg22; T reg60=reg30*pos_nodes[1][2]; T reg61=pos_nodes[0][1]*reg29;
    T reg62=reg30*pos_nodes[1][1]; T reg63=reg29*pos_nodes[0][2]; reg52=reg48+reg52; reg63=reg60+reg63; reg53=reg48+reg53;
    reg54=reg55+reg54; reg5=reg5-2; reg55=reg43*pos_nodes[2][0]; reg26=reg13*reg26; reg13=reg58*reg9;
    reg24=reg22*reg24; reg22=reg39*pos_nodes[2][1]; reg46=reg47+reg46; reg47=reg43*pos_nodes[2][1]; reg61=reg62+reg61;
    reg27=reg45+reg27; reg45=reg25*reg51; reg60=reg15*reg42; reg59=reg28-reg59; reg49=reg50+reg49;
    reg28=reg43*pos_nodes[2][2]; reg50=reg39*pos_nodes[2][0]; reg62=reg21*reg9; reg56=reg57+reg56; reg57=2*reg10;
    reg12=reg12*reg42; T reg64=reg39*pos_nodes[2][2]; T reg65=pos_nodes[0][0]*reg59; T reg66=reg5*reg60; T reg67=reg27*pos_nodes[1][0];
    T reg68=pow(reg0,2); reg8=reg8*reg42; reg63=reg64+reg63; reg64=pos_nodes[3][2]*reg52; reg56=reg28-reg56;
    reg28=pos_nodes[3][2]*reg53; T reg69=pos_nodes[0][1]*reg24; T reg70=reg26*pos_nodes[1][1]; reg61=reg22+reg61; reg22=pos_nodes[3][1]*reg52;
    reg46=reg47-reg46; reg47=pos_nodes[3][1]*reg53; T reg71=pos_nodes[0][1]*reg59; T reg72=reg27*pos_nodes[1][1]; T reg73=pos_nodes[0][0]*reg24;
    T reg74=reg26*pos_nodes[1][0]; reg49=reg50+reg49; reg50=pos_nodes[3][0]*reg52; reg62=reg57+reg62; reg16=reg16-2;
    T reg75=reg5*reg20; reg54=reg55-reg54; reg55=pos_nodes[3][0]*reg53; reg13=reg57+reg13; reg23=reg23+reg3;
    reg37=reg45+reg37; reg33=reg25*reg33; reg25=2*reg12; reg45=reg35*reg51; T reg76=reg32*reg42;
    reg40=reg35*reg40; reg23=reg23-2; reg35=pos_nodes[4][1]*reg62; reg6=reg42*reg6; T reg77=pos_nodes[4][2]*reg13;
    reg46=reg47+reg46; reg47=pos_nodes[4][1]*reg13; reg56=reg28+reg56; reg61=reg22+reg61; reg22=pos_nodes[0][2]*reg24;
    reg28=reg26*pos_nodes[1][2]; reg75=reg25+reg75; T reg78=reg76*reg9; T reg79=2*reg8; T reg80=reg16*reg31;
    reg66=reg25+reg66; reg48=reg45+reg48; reg45=reg16*reg60; reg65=reg67-reg65; reg67=pos_nodes[4][2]*reg62;
    reg49=reg50+reg49; reg50=reg37*pos_nodes[2][0]; reg69=reg70-reg69; reg70=reg33*pos_nodes[2][1]; reg73=reg74-reg73;
    reg74=pos_nodes[4][0]*reg13; reg71=reg72-reg71; reg72=pos_nodes[4][0]*reg62; reg54=reg55+reg54; reg55=reg37*pos_nodes[2][1];
    reg68=1-reg68; reg63=reg64+reg63; reg64=reg33*pos_nodes[2][0]; T reg81=pow(reg1,2); T reg82=reg27*pos_nodes[1][2];
    T reg83=reg59*pos_nodes[0][2]; reg80=reg79+reg80; reg73=reg64+reg73; reg64=pos_nodes[5][1]*reg66; reg63=reg67-reg63;
    reg67=2*reg6; T reg84=reg44*reg42; T reg85=reg23*reg41; T reg86=pos_nodes[5][2]*reg75; T reg87=pos_nodes[5][0]*reg66;
    reg74=reg54-reg74; reg77=reg56-reg77; reg54=pos_nodes[5][2]*reg66; reg56=reg40*pos_nodes[3][0]; T reg88=pos_nodes[5][1]*reg75;
    T reg89=reg40*pos_nodes[3][1]; T reg90=reg37*pos_nodes[2][2]; T reg91=pos_nodes[3][1]*reg48; reg71=reg55+reg71; reg55=pos_nodes[5][0]*reg75;
    T reg92=pos_nodes[3][0]*reg48; reg65=reg50+reg65; reg83=reg82-reg83; reg49=reg72-reg49; reg9=reg10*reg9;
    reg69=reg70+reg69; reg81=1-reg81; reg61=reg35-reg61; reg10=0.25*reg68; reg22=reg28-reg22;
    reg28=reg33*pos_nodes[2][2]; reg47=reg46-reg47; reg78=reg57+reg78; reg35=reg23*reg58; reg45=reg79+reg45;
    reg46=reg5*reg76; reg49=reg55+reg49; reg69=reg89+reg69; reg50=pos_nodes[4][1]*reg9; reg55=pos_nodes[6][2]*reg80;
    reg57=pos_nodes[6][0]*reg80; reg83=reg90+reg83; reg54=reg77-reg54; reg70=pos_nodes[3][2]*reg48; reg61=reg88+reg61;
    reg72=pos_nodes[6][2]*reg45; reg85=reg67+reg85; reg68=0.5*reg68; reg64=reg47-reg64; reg47=reg16*reg84;
    reg46=reg25+reg46; reg35=reg67+reg35; reg25=reg40*pos_nodes[3][2]; reg22=reg28+reg22; reg28=pos_nodes[6][1]*reg45;
    reg5=reg12*reg5; reg12=reg10*reg7; reg77=pos_nodes[4][0]*reg78; reg92=reg65-reg92; reg91=reg71-reg91;
    reg65=pos_nodes[4][1]*reg78; reg71=0.25*reg81; reg63=reg86+reg63; reg73=reg56+reg73; reg56=pos_nodes[4][0]*reg9;
    reg87=reg74-reg87; reg74=pos_nodes[6][1]*reg80; reg82=pos_nodes[6][0]*reg45; reg86=2*reg12; reg16=reg8*reg16;
    reg8=pos_nodes[7][0]*reg85; reg88=pos_nodes[5][1]*reg46; reg89=reg35*pos_nodes[7][1]; reg87=reg82+reg87; reg77=reg92-reg77;
    reg82=reg5*pos_nodes[5][1]; reg56=reg73+reg56; reg73=pos_nodes[7][0]*reg35; reg63=reg55+reg63; reg55=pos_nodes[5][0]*reg46;
    reg49=reg57+reg49; reg65=reg91-reg65; reg57=reg4*reg71; reg50=reg69+reg50; reg64=reg28+reg64;
    reg28=reg68*reg17; reg69=reg85*pos_nodes[7][1]; reg90=reg23*reg84; reg54=reg72+reg54; reg47=reg79+reg47;
    reg72=reg5*pos_nodes[5][0]; reg79=reg4*reg1; reg91=reg35*pos_nodes[7][2]; reg92=reg85*pos_nodes[7][2]; reg70=reg83-reg70;
    reg83=pos_nodes[4][2]*reg78; reg61=reg74+reg61; reg74=pos_nodes[4][2]*reg9; reg22=reg25+reg22; reg25=pos_nodes[8][1]*reg28;
    T reg93=reg16*pos_nodes[6][1]; reg64=reg89+reg64; reg56=reg72+reg56; reg72=reg16*pos_nodes[6][0]; reg89=pos_nodes[8][1]*reg86;
    reg61=reg69+reg61; reg65=reg88+reg65; reg69=pos_nodes[6][1]*reg47; reg88=reg79*reg17; reg67=reg90+reg67;
    reg90=reg5*pos_nodes[5][2]; T reg94=pos_nodes[8][2]*reg28; reg54=reg91+reg54; reg91=2*reg57; reg74=reg22+reg74;
    reg63=reg92+reg63; reg83=reg70-reg83; reg6=reg23*reg6; reg22=pos_nodes[5][2]*reg46; reg10=reg10*reg11;
    reg23=pos_nodes[8][0]*reg28; reg87=reg73+reg87; reg77=reg55+reg77; reg55=reg7*reg0; reg70=pos_nodes[8][2]*reg86;
    reg73=pos_nodes[6][0]*reg47; reg49=reg8+reg49; reg8=pos_nodes[8][0]*reg86; reg50=reg82+reg50; reg82=pos_nodes[9][1]*reg88;
    reg25=reg64-reg25; reg81=0.5*reg81; reg64=reg16*pos_nodes[6][2]; reg92=pos_nodes[9][2]*reg91; T reg95=reg2*reg1;
    reg74=reg90+reg74; reg90=reg12*reg17; T reg96=pos_nodes[7][0]*reg67; reg77=reg73+reg77; reg73=reg55*reg17;
    reg71=reg71*reg2; reg65=reg69+reg65; reg69=reg67*pos_nodes[7][1]; T reg97=pos_nodes[9][0]*reg91; reg8=reg49-reg8;
    reg50=reg93+reg50; reg49=pos_nodes[6][2]*reg47; reg93=reg6*pos_nodes[7][1]; T reg98=pos_nodes[9][1]*reg91; reg89=reg61-reg89;
    reg61=2*reg10; reg83=reg22+reg83; reg22=reg6*pos_nodes[7][0]; reg94=reg54-reg94; reg54=pos_nodes[9][2]*reg88;
    reg70=reg63-reg70; reg56=reg72+reg56; reg63=pos_nodes[9][0]*reg88; reg23=reg87-reg23; reg50=reg93+reg50;
    reg72=reg90*pos_nodes[8][1]; reg92=reg70-reg92; reg70=pos_nodes[10][2]*reg61; reg87=pos_nodes[10][1]*reg61; reg98=reg89-reg98;
    reg89=pos_nodes[8][1]*reg73; reg93=pos_nodes[10][1]*reg28; T reg99=reg57*reg17; reg82=reg25-reg82; reg74=reg64+reg74;
    reg83=reg49+reg83; reg25=reg67*pos_nodes[7][2]; reg49=reg6*pos_nodes[7][2]; reg64=pos_nodes[10][2]*reg28; reg54=reg94-reg54;
    reg94=reg11*reg0; reg96=reg77-reg96; reg77=pos_nodes[8][0]*reg73; T reg100=reg95*reg17; T reg101=reg81*reg17;
    reg63=reg23-reg63; reg23=pos_nodes[10][0]*reg28; T reg102=2*reg71; reg97=reg8-reg97; reg8=pos_nodes[10][0]*reg61;
    reg56=reg22+reg56; reg22=reg90*pos_nodes[8][0]; reg69=reg65-reg69; reg65=pow(reg3,2); T reg103=reg10*reg17;
    reg93=reg82+reg93; reg82=pos_nodes[11][1]*reg100; T reg104=reg90*pos_nodes[8][2]; reg74=reg49+reg74; reg49=pos_nodes[9][1]*reg101;
    T reg105=reg99*pos_nodes[9][0]; reg22=reg56+reg22; reg56=reg68*reg42; T reg106=pos_nodes[11][2]*reg102; reg70=reg92-reg70;
    reg87=reg98-reg87; reg92=pos_nodes[11][1]*reg102; reg23=reg63+reg23; reg63=pos_nodes[11][0]*reg100; reg98=pos_nodes[11][0]*reg102;
    reg8=reg97-reg8; reg72=reg50+reg72; reg50=reg99*pos_nodes[9][1]; reg97=pos_nodes[11][2]*reg100; reg64=reg54+reg64;
    reg54=pos_nodes[8][2]*reg73; reg25=reg83-reg25; reg83=pos_nodes[9][0]*reg101; reg77=reg96-reg77; reg89=reg69-reg89;
    reg69=reg94*reg17; reg96=pos_nodes[10][0]*reg69; reg83=reg77+reg83; reg77=pos_nodes[12][2]*reg86; reg106=reg70-reg106;
    reg54=reg25-reg54; reg25=pos_nodes[9][2]*reg101; reg92=reg87-reg92; reg70=pos_nodes[12][1]*reg86; reg49=reg89+reg49;
    reg87=pos_nodes[10][1]*reg69; reg17=reg71*reg17; reg63=reg23-reg63; reg23=pos_nodes[12][0]*reg56; reg89=pos_nodes[12][0]*reg86;
    reg98=reg8-reg98; reg97=reg64-reg97; reg8=pos_nodes[12][2]*reg56; reg50=reg72+reg50; reg64=pos_nodes[10][1]*reg103;
    reg72=reg99*pos_nodes[9][2]; reg104=reg74+reg104; reg74=pos_nodes[12][1]*reg56; T reg107=reg79*reg42; reg82=reg93-reg82;
    reg65=1-reg65; reg105=reg22+reg105; reg22=pos_nodes[10][0]*reg103; reg12=reg12*reg42; reg23=reg63-reg23;
    reg63=pos_nodes[13][0]*reg107; reg93=reg17*pos_nodes[11][1]; T reg108=pos_nodes[13][2]*reg91; reg89=reg98+reg89; reg98=pos_nodes[13][1]*reg107;
    reg74=reg82-reg74; reg82=reg55*reg42; T reg109=0.25*reg65; reg64=reg50+reg64; reg50=pos_nodes[13][2]*reg107;
    reg8=reg97-reg8; reg97=pos_nodes[11][1]*reg101; T reg110=pos_nodes[13][0]*reg91; T reg111=pos_nodes[10][2]*reg69; reg25=reg54+reg25;
    reg96=reg83-reg96; reg87=reg49-reg87; reg49=pos_nodes[11][0]*reg101; reg77=reg106+reg77; reg72=reg104+reg72;
    reg70=reg92+reg70; reg22=reg105+reg22; reg54=pos_nodes[10][2]*reg103; reg83=pos_nodes[13][1]*reg91; reg92=reg17*pos_nodes[11][0];
    reg104=reg17*pos_nodes[11][2]; reg105=pos_nodes[12][0]*reg82; reg77=reg108+reg77; reg64=reg93+reg64; reg93=pos_nodes[12][1]*reg12;
    reg106=pos_nodes[14][2]*reg56; reg50=reg8-reg50; reg8=pos_nodes[14][2]*reg61; reg22=reg92+reg22; reg92=pos_nodes[12][0]*reg12;
    reg108=pos_nodes[11][2]*reg101; T reg112=reg3*reg2; T reg113=pos_nodes[14][1]*reg56; T reg114=reg95*reg42; reg98=reg74-reg98;
    reg54=reg72+reg54; reg72=reg81*reg42; reg63=reg23-reg63; reg23=pos_nodes[14][0]*reg56; reg2=reg2*reg109;
    reg74=pos_nodes[14][1]*reg61; T reg115=pos_nodes[14][0]*reg61; reg89=reg110+reg89; reg70=reg83+reg70; reg57=reg57*reg42;
    reg49=reg96-reg49; reg83=pos_nodes[12][1]*reg82; reg97=reg87-reg97; reg111=reg25-reg111; reg108=reg111-reg108;
    reg25=pos_nodes[12][2]*reg82; reg87=pos_nodes[15][2]*reg102; reg96=reg7*reg112; reg110=reg4*reg3; reg111=reg94*reg42;
    T reg116=pos_nodes[12][2]*reg12; reg8=reg77+reg8; reg105=reg49-reg105; reg49=pos_nodes[13][0]*reg72; reg77=2*reg2;
    reg10=reg10*reg42; reg106=reg50+reg106; reg50=pos_nodes[15][2]*reg114; T reg117=pos_nodes[15][0]*reg114; reg23=reg63+reg23;
    reg109=reg4*reg109; reg54=reg104+reg54; reg4=pos_nodes[15][1]*reg102; reg74=reg70+reg74; reg63=pos_nodes[13][1]*reg57;
    reg70=pos_nodes[13][0]*reg57; reg83=reg97-reg83; reg97=pos_nodes[15][1]*reg114; reg113=reg98+reg113; reg92=reg22+reg92;
    reg22=pos_nodes[15][0]*reg102; reg115=reg89+reg115; reg93=reg64+reg93; reg64=pos_nodes[13][1]*reg72; reg50=reg106-reg50;
    reg89=pos_nodes[16][2]*reg77; reg22=reg115+reg22; reg117=reg23-reg117; reg23=pos_nodes[16][0]*reg96; reg93=reg63+reg93;
    reg63=reg10*pos_nodes[14][1]; reg98=pos_nodes[16][1]*reg96; reg4=reg74+reg4; reg74=pos_nodes[16][0]*reg77; reg65=0.5*reg65;
    reg87=reg8+reg87; reg8=pos_nodes[16][2]*reg96; reg104=pos_nodes[13][2]*reg57; reg83=reg64+reg83; reg64=2*reg109;
    reg106=pos_nodes[16][1]*reg77; reg97=reg113-reg97; reg116=reg54+reg116; reg92=reg70+reg92; reg42=reg71*reg42;
    reg54=reg10*pos_nodes[14][0]; reg70=pos_nodes[14][0]*reg111; reg105=reg49+reg105; reg49=pos_nodes[14][1]*reg111; reg71=pos_nodes[13][2]*reg72;
    reg25=reg108-reg25; reg108=reg7*reg110; reg113=pos_nodes[17][2]*reg108; reg115=reg42*pos_nodes[15][0]; reg8=reg87-reg8;
    reg116=reg104+reg116; reg54=reg92+reg54; reg70=reg105-reg70; reg87=pos_nodes[15][0]*reg72; reg92=reg10*pos_nodes[14][2];
    reg104=pos_nodes[17][1]*reg108; reg98=reg4-reg98; reg4=reg11*reg110; reg105=reg7*reg65; T reg118=reg7*reg2;
    reg23=reg22-reg23; reg22=pos_nodes[17][0]*reg108; reg49=reg83-reg49; reg83=pos_nodes[15][1]*reg72; T reg119=reg42*pos_nodes[15][1];
    reg63=reg93+reg63; reg93=pos_nodes[17][1]*reg64; reg74=reg117-reg74; reg106=reg97-reg106; reg97=pos_nodes[14][2]*reg111;
    reg25=reg71+reg25; reg89=reg50-reg89; reg50=pos_nodes[17][2]*reg64; reg71=pos_nodes[17][0]*reg64; reg113=reg8-reg113;
    reg8=pos_nodes[15][2]*reg72; reg22=reg23-reg22; reg23=pos_nodes[16][0]*reg105; reg117=pos_nodes[18][1]*reg64; T reg120=pos_nodes[18][0]*reg4;
    T reg121=pos_nodes[18][2]*reg4; T reg122=reg42*pos_nodes[15][2]; reg93=reg106-reg93; reg92=reg116+reg92; reg97=reg25-reg97;
    reg25=reg118*pos_nodes[16][0]; reg106=pos_nodes[18][0]*reg64; reg71=reg74-reg71; reg83=reg49-reg83; reg119=reg63+reg119;
    reg49=pos_nodes[16][1]*reg105; reg50=reg89-reg50; reg63=pos_nodes[18][2]*reg64; reg115=reg54+reg115; reg54=reg118*pos_nodes[16][1];
    reg7=reg7*reg109; reg74=pos_nodes[18][1]*reg4; reg104=reg98-reg104; reg89=reg11*reg112; reg87=reg70-reg87;
    reg115=reg25+reg115; reg25=pos_nodes[17][1]*reg105; reg49=reg83-reg49; reg70=pos_nodes[17][0]*reg105; reg83=reg11*reg65;
    reg122=reg92+reg122; reg23=reg87-reg23; reg117=reg93+reg117; reg106=reg71+reg106; reg71=pos_nodes[19][0]*reg77;
    reg119=reg54+reg119; reg63=reg50+reg63; reg50=pos_nodes[19][2]*reg77; reg109=reg11*reg109; reg54=reg7*pos_nodes[17][1];
    reg87=pos_nodes[19][1]*reg89; reg74=reg104-reg74; reg120=reg22-reg120; reg22=pos_nodes[19][0]*reg89; reg92=reg7*pos_nodes[17][0];
    reg121=reg113-reg121; reg93=pos_nodes[19][2]*reg89; reg8=reg97-reg8; reg97=pos_nodes[16][2]*reg105; reg98=reg118*pos_nodes[16][2];
    reg104=pos_nodes[19][1]*reg77; reg71=reg106+reg71; reg106=reg109*pos_nodes[18][1]; reg49=reg25+reg49; reg119=reg54+reg119;
    reg25=pos_nodes[18][1]*reg83; reg54=reg109*pos_nodes[18][0]; reg104=reg117+reg104; reg115=reg92+reg115; reg50=reg63+reg50;
    reg63=pos_nodes[18][0]*reg83; reg23=reg70+reg23; reg87=reg74-reg87; reg2=reg11*reg2; reg22=reg120-reg22;
    reg11=pos_nodes[17][2]*reg105; reg97=reg8-reg97; reg122=reg98+reg122; reg8=reg7*pos_nodes[17][2]; reg93=reg121-reg93;
    reg70=pos_nodes[19][0]*reg83; reg63=reg23+reg63; reg122=reg8+reg122; reg54=reg115+reg54; reg8=reg2*pos_nodes[19][0];
    reg23=reg109*pos_nodes[18][2]; reg74=pos_nodes[19][1]*reg83; reg92=reg22*reg50; reg98=reg71*reg93; reg113=reg87*reg50;
    reg25=reg49+reg25; reg49=reg104*reg93; reg115=pos_nodes[18][2]*reg83; reg116=reg2*pos_nodes[19][1]; reg106=reg119+reg106;
    reg97=reg11+reg97; reg115=reg97+reg115; reg11=pos_nodes[19][2]*reg83; reg97=reg2*pos_nodes[19][2]; reg23=reg122+reg23;
    reg70=reg63-reg70; reg8=reg54+reg8; reg116=reg106+reg116; reg74=reg25-reg74; reg113=reg49-reg113;
    reg25=reg22*reg104; reg54=reg71*reg87; reg92=reg98-reg92; reg63=reg70*reg113; reg11=reg115-reg11;
    reg97=reg23+reg97; reg23=var_inter[0]*reg70; reg106=reg74*reg92; reg116=pos[1]-reg116; reg115=var_inter[0]*reg74;
    reg25=reg54-reg25; reg8=pos[0]-reg8; reg117=reg70*reg50; reg119=reg71*reg11; reg115=reg116+reg115;
    reg116=reg70*reg93; reg23=reg8+reg23; reg8=var_inter[1]*reg71; reg63=reg106-reg63; reg106=reg22*reg11;
    reg120=var_inter[0]*reg11; reg121=reg104*reg11; reg122=reg11*reg25; reg97=pos[2]-reg97; T reg123=reg74*reg50;
    T reg124=reg87*reg11; T reg125=reg74*reg93; T reg126=var_inter[1]*reg104; reg119=reg117-reg119; T reg127=reg70*reg87;
    T reg128=reg22*reg74; T reg129=reg70*reg104; reg106=reg116-reg106; T reg130=reg71*reg74; reg121=reg123-reg121;
    reg124=reg125-reg124; reg122=reg63-reg122; reg120=reg97+reg120; reg63=var_inter[1]*reg50; reg115=reg126+reg115;
    reg23=reg8+reg23; reg8=var_inter[2]*reg87; reg97=var_inter[2]*reg22; reg120=reg63+reg120; reg113=reg113/reg122;
    reg124=reg124/reg122; reg121=reg121/reg122; reg115=reg8+reg115; reg92=reg92/reg122; reg106=reg106/reg122;
    reg8=var_inter[2]*reg93; reg23=reg97+reg23; reg119=reg119/reg122; reg128=reg127-reg128; reg130=reg129-reg130;
    reg124=reg23*reg124; reg106=reg115*reg106; reg121=reg23*reg121; reg119=reg115*reg119; reg120=reg8+reg120;
    reg92=reg115*reg92; reg113=reg23*reg113; reg130=reg130/reg122; reg128=reg128/reg122; reg122=reg25/reg122;
    reg121=reg119-reg121; reg122=reg120*reg122; reg130=reg120*reg130; reg106=reg124-reg106; reg128=reg120*reg128;
    reg113=reg92-reg113; var_inter[2]+=reg121-reg130; var_inter[1]+=reg128+reg106; var_inter[0]+=reg113-reg122;

}
#ifndef STRUCT_Global
#define STRUCT_Global
struct Global {};
#endif // STRUCT_Global
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Global &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary_mul_nb_nodes
#define STRUCT_Elementary_mul_nb_nodes
struct Elementary_mul_nb_nodes {};
#endif // STRUCT_Elementary_mul_nb_nodes
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Nodal
#define STRUCT_Nodal
struct Nodal {};
#endif // STRUCT_Nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=2*var_inter[0]; reg0=reg0-1; T reg1=2*var_inter[1]; reg1=reg1-1; T reg2=2*var_inter[2];
    T reg3=1-reg0; T reg4=1+reg0; reg2=reg2-1; T reg5=reg0-reg1; T reg6=0.125*reg3;
    T reg7=1-reg1; T reg8=reg0+reg1; T reg9=0.125*reg4; T reg10=reg5-reg2; T reg11=reg9*reg7;
    T reg12=reg6*reg7; T reg13=1-reg2; T reg14=1+reg1; T reg15=reg2+reg8; reg9=reg9*reg14;
    T reg16=reg8-reg2; T reg17=reg11*reg13; T reg18=reg1-reg0; reg10=reg10-2; T reg19=reg12*reg13;
    T reg20=2+reg15; reg17=reg10*reg17; reg10=reg9*reg13; reg20=reg19*reg20; reg16=reg16-2;
    reg19=reg18-reg2; reg6=reg14*reg6; T reg21=1+reg2; reg8=reg2-reg8; reg19=reg19-2;
    T reg22=reg6*reg13; reg16=reg10*reg16; reg20=val[0]*reg20; reg17=val[1]*reg17; reg16=val[2]*reg16;
    reg20=reg17-reg20; reg19=reg22*reg19; reg12=reg21*reg12; reg8=reg8-2; reg5=reg5+reg2;
    reg0=pow(reg0,2); reg5=reg5-2; reg11=reg11*reg21; reg8=reg12*reg8; reg19=val[3]*reg19;
    reg16=reg20+reg16; reg0=1-reg0; reg1=pow(reg1,2); reg18=reg18+reg2; reg15=reg15-2;
    reg9=reg9*reg21; reg5=reg11*reg5; reg8=val[4]*reg8; reg19=reg16+reg19; reg15=reg9*reg15;
    reg6=reg6*reg21; reg18=reg18-2; reg5=val[5]*reg5; reg8=reg19+reg8; reg0=0.25*reg0;
    reg1=1-reg1; reg1=0.25*reg1; reg9=reg0*reg7; reg5=reg8+reg5; reg15=val[6]*reg15;
    reg18=reg6*reg18; reg6=reg9*reg13; reg8=reg4*reg1; reg15=reg5+reg15; reg18=val[7]*reg18;
    reg6=val[8]*reg6; reg18=reg15+reg18; reg5=reg8*reg13; reg0=reg14*reg0; reg1=reg1*reg3;
    reg6=reg18+reg6; reg5=val[9]*reg5; reg10=reg0*reg13; reg5=reg6+reg5; reg10=val[10]*reg10;
    reg13=reg1*reg13; reg10=reg5+reg10; reg2=pow(reg2,2); reg13=val[11]*reg13; reg9=reg21*reg9;
    reg8=reg21*reg8; reg2=1-reg2; reg9=val[12]*reg9; reg13=reg10+reg13; reg8=val[13]*reg8;
    reg9=reg13+reg9; reg2=0.25*reg2; reg0=reg21*reg0; reg8=reg9+reg8; reg0=val[14]*reg0;
    reg1=reg21*reg1; reg3=reg2*reg3; reg0=reg8+reg0; reg1=val[15]*reg1; reg5=reg3*reg7;
    reg2=reg4*reg2; reg7=reg2*reg7; reg5=val[16]*reg5; reg1=reg0+reg1; reg5=reg1+reg5;
    reg7=val[17]*reg7; reg2=reg14*reg2; reg7=reg5+reg7; reg3=reg14*reg3; reg2=val[18]*reg2;
    reg3=val[19]*reg3; reg2=reg7+reg2; res=reg2+reg3;

}
#ifndef STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
#define STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
struct Elementary_mul_nb_nodes_of_each_children_elem {};
#endif // STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes_of_each_children_elem &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss
#define STRUCT_Gauss
struct Gauss {};
#endif // STRUCT_Gauss
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Gauss &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Der_nodal
#define STRUCT_Der_nodal
struct Der_nodal {};
#endif // STRUCT_Der_nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Der_nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary
#define STRUCT_Elementary
struct Elementary {};
#endif // STRUCT_Elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Skin_elementary
#define STRUCT_Skin_elementary
struct Skin_elementary {};
#endif // STRUCT_Skin_elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Skin_elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef AUTORIZEDPERM
#define AUTORIZEDPERM
template<class T> struct AuthorizedPerm;
#endif // AUTORIZEDPERM
template<> struct AuthorizedPerm<Hexa_20> {
    static const unsigned nb_permutations = 0;
    template<class TE> static void make_permutation( TE &e, unsigned nb_perm ) {
    }
    template<class TE> static void unmake_permutation( TE &e, unsigned nb_perm ) {
    }
};

}
#endif // LMT_HEXA_20
