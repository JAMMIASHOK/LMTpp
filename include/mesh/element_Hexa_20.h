#ifndef LMT_HEXA_20
#define LMT_HEXA_20
namespace LMT {
inline const double *gauss_point_for_order(unsigned order, const Hexa_20 &elem) { /// order -> degre du polynome a integrer exactement
    static const unsigned offset[] = { 0, 5, 10, 43, 180, 317, 454, 591, 728, 865, }; // fonction de lordre du poly
    static const double values[] = {
        1.0,0.5,0.5,0.5,
        0.0,
        1.0,0.5,0.5,0.5,
        0.0,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
    };
    return values + offset[order];
}
template<class TNode> void permutation_if_jac_neg(const Hexa_20 &elem,TNode **nodes) {
    typedef typename TNode::T T;
    T reg0=0.25*nodes[0]->pos[1]; T reg1=0.25*nodes[1]->pos[1]; T reg2=0.25*nodes[1]->pos[2]; T reg3=0.25*nodes[0]->pos[2]; T reg4=reg0-reg1;
    T reg5=0.25*nodes[2]->pos[1]; T reg6=reg3-reg2; T reg7=reg2+reg3; T reg8=0.25*nodes[2]->pos[2]; T reg9=reg1+reg0;
    T reg10=reg7-reg8; T reg11=reg5+reg9; T reg12=0.25*nodes[3]->pos[2]; T reg13=reg7+reg8; reg4=reg4-reg5;
    reg6=reg6-reg8; T reg14=0.25*nodes[3]->pos[1]; T reg15=0.25*nodes[1]->pos[0]; T reg16=0.25*nodes[0]->pos[0]; T reg17=reg9-reg5;
    T reg18=0.25*nodes[4]->pos[1]; T reg19=0.25*nodes[4]->pos[2]; reg17=reg17-reg14; T reg20=reg13+reg12; T reg21=reg16-reg15;
    T reg22=0.25*nodes[2]->pos[0]; reg6=reg12+reg6; reg4=reg14+reg4; T reg23=reg15+reg16; T reg24=reg14+reg11;
    reg10=reg10-reg12; T reg25=reg23-reg22; reg4=reg18+reg4; T reg26=reg24-reg18; reg6=reg19+reg6;
    reg10=reg19+reg10; T reg27=reg20-reg19; T reg28=0.25*nodes[5]->pos[2]; T reg29=0.25*nodes[5]->pos[1]; reg17=reg17+reg18;
    T reg30=0.25*nodes[3]->pos[0]; reg21=reg21-reg22; reg21=reg21+reg30; T reg31=reg22+reg23; reg6=reg6-reg28;
    T reg32=0.25*nodes[4]->pos[0]; reg4=reg4-reg29; reg25=reg25-reg30; reg26=reg26-reg29; reg10=reg28+reg10;
    T reg33=0.25*nodes[6]->pos[2]; reg27=reg27-reg28; reg17=reg17+reg29; T reg34=0.25*nodes[6]->pos[1]; reg10=reg10-reg33;
    reg26=reg26-reg34; reg25=reg32+reg25; reg4=reg4-reg34; T reg35=0.25*nodes[5]->pos[0]; reg21=reg21+reg32;
    reg6=reg6-reg33; T reg36=reg30+reg31; T reg37=0.25*nodes[7]->pos[2]; reg27=reg27-reg33; T reg38=0.25*nodes[7]->pos[1];
    reg17=reg17-reg34; reg10=reg10-reg37; reg26=reg26-reg38; T reg39=0.5*nodes[9]->pos[1]; reg25=reg35+reg25;
    T reg40=0.25*nodes[6]->pos[0]; reg4=reg38+reg4; reg21=reg21-reg35; reg6=reg37+reg6; T reg41=reg36-reg32;
    T reg42=0.5*nodes[8]->pos[1]; reg17=reg17-reg38; T reg43=0.5*nodes[8]->pos[2]; T reg44=0.5*nodes[9]->pos[2]; reg27=reg27-reg37;
    T reg45=0.5*nodes[10]->pos[2]; reg21=reg21-reg40; reg26=reg26-reg42; T reg46=0.25*nodes[7]->pos[0]; T reg47=0.5*nodes[11]->pos[2];
    reg6=reg44+reg6; reg25=reg25-reg40; reg42=reg17-reg42; reg17=0.5*nodes[10]->pos[1]; reg27=reg27-reg43;
    T reg48=0.5*nodes[11]->pos[1]; reg43=reg10-reg43; reg4=reg39+reg4; reg41=reg41-reg35; reg10=0.5*nodes[12]->pos[2];
    T reg49=0.5*nodes[9]->pos[0]; T reg50=0.5*nodes[13]->pos[2]; reg25=reg25-reg46; T reg51=0.5*nodes[8]->pos[0]; reg21=reg21+reg46;
    reg41=reg41-reg40; reg43=reg45+reg43; reg6=reg6-reg47; reg44=reg27-reg44; reg42=reg42+reg17;
    reg27=0.5*nodes[12]->pos[1]; reg39=reg26-reg39; reg4=reg4-reg48; reg26=0.5*nodes[13]->pos[1]; reg42=reg42-reg27;
    reg45=reg44-reg45; reg6=reg50+reg6; reg4=reg26+reg4; reg41=reg41-reg46; reg43=reg43-reg10;
    reg44=0.5*nodes[11]->pos[0]; T reg52=0.5*nodes[15]->pos[2]; T reg53=0.5*nodes[14]->pos[2]; reg17=reg39-reg17; reg39=0.5*nodes[15]->pos[1];
    reg21=reg21+reg49; T reg54=0.5*nodes[14]->pos[1]; reg25=reg25-reg51; T reg55=0.5*nodes[10]->pos[0]; reg51=reg41-reg51;
    reg41=0.5*nodes[16]->pos[1]; reg43=reg53+reg43; T reg56=0.5*nodes[16]->pos[2]; reg6=reg6-reg52; T reg57=0.5*nodes[13]->pos[0];
    reg21=reg21-reg44; reg42=reg42+reg54; T reg58=0.5*nodes[12]->pos[0]; reg25=reg25+reg55; reg47=reg45-reg47;
    reg48=reg17-reg48; reg4=reg4-reg39; reg25=reg25-reg58; reg49=reg51-reg49; reg10=reg47+reg10;
    reg17=0.5*nodes[15]->pos[0]; reg21=reg21+reg57; reg45=0.5*nodes[14]->pos[0]; reg48=reg27+reg48; reg4=reg4-reg41;
    reg6=reg6-reg56; reg56=reg43-reg56; reg27=0.5*nodes[17]->pos[2]; reg43=0.5*nodes[17]->pos[1]; reg41=reg42-reg41;
    reg42=0.5*nodes[16]->pos[0]; reg41=reg41-reg43; reg47=0.5*nodes[18]->pos[1]; reg21=reg21-reg17; reg56=reg56-reg27;
    reg51=0.5*nodes[18]->pos[2]; reg4=reg43+reg4; reg25=reg25+reg45; reg6=reg27+reg6; reg55=reg49-reg55;
    reg26=reg48+reg26; reg50=reg10+reg50; reg10=0.5*nodes[17]->pos[0]; reg21=reg21-reg42; reg4=reg47+reg4;
    reg42=reg25-reg42; reg6=reg51+reg6; reg25=0.5*nodes[19]->pos[1]; reg26=reg54+reg26; reg44=reg55-reg44;
    reg53=reg50+reg53; reg27=0.5*nodes[19]->pos[2]; reg51=reg56+reg51; reg47=reg41+reg47; reg39=reg26+reg39;
    reg47=reg47+reg25; reg51=reg51+reg27; reg52=reg53+reg52; reg42=reg42-reg10; reg44=reg58+reg44;
    reg27=reg6-reg27; reg25=reg4-reg25; reg10=reg21+reg10; reg4=0.5*nodes[18]->pos[0]; reg42=reg4+reg42;
    reg6=0.5*nodes[19]->pos[0]; reg21=reg52*reg25; reg4=reg10+reg4; reg44=reg57+reg44; reg10=reg39*reg27;
    reg52=reg47*reg52; reg39=reg39*reg51; reg44=reg45+reg44; reg25=reg51*reg25; reg27=reg47*reg27;
    reg39=reg52-reg39; reg10=reg21-reg10; reg42=reg6+reg42; reg6=reg4-reg6; reg27=reg25-reg27;
    reg10=reg42*reg10; reg44=reg17+reg44; reg39=reg6*reg39; reg10=reg39-reg10; reg27=reg44*reg27;
    T det_jac=reg10+reg27;

    if ( det_jac < 0 ) {
        TNode *tmp[] = {nodes[0],nodes[3],nodes[2],nodes[1],nodes[4],nodes[7],nodes[6],nodes[5],nodes[11],nodes[10],nodes[9],nodes[8],nodes[15],nodes[14],nodes[13],nodes[12],nodes[16],nodes[19],nodes[18],nodes[17]};
        for(unsigned i=0;i<20;++i) nodes[i] = tmp[i];
    }
}
template<class PosNodes,class Pvec,class TVI> void get_var_inter_linear(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; reg1=reg1-1; T reg2=1+reg0;
    T reg3=1-reg0; T reg4=2*var_inter[2]; T reg5=0.125*reg2; T reg6=reg0-reg1; reg4=reg4-1;
    T reg7=reg0+reg1; T reg8=0.125*reg3; T reg9=1-reg1; T reg10=reg4+reg7; T reg11=1+reg1;
    T reg12=1-reg4; T reg13=reg5*reg9; T reg14=reg8*reg9; T reg15=reg6-reg4; T reg16=0.25*reg3;
    T reg17=0.25*reg2; T reg18=2*reg14; T reg19=reg16*reg12; T reg20=reg7-reg4; T reg21=reg1-reg0;
    T reg22=2*reg13; T reg23=reg17*reg12; T reg24=reg13*reg12; reg5=reg11*reg5; reg15=reg15-2;
    T reg25=2+reg10; T reg26=reg14*reg12; T reg27=reg21-reg4; T reg28=2*reg24; T reg29=reg23*reg15;
    reg8=reg11*reg8; reg20=reg20-2; T reg30=2*reg5; T reg31=reg19*reg25; T reg32=reg5*reg12;
    T reg33=0.25*reg9; T reg34=reg22*reg15; T reg35=reg18*reg25; T reg36=2*reg26; T reg37=reg30*reg20;
    reg7=reg4-reg7; T reg38=reg8*reg12; reg34=reg28+reg34; reg35=reg36-reg35; T reg39=2*reg8;
    T reg40=1+reg4; reg27=reg27-2; reg31=reg36-reg31; T reg41=0.25*reg11; reg29=reg28+reg29;
    T reg42=2*reg32; T reg43=reg33*reg12; T reg44=reg23*reg20; T reg45=reg31*pos_nodes[0][2]; T reg46=reg39*reg27;
    T reg47=reg34*pos_nodes[1][2]; T reg48=reg29*pos_nodes[1][2]; T reg49=reg19*reg27; T reg50=reg35*pos_nodes[0][2]; T reg51=reg35*pos_nodes[0][1];
    T reg52=reg34*pos_nodes[1][1]; T reg53=reg31*pos_nodes[0][0]; T reg54=reg34*pos_nodes[1][0]; T reg55=reg29*pos_nodes[1][0]; T reg56=reg35*pos_nodes[0][0];
    T reg57=reg16*reg40; T reg58=reg31*pos_nodes[0][1]; reg44=reg42+reg44; reg6=reg6+reg4; T reg59=reg29*pos_nodes[1][1];
    reg14=reg40*reg14; reg7=reg7-2; reg37=reg42+reg37; T reg60=2*reg38; T reg61=reg43*reg25;
    T reg62=reg41*reg12; T reg63=reg43*reg15; T reg64=reg7*reg18; T reg65=2*reg14; T reg66=reg44*pos_nodes[2][0];
    T reg67=reg57*reg7; reg56=reg54+reg56; reg58=reg59+reg58; reg54=reg62*reg20; reg59=reg44*pos_nodes[2][1];
    reg61=reg36-reg61; reg49=reg60+reg49; reg13=reg40*reg13; reg63=reg28+reg63; reg6=reg6-2;
    reg28=reg17*reg40; reg50=reg47+reg50; reg36=reg37*pos_nodes[2][2]; reg46=reg60+reg46; reg45=reg48+reg45;
    reg47=reg44*pos_nodes[2][2]; reg48=reg37*pos_nodes[2][0]; reg53=reg55+reg53; reg55=reg37*pos_nodes[2][1]; reg51=reg52+reg51;
    reg52=reg63*pos_nodes[1][0]; T reg68=reg61*pos_nodes[0][0]; T reg69=reg46*pos_nodes[3][1]; reg45=reg47-reg45; reg47=reg49*pos_nodes[3][2];
    T reg70=reg6*reg28; reg5=reg40*reg5; reg10=reg10-2; T reg71=reg6*reg22; reg55=reg51+reg55;
    reg54=reg42+reg54; reg42=reg46*pos_nodes[3][2]; reg51=reg33*reg40; reg64=reg65+reg64; reg50=reg36+reg50;
    reg36=reg49*pos_nodes[3][0]; T reg72=reg49*pos_nodes[3][1]; reg67=reg65+reg67; reg56=reg48+reg56; reg21=reg21+reg4;
    reg48=reg46*pos_nodes[3][0]; reg58=reg59-reg58; reg59=pow(reg0,2); reg53=reg66-reg53; reg66=2*reg13;
    T reg73=reg63*pos_nodes[1][1]; T reg74=reg61*pos_nodes[0][1]; T reg75=reg62*reg27; reg48=reg56+reg48; reg56=reg10*reg30;
    reg71=reg66+reg71; T reg76=reg64*pos_nodes[4][0]; reg70=reg66+reg70; T reg77=reg67*pos_nodes[4][0]; reg36=reg53+reg36;
    reg53=reg10*reg28; T reg78=reg51*reg7; T reg79=pow(reg1,2); reg75=reg60+reg75; reg60=2*reg5;
    T reg80=reg54*pos_nodes[2][0]; reg68=reg52-reg68; reg42=reg50+reg42; reg50=pos_nodes[4][2]*reg64; reg52=pos_nodes[4][2]*reg67;
    reg47=reg45+reg47; reg45=reg61*pos_nodes[0][2]; T reg81=reg63*pos_nodes[1][2]; reg69=reg55+reg69; reg55=reg64*pos_nodes[4][1];
    reg59=1-reg59; reg21=reg21-2; reg8=reg8*reg40; T reg82=reg54*pos_nodes[2][1]; reg74=reg73-reg74;
    reg72=reg58+reg72; reg58=reg67*pos_nodes[4][1]; reg82=reg74+reg82; reg73=reg75*pos_nodes[3][1]; reg79=1-reg79;
    reg74=pos_nodes[5][2]*reg71; reg25=reg26*reg25; reg42=reg50-reg42; reg26=pos_nodes[5][0]*reg71; reg50=pos_nodes[5][2]*reg70;
    reg52=reg47-reg52; reg48=reg76-reg48; reg56=reg60+reg56; reg47=reg21*reg39; reg45=reg81-reg45;
    reg76=reg54*pos_nodes[2][2]; reg81=pos_nodes[5][1]*reg71; reg69=reg55-reg69; reg15=reg24*reg15; reg24=pos_nodes[5][1]*reg70;
    reg58=reg72-reg58; reg55=0.25*reg59; reg68=reg80+reg68; reg72=reg75*pos_nodes[3][0]; reg80=2*reg8;
    T reg83=reg41*reg40; reg78=reg65+reg78; reg65=reg51*reg6; T reg84=reg57*reg21; reg53=reg60+reg53;
    reg77=reg36-reg77; reg36=pos_nodes[5][0]*reg70; reg26=reg48+reg26; reg48=pos_nodes[6][0]*reg56; T reg85=pos_nodes[6][1]*reg53;
    reg24=reg58-reg24; reg58=reg78*pos_nodes[4][0]; reg72=reg68-reg72; reg84=reg80+reg84; reg74=reg42+reg74;
    reg42=pos_nodes[6][2]*reg56; reg59=0.5*reg59; reg68=reg83*reg10; T reg86=pos_nodes[1][0]*reg15; T reg87=pos_nodes[0][0]*reg25;
    T reg88=reg75*pos_nodes[3][2]; reg45=reg76+reg45; reg76=0.25*reg79; reg20=reg32*reg20; reg65=reg66+reg65;
    reg32=reg55*reg9; reg73=reg82-reg73; reg66=reg78*pos_nodes[4][1]; reg82=pos_nodes[6][1]*reg56; T reg89=pos_nodes[6][0]*reg53;
    reg36=reg77-reg36; reg47=reg80+reg47; reg50=reg52-reg50; reg52=pos_nodes[6][2]*reg53; reg81=reg69+reg81;
    reg69=pos_nodes[1][1]*reg15; reg77=pos_nodes[0][1]*reg25; T reg90=reg59*reg12; T reg91=reg1*reg2; T reg92=reg47*pos_nodes[7][1];
    reg82=reg81+reg82; reg68=reg60+reg68; reg60=pos_nodes[2][1]*reg20; reg81=pos_nodes[2][0]*reg20; reg66=reg73-reg66;
    reg73=pos_nodes[5][1]*reg65; reg87=reg86-reg87; reg86=pos_nodes[4][2]*reg78; reg88=reg45-reg88; reg52=reg50+reg52;
    reg45=reg83*reg21; reg50=reg84*pos_nodes[7][2]; T reg93=reg76*reg2; reg77=reg69-reg77; reg69=pos_nodes[0][2]*reg25;
    T reg94=pos_nodes[1][2]*reg15; reg27=reg38*reg27; reg48=reg26+reg48; reg26=pos_nodes[7][0]*reg47; reg38=2*reg32;
    reg58=reg72-reg58; reg72=reg84*pos_nodes[7][1]; reg85=reg24+reg85; reg89=reg36+reg89; reg24=pos_nodes[7][0]*reg84;
    reg36=pos_nodes[5][0]*reg65; reg42=reg74+reg42; reg74=reg47*pos_nodes[7][2]; T reg95=reg0*reg9; reg7=reg14*reg7;
    reg55=reg55*reg11; reg50=reg52+reg50; reg14=pos_nodes[8][2]*reg90; reg72=reg85+reg72; reg69=reg94-reg69;
    reg52=pos_nodes[8][1]*reg90; reg85=pos_nodes[2][2]*reg20; reg94=pos_nodes[6][0]*reg68; T reg96=pos_nodes[6][1]*reg68; T reg97=2*reg93;
    reg73=reg66+reg73; reg36=reg58+reg36; reg92=reg82+reg92; reg74=reg42+reg74; reg42=reg91*reg12;
    reg58=pos_nodes[8][1]*reg38; reg66=pos_nodes[8][0]*reg90; reg24=reg89+reg24; reg60=reg77+reg60; reg77=pos_nodes[3][1]*reg27;
    reg87=reg81+reg87; reg81=pos_nodes[8][2]*reg38; reg26=reg48+reg26; reg48=pos_nodes[8][0]*reg38; reg86=reg88-reg86;
    reg82=pos_nodes[5][2]*reg65; reg45=reg80+reg45; reg80=pos_nodes[3][0]*reg27; reg88=pos_nodes[3][2]*reg27; reg69=reg85+reg69;
    reg52=reg72-reg52; reg72=reg7*pos_nodes[4][1]; reg85=pos_nodes[9][1]*reg42; reg96=reg73+reg96; reg73=reg95*reg12;
    reg89=pos_nodes[9][1]*reg97; reg58=reg92-reg58; reg92=reg45*pos_nodes[7][1]; reg77=reg60+reg77; reg60=pos_nodes[9][2]*reg97;
    reg81=reg74-reg81; reg80=reg87+reg80; reg74=reg7*pos_nodes[4][0]; reg82=reg86+reg82; reg86=pos_nodes[6][2]*reg68;
    reg76=reg76*reg3; reg87=pos_nodes[9][0]*reg97; reg48=reg26-reg48; reg26=reg1*reg3; reg66=reg24-reg66;
    reg24=pos_nodes[9][0]*reg42; T reg98=pos_nodes[7][0]*reg45; reg14=reg50-reg14; reg50=pos_nodes[9][2]*reg42; T reg99=2*reg55;
    reg94=reg36+reg94; reg6=reg13*reg6; reg79=0.5*reg79; reg87=reg48-reg87; reg13=pos_nodes[8][1]*reg73;
    reg36=reg26*reg12; reg48=pos_nodes[10][0]*reg90; reg85=reg52-reg85; reg52=pos_nodes[10][1]*reg90; reg89=reg58-reg89;
    reg58=pos_nodes[8][0]*reg73; T reg100=2*reg76; reg92=reg96-reg92; reg96=reg0*reg11; reg24=reg66-reg24;
    reg98=reg94-reg98; reg66=pos_nodes[4][2]*reg7; reg94=reg79*reg12; reg10=reg5*reg10; reg50=reg14-reg50;
    reg5=pos_nodes[10][2]*reg90; reg72=reg77+reg72; reg14=pos_nodes[5][0]*reg6; reg80=reg74+reg80; reg74=pos_nodes[5][1]*reg6;
    reg88=reg69+reg88; reg86=reg82+reg86; reg69=reg45*pos_nodes[7][2]; reg77=pos_nodes[10][0]*reg99; reg82=pos_nodes[10][1]*reg99;
    reg60=reg81-reg60; reg81=pos_nodes[10][2]*reg99; T reg101=pos_nodes[11][2]*reg36; reg5=reg50+reg5; reg81=reg60-reg81;
    reg50=pos_nodes[11][2]*reg100; reg74=reg72+reg74; reg60=pos_nodes[9][0]*reg94; reg72=pos_nodes[6][1]*reg10; T reg102=pos_nodes[8][2]*reg73;
    reg88=reg66+reg88; reg66=pos_nodes[5][2]*reg6; reg58=reg98-reg58; reg98=pos_nodes[11][1]*reg100; reg69=reg86-reg69;
    reg82=reg89-reg82; reg86=pos_nodes[9][1]*reg94; reg13=reg92-reg13; reg89=reg96*reg12; reg21=reg8*reg21;
    reg52=reg85+reg52; reg8=pos_nodes[11][1]*reg36; reg85=pos_nodes[6][0]*reg10; reg14=reg80+reg14; reg80=pos_nodes[11][0]*reg100;
    reg77=reg87-reg77; reg87=reg59*reg40; reg92=pow(reg4,2); reg24=reg48+reg24; reg48=pos_nodes[11][0]*reg36;
    reg66=reg88+reg66; reg72=reg74+reg72; reg74=reg21*pos_nodes[7][1]; reg88=pos_nodes[10][1]*reg89; reg86=reg13+reg86;
    reg13=pos_nodes[12][2]*reg87; reg101=reg5-reg101; reg5=pos_nodes[12][2]*reg38; reg50=reg81-reg50; reg92=1-reg92;
    reg81=pos_nodes[12][0]*reg87; reg48=reg24-reg48; reg58=reg60+reg58; reg24=pos_nodes[7][0]*reg21; reg85=reg14+reg85;
    reg14=pos_nodes[10][0]*reg89; reg60=reg91*reg40; reg102=reg69-reg102; reg69=pos_nodes[9][2]*reg94; T reg103=pos_nodes[12][0]*reg38;
    reg80=reg77-reg80; reg77=pos_nodes[6][2]*reg10; T reg104=pos_nodes[12][1]*reg38; reg98=reg82-reg98; reg82=reg32*reg12;
    T reg105=pos_nodes[12][1]*reg87; reg8=reg52-reg8; reg69=reg102+reg69; reg52=reg60*pos_nodes[13][1]; reg105=reg8-reg105;
    reg24=reg85+reg24; reg8=pos_nodes[8][0]*reg82; reg85=reg93*reg12; reg104=reg98+reg104; reg98=reg97*pos_nodes[13][1];
    reg5=reg50+reg5; reg50=pos_nodes[10][2]*reg89; reg102=pos_nodes[13][0]*reg97; reg103=reg80+reg103; reg80=pos_nodes[11][0]*reg94;
    reg14=reg58-reg14; reg81=reg48-reg81; reg48=pos_nodes[13][0]*reg60; reg58=0.25*reg92; T reg106=reg95*reg40;
    reg13=reg101-reg13; reg101=reg60*pos_nodes[13][2]; T reg107=reg97*pos_nodes[13][2]; reg77=reg66+reg77; reg66=reg21*pos_nodes[7][2];
    T reg108=pos_nodes[8][1]*reg82; T reg109=pos_nodes[11][1]*reg94; reg88=reg86-reg88; reg74=reg72+reg74; reg72=reg58*reg3;
    reg52=reg105-reg52; reg86=reg87*pos_nodes[14][1]; reg108=reg74+reg108; reg50=reg69-reg50; reg69=pos_nodes[11][2]*reg94;
    reg74=reg87*pos_nodes[14][0]; reg48=reg81-reg48; reg81=reg99*pos_nodes[14][0]; reg102=reg103+reg102; reg66=reg77+reg66;
    reg3=reg4*reg3; reg77=pos_nodes[12][1]*reg106; reg109=reg88-reg109; reg88=reg26*reg40; reg103=pos_nodes[12][0]*reg106;
    reg80=reg14-reg80; reg14=reg99*pos_nodes[14][2]; reg5=reg107+reg5; reg98=reg104+reg98; reg104=reg99*pos_nodes[14][1];
    reg105=reg87*pos_nodes[14][2]; reg101=reg13-reg101; reg8=reg24+reg8; reg13=reg55*reg12; reg24=pos_nodes[9][0]*reg85;
    reg107=pos_nodes[9][1]*reg85; T reg110=reg79*reg40; T reg111=pos_nodes[8][2]*reg82; T reg112=reg96*reg40; T reg113=reg110*pos_nodes[13][1];
    reg77=reg109-reg77; reg109=reg3*reg9; T reg114=reg88*pos_nodes[15][0]; T reg115=reg88*pos_nodes[15][1]; reg105=reg101+reg105;
    reg101=reg88*pos_nodes[15][2]; reg58=reg58*reg2; reg74=reg48+reg74; reg14=reg5+reg14; reg5=reg100*pos_nodes[15][2];
    reg104=reg98+reg104; reg48=reg100*pos_nodes[15][1]; reg8=reg24+reg8; reg24=pos_nodes[13][0]*reg110; reg103=reg80-reg103;
    reg80=pos_nodes[10][1]*reg13; reg107=reg108+reg107; reg98=pos_nodes[10][0]*reg13; reg12=reg76*reg12; reg108=reg100*pos_nodes[15][0];
    reg69=reg50-reg69; reg2=reg2*reg4; reg50=2*reg72; T reg116=pos_nodes[9][2]*reg85; reg111=reg66+reg111;
    reg86=reg52+reg86; reg81=reg102+reg81; reg52=pos_nodes[12][2]*reg106; reg92=0.5*reg92; reg66=2*reg58;
    reg32=reg32*reg40; reg116=reg111+reg116; reg102=pos_nodes[10][2]*reg13; reg111=reg109*pos_nodes[16][2]; reg5=reg14+reg5;
    reg14=reg110*pos_nodes[13][2]; T reg117=reg112*pos_nodes[14][0]; T reg118=reg112*pos_nodes[14][1]; reg113=reg77+reg113; reg48=reg104+reg48;
    reg77=reg109*pos_nodes[16][1]; reg104=pos_nodes[11][0]*reg12; reg8=reg98+reg8; reg52=reg69-reg52; reg115=reg86-reg115;
    reg69=reg109*pos_nodes[16][0]; reg108=reg81+reg108; reg101=reg105-reg101; reg81=reg50*pos_nodes[16][2]; reg80=reg107+reg80;
    reg86=reg2*reg9; reg98=pos_nodes[11][1]*reg12; reg105=reg50*pos_nodes[16][1]; reg107=reg50*pos_nodes[16][0]; reg114=reg74-reg114;
    reg24=reg103+reg24; reg74=pos_nodes[11][2]*reg12; reg103=reg92*reg9; T reg119=reg66*pos_nodes[17][1]; reg102=reg116+reg102;
    reg116=reg110*pos_nodes[15][0]; reg117=reg24-reg117; reg77=reg48-reg77; reg24=reg86*pos_nodes[17][1]; reg98=reg80+reg98;
    reg48=pos_nodes[12][1]*reg32; reg105=reg115-reg105; reg80=reg110*pos_nodes[15][1]; reg118=reg113-reg118; reg113=pos_nodes[12][0]*reg32;
    reg104=reg8+reg104; reg8=reg86*pos_nodes[17][0]; reg69=reg108-reg69; reg108=reg2*reg11; reg115=reg66*pos_nodes[17][0];
    reg107=reg114-reg107; reg93=reg40*reg93; reg81=reg101-reg81; reg52=reg14+reg52; reg14=reg66*pos_nodes[17][2];
    reg101=reg112*pos_nodes[14][2]; reg111=reg5-reg111; reg5=reg86*pos_nodes[17][2]; reg74=reg102+reg74; reg102=pos_nodes[12][2]*reg32;
    reg115=reg107-reg115; reg107=reg66*pos_nodes[18][0]; reg114=reg3*reg11; reg8=reg69-reg8; reg69=reg108*pos_nodes[18][0];
    reg113=reg104+reg113; reg104=reg93*pos_nodes[13][0]; T reg120=reg110*pos_nodes[15][2]; reg101=reg52-reg101; reg80=reg118-reg80;
    reg52=reg103*pos_nodes[16][1]; reg119=reg105-reg119; reg105=reg66*pos_nodes[18][1]; reg118=reg66*pos_nodes[18][2]; T reg121=reg103*pos_nodes[16][0];
    reg116=reg117-reg116; reg117=reg108*pos_nodes[18][1]; reg24=reg77-reg24; reg55=reg40*reg55; reg5=reg111-reg5;
    reg77=reg108*pos_nodes[18][2]; reg14=reg81-reg14; reg81=reg93*pos_nodes[13][1]; reg48=reg98+reg48; reg120=reg101-reg120;
    reg117=reg24-reg117; reg24=reg114*pos_nodes[19][1]; reg77=reg5-reg77; reg5=reg114*pos_nodes[19][2]; reg52=reg80-reg52;
    reg80=reg103*pos_nodes[17][1]; reg81=reg48+reg81; reg48=reg93*pos_nodes[13][2]; reg105=reg119+reg105; reg98=reg50*pos_nodes[19][1];
    reg101=reg92*reg11; reg111=reg103*pos_nodes[17][0]; reg121=reg116-reg121; reg118=reg14+reg118; reg102=reg74+reg102;
    reg14=reg55*pos_nodes[14][0]; reg104=reg113+reg104; reg74=reg103*pos_nodes[16][2]; reg113=reg114*pos_nodes[19][0]; reg69=reg8-reg69;
    reg8=reg55*pos_nodes[14][1]; reg76=reg40*reg76; reg107=reg115+reg107; reg40=reg50*pos_nodes[19][0]; reg115=reg50*pos_nodes[19][2];
    reg111=reg121+reg111; reg116=reg72*reg9; reg119=reg101*pos_nodes[18][0]; reg98=reg105+reg98; reg40=reg107+reg40;
    reg105=reg101*pos_nodes[18][1]; reg80=reg52+reg80; reg115=reg118+reg115; reg113=reg69-reg113; reg52=reg103*pos_nodes[17][2];
    reg74=reg120-reg74; reg14=reg104+reg14; reg69=reg76*pos_nodes[15][0]; reg5=reg77-reg5; reg24=reg117-reg24;
    reg8=reg81+reg8; reg77=reg76*pos_nodes[15][1]; reg102=reg48+reg102; reg48=reg55*pos_nodes[14][2]; reg119=reg111+reg119;
    reg81=reg101*pos_nodes[19][0]; reg104=reg40*reg5; reg107=reg113*reg115; reg111=reg24*reg115; reg117=reg98*reg5;
    reg52=reg74+reg52; reg74=reg101*pos_nodes[18][2]; reg69=reg14+reg69; reg14=reg116*pos_nodes[16][0]; reg118=reg101*pos_nodes[19][1];
    reg105=reg80+reg105; reg80=reg76*pos_nodes[15][2]; reg48=reg102+reg48; reg9=reg58*reg9; reg102=reg116*pos_nodes[16][1];
    reg77=reg8+reg77; reg81=reg119-reg81; reg14=reg69+reg14; reg118=reg105-reg118; reg58=reg58*reg11;
    reg8=reg9*pos_nodes[17][0]; reg107=reg104-reg107; reg69=reg113*reg98; reg105=reg40*reg24; reg119=reg9*pos_nodes[17][1];
    reg111=reg117-reg111; reg102=reg77+reg102; reg74=reg52+reg74; reg80=reg48+reg80; reg48=reg116*pos_nodes[16][2];
    reg52=reg101*pos_nodes[19][2]; reg69=reg105-reg69; reg77=reg58*pos_nodes[18][0]; reg8=reg14+reg8; reg48=reg80+reg48;
    reg14=reg9*pos_nodes[17][2]; reg52=reg74-reg52; reg74=reg58*pos_nodes[18][1]; reg119=reg102+reg119; reg11=reg72*reg11;
    reg72=reg81*reg111; reg80=reg118*reg107; reg14=reg48+reg14; reg48=reg58*pos_nodes[18][2]; reg77=reg8+reg77;
    reg8=reg11*pos_nodes[19][0]; reg72=reg80-reg72; reg80=reg52*reg69; reg102=reg11*pos_nodes[19][1]; reg74=reg119+reg74;
    reg119=reg81*reg5; reg120=reg98*reg52; reg121=reg113*reg52; T reg122=reg81*reg115; T reg123=reg40*reg52;
    T reg124=reg118*reg115; T reg125=reg24*reg52; T reg126=reg118*reg5; T reg127=reg11*pos_nodes[19][2]; reg123=reg122-reg123;
    reg48=reg14+reg48; reg121=reg119-reg121; reg14=reg40*reg118; T reg128=reg81*reg98; T reg129=reg113*reg118;
    T reg130=reg81*reg24; reg80=reg72-reg80; reg102=reg74+reg102; reg8=reg77+reg8; reg120=reg124-reg120;
    reg125=reg126-reg125; reg120=reg120/reg80; reg107=reg107/reg80; reg129=reg130-reg129; reg14=reg128-reg14;
    reg111=reg111/reg80; reg102=pos[1]-reg102; reg121=reg121/reg80; reg8=pos[0]-reg8; reg125=reg125/reg80;
    reg123=reg123/reg80; reg127=reg48+reg127; reg120=reg8*reg120; reg127=pos[2]-reg127; reg69=reg69/reg80;
    reg121=reg102*reg121; reg129=reg129/reg80; reg125=reg8*reg125; reg123=reg102*reg123; reg107=reg102*reg107;
    reg80=reg14/reg80; reg111=reg8*reg111; reg120=reg123-reg120; reg69=reg127*reg69; reg111=reg107-reg111;
    reg129=reg127*reg129; reg121=reg125-reg121; reg80=reg127*reg80; var_inter[2]=reg120-reg80; var_inter[0]=reg111-reg69;
    var_inter[1]=reg129+reg121;

}
template<class PosNodes,class Pvec,class TVI> void get_var_inter(const Hexa_20 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=2*var_inter[0]; reg0=reg0-1; T reg1=2*var_inter[1]; T reg2=1-reg0; T reg3=2*var_inter[2];
    T reg4=1+reg0; reg1=reg1-1; T reg5=0.125*reg4; T reg6=reg1+reg0; reg3=reg3-1;
    T reg7=0.125*reg2; T reg8=1-reg1; T reg9=reg0-reg1; T reg10=1+reg1; T reg11=reg5*reg8;
    T reg12=0.25*reg4; T reg13=0.25*reg2; T reg14=1-reg3; T reg15=reg9-reg3; T reg16=reg6+reg3;
    T reg17=reg7*reg8; T reg18=reg11*reg14; reg5=reg10*reg5; T reg19=reg6-reg3; T reg20=reg14*reg17;
    T reg21=2+reg16; T reg22=reg1-reg0; T reg23=2*reg11; T reg24=2*reg17; reg15=reg15-2;
    T reg25=reg14*reg12; T reg26=reg14*reg13; T reg27=2*reg5; T reg28=reg15*reg23; T reg29=reg21*reg26;
    T reg30=0.25*reg8; reg19=reg19-2; T reg31=2*reg18; T reg32=reg5*reg14; T reg33=2*reg20;
    T reg34=reg15*reg25; T reg35=reg21*reg24; T reg36=reg22-reg3; reg7=reg10*reg7; reg36=reg36-2;
    T reg37=reg19*reg27; T reg38=2*reg7; T reg39=reg14*reg30; T reg40=2*reg32; T reg41=reg19*reg25;
    T reg42=0.25*reg10; reg34=reg31+reg34; reg29=reg33-reg29; T reg43=1+reg3; reg6=reg3-reg6;
    reg28=reg31+reg28; T reg44=reg7*reg14; reg35=reg33-reg35; reg9=reg3+reg9; T reg45=pos_nodes[1][2]*reg34;
    reg41=reg40+reg41; T reg46=pos_nodes[0][0]*reg35; reg6=reg6-2; T reg47=pos_nodes[1][0]*reg28; T reg48=pos_nodes[0][1]*reg35;
    reg17=reg17*reg43; T reg49=reg36*reg26; T reg50=pos_nodes[0][0]*reg29; T reg51=pos_nodes[1][0]*reg34; T reg52=pos_nodes[1][2]*reg28;
    T reg53=pos_nodes[0][1]*reg29; T reg54=pos_nodes[0][2]*reg35; reg37=reg40+reg37; T reg55=reg21*reg39; T reg56=pos_nodes[1][1]*reg34;
    T reg57=reg43*reg13; T reg58=reg14*reg42; T reg59=pos_nodes[0][2]*reg29; T reg60=pos_nodes[1][1]*reg28; T reg61=2*reg44;
    T reg62=reg15*reg39; T reg63=reg36*reg38; reg54=reg52+reg54; reg59=reg45+reg59; reg62=reg31+reg62;
    reg31=pos_nodes[2][2]*reg37; reg49=reg61+reg49; reg55=reg33-reg55; reg48=reg60+reg48; reg33=pos_nodes[2][1]*reg37;
    reg45=reg19*reg58; reg52=pos_nodes[2][2]*reg41; reg11=reg11*reg43; reg60=2*reg17; T reg64=reg43*reg12;
    T reg65=reg6*reg57; T reg66=pos_nodes[2][1]*reg41; reg53=reg56+reg53; reg56=pos_nodes[2][0]*reg41; reg63=reg61+reg63;
    T reg67=pos_nodes[2][0]*reg37; reg46=reg47+reg46; reg47=reg6*reg24; reg50=reg51+reg50; reg9=reg9-2;
    reg51=pow(reg0,2); reg47=reg60+reg47; T reg68=pos_nodes[1][1]*reg62; reg45=reg40+reg45; reg40=pos_nodes[0][1]*reg55;
    reg22=reg22+reg3; T reg69=reg9*reg23; T reg70=reg36*reg58; T reg71=2*reg11; T reg72=pos_nodes[3][0]*reg63;
    reg46=reg67+reg46; reg48=reg33+reg48; reg33=pos_nodes[3][1]*reg63; reg67=pos_nodes[1][0]*reg62; T reg73=pos_nodes[0][0]*reg55;
    reg54=reg31+reg54; reg31=pos_nodes[3][2]*reg63; reg16=reg16-2; reg53=reg66-reg53; reg66=pos_nodes[3][1]*reg49;
    T reg74=reg9*reg64; reg5=reg5*reg43; reg50=reg56-reg50; reg56=pos_nodes[3][2]*reg49; T reg75=pos_nodes[3][0]*reg49;
    reg59=reg52-reg59; reg52=reg43*reg30; reg65=reg60+reg65; T reg76=pos_nodes[4][0]*reg65; reg73=reg67-reg73;
    reg67=pos_nodes[0][2]*reg55; T reg77=pos_nodes[1][2]*reg62; reg33=reg48+reg33; reg40=reg68-reg40; reg48=reg16*reg64;
    reg68=pos_nodes[4][0]*reg47; reg75=reg50+reg75; reg66=reg53+reg66; reg50=pos_nodes[4][1]*reg65; reg74=reg71+reg74;
    reg72=reg46+reg72; reg69=reg71+reg69; reg46=pos_nodes[4][1]*reg47; reg53=pos_nodes[2][1]*reg45; T reg78=reg16*reg27;
    T reg79=pos_nodes[4][2]*reg47; reg31=reg54+reg31; reg54=pos_nodes[4][2]*reg65; reg56=reg59+reg56; reg22=reg22-2;
    reg59=2*reg5; T reg80=reg6*reg52; reg7=reg7*reg43; reg70=reg61+reg70; reg51=1-reg51;
    reg61=pos_nodes[2][0]*reg45; T reg81=pow(reg1,2); reg40=reg53+reg40; reg53=pos_nodes[3][1]*reg70; reg60=reg80+reg60;
    reg80=reg22*reg57; reg48=reg59+reg48; T reg82=pos_nodes[5][0]*reg74; reg76=reg75-reg76; reg75=2*reg7;
    T reg83=reg43*reg42; reg15=reg18*reg15; reg18=pos_nodes[3][0]*reg70; reg54=reg56-reg54; reg56=pos_nodes[5][2]*reg74;
    T reg84=pos_nodes[5][2]*reg69; T reg85=pos_nodes[5][1]*reg74; reg50=reg66-reg50; reg31=reg79-reg31; reg73=reg61+reg73;
    reg61=0.25*reg51; reg72=reg68-reg72; reg78=reg59+reg78; reg66=pos_nodes[5][0]*reg69; reg68=pos_nodes[5][1]*reg69;
    reg33=reg46-reg33; reg46=reg22*reg38; reg21=reg20*reg21; reg67=reg77-reg67; reg20=pos_nodes[2][2]*reg45;
    reg77=reg9*reg52; reg81=1-reg81; reg79=0.25*reg81; reg19=reg32*reg19; reg53=reg40-reg53;
    reg32=pos_nodes[6][0]*reg48; reg40=pos_nodes[4][1]*reg60; reg84=reg31+reg84; reg46=reg75+reg46; reg31=pos_nodes[6][0]*reg78;
    T reg86=reg48*pos_nodes[6][1]; T reg87=reg61*reg8; reg66=reg72+reg66; reg72=pos_nodes[1][0]*reg15; T reg88=pos_nodes[0][0]*reg21;
    reg82=reg76-reg82; reg76=reg48*pos_nodes[6][2]; reg77=reg71+reg77; reg71=reg78*pos_nodes[6][1]; reg51=0.5*reg51;
    reg68=reg33+reg68; reg33=pos_nodes[1][1]*reg15; T reg89=pos_nodes[0][1]*reg21; reg80=reg75+reg80; T reg90=pos_nodes[3][2]*reg70;
    T reg91=reg16*reg83; reg67=reg20+reg67; reg20=reg78*pos_nodes[6][2]; reg18=reg73-reg18; reg73=pos_nodes[4][0]*reg60;
    reg56=reg54-reg56; reg85=reg50-reg85; reg50=pos_nodes[5][0]*reg77; reg54=pos_nodes[7][2]*reg80; T reg92=pos_nodes[2][0]*reg19;
    T reg93=2*reg87; T reg94=reg46*pos_nodes[7][0]; reg66=reg31+reg66; reg31=pos_nodes[4][2]*reg60; reg68=reg71+reg68;
    reg71=pos_nodes[2][1]*reg19; T reg95=pos_nodes[1][2]*reg15; reg73=reg18-reg73; reg89=reg33-reg89; reg18=reg79*reg4;
    reg33=pos_nodes[0][2]*reg21; reg90=reg67-reg90; reg82=reg32+reg82; reg85=reg86+reg85; reg91=reg59+reg91;
    reg32=reg22*reg83; reg59=pos_nodes[7][1]*reg80; reg67=pos_nodes[5][1]*reg77; reg40=reg53-reg40; reg36=reg44*reg36;
    reg84=reg20+reg84; reg56=reg76+reg56; reg20=reg1*reg4; reg44=reg14*reg51; reg53=reg80*pos_nodes[7][0];
    reg76=pos_nodes[7][1]*reg46; reg86=pos_nodes[7][2]*reg46; reg88=reg72-reg88; reg56=reg54+reg56; reg84=reg86+reg84;
    reg54=reg93*pos_nodes[8][2]; reg72=reg44*pos_nodes[8][2]; reg86=pos_nodes[3][1]*reg36; reg33=reg95-reg33; reg95=pos_nodes[2][2]*reg19;
    reg89=reg71+reg89; reg67=reg40+reg67; reg85=reg59+reg85; reg40=reg93*pos_nodes[8][1]; reg68=reg76+reg68;
    reg59=reg44*pos_nodes[8][1]; reg31=reg90-reg31; reg71=pos_nodes[5][2]*reg77; reg66=reg94+reg66; reg76=reg93*pos_nodes[8][0];
    reg90=reg91*pos_nodes[6][1]; reg94=pos_nodes[3][0]*reg36; reg88=reg92+reg88; reg92=reg44*pos_nodes[8][0]; reg82=reg53+reg82;
    reg17=reg6*reg17; reg6=reg14*reg20; reg50=reg73+reg50; reg53=pos_nodes[6][0]*reg91; reg73=reg8*reg0;
    reg32=reg75+reg32; reg75=2*reg18; reg61=reg61*reg10; T reg96=reg14*reg73; reg71=reg31+reg71;
    reg50=reg53+reg50; reg31=reg32*pos_nodes[7][0]; reg53=reg1*reg2; T reg97=reg17*pos_nodes[4][0]; T reg98=reg91*pos_nodes[6][2];
    reg79=reg79*reg2; reg86=reg89+reg86; reg89=reg17*pos_nodes[4][1]; reg94=reg88+reg94; reg59=reg85-reg59;
    reg85=reg75*pos_nodes[9][1]; reg40=reg68-reg40; reg68=reg6*pos_nodes[9][1]; reg88=pos_nodes[3][2]*reg36; T reg99=2*reg61;
    reg33=reg95+reg33; reg76=reg66-reg76; reg66=reg75*pos_nodes[9][0]; reg67=reg90+reg67; reg90=pos_nodes[7][1]*reg32;
    reg95=reg75*pos_nodes[9][2]; reg54=reg84-reg54; reg9=reg11*reg9; reg11=reg6*pos_nodes[9][2]; reg72=reg56-reg72;
    reg81=0.5*reg81; reg56=reg6*pos_nodes[9][0]; reg92=reg82-reg92; reg82=reg14*reg53; reg84=reg96*pos_nodes[8][1];
    reg90=reg67-reg90; reg67=reg44*pos_nodes[10][1]; T reg100=reg44*pos_nodes[10][0]; reg56=reg92-reg56; reg16=reg5*reg16;
    reg5=reg17*pos_nodes[4][2]; reg92=reg99*pos_nodes[10][2]; reg95=reg54-reg95; reg11=reg72-reg11; reg54=reg10*reg0;
    reg72=reg14*reg81; reg88=reg33+reg88; reg33=reg44*pos_nodes[10][2]; T reg101=pos_nodes[7][2]*reg32; reg71=reg98+reg71;
    reg31=reg50-reg31; reg50=reg96*pos_nodes[8][0]; reg98=pos_nodes[5][1]*reg9; reg86=reg89+reg86; reg89=reg99*pos_nodes[10][1];
    reg85=reg40-reg85; reg68=reg59-reg68; reg40=pos_nodes[5][0]*reg9; reg66=reg76-reg66; reg59=reg99*pos_nodes[10][0];
    reg76=2*reg79; reg94=reg97+reg94; reg92=reg95-reg92; reg84=reg90-reg84; reg98=reg86+reg98;
    reg86=reg16*pos_nodes[6][1]; reg90=pow(reg3,2); reg95=reg72*pos_nodes[9][0]; reg97=reg43*reg51; T reg102=reg82*pos_nodes[11][2];
    reg11=reg33+reg11; reg101=reg71-reg101; reg59=reg66-reg59; reg22=reg7*reg22; reg7=pos_nodes[5][2]*reg9;
    reg88=reg5+reg88; reg5=reg76*pos_nodes[11][0]; reg33=reg14*reg54; reg66=reg76*pos_nodes[11][1]; reg50=reg31-reg50;
    reg31=reg96*pos_nodes[8][2]; reg71=reg72*pos_nodes[9][1]; T reg103=reg76*pos_nodes[11][2]; T reg104=pos_nodes[6][0]*reg16; reg89=reg85-reg89;
    reg85=reg82*pos_nodes[11][1]; reg68=reg67+reg68; reg67=reg82*pos_nodes[11][0]; reg56=reg100+reg56; reg40=reg94+reg40;
    reg85=reg68-reg85; reg68=reg97*pos_nodes[12][1]; reg40=reg104+reg40; reg94=reg43*reg20; reg100=reg87*reg14;
    reg31=reg101-reg31; reg98=reg86+reg98; reg86=reg16*pos_nodes[6][2]; reg50=reg95+reg50; reg95=reg33*pos_nodes[10][0];
    reg101=reg93*pos_nodes[12][1]; reg66=reg89-reg66; reg89=reg22*pos_nodes[7][0]; reg104=reg72*pos_nodes[9][2]; reg90=1-reg90;
    T reg105=reg97*pos_nodes[12][0]; reg67=reg56-reg67; reg56=reg97*pos_nodes[12][2]; reg84=reg71+reg84; reg71=reg33*pos_nodes[10][1];
    reg5=reg59-reg5; reg7=reg88+reg7; reg102=reg11-reg102; reg11=reg22*pos_nodes[7][1]; reg59=reg93*pos_nodes[12][0];
    reg88=reg93*pos_nodes[12][2]; reg103=reg92-reg103; reg101=reg66+reg101; reg66=reg43*reg73; reg95=reg50-reg95;
    reg50=reg72*pos_nodes[11][0]; reg92=reg75*pos_nodes[13][1]; reg88=reg103+reg88; reg103=reg75*pos_nodes[13][2]; T reg106=pos_nodes[7][2]*reg22;
    T reg107=0.25*reg90; reg31=reg104+reg31; reg104=reg33*pos_nodes[10][2]; reg56=reg102-reg56; reg102=reg94*pos_nodes[13][2];
    reg71=reg84-reg71; reg84=reg72*pos_nodes[11][1]; reg105=reg67-reg105; reg67=reg94*pos_nodes[13][0]; reg59=reg5+reg59;
    reg5=reg75*pos_nodes[13][0]; reg7=reg86+reg7; reg86=reg18*reg14; T reg108=reg100*pos_nodes[8][1]; reg98=reg11+reg98;
    reg11=reg100*pos_nodes[8][0]; reg40=reg89+reg40; reg68=reg85-reg68; reg85=reg94*pos_nodes[13][1]; reg89=reg86*pos_nodes[9][0];
    reg92=reg101+reg92; reg101=reg99*pos_nodes[14][1]; T reg109=reg72*pos_nodes[11][2]; reg104=reg31-reg104; reg31=reg3*reg2;
    reg103=reg88+reg103; reg88=reg86*pos_nodes[9][1]; reg108=reg98+reg108; reg50=reg95-reg50; reg95=reg43*reg53;
    reg98=reg99*pos_nodes[14][0]; T reg110=reg61*reg14; reg11=reg40+reg11; reg85=reg68-reg85; reg40=reg97*pos_nodes[14][1];
    reg5=reg59+reg5; reg7=reg106+reg7; reg59=reg100*pos_nodes[8][2]; reg68=reg43*reg81; reg106=reg66*pos_nodes[12][1];
    reg2=reg107*reg2; reg84=reg71-reg84; reg67=reg105-reg67; reg71=reg99*pos_nodes[14][2]; reg105=reg66*pos_nodes[12][0];
    T reg111=reg97*pos_nodes[14][0]; T reg112=reg97*pos_nodes[14][2]; reg102=reg56-reg102; reg56=2*reg2; T reg113=pos_nodes[15][2]*reg95;
    T reg114=reg110*pos_nodes[10][0]; reg112=reg102+reg112; reg102=pos_nodes[15][0]*reg95; reg111=reg67+reg111; reg59=reg7+reg59;
    reg7=reg68*pos_nodes[13][1]; reg67=reg4*reg3; T reg115=reg8*reg31; reg106=reg84-reg106; reg109=reg104-reg109;
    reg105=reg50-reg105; reg101=reg92+reg101; reg50=pos_nodes[15][1]*reg76; reg84=reg68*pos_nodes[13][0]; reg92=reg66*pos_nodes[12][2];
    reg71=reg103+reg71; reg103=pos_nodes[15][2]*reg76; reg104=reg110*pos_nodes[10][1]; T reg116=reg43*reg54; reg14=reg79*reg14;
    T reg117=reg86*pos_nodes[9][2]; reg108=reg88+reg108; reg4=reg107*reg4; reg11=reg89+reg11; reg40=reg85+reg40;
    reg85=pos_nodes[15][1]*reg95; reg98=reg5+reg98; reg5=pos_nodes[15][0]*reg76; reg90=0.5*reg90; reg88=pos_nodes[16][2]*reg56;
    reg89=pos_nodes[16][0]*reg115; reg107=reg68*pos_nodes[13][2]; reg92=reg109-reg92; reg113=reg112-reg113; reg5=reg98+reg5;
    reg102=reg111-reg102; reg7=reg106+reg7; reg98=reg116*pos_nodes[14][1]; reg59=reg117+reg59; reg87=reg87*reg43;
    reg106=2*reg4; reg109=reg14*pos_nodes[11][0]; reg11=reg114+reg11; reg85=reg40-reg85; reg40=pos_nodes[16][1]*reg56;
    reg111=reg110*pos_nodes[10][2]; reg112=pos_nodes[16][2]*reg115; reg103=reg71+reg103; reg71=reg116*pos_nodes[14][0]; reg84=reg105+reg84;
    reg105=pos_nodes[16][0]*reg56; reg50=reg101+reg50; reg101=reg8*reg67; reg108=reg104+reg108; reg104=reg14*pos_nodes[11][1];
    reg114=pos_nodes[16][1]*reg115; reg117=pos_nodes[17][1]*reg101; T reg118=pos_nodes[17][1]*reg106; reg40=reg85-reg40; reg105=reg102-reg105;
    reg85=pos_nodes[17][0]*reg106; reg109=reg11+reg109; reg104=reg108+reg104; reg11=reg87*pos_nodes[12][0]; reg18=reg18*reg43;
    reg102=reg87*pos_nodes[12][1]; reg108=pos_nodes[15][1]*reg68; reg98=reg7-reg98; reg7=reg8*reg90; T reg119=reg10*reg67;
    reg59=reg111+reg59; reg111=reg14*pos_nodes[11][2]; reg89=reg5-reg89; reg71=reg84-reg71; reg5=pos_nodes[17][2]*reg101;
    reg112=reg103-reg112; reg84=pos_nodes[17][0]*reg101; reg114=reg50-reg114; reg50=pos_nodes[15][0]*reg68; reg88=reg113-reg88;
    reg103=pos_nodes[17][2]*reg106; reg107=reg92+reg107; reg92=reg116*pos_nodes[14][2]; reg113=reg87*pos_nodes[12][2]; reg111=reg59+reg111;
    reg61=reg61*reg43; reg59=pos_nodes[18][2]*reg106; reg103=reg88-reg103; reg5=reg112-reg5; reg88=pos_nodes[18][2]*reg119;
    reg112=reg10*reg31; reg108=reg98-reg108; reg98=pos_nodes[16][1]*reg7; T reg120=reg18*pos_nodes[13][0]; reg11=reg109+reg11;
    reg118=reg40-reg118; reg40=pos_nodes[18][1]*reg106; reg109=pos_nodes[16][0]*reg7; reg50=reg71-reg50; reg117=reg114-reg117;
    reg71=pos_nodes[18][1]*reg119; reg85=reg105-reg85; reg105=pos_nodes[18][0]*reg106; reg102=reg104+reg102; reg104=reg18*pos_nodes[13][1];
    reg114=pos_nodes[18][0]*reg119; T reg121=pos_nodes[15][2]*reg68; reg92=reg107-reg92; reg84=reg89-reg84; reg89=pos_nodes[19][0]*reg56;
    reg40=reg118+reg40; reg107=pos_nodes[19][1]*reg56; reg120=reg11+reg120; reg11=pos_nodes[19][2]*reg112; reg88=reg5-reg88;
    reg5=reg61*pos_nodes[14][0]; reg118=reg18*pos_nodes[13][2]; T reg122=pos_nodes[17][0]*reg7; reg109=reg50-reg109; reg113=reg111+reg113;
    reg59=reg103+reg59; reg50=pos_nodes[19][2]*reg56; reg71=reg117-reg71; reg105=reg85+reg105; reg114=reg84-reg114;
    reg98=reg108-reg98; reg84=pos_nodes[17][1]*reg7; reg43=reg79*reg43; reg79=reg61*pos_nodes[14][1]; reg104=reg102+reg104;
    reg85=pos_nodes[19][0]*reg112; reg102=reg10*reg90; reg121=reg92-reg121; reg92=pos_nodes[16][2]*reg7; reg103=pos_nodes[19][1]*reg112;
    reg5=reg120+reg5; reg89=reg105+reg89; reg118=reg113+reg118; reg84=reg98+reg84; reg98=pos_nodes[18][1]*reg102;
    reg105=reg43*pos_nodes[15][0]; reg108=reg2*reg8; reg85=reg114-reg85; reg111=reg43*pos_nodes[15][1]; reg79=reg104+reg79;
    reg103=reg71-reg103; reg50=reg59+reg50; reg92=reg121-reg92; reg122=reg109+reg122; reg59=pos_nodes[18][0]*reg102;
    reg71=reg61*pos_nodes[14][2]; reg107=reg40+reg107; reg11=reg88-reg11; reg40=pos_nodes[17][2]*reg7; reg71=reg118+reg71;
    reg88=reg89*reg11; reg104=reg107*reg11; reg109=reg43*pos_nodes[15][2]; reg113=reg85*reg50; reg114=reg103*reg50;
    reg117=reg108*pos_nodes[16][0]; reg105=reg5+reg105; reg98=reg84+reg98; reg5=pos_nodes[19][1]*reg102; reg84=pos_nodes[19][0]*reg102;
    reg59=reg122+reg59; reg111=reg79+reg111; reg79=reg108*pos_nodes[16][1]; reg40=reg92+reg40; reg92=pos_nodes[18][2]*reg102;
    reg8=reg4*reg8; reg4=reg4*reg10; reg118=reg85*reg107; reg113=reg88-reg113; reg120=reg89*reg103;
    reg114=reg104-reg114; reg121=pos_nodes[19][2]*reg102; reg92=reg40+reg92; reg40=reg8*pos_nodes[17][1]; reg79=reg111+reg79;
    reg84=reg59-reg84; reg5=reg98-reg5; reg59=reg108*pos_nodes[16][2]; reg117=reg105+reg117; reg109=reg71+reg109;
    reg71=reg8*pos_nodes[17][0]; reg10=reg2*reg10; reg121=reg92-reg121; reg2=reg4*pos_nodes[18][1]; reg40=reg79+reg40;
    reg71=reg117+reg71; reg79=reg4*pos_nodes[18][0]; reg92=reg84*reg114; reg98=reg8*pos_nodes[17][2]; reg59=reg109+reg59;
    reg105=reg5*reg113; reg118=reg120-reg118; reg109=reg4*pos_nodes[18][2]; reg98=reg59+reg98; reg59=reg5*reg11;
    reg111=reg103*reg121; reg2=reg40+reg2; reg40=reg10*pos_nodes[19][1]; reg117=reg5*reg50; reg92=reg105-reg92;
    reg105=reg89*reg121; reg122=reg84*reg50; T reg123=reg121*reg118; T reg124=reg85*reg121; reg79=reg71+reg79;
    reg71=reg84*reg11; T reg125=reg107*reg121; T reg126=reg10*pos_nodes[19][0]; T reg127=reg10*pos_nodes[19][2]; reg109=reg98+reg109;
    reg40=reg2+reg40; reg123=reg92-reg123; reg2=reg89*reg5; reg92=reg84*reg107; reg98=reg85*reg5;
    T reg128=reg84*reg103; reg105=reg122-reg105; reg124=reg71-reg124; reg125=reg117-reg125; reg126=reg79+reg126;
    reg111=reg59-reg111; reg40=pos[1]-reg40; reg126=pos[0]-reg126; reg127=reg109+reg127; reg114=reg114/reg123;
    reg111=reg111/reg123; reg125=reg125/reg123; reg113=reg113/reg123; reg124=reg124/reg123; reg105=reg105/reg123;
    reg98=reg128-reg98; reg2=reg92-reg2; reg127=pos[2]-reg127; reg118=reg118/reg123; reg98=reg98/reg123;
    reg123=reg2/reg123; reg114=reg126*reg114; reg113=reg40*reg113; reg111=reg126*reg111; reg124=reg40*reg124;
    reg125=reg126*reg125; reg105=reg40*reg105; reg118=reg127*reg118; reg114=reg113-reg114; reg98=reg127*reg98;
    reg124=reg111-reg124; reg123=reg127*reg123; reg125=reg105-reg125; var_inter[0]+=reg114-reg118; var_inter[1]+=reg98+reg124;
    var_inter[2]+=reg125-reg123;

}
template<> struct ElemVarInterFromPosNonLinear<Hexa_20> { static const bool res = 3; };
#ifndef STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
#define STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
struct Elementary_mul_nb_nodes_of_each_children_elem {};
#endif // STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes_of_each_children_elem &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary_mul_nb_nodes
#define STRUCT_Elementary_mul_nb_nodes
struct Elementary_mul_nb_nodes {};
#endif // STRUCT_Elementary_mul_nb_nodes
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary_mul_nb_nodes &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Nodal
#define STRUCT_Nodal
struct Nodal {};
#endif // STRUCT_Nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=2*var_inter[0]; T reg1=2*var_inter[1]; reg0=reg0-1; reg1=reg1-1; T reg2=2*var_inter[2];
    T reg3=1-reg0; T reg4=1+reg0; T reg5=reg1+reg0; T reg6=1-reg1; T reg7=0.125*reg3;
    T reg8=0.125*reg4; reg2=reg2-1; T reg9=reg0-reg1; T reg10=1+reg1; T reg11=reg5+reg2;
    T reg12=reg8*reg6; T reg13=1-reg2; T reg14=reg9-reg2; T reg15=reg7*reg6; T reg16=reg1-reg0;
    T reg17=reg15*reg13; T reg18=2+reg11; T reg19=reg5-reg2; T reg20=reg13*reg12; reg8=reg10*reg8;
    reg14=reg14-2; T reg21=reg16-reg2; reg7=reg10*reg7; reg18=reg17*reg18; reg19=reg19-2;
    reg17=reg13*reg8; reg14=reg20*reg14; reg14=val[1]*reg14; reg5=reg2-reg5; reg20=1+reg2;
    reg19=reg17*reg19; reg21=reg21-2; reg18=val[0]*reg18; reg17=reg13*reg7; reg5=reg5-2;
    reg15=reg15*reg20; reg21=reg17*reg21; reg9=reg9+reg2; reg19=val[2]*reg19; reg18=reg14-reg18;
    reg0=pow(reg0,2); reg9=reg9-2; reg12=reg12*reg20; reg5=reg15*reg5; reg21=val[3]*reg21;
    reg19=reg18+reg19; reg0=1-reg0; reg16=reg16+reg2; reg11=reg11-2; reg8=reg8*reg20;
    reg9=reg12*reg9; reg1=pow(reg1,2); reg5=val[4]*reg5; reg21=reg19+reg21; reg0=0.25*reg0;
    reg16=reg16-2; reg7=reg7*reg20; reg11=reg8*reg11; reg9=val[5]*reg9; reg1=1-reg1;
    reg5=reg21+reg5; reg1=0.25*reg1; reg8=reg6*reg0; reg16=reg7*reg16; reg11=val[6]*reg11;
    reg9=reg5+reg9; reg11=reg9+reg11; reg5=reg4*reg1; reg16=val[7]*reg16; reg7=reg13*reg8;
    reg0=reg10*reg0; reg7=val[8]*reg7; reg9=reg13*reg5; reg16=reg11+reg16; reg7=reg16+reg7;
    reg1=reg3*reg1; reg9=val[9]*reg9; reg11=reg13*reg0; reg13=reg13*reg1; reg9=reg7+reg9;
    reg11=val[10]*reg11; reg2=pow(reg2,2); reg8=reg20*reg8; reg13=val[11]*reg13; reg11=reg9+reg11;
    reg2=1-reg2; reg13=reg11+reg13; reg8=val[12]*reg8; reg5=reg20*reg5; reg2=0.25*reg2;
    reg8=reg13+reg8; reg5=val[13]*reg5; reg0=reg20*reg0; reg3=reg3*reg2; reg1=reg20*reg1;
    reg0=val[14]*reg0; reg5=reg8+reg5; reg2=reg4*reg2; reg4=reg6*reg3; reg0=reg5+reg0;
    reg1=val[15]*reg1; reg1=reg0+reg1; reg4=val[16]*reg4; reg6=reg6*reg2; reg2=reg10*reg2;
    reg6=val[17]*reg6; reg4=reg1+reg4; reg6=reg4+reg6; reg2=val[18]*reg2; reg3=reg10*reg3;
    reg2=reg6+reg2; reg3=val[19]*reg3; res=reg2+reg3;

}
#ifndef STRUCT_Global
#define STRUCT_Global
struct Global {};
#endif // STRUCT_Global
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Global &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss
#define STRUCT_Gauss
struct Gauss {};
#endif // STRUCT_Gauss
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Gauss &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=var_inter[1]-0.21132486540518707896; T reg2=var_inter[0]-0.21132486540518707896; T reg3=1-var_inter[1]; reg0=reg0-0.21132486540518707896;
    T reg4=var_inter[2]-0.21132486540518707896; reg1=reg1/0.57735026918962573106; reg2=reg2/0.57735026918962573106; reg3=reg3-0.21132486540518707896; reg0=reg0/0.57735026918962573106;
    reg0=1-reg0; reg2=1-reg2; reg1=1-reg1; reg4=reg4/0.57735026918962573106; reg3=reg3/0.57735026918962573106;
    T reg5=1-var_inter[2]; reg4=1-reg4; T reg6=reg0*reg1; reg1=reg2*reg1; reg3=1-reg3;
    reg5=reg5-0.21132486540518707896; reg0=reg0*reg3; T reg7=reg4*reg6; T reg8=reg4*reg1; reg5=reg5/0.57735026918962573106;
    reg8=val[0]*reg8; reg7=val[1]*reg7; reg2=reg3*reg2; reg3=reg4*reg0; reg4=reg4*reg2;
    reg7=reg8+reg7; reg5=1-reg5; reg3=val[2]*reg3; reg4=val[3]*reg4; reg3=reg7+reg3;
    reg7=reg5*reg1; reg4=reg3+reg4; reg7=val[4]*reg7; reg3=reg6*reg5; reg7=reg4+reg7;
    reg4=reg0*reg5; reg3=val[5]*reg3; reg5=reg2*reg5; reg4=val[6]*reg4; reg3=reg7+reg3;
    reg5=val[7]*reg5; reg4=reg3+reg4; res=reg4+reg5;

}
#ifndef STRUCT_Flat_interpolation
#define STRUCT_Flat_interpolation
struct Flat_interpolation {};
#endif // STRUCT_Flat_interpolation
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Flat_interpolation &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=var_inter[1]-0.21132486540518707896; reg0=reg0-0.21132486540518707896; T reg2=1-var_inter[1]; T reg3=var_inter[0]-0.21132486540518707896;
    reg1=reg1/0.57735026918962573106; reg0=reg0/0.57735026918962573106; reg2=reg2-0.21132486540518707896; reg3=reg3/0.57735026918962573106; reg1=1-reg1;
    reg0=1-reg0; reg3=1-reg3; reg2=reg2/0.57735026918962573106; T reg4=reg3*reg1; reg2=1-reg2;
    reg1=reg0*reg1; T reg5=val[1]*reg1; T reg6=val[0]*reg4; reg0=reg0*reg2; reg5=reg6+reg5;
    reg6=val[2]*reg0; reg3=reg2*reg3; reg6=reg5+reg6; reg2=val[3]*reg3; res=reg6+reg2;

}
#ifndef STRUCT_Der_nodal
#define STRUCT_Der_nodal
struct Der_nodal {};
#endif // STRUCT_Der_nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Der_nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary
#define STRUCT_Elementary
struct Elementary {};
#endif // STRUCT_Elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Skin_elementary
#define STRUCT_Skin_elementary
struct Skin_elementary {};
#endif // STRUCT_Skin_elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa_20 &ne,const Skin_elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
template<class TVI,class TVAL> void get_shape_functions(const Hexa_20 &ne,const TVI &var_inter,TVAL &res) {
    typedef typename TVAL::template SubType<0>::T T;
    T reg0=2*var_inter[0]; reg0=reg0-1; T reg1=2*var_inter[1]; T reg2=2*var_inter[2]; reg2=reg2-1;
    reg1=reg1-1; T reg3=1-reg0; T reg4=1+reg0; T reg5=1-reg1; T reg6=pow(reg2,2);
    T reg7=pow(reg1,2); T reg8=0.125*reg3; T reg9=reg1+reg0; T reg10=pow(reg0,2); T reg11=reg8*reg5;
    T reg12=1-reg2; T reg13=reg9+reg2; T reg14=1+reg1; T reg15=0.125*reg4; reg10=1-reg10;
    T reg16=reg1-reg0; reg1=reg0-reg1; reg6=1-reg6; reg7=1-reg7; reg0=1+reg2;
    reg7=0.25*reg7; T reg17=reg2-reg9; T reg18=reg16+reg2; T reg19=reg1+reg2; reg10=0.25*reg10;
    reg16=reg16-reg2; reg8=reg14*reg8; reg6=0.25*reg6; reg9=reg9-reg2; T reg20=reg14*reg15;
    reg2=reg1-reg2; reg15=reg15*reg5; reg1=2+reg13; T reg21=reg11*reg12; T reg22=reg3*reg7;
    T reg23=reg14*reg10; reg7=reg4*reg7; reg3=reg3*reg6; reg10=reg5*reg10; reg6=reg4*reg6;
    reg18=reg18-2; reg4=reg12*reg8; reg9=reg9-2; T reg24=reg12*reg20; reg1=reg21*reg1;
    reg16=reg16-2; reg11=reg11*reg0; reg17=reg17-2; reg21=reg15*reg0; reg19=reg19-2;
    reg2=reg2-2; reg20=reg20*reg0; reg13=reg13-2; reg15=reg12*reg15; reg8=reg8*reg0;
    T reg25=reg14*reg3; res[19]=reg25; reg14=reg14*reg6; res[18]=reg14; reg6=reg5*reg6;
    res[17]=reg6; reg2=reg15*reg2; res[1]=reg2; reg3=reg5*reg3; res[16]=reg3;
    res[0]=-reg1; reg9=reg24*reg9; res[2]=reg9; reg5=reg0*reg22; res[15]=reg5;
    reg15=reg0*reg23; res[14]=reg15; reg24=reg0*reg7; res[13]=reg24; reg0=reg0*reg10;
    res[12]=reg0; reg22=reg12*reg22; res[11]=reg22; reg23=reg12*reg23; res[10]=reg23;
    reg7=reg12*reg7; res[9]=reg7; reg16=reg4*reg16; res[3]=reg16; reg17=reg11*reg17;
    res[4]=reg17; reg10=reg12*reg10; res[8]=reg10; reg19=reg21*reg19; res[5]=reg19;
    reg18=reg8*reg18; res[7]=reg18; reg13=reg20*reg13; res[6]=reg13;

}
#ifndef AUTORIZEDPERM
#define AUTORIZEDPERM
template<class T> struct AuthorizedPerm;
#endif // AUTORIZEDPERM
template<> struct AuthorizedPerm<Hexa_20> {
    static const unsigned nb_permutations = 23;
    template<class TE> static void make_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[16],e.nodes[19],e.nodes[18],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[11],e.nodes[9],e.nodes[13],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[11],e.nodes[15],e.nodes[13],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[8],e.nodes[12],e.nodes[14],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[8],e.nodes[10],e.nodes[14],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[9],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[13],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[17],e.nodes[18],e.nodes[19],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[19],e.nodes[18],e.nodes[17],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[9],e.nodes[13],e.nodes[15],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[15],e.nodes[13],e.nodes[9],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[12],e.nodes[14],e.nodes[10],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[10],e.nodes[14],e.nodes[12],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[18],e.nodes[19],e.nodes[16],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[18],e.nodes[17],e.nodes[16],e.nodes[19]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[13],e.nodes[15],e.nodes[11],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[13],e.nodes[9],e.nodes[11],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[14],e.nodes[10],e.nodes[8],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[14],e.nodes[12],e.nodes[8],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[10],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[14],e.nodes[19],e.nodes[16],e.nodes[17],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[17],e.nodes[16],e.nodes[19],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[15],e.nodes[11],e.nodes[9],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[9],e.nodes[11],e.nodes[15],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[10],e.nodes[8],e.nodes[12],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[12],e.nodes[8],e.nodes[10],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
    template<class TE> static void unmake_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[16],e.nodes[19],e.nodes[18],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[15],e.nodes[13],e.nodes[9],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[8],e.nodes[10],e.nodes[14],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[15],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[13],e.nodes[12],e.nodes[8],e.nodes[10],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[8],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[10],e.nodes[11],e.nodes[15],e.nodes[13],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[10],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[14],e.nodes[19],e.nodes[16],e.nodes[17],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[14],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[10],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[19],e.nodes[18],e.nodes[17],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[19],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[18],e.nodes[14],e.nodes[12],e.nodes[8],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[11],e.nodes[9],e.nodes[13],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[14],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[12],e.nodes[15],e.nodes[11],e.nodes[9],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[19],e.nodes[15],e.nodes[16],e.nodes[11],e.nodes[18],e.nodes[13],e.nodes[17],e.nodes[9],e.nodes[10],e.nodes[14],e.nodes[12],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[9],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[13],e.nodes[18],e.nodes[19],e.nodes[16],e.nodes[17]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[13],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[9],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[18],e.nodes[17],e.nodes[16],e.nodes[19]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[18],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[17],e.nodes[13],e.nodes[15],e.nodes[11],e.nodes[9]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[10],e.nodes[8],e.nodes[12],e.nodes[14]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[13],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[15],e.nodes[14],e.nodes[10],e.nodes[8],e.nodes[12]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[18],e.nodes[14],e.nodes[19],e.nodes[10],e.nodes[17],e.nodes[12],e.nodes[16],e.nodes[8],e.nodes[9],e.nodes[13],e.nodes[15],e.nodes[11]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[9],e.nodes[10],e.nodes[11],e.nodes[8],e.nodes[13],e.nodes[14],e.nodes[15],e.nodes[12],e.nodes[17],e.nodes[18],e.nodes[19],e.nodes[16]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[12],e.nodes[15],e.nodes[14],e.nodes[13],e.nodes[8],e.nodes[11],e.nodes[10],e.nodes[9],e.nodes[17],e.nodes[16],e.nodes[19],e.nodes[18]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[17],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[16],e.nodes[12],e.nodes[14],e.nodes[10],e.nodes[8]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[17],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[18],e.nodes[9],e.nodes[11],e.nodes[15],e.nodes[13]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[17],e.nodes[8],e.nodes[16],e.nodes[12],e.nodes[18],e.nodes[10],e.nodes[19],e.nodes[14],e.nodes[13],e.nodes[9],e.nodes[11],e.nodes[15]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[17],e.nodes[13],e.nodes[18],e.nodes[9],e.nodes[16],e.nodes[15],e.nodes[19],e.nodes[11],e.nodes[8],e.nodes[12],e.nodes[14],e.nodes[10]};
            for(unsigned i=0;i<20;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
};

template<class TN,class TNG,class TD,unsigned NET,class TVI>
typename TNG::T get_det_jac( const Element<Hexa_20,TN,TNG,TD,NET> &elem, const TVI &var_inter ) {
    typedef typename TNG::T T;
    T reg0=2*var_inter[0]; reg0=reg0-1; T reg1=2*var_inter[1]; T reg2=2*var_inter[2]; reg1=reg1-1;
    T reg3=1-reg0; T reg4=1+reg0; reg2=reg2-1; T reg5=0.125*reg3; T reg6=1-reg1;
    T reg7=reg0-reg1; T reg8=0.125*reg4; T reg9=reg1+reg0; T reg10=1+reg1; T reg11=0.25*reg6;
    T reg12=reg8*reg6; T reg13=reg5*reg6; T reg14=0.25*reg4; T reg15=1-reg2; T reg16=0.25*reg3;
    T reg17=reg9+reg2; T reg18=reg7-reg2; T reg19=reg15*reg12; T reg20=reg15*reg11; T reg21=reg13*reg15;
    T reg22=2+reg17; T reg23=2*reg13; reg18=reg18-2; reg8=reg10*reg8; T reg24=reg9-reg2;
    T reg25=reg15*reg14; T reg26=reg1-reg0; T reg27=2*reg12; T reg28=reg15*reg16; T reg29=0.25*reg10;
    T reg30=reg15*reg8; reg24=reg24-2; reg5=reg10*reg5; T reg31=reg26-reg2; T reg32=reg18*reg25;
    T reg33=reg22*reg28; T reg34=2*reg19; T reg35=reg18*reg20; T reg36=reg15*reg29; T reg37=reg18*reg27;
    T reg38=reg22*reg23; T reg39=2*reg8; T reg40=reg22*reg20; T reg41=2*reg21; T reg42=reg24*reg25;
    reg40=reg41-reg40; reg37=reg37+reg34; T reg43=2*reg5; T reg44=reg24*reg39; reg9=reg2-reg9;
    T reg45=1+reg2; reg31=reg31-2; reg35=reg34+reg35; T reg46=reg24*reg36; reg33=reg41-reg33;
    T reg47=2*reg30; reg34=reg32+reg34; reg38=reg41-reg38; reg32=reg15*reg5; reg13=reg13*reg45;
    reg9=reg9-2; reg7=reg7+reg2; reg41=reg45*reg11; reg42=reg42+reg47; T reg48=2*reg32;
    T reg49=reg16*reg45; T reg50=elem.pos(0)[2]*reg38; T reg51=elem.pos(1)[2]*reg37; T reg52=elem.pos(0)[1]*reg40; T reg53=elem.pos(1)[1]*reg35;
    T reg54=elem.pos(1)[2]*reg34; T reg55=reg31*reg43; T reg56=elem.pos(1)[1]*reg37; T reg57=elem.pos(1)[2]*reg35; reg44=reg44+reg47;
    T reg58=elem.pos(0)[1]*reg33; T reg59=elem.pos(1)[1]*reg34; T reg60=elem.pos(0)[1]*reg38; T reg61=elem.pos(0)[2]*reg33; T reg62=elem.pos(0)[2]*reg40;
    reg46=reg47+reg46; reg47=reg28*reg31; T reg63=reg31*reg36; T reg64=elem.pos(2)[2]*reg42; T reg65=reg9*reg23;
    T reg66=reg45*reg14; reg55=reg48+reg55; T reg67=elem.pos(2)[1]*reg46; T reg68=elem.pos(2)[2]*reg46; T reg69=reg9*reg49;
    reg58=reg59+reg58; T reg70=elem.pos(2)[1]*reg44; T reg71=elem.pos(2)[1]*reg42; reg52=reg53-reg52; reg53=elem.pos(2)[2]*reg44;
    reg50=reg51+reg50; reg62=reg57-reg62; reg12=reg12*reg45; reg7=reg7-2; reg63=reg48+reg63;
    reg61=reg54+reg61; reg60=reg56+reg60; reg47=reg48+reg47; reg48=reg9*reg41; reg57=2*reg13;
    reg33=elem.pos(0)[0]*reg33; reg40=elem.pos(0)[0]*reg40; reg65=reg65+reg57; T reg72=reg7*reg41; T reg73=2*reg12;
    reg68=reg62+reg68; reg62=reg60+reg70; T reg74=reg7*reg66; T reg75=elem.pos(3)[1]*reg55; reg35=elem.pos(1)[0]*reg35;
    T reg76=reg50+reg53; reg48=reg48+reg57; reg64=reg64-reg61; reg8=reg8*reg45; reg17=reg17-2;
    reg26=reg26+reg2; T reg77=elem.pos(1)[0]*reg34; T reg78=pow(reg0,2); T reg79=reg45*reg29; T reg80=elem.pos(3)[2]*reg63;
    T reg81=elem.pos(3)[2]*reg55; T reg82=elem.pos(3)[1]*reg63; T reg83=reg7*reg27; T reg84=elem.pos(3)[2]*reg47; T reg85=elem.pos(3)[1]*reg47;
    reg71=reg71-reg58; reg57=reg69+reg57; reg52=reg67+reg52; reg46=elem.pos(2)[0]*reg46; reg64=reg84+reg64;
    reg83=reg73+reg83; reg40=reg35-reg40; reg85=reg71+reg85; reg35=elem.pos(4)[1]*reg57; reg67=elem.pos(1)[0]*reg37;
    reg74=reg74+reg73; reg42=elem.pos(2)[0]*reg42; reg52=reg52-reg82; reg33=reg77+reg33; reg69=reg17*reg39;
    reg71=elem.pos(4)[2]*reg57; reg38=reg38*elem.pos(0)[0]; reg84=2*reg8; T reg86=elem.pos(4)[1]*reg65; T reg87=elem.pos(4)[1]*reg48;
    reg72=reg73+reg72; reg73=reg17*reg66; reg68=reg68-reg80; T reg88=reg17*reg79; T reg89=reg76+reg81;
    T reg90=elem.pos(4)[2]*reg65; T reg91=elem.pos(4)[2]*reg48; T reg92=pow(reg1,2); reg78=1-reg78; reg26=reg26-2;
    reg5=reg5*reg45; T reg93=reg62+reg75; reg73=reg73+reg84; reg69=reg69+reg84; T reg94=elem.pos(2)[0]*reg44;
    T reg95=elem.pos(5)[2]*reg72; reg68=reg68-reg91; reg47=elem.pos(3)[0]*reg47; T reg96=elem.pos(5)[1]*reg74; reg85=reg85-reg35;
    T reg97=elem.pos(5)[1]*reg83; T reg98=2*reg5; reg92=1-reg92; T reg99=elem.pos(5)[2]*reg74; T reg100=reg26*reg43;
    T reg101=reg26*reg79; reg86=reg86-reg93; reg46=reg40+reg46; reg90=reg90-reg89; reg64=reg64-reg71;
    reg40=elem.pos(5)[2]*reg83; reg52=reg52-reg87; T reg102=elem.pos(5)[1]*reg72; T reg103=0.25*reg78; T reg104=reg26*reg49;
    reg38=reg38+reg67; T reg105=elem.pos(3)[0]*reg63; reg42=reg42-reg33; reg84=reg88+reg84; reg88=reg38+reg94;
    T reg106=reg6*reg0; T reg107=elem.pos(4)[0]*reg48; T reg108=0.25*reg92; T reg109=elem.pos(6)[1]*reg73; reg85=reg85-reg96;
    T reg110=elem.pos(6)[2]*reg84; reg102=reg52+reg102; reg52=elem.pos(3)[0]*reg55; T reg111=elem.pos(6)[1]*reg84; reg95=reg68+reg95;
    reg101=reg98+reg101; reg68=elem.pos(6)[1]*reg69; reg104=reg104+reg98; reg86=reg97+reg86; reg46=reg46-reg105;
    reg40=reg90+reg40; reg90=elem.pos(6)[2]*reg69; reg78=0.5*reg78; reg97=elem.pos(4)[0]*reg57; reg47=reg42+reg47;
    reg98=reg100+reg98; reg64=reg64-reg99; reg42=elem.pos(6)[2]*reg73; reg100=reg6*reg103; T reg112=2*reg100;
    reg68=reg86+reg68; reg110=reg95+reg110; reg72=elem.pos(5)[0]*reg72; reg111=reg102+reg111; reg46=reg46-reg107;
    reg86=reg15*reg106; reg95=reg4*reg108; reg109=reg85+reg109; reg85=elem.pos(7)[1]*reg98; reg47=reg47-reg97;
    reg102=reg15*reg78; T reg113=elem.pos(7)[2]*reg104; reg92=0.5*reg92; T reg114=reg88+reg52; reg65=elem.pos(4)[0]*reg65;
    reg42=reg64+reg42; reg64=elem.pos(7)[2]*reg101; T reg115=elem.pos(5)[0]*reg74; reg90=reg40+reg90; reg40=elem.pos(7)[1]*reg101;
    T reg116=elem.pos(7)[2]*reg98; T reg117=elem.pos(7)[1]*reg104; T reg118=reg4*reg1; reg68=reg85+reg68; reg83=elem.pos(5)[0]*reg83;
    reg46=reg72+reg46; reg72=reg10*reg0; reg73=elem.pos(6)[0]*reg73; reg85=elem.pos(8)[2]*reg112; T reg119=elem.pos(8)[2]*reg86;
    T reg120=elem.pos(8)[1]*reg86; T reg121=reg15*reg92; reg47=reg47-reg115; reg111=reg111-reg40; reg116=reg90+reg116;
    reg90=elem.pos(8)[1]*reg112; reg110=reg110-reg64; reg103=reg10*reg103; T reg122=elem.pos(8)[2]*reg102; reg42=reg113+reg42;
    reg113=2*reg95; reg84=elem.pos(6)[0]*reg84; reg117=reg109+reg117; reg109=reg15*reg118; T reg123=elem.pos(8)[1]*reg102;
    reg65=reg65-reg114; T reg124=reg1*reg3; reg68=reg68-reg90; T reg125=elem.pos(7)[0]*reg101; reg110=reg110-reg119;
    T reg126=2*reg103; T reg127=elem.pos(9)[2]*reg113; reg84=reg46+reg84; reg46=reg15*reg72; reg104=elem.pos(7)[0]*reg104;
    T reg128=elem.pos(9)[1]*reg113; T reg129=elem.pos(9)[2]*reg109; reg73=reg47+reg73; reg116=reg116-reg85; reg47=reg121*elem.pos(9)[1];
    reg111=reg111-reg120; reg108=reg3*reg108; reg69=elem.pos(6)[0]*reg69; reg117=reg117-reg123; T reg130=elem.pos(9)[1]*reg109;
    reg83=reg65+reg83; reg42=reg42-reg122; reg65=reg121*elem.pos(9)[2]; reg42=reg42-reg129; reg116=reg116-reg127;
    T reg131=elem.pos(10)[1]*reg102; reg104=reg73+reg104; reg83=reg69+reg83; reg69=elem.pos(8)[0]*reg86; reg73=elem.pos(10)[1]*reg126;
    reg68=reg68-reg128; T reg132=elem.pos(10)[2]*reg102; T reg133=reg46*elem.pos(10)[2]; T reg134=elem.pos(8)[0]*reg102; reg84=reg84-reg125;
    T reg135=reg15*reg124; T reg136=2*reg108; reg65=reg110+reg65; reg110=reg46*elem.pos(10)[1]; T reg137=elem.pos(10)[2]*reg126;
    reg117=reg117-reg130; reg47=reg111+reg47; reg98=elem.pos(7)[0]*reg98; reg42=reg132+reg42; reg111=elem.pos(9)[0]*reg109;
    reg132=elem.pos(8)[0]*reg112; reg131=reg117+reg131; reg117=reg45*reg78; reg65=reg65-reg133; T reg138=pow(reg2,2);
    T reg139=elem.pos(11)[1]*reg136; T reg140=elem.pos(11)[1]*reg135; T reg141=elem.pos(9)[0]*reg121; reg98=reg83+reg98; reg104=reg104-reg134;
    reg68=reg68-reg73; reg83=elem.pos(11)[2]*reg121; reg84=reg84-reg69; T reg142=elem.pos(11)[2]*reg136; reg116=reg116-reg137;
    reg47=reg47-reg110; T reg143=elem.pos(11)[1]*reg121; T reg144=elem.pos(11)[2]*reg135; T reg145=reg45*reg106; reg131=reg131-reg140;
    T reg146=elem.pos(12)[1]*reg112; reg47=reg47-reg143; T reg147=elem.pos(12)[1]*reg145; reg65=reg65-reg83; T reg148=elem.pos(12)[1]*reg117;
    reg68=reg68-reg139; T reg149=elem.pos(10)[0]*reg102; reg116=reg116-reg142; T reg150=elem.pos(12)[2]*reg145; T reg151=elem.pos(12)[2]*reg112;
    T reg152=reg45*reg92; reg84=reg141+reg84; reg98=reg98-reg132; reg141=reg46*elem.pos(10)[0]; reg138=1-reg138;
    reg104=reg104-reg111; T reg153=elem.pos(12)[2]*reg117; T reg154=reg45*reg118; T reg155=elem.pos(9)[0]*reg113; reg42=reg42-reg144;
    T reg156=reg45*reg72; reg42=reg42-reg153; T reg157=elem.pos(13)[2]*reg154; T reg158=elem.pos(13)[2]*reg113; reg146=reg68+reg146;
    reg68=elem.pos(13)[2]*reg152; T reg159=elem.pos(11)[0]*reg135; reg131=reg131-reg148; T reg160=elem.pos(11)[0]*reg121; reg65=reg65-reg150;
    T reg161=0.25*reg138; reg84=reg84-reg141; reg47=reg47-reg147; reg98=reg98-reg155; T reg162=elem.pos(13)[1]*reg154;
    T reg163=elem.pos(13)[1]*reg152; reg151=reg116+reg151; reg149=reg104+reg149; reg104=elem.pos(10)[0]*reg126; reg116=elem.pos(13)[1]*reg113;
    T reg164=elem.pos(12)[0]*reg117; T reg165=elem.pos(12)[0]*reg145; reg149=reg149-reg159; reg138=0.5*reg138; T reg166=reg3*reg161;
    reg47=reg163+reg47; reg42=reg42-reg157; reg163=elem.pos(14)[2]*reg117; T reg167=reg45*reg124; T reg168=elem.pos(14)[2]*reg156;
    reg68=reg65+reg68; reg65=elem.pos(14)[1]*reg126; reg84=reg84-reg160; reg116=reg146+reg116; reg146=elem.pos(14)[2]*reg126;
    T reg169=elem.pos(14)[1]*reg117; reg131=reg131-reg162; reg3=reg2*reg3; T reg170=elem.pos(14)[1]*reg156; reg98=reg98-reg104;
    T reg171=elem.pos(11)[0]*reg136; reg158=reg151+reg158; reg151=reg6*reg138; reg84=reg84-reg165; T reg172=reg6*reg3;
    reg68=reg68-reg168; reg169=reg131+reg169; reg131=elem.pos(15)[2]*reg152; T reg173=elem.pos(15)[1]*reg167; T reg174=elem.pos(13)[0]*reg152;
    T reg175=elem.pos(13)[0]*reg154; reg163=reg42+reg163; reg98=reg98-reg171; reg42=elem.pos(15)[2]*reg167; T reg176=2*reg166;
    reg47=reg47-reg170; T reg177=elem.pos(15)[1]*reg152; T reg178=reg4*reg2; reg149=reg149-reg164; T reg179=elem.pos(15)[2]*reg136;
    reg146=reg158+reg146; reg161=reg4*reg161; reg65=reg116+reg65; reg4=elem.pos(15)[1]*reg136; reg116=elem.pos(12)[0]*reg112;
    reg158=2*reg161; reg146=reg179+reg146; reg179=elem.pos(16)[2]*reg176; reg163=reg163-reg42; T reg180=elem.pos(16)[2]*reg172;
    reg116=reg98+reg116; reg98=elem.pos(16)[1]*reg151; reg47=reg47-reg177; reg169=reg169-reg173; T reg181=elem.pos(16)[1]*reg172;
    reg174=reg84+reg174; reg84=elem.pos(16)[1]*reg176; T reg182=elem.pos(13)[0]*reg113; reg4=reg65+reg4; reg65=elem.pos(14)[0]*reg117;
    T reg183=reg6*reg178; reg68=reg68-reg131; T reg184=elem.pos(16)[2]*reg151; reg149=reg149-reg175; T reg185=elem.pos(14)[0]*reg156;
    T reg186=reg10*reg138; T reg187=elem.pos(17)[1]*reg151; reg169=reg169-reg84; T reg188=reg10*reg178; T reg189=elem.pos(17)[1]*reg183;
    T reg190=elem.pos(17)[2]*reg158; reg174=reg174-reg185; T reg191=elem.pos(17)[1]*reg158; reg163=reg163-reg179; T reg192=elem.pos(15)[0]*reg152;
    reg146=reg146-reg180; T reg193=elem.pos(17)[2]*reg183; T reg194=elem.pos(17)[2]*reg151; reg68=reg68-reg184; reg149=reg65+reg149;
    reg65=elem.pos(15)[0]*reg167; T reg195=elem.pos(14)[0]*reg126; reg4=reg4-reg181; reg47=reg47-reg98; reg182=reg116+reg182;
    reg116=elem.pos(18)[2]*reg158; reg163=reg163-reg190; reg4=reg4-reg189; reg146=reg146-reg193; reg195=reg182+reg195;
    reg182=reg10*reg3; reg47=reg187+reg47; reg187=elem.pos(18)[1]*reg186; T reg196=elem.pos(18)[2]*reg186; reg174=reg174-reg192;
    reg194=reg68+reg194; reg68=elem.pos(15)[0]*reg136; T reg197=elem.pos(16)[0]*reg176; T reg198=elem.pos(16)[0]*reg151; reg169=reg169-reg191;
    reg149=reg149-reg65; T reg199=elem.pos(18)[2]*reg188; T reg200=elem.pos(18)[1]*reg188; T reg201=elem.pos(18)[1]*reg158; reg4=reg4-reg200;
    T reg202=elem.pos(19)[1]*reg182; reg196=reg194+reg196; reg68=reg195+reg68; reg149=reg149-reg197; reg194=elem.pos(17)[0]*reg158;
    reg169=reg201+reg169; reg146=reg146-reg199; reg195=elem.pos(19)[2]*reg182; reg201=elem.pos(19)[2]*reg176; T reg203=elem.pos(16)[0]*reg172;
    T reg204=elem.pos(19)[1]*reg186; reg47=reg187+reg47; reg174=reg174-reg198; reg187=elem.pos(17)[0]*reg151; T reg205=elem.pos(19)[1]*reg176;
    T reg206=elem.pos(19)[2]*reg186; reg116=reg163+reg116; reg4=reg4-reg202; reg174=reg187+reg174; reg47=reg47-reg204;
    reg149=reg149-reg194; reg163=elem.pos(18)[0]*reg186; reg196=reg196-reg206; reg169=reg205+reg169; reg68=reg68-reg203;
    reg146=reg146-reg195; reg201=reg116+reg201; reg116=elem.pos(17)[0]*reg183; reg187=elem.pos(18)[0]*reg158; reg163=reg174+reg163;
    reg174=reg201*reg4; reg205=elem.pos(19)[0]*reg176; T reg207=elem.pos(18)[0]*reg188; T reg208=reg47*reg146; reg187=reg149+reg187;
    reg149=reg196*reg4; T reg209=elem.pos(19)[0]*reg186; T reg210=reg169*reg146; reg68=reg68-reg116; reg174=reg210-reg174;
    reg210=elem.pos(19)[0]*reg182; reg205=reg187+reg205; reg149=reg208-reg149; reg187=reg196*reg169; reg68=reg68-reg207;
    reg163=reg163-reg209; reg208=reg201*reg47; reg187=reg208-reg187; reg68=reg68-reg210; reg208=reg205*reg149;
    T reg211=reg163*reg174; T reg212=reg68*reg187; reg208=reg211-reg208; reg208=reg212+reg208; return reg208;

}
}
#endif // LMT_HEXA_20
