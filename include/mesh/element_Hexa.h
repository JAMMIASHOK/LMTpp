#ifndef LMT_HEXA
#define LMT_HEXA
namespace LMT {
inline const double *gauss_point_for_order(unsigned order, const Hexa &elem) { /// order -> degre du polynome a integrer exactement
    static const unsigned offset[] = { 0, 33, 66, 99, 132, 269, 406, 543, 680, 817, }; // fonction de lordre du poly
    static const double values[] = {
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.0,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.0,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.0,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
    };
    return values + offset[order];
}
template<class TNode> void permutation_if_jac_neg(const Hexa &elem,TNode **nodes) {
    typedef typename TNode::T T;
    T reg0=0.25*nodes[0]->pos[1]; T reg1=0.25*nodes[1]->pos[1]; T reg2=0.25*nodes[0]->pos[2]; T reg3=0.25*nodes[1]->pos[2]; T reg4=0.25*nodes[2]->pos[1];
    T reg5=reg0+reg1; T reg6=reg2+reg3; T reg7=0.25*nodes[2]->pos[2]; reg0=reg1-reg0; reg2=reg3-reg2;
    reg1=reg6+reg7; reg3=0.25*nodes[3]->pos[2]; reg6=reg7-reg6; T reg8=reg4+reg5; T reg9=0.25*nodes[3]->pos[1];
    reg5=reg4-reg5; reg0=reg4+reg0; reg2=reg7+reg2; reg4=0.25*nodes[1]->pos[0]; reg7=0.25*nodes[0]->pos[0];
    reg5=reg5+reg9; T reg10=0.25*nodes[4]->pos[1]; T reg11=0.25*nodes[4]->pos[2]; reg1=reg1+reg3; reg2=reg2-reg3;
    reg6=reg3+reg6; reg8=reg9+reg8; reg3=reg4+reg7; reg9=reg0-reg9; reg7=reg4-reg7;
    reg0=0.25*nodes[2]->pos[0]; reg7=reg7+reg0; reg4=0.25*nodes[3]->pos[0]; reg9=reg9-reg10; T reg12=reg0-reg3;
    reg8=reg10-reg8; reg6=reg6-reg11; reg2=reg2-reg11; T reg13=0.25*nodes[5]->pos[2]; reg1=reg11-reg1;
    reg10=reg5-reg10; reg5=0.25*nodes[5]->pos[1]; reg10=reg10-reg5; reg8=reg5+reg8; reg11=0.25*nodes[6]->pos[1];
    reg6=reg6-reg13; reg9=reg5+reg9; reg5=0.25*nodes[4]->pos[0]; reg12=reg4+reg12; T reg14=0.25*nodes[6]->pos[2];
    reg1=reg1+reg13; reg2=reg13+reg2; reg3=reg0+reg3; reg7=reg7-reg4; reg12=reg12-reg5;
    reg9=reg11+reg9; reg8=reg11+reg8; reg7=reg7-reg5; reg6=reg14+reg6; reg11=reg10+reg11;
    reg0=0.25*nodes[5]->pos[0]; reg3=reg4+reg3; reg4=0.25*nodes[7]->pos[1]; reg10=0.25*nodes[7]->pos[2]; reg1=reg1+reg14;
    reg2=reg14+reg2; reg9=reg9-reg4; reg3=reg5-reg3; reg2=reg2-reg10; reg5=0.25*nodes[6]->pos[0];
    reg12=reg12-reg0; reg7=reg7+reg0; reg8=reg4+reg8; reg6=reg10+reg6; reg4=reg11+reg4;
    reg10=reg1+reg10; reg7=reg7+reg5; reg1=reg8*reg2; reg11=0.25*nodes[7]->pos[0]; reg3=reg0+reg3;
    reg0=reg4*reg10; reg10=reg10*reg9; reg8=reg6*reg8; reg12=reg5+reg12; reg3=reg5+reg3;
    reg9=reg6*reg9; reg2=reg4*reg2; reg1=reg10-reg1; reg7=reg7-reg11; reg8=reg0-reg8;
    reg12=reg11+reg12; reg1=reg12*reg1; reg3=reg11+reg3; reg8=reg7*reg8; reg2=reg9-reg2;
    reg1=reg8-reg1; reg2=reg3*reg2; T det_jac=reg1+reg2;

    if ( det_jac < 0 ) {
        TNode *tmp[] = {nodes[0],nodes[3],nodes[2],nodes[1],nodes[4],nodes[7],nodes[6],nodes[5]};
        for(unsigned i=0;i<8;++i) nodes[i] = tmp[i];
    }
}
template<class PosNodes,class Pvec,class TVI> void get_var_inter_linear(const Hexa &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=1-var_inter[2]; T reg1=1-var_inter[0]; T reg2=1-var_inter[1]; T reg3=reg0*reg1; T reg4=reg0*var_inter[0];
    T reg5=reg2*var_inter[0]; T reg6=reg2*reg1; T reg7=pos_nodes[0][0]*reg3; T reg8=pos_nodes[1][0]*reg4; T reg9=pos_nodes[0][2]*reg3;
    T reg10=pos_nodes[0][0]*reg6; T reg11=reg5*pos_nodes[1][0]; T reg12=reg5*pos_nodes[1][1]; T reg13=reg6*pos_nodes[0][1]; T reg14=pos_nodes[1][2]*reg4;
    T reg15=reg6*pos_nodes[0][2]; T reg16=reg5*pos_nodes[1][2]; T reg17=pos_nodes[0][1]*reg3; T reg18=pos_nodes[1][1]*reg4; T reg19=var_inter[0]*var_inter[1];
    reg14=reg9+reg14; reg9=reg19*pos_nodes[2][2]; T reg20=pos_nodes[2][0]*reg4; reg8=reg7+reg8; reg7=pos_nodes[2][2]*reg4;
    T reg21=reg1*var_inter[1]; reg11=reg10+reg11; reg10=reg19*pos_nodes[2][0]; T reg22=reg2*reg0; T reg23=pos_nodes[2][1]*reg4;
    reg17=reg18+reg17; reg12=reg13+reg12; reg13=reg19*pos_nodes[2][1]; reg16=reg15+reg16; reg10=reg11+reg10;
    reg13=reg12+reg13; reg11=reg21*pos_nodes[3][0]; reg12=pos_nodes[1][1]*reg22; reg15=pos_nodes[0][1]*reg22; reg18=pos_nodes[3][0]*reg3;
    reg8=reg20-reg8; reg20=pos_nodes[3][1]*reg3; reg17=reg23-reg17; reg23=reg1*var_inter[2]; T reg24=reg21*pos_nodes[3][2];
    reg9=reg16+reg9; reg16=reg21*pos_nodes[3][1]; T reg25=reg0*var_inter[1]; T reg26=pos_nodes[1][0]*reg22; T reg27=pos_nodes[0][0]*reg22;
    reg14=reg7-reg14; reg7=pos_nodes[3][2]*reg3; reg16=reg13+reg16; reg13=pos_nodes[4][2]*reg23; T reg28=reg6*pos_nodes[4][2];
    T reg29=pos_nodes[0][2]*reg22; T reg30=reg6*pos_nodes[4][1]; T reg31=pos_nodes[1][2]*reg22; reg11=reg10+reg11; reg10=var_inter[0]*var_inter[2];
    reg27=reg26-reg27; reg15=reg12-reg15; reg12=reg6*pos_nodes[4][0]; reg24=reg9+reg24; reg7=reg14+reg7;
    reg18=reg8+reg18; reg8=pos_nodes[4][0]*reg23; reg20=reg17+reg20; reg9=pos_nodes[4][1]*reg23; reg14=pos_nodes[2][0]*reg25;
    reg17=pos_nodes[2][1]*reg25; reg9=reg20-reg9; reg20=pos_nodes[5][1]*reg10; reg26=pos_nodes[3][1]*reg25; reg17=reg15+reg17;
    reg15=reg0*reg5; T reg32=reg6*reg0; T reg33=pos_nodes[5][2]*reg10; reg24=reg28-reg24; reg28=pos_nodes[3][0]*reg25;
    reg14=reg27+reg14; reg8=reg18-reg8; reg18=pos_nodes[5][0]*reg10; reg27=reg5*pos_nodes[5][2]; T reg34=pos_nodes[2][2]*reg25;
    reg13=reg7-reg13; reg7=reg2*var_inter[2]; reg11=reg12-reg11; reg12=reg5*pos_nodes[5][0]; reg29=reg31-reg29;
    reg31=reg5*pos_nodes[5][1]; reg16=reg30-reg16; reg20=reg9-reg20; reg9=pos_nodes[6][1]*reg10; reg30=pos_nodes[6][2]*reg10;
    reg27=reg24+reg27; reg24=reg32*pos_nodes[0][1]; reg34=reg29+reg34; reg29=pos_nodes[3][2]*reg25; T reg35=reg15*pos_nodes[1][1];
    T reg36=reg19*pos_nodes[6][2]; T reg37=reg19*pos_nodes[6][1]; reg31=reg16+reg31; reg33=reg13-reg33; reg13=pos_nodes[0][0]*reg32;
    reg16=reg15*pos_nodes[1][0]; T reg38=pos_nodes[4][0]*reg7; reg28=reg14-reg28; reg14=reg19*pos_nodes[6][0]; reg12=reg11+reg12;
    reg18=reg8-reg18; reg26=reg17-reg26; reg8=reg0*reg19; reg11=pos_nodes[6][0]*reg10; reg17=pos_nodes[4][1]*reg7;
    reg11=reg18+reg11; reg18=pos_nodes[7][0]*reg23; reg36=reg27+reg36; reg29=reg34-reg29; reg27=reg21*pos_nodes[7][2];
    reg34=reg15*pos_nodes[1][2]; T reg39=reg0*reg21; T reg40=pos_nodes[4][2]*reg7; T reg41=reg8*pos_nodes[2][1]; reg35=reg24+reg35;
    reg14=reg12+reg14; reg12=reg21*pos_nodes[7][1]; reg37=reg31+reg37; reg24=reg21*pos_nodes[7][0]; reg30=reg33+reg30;
    reg16=reg13+reg16; reg13=reg8*pos_nodes[2][0]; reg31=var_inter[1]*var_inter[2]; reg33=pos_nodes[5][1]*reg7; reg17=reg26-reg17;
    reg26=pos_nodes[5][0]*reg7; reg38=reg28-reg38; reg28=pos_nodes[7][1]*reg23; T reg42=reg32*pos_nodes[0][2]; T reg43=pos_nodes[7][2]*reg23;
    reg9=reg20+reg9; reg28=reg9+reg28; reg18=reg11+reg18; reg43=reg30+reg43; reg40=reg29-reg40;
    reg9=pos_nodes[5][2]*reg7; reg33=reg17+reg33; reg11=pos_nodes[6][1]*reg31; reg27=reg36+reg27; reg34=reg42+reg34;
    reg17=reg8*pos_nodes[2][2]; reg20=reg6*var_inter[2]; reg29=pos_nodes[6][0]*reg31; reg26=reg38+reg26; reg30=reg39*pos_nodes[3][1];
    reg41=reg35+reg41; reg35=reg39*pos_nodes[3][0]; reg12=reg37+reg12; reg13=reg16+reg13; reg24=reg14+reg24;
    reg14=pos_nodes[7][0]*reg31; reg29=reg26+reg29; reg16=reg5*var_inter[2]; reg26=pos_nodes[7][1]*reg31; reg11=reg33+reg11;
    reg33=reg24*reg43; reg36=reg18*reg27; reg37=reg12*reg43; reg38=reg28*reg27; reg42=reg20*pos_nodes[4][0];
    reg35=reg13+reg35; reg30=reg41+reg30; reg13=reg20*pos_nodes[4][1]; reg41=reg39*pos_nodes[3][2]; reg17=reg34+reg17;
    reg9=reg40+reg9; reg34=pos_nodes[6][2]*reg31; reg40=reg20*pos_nodes[4][2]; reg41=reg17+reg41; reg37=reg38-reg37;
    reg17=reg18*reg12; reg33=reg36-reg33; T reg44=reg19*var_inter[2]; T reg45=reg24*reg28; T reg46=reg16*pos_nodes[5][0];
    reg14=reg29-reg14; reg29=pos_nodes[7][2]*reg31; reg34=reg9+reg34; reg42=reg35+reg42; reg26=reg11-reg26;
    reg13=reg30+reg13; reg9=reg16*pos_nodes[5][1]; reg11=reg14*reg37; reg46=reg42+reg46; reg30=reg44*pos_nodes[6][0];
    reg35=reg26*reg33; reg42=reg16*pos_nodes[5][2]; reg40=reg41+reg40; reg9=reg13+reg9; reg13=reg44*pos_nodes[6][1];
    reg45=reg17-reg45; reg29=reg34-reg29; reg34=reg21*var_inter[2]; reg41=reg29*reg45; T reg47=reg28*reg29;
    reg11=reg35-reg11; reg35=reg14*reg27; T reg48=reg34*pos_nodes[7][0]; reg30=reg46+reg30; reg46=reg26*reg27;
    T reg49=reg12*reg29; T reg50=reg26*reg43; T reg51=reg24*reg29; T reg52=reg14*reg43; T reg53=reg18*reg29;
    T reg54=reg44*pos_nodes[6][2]; reg42=reg40+reg42; reg13=reg9+reg13; reg9=reg34*pos_nodes[7][1]; reg51=reg35-reg51;
    reg47=reg50-reg47; reg53=reg52-reg53; reg40=reg14*reg12; reg49=reg46-reg49; T reg55=reg24*reg26;
    T reg56=reg14*reg28; T reg57=reg18*reg26; reg9=reg13+reg9; reg54=reg42+reg54; reg13=reg34*pos_nodes[7][2];
    reg48=reg30+reg48; reg41=reg11-reg41; reg33=reg33/reg41; reg51=reg51/reg41; reg13=reg54+reg13;
    reg48=pos[0]-reg48; reg47=reg47/reg41; reg57=reg56-reg57; reg37=reg37/reg41; reg53=reg53/reg41;
    reg9=pos[1]-reg9; reg49=reg49/reg41; reg55=reg40-reg55; reg33=reg9*reg33; reg49=reg48*reg49;
    reg51=reg9*reg51; reg47=reg48*reg47; reg53=reg9*reg53; reg37=reg48*reg37; reg57=reg57/reg41;
    reg55=reg55/reg41; reg41=reg45/reg41; reg13=pos[2]-reg13; reg41=reg13*reg41; reg37=reg33-reg37;
    reg55=reg13*reg55; reg51=reg49-reg51; reg57=reg13*reg57; reg47=reg53-reg47; var_inter[0]=reg37-reg41;
    var_inter[1]=reg55+reg51; var_inter[2]=reg47-reg57;

}
template<class PosNodes,class Pvec,class TVI> void get_var_inter(const Hexa &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=1-var_inter[2]; T reg3=var_inter[0]*reg1; T reg4=reg1*reg0;
    T reg5=var_inter[0]*reg2; T reg6=reg2*reg0; T reg7=reg4*pos_nodes[0][2]; T reg8=reg3*pos_nodes[1][2]; T reg9=pos_nodes[1][2]*reg5;
    T reg10=pos_nodes[0][1]*reg6; T reg11=pos_nodes[1][1]*reg5; T reg12=reg3*pos_nodes[1][0]; T reg13=pos_nodes[0][0]*reg4; T reg14=pos_nodes[0][2]*reg6;
    T reg15=pos_nodes[1][0]*reg5; T reg16=pos_nodes[0][1]*reg4; T reg17=var_inter[0]*var_inter[1]; T reg18=reg3*pos_nodes[1][1]; T reg19=pos_nodes[0][0]*reg6;
    reg15=reg19+reg15; reg12=reg13+reg12; reg13=reg17*pos_nodes[2][0]; reg19=reg1*reg2; T reg20=reg17*pos_nodes[2][2];
    reg8=reg7+reg8; reg7=pos_nodes[2][0]*reg5; T reg21=pos_nodes[2][2]*reg5; reg9=reg14+reg9; reg14=pos_nodes[2][1]*reg5;
    reg11=reg10+reg11; reg10=reg17*pos_nodes[2][1]; reg18=reg16+reg18; reg16=var_inter[1]*reg0; T reg22=var_inter[2]*reg0;
    T reg23=reg16*pos_nodes[3][1]; reg10=reg18+reg10; reg18=reg16*pos_nodes[3][2]; T reg24=pos_nodes[3][1]*reg6; reg11=reg14-reg11;
    reg15=reg7-reg15; reg7=pos_nodes[3][0]*reg6; reg20=reg8+reg20; reg13=reg12+reg13; reg8=reg16*pos_nodes[3][0];
    reg9=reg21-reg9; reg12=pos_nodes[3][2]*reg6; reg14=pos_nodes[1][1]*reg19; reg21=pos_nodes[0][1]*reg19; T reg25=pos_nodes[0][0]*reg19;
    T reg26=pos_nodes[1][0]*reg19; T reg27=var_inter[1]*reg2; T reg28=reg4*pos_nodes[4][0]; reg8=reg13+reg8; reg13=pos_nodes[1][2]*reg19;
    T reg29=reg4*pos_nodes[4][2]; T reg30=pos_nodes[4][2]*reg22; reg21=reg14-reg21; reg14=pos_nodes[2][1]*reg27; reg12=reg9+reg12;
    reg24=reg11+reg24; reg9=pos_nodes[4][1]*reg22; reg11=reg4*pos_nodes[4][1]; reg23=reg10+reg23; reg10=pos_nodes[0][2]*reg19;
    reg18=reg20+reg18; reg20=pos_nodes[4][0]*reg22; T reg31=pos_nodes[2][0]*reg27; reg25=reg26-reg25; reg7=reg15+reg7;
    reg15=var_inter[0]*var_inter[2]; reg26=reg3*pos_nodes[5][2]; T reg32=pos_nodes[5][1]*reg15; reg9=reg24-reg9; reg24=pos_nodes[5][2]*reg15;
    reg30=reg12-reg30; reg14=reg21+reg14; reg12=pos_nodes[3][1]*reg27; reg31=reg25+reg31; reg21=pos_nodes[3][0]*reg27;
    reg10=reg13-reg10; reg13=pos_nodes[2][2]*reg27; reg25=var_inter[2]*reg1; T reg33=pos_nodes[5][0]*reg15; reg8=reg28-reg8;
    reg28=reg3*pos_nodes[5][0]; reg20=reg7-reg20; reg7=reg2*reg3; T reg34=reg4*reg2; reg18=reg29-reg18;
    reg23=reg11-reg23; reg11=reg3*pos_nodes[5][1]; reg11=reg23+reg11; reg23=reg17*pos_nodes[6][1]; reg29=pos_nodes[0][1]*reg34;
    T reg35=reg7*pos_nodes[1][1]; reg32=reg9-reg32; reg9=pos_nodes[6][1]*reg15; reg26=reg18+reg26; reg18=reg17*pos_nodes[6][2];
    T reg36=pos_nodes[4][0]*reg25; T reg37=pos_nodes[3][2]*reg27; reg13=reg10+reg13; reg10=reg2*reg17; T reg38=reg7*pos_nodes[1][0];
    T reg39=pos_nodes[0][0]*reg34; T reg40=reg17*pos_nodes[6][0]; reg28=reg8+reg28; reg33=reg20-reg33; reg8=pos_nodes[6][2]*reg15;
    reg24=reg30-reg24; reg21=reg31-reg21; reg20=pos_nodes[6][0]*reg15; reg30=pos_nodes[4][1]*reg25; reg12=reg14-reg12;
    reg14=var_inter[1]*var_inter[2]; reg37=reg13-reg37; reg13=pos_nodes[4][2]*reg25; reg31=reg10*pos_nodes[2][1]; reg35=reg29+reg35;
    reg20=reg33+reg20; reg29=reg16*pos_nodes[7][1]; reg23=reg11+reg23; reg40=reg28+reg40; reg11=reg16*pos_nodes[7][0];
    reg18=reg26+reg18; reg26=pos_nodes[7][0]*reg22; reg28=pos_nodes[5][1]*reg25; reg36=reg21-reg36; reg21=pos_nodes[5][0]*reg25;
    reg30=reg12-reg30; reg8=reg24+reg8; reg12=pos_nodes[7][2]*reg22; reg9=reg32+reg9; reg24=pos_nodes[7][1]*reg22;
    reg32=reg2*reg16; reg33=reg16*pos_nodes[7][2]; T reg41=reg10*pos_nodes[2][0]; reg38=reg39+reg38; reg39=reg34*pos_nodes[0][2];
    T reg42=reg7*pos_nodes[1][2]; reg33=reg18+reg33; reg18=reg10*pos_nodes[2][2]; T reg43=pos_nodes[5][2]*reg25; reg13=reg37-reg13;
    reg12=reg8+reg12; reg42=reg39+reg42; reg8=reg32*pos_nodes[3][0]; reg28=reg30+reg28; reg30=pos_nodes[6][1]*reg14;
    reg41=reg38+reg41; reg37=var_inter[2]*reg4; reg11=reg40+reg11; reg21=reg36+reg21; reg36=reg32*pos_nodes[3][1];
    reg31=reg35+reg31; reg35=pos_nodes[6][0]*reg14; reg24=reg9+reg24; reg29=reg23+reg29; reg26=reg20+reg26;
    reg8=reg41+reg8; reg9=reg37*pos_nodes[4][0]; reg20=reg37*pos_nodes[4][1]; reg23=pos_nodes[7][0]*reg14; reg35=reg21+reg35;
    reg21=reg11*reg12; reg38=var_inter[2]*reg3; reg18=reg42+reg18; reg39=reg32*pos_nodes[3][2]; reg40=reg26*reg33;
    reg41=reg29*reg12; reg42=reg24*reg33; reg30=reg28+reg30; reg28=pos_nodes[7][1]*reg14; reg36=reg31+reg36;
    reg43=reg13+reg43; reg13=pos_nodes[6][2]*reg14; reg41=reg42-reg41; reg31=reg26*reg29; reg39=reg18+reg39;
    reg18=reg38*pos_nodes[5][1]; T reg44=var_inter[2]*reg17; T reg45=reg37*pos_nodes[4][2]; reg36=reg20+reg36; reg21=reg40-reg21;
    reg13=reg43+reg13; reg23=reg35-reg23; reg20=pos_nodes[7][2]*reg14; reg28=reg30-reg28; reg30=reg11*reg24;
    reg8=reg9+reg8; reg9=reg38*pos_nodes[5][0]; reg35=reg23*reg41; reg43=reg38*pos_nodes[5][2]; reg39=reg45+reg39;
    reg45=reg44*pos_nodes[6][0]; T reg46=reg44*pos_nodes[6][1]; reg18=reg36+reg18; reg9=reg8+reg9; reg8=var_inter[2]*reg16;
    reg36=reg28*reg21; reg30=reg31-reg30; reg20=reg13-reg20; reg13=reg24*reg20; T reg47=reg20*reg30;
    T reg48=reg28*reg33; reg35=reg36-reg35; reg36=reg29*reg20; T reg49=reg28*reg12; T reg50=reg23*reg33;
    T reg51=reg11*reg20; T reg52=reg44*pos_nodes[6][2]; reg43=reg39+reg43; reg39=reg23*reg12; T reg53=reg26*reg20;
    T reg54=reg8*pos_nodes[7][1]; reg45=reg9+reg45; reg9=reg8*pos_nodes[7][0]; reg46=reg18+reg46; reg18=reg26*reg28;
    T reg55=reg23*reg24; reg36=reg48-reg36; T reg56=reg11*reg28; T reg57=reg23*reg29; reg53=reg39-reg53;
    reg51=reg50-reg51; reg13=reg49-reg13; reg54=reg46+reg54; reg9=reg45+reg9; reg52=reg43+reg52;
    reg43=reg8*pos_nodes[7][2]; reg47=reg35-reg47; reg21=reg21/reg47; reg43=reg52+reg43; reg51=reg51/reg47;
    reg13=reg13/reg47; reg41=reg41/reg47; reg18=reg55-reg18; reg53=reg53/reg47; reg36=reg36/reg47;
    reg9=pos[0]-reg9; reg54=pos[1]-reg54; reg56=reg57-reg56; reg21=reg54*reg21; reg36=reg9*reg36;
    reg51=reg54*reg51; reg13=reg9*reg13; reg53=reg54*reg53; reg41=reg9*reg41; reg18=reg18/reg47;
    reg56=reg56/reg47; reg47=reg30/reg47; reg43=pos[2]-reg43; reg47=reg43*reg47; reg41=reg21-reg41;
    reg56=reg43*reg56; reg51=reg36-reg51; reg18=reg43*reg18; reg13=reg53-reg13; var_inter[0]+=reg41-reg47;
    var_inter[1]+=reg56+reg51; var_inter[2]+=reg13-reg18;

}
template<> struct ElemVarInterFromPosNonLinear<Hexa> { static const bool res = 3; };
#ifndef STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
#define STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
struct Elementary_mul_nb_nodes_of_each_children_elem {};
#endif // STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary_mul_nb_nodes_of_each_children_elem &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary_mul_nb_nodes
#define STRUCT_Elementary_mul_nb_nodes
struct Elementary_mul_nb_nodes {};
#endif // STRUCT_Elementary_mul_nb_nodes
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary_mul_nb_nodes &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Nodal
#define STRUCT_Nodal
struct Nodal {};
#endif // STRUCT_Nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=var_inter[0]*reg1; T reg3=reg0*reg1; T reg4=1-var_inter[2];
    T reg5=reg4*reg2; T reg6=var_inter[0]*var_inter[1]; T reg7=reg3*reg4; reg5=val[1]*reg5; reg7=val[0]*reg7;
    T reg8=var_inter[1]*reg0; T reg9=reg4*reg6; reg5=reg7+reg5; reg9=val[2]*reg9; reg7=reg4*reg8;
    reg9=reg5+reg9; reg7=val[3]*reg7; reg3=var_inter[2]*reg3; reg3=val[4]*reg3; reg2=var_inter[2]*reg2;
    reg7=reg9+reg7; reg3=reg7+reg3; reg2=val[5]*reg2; reg6=var_inter[2]*reg6; reg2=reg3+reg2;
    reg6=val[6]*reg6; reg8=var_inter[2]*reg8; reg6=reg2+reg6; reg8=val[7]*reg8; res=reg6+reg8;

}
#ifndef STRUCT_Global
#define STRUCT_Global
struct Global {};
#endif // STRUCT_Global
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Global &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss
#define STRUCT_Gauss
struct Gauss {};
#endif // STRUCT_Gauss
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Gauss &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=reg0-0.21132486540518707896; T reg2=var_inter[0]-0.21132486540518707896; T reg3=var_inter[1]-0.21132486540518707896; T reg4=1-var_inter[1];
    reg2=reg2/0.57735026918962573106; reg3=reg3/0.57735026918962573106; T reg5=var_inter[2]-0.21132486540518707896; T reg6=reg4-0.21132486540518707896; reg1=reg1/0.57735026918962573106;
    reg5=reg5/0.57735026918962573106; reg3=1-reg3; reg6=reg6/0.57735026918962573106; reg2=1-reg2; reg1=1-reg1;
    T reg7=1-var_inter[2]; T reg8=reg2*reg3; reg5=1-reg5; reg3=reg3*reg1; reg6=1-reg6;
    T reg9=reg8*reg5; T reg10=reg5*reg3; T reg11=reg7-0.21132486540518707896; reg1=reg1*reg6; reg6=reg2*reg6;
    reg10=val[1]*reg10; reg11=reg11/0.57735026918962573106; reg9=val[0]*reg9; reg2=reg5*reg1; reg10=reg9+reg10;
    reg2=val[2]*reg2; reg5=reg5*reg6; reg11=1-reg11; reg2=reg10+reg2; reg5=val[3]*reg5;
    reg9=reg8*reg11; reg5=reg2+reg5; reg9=val[4]*reg9; reg2=reg3*reg11; reg10=reg1*reg11;
    reg2=val[5]*reg2; reg9=reg5+reg9; reg11=reg6*reg11; reg10=val[6]*reg10; reg9=reg2+reg9;
    reg11=val[7]*reg11; reg10=reg9+reg10; res=reg10+reg11;

}
#ifndef STRUCT_Flat_interpolation
#define STRUCT_Flat_interpolation
struct Flat_interpolation {};
#endif // STRUCT_Flat_interpolation
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Flat_interpolation &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=var_inter[0]-0.21132486540518707896; T reg3=reg0-0.21132486540518707896; T reg4=var_inter[1]-0.21132486540518707896;
    reg2=reg2/0.57735026918962573106; T reg5=reg1-0.21132486540518707896; reg3=reg3/0.57735026918962573106; reg4=reg4/0.57735026918962573106; reg2=1-reg2;
    reg4=1-reg4; reg3=1-reg3; reg5=reg5/0.57735026918962573106; T reg6=reg2*reg4; reg4=reg4*reg3;
    reg5=1-reg5; T reg7=val[1]*reg4; T reg8=val[0]*reg6; reg3=reg3*reg5; T reg9=val[2]*reg3;
    reg7=reg8+reg7; reg5=reg2*reg5; reg2=val[3]*reg5; reg9=reg7+reg9; res=reg9+reg2;

}
#ifndef STRUCT_Der_nodal
#define STRUCT_Der_nodal
struct Der_nodal {};
#endif // STRUCT_Der_nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Der_nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary
#define STRUCT_Elementary
struct Elementary {};
#endif // STRUCT_Elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Skin_elementary
#define STRUCT_Skin_elementary
struct Skin_elementary {};
#endif // STRUCT_Skin_elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Skin_elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
template<class TVI,class TVAL> void get_shape_functions(const Hexa &ne,const TVI &var_inter,TVAL &res) {
    typedef typename TVAL::template SubType<0>::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=var_inter[1]*reg0; T reg3=var_inter[0]*var_inter[1]; T reg4=var_inter[0]*reg1;
    T reg5=1-var_inter[2]; T reg6=reg0*reg1; T reg7=reg6*reg5; res[0]=reg7; T reg8=reg5*reg4;
    res[1]=reg8; T reg9=reg5*reg3; res[2]=reg9; T reg10=reg5*reg2; res[3]=reg10;
    reg6=var_inter[2]*reg6; res[4]=reg6; reg4=var_inter[2]*reg4; res[5]=reg4; reg3=var_inter[2]*reg3;
    res[6]=reg3; reg2=var_inter[2]*reg2; res[7]=reg2;

}
#ifndef AUTORIZEDPERM
#define AUTORIZEDPERM
template<class T> struct AuthorizedPerm;
#endif // AUTORIZEDPERM
template<> struct AuthorizedPerm<Hexa> {
    static const unsigned nb_permutations = 23;
    template<class TE> static void make_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
    template<class TE> static void unmake_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
};

}
#endif // LMT_HEXA
