#ifndef LMT_HEXA
#define LMT_HEXA
namespace LMT {
inline const double *gauss_point_for_order(unsigned order, const Hexa &elem) { /// order -> degre du polynome a integrer exactement
    static const unsigned offset[] = { 0, 5, 10, 43, 180, 317, 454, 591, 728, 865, }; // fonction de lordre du poly
    static const double values[] = {
        1.0,0.5,0.5,0.5,
        0.0,
        1.0,0.5,0.5,0.5,
        0.0,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
    };
    return values + offset[order];
}
template<class TNode> void permutation_if_jac_neg(const Hexa &elem,TNode **nodes) {
    typedef typename TNode::T T;
    T reg0=0.25*nodes[1]->pos[2]; T reg1=0.25*nodes[0]->pos[2]; T reg2=0.25*nodes[0]->pos[1]; T reg3=0.25*nodes[1]->pos[1]; T reg4=0.25*nodes[2]->pos[2];
    T reg5=reg1+reg0; reg1=reg0-reg1; reg0=reg3-reg2; reg3=reg2+reg3; reg2=0.25*nodes[2]->pos[1];
    T reg6=reg4-reg5; T reg7=reg2+reg3; T reg8=0.25*nodes[3]->pos[2]; T reg9=0.25*nodes[1]->pos[0]; T reg10=0.25*nodes[0]->pos[0];
    reg5=reg5+reg4; reg0=reg2+reg0; reg3=reg2-reg3; reg1=reg4+reg1; reg2=0.25*nodes[3]->pos[1];
    reg0=reg0-reg2; reg4=reg9-reg10; T reg11=0.25*nodes[2]->pos[0]; reg7=reg2+reg7; reg2=reg3+reg2;
    reg3=0.25*nodes[4]->pos[1]; reg6=reg8+reg6; reg1=reg1-reg8; reg10=reg9+reg10; reg8=reg5+reg8;
    reg5=0.25*nodes[4]->pos[2]; reg4=reg4+reg11; reg9=0.25*nodes[3]->pos[0]; T reg12=reg11-reg10; reg1=reg1-reg5;
    reg0=reg0-reg3; reg7=reg3-reg7; reg6=reg6-reg5; reg3=reg2-reg3; reg2=0.25*nodes[5]->pos[1];
    T reg13=0.25*nodes[5]->pos[2]; reg8=reg5-reg8; reg0=reg2+reg0; reg3=reg3-reg2; reg5=0.25*nodes[6]->pos[1];
    reg12=reg9+reg12; reg1=reg13+reg1; reg10=reg11+reg10; reg8=reg8+reg13; reg11=0.25*nodes[6]->pos[2];
    T reg14=0.25*nodes[4]->pos[0]; reg4=reg4-reg9; reg13=reg6-reg13; reg7=reg2+reg7; reg1=reg11+reg1;
    reg10=reg9+reg10; reg0=reg5+reg0; reg7=reg5+reg7; reg4=reg4-reg14; reg2=0.25*nodes[5]->pos[0];
    reg13=reg11+reg13; reg6=0.25*nodes[7]->pos[2]; reg11=reg8+reg11; reg8=0.25*nodes[7]->pos[1]; reg12=reg12-reg14;
    reg5=reg3+reg5; reg7=reg8+reg7; reg13=reg6+reg13; reg0=reg0-reg8; reg4=reg4+reg2;
    reg11=reg11+reg6; reg12=reg12-reg2; reg10=reg14-reg10; reg3=0.25*nodes[6]->pos[0]; reg8=reg5+reg8;
    reg6=reg1-reg6; reg10=reg2+reg10; reg4=reg4+reg3; reg1=reg8*reg11; reg12=reg3+reg12;
    reg2=0.25*nodes[7]->pos[0]; reg11=reg11*reg0; reg5=reg13*reg7; reg7=reg7*reg6; reg5=reg1-reg5;
    reg6=reg8*reg6; reg0=reg13*reg0; reg10=reg3+reg10; reg7=reg11-reg7; reg4=reg4-reg2;
    reg12=reg2+reg12; reg10=reg2+reg10; reg7=reg12*reg7; reg4=reg5*reg4; reg6=reg0-reg6;
    reg7=reg4-reg7; reg6=reg10*reg6; T det_jac=reg7+reg6;

    if ( det_jac < 0 ) {
        TNode *tmp[] = {nodes[0],nodes[3],nodes[2],nodes[1],nodes[4],nodes[7],nodes[6],nodes[5]};
        for(unsigned i=0;i<8;++i) nodes[i] = tmp[i];
    }
}
template<class PosNodes,class Pvec,class TVI> void get_var_inter_linear(const Hexa &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=1-var_inter[1]; T reg1=1-var_inter[2]; T reg2=1-var_inter[0]; T reg3=reg1*var_inter[0]; T reg4=reg2*reg1;
    T reg5=reg0*var_inter[0]; T reg6=reg2*reg0; T reg7=pos_nodes[0][0]*reg4; T reg8=pos_nodes[1][0]*reg3; T reg9=var_inter[1]*var_inter[0];
    T reg10=pos_nodes[0][0]*reg6; T reg11=pos_nodes[1][0]*reg5; T reg12=pos_nodes[0][2]*reg4; T reg13=reg5*pos_nodes[1][2]; T reg14=pos_nodes[0][2]*reg6;
    T reg15=reg3*pos_nodes[1][2]; T reg16=pos_nodes[1][1]*reg3; T reg17=pos_nodes[0][1]*reg4; T reg18=pos_nodes[0][1]*reg6; T reg19=pos_nodes[1][1]*reg5;
    reg15=reg12+reg15; reg12=reg1*reg0; reg13=reg14+reg13; reg16=reg17+reg16; reg14=reg3*pos_nodes[2][2];
    reg17=reg9*pos_nodes[2][0]; reg11=reg10+reg11; reg10=reg3*pos_nodes[2][1]; T reg20=reg9*pos_nodes[2][2]; reg19=reg18+reg19;
    reg18=reg9*pos_nodes[2][1]; T reg21=var_inter[1]*reg2; T reg22=reg3*pos_nodes[2][0]; reg8=reg7+reg8; reg7=reg4*pos_nodes[3][2];
    reg15=reg14-reg15; reg14=reg4*pos_nodes[3][1]; reg16=reg10-reg16; reg10=pos_nodes[1][1]*reg12; T reg23=pos_nodes[0][1]*reg12;
    T reg24=pos_nodes[3][1]*reg21; reg18=reg19+reg18; reg17=reg11+reg17; reg11=pos_nodes[3][0]*reg21; reg19=reg4*pos_nodes[3][0];
    reg8=reg22-reg8; reg20=reg13+reg20; reg13=var_inter[1]*reg1; reg22=var_inter[2]*reg2; T reg25=pos_nodes[1][0]*reg12;
    T reg26=pos_nodes[0][0]*reg12; T reg27=pos_nodes[3][2]*reg21; T reg28=pos_nodes[1][2]*reg12; T reg29=pos_nodes[4][0]*reg6; T reg30=var_inter[2]*var_inter[0];
    reg27=reg20+reg27; reg24=reg18+reg24; reg18=reg22*pos_nodes[4][0]; reg19=reg8+reg19; reg8=pos_nodes[4][1]*reg6;
    reg20=reg13*pos_nodes[2][1]; reg23=reg10-reg23; reg11=reg17+reg11; reg10=pos_nodes[0][2]*reg12; reg17=reg13*pos_nodes[2][0];
    reg26=reg25-reg26; reg25=pos_nodes[4][2]*reg6; reg14=reg16+reg14; reg16=reg22*pos_nodes[4][1]; reg7=reg15+reg7;
    reg15=reg22*pos_nodes[4][2]; reg24=reg8-reg24; reg8=reg5*pos_nodes[5][1]; T reg31=reg13*pos_nodes[3][0]; reg17=reg26+reg17;
    reg26=var_inter[2]*reg0; reg16=reg14-reg16; reg14=reg30*pos_nodes[5][1]; reg15=reg7-reg15; reg7=reg30*pos_nodes[5][2];
    T reg32=reg5*pos_nodes[5][0]; reg11=reg29-reg11; reg29=reg13*pos_nodes[2][2]; reg10=reg28-reg10; reg20=reg23+reg20;
    reg23=reg13*pos_nodes[3][1]; reg28=reg1*reg6; T reg33=reg1*reg5; T reg34=reg5*pos_nodes[5][2]; reg18=reg19-reg18;
    reg19=reg30*pos_nodes[5][0]; reg27=reg25-reg27; reg25=pos_nodes[1][1]*reg33; T reg35=reg30*pos_nodes[6][1]; T reg36=reg9*pos_nodes[6][2];
    reg29=reg10+reg29; reg10=reg13*pos_nodes[3][2]; T reg37=pos_nodes[0][1]*reg28; reg8=reg24+reg8; reg24=reg30*pos_nodes[6][2];
    reg7=reg15-reg7; reg15=reg9*pos_nodes[6][1]; reg34=reg27+reg34; reg27=reg1*reg9; T reg38=reg9*pos_nodes[6][0];
    reg32=reg11+reg32; reg11=reg30*pos_nodes[6][0]; reg23=reg20-reg23; reg20=reg26*pos_nodes[4][1]; reg19=reg18-reg19;
    reg18=pos_nodes[0][0]*reg28; T reg39=pos_nodes[1][0]*reg33; T reg40=reg26*pos_nodes[4][0]; reg31=reg17-reg31; reg14=reg16-reg14;
    reg24=reg7+reg24; reg39=reg18+reg39; reg7=pos_nodes[2][0]*reg27; reg16=reg26*pos_nodes[4][2]; reg17=reg22*pos_nodes[7][2];
    reg10=reg29-reg10; reg18=reg21*pos_nodes[7][0]; reg38=reg32+reg38; reg29=reg22*pos_nodes[7][0]; reg11=reg19+reg11;
    reg36=reg34+reg36; reg19=reg21*pos_nodes[7][2]; reg32=pos_nodes[0][2]*reg28; reg34=reg33*pos_nodes[1][2]; T reg41=reg26*pos_nodes[5][0];
    reg40=reg31-reg40; reg31=var_inter[2]*var_inter[1]; T reg42=reg22*pos_nodes[7][1]; reg35=reg14+reg35; reg14=reg26*pos_nodes[5][1];
    reg20=reg23-reg20; reg23=pos_nodes[2][1]*reg27; reg25=reg37+reg25; reg37=reg1*reg21; reg15=reg8+reg15;
    reg8=pos_nodes[7][1]*reg21; T reg43=pos_nodes[3][0]*reg37; reg7=reg39+reg7; reg39=pos_nodes[3][1]*reg37; reg23=reg25+reg23;
    reg18=reg38+reg18; reg17=reg24+reg17; reg8=reg15+reg8; reg29=reg11+reg29; reg11=var_inter[2]*reg6;
    reg14=reg20+reg14; reg19=reg36+reg19; reg15=reg31*pos_nodes[6][1]; reg34=reg32+reg34; reg20=pos_nodes[2][2]*reg27;
    reg42=reg35+reg42; reg41=reg40+reg41; reg24=reg31*pos_nodes[6][0]; reg16=reg10-reg16; reg10=reg26*pos_nodes[5][2];
    reg24=reg41+reg24; reg25=reg31*pos_nodes[7][0]; reg32=reg31*pos_nodes[7][1]; reg15=reg14+reg15; reg14=var_inter[2]*reg5;
    reg35=reg18*reg17; reg36=reg29*reg19; reg20=reg34+reg20; reg10=reg16+reg10; reg16=reg31*pos_nodes[6][2];
    reg34=pos_nodes[3][2]*reg37; reg39=reg23+reg39; reg23=pos_nodes[4][1]*reg11; reg38=reg8*reg17; reg40=reg42*reg19;
    reg43=reg7+reg43; reg7=pos_nodes[4][0]*reg11; reg34=reg20+reg34; reg20=pos_nodes[4][2]*reg11; reg32=reg15-reg32;
    reg15=reg18*reg42; reg25=reg24-reg25; reg35=reg36-reg35; reg24=var_inter[2]*reg9; reg41=pos_nodes[5][1]*reg14;
    reg23=reg39+reg23; reg16=reg10+reg16; reg10=reg31*pos_nodes[7][2]; reg39=reg29*reg8; reg38=reg40-reg38;
    T reg44=pos_nodes[5][0]*reg14; reg7=reg43+reg7; reg15=reg39-reg15; reg43=reg32*reg35; T reg45=reg25*reg38;
    T reg46=var_inter[2]*reg21; T reg47=reg24*pos_nodes[6][0]; reg10=reg16-reg10; reg44=reg7+reg44; reg20=reg34+reg20;
    reg7=reg14*pos_nodes[5][2]; reg16=reg24*pos_nodes[6][1]; reg41=reg23+reg41; reg23=reg25*reg17; reg34=reg29*reg10;
    T reg48=reg18*reg10; T reg49=reg25*reg19; T reg50=reg42*reg10; T reg51=reg32*reg17; T reg52=reg8*reg10;
    T reg53=reg32*reg19; T reg54=reg10*reg15; reg45=reg43-reg45; reg43=reg46*pos_nodes[7][1]; T reg55=reg46*pos_nodes[7][0];
    reg47=reg44+reg47; reg16=reg41+reg16; reg41=reg24*pos_nodes[6][2]; reg7=reg20+reg7; reg20=reg29*reg32;
    reg43=reg16+reg43; reg16=reg25*reg42; reg44=reg18*reg32; T reg56=reg25*reg8; reg34=reg23-reg34;
    reg41=reg7+reg41; reg7=reg46*pos_nodes[7][2]; reg55=reg47+reg55; reg54=reg45-reg54; reg52=reg53-reg52;
    reg50=reg51-reg50; reg48=reg49-reg48; reg50=reg50/reg54; reg52=reg52/reg54; reg44=reg56-reg44;
    reg34=reg34/reg54; reg35=reg35/reg54; reg38=reg38/reg54; reg20=reg16-reg20; reg43=pos[1]-reg43;
    reg55=pos[0]-reg55; reg7=reg41+reg7; reg48=reg48/reg54; reg34=reg43*reg34; reg50=reg55*reg50;
    reg7=pos[2]-reg7; reg15=reg15/reg54; reg44=reg44/reg54; reg48=reg43*reg48; reg54=reg20/reg54;
    reg52=reg55*reg52; reg38=reg55*reg38; reg35=reg43*reg35; reg50=reg34-reg50; reg15=reg7*reg15;
    reg38=reg35-reg38; reg54=reg7*reg54; reg44=reg7*reg44; reg48=reg52-reg48; var_inter[0]=reg38-reg15;
    var_inter[1]=reg44+reg48; var_inter[2]=reg50-reg54;

}
template<class PosNodes,class Pvec,class TVI> void get_var_inter(const Hexa &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[2]; T reg2=1-var_inter[1]; T reg3=reg2*var_inter[0]; T reg4=reg1*reg0;
    T reg5=reg2*reg0; T reg6=reg1*var_inter[0]; T reg7=pos_nodes[0][0]*reg4; T reg8=pos_nodes[1][0]*reg6; T reg9=pos_nodes[0][0]*reg5;
    T reg10=pos_nodes[1][0]*reg3; T reg11=pos_nodes[0][1]*reg4; T reg12=pos_nodes[1][1]*reg6; T reg13=pos_nodes[1][2]*reg3; T reg14=var_inter[0]*var_inter[1];
    T reg15=pos_nodes[0][2]*reg5; T reg16=pos_nodes[1][2]*reg6; T reg17=pos_nodes[0][2]*reg4; T reg18=pos_nodes[1][1]*reg3; T reg19=pos_nodes[0][1]*reg5;
    T reg20=pos_nodes[2][2]*reg6; T reg21=pos_nodes[2][0]*reg14; reg8=reg7+reg8; reg10=reg9+reg10; reg16=reg17+reg16;
    reg7=pos_nodes[2][0]*reg6; reg9=pos_nodes[2][2]*reg14; reg17=pos_nodes[2][1]*reg6; reg18=reg19+reg18; reg13=reg15+reg13;
    reg12=reg11+reg12; reg11=pos_nodes[2][1]*reg14; reg15=reg2*reg1; reg19=reg0*var_inter[1]; T reg22=pos_nodes[3][0]*reg4;
    reg8=reg7-reg8; reg7=reg19*pos_nodes[3][0]; reg10=reg21+reg10; reg21=pos_nodes[1][1]*reg15; T reg23=pos_nodes[0][1]*reg15;
    T reg24=pos_nodes[3][1]*reg4; reg12=reg17-reg12; reg17=reg19*pos_nodes[3][1]; reg18=reg11+reg18; reg11=pos_nodes[3][2]*reg4;
    reg16=reg20-reg16; reg20=reg19*pos_nodes[3][2]; reg13=reg9+reg13; reg9=pos_nodes[0][0]*reg15; T reg25=pos_nodes[1][0]*reg15;
    T reg26=reg1*var_inter[1]; T reg27=reg0*var_inter[2]; reg10=reg7+reg10; reg7=pos_nodes[4][1]*reg5; reg13=reg20+reg13;
    reg20=pos_nodes[1][2]*reg15; T reg28=pos_nodes[4][2]*reg5; T reg29=pos_nodes[2][0]*reg26; T reg30=pos_nodes[4][1]*reg27; reg12=reg24+reg12;
    reg24=pos_nodes[0][2]*reg15; T reg31=pos_nodes[2][1]*reg26; reg23=reg21-reg23; reg21=pos_nodes[4][2]*reg27; reg16=reg11+reg16;
    reg9=reg25-reg9; reg11=pos_nodes[4][0]*reg5; reg25=var_inter[0]*var_inter[2]; reg22=reg8+reg22; reg8=pos_nodes[4][0]*reg27;
    reg18=reg17+reg18; reg30=reg12-reg30; reg29=reg9+reg29; reg18=reg7-reg18; reg7=pos_nodes[5][1]*reg3;
    reg9=pos_nodes[5][0]*reg25; reg12=pos_nodes[5][2]*reg25; reg8=reg22-reg8; reg23=reg31+reg23; reg17=pos_nodes[3][1]*reg26;
    reg24=reg20-reg24; reg21=reg16-reg21; reg16=pos_nodes[5][1]*reg25; reg20=reg1*reg5; reg22=reg1*reg3;
    reg31=pos_nodes[2][2]*reg26; reg13=reg28-reg13; reg28=pos_nodes[5][2]*reg3; T reg32=reg2*var_inter[2]; reg10=reg11-reg10;
    reg11=pos_nodes[5][0]*reg3; T reg33=pos_nodes[3][0]*reg26; T reg34=reg14*pos_nodes[6][1]; T reg35=pos_nodes[3][2]*reg26; reg7=reg18+reg7;
    reg33=reg29-reg33; reg24=reg31+reg24; reg18=pos_nodes[4][0]*reg32; reg29=pos_nodes[1][1]*reg22; reg31=pos_nodes[6][1]*reg25;
    T reg36=reg20*pos_nodes[0][1]; reg16=reg30-reg16; reg11=reg10+reg11; reg10=reg14*pos_nodes[6][0]; reg30=reg14*pos_nodes[6][2];
    reg28=reg13+reg28; reg13=reg20*pos_nodes[0][0]; T reg37=pos_nodes[1][0]*reg22; T reg38=reg14*reg1; T reg39=pos_nodes[6][0]*reg25;
    reg9=reg8-reg9; reg8=pos_nodes[6][2]*reg25; reg12=reg21-reg12; reg17=reg23-reg17; reg21=pos_nodes[4][1]*reg32;
    reg23=pos_nodes[1][2]*reg22; T reg40=pos_nodes[0][2]*reg20; T reg41=pos_nodes[2][1]*reg38; T reg42=pos_nodes[7][2]*reg19; reg30=reg28+reg30;
    reg29=reg36+reg29; reg28=var_inter[1]*var_inter[2]; reg36=pos_nodes[7][2]*reg27; reg8=reg12+reg8; reg12=pos_nodes[4][2]*reg32;
    reg35=reg24-reg35; reg24=pos_nodes[5][1]*reg32; reg21=reg17-reg21; reg37=reg13+reg37; reg13=pos_nodes[2][0]*reg38;
    reg17=pos_nodes[5][0]*reg32; reg31=reg16+reg31; reg16=pos_nodes[7][1]*reg27; T reg43=reg19*pos_nodes[7][0]; reg10=reg11+reg10;
    reg11=pos_nodes[7][0]*reg27; reg39=reg9+reg39; reg9=reg19*pos_nodes[7][1]; reg18=reg33-reg18; reg33=reg1*reg19;
    reg34=reg7+reg34; reg7=pos_nodes[6][1]*reg28; reg24=reg21+reg24; reg9=reg34+reg9; reg36=reg8+reg36;
    reg8=var_inter[2]*reg5; reg37=reg13+reg37; reg13=reg33*pos_nodes[3][1]; reg21=pos_nodes[5][2]*reg32; reg12=reg35-reg12;
    reg34=reg33*pos_nodes[3][0]; reg43=reg10+reg43; reg10=pos_nodes[6][0]*reg28; reg17=reg18+reg17; reg16=reg31+reg16;
    reg29=reg41+reg29; reg11=reg39+reg11; reg42=reg30+reg42; reg18=pos_nodes[2][2]*reg38; reg23=reg40+reg23;
    reg30=reg8*pos_nodes[4][0]; reg23=reg18+reg23; reg37=reg34+reg37; reg18=reg33*pos_nodes[3][2]; reg31=reg8*pos_nodes[4][1];
    reg29=reg13+reg29; reg13=reg43*reg36; reg34=reg11*reg42; reg10=reg17+reg10; reg17=pos_nodes[7][0]*reg28;
    reg21=reg12+reg21; reg12=pos_nodes[6][2]*reg28; reg35=reg9*reg36; reg39=pos_nodes[7][1]*reg28; reg40=reg3*var_inter[2];
    reg41=reg16*reg42; reg7=reg24+reg7; reg23=reg18+reg23; reg18=reg14*var_inter[2]; reg29=reg31+reg29;
    reg24=reg40*pos_nodes[5][1]; reg31=reg8*pos_nodes[4][2]; T reg44=reg11*reg9; reg35=reg41-reg35; reg17=reg10-reg17;
    reg13=reg34-reg13; reg39=reg7-reg39; reg7=reg43*reg16; reg12=reg21+reg12; reg10=pos_nodes[7][2]*reg28;
    reg37=reg30+reg37; reg21=reg40*pos_nodes[5][0]; reg30=reg17*reg35; reg7=reg44-reg7; T reg45=reg39*reg13;
    T reg46=reg40*pos_nodes[5][2]; reg23=reg31+reg23; reg21=reg37+reg21; reg31=reg18*pos_nodes[6][0]; reg37=reg19*var_inter[2];
    reg10=reg12-reg10; reg12=reg18*pos_nodes[6][1]; reg24=reg29+reg24; reg29=reg39*reg42; T reg47=reg11*reg10;
    T reg48=reg10*reg7; T reg49=reg17*reg36; reg30=reg45-reg30; reg45=reg43*reg10; T reg50=reg9*reg10;
    T reg51=reg39*reg36; T reg52=reg16*reg10; T reg53=reg17*reg42; T reg54=reg37*pos_nodes[7][0]; T reg55=reg18*pos_nodes[6][2];
    reg46=reg23+reg46; reg31=reg21+reg31; reg12=reg24+reg12; reg21=reg37*pos_nodes[7][1]; reg47=reg49-reg47;
    reg23=reg17*reg9; reg54=reg31+reg54; reg45=reg53-reg45; reg24=reg43*reg39; reg31=reg17*reg16;
    reg52=reg51-reg52; T reg56=reg11*reg39; reg50=reg29-reg50; reg21=reg12+reg21; reg48=reg30-reg48;
    reg55=reg46+reg55; reg12=pos_nodes[7][2]*reg37; reg24=reg23-reg24; reg56=reg31-reg56; reg47=reg47/reg48;
    reg45=reg45/reg48; reg54=pos[0]-reg54; reg13=reg13/reg48; reg52=reg52/reg48; reg50=reg50/reg48;
    reg21=pos[1]-reg21; reg35=reg35/reg48; reg12=reg55+reg12; reg45=reg21*reg45; reg50=reg54*reg50;
    reg52=reg54*reg52; reg47=reg21*reg47; reg13=reg21*reg13; reg35=reg54*reg35; reg56=reg56/reg48;
    reg24=reg24/reg48; reg48=reg7/reg48; reg12=pos[2]-reg12; reg35=reg13-reg35; reg24=reg12*reg24;
    reg45=reg50-reg45; reg48=reg12*reg48; reg56=reg12*reg56; reg52=reg47-reg52; var_inter[0]+=reg35-reg48;
    var_inter[1]+=reg24+reg45; var_inter[2]+=reg52-reg56;

}
template<> struct ElemVarInterFromPosNonLinear<Hexa> { static const bool res = 3; };
#ifndef STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
#define STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
struct Elementary_mul_nb_nodes_of_each_children_elem {};
#endif // STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary_mul_nb_nodes_of_each_children_elem &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary_mul_nb_nodes
#define STRUCT_Elementary_mul_nb_nodes
struct Elementary_mul_nb_nodes {};
#endif // STRUCT_Elementary_mul_nb_nodes
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary_mul_nb_nodes &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Nodal
#define STRUCT_Nodal
struct Nodal {};
#endif // STRUCT_Nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=var_inter[0]*reg1; T reg3=reg0*reg1; T reg4=1-var_inter[2];
    T reg5=reg4*reg2; T reg6=reg3*reg4; T reg7=var_inter[0]*var_inter[1]; reg5=val[1]*reg5; reg6=val[0]*reg6;
    T reg8=reg4*reg7; T reg9=var_inter[1]*reg0; reg8=val[2]*reg8; T reg10=reg4*reg9; reg5=reg6+reg5;
    reg8=reg5+reg8; reg3=var_inter[2]*reg3; reg10=val[3]*reg10; reg2=var_inter[2]*reg2; reg3=val[4]*reg3;
    reg10=reg8+reg10; reg3=reg10+reg3; reg2=val[5]*reg2; reg7=var_inter[2]*reg7; reg2=reg3+reg2;
    reg7=val[6]*reg7; reg9=var_inter[2]*reg9; reg7=reg2+reg7; reg9=val[7]*reg9; res=reg7+reg9;

}
#ifndef STRUCT_Global
#define STRUCT_Global
struct Global {};
#endif // STRUCT_Global
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Global &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss
#define STRUCT_Gauss
struct Gauss {};
#endif // STRUCT_Gauss
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Gauss &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=reg0-0.21132486540518707896; T reg2=var_inter[1]-0.21132486540518707896; T reg3=var_inter[0]-0.21132486540518707896; T reg4=1-var_inter[1];
    T reg5=reg4-0.21132486540518707896; reg1=reg1/0.57735026918962573106; reg2=reg2/0.57735026918962573106; reg3=reg3/0.57735026918962573106; T reg6=var_inter[2]-0.21132486540518707896;
    reg1=1-reg1; reg5=reg5/0.57735026918962573106; reg6=reg6/0.57735026918962573106; reg3=1-reg3; reg2=1-reg2;
    T reg7=reg2*reg1; reg6=1-reg6; reg5=1-reg5; T reg8=1-var_inter[2]; reg2=reg3*reg2;
    reg1=reg1*reg5; T reg9=reg2*reg6; T reg10=reg8-0.21132486540518707896; T reg11=reg6*reg7; T reg12=reg6*reg1;
    reg5=reg3*reg5; reg10=reg10/0.57735026918962573106; reg11=val[1]*reg11; reg9=val[0]*reg9; reg10=1-reg10;
    reg6=reg6*reg5; reg12=val[2]*reg12; reg11=reg9+reg11; reg12=reg11+reg12; reg6=val[3]*reg6;
    reg3=reg2*reg10; reg9=reg7*reg10; reg3=val[4]*reg3; reg6=reg12+reg6; reg3=reg6+reg3;
    reg9=val[5]*reg9; reg6=reg1*reg10; reg9=reg3+reg9; reg6=val[6]*reg6; reg10=reg5*reg10;
    reg6=reg9+reg6; reg10=val[7]*reg10; res=reg6+reg10;

}
#ifndef STRUCT_Flat_interpolation
#define STRUCT_Flat_interpolation
struct Flat_interpolation {};
#endif // STRUCT_Flat_interpolation
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Flat_interpolation &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=reg0-0.21132486540518707896; T reg2=1-var_inter[1]; T reg3=var_inter[1]-0.21132486540518707896; T reg4=var_inter[0]-0.21132486540518707896;
    T reg5=reg2-0.21132486540518707896; reg1=reg1/0.57735026918962573106; reg3=reg3/0.57735026918962573106; reg4=reg4/0.57735026918962573106; reg5=reg5/0.57735026918962573106;
    reg4=1-reg4; reg3=1-reg3; reg1=1-reg1; reg5=1-reg5; T reg6=reg4*reg3;
    reg3=reg3*reg1; reg1=reg1*reg5; T reg7=val[0]*reg6; T reg8=val[1]*reg3; reg5=reg4*reg5;
    reg8=reg7+reg8; reg4=val[2]*reg1; reg7=val[3]*reg5; reg4=reg8+reg4; res=reg4+reg7;

}
#ifndef STRUCT_Der_nodal
#define STRUCT_Der_nodal
struct Der_nodal {};
#endif // STRUCT_Der_nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Der_nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary
#define STRUCT_Elementary
struct Elementary {};
#endif // STRUCT_Elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Skin_elementary
#define STRUCT_Skin_elementary
struct Skin_elementary {};
#endif // STRUCT_Skin_elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Skin_elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
template<class TVI,class TVAL> void get_shape_functions(const Hexa &ne,const TVI &var_inter,TVAL &res) {
    typedef typename TVAL::template SubType<0>::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=var_inter[1]*reg0; T reg3=var_inter[0]*var_inter[1]; T reg4=var_inter[0]*reg1;
    T reg5=1-var_inter[2]; T reg6=reg0*reg1; T reg7=reg6*reg5; res[0]=reg7; T reg8=reg5*reg4;
    res[1]=reg8; T reg9=reg5*reg3; res[2]=reg9; T reg10=reg5*reg2; res[3]=reg10;
    reg6=var_inter[2]*reg6; res[4]=reg6; reg4=var_inter[2]*reg4; res[5]=reg4; reg3=var_inter[2]*reg3;
    res[6]=reg3; reg2=var_inter[2]*reg2; res[7]=reg2;

}
#ifndef AUTORIZEDPERM
#define AUTORIZEDPERM
template<class T> struct AuthorizedPerm;
#endif // AUTORIZEDPERM
template<> struct AuthorizedPerm<Hexa> {
    static const unsigned nb_permutations = 23;
    template<class TE> static void make_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
    template<class TE> static void unmake_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
};

template<class TN,class TNG,class TD,unsigned NET,class TVI>
typename TNG::T get_det_jac( const Element<Hexa,TN,TNG,TD,NET> &e, const TVI &var_inter ) {
    typedef typename TNG::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=1-var_inter[2]; T reg3=reg0*reg2; T reg4=var_inter[0]*reg2;
    T reg5=reg0*reg1; T reg6=var_inter[0]*reg1; T reg7=reg1*reg2; T reg8=elem.pos(1)[2]*reg4; T reg9=elem.pos(0)[1]*reg3;
    T reg10=elem.pos(1)[1]*reg7; T reg11=var_inter[0]*var_inter[1]; T reg12=elem.pos(0)[1]*reg7; T reg13=elem.pos(0)[2]*reg5; T reg14=elem.pos(1)[2]*reg6;
    T reg15=elem.pos(0)[2]*reg3; T reg16=elem.pos(0)[1]*reg5; T reg17=elem.pos(0)[2]*reg7; T reg18=elem.pos(1)[2]*reg7; T reg19=elem.pos(1)[1]*reg6;
    T reg20=elem.pos(1)[1]*reg4; T reg21=var_inter[1]*reg2; T reg22=elem.pos(2)[2]*reg11; T reg23=reg8+reg15; T reg24=reg21*elem.pos(2)[1];
    T reg25=reg9+reg20; T reg26=elem.pos(2)[2]*reg4; reg18=reg18-reg17; reg10=reg10-reg12; T reg27=elem.pos(2)[1]*reg4;
    T reg28=reg14+reg13; T reg29=elem.pos(2)[1]*reg11; T reg30=reg16+reg19; T reg31=reg21*elem.pos(2)[2]; T reg32=var_inter[1]*reg0;
    T reg33=elem.pos(3)[1]*reg32; T reg34=elem.pos(0)[0]*reg3; T reg35=elem.pos(3)[2]*reg32; T reg36=var_inter[2]*reg1; T reg37=reg21*elem.pos(3)[1];
    reg10=reg24+reg10; reg24=elem.pos(1)[0]*reg7; reg26=reg26-reg23; T reg38=elem.pos(3)[2]*reg3; T reg39=elem.pos(1)[0]*reg4;
    T reg40=elem.pos(0)[0]*reg7; T reg41=reg30+reg29; T reg42=elem.pos(3)[1]*reg3; reg27=reg27-reg25; T reg43=reg22+reg28;
    T reg44=reg21*elem.pos(3)[2]; reg18=reg31+reg18; reg31=var_inter[2]*reg0; T reg45=reg34+reg39; T reg46=elem.pos(4)[1]*reg36;
    reg42=reg27+reg42; reg27=elem.pos(1)[0]*reg6; reg18=reg18-reg44; T reg47=reg5*elem.pos(0)[0]; T reg48=reg31*elem.pos(4)[2];
    reg10=reg10-reg37; T reg49=reg35+reg43; T reg50=elem.pos(2)[0]*reg4; T reg51=reg5*elem.pos(4)[1]; T reg52=elem.pos(4)[2]*reg36;
    T reg53=reg33+reg41; T reg54=reg31*elem.pos(4)[1]; T reg55=var_inter[0]*var_inter[2]; T reg56=reg5*elem.pos(4)[2]; T reg57=reg21*elem.pos(2)[0];
    reg38=reg26+reg38; reg24=reg24-reg40; reg26=elem.pos(5)[2]*reg36; T reg58=elem.pos(5)[2]*reg6; reg42=reg42-reg54;
    T reg59=elem.pos(5)[1]*reg55; reg50=reg50-reg45; T reg60=elem.pos(3)[0]*reg3; reg24=reg57+reg24; reg57=elem.pos(5)[1]*reg36;
    reg10=reg10-reg46; reg18=reg18-reg52; reg56=reg56-reg49; T reg61=elem.pos(5)[2]*reg55; T reg62=reg47+reg27;
    reg38=reg38-reg48; T reg63=elem.pos(2)[0]*reg11; T reg64=var_inter[1]*var_inter[2]; T reg65=reg6*elem.pos(5)[1]; T reg66=reg21*elem.pos(3)[0];
    reg51=reg51-reg53; T reg67=elem.pos(6)[2]*reg64; T reg68=elem.pos(3)[0]*reg32; T reg69=reg63+reg62; reg56=reg58+reg56;
    reg65=reg51+reg65; reg51=elem.pos(6)[1]*reg11; reg18=reg26+reg18; reg60=reg50+reg60; reg24=reg24-reg66;
    reg26=reg31*elem.pos(4)[0]; reg50=elem.pos(4)[0]*reg36; reg57=reg10+reg57; reg10=elem.pos(6)[1]*reg55; reg58=elem.pos(6)[2]*reg55;
    reg42=reg42-reg59; reg38=reg38-reg61; T reg70=elem.pos(6)[1]*reg64; T reg71=elem.pos(6)[2]*reg11; reg58=reg38+reg58;
    reg38=reg31*elem.pos(7)[1]; reg71=reg56+reg71; reg10=reg42+reg10; reg42=reg31*elem.pos(7)[2]; reg67=reg18+reg67;
    reg18=reg5*elem.pos(4)[0]; reg56=reg69+reg68; T reg72=elem.pos(7)[1]*reg32; reg51=reg65+reg51; reg65=elem.pos(5)[0]*reg55;
    T reg73=elem.pos(7)[2]*reg64; reg70=reg57+reg70; reg57=elem.pos(7)[2]*reg32; T reg74=elem.pos(5)[0]*reg36; reg24=reg24-reg50;
    T reg75=elem.pos(7)[1]*reg64; reg60=reg60-reg26; reg67=reg67-reg73; reg18=reg18-reg56; reg51=reg72+reg51;
    reg70=reg70-reg75; reg42=reg58+reg42; reg60=reg60-reg65; reg24=reg74+reg24; reg58=elem.pos(6)[0]*reg55;
    reg72=elem.pos(6)[0]*reg64; reg74=reg6*elem.pos(5)[0]; reg57=reg71+reg57; reg10=reg38+reg10; reg38=reg31*elem.pos(7)[0];
    reg24=reg72+reg24; reg71=elem.pos(6)[0]*reg11; reg72=reg57*reg10; reg58=reg60+reg58; reg60=reg67*reg51;
    reg18=reg74+reg18; reg74=elem.pos(7)[0]*reg64; T reg76=reg57*reg70; T reg77=reg51*reg42; reg24=reg24-reg74;
    T reg78=reg67*reg10; reg71=reg18+reg71; reg18=reg70*reg42; reg60=reg76-reg60; reg77=reg72-reg77;
    reg72=elem.pos(7)[0]*reg32; reg38=reg58+reg38; reg58=reg38*reg60; reg78=reg18-reg78; reg72=reg71+reg72;
    reg18=reg77*reg24; reg58=reg18-reg58; reg18=reg72*reg78; reg18=reg58+reg18; return reg18;

}
}
#endif // LMT_HEXA
