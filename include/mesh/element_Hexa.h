#ifndef LMT_HEXA
#define LMT_HEXA
namespace LMT {
inline const double *gauss_point_for_order(unsigned order, const Hexa &elem) { /// order -> degre du polynome a integrer exactement
    static const unsigned offset[] = { 0, 5, 10, 43, 180, 317, 454, 591, 728, 865, }; // fonction de lordre du poly
    static const double values[] = {
        1.0,0.5,0.5,0.5,
        0.0,
        1.0,0.5,0.5,0.5,
        0.0,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
    };
    return values + offset[order];
}
template<class TNode> void permutation_if_jac_neg(const Hexa &elem,TNode **nodes) {
    typedef typename TNode::T T;
    T reg0=0.25*nodes[0]->pos[1]; T reg1=0.25*nodes[1]->pos[1]; T reg2=0.25*nodes[0]->pos[2]; T reg3=0.25*nodes[1]->pos[2]; T reg4=0.25*nodes[2]->pos[1];
    T reg5=reg0+reg1; T reg6=reg2+reg3; T reg7=0.25*nodes[2]->pos[2]; reg0=reg1-reg0; reg2=reg3-reg2;
    reg1=reg7-reg6; reg3=0.25*nodes[3]->pos[2]; reg6=reg6+reg7; T reg8=reg4+reg5; T reg9=0.25*nodes[3]->pos[1];
    reg5=reg4-reg5; reg0=reg4+reg0; reg2=reg7+reg2; reg4=0.25*nodes[1]->pos[0]; reg7=0.25*nodes[0]->pos[0];
    reg5=reg5+reg9; T reg10=0.25*nodes[4]->pos[1]; T reg11=0.25*nodes[4]->pos[2]; reg6=reg6+reg3; reg2=reg2-reg3;
    reg1=reg3+reg1; reg8=reg9+reg8; reg3=reg4+reg7; reg9=reg0-reg9; reg0=0.25*nodes[2]->pos[0];
    reg7=reg4-reg7; reg1=reg1-reg11; reg4=0.25*nodes[5]->pos[2]; reg6=reg11-reg6; reg8=reg10-reg8;
    reg11=reg2-reg11; reg9=reg9-reg10; reg2=reg0-reg3; T reg12=0.25*nodes[5]->pos[1]; reg10=reg5-reg10;
    reg5=0.25*nodes[3]->pos[0]; reg7=reg7+reg0; reg9=reg12+reg9; T reg13=0.25*nodes[4]->pos[0]; reg8=reg12+reg8;
    reg2=reg5+reg2; reg7=reg7-reg5; reg1=reg1-reg4; reg12=reg10-reg12; reg10=0.25*nodes[6]->pos[1];
    T reg14=0.25*nodes[6]->pos[2]; reg6=reg6+reg4; reg3=reg0+reg3; reg11=reg4+reg11; reg2=reg2-reg13;
    reg12=reg12+reg10; reg0=0.25*nodes[7]->pos[1]; reg9=reg10+reg9; reg8=reg10+reg8; reg11=reg14+reg11;
    reg7=reg7-reg13; reg1=reg14+reg1; reg4=0.25*nodes[5]->pos[0]; reg14=reg6+reg14; reg3=reg5+reg3;
    reg5=0.25*nodes[7]->pos[2]; reg9=reg9-reg0; reg11=reg11-reg5; reg3=reg13-reg3; reg6=0.25*nodes[6]->pos[0];
    reg2=reg2-reg4; reg7=reg7+reg4; reg8=reg0+reg8; reg1=reg5+reg1; reg0=reg12+reg0;
    reg5=reg14+reg5; reg7=reg7+reg6; reg10=reg8*reg11; reg12=0.25*nodes[7]->pos[0]; reg3=reg4+reg3;
    reg4=reg0*reg5; reg5=reg5*reg9; reg8=reg1*reg8; reg2=reg6+reg2; reg3=reg6+reg3;
    reg9=reg1*reg9; reg11=reg0*reg11; reg10=reg5-reg10; reg7=reg7-reg12; reg8=reg4-reg8;
    reg2=reg12+reg2; reg10=reg2*reg10; reg3=reg12+reg3; reg8=reg7*reg8; reg11=reg9-reg11;
    reg10=reg8-reg10; reg11=reg3*reg11; T det_jac=reg10+reg11;

    if ( det_jac < 0 ) {
        TNode *tmp[] = {nodes[0],nodes[3],nodes[2],nodes[1],nodes[4],nodes[7],nodes[6],nodes[5]};
        for(unsigned i=0;i<8;++i) nodes[i] = tmp[i];
    }
}
template<class PosNodes,class Pvec,class TVI> void get_var_inter_linear(const Hexa &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=1-var_inter[2]; T reg3=reg1*var_inter[0]; T reg4=reg0*reg2;
    T reg5=reg2*var_inter[0]; T reg6=reg0*reg1; T reg7=reg4*pos_nodes[0][1]; T reg8=pos_nodes[1][0]*reg3; T reg9=reg6*pos_nodes[0][0];
    T reg10=pos_nodes[1][1]*reg5; T reg11=reg6*pos_nodes[0][1]; T reg12=reg4*pos_nodes[0][0]; T reg13=pos_nodes[1][0]*reg5; T reg14=pos_nodes[1][2]*reg3;
    T reg15=pos_nodes[0][2]*reg6; T reg16=var_inter[0]*var_inter[1]; T reg17=pos_nodes[1][1]*reg3; T reg18=pos_nodes[1][2]*reg5; T reg19=pos_nodes[0][2]*reg4;
    T reg20=pos_nodes[2][1]*reg5; reg10=reg7+reg10; reg7=reg1*reg2; T reg21=pos_nodes[2][0]*reg5; reg13=reg12+reg13;
    reg12=reg0*var_inter[1]; reg17=reg11+reg17; reg11=pos_nodes[2][1]*reg16; T reg22=pos_nodes[2][2]*reg16; reg14=reg15+reg14;
    reg8=reg9+reg8; reg9=pos_nodes[2][2]*reg5; reg15=pos_nodes[2][0]*reg16; reg19=reg18+reg19; reg18=pos_nodes[3][1]*reg4;
    reg10=reg20-reg10; reg20=pos_nodes[3][1]*reg12; T reg23=reg2*var_inter[1]; T reg24=pos_nodes[3][2]*reg12; T reg25=pos_nodes[1][0]*reg7;
    T reg26=reg7*pos_nodes[0][0]; T reg27=reg0*var_inter[2]; T reg28=pos_nodes[3][0]*reg4; T reg29=pos_nodes[3][2]*reg4; reg19=reg9-reg19;
    reg13=reg21-reg13; reg11=reg17+reg11; reg22=reg14+reg22; reg9=pos_nodes[3][0]*reg12; reg15=reg8+reg15;
    reg8=reg7*pos_nodes[0][1]; reg14=pos_nodes[1][1]*reg7; reg17=pos_nodes[4][1]*reg6; reg8=reg14-reg8; reg14=pos_nodes[1][2]*reg7;
    reg26=reg25-reg26; reg21=pos_nodes[2][0]*reg23; reg25=var_inter[0]*var_inter[2]; reg13=reg28+reg13; reg28=pos_nodes[4][0]*reg27;
    reg11=reg20+reg11; reg22=reg24+reg22; reg20=pos_nodes[0][2]*reg7; reg15=reg9+reg15; reg29=reg19+reg29;
    reg9=pos_nodes[4][2]*reg27; reg19=pos_nodes[4][2]*reg6; reg24=pos_nodes[4][0]*reg6; T reg30=pos_nodes[2][1]*reg23; reg10=reg18+reg10;
    reg18=pos_nodes[4][1]*reg27; reg20=reg14-reg20; reg22=reg19-reg22; reg14=pos_nodes[5][2]*reg3; reg19=pos_nodes[5][0]*reg3;
    reg15=reg24-reg15; reg9=reg29-reg9; reg24=pos_nodes[3][0]*reg23; reg21=reg26+reg21; reg18=reg10-reg18;
    reg10=pos_nodes[5][1]*reg25; reg26=pos_nodes[5][2]*reg25; reg29=pos_nodes[5][0]*reg25; T reg31=reg1*var_inter[2]; reg28=reg13-reg28;
    reg13=pos_nodes[2][2]*reg23; T reg32=reg2*reg3; T reg33=reg6*reg2; T reg34=pos_nodes[3][1]*reg23; reg11=reg17-reg11;
    reg17=pos_nodes[5][1]*reg3; reg30=reg8+reg30; reg29=reg28-reg29; reg8=pos_nodes[6][0]*reg25; reg34=reg30-reg34;
    reg14=reg22+reg14; reg22=pos_nodes[6][2]*reg16; reg28=pos_nodes[1][1]*reg32; reg30=reg33*pos_nodes[0][1]; T reg35=reg2*reg16;
    T reg36=pos_nodes[6][1]*reg16; T reg37=pos_nodes[1][0]*reg32; T reg38=reg33*pos_nodes[0][0]; reg17=reg11+reg17; reg11=pos_nodes[4][1]*reg31;
    T reg39=pos_nodes[6][1]*reg25; T reg40=pos_nodes[6][2]*reg25; reg10=reg18-reg10; reg26=reg9-reg26; reg24=reg21-reg24;
    reg13=reg20+reg13; reg9=pos_nodes[3][2]*reg23; reg18=pos_nodes[4][0]*reg31; reg19=reg15+reg19; reg15=pos_nodes[6][0]*reg16;
    reg20=pos_nodes[7][2]*reg12; reg21=pos_nodes[2][1]*reg35; reg28=reg30+reg28; reg15=reg19+reg15; reg19=pos_nodes[7][0]*reg12;
    reg30=pos_nodes[7][1]*reg12; T reg41=pos_nodes[4][2]*reg31; reg36=reg17+reg36; reg40=reg26+reg40; reg9=reg13-reg9;
    reg22=reg14+reg22; reg13=pos_nodes[7][2]*reg27; reg14=pos_nodes[5][1]*reg31; reg11=reg34-reg11; reg37=reg38+reg37;
    reg17=pos_nodes[2][0]*reg35; reg26=pos_nodes[7][1]*reg27; reg8=reg29+reg8; reg39=reg10+reg39; reg10=var_inter[1]*var_inter[2];
    reg29=reg2*reg12; reg34=pos_nodes[7][0]*reg27; reg18=reg24-reg18; reg24=pos_nodes[5][0]*reg31; reg38=pos_nodes[0][2]*reg33;
    T reg42=pos_nodes[1][2]*reg32; reg41=reg9-reg41; reg9=pos_nodes[5][2]*reg31; T reg43=pos_nodes[3][0]*reg29; reg19=reg15+reg19;
    reg15=pos_nodes[6][0]*reg10; reg24=reg18+reg24; reg18=pos_nodes[6][1]*reg10; T reg44=pos_nodes[2][2]*reg35; reg13=reg40+reg13;
    reg14=reg11+reg14; reg26=reg39+reg26; reg17=reg37+reg17; reg30=reg36+reg30; reg11=pos_nodes[3][1]*reg29;
    reg36=reg6*var_inter[2]; reg21=reg28+reg21; reg20=reg22+reg20; reg34=reg8+reg34; reg42=reg38+reg42;
    reg8=reg30*reg13; reg22=reg26*reg20; reg28=pos_nodes[3][2]*reg29; reg37=reg3*var_inter[2]; reg44=reg42+reg44;
    reg21=reg11+reg21; reg11=pos_nodes[4][1]*reg36; reg18=reg14+reg18; reg14=pos_nodes[7][1]*reg10; reg17=reg43+reg17;
    reg38=pos_nodes[4][0]*reg36; reg15=reg24+reg15; reg24=pos_nodes[7][0]*reg10; reg39=reg34*reg20; reg40=reg19*reg13;
    reg9=reg41+reg9; reg41=pos_nodes[6][2]*reg10; reg42=reg34*reg30; reg44=reg28+reg44; reg28=reg19*reg26;
    reg43=pos_nodes[4][2]*reg36; reg40=reg39-reg40; reg8=reg22-reg8; T reg45=pos_nodes[7][2]*reg10; reg41=reg9+reg41;
    reg9=pos_nodes[5][0]*reg37; reg38=reg17+reg38; reg17=pos_nodes[5][1]*reg37; reg11=reg21+reg11; reg21=var_inter[2]*reg16;
    reg24=reg15-reg24; reg14=reg18-reg14; reg9=reg38+reg9; reg15=reg24*reg8; reg18=pos_nodes[6][0]*reg21;
    reg38=reg14*reg40; reg28=reg42-reg28; T reg46=pos_nodes[5][2]*reg37; reg43=reg44+reg43; reg44=var_inter[2]*reg12;
    reg17=reg11+reg17; reg11=pos_nodes[6][1]*reg21; reg45=reg41-reg45; reg41=reg14*reg13; T reg47=reg30*reg45;
    T reg48=reg14*reg20; T reg49=reg26*reg45; T reg50=reg45*reg28; reg15=reg38-reg15; reg38=reg24*reg20;
    T reg51=reg19*reg45; T reg52=reg24*reg13; T reg53=reg34*reg45; T reg54=pos_nodes[7][1]*reg44; reg11=reg17+reg11;
    reg17=pos_nodes[6][2]*reg21; reg46=reg43+reg46; reg18=reg9+reg18; reg9=pos_nodes[7][0]*reg44; reg54=reg11+reg54;
    reg51=reg38-reg51; reg49=reg41-reg49; reg53=reg52-reg53; reg11=reg24*reg30; reg47=reg48-reg47;
    reg9=reg18+reg9; reg50=reg15-reg50; reg15=reg19*reg14; reg17=reg46+reg17; reg18=pos_nodes[7][2]*reg44;
    reg43=reg26*reg24; reg46=reg14*reg34; reg53=reg53/reg50; reg46=reg43-reg46; reg54=pos[1]-reg54;
    reg15=reg11-reg15; reg51=reg51/reg50; reg40=reg40/reg50; reg49=reg49/reg50; reg9=pos[0]-reg9;
    reg47=reg47/reg50; reg8=reg8/reg50; reg18=reg17+reg18; reg47=reg9*reg47; reg40=reg54*reg40;
    reg51=reg54*reg51; reg49=reg9*reg49; reg53=reg54*reg53; reg8=reg9*reg8; reg46=reg46/reg50;
    reg15=reg15/reg50; reg50=reg28/reg50; reg18=pos[2]-reg18; reg50=reg18*reg50; reg8=reg40-reg8;
    reg15=reg18*reg15; reg51=reg47-reg51; reg46=reg18*reg46; reg49=reg53-reg49; var_inter[0]=reg8-reg50;
    var_inter[1]=reg15+reg51; var_inter[2]=reg49-reg46;

}
template<class PosNodes,class Pvec,class TVI> void get_var_inter(const Hexa &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=1-var_inter[2]; T reg1=1-var_inter[0]; T reg2=1-var_inter[1]; T reg3=reg2*var_inter[0]; T reg4=reg1*reg0;
    T reg5=var_inter[0]*reg0; T reg6=reg2*reg1; T reg7=pos_nodes[0][1]*reg4; T reg8=pos_nodes[1][1]*reg5; T reg9=reg3*pos_nodes[1][0];
    T reg10=pos_nodes[0][0]*reg6; T reg11=reg3*pos_nodes[1][1]; T reg12=pos_nodes[0][1]*reg6; T reg13=pos_nodes[0][0]*reg4; T reg14=pos_nodes[1][0]*reg5;
    T reg15=pos_nodes[1][2]*reg5; T reg16=pos_nodes[0][2]*reg4; T reg17=reg3*pos_nodes[1][2]; T reg18=pos_nodes[0][2]*reg6; T reg19=var_inter[0]*var_inter[1];
    T reg20=reg19*pos_nodes[2][0]; T reg21=reg2*reg0; reg10=reg9+reg10; reg9=reg19*pos_nodes[2][2]; T reg22=reg5*pos_nodes[2][1];
    T reg23=reg5*pos_nodes[2][0]; reg7=reg8+reg7; reg18=reg17+reg18; reg12=reg11+reg12; reg16=reg15+reg16;
    reg8=reg19*pos_nodes[2][1]; reg13=reg14+reg13; reg11=var_inter[1]*reg1; reg14=reg5*pos_nodes[2][2]; reg15=reg4*pos_nodes[3][2];
    reg16=reg14-reg16; reg12=reg8+reg12; reg8=reg4*pos_nodes[3][1]; reg7=reg22-reg7; reg14=reg11*pos_nodes[3][1];
    reg17=var_inter[2]*reg1; reg22=pos_nodes[1][0]*reg21; reg13=reg23-reg13; reg23=reg11*pos_nodes[3][2]; reg18=reg9+reg18;
    reg9=reg4*pos_nodes[3][0]; T reg24=reg11*pos_nodes[3][0]; reg10=reg20+reg10; reg20=pos_nodes[1][1]*reg21; T reg25=pos_nodes[0][1]*reg21;
    T reg26=pos_nodes[0][0]*reg21; T reg27=var_inter[1]*reg0; reg9=reg13+reg9; reg14=reg12+reg14; reg12=reg27*pos_nodes[2][0];
    reg13=reg27*pos_nodes[2][1]; T reg28=reg17*pos_nodes[4][0]; reg26=reg22-reg26; reg23=reg18+reg23; reg24=reg10+reg24;
    reg25=reg20-reg25; reg10=pos_nodes[1][2]*reg21; reg18=reg6*pos_nodes[4][2]; reg20=reg6*pos_nodes[4][0]; reg22=reg6*pos_nodes[4][1];
    T reg29=var_inter[2]*var_inter[0]; reg8=reg7+reg8; reg7=reg17*pos_nodes[4][1]; T reg30=reg17*pos_nodes[4][2]; reg15=reg16+reg15;
    reg16=pos_nodes[0][2]*reg21; reg16=reg10-reg16; reg10=reg27*pos_nodes[2][2]; T reg31=reg27*pos_nodes[3][0]; reg26=reg12+reg26;
    reg12=reg3*reg0; reg30=reg15-reg30; reg15=reg29*pos_nodes[5][2]; T reg32=var_inter[2]*reg2; T reg33=reg6*reg0;
    reg23=reg18-reg23; reg18=reg3*pos_nodes[5][2]; T reg34=reg29*pos_nodes[5][1]; reg7=reg8-reg7; reg8=reg29*pos_nodes[5][0];
    reg28=reg9-reg28; reg14=reg22-reg14; reg9=reg3*pos_nodes[5][1]; reg22=reg3*pos_nodes[5][0]; T reg35=reg27*pos_nodes[3][1];
    reg13=reg25+reg13; reg24=reg20-reg24; reg35=reg13-reg35; reg13=reg32*pos_nodes[4][1]; reg20=pos_nodes[0][0]*reg33;
    reg24=reg22+reg24; reg22=reg29*pos_nodes[6][2]; reg15=reg30-reg15; reg25=reg29*pos_nodes[6][0]; reg30=reg19*reg0;
    T reg36=reg12*pos_nodes[1][0]; T reg37=reg19*pos_nodes[6][0]; T reg38=reg32*pos_nodes[4][0]; reg31=reg26-reg31; reg16=reg10+reg16;
    reg10=reg27*pos_nodes[3][2]; reg26=pos_nodes[0][1]*reg33; T reg39=reg12*pos_nodes[1][1]; T reg40=reg19*pos_nodes[6][1]; reg9=reg14+reg9;
    reg14=reg19*pos_nodes[6][2]; reg18=reg23+reg18; reg8=reg28-reg8; reg23=reg29*pos_nodes[6][1]; reg34=reg7-reg34;
    reg7=pos_nodes[0][2]*reg33; reg28=reg12*pos_nodes[1][2]; T reg41=reg17*pos_nodes[7][0]; reg25=reg8+reg25; reg8=var_inter[2]*var_inter[1];
    T reg42=reg30*pos_nodes[2][0]; T reg43=reg32*pos_nodes[5][0]; reg38=reg31-reg38; reg31=pos_nodes[7][1]*reg17; reg23=reg34+reg23;
    reg34=reg30*pos_nodes[2][1]; reg40=reg9+reg40; reg9=reg11*pos_nodes[7][1]; reg26=reg39+reg26; reg39=reg32*pos_nodes[5][1];
    reg13=reg35-reg13; reg35=reg11*pos_nodes[7][0]; reg37=reg24+reg37; reg10=reg16-reg10; reg16=reg32*pos_nodes[4][2];
    reg20=reg36+reg20; reg24=reg11*reg0; reg22=reg15+reg22; reg14=reg18+reg14; reg15=reg11*pos_nodes[7][2];
    reg18=reg17*pos_nodes[7][2]; reg43=reg38+reg43; reg36=reg8*pos_nodes[6][0]; reg38=reg24*pos_nodes[3][1]; reg16=reg10-reg16;
    reg26=reg34+reg26; reg10=reg32*pos_nodes[5][2]; reg9=reg40+reg9; reg18=reg22+reg18; reg15=reg14+reg15;
    reg14=reg30*pos_nodes[2][2]; reg7=reg28+reg7; reg22=var_inter[2]*reg6; reg42=reg20+reg42; reg20=reg24*pos_nodes[3][0];
    reg35=reg37+reg35; reg39=reg13+reg39; reg13=reg8*pos_nodes[6][1]; reg41=reg25+reg41; reg31=reg23+reg31;
    reg38=reg26+reg38; reg23=reg22*pos_nodes[4][1]; reg25=reg8*pos_nodes[7][0]; reg36=reg43+reg36; reg26=reg22*pos_nodes[4][0];
    reg20=reg42+reg20; reg13=reg39+reg13; reg28=var_inter[2]*reg3; reg10=reg16+reg10; reg16=reg8*pos_nodes[6][2];
    reg34=pos_nodes[7][1]*reg8; reg7=reg14+reg7; reg14=reg24*pos_nodes[3][2]; reg37=reg35*reg18; reg39=reg15*reg41;
    reg40=reg31*reg15; reg42=reg9*reg18; reg16=reg10+reg16; reg10=reg8*pos_nodes[7][2]; reg25=reg36-reg25;
    reg36=reg28*pos_nodes[5][1]; reg23=reg38+reg23; reg38=reg35*reg31; reg37=reg39-reg37; reg34=reg13-reg34;
    reg13=reg9*reg41; reg42=reg40-reg42; reg43=reg28*pos_nodes[5][0]; reg26=reg20+reg26; reg20=reg22*pos_nodes[4][2];
    T reg44=reg19*var_inter[2]; reg14=reg7+reg14; reg7=reg42*reg25; T reg45=reg44*pos_nodes[6][0]; reg43=reg26+reg43;
    reg26=reg34*reg37; T reg46=reg28*pos_nodes[5][2]; reg38=reg13-reg38; reg20=reg14+reg20; reg36=reg23+reg36;
    reg14=reg44*pos_nodes[6][1]; reg23=reg11*var_inter[2]; reg10=reg16-reg10; reg7=reg26-reg7; reg16=reg10*reg38;
    reg26=reg23*pos_nodes[7][0]; reg45=reg43+reg45; reg43=reg34*reg15; T reg47=reg9*reg10; T reg48=reg34*reg18;
    T reg49=reg10*reg41; T reg50=reg18*reg25; T reg51=reg44*pos_nodes[6][2]; reg46=reg20+reg46; reg20=reg31*reg10;
    reg14=reg36+reg14; reg36=pos_nodes[7][1]*reg23; T reg52=reg15*reg25; T reg53=reg35*reg10; T reg54=reg34*reg41;
    reg51=reg46+reg51; reg46=reg23*pos_nodes[7][2]; T reg55=reg31*reg25; T reg56=reg35*reg34; reg26=reg45+reg26;
    reg45=reg9*reg25; reg49=reg50-reg49; reg53=reg52-reg53; reg20=reg48-reg20; reg36=reg14+reg36;
    reg47=reg43-reg47; reg16=reg7-reg16; reg49=reg49/reg16; reg53=reg53/reg16; reg37=reg37/reg16;
    reg36=pos[1]-reg36; reg56=reg45-reg56; reg20=reg20/reg16; reg47=reg47/reg16; reg46=reg51+reg46;
    reg54=reg55-reg54; reg42=reg42/reg16; reg26=pos[0]-reg26; reg49=reg36*reg49; reg20=reg26*reg20;
    reg53=reg36*reg53; reg47=reg26*reg47; reg56=reg56/reg16; reg37=reg36*reg37; reg46=pos[2]-reg46;
    reg38=reg38/reg16; reg16=reg54/reg16; reg42=reg26*reg42; reg42=reg37-reg42; reg20=reg49-reg20;
    reg56=reg46*reg56; reg53=reg47-reg53; reg16=reg46*reg16; reg38=reg46*reg38; var_inter[2]+=reg20-reg16;
    var_inter[0]+=reg42-reg38; var_inter[1]+=reg56+reg53;

}
template<> struct ElemVarInterFromPosNonLinear<Hexa> { static const bool res = 3; };
#ifndef STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
#define STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
struct Elementary_mul_nb_nodes_of_each_children_elem {};
#endif // STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary_mul_nb_nodes_of_each_children_elem &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary_mul_nb_nodes
#define STRUCT_Elementary_mul_nb_nodes
struct Elementary_mul_nb_nodes {};
#endif // STRUCT_Elementary_mul_nb_nodes
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary_mul_nb_nodes &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Nodal
#define STRUCT_Nodal
struct Nodal {};
#endif // STRUCT_Nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[1]; T reg1=1-var_inter[0]; T reg2=reg1*reg0; T reg3=1-var_inter[2]; T reg4=var_inter[0]*reg0;
    T reg5=reg2*reg3; T reg6=reg3*reg4; T reg7=var_inter[0]*var_inter[1]; reg5=val[0]*reg5; T reg8=var_inter[1]*reg1;
    T reg9=reg7*reg3; reg6=val[1]*reg6; reg9=val[2]*reg9; T reg10=reg8*reg3; reg6=reg5+reg6;
    reg9=reg6+reg9; reg10=val[3]*reg10; reg2=var_inter[2]*reg2; reg10=reg9+reg10; reg2=val[4]*reg2;
    reg4=var_inter[2]*reg4; reg7=var_inter[2]*reg7; reg4=val[5]*reg4; reg2=reg10+reg2; reg8=var_inter[2]*reg8;
    reg7=val[6]*reg7; reg4=reg2+reg4; reg8=val[7]*reg8; reg7=reg4+reg7; res=reg7+reg8;

}
#ifndef STRUCT_Global
#define STRUCT_Global
struct Global {};
#endif // STRUCT_Global
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Global &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss_0
#define STRUCT_Gauss_0
struct Gauss_0 {};
#endif // STRUCT_Gauss_0
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Gauss_0 &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss
#define STRUCT_Gauss
struct Gauss {};
#endif // STRUCT_Gauss
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Gauss &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=reg0-0.21132486540518707896; T reg2=var_inter[1]-0.21132486540518707896; T reg3=1-var_inter[1]; T reg4=var_inter[0]-0.21132486540518707896;
    T reg5=reg3-0.21132486540518707896; reg1=reg1/0.57735026918962573106; T reg6=var_inter[2]-0.21132486540518707896; reg2=reg2/0.57735026918962573106; reg4=reg4/0.57735026918962573106;
    reg1=1-reg1; reg5=reg5/0.57735026918962573106; reg4=1-reg4; reg6=reg6/0.57735026918962573106; reg2=1-reg2;
    T reg7=reg2*reg1; reg6=1-reg6; reg2=reg4*reg2; reg5=1-reg5; T reg8=1-var_inter[2];
    T reg9=reg2*reg6; reg1=reg1*reg5; T reg10=reg8-0.21132486540518707896; T reg11=reg6*reg7; reg5=reg4*reg5;
    reg4=reg6*reg1; reg10=reg10/0.57735026918962573106; reg11=val[1]*reg11; reg9=val[0]*reg9; reg11=reg9+reg11;
    reg4=val[2]*reg4; reg6=reg6*reg5; reg10=1-reg10; reg9=reg2*reg10; reg4=reg11+reg4;
    reg6=val[3]*reg6; reg9=val[4]*reg9; reg11=reg7*reg10; reg6=reg4+reg6; reg11=val[5]*reg11;
    reg4=reg1*reg10; reg9=reg6+reg9; reg11=reg9+reg11; reg4=val[6]*reg4; reg10=reg5*reg10;
    reg4=reg11+reg4; reg10=val[7]*reg10; res=reg4+reg10;

}
#ifndef STRUCT_Gauss_2
#define STRUCT_Gauss_2
struct Gauss_2 {};
#endif // STRUCT_Gauss_2
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Gauss_2 &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=reg0-0.21132486540518707896; T reg2=var_inter[1]-0.21132486540518707896; T reg3=1-var_inter[1]; T reg4=var_inter[0]-0.21132486540518707896;
    T reg5=reg3-0.21132486540518707896; reg1=reg1/0.57735026918962573106; T reg6=var_inter[2]-0.21132486540518707896; reg2=reg2/0.57735026918962573106; reg4=reg4/0.57735026918962573106;
    reg1=1-reg1; reg5=reg5/0.57735026918962573106; reg4=1-reg4; reg6=reg6/0.57735026918962573106; reg2=1-reg2;
    T reg7=reg2*reg1; reg6=1-reg6; reg2=reg4*reg2; reg5=1-reg5; T reg8=1-var_inter[2];
    T reg9=reg2*reg6; reg1=reg1*reg5; T reg10=reg8-0.21132486540518707896; T reg11=reg6*reg7; reg5=reg4*reg5;
    reg4=reg6*reg1; reg10=reg10/0.57735026918962573106; reg11=val[1]*reg11; reg9=val[0]*reg9; reg11=reg9+reg11;
    reg4=val[2]*reg4; reg6=reg6*reg5; reg10=1-reg10; reg9=reg2*reg10; reg4=reg11+reg4;
    reg6=val[3]*reg6; reg9=val[4]*reg9; reg11=reg7*reg10; reg6=reg4+reg6; reg11=val[5]*reg11;
    reg4=reg1*reg10; reg9=reg6+reg9; reg11=reg9+reg11; reg4=val[6]*reg4; reg10=reg5*reg10;
    reg4=reg11+reg4; reg10=val[7]*reg10; res=reg4+reg10;

}
#ifndef STRUCT_Flat_interpolation
#define STRUCT_Flat_interpolation
struct Flat_interpolation {};
#endif // STRUCT_Flat_interpolation
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Flat_interpolation &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=reg0-0.21132486540518707896; T reg2=var_inter[1]-0.21132486540518707896; T reg3=1-var_inter[1]; T reg4=var_inter[0]-0.21132486540518707896;
    reg1=reg1/0.57735026918962573106; reg2=reg2/0.57735026918962573106; reg4=reg4/0.57735026918962573106; T reg5=reg3-0.21132486540518707896; reg4=1-reg4;
    reg2=1-reg2; reg1=1-reg1; reg5=reg5/0.57735026918962573106; T reg6=reg2*reg1; reg5=1-reg5;
    reg2=reg4*reg2; T reg7=val[0]*reg2; T reg8=val[1]*reg6; reg1=reg1*reg5; reg5=reg4*reg5;
    reg8=reg7+reg8; reg4=val[2]*reg1; reg4=reg8+reg4; reg7=val[3]*reg5; res=reg4+reg7;

}
#ifndef STRUCT_Der_nodal
#define STRUCT_Der_nodal
struct Der_nodal {};
#endif // STRUCT_Der_nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Der_nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary
#define STRUCT_Elementary
struct Elementary {};
#endif // STRUCT_Elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Skin_elementary
#define STRUCT_Skin_elementary
struct Skin_elementary {};
#endif // STRUCT_Skin_elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Skin_elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
template<class TVI,class TVAL> void get_shape_functions(const Hexa &ne,const TVI &var_inter,TVAL &res) {
    typedef typename TVAL::template SubType<0>::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=var_inter[0]*var_inter[1]; T reg3=var_inter[1]*reg0; T reg4=var_inter[0]*reg1;
    T reg5=1-var_inter[2]; T reg6=reg0*reg1; T reg7=reg5*reg4; res[1]=reg7; T reg8=reg6*reg5;
    res[0]=reg8; T reg9=var_inter[2]*reg3; res[7]=reg9; T reg10=var_inter[2]*reg2; res[6]=reg10;
    reg4=var_inter[2]*reg4; res[5]=reg4; reg6=var_inter[2]*reg6; res[4]=reg6; reg3=reg3*reg5;
    res[3]=reg3; reg2=reg2*reg5; res[2]=reg2;

}
#ifndef AUTORIZEDPERM
#define AUTORIZEDPERM
template<class T> struct AuthorizedPerm;
#endif // AUTORIZEDPERM
template<> struct AuthorizedPerm<Hexa> {
    static const unsigned nb_permutations = 23;
    template<class TE> static void make_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
    template<class TE> static void unmake_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
};

template<class TN,class TNG,class TD,unsigned NET,class TVI>
typename TNG::T get_det_jac( const Element<Hexa,TN,TNG,TD,NET> &elem, const TVI &var_inter ) {
    typedef typename TNG::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[2]; T reg2=1-var_inter[1]; T reg3=var_inter[0]*reg1; T reg4=reg0*reg2;
    T reg5=var_inter[0]*reg2; T reg6=reg2*reg1; T reg7=reg0*reg1; T reg8=elem.pos(0)[2]*reg4; T reg9=var_inter[0]*var_inter[1];
    T reg10=elem.pos(1)[2]*reg5; T reg11=elem.pos(0)[2]*reg7; T reg12=elem.pos(0)[2]*reg6; T reg13=elem.pos(0)[1]*reg4; T reg14=var_inter[1]*reg1;
    T reg15=elem.pos(1)[1]*reg5; T reg16=elem.pos(1)[2]*reg6; T reg17=elem.pos(0)[1]*reg6; T reg18=elem.pos(1)[2]*reg3; T reg19=elem.pos(0)[1]*reg7;
    T reg20=elem.pos(1)[1]*reg6; T reg21=elem.pos(1)[1]*reg3; T reg22=reg21+reg19; T reg23=reg15+reg13; T reg24=reg10+reg8;
    T reg25=elem.pos(2)[2]*reg9; T reg26=elem.pos(2)[1]*reg3; T reg27=elem.pos(2)[1]*reg9; T reg28=elem.pos(2)[2]*reg3; reg20=reg20-reg17;
    T reg29=reg11+reg18; T reg30=elem.pos(2)[1]*reg14; reg16=reg16-reg12; T reg31=elem.pos(2)[2]*reg14; T reg32=var_inter[1]*reg0;
    T reg33=elem.pos(1)[0]*reg3; T reg34=reg25+reg24; T reg35=reg7*elem.pos(0)[0]; T reg36=reg14*elem.pos(3)[2]; T reg37=reg32*elem.pos(3)[1];
    reg31=reg16+reg31; reg16=reg23+reg27; T reg38=reg32*elem.pos(3)[2]; reg28=reg28-reg29; T reg39=elem.pos(1)[0]*reg6;
    T reg40=reg14*elem.pos(3)[1]; T reg41=reg7*elem.pos(3)[1]; reg20=reg30+reg20; reg30=reg7*elem.pos(3)[2]; reg26=reg26-reg22;
    T reg42=var_inter[2]*reg2; T reg43=var_inter[2]*reg0; T reg44=reg6*elem.pos(0)[0]; reg31=reg31-reg36; reg30=reg28+reg30;
    reg28=elem.pos(4)[2]*reg43; reg39=reg39-reg44; T reg45=reg33+reg35; T reg46=elem.pos(4)[2]*reg4; T reg47=reg4*elem.pos(0)[0];
    T reg48=elem.pos(1)[0]*reg5; T reg49=elem.pos(4)[2]*reg42; T reg50=reg34+reg38; T reg51=reg37+reg16; T reg52=elem.pos(2)[0]*reg14;
    T reg53=reg42*elem.pos(4)[1]; T reg54=reg4*elem.pos(4)[1]; T reg55=var_inter[0]*var_inter[2]; T reg56=reg43*elem.pos(4)[1]; reg26=reg41+reg26;
    reg41=elem.pos(2)[0]*reg3; reg20=reg20-reg40; T reg57=elem.pos(5)[2]*reg5; T reg58=var_inter[1]*var_inter[2]; T reg59=reg55*elem.pos(5)[1];
    reg26=reg26-reg56; reg41=reg41-reg45; T reg60=reg55*elem.pos(5)[2]; T reg61=reg7*elem.pos(3)[0]; reg39=reg52+reg39;
    reg46=reg46-reg50; reg20=reg20-reg53; reg52=reg14*elem.pos(3)[0]; T reg62=elem.pos(5)[1]*reg42; T reg63=elem.pos(2)[0]*reg9;
    T reg64=elem.pos(5)[2]*reg42; reg30=reg30-reg28; reg54=reg54-reg51; reg31=reg31-reg49; T reg65=reg47+reg48;
    T reg66=elem.pos(5)[1]*reg5; T reg67=reg55*elem.pos(6)[1]; T reg68=reg9*elem.pos(6)[2]; T reg69=reg55*elem.pos(6)[2]; T reg70=reg32*elem.pos(3)[0];
    T reg71=reg63+reg65; reg41=reg61+reg41; reg61=reg58*elem.pos(6)[2]; reg46=reg57+reg46; reg57=reg42*elem.pos(4)[0];
    reg31=reg64+reg31; reg20=reg62+reg20; reg62=reg58*elem.pos(6)[1]; reg30=reg30-reg60; reg26=reg26-reg59;
    reg39=reg39-reg52; reg64=reg43*elem.pos(4)[0]; reg54=reg66+reg54; reg66=reg9*elem.pos(6)[1]; T reg72=reg70+reg71;
    reg20=reg62+reg20; reg62=elem.pos(7)[1]*reg58; T reg73=elem.pos(7)[1]*reg32; T reg74=reg43*elem.pos(7)[2]; reg39=reg39-reg57;
    T reg75=reg4*elem.pos(4)[0]; reg66=reg54+reg66; reg54=reg55*elem.pos(5)[0]; T reg76=reg32*elem.pos(7)[2]; reg69=reg30+reg69;
    reg31=reg61+reg31; reg30=elem.pos(5)[0]*reg42; reg26=reg67+reg26; reg61=reg58*elem.pos(7)[2]; reg67=elem.pos(7)[1]*reg43;
    reg46=reg68+reg46; reg41=reg41-reg64; reg31=reg31-reg61; reg68=elem.pos(5)[0]*reg5; reg26=reg67+reg26;
    reg20=reg20-reg62; reg41=reg41-reg54; reg67=reg55*elem.pos(6)[0]; reg66=reg73+reg66; reg76=reg46+reg76;
    reg46=elem.pos(6)[0]*reg58; reg39=reg30+reg39; reg69=reg74+reg69; reg75=reg75-reg72; reg30=reg58*elem.pos(7)[0];
    reg73=reg69*reg66; reg68=reg75+reg68; reg74=reg76*reg20; reg75=reg76*reg26; T reg77=reg31*reg66;
    T reg78=reg43*elem.pos(7)[0]; reg39=reg46+reg39; reg46=elem.pos(6)[0]*reg9; reg41=reg67+reg41; reg39=reg39-reg30;
    reg68=reg46+reg68; reg41=reg78+reg41; reg46=reg31*reg26; reg67=reg69*reg20; reg77=reg74-reg77;
    reg74=reg32*elem.pos(7)[0]; reg73=reg75-reg73; reg46=reg67-reg46; reg67=reg73*reg39; reg68=reg74+reg68;
    reg74=reg77*reg41; reg74=reg67-reg74; reg67=reg46*reg68; reg74=reg67+reg74; return reg74;

}
template<class TN,class T,class TNodalStaticData,class TD,unsigned NET>
Vec<T,3> barycenter( const Element<Hexa,TN,Node<3,T,TNodalStaticData>,TD,NET> &elem ) {
    Vec<T,3> res;
    T reg0=0.16666666666666664427*elem.pos(1)[1]; T reg1=0.16666666666666668806*elem.pos(0)[2]; T reg2=0.622008467928146233*elem.pos(1)[1]; T reg3=0.16666666666666668806*elem.pos(0)[1]; T reg4=0.62200846792814627674*elem.pos(0)[1];
    T reg5=0.622008467928146233*elem.pos(1)[2]; T reg6=0.62200846792814627674*elem.pos(0)[2]; T reg7=0.62200846792814627674*elem.pos(1)[1]; T reg8=0.16666666666666664427*elem.pos(1)[2]; T reg9=0.62200846792814627674*elem.pos(1)[2];
    reg5=reg1+reg5; T reg10=0.044658198738520434687*elem.pos(2)[2]; T reg11=0.16666666666666663255*elem.pos(2)[2]; reg2=reg3+reg2; T reg12=0.622008467928146233*elem.pos(2)[1];
    T reg13=0.16666666666666664427*elem.pos(2)[2]; reg9=reg9-reg6; reg7=reg7-reg4; T reg14=0.044658198738520434687*elem.pos(2)[1]; T reg15=0.16666666666666668806*elem.pos(1)[2];
    T reg16=0.16666666666666668806*elem.pos(1)[1]; T reg17=0.16666666666666667632*elem.pos(1)[1]; T reg18=0.044658198738520458147*elem.pos(0)[1]; T reg19=0.16666666666666664427*elem.pos(2)[1]; T reg20=0.16666666666666667632*elem.pos(1)[2];
    T reg21=0.044658198738520458147*elem.pos(0)[2]; reg0=reg4+reg0; reg4=0.16666666666666663255*elem.pos(2)[1]; T reg22=0.622008467928146233*elem.pos(2)[2]; reg8=reg6+reg8;
    reg6=0.16666666666666664427*elem.pos(3)[2]; reg10=reg8+reg10; T reg23=reg19-reg0; T reg24=0.62200846792814627674*elem.pos(3)[1]; T reg25=0.62200846792814627674*elem.pos(0)[0];
    reg8=reg13-reg8; T reg26=0.62200846792814627674*elem.pos(1)[0]; T reg27=0.62200846792814627674*elem.pos(3)[2]; reg15=reg15-reg1; reg16=reg16-reg3;
    T reg28=0.6220084679281461892*elem.pos(2)[1]; reg17=reg18+reg17; T reg29=0.6220084679281461892*elem.pos(2)[2]; reg20=reg21+reg20; T reg30=0.622008467928146233*elem.pos(1)[0];
    T reg31=0.16666666666666668806*elem.pos(0)[0]; T reg32=0.044658198738520446417*elem.pos(3)[1]; T reg33=reg2+reg4; T reg34=0.16666666666666668806*elem.pos(3)[2]; T reg35=reg22-reg5;
    T reg36=0.044658198738520446417*elem.pos(3)[2]; reg5=reg5+reg11; T reg37=0.16666666666666668806*elem.pos(3)[1]; reg2=reg12-reg2; reg9=reg13+reg9;
    reg7=reg19+reg7; reg13=0.16666666666666664427*elem.pos(1)[0]; reg19=0.16666666666666664427*elem.pos(3)[1]; reg14=reg0+reg14; reg0=0.044658198738520446417*elem.pos(1)[2];
    T reg38=0.044658198738520446417*elem.pos(1)[1]; reg22=reg22+reg15; T reg39=0.622008467928146233*elem.pos(3)[2]; reg29=reg20+reg29; T reg40=0.16666666666666667632*elem.pos(3)[2];
    reg10=reg10+reg6; T reg41=0.16666666666666668806*elem.pos(1)[0]; reg27=reg8+reg27; reg8=0.16666666666666664427*elem.pos(4)[2]; T reg42=0.62200846792814627674*elem.pos(4)[1];
    reg28=reg17+reg28; T reg43=0.16666666666666667632*elem.pos(3)[1]; reg6=reg9-reg6; reg3=reg38+reg3; reg14=reg14+reg19;
    reg9=0.16666666666666668806*elem.pos(4)[1]; reg38=0.16666666666666664427*elem.pos(2)[0]; reg26=reg26-reg25; reg13=reg25+reg13; reg19=reg7-reg19;
    reg33=reg33+reg32; reg12=reg12+reg16; reg7=0.622008467928146233*elem.pos(3)[1]; reg25=0.16666666666666664427*elem.pos(4)[1]; T reg44=0.044658198738520446417*elem.pos(4)[2];
    reg35=reg35+reg34; reg30=reg31+reg30; T reg45=0.62200846792814627674*elem.pos(4)[2]; reg24=reg23+reg24; reg5=reg5+reg36;
    reg23=0.044658198738520446417*elem.pos(4)[1]; reg2=reg2+reg37; T reg46=0.16666666666666668806*elem.pos(4)[2]; T reg47=0.622008467928146233*elem.pos(2)[0]; reg1=reg0+reg1;
    reg4=reg3+reg4; reg24=reg24-reg25; reg28=reg28+reg43; reg0=0.044658198738520434687*elem.pos(5)[1]; reg14=reg42-reg14;
    reg6=reg6-reg8; reg42=0.16666666666666664427*elem.pos(3)[0]; T reg48=0.16666666666666663255*elem.pos(5)[2]; reg35=reg35-reg44; T reg49=reg47-reg30;
    T reg50=0.044658198738520434687*elem.pos(5)[2]; T reg51=0.16666666666666664427*elem.pos(5)[1]; T reg52=0.16666666666666667632*elem.pos(1)[0]; T reg53=0.044658198738520458147*elem.pos(0)[0]; reg26=reg26+reg38;
    reg5=reg46-reg5; T reg54=0.622008467928146233*elem.pos(5)[2]; reg25=reg19-reg25; reg38=reg38-reg13; reg19=0.62200846792814627674*elem.pos(3)[0];
    reg33=reg9-reg33; T reg55=0.622008467928146233*elem.pos(5)[1]; reg41=reg41-reg31; reg12=reg12-reg7; T reg56=0.044658198738520446417*elem.pos(2)[2];
    T reg57=0.044658198738520458147*elem.pos(4)[2]; reg11=reg1+reg11; reg22=reg22-reg39; reg10=reg45-reg10; reg45=0.16666666666666664427*elem.pos(5)[2];
    reg29=reg29+reg40; T reg58=0.16666666666666668806*elem.pos(3)[0]; T reg59=0.044658198738520446417*elem.pos(2)[1]; T reg60=0.16666666666666663255*elem.pos(5)[1]; T reg61=0.044658198738520434687*elem.pos(2)[0];
    reg8=reg27-reg8; reg27=0.044658198738520458147*elem.pos(4)[1]; T reg62=0.16666666666666663255*elem.pos(2)[0]; reg2=reg2-reg23; T reg63=0.044658198738520458147*elem.pos(1)[1];
    reg33=reg33+reg55; reg0=reg24-reg0; reg19=reg38+reg19; reg50=reg8-reg50; reg8=0.16666666666666664427*elem.pos(4)[0];
    reg26=reg26-reg42; reg24=0.044658198738520434687*elem.pos(6)[1]; reg38=0.49056261216234410639*elem.pos(1)[1]; T reg64=0.044658198738520446417*elem.pos(5)[1]; reg44=reg22-reg44;
    reg22=0.044658198738520446417*elem.pos(1)[0]; T reg65=0.13144585576580217037*elem.pos(0)[1]; T reg66=0.044658198738520446417*elem.pos(5)[2]; T reg67=0.044658198738520446417*elem.pos(4)[0]; reg10=reg10+reg45;
    T reg68=0.044658198738520434687*elem.pos(6)[2]; reg14=reg14+reg51; T reg69=0.044658198738520458147*elem.pos(1)[2]; reg49=reg49+reg58; T reg70=0.49056261216234414089*elem.pos(0)[0];
    T reg71=0.16666666666666663255*elem.pos(6)[2]; reg5=reg5+reg54; reg15=reg56+reg15; reg47=reg47+reg41; T reg72=0.622008467928146233*elem.pos(3)[0];
    T reg73=0.16666666666666667632*elem.pos(5)[2]; reg29=reg57-reg29; reg16=reg59+reg16; reg57=0.13144585576580213584*elem.pos(1)[2]; T reg74=0.49056261216234414089*elem.pos(0)[2];
    reg30=reg30+reg62; T reg75=0.16666666666666663255*elem.pos(6)[1]; T reg76=0.044658198738520446417*elem.pos(3)[0]; reg39=reg11+reg39; reg35=reg35-reg48;
    reg1=reg56-reg1; reg3=reg59-reg3; reg2=reg2-reg60; reg23=reg12-reg23; reg11=0.16666666666666667632*elem.pos(2)[2];
    reg7=reg4+reg7; reg25=reg51+reg25; reg4=0.13144585576580213584*elem.pos(1)[0]; reg12=0.16666666666666667632*elem.pos(2)[1]; reg51=0.13144585576580213584*elem.pos(1)[1];
    reg56=0.49056261216234414089*elem.pos(0)[1]; reg59=0.16666666666666667632*elem.pos(5)[1]; reg28=reg27-reg28; reg6=reg45+reg6; reg27=0.49056261216234410639*elem.pos(1)[2];
    reg52=reg53+reg52; reg45=0.6220084679281461892*elem.pos(2)[0]; T reg77=0.13144585576580217037*elem.pos(0)[2]; reg61=reg13+reg61; reg13=0.13144585576580217037*elem.pos(0)[0];
    T reg78=0.49056261216234410639*elem.pos(1)[0]; reg47=reg47-reg72; reg51=reg56+reg51; reg33=reg75+reg33; reg56=0.03522081090086450843*elem.pos(2)[1];
    T reg79=0.1314458557658021266*elem.pos(2)[1]; reg38=reg65+reg38; T reg80=0.16666666666666664427*elem.pos(5)[0]; reg26=reg26-reg8; reg29=reg29+reg73;
    T reg81=0.6220084679281461892*elem.pos(6)[2]; reg21=reg69-reg21; reg35=reg71+reg35; reg28=reg28+reg59; reg69=0.6220084679281461892*elem.pos(6)[1];
    reg4=reg70+reg4; reg70=0.03522081090086450843*elem.pos(2)[0]; T reg82=0.044658198738520458147*elem.pos(3)[1]; reg17=reg12-reg17; reg25=reg24+reg25;
    T reg83=0.044658198738520434687*elem.pos(7)[1]; T reg84=0.1314458557658021266*elem.pos(2)[2]; reg6=reg68+reg6; T reg85=0.044658198738520434687*elem.pos(7)[2]; reg27=reg77+reg27;
    reg45=reg52+reg45; T reg86=0.16666666666666667632*elem.pos(3)[0]; T reg87=0.62200846792814627674*elem.pos(4)[0]; reg61=reg42+reg61; reg36=reg15-reg36;
    reg78=reg13+reg78; reg15=0.03522081090086450843*elem.pos(2)[2]; reg42=0.1314458557658021266*elem.pos(2)[0]; T reg88=0.044658198738520446417*elem.pos(7)[2]; reg5=reg5+reg71;
    T reg89=0.044658198738520446417*elem.pos(2)[0]; T reg90=0.13144585576580216111*elem.pos(1)[0]; T reg91=0.044658198738520446417*elem.pos(7)[1]; reg2=reg2+reg75; reg37=reg3+reg37;
    reg3=0.622008467928146233*elem.pos(4)[1]; reg34=reg1+reg34; reg1=0.622008467928146233*elem.pos(4)[2]; T reg92=0.035220810900864526929*elem.pos(0)[0]; reg39=reg46-reg39;
    reg30=reg30+reg76; reg32=reg16-reg32; reg57=reg74+reg57; reg50=reg68+reg50; reg49=reg49-reg67;
    reg16=0.035220810900864526929*elem.pos(0)[1]; reg46=0.13144585576580216111*elem.pos(1)[1]; reg14=reg24+reg14; reg44=reg44+reg66; reg74=0.16666666666666664427*elem.pos(7)[2];
    T reg93=0.16666666666666663255*elem.pos(5)[0]; reg68=reg10+reg68; reg8=reg19-reg8; reg31=reg22+reg31; reg10=0.16666666666666664427*elem.pos(7)[1];
    reg24=reg0+reg24; reg0=0.044658198738520434687*elem.pos(5)[0]; reg19=0.13144585576580216111*elem.pos(1)[2]; reg22=0.044658198738520458147*elem.pos(3)[2]; reg20=reg11-reg20;
    reg23=reg23+reg64; reg7=reg9-reg7; reg18=reg63-reg18; reg9=0.035220810900864526929*elem.pos(0)[2]; reg63=0.16666666666666668806*elem.pos(4)[0];
    T reg94=0.13144585576580213584*elem.pos(3)[1]; reg38=reg38+reg79; T reg95=0.03522081090086451768*elem.pos(3)[1]; reg90=reg92+reg90; reg33=reg91+reg33;
    reg92=0.49056261216234407186*elem.pos(2)[0]; T reg96=0.622008467928146233*elem.pos(5)[0]; reg30=reg63-reg30; reg46=reg16+reg46; reg16=0.49056261216234407186*elem.pos(2)[1];
    reg49=reg49-reg93; reg35=reg88+reg35; reg15=reg57+reg15; reg57=0.13144585576580213584*elem.pos(3)[2]; T reg97=0.16666666666666663255*elem.pos(6)[0];
    T reg98=0.03522081090086451768*elem.pos(1)[2]; T reg99=0.49056261216234407186*elem.pos(2)[2]; reg19=reg9+reg19; reg27=reg27+reg84; reg9=0.03522081090086451768*elem.pos(1)[1];
    T reg100=0.03522081090086451768*elem.pos(3)[2]; T reg101=0.03522081090086451768*elem.pos(1)[0]; T reg102=0.044658198738520458147*elem.pos(1)[0]; reg24=reg24+reg10; reg68=reg68+reg74;
    reg44=reg71+reg44; T reg103=0.16666666666666663255*elem.pos(7)[2]; reg50=reg74+reg50; reg14=reg10+reg14; reg10=reg89-reg31;
    reg74=0.16666666666666667632*elem.pos(2)[0]; reg0=reg8-reg0; reg8=0.03522081090086451768*elem.pos(3)[0]; reg78=reg78+reg42; reg32=reg32-reg3;
    reg36=reg36-reg1; T reg104=0.16666666666666667632*elem.pos(4)[2]; reg22=reg20+reg22; reg64=reg7+reg64; reg7=0.16666666666666667632*elem.pos(4)[1];
    reg82=reg17+reg82; reg61=reg87-reg61; reg17=0.044658198738520458147*elem.pos(4)[0]; reg83=reg25-reg83; reg45=reg45+reg86;
    reg85=reg6-reg85; reg56=reg51+reg56; reg67=reg47-reg67; reg6=0.044658198738520446417*elem.pos(5)[0]; reg29=reg29+reg81;
    reg20=0.16666666666666667632*elem.pos(7)[2]; reg28=reg28+reg69; reg25=0.16666666666666667632*elem.pos(7)[1]; reg70=reg4+reg70; reg4=0.13144585576580213584*elem.pos(3)[0];
    reg88=reg5+reg88; reg91=reg2+reg91; reg21=reg11+reg21; reg2=0.16666666666666663255*elem.pos(7)[1]; reg62=reg31+reg62;
    reg66=reg39+reg66; reg23=reg75+reg23; reg18=reg12+reg18; reg1=reg34-reg1; reg3=reg37-reg3;
    reg41=reg89+reg41; reg5=0.044658198738520434687*elem.pos(6)[0]; reg26=reg26+reg80; reg61=reg80+reg61; reg57=reg15+reg57;
    reg11=0.622008467928146233*elem.pos(7)[2]; reg92=reg90+reg92; reg12=reg91*reg88; reg15=0.03522081090086451768*elem.pos(4)[0]; reg31=0.13144585576580213584*elem.pos(4)[2];
    reg30=reg30+reg96; reg66=reg66+reg71; reg78=reg78+reg8; reg13=reg101+reg13; reg4=reg70+reg4;
    reg34=0.13144585576580213584*elem.pos(4)[0]; reg26=reg26+reg5; reg37=0.044658198738520434687*elem.pos(7)[0]; reg72=reg62+reg72; reg39=reg35*reg33;
    reg47=reg24*reg68; reg51=0.622008467928146233*elem.pos(7)[1]; reg62=reg50*reg14; reg64=reg64+reg75; reg49=reg49+reg97;
    reg70=0.044658198738520446417*elem.pos(7)[0]; reg80=reg83*reg88; reg98=reg77+reg98; reg0=reg5+reg0; reg77=reg85*reg33;
    reg87=0.13144585576580216111*elem.pos(3)[2]; reg99=reg19+reg99; reg19=0.16666666666666664427*elem.pos(7)[0]; reg89=0.03522081090086451768*elem.pos(4)[2]; reg27=reg27+reg100;
    reg90=reg68*reg83; reg101=reg14*reg85; reg52=reg74-reg52; T reg105=0.044658198738520458147*elem.pos(3)[0]; reg9=reg65+reg9;
    reg60=reg3-reg60; reg58=reg10+reg58; reg44=reg44-reg103; reg3=0.13144585576580216111*elem.pos(3)[0]; reg10=0.03522081090086451768*elem.pos(4)[1];
    reg38=reg38+reg95; reg48=reg1-reg48; reg23=reg23-reg2; reg53=reg102-reg53; reg43=reg18-reg43;
    reg1=0.13144585576580213584*elem.pos(4)[1]; reg94=reg56+reg94; reg40=reg21-reg40; reg67=reg67+reg6; reg29=reg29+reg20;
    reg28=reg28+reg25; reg45=reg17-reg45; reg76=reg41-reg76; reg17=0.622008467928146233*elem.pos(4)[0]; reg18=0.16666666666666667632*elem.pos(5)[0];
    reg54=reg36+reg54; reg55=reg32+reg55; reg82=reg82-reg7; reg21=0.6220084679281461892*elem.pos(5)[1]; reg32=0.13144585576580216111*elem.pos(3)[1];
    reg16=reg46+reg16; reg22=reg22-reg104; reg36=0.6220084679281461892*elem.pos(5)[2]; reg41=0.16666666666666663255*elem.pos(7)[0]; reg67=reg97+reg67;
    reg46=0.49056261216234410639*elem.pos(3)[2]; reg42=reg13+reg42; reg84=reg84+reg98; reg77=reg80-reg77; reg1=reg94+reg1;
    reg49=reg49+reg70; reg56=0.035220810900864508427*elem.pos(5)[1]; reg48=reg48+reg71; reg65=0.0094373878376559312156*elem.pos(4)[1]; reg80=0.0094373878376559287372*elem.pos(2)[2];
    reg32=reg16+reg32; reg38=reg38+reg10; reg16=0.1314458557658021266*elem.pos(5)[1]; reg39=reg12-reg39; reg60=reg60+reg75;
    reg12=0.13144585576580216113*elem.pos(1)[2]; reg94=0.035220810900864526933*elem.pos(0)[2]; reg76=reg76-reg17; reg64=reg64+reg51; reg102=0.16666666666666667632*elem.pos(4)[0];
    reg105=reg52+reg105; reg62=reg47-reg62; reg36=reg22-reg36; reg0=reg0+reg19; reg21=reg82-reg21;
    reg75=reg55+reg75; reg22=0.13144585576580216113*elem.pos(1)[0]; reg47=0.035220810900864526933*elem.pos(0)[0]; reg101=reg90-reg101; reg61=reg5+reg61;
    reg5=reg50*reg83; reg52=reg24*reg85; reg71=reg54+reg71; reg54=0.49056261216234410639*elem.pos(3)[0]; reg66=reg66+reg11;
    reg55=reg91*reg29; reg82=reg35*reg28; reg34=reg4+reg34; reg4=0.035220810900864508427*elem.pos(5)[0]; reg104=reg40-reg104;
    reg7=reg43-reg7; reg37=reg26-reg37; reg72=reg63-reg72; reg53=reg74+reg53; reg26=reg29*reg23;
    reg40=0.1314458557658021266*elem.pos(5)[0]; reg78=reg78+reg15; reg43=reg28*reg44; reg17=reg58-reg17; reg58=0.13144585576580216113*elem.pos(1)[1];
    reg31=reg57+reg31; reg57=0.035220810900864508427*elem.pos(5)[2]; reg63=0.0094373878376559312156*elem.pos(4)[2]; reg87=reg99+reg87; reg74=0.0094373878376559287372*elem.pos(2)[0];
    reg90=0.6220084679281461892*elem.pos(6)[0]; reg85=reg85*reg91; reg83=reg83*reg35; reg99=0.0094373878376559312156*elem.pos(4)[0]; reg30=reg97+reg30;
    reg79=reg79+reg9; T reg106=0.1314458557658021266*elem.pos(5)[2]; reg27=reg27+reg89; T reg107=0.035220810900864526933*elem.pos(0)[1]; reg3=reg92+reg3;
    reg92=0.49056261216234410639*elem.pos(3)[1]; reg45=reg45+reg18; T reg108=0.0094373878376559287372*elem.pos(2)[1]; reg108=reg9+reg108; reg9=0.03522081090086450595*elem.pos(6)[0];
    reg78=reg78+reg40; reg86=reg53-reg86; reg99=reg3+reg99; reg3=reg64*reg44; reg6=reg72+reg6;
    reg53=0.0352208109008645152*elem.pos(5)[0]; reg59=reg7+reg59; reg73=reg104+reg73; reg7=0.0094373878376559262588*elem.pos(6)[0]; reg57=reg31+reg57;
    reg4=reg34+reg4; reg31=0.0094373878376559262588*elem.pos(6)[2]; reg82=reg55-reg82; reg48=reg11+reg48; reg35=reg35*reg23;
    reg91=reg91*reg44; reg67=reg67-reg41; reg11=0.16666666666666667632*elem.pos(7)[0]; reg103=reg71-reg103; reg34=reg66*reg24;
    reg45=reg45+reg90; reg52=reg5-reg52; reg61=reg19+reg61; reg5=0.0094373878376559336949*elem.pos(0)[1]; reg2=reg75-reg2;
    reg101=reg0*reg101; reg19=0.035220810900864524453*elem.pos(1)[1]; reg22=reg47+reg22; reg55=0.0352208109008645152*elem.pos(2)[0]; reg71=0.0352208109008645152*elem.pos(2)[1];
    reg58=reg107+reg58; reg21=reg21+reg69; reg74=reg13+reg74; reg36=reg36+reg81; reg62=reg37*reg62;
    reg85=reg83-reg85; reg105=reg105-reg102; reg13=0.6220084679281461892*elem.pos(5)[0]; reg72=reg64*reg50; reg93=reg17-reg93;
    reg43=reg26-reg43; reg30=reg70+reg30; reg17=reg66*reg23; reg26=0.0094373878376559336949*elem.pos(0)[0]; reg70=0.035220810900864524453*elem.pos(1)[0];
    reg75=0.0352208109008645152*elem.pos(5)[1]; reg83=0.0352208109008645152*elem.pos(5)[2]; reg65=reg32+reg65; reg63=reg87+reg63; reg80=reg98+reg80;
    reg27=reg27+reg106; reg54=reg42+reg54; reg32=0.03522081090086450595*elem.pos(6)[2]; reg96=reg76+reg96; reg12=reg94+reg12;
    reg39=reg37*reg39; reg60=reg51+reg60; reg37=0.0352208109008645152*elem.pos(2)[2]; reg42=0.03522081090086450595*elem.pos(6)[1]; reg51=0.035220810900864524453*elem.pos(1)[2];
    reg38=reg38+reg16; reg76=0.0094373878376559336949*elem.pos(0)[2]; reg77=reg49*reg77; reg87=0.0094373878376559262588*elem.pos(6)[1]; reg56=reg1+reg56;
    reg92=reg79+reg92; reg46=reg84+reg46; reg93=reg93+reg97; reg1=0.13144585576580211734*elem.pos(6)[0]; reg77=reg39-reg77;
    reg43=reg49*reg43; reg52=reg61*reg52; reg12=reg12+reg37; reg39=0.0094373878376559312165*elem.pos(3)[2]; reg72=reg34-reg72;
    reg96=reg96+reg97; reg70=reg26+reg70; reg26=0.0094373878376559287372*elem.pos(7)[1]; reg34=0.13144585576580215187*elem.pos(2)[0]; reg38=reg38+reg42;
    reg3=reg17-reg3; reg65=reg65+reg75; reg17=0.13144585576580211734*elem.pos(6)[1]; reg49=reg103*reg14; reg79=0.13144585576580215187*elem.pos(2)[1];
    reg84=0.13144585576580211734*elem.pos(6)[2]; reg63=reg63+reg83; reg22=reg22+reg55; reg19=reg5+reg19; reg5=0.0094373878376559312165*elem.pos(3)[0];
    reg98=0.0094373878376559287372*elem.pos(5)[2]; reg101=reg62-reg101; reg46=reg89+reg46; reg80=reg100+reg80; reg62=reg2*reg68;
    reg25=reg21+reg25; reg21=0.49056261216234410639*elem.pos(4)[2]; reg8=reg74+reg8; reg74=0.49056261216234410639*elem.pos(4)[0]; reg20=reg36+reg20;
    reg85=reg30*reg85; reg58=reg58+reg71; reg36=0.0094373878376559312165*elem.pos(1)[1]; reg89=0.0094373878376559312165*elem.pos(3)[1]; reg91=reg35-reg91;
    reg13=reg105-reg13; reg69=reg59+reg69; reg35=0.6220084679281461892*elem.pos(7)[1]; reg59=0.0094373878376559287372*elem.pos(7)[2]; reg27=reg27+reg32;
    reg81=reg73+reg81; reg73=0.6220084679281461892*elem.pos(7)[2]; reg23=reg50*reg23; reg50=0.035220810900864508427*elem.pos(7)[0]; reg7=reg4+reg7;
    reg68=reg60*reg68; reg4=0.035220810900864508427*elem.pos(7)[1]; reg100=0.0094373878376559287372*elem.pos(7)[0]; reg31=reg57+reg31; reg82=reg67*reg82;
    reg87=reg56+reg87; reg56=0.035220810900864508427*elem.pos(7)[2]; reg57=0.0094373878376559312165*elem.pos(1)[0]; reg44=reg24*reg44; reg14=reg48*reg14;
    reg24=0.0094373878376559287372*elem.pos(5)[0]; reg99=reg99+reg53; reg45=reg45+reg11; reg104=0.0094373878376559312165*elem.pos(1)[2]; reg105=0.0094373878376559287372*elem.pos(5)[1];
    reg92=reg10+reg92; reg15=reg54+reg15; reg10=0.49056261216234410639*elem.pos(4)[1]; reg102=reg86-reg102; reg51=reg76+reg51;
    reg108=reg95+reg108; reg54=0.13144585576580215187*elem.pos(2)[2]; reg78=reg78+reg9; reg97=reg6+reg97; reg6=0.622008467928146233*elem.pos(7)[0];
    reg74=reg8+reg74; reg34=reg70+reg34; reg56=reg31+reg56; reg8=0.035220810900864524453*elem.pos(3)[0]; reg31=0.035220810900864524453*elem.pos(3)[1];
    reg79=reg19+reg79; reg57=reg47+reg57; reg35=reg69-reg35; reg98=reg46+reg98; reg100=reg78+reg100;
    reg18=reg102+reg18; reg0=reg3*reg0; reg3=reg60*reg103; reg19=reg48*reg2; reg44=reg23-reg44;
    reg49=reg62-reg49; reg23=reg103*reg33; reg63=reg63+reg84; reg104=reg94+reg104; reg46=0.0352208109008645152*elem.pos(7)[2];
    reg24=reg15+reg24; reg52=reg101+reg52; reg89=reg58+reg89; reg15=0.13144585576580216113*elem.pos(4)[1]; reg105=reg92+reg105;
    reg10=reg108+reg10; reg65=reg65+reg17; reg59=reg27+reg59; reg13=reg13+reg90; reg99=reg99+reg1;
    reg36=reg107+reg36; reg27=0.0352208109008645152*elem.pos(7)[0]; reg47=0.035220810900864524453*elem.pos(3)[2]; reg73=reg81-reg73; reg85=reg77+reg85;
    reg43=reg82-reg43; reg93=reg6+reg93; reg33=reg20*reg33; reg6=reg97+reg6; reg58=0.0352208109008645152*elem.pos(7)[1];
    reg67=reg72*reg67; reg50=reg7+reg50; reg7=reg2*reg88; reg5=reg22+reg5; reg22=0.13144585576580216113*elem.pos(4)[0];
    reg14=reg68-reg14; reg26=reg38+reg26; reg41=reg96-reg41; reg91=reg45*reg91; reg4=reg87+reg4;
    reg54=reg51+reg54; reg38=0.13144585576580216113*elem.pos(4)[2]; reg88=reg25*reg88; reg39=reg12+reg39; reg21=reg80+reg21;
    reg40=reg74+reg40; reg24=reg24+reg9; reg12=0.1314458557658021266*elem.pos(7)[0]; reg14=reg41*reg14; reg4=reg4*reg52;
    reg51=0.035220810900864524453*elem.pos(4)[2]; reg47=reg54+reg47; reg54=0.49056261216234407188*elem.pos(5)[2]; reg39=reg39+reg38; reg26=reg26*reg85;
    reg99=reg99+reg27; reg21=reg106+reg21; reg62=0.1314458557658021266*elem.pos(7)[2]; reg98=reg32+reg98; reg63=reg63+reg46;
    reg65=reg65+reg58; reg59=reg59*reg85; reg105=reg42+reg105; reg68=0.1314458557658021266*elem.pos(7)[1]; reg56=reg56*reg52;
    reg10=reg16+reg10; reg16=0.13144585576580216113*elem.pos(3)[1]; reg36=reg71+reg36; reg100=reg100*reg85; reg43=reg91+reg43;
    reg69=0.035220810900864524453*elem.pos(4)[1]; reg31=reg79+reg31; reg89=reg89+reg15; reg70=0.49056261216234407188*elem.pos(5)[1]; reg50=reg50*reg52;
    reg49=reg93*reg49; reg3=reg19-reg3; reg5=reg5+reg22; reg19=0.49056261216234407188*elem.pos(5)[0]; reg33=reg88-reg33;
    reg11=reg13+reg11; reg23=reg7-reg23; reg2=reg2*reg20; reg103=reg103*reg25; reg0=reg67-reg0;
    reg8=reg34+reg8; reg7=0.035220810900864524453*elem.pos(4)[0]; reg90=reg18+reg90; reg13=0.6220084679281461892*elem.pos(7)[0]; reg18=reg25*reg29;
    reg34=reg20*reg28; reg29=reg35*reg29; reg28=reg73*reg28; reg57=reg55+reg57; reg55=0.13144585576580216113*elem.pos(3)[0];
    reg44=reg6*reg44; reg67=0.13144585576580216113*elem.pos(3)[2]; reg104=reg37+reg104; reg100=0.125*reg100; reg99=reg43*reg99;
    reg37=reg64*reg48; reg71=reg66*reg35; reg64=reg64*reg73; reg85=0.125*reg85; reg4=0.125*reg4;
    reg26=0.125*reg26; reg65=reg43*reg65; reg105=reg105+reg68; reg10=reg42+reg10; reg70=reg89+reg70;
    reg69=reg31+reg69; reg31=0.13144585576580215187*elem.pos(5)[1]; reg16=reg36+reg16; reg56=0.125*reg56; reg59=0.125*reg59;
    reg63=reg43*reg63; reg98=reg98+reg62; reg44=reg0+reg44; reg9=reg40+reg9; reg49=reg14-reg49;
    reg61=reg3*reg61; reg19=reg5+reg19; reg33=reg41*reg33; reg23=reg11*reg23; reg103=reg2-reg103;
    reg7=reg8+reg7; reg0=0.13144585576580215187*elem.pos(5)[0]; reg13=reg90-reg13; reg34=reg18-reg34; reg28=reg29-reg28;
    reg20=reg20*reg35; reg25=reg25*reg73; reg55=reg57+reg55; reg66=reg66*reg60; reg54=reg39+reg54;
    reg51=reg47+reg51; reg67=reg104+reg67; reg52=0.125*reg52; reg50=0.125*reg50; reg2=0.13144585576580215187*elem.pos(5)[2];
    reg24=reg24+reg12; reg21=reg32+reg21; reg30=reg103*reg30; reg70=reg17+reg70; reg10=reg68+reg10;
    reg0=reg7+reg0; reg67=reg38+reg67; reg105=reg44*reg105; reg3=0.49056261216234403732*elem.pos(6)[0]; reg65=0.125*reg65;
    reg99=0.125*reg99; reg26=reg4+reg26; reg37=reg66-reg37; reg4=0.49056261216234403732*elem.pos(6)[2]; reg34=reg13*reg34;
    reg28=reg11*reg28; reg25=reg20-reg25; reg2=reg51+reg2; reg43=0.125*reg43; reg52=reg85+reg52;
    reg64=reg71-reg64; reg55=reg22+reg55; reg73=reg60*reg73; reg35=reg48*reg35; reg61=reg49+reg61;
    reg9=reg12+reg9; reg16=reg15+reg16; reg24=reg24*reg44; reg19=reg19+reg1; reg23=reg33-reg23;
    reg59=reg56+reg59; reg100=reg50+reg100; reg21=reg62+reg21; reg54=reg84+reg54; reg31=reg69+reg31;
    reg98=reg44*reg98; reg5=0.49056261216234403732*elem.pos(6)[1]; reg63=0.125*reg63; reg73=reg35-reg73; reg7=0.13144585576580215187*elem.pos(7)[2];
    reg63=reg59+reg63; reg53=reg55+reg53; reg21=reg61*reg21; reg37=reg13*reg37; reg24=0.125*reg24;
    reg98=0.125*reg98; reg43=reg52+reg43; reg44=0.125*reg44; reg25=reg45*reg25; reg64=reg93*reg64;
    reg28=reg34-reg28; reg4=reg2+reg4; reg30=reg23+reg30; reg70=reg58+reg70; reg54=reg46+reg54;
    reg67=reg83+reg67; reg10=reg61*reg10; reg5=reg31+reg5; reg2=0.13144585576580215187*elem.pos(7)[1]; reg105=0.125*reg105;
    reg65=reg26+reg65; reg27=reg19+reg27; reg3=reg0+reg3; reg0=0.13144585576580215187*elem.pos(7)[0]; reg16=reg75+reg16;
    reg9=reg9*reg61; reg100=reg99+reg100; reg9=0.125*reg9; reg1=reg53+reg1; reg8=0.49056261216234407188*elem.pos(7)[0];
    reg11=0.49056261216234407188*elem.pos(7)[2]; reg24=reg100+reg24; reg0=reg3+reg0; reg7=reg4+reg7; reg25=reg28+reg25;
    reg67=reg84+reg67; reg27=reg27*reg30; reg98=reg63+reg98; reg21=0.125*reg21; reg3=0.49056261216234407188*elem.pos(7)[1];
    reg16=reg17+reg16; reg2=reg5+reg2; reg70=reg30*reg70; reg10=0.125*reg10; reg54=reg30*reg54;
    reg105=reg65+reg105; reg61=0.125*reg61; reg64=reg37-reg64; reg73=reg6*reg73; reg44=reg43+reg44;
    reg3=reg16+reg3; reg8=reg1+reg8; reg73=reg64+reg73; reg21=reg98+reg21; reg9=reg24+reg9;
    reg11=reg67+reg11; reg2=reg25*reg2; reg70=0.125*reg70; reg27=0.125*reg27; reg10=reg105+reg10;
    reg54=0.125*reg54; reg0=reg0*reg25; reg61=reg44+reg61; reg30=0.125*reg30; reg7=reg25*reg7;
    reg0=0.125*reg0; reg3=reg73*reg3; reg7=0.125*reg7; reg30=reg61+reg30; reg2=0.125*reg2;
    reg11=reg73*reg11; reg25=0.125*reg25; reg54=reg21+reg54; reg27=reg9+reg27; reg8=reg8*reg73;
    reg70=reg10+reg70; reg73=0.125*reg73; reg8=0.125*reg8; reg2=reg70+reg2; reg11=0.125*reg11;
    reg7=reg54+reg7; reg25=reg30+reg25; reg0=reg27+reg0; reg3=0.125*reg3; reg73=reg25+reg73;
    reg8=reg0+reg8; reg11=reg7+reg11; reg3=reg2+reg3; res[0]=reg8/reg73; res[2]=reg11/reg73;
    res[1]=reg3/reg73;

    return res;
}
}
#endif // LMT_HEXA
