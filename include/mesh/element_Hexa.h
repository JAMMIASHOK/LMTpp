#ifndef LMT_HEXA
#define LMT_HEXA
namespace LMT {
inline const double *gauss_point_for_order(unsigned order, const Hexa &elem) { /// order -> degre du polynome a integrer exactement
    static const unsigned offset[] = { 0, 5, 10, 43, 180, 317, 454, 591, 728, 865, }; // fonction de lordre du poly
    static const double values[] = {
        1.0,0.5,0.5,0.5,
        0.0,
        1.0,0.5,0.5,0.5,
        0.0,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
    };
    return values + offset[order];
}
template<class TNode> void permutation_if_jac_neg(const Hexa &elem,TNode **nodes) {
    typedef typename TNode::T T;
    T reg0=0.25*nodes[0]->pos[1]; T reg1=0.25*nodes[1]->pos[1]; T reg2=0.25*nodes[0]->pos[2]; T reg3=0.25*nodes[1]->pos[2]; T reg4=0.25*nodes[2]->pos[1];
    T reg5=reg0+reg1; T reg6=reg2+reg3; T reg7=0.25*nodes[2]->pos[2]; reg0=reg1-reg0; reg2=reg3-reg2;
    reg1=reg7-reg6; reg3=0.25*nodes[3]->pos[2]; reg6=reg6+reg7; T reg8=reg4+reg5; T reg9=0.25*nodes[3]->pos[1];
    reg5=reg4-reg5; reg0=reg4+reg0; reg2=reg7+reg2; reg4=0.25*nodes[1]->pos[0]; reg7=0.25*nodes[0]->pos[0];
    reg2=reg2-reg3; reg1=reg3+reg1; T reg10=0.25*nodes[4]->pos[1]; reg5=reg5+reg9; reg8=reg9+reg8;
    T reg11=0.25*nodes[4]->pos[2]; T reg12=reg4-reg7; T reg13=0.25*nodes[2]->pos[0]; reg3=reg6+reg3; reg7=reg4+reg7;
    reg9=reg0-reg9; reg3=reg11-reg3; reg0=0.25*nodes[5]->pos[2]; reg2=reg2-reg11; reg4=0.25*nodes[3]->pos[0];
    reg11=reg1-reg11; reg8=reg10-reg8; reg1=reg13-reg7; reg9=reg9-reg10; reg12=reg12+reg13;
    reg10=reg5-reg10; reg5=0.25*nodes[5]->pos[1]; reg1=reg4+reg1; reg7=reg13+reg7; reg9=reg5+reg9;
    reg8=reg5+reg8; reg6=0.25*nodes[4]->pos[0]; reg11=reg11-reg0; reg5=reg10-reg5; reg10=0.25*nodes[6]->pos[1];
    reg12=reg12-reg4; reg13=0.25*nodes[6]->pos[2]; reg3=reg3+reg0; reg2=reg0+reg2; reg0=0.25*nodes[5]->pos[0];
    reg7=reg4+reg7; reg1=reg1-reg6; reg9=reg10+reg9; reg2=reg13+reg2; reg8=reg10+reg8;
    reg12=reg12-reg6; reg4=0.25*nodes[7]->pos[1]; reg11=reg13+reg11; reg13=reg3+reg13; reg3=0.25*nodes[7]->pos[2];
    reg10=reg5+reg10; reg9=reg9-reg4; reg2=reg2-reg3; reg7=reg6-reg7; reg5=0.25*nodes[6]->pos[0];
    reg1=reg1-reg0; reg12=reg12+reg0; reg8=reg4+reg8; reg11=reg3+reg11; reg4=reg10+reg4;
    reg3=reg13+reg3; reg12=reg12+reg5; reg6=reg8*reg2; reg10=0.25*nodes[7]->pos[0]; reg7=reg0+reg7;
    reg0=reg4*reg3; reg3=reg3*reg9; reg8=reg11*reg8; reg1=reg5+reg1; reg7=reg5+reg7;
    reg9=reg11*reg9; reg2=reg4*reg2; reg6=reg3-reg6; reg12=reg12-reg10; reg8=reg0-reg8;
    reg1=reg10+reg1; reg6=reg1*reg6; reg7=reg10+reg7; reg8=reg12*reg8; reg2=reg9-reg2;
    reg6=reg8-reg6; reg2=reg7*reg2; T det_jac=reg6+reg2;

    if ( det_jac < 0 ) {
        TNode *tmp[] = {nodes[0],nodes[3],nodes[2],nodes[1],nodes[4],nodes[7],nodes[6],nodes[5]};
        for(unsigned i=0;i<8;++i) nodes[i] = tmp[i];
    }
}
template<class PosNodes,class Pvec,class TVI> void get_var_inter_linear(const Hexa &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[2]; T reg2=1-var_inter[1]; T reg3=reg1*reg0; T reg4=var_inter[0]*reg2;
    T reg5=reg0*reg2; T reg6=reg1*var_inter[0]; T reg7=reg5*pos_nodes[0][1]; T reg8=pos_nodes[1][1]*reg4; T reg9=pos_nodes[0][2]*reg3;
    T reg10=pos_nodes[1][2]*reg6; T reg11=reg3*pos_nodes[0][0]; T reg12=pos_nodes[1][0]*reg6; T reg13=reg3*pos_nodes[0][1]; T reg14=pos_nodes[1][1]*reg6;
    T reg15=var_inter[0]*var_inter[1]; T reg16=pos_nodes[1][2]*reg4; T reg17=reg5*pos_nodes[0][2]; T reg18=reg5*pos_nodes[0][0]; T reg19=pos_nodes[1][0]*reg4;
    T reg20=pos_nodes[2][1]*reg15; reg8=reg7+reg8; reg7=reg0*var_inter[1]; reg19=reg18+reg19; reg18=pos_nodes[2][0]*reg6;
    reg12=reg11+reg12; reg13=reg14+reg13; reg11=pos_nodes[2][0]*reg15; reg14=pos_nodes[2][1]*reg6; reg16=reg17+reg16;
    reg17=pos_nodes[2][2]*reg15; reg10=reg9+reg10; reg9=reg1*reg2; T reg21=pos_nodes[2][2]*reg6; reg10=reg21-reg10;
    reg21=pos_nodes[3][2]*reg3; T reg22=reg9*pos_nodes[0][1]; T reg23=pos_nodes[1][1]*reg9; reg19=reg11+reg19; reg11=pos_nodes[3][0]*reg7;
    T reg24=pos_nodes[3][2]*reg7; reg16=reg17+reg16; reg20=reg8+reg20; reg8=pos_nodes[3][1]*reg7; reg17=reg9*pos_nodes[0][0];
    T reg25=pos_nodes[1][0]*reg9; T reg26=reg0*var_inter[2]; T reg27=pos_nodes[3][1]*reg3; T reg28=reg1*var_inter[1]; reg12=reg18-reg12;
    reg18=pos_nodes[3][0]*reg3; reg13=reg14-reg13; reg22=reg23-reg22; reg14=pos_nodes[2][1]*reg28; reg27=reg13+reg27;
    reg13=pos_nodes[4][1]*reg26; reg21=reg10+reg21; reg10=reg5*pos_nodes[4][1]; reg23=pos_nodes[0][2]*reg9; T reg29=pos_nodes[1][2]*reg9;
    T reg30=pos_nodes[4][2]*reg26; T reg31=reg5*pos_nodes[4][2]; reg8=reg20+reg8; reg24=reg16+reg24; reg16=reg5*pos_nodes[4][0];
    reg17=reg25-reg17; reg20=pos_nodes[2][0]*reg28; reg11=reg19+reg11; reg19=pos_nodes[4][0]*reg26; reg18=reg12+reg18;
    reg12=var_inter[0]*var_inter[2]; reg25=pos_nodes[2][2]*reg28; T reg32=pos_nodes[5][2]*reg12; reg30=reg21-reg30; reg21=reg5*reg1;
    T reg33=var_inter[2]*reg2; T reg34=pos_nodes[5][1]*reg12; reg13=reg27-reg13; reg14=reg22+reg14; reg22=pos_nodes[3][1]*reg28;
    reg19=reg18-reg19; reg18=pos_nodes[5][0]*reg12; reg24=reg31-reg24; reg27=pos_nodes[5][2]*reg4; reg17=reg20+reg17;
    reg23=reg29-reg23; reg20=pos_nodes[5][1]*reg4; reg8=reg10-reg8; reg10=pos_nodes[3][0]*reg28; reg29=pos_nodes[5][0]*reg4;
    reg11=reg16-reg11; reg16=reg1*reg4; reg10=reg17-reg10; reg17=pos_nodes[4][0]*reg33; reg34=reg13-reg34;
    reg20=reg8+reg20; reg8=pos_nodes[6][1]*reg15; reg23=reg25+reg23; reg13=pos_nodes[3][2]*reg28; reg25=pos_nodes[6][1]*reg12;
    reg31=reg21*pos_nodes[0][1]; reg18=reg19-reg18; reg19=pos_nodes[1][1]*reg16; T reg35=pos_nodes[6][2]*reg15; T reg36=reg1*reg15;
    reg29=reg11+reg29; reg11=pos_nodes[6][0]*reg15; T reg37=pos_nodes[6][2]*reg12; T reg38=pos_nodes[1][0]*reg16; reg32=reg30-reg32;
    reg30=reg21*pos_nodes[0][0]; T reg39=pos_nodes[6][0]*reg12; reg22=reg14-reg22; reg14=pos_nodes[4][1]*reg33; reg27=reg24+reg27;
    reg24=pos_nodes[2][1]*reg36; reg19=reg31+reg19; reg31=pos_nodes[2][0]*reg36; reg38=reg30+reg38; reg30=pos_nodes[7][1]*reg7;
    reg8=reg20+reg8; reg20=pos_nodes[7][0]*reg7; reg11=reg29+reg11; reg35=reg27+reg35; reg27=pos_nodes[7][2]*reg7;
    reg29=var_inter[1]*var_inter[2]; T reg40=pos_nodes[5][1]*reg33; reg14=reg22-reg14; reg22=reg21*pos_nodes[0][2]; reg39=reg18+reg39;
    reg18=pos_nodes[7][0]*reg26; reg25=reg34+reg25; reg34=pos_nodes[7][1]*reg26; T reg41=pos_nodes[4][2]*reg33; reg13=reg23-reg13;
    reg37=reg32+reg37; reg23=pos_nodes[7][2]*reg26; reg32=pos_nodes[5][0]*reg33; reg17=reg10-reg17; reg10=pos_nodes[1][2]*reg16;
    T reg42=reg1*reg7; reg27=reg35+reg27; reg23=reg37+reg23; reg41=reg13-reg41; reg13=pos_nodes[5][2]*reg33;
    reg20=reg11+reg20; reg38=reg31+reg38; reg11=pos_nodes[3][0]*reg42; reg31=reg5*var_inter[2]; reg18=reg39+reg18;
    reg40=reg14+reg40; reg14=pos_nodes[6][1]*reg29; reg34=reg25+reg34; reg25=pos_nodes[2][2]*reg36; reg10=reg22+reg10;
    reg22=pos_nodes[3][1]*reg42; reg24=reg19+reg24; reg30=reg8+reg30; reg8=pos_nodes[6][0]*reg29; reg32=reg17+reg32;
    reg8=reg32+reg8; reg17=pos_nodes[4][1]*reg31; reg11=reg38+reg11; reg19=pos_nodes[4][0]*reg31; reg22=reg24+reg22;
    reg24=var_inter[2]*reg4; reg32=reg20*reg23; reg35=reg18*reg27; reg37=reg30*reg23; reg38=reg34*reg27;
    reg39=pos_nodes[7][0]*reg29; reg10=reg25+reg10; reg14=reg40+reg14; reg25=pos_nodes[7][1]*reg29; reg40=pos_nodes[3][2]*reg42;
    T reg43=pos_nodes[6][2]*reg29; reg13=reg41+reg13; reg37=reg38-reg37; reg41=reg18*reg30; T reg44=pos_nodes[4][2]*reg31;
    reg40=reg10+reg40; reg32=reg35-reg32; reg10=reg20*reg34; T reg45=pos_nodes[5][0]*reg24; reg19=reg11+reg19;
    reg11=pos_nodes[7][2]*reg29; reg43=reg13+reg43; reg25=reg14-reg25; reg13=var_inter[2]*reg15; reg39=reg8-reg39;
    reg17=reg22+reg17; reg8=pos_nodes[5][1]*reg24; reg14=pos_nodes[5][2]*reg24; reg44=reg40+reg44; reg22=reg25*reg32;
    reg8=reg17+reg8; reg17=pos_nodes[6][1]*reg13; reg40=var_inter[2]*reg7; reg45=reg19+reg45; reg19=pos_nodes[6][0]*reg13;
    reg11=reg43-reg11; reg10=reg41-reg10; reg43=reg39*reg37; reg19=reg45+reg19; reg45=pos_nodes[7][0]*reg40;
    reg43=reg22-reg43; reg22=reg11*reg10; T reg46=reg25*reg23; T reg47=reg25*reg27; T reg48=reg30*reg11;
    T reg49=reg39*reg27; T reg50=pos_nodes[7][1]*reg40; reg17=reg8+reg17; reg8=reg18*reg11; T reg51=reg39*reg23;
    reg14=reg44+reg14; reg44=pos_nodes[6][2]*reg13; T reg52=reg20*reg11; T reg53=reg34*reg11; reg52=reg49-reg52;
    reg53=reg46-reg53; reg8=reg51-reg8; T reg54=reg39*reg30; reg48=reg47-reg48; T reg55=reg20*reg25;
    T reg56=reg39*reg34; T reg57=reg18*reg25; reg50=reg17+reg50; reg45=reg19+reg45; reg44=reg14+reg44;
    reg14=pos_nodes[7][2]*reg40; reg22=reg43-reg22; reg32=reg32/reg22; reg14=reg44+reg14; reg52=reg52/reg22;
    reg53=reg53/reg22; reg45=pos[0]-reg45; reg57=reg56-reg57; reg48=reg48/reg22; reg8=reg8/reg22;
    reg50=pos[1]-reg50; reg37=reg37/reg22; reg55=reg54-reg55; reg32=reg50*reg32; reg48=reg45*reg48;
    reg52=reg50*reg52; reg53=reg45*reg53; reg8=reg50*reg8; reg37=reg45*reg37; reg57=reg57/reg22;
    reg55=reg55/reg22; reg22=reg10/reg22; reg14=pos[2]-reg14; reg22=reg14*reg22; reg37=reg32-reg37;
    reg55=reg14*reg55; reg52=reg48-reg52; reg57=reg14*reg57; reg53=reg8-reg53; var_inter[0]=reg37-reg22;
    var_inter[1]=reg55+reg52; var_inter[2]=reg53-reg57;

}
template<class PosNodes,class Pvec,class TVI> void get_var_inter(const Hexa &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=1-var_inter[2]; T reg1=1-var_inter[1]; T reg2=1-var_inter[0]; T reg3=reg2*reg1; T reg4=reg0*var_inter[0];
    T reg5=reg2*reg0; T reg6=reg1*var_inter[0]; T reg7=pos_nodes[1][0]*reg6; T reg8=pos_nodes[0][0]*reg3; T reg9=pos_nodes[1][2]*reg6;
    T reg10=pos_nodes[1][0]*reg4; T reg11=pos_nodes[0][0]*reg5; T reg12=var_inter[0]*var_inter[1]; T reg13=pos_nodes[0][1]*reg5; T reg14=pos_nodes[1][1]*reg4;
    T reg15=pos_nodes[0][2]*reg3; T reg16=reg4*pos_nodes[1][2]; T reg17=pos_nodes[0][2]*reg5; T reg18=pos_nodes[1][1]*reg6; T reg19=pos_nodes[0][1]*reg3;
    reg7=reg8+reg7; reg18=reg19+reg18; reg8=reg12*pos_nodes[2][1]; reg19=reg12*pos_nodes[2][0]; reg10=reg11+reg10;
    reg11=reg4*pos_nodes[2][0]; reg16=reg17+reg16; reg17=reg4*pos_nodes[2][1]; T reg20=reg1*reg0; T reg21=reg12*pos_nodes[2][2];
    T reg22=reg4*pos_nodes[2][2]; reg9=reg15+reg9; reg15=reg2*var_inter[1]; reg14=reg13+reg14; reg13=reg5*pos_nodes[3][0];
    reg10=reg11-reg10; reg11=pos_nodes[1][0]*reg20; T reg23=reg5*pos_nodes[3][2]; T reg24=reg2*var_inter[2]; T reg25=reg0*var_inter[1];
    reg21=reg9+reg21; reg9=reg15*pos_nodes[3][0]; T reg26=reg5*pos_nodes[3][1]; reg14=reg17-reg14; reg17=reg15*pos_nodes[3][1];
    reg18=reg8+reg18; reg8=pos_nodes[0][1]*reg20; reg16=reg22-reg16; reg22=pos_nodes[1][1]*reg20; T reg27=pos_nodes[0][0]*reg20;
    reg19=reg7+reg19; reg7=reg15*pos_nodes[3][2]; T reg28=reg3*pos_nodes[4][1]; T reg29=pos_nodes[0][2]*reg20; reg27=reg11-reg27;
    reg21=reg7+reg21; reg26=reg14+reg26; reg16=reg23+reg16; reg7=reg24*pos_nodes[4][2]; reg11=reg3*pos_nodes[4][2];
    reg14=reg25*pos_nodes[2][0]; reg23=var_inter[2]*var_inter[0]; reg10=reg13+reg10; reg13=reg20*pos_nodes[1][2]; T reg30=reg24*pos_nodes[4][0];
    reg19=reg9+reg19; reg9=reg25*pos_nodes[2][1]; T reg31=reg24*pos_nodes[4][1]; reg8=reg22-reg8; reg17=reg18+reg17;
    reg18=reg3*pos_nodes[4][0]; reg22=pos_nodes[5][0]*reg6; reg19=reg18-reg19; reg18=reg0*reg6; reg8=reg9+reg8;
    reg9=reg23*pos_nodes[5][0]; reg30=reg10-reg30; reg21=reg11-reg21; reg10=pos_nodes[5][2]*reg6; reg11=reg1*var_inter[2];
    T reg32=reg25*pos_nodes[3][0]; reg14=reg27+reg14; reg27=reg25*pos_nodes[2][2]; reg29=reg13-reg29; reg13=reg23*pos_nodes[5][2];
    reg7=reg16-reg7; reg16=reg3*reg0; T reg33=reg25*pos_nodes[3][1]; reg17=reg28-reg17; reg28=reg23*pos_nodes[5][1];
    reg31=reg26-reg31; reg26=pos_nodes[5][1]*reg6; T reg34=reg12*pos_nodes[6][0]; reg22=reg19+reg22; reg28=reg31-reg28;
    reg19=reg23*pos_nodes[6][1]; reg26=reg17+reg26; reg17=reg12*pos_nodes[6][1]; reg31=reg23*pos_nodes[6][0]; reg9=reg30-reg9;
    reg30=pos_nodes[0][1]*reg16; T reg35=pos_nodes[1][1]*reg18; T reg36=reg11*pos_nodes[4][0]; reg32=reg14-reg32; reg27=reg29+reg27;
    reg14=reg25*pos_nodes[3][2]; reg29=reg11*pos_nodes[4][1]; reg33=reg8-reg33; reg10=reg21+reg10; reg8=reg0*reg12;
    reg13=reg7-reg13; reg7=reg12*pos_nodes[6][2]; reg21=reg23*pos_nodes[6][2]; T reg37=pos_nodes[1][0]*reg18; T reg38=pos_nodes[0][0]*reg16;
    T reg39=reg0*reg15; T reg40=var_inter[2]*var_inter[1]; reg36=reg32-reg36; reg32=reg11*pos_nodes[5][0]; reg35=reg30+reg35;
    reg14=reg27-reg14; reg27=reg11*pos_nodes[4][2]; reg30=reg8*pos_nodes[2][1]; T reg41=pos_nodes[7][1]*reg15; reg29=reg33-reg29;
    reg31=reg9+reg31; reg9=reg24*pos_nodes[7][0]; reg17=reg26+reg17; reg26=reg11*pos_nodes[5][1]; reg33=reg8*pos_nodes[2][0];
    T reg42=pos_nodes[7][1]*reg24; reg19=reg28+reg19; reg37=reg38+reg37; reg28=reg15*pos_nodes[7][0]; reg34=reg22+reg34;
    reg22=pos_nodes[0][2]*reg16; reg21=reg13+reg21; reg13=reg24*pos_nodes[7][2]; reg38=pos_nodes[1][2]*reg18; T reg43=reg15*pos_nodes[7][2];
    reg7=reg10+reg7; reg33=reg37+reg33; reg10=reg39*pos_nodes[3][1]; reg35=reg30+reg35; reg27=reg14-reg27;
    reg41=reg17+reg41; reg43=reg7+reg43; reg38=reg22+reg38; reg7=reg40*pos_nodes[6][1]; reg26=reg29+reg26;
    reg14=reg11*pos_nodes[5][2]; reg32=reg36+reg32; reg17=reg40*pos_nodes[6][0]; reg9=reg31+reg9; reg22=reg8*pos_nodes[2][2];
    reg42=reg19+reg42; reg28=reg34+reg28; reg19=var_inter[2]*reg3; reg29=reg39*pos_nodes[3][0]; reg13=reg21+reg13;
    reg10=reg35+reg10; reg33=reg29+reg33; reg21=reg19*pos_nodes[4][0]; reg22=reg38+reg22; reg29=reg40*pos_nodes[7][0];
    reg30=reg19*pos_nodes[4][1]; reg31=reg13*reg28; reg34=reg43*reg9; reg35=reg39*pos_nodes[3][2]; reg36=var_inter[2]*reg6;
    reg37=pos_nodes[7][1]*reg40; reg7=reg26+reg7; reg26=reg42*reg43; reg38=reg41*reg13; reg17=reg32+reg17;
    reg14=reg27+reg14; reg27=reg40*pos_nodes[6][2]; reg29=reg17-reg29; reg17=reg36*pos_nodes[5][1]; reg10=reg30+reg10;
    reg30=reg42*reg28; reg31=reg34-reg31; reg32=reg41*reg9; reg38=reg26-reg38; T reg44=reg19*pos_nodes[4][2];
    reg22=reg35+reg22; reg35=reg40*pos_nodes[7][2]; reg27=reg14+reg27; reg37=reg7-reg37; reg7=var_inter[2]*reg12;
    reg14=reg36*pos_nodes[5][0]; reg21=reg33+reg21; reg44=reg22+reg44; reg22=reg38*reg29; reg30=reg32-reg30;
    reg33=reg36*pos_nodes[5][2]; reg35=reg27-reg35; reg27=var_inter[2]*reg15; T reg45=reg7*pos_nodes[6][0]; T reg46=reg37*reg31;
    reg14=reg21+reg14; reg21=reg7*pos_nodes[6][1]; reg17=reg10+reg17; reg10=reg35*reg9; reg33=reg44+reg33;
    reg44=reg13*reg29; T reg47=reg35*reg28; T reg48=reg43*reg29; T reg49=reg7*pos_nodes[6][2]; T reg50=reg27*pos_nodes[7][0];
    reg45=reg14+reg45; reg22=reg46-reg22; reg14=reg42*reg35; reg46=reg37*reg13; T reg51=reg41*reg35;
    T reg52=reg37*reg43; T reg53=pos_nodes[7][1]*reg27; reg21=reg17+reg21; reg17=reg35*reg30; reg50=reg45+reg50;
    reg14=reg46-reg14; reg47=reg48-reg47; reg10=reg44-reg10; reg45=reg41*reg29; T reg54=reg37*reg28;
    T reg55=reg42*reg29; T reg56=reg37*reg9; reg51=reg52-reg51; reg49=reg33+reg49; reg33=reg27*pos_nodes[7][2];
    reg17=reg22-reg17; reg53=reg21+reg53; reg31=reg31/reg17; reg47=reg47/reg17; reg33=reg49+reg33;
    reg10=reg10/reg17; reg38=reg38/reg17; reg54=reg45-reg54; reg56=reg55-reg56; reg53=pos[1]-reg53;
    reg51=reg51/reg17; reg14=reg14/reg17; reg50=pos[0]-reg50; reg47=reg53*reg47; reg51=reg51*reg50;
    reg30=reg30/reg17; reg10=reg53*reg10; reg33=pos[2]-reg33; reg14=reg14*reg50; reg54=reg54/reg17;
    reg17=reg56/reg17; reg38=reg38*reg50; reg31=reg53*reg31; reg38=reg31-reg38; reg47=reg51-reg47;
    reg17=reg33*reg17; reg54=reg33*reg54; reg14=reg10-reg14; reg30=reg33*reg30; var_inter[1]+=reg54+reg47;
    var_inter[2]+=reg14-reg17; var_inter[0]+=reg38-reg30;

}
template<> struct ElemVarInterFromPosNonLinear<Hexa> { static const bool res = 3; };
#ifndef STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
#define STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
struct Elementary_mul_nb_nodes_of_each_children_elem {};
#endif // STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary_mul_nb_nodes_of_each_children_elem &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary_mul_nb_nodes
#define STRUCT_Elementary_mul_nb_nodes
struct Elementary_mul_nb_nodes {};
#endif // STRUCT_Elementary_mul_nb_nodes
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary_mul_nb_nodes &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Nodal
#define STRUCT_Nodal
struct Nodal {};
#endif // STRUCT_Nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[1]; T reg1=1-var_inter[0]; T reg2=var_inter[0]*reg0; T reg3=reg1*reg0; T reg4=1-var_inter[2];
    T reg5=reg4*reg2; T reg6=reg3*reg4; T reg7=var_inter[0]*var_inter[1]; reg5=val[1]*reg5; reg6=val[0]*reg6;
    T reg8=var_inter[1]*reg1; T reg9=reg7*reg4; reg9=val[2]*reg9; T reg10=reg8*reg4; reg5=reg6+reg5;
    reg9=reg5+reg9; reg10=val[3]*reg10; reg3=var_inter[2]*reg3; reg2=var_inter[2]*reg2; reg3=val[4]*reg3;
    reg10=reg9+reg10; reg7=var_inter[2]*reg7; reg2=val[5]*reg2; reg3=reg10+reg3; reg2=reg3+reg2;
    reg7=val[6]*reg7; reg8=var_inter[2]*reg8; reg7=reg2+reg7; reg8=val[7]*reg8; res=reg7+reg8;

}
#ifndef STRUCT_Global
#define STRUCT_Global
struct Global {};
#endif // STRUCT_Global
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Global &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss_0
#define STRUCT_Gauss_0
struct Gauss_0 {};
#endif // STRUCT_Gauss_0
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Gauss_0 &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss
#define STRUCT_Gauss
struct Gauss {};
#endif // STRUCT_Gauss
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Gauss &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=reg0-0.21132486540518707896; T reg2=1-var_inter[1]; T reg3=var_inter[0]-0.21132486540518707896; T reg4=var_inter[1]-0.21132486540518707896;
    T reg5=var_inter[2]-0.21132486540518707896; reg1=reg1/0.57735026918962573106; T reg6=reg2-0.21132486540518707896; reg4=reg4/0.57735026918962573106; reg3=reg3/0.57735026918962573106;
    reg5=reg5/0.57735026918962573106; reg4=1-reg4; reg1=1-reg1; reg6=reg6/0.57735026918962573106; reg3=1-reg3;
    T reg7=1-var_inter[2]; T reg8=reg3*reg4; reg5=1-reg5; reg6=1-reg6; reg4=reg4*reg1;
    reg1=reg1*reg6; T reg9=reg8*reg5; T reg10=reg7-0.21132486540518707896; T reg11=reg5*reg4; T reg12=reg5*reg1;
    reg6=reg3*reg6; reg11=val[1]*reg11; reg9=val[0]*reg9; reg10=reg10/0.57735026918962573106; reg5=reg5*reg6;
    reg12=val[2]*reg12; reg10=1-reg10; reg11=reg9+reg11; reg12=reg11+reg12; reg5=val[3]*reg5;
    reg3=reg8*reg10; reg5=reg12+reg5; reg3=val[4]*reg3; reg9=reg4*reg10; reg11=reg1*reg10;
    reg9=val[5]*reg9; reg3=reg5+reg3; reg9=reg3+reg9; reg11=val[6]*reg11; reg10=reg6*reg10;
    reg11=reg9+reg11; reg10=val[7]*reg10; res=reg11+reg10;

}
#ifndef STRUCT_Gauss_2
#define STRUCT_Gauss_2
struct Gauss_2 {};
#endif // STRUCT_Gauss_2
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Gauss_2 &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=reg0-0.21132486540518707896; T reg2=1-var_inter[1]; T reg3=var_inter[0]-0.21132486540518707896; T reg4=var_inter[1]-0.21132486540518707896;
    T reg5=var_inter[2]-0.21132486540518707896; reg1=reg1/0.57735026918962573106; T reg6=reg2-0.21132486540518707896; reg4=reg4/0.57735026918962573106; reg3=reg3/0.57735026918962573106;
    reg5=reg5/0.57735026918962573106; reg4=1-reg4; reg1=1-reg1; reg6=reg6/0.57735026918962573106; reg3=1-reg3;
    T reg7=1-var_inter[2]; T reg8=reg3*reg4; reg5=1-reg5; reg6=1-reg6; reg4=reg4*reg1;
    reg1=reg1*reg6; T reg9=reg8*reg5; T reg10=reg7-0.21132486540518707896; T reg11=reg5*reg4; T reg12=reg5*reg1;
    reg6=reg3*reg6; reg11=val[1]*reg11; reg9=val[0]*reg9; reg10=reg10/0.57735026918962573106; reg5=reg5*reg6;
    reg12=val[2]*reg12; reg10=1-reg10; reg11=reg9+reg11; reg12=reg11+reg12; reg5=val[3]*reg5;
    reg3=reg8*reg10; reg5=reg12+reg5; reg3=val[4]*reg3; reg9=reg4*reg10; reg11=reg1*reg10;
    reg9=val[5]*reg9; reg3=reg5+reg3; reg9=reg3+reg9; reg11=val[6]*reg11; reg10=reg6*reg10;
    reg11=reg9+reg11; reg10=val[7]*reg10; res=reg11+reg10;

}
#ifndef STRUCT_Flat_interpolation
#define STRUCT_Flat_interpolation
struct Flat_interpolation {};
#endif // STRUCT_Flat_interpolation
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Flat_interpolation &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=reg0-0.21132486540518707896; T reg2=var_inter[1]-0.21132486540518707896; T reg3=var_inter[0]-0.21132486540518707896; T reg4=1-var_inter[1];
    T reg5=reg4-0.21132486540518707896; reg3=reg3/0.57735026918962573106; reg2=reg2/0.57735026918962573106; reg1=reg1/0.57735026918962573106; reg3=1-reg3;
    reg5=reg5/0.57735026918962573106; reg2=1-reg2; reg1=1-reg1; T reg6=reg2*reg1; reg5=1-reg5;
    reg2=reg3*reg2; reg1=reg1*reg5; T reg7=val[0]*reg2; T reg8=val[1]*reg6; reg5=reg3*reg5;
    reg8=reg7+reg8; reg3=val[2]*reg1; reg3=reg8+reg3; reg7=val[3]*reg5; res=reg3+reg7;

}
#ifndef STRUCT_Der_nodal
#define STRUCT_Der_nodal
struct Der_nodal {};
#endif // STRUCT_Der_nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Der_nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary
#define STRUCT_Elementary
struct Elementary {};
#endif // STRUCT_Elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Skin_elementary
#define STRUCT_Skin_elementary
struct Skin_elementary {};
#endif // STRUCT_Skin_elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Skin_elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
template<class TVI,class TVAL> void get_shape_functions(const Hexa &ne,const TVI &var_inter,TVAL &res) {
    typedef typename TVAL::template SubType<0>::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=var_inter[0]*var_inter[1]; T reg3=var_inter[1]*reg0; T reg4=var_inter[0]*reg1;
    T reg5=1-var_inter[2]; T reg6=reg0*reg1; T reg7=reg5*reg4; res[1]=reg7; T reg8=reg6*reg5;
    res[0]=reg8; T reg9=var_inter[2]*reg3; res[7]=reg9; T reg10=var_inter[2]*reg2; res[6]=reg10;
    reg4=var_inter[2]*reg4; res[5]=reg4; reg6=var_inter[2]*reg6; res[4]=reg6; reg3=reg3*reg5;
    res[3]=reg3; reg2=reg2*reg5; res[2]=reg2;

}
#ifndef AUTORIZEDPERM
#define AUTORIZEDPERM
template<class T> struct AuthorizedPerm;
#endif // AUTORIZEDPERM
template<> struct AuthorizedPerm<Hexa> {
    static const unsigned nb_permutations = 23;
    template<class TE> static void make_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
    template<class TE> static void unmake_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
};

template<class TN,class TNG,class TD,unsigned NET,class TVI>
typename TNG::T get_det_jac( const Element<Hexa,TN,TNG,TD,NET> &elem, const TVI &var_inter ) {
    typedef typename TNG::T T;
    T reg0=1-var_inter[1]; T reg1=1-var_inter[0]; T reg2=1-var_inter[2]; T reg3=var_inter[0]*reg0; T reg4=var_inter[0]*reg2;
    T reg5=reg1*reg0; T reg6=reg0*reg2; T reg7=reg1*reg2; T reg8=elem.pos(1)[1]*reg6; T reg9=elem.pos(1)[1]*reg3;
    T reg10=elem.pos(0)[1]*reg5; T reg11=elem.pos(1)[2]*reg3; T reg12=elem.pos(0)[2]*reg5; T reg13=elem.pos(0)[2]*reg7; T reg14=elem.pos(0)[2]*reg6;
    T reg15=elem.pos(1)[2]*reg6; T reg16=var_inter[1]*reg2; T reg17=elem.pos(1)[1]*reg4; T reg18=elem.pos(1)[2]*reg4; T reg19=var_inter[0]*var_inter[1];
    T reg20=elem.pos(0)[1]*reg7; T reg21=elem.pos(0)[1]*reg6; T reg22=reg17+reg20; T reg23=elem.pos(2)[2]*reg4; T reg24=reg18+reg13;
    T reg25=reg10+reg9; T reg26=reg12+reg11; T reg27=elem.pos(2)[2]*reg19; T reg28=elem.pos(2)[1]*reg19; T reg29=elem.pos(2)[1]*reg4;
    reg8=reg8-reg21; T reg30=elem.pos(2)[2]*reg16; reg15=reg15-reg14; T reg31=elem.pos(2)[1]*reg16; T reg32=var_inter[1]*reg1;
    T reg33=reg32*elem.pos(3)[2]; T reg34=reg7*elem.pos(0)[0]; reg30=reg15+reg30; reg29=reg29-reg22; reg15=var_inter[2]*reg0;
    T reg35=reg25+reg28; T reg36=reg7*elem.pos(3)[1]; T reg37=reg16*elem.pos(3)[2]; T reg38=elem.pos(1)[0]*reg6; T reg39=elem.pos(0)[0]*reg6;
    T reg40=var_inter[2]*reg1; reg31=reg8+reg31; reg23=reg23-reg24; reg8=elem.pos(1)[0]*reg4; T reg41=reg7*elem.pos(3)[2];
    T reg42=reg32*elem.pos(3)[1]; T reg43=reg16*elem.pos(3)[1]; T reg44=reg27+reg26; T reg45=reg5*elem.pos(0)[0]; T reg46=reg42+reg35;
    T reg47=reg5*elem.pos(4)[1]; T reg48=elem.pos(4)[2]*reg5; T reg49=reg44+reg33; T reg50=elem.pos(1)[0]*reg3; T reg51=var_inter[0]*var_inter[2];
    T reg52=elem.pos(2)[0]*reg4; reg38=reg38-reg39; reg30=reg30-reg37; T reg53=elem.pos(4)[2]*reg15; T reg54=elem.pos(4)[2]*reg40;
    T reg55=elem.pos(2)[0]*reg16; reg23=reg41+reg23; reg41=reg8+reg34; T reg56=elem.pos(4)[1]*reg15; reg31=reg31-reg43;
    T reg57=elem.pos(4)[1]*reg40; reg29=reg36+reg29; reg30=reg30-reg53; reg36=elem.pos(5)[1]*reg51; T reg58=reg45+reg50;
    T reg59=reg7*elem.pos(3)[0]; reg23=reg23-reg54; T reg60=var_inter[1]*var_inter[2]; T reg61=elem.pos(5)[1]*reg3; reg31=reg31-reg56;
    reg29=reg29-reg57; reg38=reg55+reg38; reg48=reg48-reg49; reg55=elem.pos(2)[0]*reg19; reg52=reg52-reg41;
    T reg62=elem.pos(5)[1]*reg15; T reg63=elem.pos(5)[2]*reg51; reg47=reg47-reg46; T reg64=reg16*elem.pos(3)[0]; T reg65=elem.pos(5)[2]*reg15;
    T reg66=elem.pos(5)[2]*reg3; reg52=reg59+reg52; reg59=reg19*elem.pos(6)[1]; T reg67=elem.pos(6)[1]*reg51; reg30=reg65+reg30;
    reg65=reg19*elem.pos(6)[2]; reg48=reg66+reg48; reg29=reg29-reg36; reg66=elem.pos(6)[2]*reg51; reg38=reg38-reg64;
    T reg68=elem.pos(6)[2]*reg60; T reg69=reg32*elem.pos(3)[0]; reg23=reg23-reg63; T reg70=reg55+reg58; T reg71=elem.pos(4)[0]*reg15;
    reg31=reg62+reg31; reg47=reg61+reg47; reg61=elem.pos(4)[0]*reg40; reg62=elem.pos(6)[1]*reg60; T reg72=elem.pos(7)[1]*reg60;
    reg68=reg30+reg68; reg30=elem.pos(7)[2]*reg60; T reg73=reg32*elem.pos(7)[2]; T reg74=elem.pos(5)[0]*reg15; reg65=reg48+reg65;
    reg67=reg29+reg67; reg29=elem.pos(7)[1]*reg40; reg38=reg38-reg71; reg31=reg62+reg31; reg47=reg59+reg47;
    reg52=reg52-reg61; reg48=reg70+reg69; reg59=elem.pos(5)[0]*reg51; reg62=elem.pos(4)[0]*reg5; T reg75=reg32*elem.pos(7)[1];
    T reg76=elem.pos(7)[2]*reg40; reg23=reg66+reg23; reg74=reg38+reg74; reg52=reg52-reg59; reg38=elem.pos(6)[0]*reg51;
    reg31=reg31-reg72; reg68=reg68-reg30; reg65=reg73+reg65; reg66=elem.pos(6)[0]*reg60; reg62=reg62-reg48;
    reg76=reg23+reg76; reg23=elem.pos(5)[0]*reg3; reg29=reg67+reg29; reg47=reg75+reg47; reg67=reg65*reg29;
    reg73=reg31*reg65; reg75=reg47*reg76; T reg77=reg47*reg68; T reg78=elem.pos(7)[0]*reg40; reg38=reg52+reg38;
    reg52=elem.pos(6)[0]*reg19; reg23=reg62+reg23; reg62=elem.pos(7)[0]*reg60; reg74=reg66+reg74; reg66=reg29*reg68;
    reg78=reg38+reg78; reg38=reg32*elem.pos(7)[0]; T reg79=reg31*reg76; reg77=reg73-reg77; reg75=reg67-reg75;
    reg74=reg74-reg62; reg52=reg23+reg52; reg23=reg75*reg74; reg38=reg52+reg38; reg52=reg77*reg78;
    reg66=reg79-reg66; reg52=reg23-reg52; reg23=reg38*reg66; reg23=reg52+reg23; return reg23;

}
template<class TN,class T,class TNodalStaticData,class TD,unsigned NET>
Vec<T,3> barycenter( const Element<Hexa,TN,Node<3,T,TNodalStaticData>,TD,NET> &elem ) {
    Vec<T,3> res;
    T reg0=elem.pos(1)[1]-elem.pos(0)[1]; T reg1=elem.pos(1)[2]-elem.pos(0)[2]; T reg2=elem.pos(2)[1]-reg0; T reg3=reg0-elem.pos(2)[1]; T reg4=elem.pos(2)[2]-reg1;
    T reg5=reg1-elem.pos(2)[2]; reg2=reg2-elem.pos(3)[1]; reg3=elem.pos(3)[1]+reg3; reg5=elem.pos(3)[2]+reg5; reg4=reg4-elem.pos(3)[2];
    T reg6=reg2-elem.pos(4)[1]; reg3=elem.pos(4)[1]+reg3; T reg7=reg4-elem.pos(4)[2]; T reg8=elem.pos(1)[0]-elem.pos(0)[0]; reg5=elem.pos(4)[2]+reg5;
    reg3=reg3-elem.pos(5)[1]; reg6=elem.pos(5)[1]+reg6; T reg9=elem.pos(3)[2]-elem.pos(0)[2]; T reg10=reg8-elem.pos(2)[0]; T reg11=elem.pos(3)[1]-elem.pos(0)[1];
    reg5=reg5-elem.pos(5)[2]; T reg12=elem.pos(0)[1]-elem.pos(1)[1]; T reg13=elem.pos(0)[1]-elem.pos(3)[1]; T reg14=elem.pos(0)[2]-elem.pos(3)[2]; T reg15=elem.pos(0)[2]-elem.pos(1)[2];
    reg7=elem.pos(5)[2]+reg7; T reg16=elem.pos(2)[2]+reg15; T reg17=elem.pos(2)[1]+reg12; reg7=elem.pos(6)[2]-reg7; T reg18=elem.pos(2)[0]-reg8;
    reg10=elem.pos(3)[0]+reg10; T reg19=elem.pos(4)[1]+reg0; reg3=elem.pos(6)[1]+reg3; reg5=elem.pos(6)[2]+reg5; T reg20=elem.pos(4)[2]+reg1;
    reg13=reg13-elem.pos(4)[1]; reg14=reg14-elem.pos(4)[2]; T reg21=elem.pos(4)[1]+reg11; T reg22=elem.pos(4)[2]+reg9; reg15=reg15-elem.pos(4)[2];
    reg12=reg12-elem.pos(4)[1]; reg6=elem.pos(6)[1]-reg6; reg6=reg6-elem.pos(7)[1]; reg13=elem.pos(7)[1]+reg13; T reg23=elem.pos(5)[2]-reg20;
    reg5=reg5-elem.pos(7)[2]; T reg24=elem.pos(4)[2]-elem.pos(0)[2]; reg3=reg3-elem.pos(7)[1]; T reg25=elem.pos(4)[1]-elem.pos(0)[1]; reg14=elem.pos(7)[2]+reg14;
    T reg26=elem.pos(5)[1]-reg19; reg15=elem.pos(5)[2]+reg15; reg12=elem.pos(5)[1]+reg12; reg17=reg17-elem.pos(3)[1]; reg10=elem.pos(4)[0]+reg10;
    reg16=reg16-elem.pos(3)[2]; T reg27=elem.pos(7)[1]-reg21; reg18=reg18-elem.pos(3)[0]; T reg28=elem.pos(7)[2]-reg22; reg7=reg7-elem.pos(7)[2];
    T reg29=reg1*reg6; T reg30=reg17*reg28; T reg31=reg16*reg26; T reg32=reg13*reg7; T reg33=reg14*reg6;
    T reg34=reg15*reg27; T reg35=reg17*reg23; T reg36=reg25*reg5; T reg37=reg12*reg28; T reg38=reg0*reg7;
    T reg39=reg24*reg17; T reg40=reg24*reg3; T reg41=reg1*reg27; T reg42=reg25*reg16; T reg43=reg0*reg28;
    T reg44=reg13*reg23; T reg45=reg14*reg26; T reg46=reg25*reg4; T reg47=reg9*reg26; T reg48=reg24*reg2;
    T reg49=reg11*reg23; T reg50=reg5*reg6; T reg51=reg3*reg7; T reg52=reg16*reg6; T reg53=reg17*reg7;
    T reg54=reg15*reg6; T reg55=reg5*reg26; T reg56=reg12*reg7; T reg57=reg3*reg23; T reg58=reg11*reg7;
    T reg59=reg28*reg2; T reg60=reg9*reg6; T reg61=reg27*reg4; T reg62=reg18-elem.pos(4)[0]; T reg63=reg5*reg27;
    T reg64=reg3*reg28; T reg65=reg16*reg27; T reg66=elem.pos(0)[0]-elem.pos(1)[0]; T reg67=elem.pos(0)[0]-elem.pos(3)[0]; T reg68=reg2*reg23;
    reg10=reg10-elem.pos(5)[0]; T reg69=reg2*reg7; T reg70=reg4*reg6; T reg71=reg4*reg26; reg69=2*reg69;
    reg10=elem.pos(6)[0]+reg10; T reg72=elem.pos(3)[0]-elem.pos(0)[0]; T reg73=reg0*reg5; reg59=reg58+reg59; reg61=reg60+reg61;
    reg58=2*reg55; reg60=reg12*reg4; T reg74=2*reg63; T reg75=2*reg57; T reg76=2*reg64;
    reg65=2*reg65; reg30=2*reg30; reg32=reg64+reg32; reg71=2*reg71; reg33=reg63+reg33;
    reg63=reg11*reg5; reg64=reg16*reg13; T reg77=reg9*reg3; T reg78=reg17*reg14; reg38=reg35+reg38;
    reg29=reg31+reg29; reg62=elem.pos(5)[0]+reg62; reg56=reg57+reg56; reg54=reg55+reg54; reg31=reg17*reg5;
    reg35=reg3*reg4; reg55=reg16*reg3; reg57=reg5*reg2; reg53=2*reg53; reg52=2*reg52;
    reg51=2*reg51; reg50=2*reg50; T reg79=reg66-elem.pos(4)[0]; reg48=reg49+reg48; reg46=reg47+reg46;
    reg66=elem.pos(2)[0]+reg66; reg47=reg15*reg3; reg70=2*reg70; reg44=reg40+reg44; reg45=reg36+reg45;
    reg49=reg12*reg5; T reg80=reg15*reg2; T reg81=reg1*reg3; reg41=reg42+reg41; reg42=reg0*reg14;
    reg67=reg67-elem.pos(4)[0]; T reg82=reg15*reg13; reg68=2*reg68; reg37=reg40+reg37; reg40=reg12*reg14;
    reg43=reg39+reg43; reg39=reg11*reg15; T reg83=reg1*reg13; reg34=reg36+reg34; reg36=reg9*reg12;
    T reg84=reg25*reg15; reg45=reg44-reg45; reg47=2*reg47; reg70=reg69-reg70; reg49=2*reg49;
    reg44=reg24*reg12; reg80=reg81+reg80; reg60=reg73+reg60; reg41=reg43-reg41; reg43=reg15*reg26;
    reg69=reg12*reg23; reg73=elem.pos(4)[0]+reg8; reg81=reg1*reg26; T reg85=reg0*reg23; T reg86=elem.pos(4)[0]+reg72;
    reg10=reg10-elem.pos(7)[0]; reg74=reg76-reg74; reg36=reg42+reg36; reg29=reg38-reg29; reg39=reg83+reg39;
    reg62=elem.pos(6)[0]-reg62; reg38=reg11*reg24; reg40=2*reg40; reg54=reg56-reg54; reg82=2*reg82;
    reg35=reg31+reg35; reg57=reg55+reg57; reg67=elem.pos(7)[0]+reg67; reg31=reg9*reg25; reg42=reg11*reg28;
    reg52=reg53-reg52; reg50=reg51-reg50; reg51=reg9*reg27; reg46=reg48-reg46; reg79=elem.pos(5)[0]+reg79;
    reg66=reg66-elem.pos(3)[0]; reg34=reg37-reg34; reg77=reg78+reg77; reg63=reg64+reg63; reg37=reg3*reg14;
    reg48=reg5*reg13; reg33=reg32-reg33; reg71=reg68-reg71; reg32=reg24*reg13; reg53=reg25*reg14;
    reg65=reg30-reg65; reg58=reg75-reg58; reg61=reg59-reg61; reg13=reg13*reg28; reg30=reg24*reg0;
    reg14=reg14*reg27; reg55=reg25*reg1; reg56=reg34*reg18; reg59=reg72*reg54; reg37=2*reg37;
    reg82=reg40-reg82; reg40=reg79*reg61; reg57=reg35-reg57; reg35=reg10*reg46; reg48=2*reg48;
    reg64=reg66*reg45; reg68=reg8*reg33; reg31=reg38-reg31; reg38=reg10*reg29; reg75=reg10*reg65;
    reg76=reg67*reg54; reg78=reg18*reg54; reg83=elem.pos(7)[0]-reg86; T reg87=reg67*reg29; T reg88=reg10*reg41;
    T reg89=reg79*reg50; T reg90=reg10*reg58; reg39=reg36-reg39; reg62=reg62-elem.pos(7)[0]; reg63=reg77-reg63;
    reg36=reg66*reg50; reg77=reg16*reg2; T reg91=reg17*reg4; T reg92=reg10*reg45; T reg93=reg79*reg33;
    T reg94=reg10*reg70; T reg95=reg18*reg50; T reg96=reg10*reg52; T reg97=reg0*reg4; T reg98=reg1*reg2;
    T reg99=elem.pos(5)[0]-reg73; T reg100=reg9*reg0; reg43=reg69-reg43; reg69=reg9*reg17; reg14=reg13-reg14;
    reg53=reg32-reg53; reg80=reg60-reg80; reg13=reg11*reg1; reg81=reg85-reg81; reg32=reg66*reg33;
    reg84=reg44-reg84; reg44=reg10*reg61; reg60=elem.pos(4)[0]-elem.pos(0)[0]; reg85=reg67*reg52; T reg101=reg74*reg18;
    T reg102=reg72*reg50; T reg103=reg79*reg70; T reg104=reg10*reg71; T reg105=reg11*reg16; reg55=reg30-reg55;
    reg30=reg66*reg58; reg47=reg49-reg47; reg49=reg10*reg34; reg51=reg42-reg51; reg42=reg8*reg50;
    reg13=reg100-reg13; reg98=reg97-reg98; reg105=reg69-reg105; reg69=reg8*reg14; reg97=reg66*reg53;
    reg48=reg37-reg48; reg37=reg31*reg10; reg100=reg79*reg14; T reg106=reg66*reg14; T reg107=reg79*reg51;
    T reg108=reg10*reg51; T reg109=reg10*reg53; T reg110=reg99*reg57; T reg111=reg83*reg80; reg38=2*reg38;
    reg78=2*reg78; reg103=reg104+reg103; reg30=reg42+reg30; reg42=reg67*reg43; reg104=reg10*reg84;
    reg92=reg93+reg92; reg49=reg76+reg49; reg76=reg82*reg62; reg93=reg10*reg81; T reg112=reg83*reg47;
    T reg113=reg18*reg43; T reg114=reg10*reg74; T reg115=reg67*reg50; T reg116=reg63*reg62; T reg117=reg83*reg57;
    reg75=reg85+reg75; reg101=reg102+reg101; reg32=2*reg32; reg44=2*reg44; reg77=reg91-reg77;
    reg90=reg89+reg90; reg88=reg87+reg88; reg96=2*reg96; reg95=2*reg95; reg94=2*reg94;
    reg36=2*reg36; reg85=reg60*reg57; reg56=reg59+reg56; reg59=reg63*reg99; reg40=reg35+reg40;
    reg35=reg39*reg62; reg87=reg80*reg62; reg89=reg10*reg55; reg91=reg67*reg81; reg64=reg68+reg64;
    reg68=reg84*reg18; reg102=reg72*reg43; T reg118=reg10*reg54; reg92=2*reg92; reg109=reg100+reg109;
    reg59=reg85+reg59; reg85=reg105*reg62; reg100=reg72*reg34; reg111=reg35+reg111; reg35=reg83*reg77;
    T reg119=reg72*reg52; reg88=reg56+reg88; reg49=2*reg49; reg56=reg65*reg18; T reg120=reg66*reg61;
    reg112=reg76+reg112; reg107=reg37+reg107; reg37=reg48*reg99; reg97=reg69+reg97; reg69=reg67*reg41;
    reg76=reg62*reg57; reg96=reg95+reg96; reg94=reg36+reg94; reg36=reg18*reg52; reg95=reg66*reg70;
    T reg121=reg47*reg62; T reg122=4*reg118; reg90=2*reg90; reg87=2*reg87; reg110=2*reg110;
    reg38=reg78+reg38; reg103=reg30+reg103; reg30=reg98*reg62; reg78=reg99*reg77; T reg123=reg18*reg29;
    T reg124=reg66*reg71; reg70=reg8*reg70; T reg125=reg10*reg43; T reg126=reg79*reg58; reg93=2*reg93;
    T reg127=reg74*reg72; T reg128=reg67*reg65; reg113=2*reg113; T reg129=reg79*reg71; reg58=reg8*reg58;
    reg114=reg115+reg114; reg33=reg10*reg33; reg116=reg117+reg116; reg75=reg101+reg75; reg44=reg32+reg44;
    reg32=reg60*reg77; reg101=reg83*reg98; reg104=reg42+reg104; reg108=2*reg108; reg42=reg13*reg62;
    reg115=reg79*reg45; reg74=reg74*reg67; reg89=reg91+reg89; reg68=reg102+reg68; reg14=reg10*reg14;
    reg91=reg79*reg46; reg106=2*reg106; reg40=reg64+reg40; reg45=reg8*reg45; reg64=reg105*reg99;
    reg102=reg41*reg18; reg117=reg72*reg29; T reg130=reg66*reg46; reg34=reg67*reg34; reg61=reg8*reg61;
    reg129=reg58+reg129; reg74=2*reg74; reg58=reg18*reg81; T reg131=reg8*reg53; T reg132=reg83*reg48;
    reg130=reg61+reg130; reg61=reg31*reg79; T reg133=reg48*reg62; reg114=2*reg114; T reg134=reg72*reg84;
    reg14=4*reg14; T reg135=reg55*reg67; reg33=4*reg33; reg53=reg79*reg53; reg67=reg84*reg67;
    reg116=2*reg116; reg84=reg83*reg63; T reg136=4*reg76; reg96=reg94-reg96; reg94=reg72*reg81;
    T reg137=reg55*reg18; T reg138=reg77*reg62; reg36=2*reg36; reg95=2*reg95; reg122=reg90-reg122;
    reg91=reg45+reg91; reg87=reg110+reg87; reg89=reg68+reg89; reg45=reg60*reg80; reg38=reg103-reg38;
    reg68=reg39*reg99; reg115=2*reg115; reg30=2*reg30; reg78=2*reg78; reg104=2*reg104;
    reg123=2*reg123; reg124=reg70+reg124; reg70=reg60*reg47; reg90=reg82*reg99; reg103=reg99*reg47;
    reg110=4*reg125; reg126=2*reg126; T reg139=reg99*reg80; reg93=reg113+reg93; reg113=reg82*reg83;
    reg85=reg35+reg85; reg34=2*reg34; reg112=reg37+reg112; reg48=reg60*reg48; reg109=2*reg109;
    reg108=reg106+reg108; reg35=reg31*reg66; reg37=reg8*reg51; reg69=reg100+reg69; reg102=reg117+reg102;
    reg88=reg40-reg88; reg64=reg32+reg64; reg63=reg60*reg63; reg119=reg56+reg119; reg111=reg59+reg111;
    reg121=2*reg121; reg32=reg39*reg83; reg51=reg66*reg51; reg75=reg44-reg75; reg120=2*reg120;
    reg128=reg127+reg128; reg101=reg42+reg101; reg107=reg97+reg107; reg49=reg92-reg49; reg122=reg121+reg122;
    reg34=reg109-reg34; reg36=reg95-reg36; reg139=2*reg139; reg93=reg129-reg93; reg40=reg13*reg83;
    reg132=2*reg132; reg42=reg60*reg105; reg112=reg49+reg112; reg113=reg48+reg113; reg90=reg70+reg90;
    reg87=reg38+reg87; reg69=reg107-reg69; reg110=reg126-reg110; reg105=reg105*reg83; reg89=reg91-reg89;
    reg65=reg72*reg65; reg104=reg115-reg104; reg123=reg124-reg123; reg101=reg64+reg101; reg30=reg78+reg30;
    reg51=2*reg51; reg103=2*reg103; reg68=reg45+reg68; reg111=reg88+reg111; reg84=2*reg84;
    reg128=reg108-reg128; reg116=reg75+reg116; reg67=2*reg67; reg53=2*reg53; reg136=reg96+reg136;
    reg135=reg134+reg135; reg102=reg130-reg102; reg35=reg37+reg35; reg114=reg33-reg114; reg85=2*reg85;
    reg61=reg131+reg61; reg119=reg120-reg119; reg133=2*reg133; reg46=reg8*reg46; reg71=reg8*reg71;
    reg41=reg72*reg41; reg58=2*reg58; reg32=reg63+reg32; reg33=reg99*reg98; reg37=4*reg138;
    reg137=reg94+reg137; reg38=reg60*reg98; reg74=reg14-reg74; reg14=reg13*reg99; reg44=reg2*reg112;
    reg45=reg11*reg122; reg48=reg26*reg116; reg49=reg25*reg136; reg37=reg36+reg37; reg36=reg27*reg87;
    reg56=reg6*reg111; reg59=reg7*reg111; reg63=reg28*reg87; reg64=reg24*reg136; reg70=reg23*reg116;
    reg75=reg9*reg122; reg78=reg4*reg112; reg137=reg46-reg137; reg113=reg34+reg113; reg14=reg38+reg14;
    reg101=reg102+reg101; reg32=reg69+reg32; reg82=reg60*reg82; reg84=reg128+reg84; reg67=reg53-reg67;
    reg39=reg60*reg39; reg135=reg61-reg135; reg85=reg119+reg85; reg133=reg114+reg133; reg58=reg71-reg58;
    reg33=2*reg33; reg41=reg35-reg41; reg55=reg72*reg55; reg132=reg74+reg132; reg31=reg8*reg31;
    reg40=reg42+reg40; reg68=reg89+reg68; reg30=reg123+reg30; reg65=reg51-reg65; reg110=reg103+reg110;
    reg105=2*reg105; reg34=reg62*reg111; reg35=reg83*reg87; reg38=reg99*reg116; reg42=reg60*reg136;
    reg90=reg104+reg90; reg139=reg93+reg139; reg46=reg18*reg112; reg51=reg72*reg122; reg53=reg84*reg23;
    reg82=reg67+reg82; reg36=reg56+reg36; reg61=reg83*reg111; reg67=reg9*reg112; reg69=reg24*reg116;
    reg49=reg49+reg48; reg39=reg135+reg39; reg45=reg45+reg44; reg71=reg0*reg133; reg74=reg6*reg112;
    reg88=reg27*reg122; reg89=reg27*reg136; reg91=reg32*reg7; reg92=reg6*reg116; reg93=reg6*reg87;
    reg94=reg26*reg136; reg95=reg28*reg111; reg96=reg25*reg116; reg97=reg84*reg26; reg100=reg11*reg112;
    reg102=reg113*reg2; reg103=elem.pos(0)[1]*reg133; reg104=reg0*reg132; reg106=reg26*reg111; reg107=reg25*reg87;
    reg108=reg6*reg68; reg109=reg27*reg139; reg114=reg0*reg112; reg115=elem.pos(0)[1]*reg122; reg117=reg2*reg90;
    reg119=reg11*reg110; reg120=reg2*reg111; reg121=reg11*reg87; reg123=reg0*reg116; reg124=elem.pos(0)[1]*reg136;
    reg126=reg6*reg101; reg127=reg27*reg30; reg128=reg26*reg85; reg129=reg25*reg37; reg130=reg84*reg99;
    reg131=reg72*reg112; reg64=reg64+reg70; reg134=reg113*reg18; reg75=reg75+reg78; reg135=reg1*reg133;
    T reg140=reg7*reg112; T reg141=reg28*reg122; T reg142=reg28*reg136; T reg143=reg7*reg116; T reg144=reg7*reg87;
    T reg145=reg23*reg136; T reg146=reg99*reg111; T reg147=elem.pos(0)[0]*reg133; T reg148=reg8*reg132; reg13=reg60*reg13;
    reg33=reg58+reg33; reg55=reg31-reg55; reg105=reg65+reg105; reg40=reg41+reg40; reg14=reg137+reg14;
    reg31=reg113*reg4; reg41=elem.pos(0)[2]*reg133; reg58=reg1*reg132; reg65=reg23*reg111; reg137=reg24*reg87;
    T reg149=reg7*reg68; T reg150=reg28*reg139; T reg151=reg1*reg112; T reg152=elem.pos(0)[2]*reg122; T reg153=reg4*reg90;
    T reg154=reg9*reg110; T reg155=reg4*reg111; T reg156=reg9*reg87; T reg157=reg1*reg116; T reg158=elem.pos(0)[2]*reg136;
    T reg159=reg7*reg101; T reg160=reg28*reg30; T reg161=reg23*reg85; T reg162=reg24*reg37; T reg163=reg32*reg62;
    T reg164=reg60*reg116; reg63=reg59+reg63; T reg165=reg60*reg87; T reg166=reg62*reg68; T reg167=reg83*reg139;
    T reg168=reg8*reg112; T reg169=elem.pos(0)[0]*reg122; T reg170=reg99*reg136; T reg171=reg18*reg90; T reg172=reg62*reg87;
    T reg173=reg72*reg110; T reg174=reg18*reg111; T reg175=reg72*reg87; T reg176=reg83*reg136; T reg177=reg62*reg116;
    T reg178=reg8*reg116; T reg179=elem.pos(0)[0]*reg136; T reg180=reg62*reg101; T reg181=reg83*reg30; T reg182=reg83*reg122;
    T reg183=reg62*reg112; T reg184=reg99*reg85; T reg185=reg60*reg37; T reg186=reg8*reg133; reg51=reg46+reg51;
    reg42=reg38+reg42; reg35=reg34+reg35; T reg187=reg32*reg6; T reg188=reg27*reg111; T reg189=reg28*reg110;
    T reg190=elem.pos(0)[0]*reg116; reg64=reg70+reg64; reg63=reg59+reg63; reg59=reg8*reg84; reg70=reg83*reg101;
    T reg191=reg40*reg62; T reg192=reg60*reg85; T reg193=reg105*reg99; reg163=reg61+reg163; reg61=reg83*reg37;
    reg130=reg164+reg130; reg164=reg62*reg85; reg134=reg131+reg134; reg131=reg72*reg136; T reg194=reg18*reg116;
    reg148=reg147+reg148; reg89=reg89+reg92; reg147=reg113*reg62; T reg195=reg0*reg136; T reg196=reg2*reg87;
    T reg197=reg32*reg99; T reg198=reg39*reg62; T reg199=reg83*reg68; reg182=reg183+reg182; T reg200=elem.pos(0)[0]*reg112;
    T reg201=reg8*reg113; T reg202=reg72*reg90; T reg203=reg82*reg18; T reg204=reg2*reg110; T reg205=reg0*reg122;
    T reg206=reg6*reg139; T reg207=reg26*reg87; T reg208=reg23*reg112; T reg209=reg24*reg122; T reg210=reg72*reg111;
    T reg211=reg32*reg18; reg176=reg177+reg176; T reg212=reg7*reg90; T reg213=reg99*reg133; reg156=reg155+reg156;
    T reg214=reg27*reg68; reg129=reg128+reg129; reg127=reg126+reg127; T reg215=reg11*reg111; T reg216=reg32*reg2;
    T reg217=reg39*reg6; reg158=reg157+reg158; reg124=reg123+reg124; T reg218=elem.pos(0)[1]*reg116; reg121=reg120+reg121;
    T reg219=reg0*reg84; reg186=2*reg186; reg160=reg159+reg160; reg51=reg46+reg51; reg42=reg38+reg42;
    reg38=reg32*reg26; reg35=reg34+reg35; reg34=reg83*reg112; reg46=reg60*reg133; T reg220=reg132*reg99;
    T reg221=reg27*reg37; T reg222=reg6*reg85; reg162=reg161+reg162; T reg223=reg25*reg111; T reg224=reg11*reg136;
    T reg225=reg2*reg116; T reg226=reg83*reg116; T reg227=reg84*reg62; T reg228=reg26*reg133; reg88=reg74+reg88;
    T reg229=reg72*reg133; T reg230=reg132*reg18; reg71=2*reg71; reg45=reg44+reg45; reg49=reg48+reg49;
    reg44=2*reg145; reg36=reg56+reg36; reg48=reg28*reg116; reg56=reg7*reg139; T reg231=reg1*reg122;
    T reg232=reg4*reg110; T reg233=reg4*reg87; T reg234=reg132*reg23; T reg235=reg24*reg133; T reg236=reg113*reg7;
    T reg237=reg28*reg112; T reg238=reg1*reg136; reg58=reg41+reg58; reg41=reg7*reg30; reg31=reg67+reg31;
    reg53=reg69+reg53; reg91=reg95+reg91; reg67=reg23*reg37; reg69=reg105*reg23; reg95=reg24*reg85;
    T reg239=reg40*reg7; T reg240=reg28*reg101; reg135=2*reg135; T reg241=reg28*reg33; T reg242=reg7*reg14;
    T reg243=reg24*reg30; T reg244=reg23*reg101; T reg245=reg9*reg139; T reg246=reg4*reg68; T reg247=elem.pos(0)[2]*reg87;
    T reg248=reg1*reg111; reg141=reg140+reg141; T reg249=reg23*reg133; T reg250=reg4*reg116; T reg251=reg9*reg136;
    T reg252=reg7*reg85; T reg253=reg28*reg37; reg142=reg142+reg143; T reg254=reg23*reg87; T reg255=reg132*reg4;
    T reg256=reg9*reg133; T reg257=reg84*reg7; T reg258=2*reg170; reg152=reg151+reg152; T reg259=2*reg172;
    T reg260=reg0*reg113; T reg261=elem.pos(0)[1]*reg112; T reg262=reg99*reg37; reg154=reg153+reg154; T reg263=reg62*reg30;
    T reg264=reg8*reg136; T reg265=reg18*reg87; T reg266=reg18*reg110; T reg267=reg8*reg122; T reg268=reg62*reg139;
    T reg269=reg99*reg87; T reg270=reg2*reg122; T reg271=2*reg94; T reg272=2*reg93; T reg273=reg26*reg37;
    T reg274=reg6*reg30; T reg275=reg60*reg111; T reg276=2*reg144; T reg277=reg1*reg84; T reg278=elem.pos(0)[2]*reg116;
    T reg279=reg32*reg4; T reg280=reg9*reg111; T reg281=reg4*reg122; T reg282=reg82*reg4; T reg283=reg9*reg90;
    T reg284=reg1*reg113; T reg285=elem.pos(0)[2]*reg112; reg75=reg78+reg75; reg78=reg28*reg68; T reg286=reg39*reg7;
    reg137=reg65+reg137; T reg287=reg82*reg2; T reg288=reg32*reg23; T reg289=reg24*reg111; reg13=reg55+reg13;
    reg150=reg149+reg150; reg55=reg11*reg90; T reg290=reg18*reg122; reg169=reg168+reg169; T reg291=reg25*reg85;
    reg173=reg171+reg173; reg109=reg108+reg109; T reg292=reg8*reg111; T reg293=elem.pos(0)[0]*reg87; T reg294=reg18*reg68;
    T reg295=reg72*reg139; T reg296=reg99*reg112; T reg297=reg40*reg6; T reg298=reg132*reg26; T reg299=reg25*reg133;
    T reg300=reg27*reg101; reg115=reg114+reg115; T reg301=reg113*reg6; T reg302=reg27*reg112; reg181=reg180+reg181;
    T reg303=reg99*reg101; T reg304=reg11*reg139; T reg305=reg26*reg101; T reg306=reg2*reg68; T reg307=reg25*reg30;
    T reg308=elem.pos(0)[1]*reg87; T reg309=reg0*reg111; T reg310=reg132*reg2; T reg311=reg11*reg133; reg165=reg165+reg146;
    reg179=reg178+reg179; T reg312=reg84*reg6; reg167=reg166+reg167; T reg313=reg27*reg116; T reg314=reg6*reg14;
    T reg315=reg27*reg33; reg175=reg174+reg175; T reg316=reg105*reg26; reg107=reg106+reg107; T reg317=reg26*reg112;
    reg102=reg100+reg102; reg100=reg6*reg90; T reg318=reg25*reg122; T reg319=reg83*reg33; reg185=reg184+reg185;
    reg104=reg103+reg104; reg103=reg62*reg90; T reg320=reg60*reg122; T reg321=reg27*reg110; T reg322=reg62*reg14;
    reg97=reg96+reg97; reg187=reg188+reg187; reg96=reg83*reg110; reg119=reg117+reg119; reg188=reg60*reg30;
    T reg323=2*reg273; T reg324=reg40*reg99; T reg325=reg83*reg14; T reg326=reg13*reg62; T reg327=reg28*reg14;
    T reg328=reg27*reg32; T reg329=reg25*reg84; T reg330=reg11*reg113; T reg331=reg13*reg7; T reg332=reg24*reg101;
    T reg333=elem.pos(0)[1]*reg132; T reg334=reg39*reg4; reg251=reg250+reg251; T reg335=reg9*reg68; T reg336=elem.pos(0)[2]*reg111;
    T reg337=reg1*reg32; T reg338=reg132*reg6; T reg339=2*reg281; T reg340=reg28*reg90; T reg341=reg82*reg7;
    T reg342=reg113*reg23; reg96=reg103+reg96; T reg343=reg24*reg112; reg224=reg225+reg224; reg282=reg283+reg282;
    reg283=2*reg196; reg284=reg285+reg284; reg285=2*reg195; reg78=reg286+reg78; reg286=elem.pos(0)[1]*reg110;
    reg146=reg165+reg146; reg165=2*reg274; reg288=reg289+reg288; reg167=reg166+reg167; reg166=reg0*reg90;
    reg289=2*reg265; T reg344=reg62*reg110; reg271=reg94+reg271; reg94=reg99*reg122; T reg345=reg60*reg101;
    reg320=reg296+reg320; T reg346=2*reg266; T reg347=2*reg267; T reg348=2*reg268; T reg349=reg26*reg68;
    T reg350=2*reg270; T reg351=reg39*reg18; T reg352=reg72*reg68; T reg353=2*reg269; T reg354=reg8*reg32;
    T reg355=reg25*reg139; T reg356=reg62*reg33; T reg357=elem.pos(0)[0]*reg111; T reg358=reg99*reg30; T reg359=reg18*reg139;
    T reg360=reg8*reg87; reg308=reg309+reg308; T reg361=reg40*reg23; reg293=reg292+reg293; T reg362=reg83*reg32;
    T reg363=reg60*reg84; T reg364=reg72*reg113; T reg365=elem.pos(0)[0]*reg132; T reg366=elem.pos(0)[2]*reg132; T reg367=reg9*reg113;
    T reg368=reg24*reg84; T reg369=reg28*reg32; reg247=reg248+reg247; T reg370=2*reg290; reg258=reg170+reg258;
    reg259=reg172+reg259; reg169=reg168+reg169; reg168=2*reg262; reg170=2*reg263; reg272=reg93+reg272;
    reg93=reg27*reg90; reg173=reg171+reg173; reg260=reg261+reg260; reg150=reg149+reg150; reg301=reg302+reg301;
    reg287=reg55+reg287; reg137=reg65+reg137; reg298=reg299+reg298; reg135=reg75+reg135; reg241=reg242+reg241;
    reg243=reg244+reg243; reg295=reg294+reg295; reg245=reg246+reg245; reg55=reg39*reg2; reg141=reg140+reg141;
    reg249=2*reg249; reg253=reg252+reg253; reg65=elem.pos(0)[2]*reg110; reg140=reg1*reg90; reg149=reg24*reg139;
    reg171=reg23*reg68; reg172=reg11*reg68; reg142=reg143+reg142; reg143=reg4*reg133; reg38=reg223+reg38;
    reg158=reg157+reg158; reg97=reg187+reg97; reg156=reg155+reg156; reg214=reg217+reg214; reg160=reg159+reg160;
    reg319=reg322+reg319; reg155=elem.pos(0)[2]*reg37; reg157=reg1*reg85; reg162=reg161+reg162; reg159=reg9*reg30;
    reg161=reg4*reg101; reg217=reg27*reg14; reg223=reg13*reg6; reg189=reg212+reg189; reg104=reg102+reg104;
    reg209=reg208+reg209; reg64=reg63+reg64; reg261=reg40*reg26; reg299=reg25*reg101; reg154=reg153+reg154;
    reg188=reg303+reg188; reg152=reg151+reg152; reg151=elem.pos(0)[0]*reg110; reg153=reg8*reg90; reg302=2*reg233;
    T reg371=2*reg238; reg58=reg31+reg58; reg312=reg313+reg312; reg313=2*reg41; reg53=reg91+reg53;
    T reg372=reg25*reg112; T reg373=reg113*reg26; T reg374=reg82*reg6; T reg375=reg0*reg32; reg69=reg95+reg69;
    reg310=reg311+reg310; reg239=reg240+reg239; reg95=reg60*reg139; reg240=reg99*reg68; reg277=reg278+reg277;
    reg279=reg280+reg279; reg278=reg27*reg133; reg276=reg144+reg276; reg144=elem.pos(0)[1]*reg111; reg145=reg44+reg145;
    reg44=reg1*reg87; reg280=reg4*reg139; reg311=reg132*reg7; T reg376=reg28*reg133; T reg377=reg23*reg30;
    T reg378=reg7*reg33; T reg379=reg84*reg2; reg255=reg256+reg255; reg256=reg11*reg116; reg257=reg48+reg257;
    reg48=reg27*reg85; T reg380=2*reg56; T reg381=reg105*reg6; T reg382=reg105*reg7; T reg383=reg28*reg85;
    T reg384=2*reg231; T reg385=reg9*reg116; T reg386=reg84*reg4; T reg387=2*reg232; T reg388=reg23*reg122;
    T reg389=reg7*reg110; reg234=reg235+reg234; reg236=reg237+reg236; reg235=reg83*reg85; reg237=reg105*reg62;
    T reg390=2*reg254; reg227=reg226+reg227; reg226=reg6*reg33; reg228=2*reg228; reg107=reg106+reg107;
    reg88=reg74+reg88; reg297=reg300+reg297; reg230=reg229+reg230; reg74=2*reg207; reg106=2*reg206;
    reg229=reg83*reg133; reg71=reg45+reg71; reg109=reg108+reg109; reg108=reg132*reg62; reg300=reg83*reg90;
    T reg391=elem.pos(0)[0]*reg37; T reg392=2*reg205; reg49=reg36+reg49; T reg393=reg8*reg85; T reg394=2*reg204;
    T reg395=reg82*reg62; reg213=2*reg213; reg115=reg114+reg115; reg182=reg183+reg182; reg211=reg210+reg211;
    reg114=reg18*reg133; reg176=reg177+reg176; reg175=reg174+reg175; reg59=reg190+reg59; reg191=reg70+reg191;
    reg193=reg192+reg193; reg70=2*reg264; reg61=reg164+reg61; reg304=reg306+reg304; reg130=reg163+reg130;
    reg179=reg178+reg179; reg131=reg194+reg131; reg307=reg305+reg307; reg148=reg134+reg148; reg174=reg0*reg87;
    reg177=reg2*reg133; reg89=reg92+reg89; reg34=reg147+reg34; reg315=reg314+reg315; reg220=reg46+reg220;
    reg46=reg2*reg139; reg221=reg222+reg221; reg92=reg26*reg30; reg316=reg291+reg316; reg147=reg72*reg116;
    reg178=reg84*reg18; reg181=reg180+reg181; reg186=reg51+reg186; reg124=reg123+reg124; reg123=reg26*reg122;
    reg216=reg215+reg216; reg185=reg184+reg185; reg203=reg202+reg203; reg180=reg6*reg110; reg121=reg120+reg121;
    reg219=reg218+reg219; reg120=reg72*reg30; reg201=reg200+reg201; reg318=reg317+reg318; reg183=elem.pos(0)[1]*reg37;
    reg184=reg0*reg85; reg190=reg11*reg30; reg199=reg198+reg199; reg192=reg2*reg101; reg198=reg18*reg101;
    reg42=reg35+reg42; reg321=reg100+reg321; reg197=reg275+reg197; reg200=reg113*reg99; reg202=2*reg67;
    reg129=reg128+reg129; reg128=reg60*reg112; reg127=reg126+reg127; reg119=reg117+reg119; reg190=reg192+reg190;
    reg188=reg303+reg188; reg373=reg372+reg373; reg117=reg18*reg85; reg126=reg72*reg37; reg67=reg202+reg67;
    reg69=reg239+reg69; reg202=reg6*reg133; reg210=2*reg377; reg215=2*reg310; reg214=reg38+reg214;
    reg95=reg240+reg95; reg131=reg194+reg131; reg277=reg279+reg277; reg38=reg60*reg33; reg130=reg163+reg130;
    reg163=reg99*reg14; reg234=reg236+reg234; reg220=reg34+reg220; reg151=reg153+reg151; reg194=elem.pos(0)[1]*reg85;
    reg159=reg161+reg159; reg315=reg314+reg315; reg318=reg317+reg318; reg183=reg184+reg183; reg302=reg233+reg302;
    reg307=reg305+reg307; reg186=reg51+reg186; reg371=reg238+reg371; reg58=reg31+reg58; reg31=2*reg89;
    reg155=reg157+reg155; reg51=2*reg312; reg218=2*reg177; reg313=reg41+reg313; reg41=reg0*reg105;
    reg53=reg91+reg53; reg177=4*reg177; reg148=reg134+reg148; reg91=reg26*reg139; reg338=reg278+reg338;
    reg134=reg0*reg110; reg233=elem.pos(0)[0]*reg139; reg238=reg8*reg68; reg78=reg288+reg78; reg59=reg211+reg59;
    reg129=reg127+reg129; reg275=reg11*reg33; reg278=reg2*reg14; reg321=reg100+reg321; reg327=reg331+reg327;
    reg158=reg156+reg158; reg100=2*reg176; reg332=reg361+reg332; reg334=reg335+reg334; reg185=reg181+reg185;
    reg288=2*reg114; reg337=reg336+reg337; reg114=4*reg114; reg291=reg0*reg82; reg150=reg137+reg150;
    reg304=reg306+reg304; reg319=reg322+reg319; reg42=reg35+reg42; reg35=reg1*reg105; reg137=elem.pos(0)[2]*reg85;
    reg145=reg276+reg145; reg303=reg40*reg4; reg305=reg9*reg101; reg97=reg187+reg97; reg61=reg164+reg61;
    reg339=reg281+reg339; reg164=reg7*reg122; reg187=reg4*reg136; reg340=reg341+reg340; reg193=reg191+reg193;
    reg342=reg343+reg342; reg309=reg308+reg309; reg281=reg7*reg37; reg219=reg216+reg219; reg282=reg284+reg282;
    reg249=reg141+reg249; reg284=reg4*reg85; reg306=reg9*reg37; reg308=reg18*reg14; reg314=reg24*reg110;
    reg317=reg23*reg90; reg322=reg72*reg33; reg250=reg251+reg250; reg251=elem.pos(0)[0]*reg30; reg124=reg121+reg124;
    reg65=reg140+reg65; reg135=reg75+reg135; reg253=reg252+reg253; reg149=reg171+reg149; reg49=reg36+reg49;
    reg189=reg212+reg189; reg316=reg297+reg316; reg375=reg144+reg375; reg36=reg8*reg101; reg228=reg88+reg228;
    reg75=reg24*reg33; reg243=reg244+reg243; reg295=reg294+reg295; reg108=reg229+reg108; reg261=reg299+reg261;
    reg245=reg246+reg245; reg109=reg107+reg109; reg64=reg63+reg64; reg119=reg115+reg119; reg298=reg301+reg298;
    reg248=reg247+reg248; reg292=reg293+reg292; reg104=reg102+reg104; reg55=reg172+reg55; reg71=reg45+reg71;
    reg241=reg242+reg241; reg45=reg9*reg33; reg63=reg4*reg14; reg209=reg208+reg209; reg102=elem.pos(0)[2]*reg30;
    reg107=reg1*reg101; reg115=2*reg230; reg144=2*reg257; reg178=reg147+reg178; reg147=reg60*reg110;
    reg287=reg260+reg287; reg162=reg160+reg162; reg380=reg56+reg380; reg382=reg383+reg382; reg56=reg40*reg2;
    reg225=reg224+reg225; reg384=reg231+reg384; reg385=reg386+reg385; reg381=reg48+reg381; reg179=reg175+reg179;
    reg213=reg182+reg213; reg387=reg232+reg387; reg48=2*reg388; reg221=reg222+reg221; reg172=2*reg389;
    reg208=reg4*reg30; reg212=reg1*reg37; reg222=reg99*reg90; reg224=reg23*reg14; reg229=2*reg142;
    reg231=reg1*reg68; reg232=elem.pos(0)[2]*reg139; reg242=2*reg227; reg244=2*reg143; reg246=reg23*reg139;
    reg247=reg1*reg110; reg252=2*reg44; reg260=reg11*reg101; reg293=2*reg280; reg311=reg376+reg311;
    reg237=reg235+reg237; reg154=reg152+reg154; reg217=reg223+reg217; reg152=2*reg378; reg223=2*reg255;
    reg235=reg2*reg85; reg294=reg11*reg37; reg256=reg379+reg256; reg254=reg390+reg254; reg299=elem.pos(0)[0]*reg85;
    reg363=reg362+reg363; reg348=reg268+reg348; reg268=reg24*reg132; reg331=reg28*reg113; reg335=2*reg46;
    reg365=reg364+reg365; reg336=reg83*reg113; reg366=reg367+reg366; reg341=reg62*reg133; reg343=reg8*reg82;
    reg361=reg60*reg132; reg372=elem.pos(0)[0]*reg90; reg368=reg369+reg368; reg376=2*reg92; reg347=reg267+reg347;
    reg346=reg266+reg346; reg266=reg83*reg84; reg267=2*reg359; reg379=reg2*reg136; reg383=reg60*reg32;
    reg386=reg39*reg83; reg200=reg128+reg200; reg128=elem.pos(0)[0]*reg113; reg390=reg72*reg82; T reg396=2*reg358;
    T reg397=reg6*reg37; T reg398=2*reg356; T reg399=reg72*reg32; reg120=reg198+reg120; T reg400=elem.pos(0)[0]*reg84;
    reg394=reg204+reg394; reg353=reg269+reg353; reg204=reg83*reg40; reg269=reg60*reg105; reg392=reg205+reg392;
    reg205=2*reg174; reg370=reg290+reg370; reg173=reg169+reg173; reg74=reg207+reg74; reg169=2*reg226;
    reg258=reg259+reg258; reg289=reg265+reg289; reg207=elem.pos(0)[1]*reg139; reg265=reg9*reg82; reg290=elem.pos(0)[2]*reg113;
    T reg401=reg0*reg68; T reg402=reg39*reg28; T reg403=reg24*reg32; T reg404=reg40*reg18; T reg405=reg72*reg101;
    T reg406=reg26*reg14; reg300=reg395+reg300; reg170=reg263+reg170; reg168=reg262+reg168; reg262=reg25*reg33;
    reg263=reg39*reg99; reg395=reg24*reg105; reg106=reg206+reg106; reg206=reg60*reg68; T reg407=reg28*reg40;
    T reg408=reg72*reg132; T reg409=elem.pos(0)[2]*reg84; T reg410=reg9*reg32; T reg411=reg7*reg133; T reg412=reg62*reg37;
    T reg413=2*reg94; reg391=reg393+reg391; T reg414=reg18*reg136; T reg415=2*reg344; T reg416=reg18*reg30;
    T reg417=reg62*reg122; T reg418=reg25*reg132; T reg419=reg27*reg113; T reg420=reg8*reg37; T reg421=reg25*reg110;
    reg93=reg374+reg93; reg374=reg1*reg82; T reg422=elem.pos(0)[2]*reg90; reg333=reg330+reg333; reg320=reg296+reg320;
    reg296=reg39*reg23; T reg423=reg24*reg68; T reg424=elem.pos(0)[1]*reg30; T reg425=reg0*reg101; reg355=reg349+reg355;
    reg329=reg328+reg329; reg271=reg272+reg271; reg70=reg264+reg70; reg264=2*reg180; reg350=reg270+reg350;
    reg270=reg25*reg105; T reg426=reg27*reg40; T reg427=elem.pos(0)[1]*reg90; T reg428=reg39*reg26; reg96=reg103+reg96;
    reg103=reg25*reg68; T reg429=reg99*reg139; T reg430=reg0*reg37; reg283=reg196+reg283; reg285=reg195+reg285;
    reg286=reg166+reg286; reg195=reg2*reg30; reg196=reg11*reg132; reg165=reg274+reg165; reg199=reg197+reg199;
    reg323=reg273+reg323; reg325=reg326+reg325; reg197=reg27*reg84; reg273=reg26*reg90; reg167=reg146+reg167;
    reg324=reg345+reg324; reg146=reg28*reg84; reg274=reg9*reg132; reg143=4*reg143; reg326=2*reg360;
    reg345=reg8*reg105; T reg431=reg25*reg32; T reg432=reg39*reg27; T reg433=reg8*reg110; T reg434=elem.pos(0)[1]*reg113;
    T reg435=reg11*reg82; T reg436=reg6*reg122; reg203=reg201+reg203; reg201=reg11*reg32; reg351=reg352+reg351;
    reg352=2*reg123; reg354=reg357+reg354; reg357=elem.pos(0)[1]*reg84; T reg437=reg99*reg110; T reg438=2*reg416;
    reg398=reg356+reg398; reg356=reg8*reg30; T reg439=2*reg420; T reg440=reg99*reg33; T reg441=reg18*reg33;
    T reg442=2*reg250; T reg443=2*reg108; reg251=reg36+reg251; reg396=reg358+reg396; reg326=reg360+reg326;
    reg325=reg324+reg325; reg324=reg13*reg18; reg391=reg393+reg391; reg358=reg72*reg14; reg96=reg320+reg96;
    reg351=reg354+reg351; reg186=reg42+reg186; reg343=reg372+reg343; reg267=reg359+reg267; reg319=reg188+reg319;
    reg188=reg8*reg40; reg320=elem.pos(0)[0]*reg101; reg185=reg181+reg185; reg242=reg227+reg242; reg346=reg347+reg346;
    reg263=reg206+reg263; reg120=reg198+reg120; reg217=reg261+reg217; reg162=reg160+reg162; reg348=reg353+reg348;
    reg160=reg82*reg99; reg173=reg167+reg173; reg181=reg13*reg99; reg203=reg199+reg203; reg198=reg60*reg14;
    reg206=2*reg429; reg227=reg8*reg39; reg261=elem.pos(0)[0]*reg68; reg115=reg230+reg115; reg135=reg64+reg135;
    reg322=reg322+reg308; reg213=reg182+reg213; reg413=reg94+reg413; reg94=reg60*reg90; reg55=reg375+reg55;
    reg249=reg141+reg249; reg415=reg344+reg415; reg141=2*reg433; reg295=reg292+reg295; reg306=reg284+reg306;
    reg182=reg8*reg139; reg270=reg426+reg270; reg193=reg191+reg193; reg191=2*reg164; reg357=reg201+reg357;
    reg339=2*reg339; reg230=2*reg61; reg145=reg276+reg145; reg276=reg82*reg27; reg292=reg25*reg113;
    reg435=reg434+reg435; reg432=reg431+reg432; reg344=reg13*reg27; reg347=reg25*reg40; reg353=reg11*reg39;
    reg38=reg163+reg38; reg354=elem.pos(0)[1]*reg32; reg359=reg13*reg4; reg360=2*reg131; reg143=reg244+reg143;
    reg244=elem.pos(0)[0]*reg32; reg372=reg72*reg39; reg375=reg60*reg40; reg126=reg117+reg126; reg67=reg313+reg67;
    reg393=reg13*reg83; reg386=reg383+reg386; reg390=reg128+reg390; reg428=reg103+reg428; reg291=reg427+reg291;
    reg114=reg288+reg114; reg103=reg13*reg26; reg128=reg25*reg14; reg288=reg0*reg39; reg383=elem.pos(0)[1]*reg68;
    reg427=reg25*reg90; reg100=reg176+reg100; reg176=reg27*reg132; reg431=2*reg196; reg434=2*reg197;
    T reg444=reg82*reg26; T reg445=elem.pos(0)[1]*reg101; T reg446=reg0*reg40; T reg447=reg11*reg14; reg27=reg27*reg105;
    T reg448=reg11*reg84; reg418=reg419+reg418; reg59=reg211+reg59; reg333=reg330+reg333; reg233=reg238+reg233;
    reg211=reg13*reg2; reg330=2*reg281; reg329=reg328+reg329; reg328=2*reg187; reg70=reg289+reg70;
    reg380=reg254+reg380; reg254=2*reg408; reg147=reg222+reg147; T reg449=reg83*reg132; T reg450=2*reg411;
    T reg451=4*reg341; T reg452=2*reg412; T reg453=2*reg178; reg152=reg378+reg152; reg378=2*reg414;
    reg377=reg210+reg377; reg345=reg299+reg345; reg210=2*reg417; reg299=2*reg237; reg293=reg280+reg293;
    reg252=reg44+reg252; reg370=2*reg370; reg44=reg4*reg33; reg280=reg1*reg30; T reg454=reg23*reg110;
    T reg455=2*reg247; reg258=reg259+reg258; reg404=reg405+reg404; reg229=reg142+reg229; reg142=2*reg253;
    reg168=reg170+reg168; reg300=reg200+reg300; reg95=reg240+reg95; reg200=reg60*reg113; reg240=reg82*reg83;
    reg259=reg23*reg33; reg405=reg1*reg139; reg371=reg302+reg371; reg148=reg130+reg148; reg400=reg399+reg400;
    reg269=reg204+reg269; reg363=reg362+reg363; reg411=4*reg411; reg151=reg153+reg151; reg365=reg364+reg365;
    reg153=2*reg212; reg362=2*reg208; reg172=reg389+reg172; reg341=2*reg341; reg388=reg48+reg388;
    reg387=reg384+reg387; reg361=reg336+reg361; reg179=reg175+reg179; reg220=reg34+reg220; reg34=reg72*reg84;
    reg83=reg83*reg105; reg48=reg72*reg85; reg175=2*reg266; reg364=reg105*reg18; reg384=2*reg382;
    reg389=2*reg385; T reg456=reg2*reg33; T reg457=reg105*reg4; reg205=reg174+reg205; reg335=reg46+reg335;
    reg376=reg92+reg376; reg46=reg9*reg85; reg169=reg226+reg169; reg106=reg74+reg106; reg394=reg392+reg394;
    reg352=reg123+reg352; reg264=reg180+reg264; reg74=2*reg195; reg92=2*reg430; reg285=reg283+reg285;
    reg323=reg165+reg323; reg234=reg236+reg234; reg271=reg272+reg271; reg350=2*reg350; reg56=reg260+reg56;
    reg71=reg49+reg71; reg228=reg88+reg228; reg294=reg235+reg294; reg88=2*reg225; reg123=2*reg221;
    reg93=reg373+reg93; reg31=reg89+reg31; reg177=reg218+reg177; reg89=2*reg202; reg202=4*reg202;
    reg174=2*reg311; reg180=reg0*reg139; reg218=reg26*reg33; reg226=2*reg91; reg236=2*reg134;
    reg223=reg255+reg223; reg144=reg257+reg144; reg255=reg26*reg110; reg257=reg0*reg30; reg366=reg367+reg366;
    reg268=reg331+reg268; reg327=reg332+reg327; reg334=reg337+reg334; reg260=reg9*reg84; reg272=reg28*reg105;
    reg332=reg9*reg14; reg337=reg1*reg40; reg367=2*reg146; reg373=elem.pos(0)[2]*reg101; reg392=2*reg274;
    T reg458=reg28*reg132; T reg459=elem.pos(0)[2]*reg68; T reg460=reg1*reg39; T reg461=reg24*reg14; T reg462=reg13*reg23;
    reg296=reg423+reg296; reg374=reg422+reg374; reg422=reg24*reg90; reg423=reg82*reg23; reg58=reg53+reg58;
    T reg463=2*reg436; T reg464=2*reg379; reg69=reg239+reg69; reg277=reg279+reg277; reg239=2*reg397;
    reg35=reg137+reg35; reg303=reg305+reg303; reg137=elem.pos(0)[2]*reg32; reg279=reg9*reg39; reg305=reg24*reg40;
    T reg465=reg13*reg28; reg402=reg403+reg402; reg340=reg342+reg340; reg265=reg290+reg265; reg290=reg24*reg113;
    reg28=reg82*reg28; reg409=reg410+reg409; reg395=reg407+reg395; reg368=reg369+reg368; reg282=reg78+reg282;
    reg45=reg63+reg45; reg102=reg107+reg102; reg207=reg207+reg401; reg262=reg406+reg262; reg342=2*reg246;
    reg355=reg349+reg355; reg286=reg166+reg286; reg421=reg273+reg421; reg424=reg425+reg424; reg314=reg317+reg314;
    reg275=reg278+reg275; reg304=reg309+reg304; reg315=reg307+reg315; reg65=reg140+reg65; reg149=reg171+reg149;
    reg219=reg216+reg219; reg119=reg109+reg119; reg158=reg156+reg158; reg155=reg157+reg155; reg159=reg161+reg159;
    reg316=reg297+reg316; reg104=reg97+reg104; reg298=reg301+reg298; reg140=reg11*reg85; reg156=reg105*reg2;
    reg157=2*reg256; reg189=reg209+reg189; reg161=2*reg381; reg154=reg150+reg154; reg287=reg214+reg287;
    reg51=reg312+reg51; reg215=reg310+reg215; reg241=reg243+reg241; reg245=reg248+reg245; reg166=2*reg338;
    reg124=reg121+reg124; reg232=reg232+reg231; reg75=reg224+reg75; reg183=reg184+reg183; reg190=reg192+reg190;
    reg129=reg127+reg129; reg321=reg318+reg321; reg41=reg194+reg41; reg395=reg407+reg395; reg121=2*reg83;
    reg127=2*reg34; reg361=reg336+reg361; reg151=reg95+reg151; reg453=reg178+reg453; reg157=reg256+reg157;
    reg365=reg363+reg365; reg366=reg368+reg366; reg411=reg450+reg411; reg299=reg237+reg299; reg268=reg331+reg268;
    reg269=reg204+reg269; reg400=reg399+reg400; reg171=2*reg405; reg178=elem.pos(0)[0]*reg105; reg184=2*reg228;
    reg147=reg222+reg147; reg192=reg72*reg40; reg240=reg200+reg240; reg265=reg402+reg265; reg364=reg48+reg364;
    reg294=reg235+reg294; reg370=reg258+reg370; reg28=reg290+reg28; reg210=reg417+reg210; reg434=reg197+reg434;
    reg48=reg18*reg37; reg378=reg414+reg378; reg194=reg9*reg40; reg452=reg412+reg452; reg197=reg62*reg136;
    reg143=reg229+reg143; reg200=elem.pos(0)[2]*reg105; reg204=2*reg449; reg254=reg408+reg254; reg41=reg56+reg41;
    reg409=reg410+reg409; reg175=reg266+reg175; reg161=reg381+reg161; reg209=2*reg458; reg344=reg347+reg344;
    reg435=reg432+reg435; reg216=elem.pos(0)[0]*reg82; reg276=reg292+reg276; reg222=reg11*reg40; reg235=elem.pos(0)[1]*reg105;
    reg237=2*reg448; reg243=reg60*reg39; reg357=reg201+reg357; reg418=reg419+reg418; reg443=reg108+reg443;
    reg460=reg459+reg460; reg270=reg426+reg270; reg108=2*reg213; reg129=reg124+reg129; reg462=reg461+reg462;
    reg316=reg219+reg316; reg319=reg295+reg319; reg333=reg329+reg333; reg374=reg296+reg374; reg156=reg140+reg156;
    reg124=2*reg260; reg390=reg386+reg390; reg251=reg36+reg251; reg36=2*reg272; reg186=reg42+reg186;
    reg393=reg375+reg393; reg71=reg49+reg71; reg322=reg308+reg322; reg42=2*reg298; reg49=2*reg27;
    reg372=reg244+reg372; reg367=reg146+reg367; reg115=reg242+reg115; reg392=reg274+reg392; reg140=reg25*reg39;
    reg146=elem.pos(0)[2]*reg82; reg201=elem.pos(0)[1]*reg82; reg353=reg354+reg353; reg104=reg97+reg104; reg421=reg273+reg421;
    reg126=reg117+reg126; reg169=reg376+reg169; reg97=2*reg300; reg117=2*reg454; reg219=2*reg96;
    reg394=reg106+reg394; reg203=reg199+reg203; reg286=reg355+reg286; reg177=reg31+reg177; reg264=reg352+reg264;
    reg199=2*reg182; reg244=2*reg440; reg74=reg195+reg74; reg92=reg430+reg92; reg173=reg167+reg173;
    reg325=reg351+reg325; reg285=reg283+reg285; reg262=reg406+reg262; reg148=reg130+reg148; reg323=reg165+reg323;
    reg130=2*reg218; reg119=reg109+reg119; reg226=reg91+reg226; reg193=reg59+reg193; reg236=reg134+reg236;
    reg230=reg61+reg230; reg59=2*reg180; reg315=reg304+reg315; reg61=2*reg255; reg114=reg100+reg114;
    reg91=2*reg321; reg360=reg131+reg360; reg109=2*reg257; reg275=reg278+reg275; reg345=reg345+reg404;
    reg202=reg89+reg202; reg89=2*reg456; reg424=reg425+reg424; reg185=reg179+reg185; reg335=reg205+reg335;
    reg391=reg120+reg391; reg451=reg341+reg451; reg239=reg397+reg239; reg398=reg396+reg398; reg131=reg6*reg136;
    reg160=reg94+reg160; reg343=reg263+reg343; reg346=reg348+reg346; reg181=reg198+reg181; reg227=reg261+reg227;
    reg94=reg24*reg39; reg415=reg413+reg415; reg438=reg416+reg438; reg439=reg420+reg439; reg70=reg289+reg70;
    reg233=reg238+reg233; reg279=reg137+reg279; reg38=reg163+reg38; reg88=reg225+reg88; reg465=reg305+reg465;
    reg168=reg170+reg168; reg134=2*reg220; reg215=reg51+reg215; reg137=2*reg259; reg207=reg401+reg207;
    reg350=reg271+reg350; reg183=reg190+reg183; reg163=elem.pos(0)[1]*reg33; reg463=reg436+reg463; reg206=reg429+reg206;
    reg141=reg433+reg141; reg165=2*reg437; reg167=2*reg356; reg170=2*reg441; reg324=reg358+reg324;
    reg179=reg2*reg37; reg188=reg320+reg188; reg195=2*reg93; reg267=reg326+reg267; reg198=reg0*reg14;
    reg123=reg221+reg123; reg464=reg379+reg464; reg205=reg8*reg14; reg221=elem.pos(0)[0]*reg33; reg166=reg338+reg166;
    reg362=reg208+reg362; reg172=reg388+reg172; reg387=reg380+reg387; reg457=reg46+reg457; reg389=reg385+reg389;
    reg288=reg383+reg288; reg384=reg382+reg384; reg152=reg377+reg152; reg223=reg144+reg223; reg293=reg252+reg293;
    reg174=reg311+reg174; reg46=2*reg44; reg208=2*reg280; reg225=reg4*reg37; reg455=reg247+reg455;
    reg238=reg1*reg14; reg246=reg342+reg246; reg247=elem.pos(0)[2]*reg33; reg232=reg231+reg232; reg75=reg224+reg75;
    reg142=reg253+reg142; reg65=reg149+reg65; reg442=reg250+reg442; reg327=reg334+reg327; reg446=reg445+reg446;
    reg282=reg78+reg282; reg211=reg447+reg211; reg444=reg427+reg444; reg78=reg7*reg136; reg330=reg281+reg330;
    reg328=reg187+reg328; reg291=reg428+reg291; reg332=reg359+reg332; reg191=reg164+reg191; reg164=2*reg340;
    reg339=reg145+reg339; reg337=reg373+reg337; reg35=reg303+reg35; reg67=reg313+reg67; reg69=reg277+reg69;
    reg371=reg302+reg371; reg287=reg214+reg287; reg58=reg53+reg58; reg153=reg212+reg153; reg103=reg128+reg103;
    reg53=2*reg234; reg135=reg64+reg135; reg217=reg55+reg217; reg162=reg158+reg162; reg55=2*reg249;
    reg64=2*reg189; reg155=reg159+reg155; reg128=2*reg176; reg241=reg245+reg241; reg431=reg196+reg431;
    reg102=reg107+reg102; reg314=reg317+reg314; reg154=reg150+reg154; reg423=reg422+reg423; reg306=reg284+reg306;
    reg45=reg63+reg45; reg63=elem.pos(0)[2]*reg40; reg343=reg263+reg343; reg346=reg348+reg346; reg107=reg11*reg105;
    reg439=reg438+reg439; reg150=elem.pos(0)[2]*reg39; reg158=reg24*reg13; reg217=reg217/2; reg181=reg227+reg181;
    reg339=reg145+reg339; reg146=reg146+reg94; reg145=2*reg415; reg24=reg24*reg82; reg164=reg340+reg164;
    reg187=reg8*reg13; reg196=elem.pos(0)[0]*reg14; reg151=reg95+reg151; reg287=0.5*reg287; reg95=2*reg463;
    reg463=4*reg463; reg141=reg206+reg141; reg165=reg437+reg165; reg167=reg356+reg167; reg69=reg69/2;
    reg170=reg441+reg170; reg324=reg188+reg324; reg64=reg189+reg64; reg67=reg371+reg67; reg188=2*reg179;
    reg35=reg303+reg35; reg189=2*reg464; reg212=2*reg147; reg214=2*reg239; reg398=reg267+reg398;
    reg224=2*reg156; reg227=2*reg131; reg231=2*reg160; reg229=reg143+reg229; reg143=2*reg78;
    reg200=reg194+reg200; reg204=reg449+reg204; reg254=reg175+reg254; reg121=reg83+reg121; reg395=reg409+reg395;
    reg127=reg34+reg127; reg211=reg446+reg211; reg34=reg72*reg105; reg83=2*reg361; reg319=reg319/2;
    reg155=reg159+reg155; reg365=reg363+reg365; reg327=reg327/2; reg366=reg368+reg366; reg159=2*reg411;
    reg245=2*reg268; reg269=reg400+reg269; reg248=reg1*reg33; reg134=reg220+reg134; reg220=reg9*reg13;
    reg322=reg251+reg322; reg250=2*reg191; reg42=reg298+reg42; reg191=4*reg191; reg168=reg70+reg168;
    reg162=reg162/2; reg465=reg279+reg465; reg104=0.5*reg104; reg265=reg402+reg265; reg70=2*reg328;
    reg370=reg258+reg370; reg282=0.5*reg282; reg251=2*reg28; reg252=2*reg210; reg210=4*reg210;
    reg253=2*reg330; reg256=2*reg48; reg258=2*reg378; reg261=2*reg452; reg263=2*reg197;
    reg316=reg316/2; reg173=0.5*reg173; reg115=reg242+reg115; reg262=reg207+reg262; reg455=reg246+reg455;
    reg71=0.5*reg71; reg195=reg93+reg195; reg184=reg228+reg184; reg55=reg249+reg55; reg299=reg453+reg299;
    reg454=reg117+reg454; reg93=2*reg294; reg117=2*reg364; reg123=reg88+reg123; reg208=reg280+reg208;
    reg148=0.5*reg148; reg163=reg198+reg163; reg46=reg44+reg46; reg177=reg31+reg177; reg31=2*reg126;
    reg44=2*reg174; reg88=2*reg202; reg207=2*reg306; reg391=reg120+reg391; reg275=reg424+reg275;
    reg120=2*reg421; reg65=reg149+reg65; reg315=reg315/2; reg142=reg442+reg142; reg119=0.5*reg119;
    reg185=reg185/2; reg91=reg321+reg91; reg75=reg232+reg75; reg149=2*reg314; reg183=reg190+reg183;
    reg41=reg56+reg41; reg247=reg238+reg247; reg137=reg259+reg137; reg186=0.5*reg186; reg129=reg129/2;
    reg219=reg96+reg219; reg286=reg355+reg286; reg108=reg213+reg108; reg56=2*reg443; reg96=2*reg451;
    reg169=reg335+reg169; reg97=reg300+reg97; reg38=reg233+reg38; reg190=2*reg172; reg394=reg106+reg394;
    reg203=0.5*reg203; reg106=2*reg264; reg213=reg8*reg33; reg199=reg182+reg199; reg244=reg440+reg244;
    reg215=reg51+reg215; reg53=reg234+reg53; reg92=reg74+reg92; reg325=reg325/2; reg241=reg241/2;
    reg161=reg157+reg161; reg153=reg362+reg153; reg323=reg285+reg323; reg58=0.5*reg58; reg350=reg271+reg350;
    reg154=0.5*reg154; reg51=reg0*reg33; reg157=elem.pos(0)[1]*reg14; reg59=reg180+reg59; reg193=reg193/2;
    reg223=reg144+reg223; reg130=reg218+reg130; reg144=reg0*reg13; reg152=reg293+reg152; reg236=reg226+reg236;
    reg230=reg360+reg230; reg61=reg255+reg61; reg384=reg389+reg384; reg114=reg100+reg114; reg45=reg102+reg45;
    reg221=reg205+reg221; reg100=2*reg166; reg109=reg257+reg109; reg345=reg404+reg345; reg102=2*reg457;
    reg135=0.5*reg135; reg89=reg456+reg89; reg387=reg380+reg387; reg180=reg25*reg82; reg390=reg386+reg390;
    reg182=reg60*reg13; reg124=reg260+reg124; reg218=elem.pos(0)[0]*reg39; reg228=elem.pos(0)[2]*reg14; reg178=reg192+reg178;
    reg232=reg1*reg13; reg393=reg372+reg393; reg72=reg72*reg13; reg332=reg337+reg332; reg60=reg60*reg82;
    reg233=2*reg418; reg234=elem.pos(0)[0]*reg40; reg242=elem.pos(0)[1]*reg40; reg374=reg296+reg374; reg249=2*reg423;
    reg11=reg11*reg13; reg270=reg357+reg270; reg344=reg353+reg344; reg36=reg272+reg36; reg435=reg432+reg435;
    reg462=reg460+reg462; reg209=reg458+reg209; reg333=reg329+reg333; reg128=reg176+reg128; reg431=reg434+reg431;
    reg392=reg367+reg392; reg176=elem.pos(0)[1]*reg39; reg25=reg25*reg13; reg255=2*reg240; reg257=2*reg444;
    reg259=2*reg276; reg49=reg27+reg49; reg235=reg222+reg235; reg291=reg428+reg291; reg171=reg405+reg171;
    reg103=reg288+reg103; reg237=reg448+reg237; reg216=reg243+reg216; reg27=2*reg225; reg201=reg140+reg201;
    reg9=reg9*reg105; reg31=reg126+reg31; reg216=reg243+reg216; reg187=reg196+reg187; reg44=reg174+reg44;
    reg126=2*reg454; reg88=reg202+reg88; reg174=2*reg24; reg196=2*reg51; reg435=0.5*reg435;
    reg255=reg240+reg255; reg117=reg364+reg117; reg455=reg246+reg455; reg193=reg345+reg193; reg145=reg415+reg145;
    reg144=reg157+reg144; reg223=0.5*reg223; reg390=0.5*reg390; reg130=reg59+reg130; reg210=reg252+reg210;
    reg27=reg225+reg27; reg70=reg328+reg70; reg282=reg282/3; reg168=reg168/2; reg123=reg123/2;
    reg191=reg250+reg191; reg370=0.5*reg370; reg93=reg294+reg93; reg299=reg299/2; reg220=reg63+reg220;
    reg291=0.5*reg291; reg148=reg148/3; reg59=2*reg60; reg46=reg208+reg46; reg184=0.16666666666666666667*reg184;
    reg251=reg28+reg251; reg439=reg438+reg439; reg265=0.5*reg265; reg177=0.5*reg177; reg465=reg465/2;
    reg203=reg203/3; reg398=reg398/2; reg214=reg239+reg214; reg28=2*reg180; reg190=reg172+reg190;
    reg189=reg464+reg189; reg103=reg103/2; reg67=reg67/2; reg106=reg264+reg106; reg188=reg179+reg188;
    reg63=2*reg213; reg244=reg199+reg244; reg53=0.16666666666666666667*reg53; reg201=reg140+reg201; reg170=reg167+reg170;
    reg92=reg74+reg92; reg325=reg324+reg325; reg69=reg35+reg69; reg392=reg367+reg392; reg153=reg362+reg153;
    reg35=2*reg165; reg323=reg323/2; reg463=reg95+reg463; reg58=reg58/3; reg25=reg176+reg25;
    reg141=reg206+reg141; reg287=reg287/3; reg350=0.5*reg350; reg146=reg94+reg146; reg74=2*reg209;
    reg152=reg152/2; reg236=reg226+reg236; reg339=0.5*reg339; reg158=reg150+reg158; reg181=reg181/2;
    reg230=reg230/2; reg384=reg384/2; reg344=reg344/2; reg94=2*reg61; reg346=0.5*reg346;
    reg36=reg124+reg36; reg249=reg423+reg249; reg114=0.5*reg114; reg102=reg457+reg102; reg11=reg242+reg11;
    reg89=reg109+reg89; reg164=0.16666666666666666667*reg164; reg343=0.5*reg343; reg387=0.5*reg387; reg96=reg451+reg96;
    reg393=reg393/2; reg231=reg160+reg231; reg97=0.16666666666666666667*reg97; reg169=reg169/2; reg227=reg131+reg227;
    reg72=reg234+reg72; reg394=0.5*reg394; reg374=0.5*reg374; reg333=0.5*reg333; reg286=0.5*reg286;
    reg151=0.5*reg151; reg159=reg411+reg159; reg200=reg194+reg200; reg143=reg78+reg143; reg149=reg314+reg149;
    reg78=2*reg204; reg219=0.16666666666666666667*reg219; reg154=reg154/3; reg95=2*reg128; reg462=reg462/2;
    reg120=reg421+reg120; reg212=reg147+reg212; reg229=0.5*reg229; reg207=reg306+reg207; reg224=reg156+reg224;
    reg64=0.16666666666666666667*reg64; reg65=0.5*reg65; reg245=reg268+reg245; reg270=reg270/2; reg83=reg361+reg83;
    reg233=reg418+reg233; reg215=0.5*reg215; reg38=reg38/2; reg135=reg135/3; reg241=reg45+reg241;
    reg45=2*reg34; reg221=reg205+reg221; reg395=reg395/2; reg327=reg332+reg327; reg100=reg166+reg100;
    reg121=reg127+reg121; reg163=reg198+reg163; reg161=reg161/2; reg365=0.5*reg365; reg55=0.16666666666666666667*reg55;
    reg262=reg262/2; reg178=reg192+reg178; reg109=2*reg9; reg124=2*reg107; reg173=reg173/3;
    reg254=reg175+reg254; reg366=0.5*reg366; reg247=reg238+reg247; reg182=reg218+reg182; reg261=reg452+reg261;
    reg186=reg186/3; reg104=reg104/3; reg137=reg171+reg137; reg258=reg378+reg258; reg49=reg237+reg49;
    reg253=reg330+reg253; reg129=reg183+reg129; reg127=2*reg248; reg235=reg222+reg235; reg108=0.16666666666666666667*reg108;
    reg256=reg48+reg256; reg217=reg211+reg217; reg56=reg443+reg56; reg316=reg41+reg316; reg431=reg434+reg431;
    reg134=0.16666666666666666667*reg134; reg115=0.5*reg115; reg319=reg322+reg319; reg71=reg71/3; reg195=0.16666666666666666667*reg195;
    reg259=reg276+reg259; reg315=reg275+reg315; reg269=reg269/2; reg119=reg119/3; reg42=0.16666666666666666667*reg42;
    reg142=reg142/2; reg257=reg444+reg257; reg75=reg75/2; reg185=reg391+reg185; reg91=0.16666666666666666667*reg91;
    reg162=reg155+reg162; reg263=reg197+reg263; reg232=reg228+reg232; reg64=reg64/4; reg169=reg89+reg169;
    reg41=elem.pos(0)[1]*reg13; reg350=reg350/3; reg38=reg221+reg38; reg374=reg374/3; reg28=reg180+reg28;
    reg42=reg42/4; reg151=reg151/3; reg212=0.16666666666666666667*reg212; reg25=reg25/2; reg203=reg325+reg203;
    reg53=reg53/4; reg161=reg224+reg161; reg431=0.5*reg431; reg49=reg49/2; reg346=reg346/3;
    reg244=reg244/2; reg190=0.16666666666666666667*reg190; reg104=reg316+reg104; reg58=reg69+reg58; reg201=0.5*reg201;
    reg63=reg213+reg63; reg323=reg92+reg323; reg394=reg394/3; reg124=reg107+reg124; reg154=reg241+reg154;
    reg106=0.16666666666666666667*reg106; reg95=reg128+reg95; reg196=reg51+reg196; reg435=reg435/3; reg65=reg65/3;
    reg88=0.16666666666666666667*reg88; reg270=reg235+reg270; reg44=0.16666666666666666667*reg44; reg177=reg177/3; reg75=reg247+reg75;
    reg119=reg315+reg119; reg59=reg60+reg59; reg142=reg207+reg142; reg148=reg193+reg148; reg91=reg91/4;
    reg123=reg93+reg123; reg126=reg454+reg126; reg182=reg182/2; reg186=reg185+reg186; reg216=0.5*reg216;
    reg137=reg137/2; reg184=reg184/4; reg108=reg108/4; reg56=0.16666666666666666667*reg56; reg299=reg117+reg299;
    reg195=reg195/4; reg115=reg115/3; reg259=0.16666666666666666667*reg259; reg455=0.5*reg455; reg71=reg129+reg71;
    reg233=0.16666666666666666667*reg233; reg97=reg97/4; reg215=reg215/3; reg96=0.16666666666666666667*reg96; reg135=reg162+reg135;
    reg387=reg387/3; reg48=elem.pos(0)[0]*reg13; reg100=0.16666666666666666667*reg100; reg392=0.5*reg392; reg249=0.16666666666666666667*reg249;
    reg114=reg114/3; reg149=0.16666666666666666667*reg149; reg55=reg55/4; reg333=reg333/3; reg94=reg61+reg94;
    reg319=reg173+reg319; reg262=reg163+reg262; reg384=reg102+reg384; reg230=reg31+reg230; reg344=reg11+reg344;
    reg152=reg46+reg152; reg286=reg286/3; reg236=0.5*reg236; reg74=reg209+reg74; reg219=reg219/4;
    reg130=reg130/2; reg462=reg232+reg462; reg223=reg223/3; reg120=0.16666666666666666667*reg120; reg255=0.16666666666666666667*reg255;
    reg343=reg343/3; reg210=0.16666666666666666667*reg210; reg11=2*reg256; reg164=reg164/4; reg253=reg70+reg253;
    reg231=0.16666666666666666667*reg231; reg261=reg258+reg261; reg31=2*reg263; reg46=2*reg227; reg214=reg189+reg214;
    reg398=reg170+reg398; reg229=reg229/3; reg103=reg144+reg103; reg67=reg153+reg67; reg78=reg204+reg78;
    reg51=2*reg188; reg254=0.5*reg254; reg60=2*reg143; reg146=0.5*reg146; reg145=0.16666666666666666667*reg145;
    reg339=reg339/3; reg174=reg24+reg174; reg158=reg158/2; reg181=reg187+reg181; reg191=0.16666666666666666667*reg191;
    reg24=elem.pos(0)[2]*reg13; reg61=2*reg27; reg168=reg439+reg168; reg465=reg220+reg465; reg36=reg36/2;
    reg282=reg327+reg282; reg390=reg390/3; reg265=reg265/3; reg370=reg370/3; reg291=reg291/3;
    reg251=0.16666666666666666667*reg251; reg393=reg72+reg393; reg159=0.16666666666666666667*reg159; reg463=0.16666666666666666667*reg463; reg366=reg366/3;
    reg365=reg365/3; reg269=reg178+reg269; reg395=reg200+reg395; reg257=0.16666666666666666667*reg257; reg35=reg165+reg35;
    reg287=reg217+reg287; reg109=reg9+reg109; reg83=0.16666666666666666667*reg83; reg245=0.16666666666666666667*reg245; reg45=reg34+reg45;
    reg127=reg248+reg127; reg134=reg134/4; reg121=reg121/2; reg141=0.5*reg141; reg159=reg159/4;
    reg366=reg395+reg366; reg212=reg212/4; reg333=reg270+reg333; reg339=reg67+reg339; reg390=reg393+reg390;
    reg455=reg455/3; reg265=reg465+reg265; reg184=reg71+reg184; reg177=reg123+reg177; reg257=reg257/4;
    reg145=reg145/4; reg59=0.16666666666666666667*reg59; reg64=reg154+reg64; reg61=reg27+reg61; reg374=reg462+reg374;
    reg223=reg384+reg223; reg435=reg344+reg435; reg42=reg104+reg42; reg148=reg134+reg148; reg49=reg124+reg49;
    reg174=0.16666666666666666667*reg174; reg126=0.16666666666666666667*reg126; reg216=reg216/3; reg191=reg191/4; reg44=reg44/4;
    reg245=reg245/4; reg133=0.5*reg133; reg91=reg119+reg91; reg95=0.16666666666666666667*reg95; reg65=reg75+reg65;
    reg116=reg116/2; reg83=reg83/4; reg120=reg120/4; reg215=reg161+reg215; reg142=reg229+reg142;
    reg286=reg262+reg286; reg111=reg111/2; reg219=reg319+reg219; reg112=0.5*reg112; reg78=0.16666666666666666667*reg78;
    reg100=reg100/4; reg254=reg254/3; reg149=reg149/4; reg55=reg135+reg55; reg121=reg45+reg121;
    reg60=reg143+reg60; reg251=reg251/4; reg151=reg38+reg151; reg431=reg431/3; reg88=reg88/4;
    reg259=reg259/4; reg115=reg299+reg115; reg195=reg287+reg195; reg255=reg255/4; reg56=reg56/4;
    reg108=reg186+reg108; reg11=reg256+reg11; reg137=reg127+reg137; reg365=reg269+reg365; reg253=reg253/2;
    reg182=reg48+reg182; reg233=reg233/4; reg261=reg261/2; reg291=reg103+reg291; reg31=reg263+reg31;
    reg141=reg141/3; reg236=reg236/3; reg35=0.16666666666666666667*reg35; reg36=reg109+reg36; reg370=reg168+reg370;
    reg214=reg214/2; reg25=reg41+reg25; reg94=0.16666666666666666667*reg94; reg28=0.16666666666666666667*reg28; reg463=reg463/4;
    reg249=reg249/4; reg392=reg392/3; reg114=reg230+reg114; reg343=reg181+reg343; reg387=reg152+reg387;
    reg106=reg106/4; reg201=reg201/3; reg96=reg96/4; reg244=reg63+reg244; reg164=reg282+reg164;
    reg53=reg58+reg53; reg46=reg227+reg46; reg231=reg231/4; reg97=reg203+reg97; reg210=reg210/4;
    reg146=reg146/3; reg130=reg196+reg130; reg350=reg323+reg350; reg74=0.16666666666666666667*reg74; reg9=reg87/2;
    reg346=reg398+reg346; reg51=reg188+reg51; reg158=reg24+reg158; reg190=reg190/4; reg394=reg169+reg394;
    reg24=0.5*reg122; reg233=reg333+reg233; reg191=reg339+reg191; reg195=reg195/2; reg27=reg46/3;
    reg431=reg49+reg431; reg106=reg394+reg106; reg59=reg59/4; reg101=reg111+reg101; reg259=reg435+reg259;
    reg28=reg28/4; reg210=reg370+reg210; reg145=reg346+reg145; reg177=reg88+reg177; reg55=0.5*reg55;
    reg148=0.5*reg148; reg174=reg174/4; reg100=reg215+reg100; reg68=reg68/2; reg463=reg350+reg463;
    reg74=reg74/4; reg97=reg97/2; reg231=reg343+reg231; reg261=reg11+reg261; reg253=reg61+reg253;
    reg53=0.5*reg53; reg251=reg265+reg251; reg146=reg158+reg146; reg83=reg365+reg83; reg24=reg24/3;
    reg90=0.5*reg90; reg91=reg91/2; reg108=0.5*reg108; reg245=reg366+reg245; reg11=reg31/3;
    reg219=reg219/2; reg56=reg115+reg56; reg96=reg114+reg96; reg255=reg390+reg255; reg141=reg244+reg141;
    reg85=reg116+reg85; reg34=reg139/2; reg214=reg51+reg214; reg132=0.5*reg132; reg84=reg84/2;
    reg35=reg35/4; reg120=reg286+reg120; reg78=reg78/4; reg9=reg9+reg30; reg113=0.5*reg113;
    reg164=reg164/2; reg201=reg25+reg201; reg126=reg126/4; reg25=reg60/3; reg44=reg223+reg44;
    reg112=reg112/3; reg216=reg182+reg216; reg236=reg130+reg236; reg133=reg133/3; reg42=0.5*reg42;
    reg249=reg374+reg249; reg254=reg121+reg254; reg64=reg64/2; reg392=reg36+reg392; reg184=0.5*reg184;
    reg149=reg65+reg149; reg455=reg137+reg455; reg159=reg142+reg159; reg36=reg136/2; reg95=reg95/4;
    reg32=reg32/2; reg38=0.5*reg110; reg94=reg94/4; reg190=reg387+reg190; reg257=reg291+reg257;
    reg212=reg151+reg212; reg91=reg120+reg91; reg212=reg219+reg212; reg25=reg253+reg25; reg95=reg431+reg95;
    reg112=reg101+reg112; reg190=reg190/2; reg78=reg254+reg78; reg11=reg261+reg11; reg100=0.16666666666666666667*reg100;
    reg55=reg55/3; reg90=reg90/3; reg164=reg249+reg164; reg463=0.5*reg463; reg184=reg184/3;
    reg159=0.16666666666666666667*reg159; reg94=reg236+reg94; reg82=0.5*reg82; reg35=reg141+reg35; reg132=reg132/3;
    reg84=reg105+reg84; reg39=reg39/2; reg113=reg113/3; reg40=reg32+reg40; reg126=reg455+reg126;
    reg44=0.16666666666666666667*reg44; reg42=reg42/3; reg24=reg9+reg24; reg133=reg85+reg133; reg174=reg146+reg174;
    reg59=reg216+reg59; reg34=reg34+reg33; reg245=0.5*reg245; reg148=reg148/3; reg64=reg149+reg64;
    reg38=reg38/3; reg145=reg145/2; reg74=reg392+reg74; reg83=0.5*reg83; reg255=reg255/2;
    reg191=0.5*reg191; reg251=reg251/2; reg97=reg231+reg97; reg195=reg257+reg195; reg36=reg36+reg37;
    reg53=reg53/3; reg96=0.16666666666666666667*reg96; reg108=reg108/3; reg56=0.16666666666666666667*reg56; reg233=0.5*reg233;
    reg14=reg68+reg14; reg28=reg201+reg28; reg177=0.16666666666666666667*reg177; reg259=reg259/2; reg210=0.5*reg210;
    reg27=reg214+reg27; reg106=reg106/2; reg36=0.5*reg36; reg106=reg94+reg106; reg90=reg14+reg90;
    reg463=reg463/3; reg42=reg195+reg42; reg25=0.16666666666666666667*reg25; reg13=reg39+reg13; reg245=reg245/3;
    reg159=reg159/4; reg82=reg82/3; reg83=reg83/3; reg100=reg100/4; reg96=reg96/4;
    reg190=reg126+reg190; reg95=0.16666666666666666667*reg95; reg11=0.16666666666666666667*reg11; reg255=reg59+reg255; reg251=reg174+reg251;
    reg191=reg191/3; reg53=reg164+reg53; reg56=reg56/4; reg259=reg28+reg259; reg210=reg210/3;
    reg27=0.16666666666666666667*reg27; reg184=reg91+reg184; reg44=reg44/4; reg97=reg148+reg97; reg132=reg84+reg132;
    reg113=reg40+reg113; reg233=reg233/3; reg133=0.5*reg133; reg108=reg212+reg108; reg74=0.16666666666666666667*reg74;
    reg177=reg177/4; reg145=reg35+reg145; reg38=reg34+reg38; reg55=reg64+reg55; reg24=reg24/2;
    reg112=reg112/2; reg78=0.16666666666666666667*reg78; reg190=reg191+reg190; reg96=reg108+reg96; reg210=reg145+reg210;
    reg44=reg53+reg44; reg24=reg38+reg24; reg112=reg90+reg112; reg27=reg27/4; reg74=reg74/4;
    reg36=reg36/3; reg25=reg25/4; reg82=reg13+reg82; reg133=reg133/3; reg78=reg78/4;
    reg259=reg233+reg259; reg132=0.5*reg132; reg113=reg113/2; reg245=reg251+reg245; reg95=reg95/4;
    reg11=reg11/4; reg83=reg255+reg83; reg177=reg184+reg177; reg100=reg42+reg100; reg463=reg106+reg463;
    reg56=reg97+reg56; reg55=reg159+reg55; reg190=reg25+reg190; reg113=reg82+reg113; reg78=reg83+reg78;
    reg44=reg44/2; reg36=reg24+reg36; reg96=0.5*reg96; reg56=reg56/2; reg177=0.5*reg177;
    reg11=reg210+reg11; reg100=reg100/2; reg95=reg259+reg95; reg132=reg132/3; reg133=reg112+reg133;
    reg55=0.5*reg55; reg27=reg463+reg27; reg74=reg245+reg74; reg36=0.5*reg36; reg133=reg133/2;
    reg55=reg55/3; reg74=reg44+reg74; reg78=reg56+reg78; reg11=0.16666666666666666667*reg11; reg190=0.16666666666666666667*reg190;
    reg27=0.16666666666666666667*reg27; reg113=reg132+reg113; reg100=reg95+reg100; reg177=reg177/3; reg96=reg96/3;
    reg177=reg100+reg177; reg36=reg36/3; reg133=reg113+reg133; reg11=reg11/4; reg96=reg78+reg96;
    reg27=reg27/4; reg190=reg190/4; reg55=reg74+reg55; reg190=reg55+reg190; reg36=reg133+reg36;
    reg11=reg96+reg11; reg27=reg177+reg27; res[2]=reg190/reg36; res[0]=reg11/reg36; res[1]=reg27/reg36;

    return res;
}
}
#endif // LMT_HEXA
