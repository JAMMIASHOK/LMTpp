#ifndef LMT_HEXA
#define LMT_HEXA
namespace LMT {
inline const double *gauss_point_for_order(unsigned order, const Hexa &elem) { /// order -> degre du polynome a integrer exactement
    static const unsigned offset[] = { 0, 33, 66, 99, 132, 269, 406, 543, 680, 817, }; // fonction de lordre du poly
    static const double values[] = {
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.0,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.0,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.0,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
    };
    return values + offset[order];
}
template<class TNode> void permutation_if_jac_neg(const Hexa &elem,TNode **nodes) {
    typedef typename TNode::T T;
    T reg0=0.25*nodes[1]->pos[2]; T reg1=0.25*nodes[0]->pos[2]; T reg2=0.25*nodes[1]->pos[1]; T reg3=0.25*nodes[0]->pos[1]; T reg4=reg0-reg1;
    T reg5=reg2-reg3; T reg6=0.25*nodes[2]->pos[1]; reg2=reg3+reg2; reg3=0.25*nodes[2]->pos[2]; reg0=reg1+reg0;
    reg1=reg6-reg2; reg2=reg6+reg2; T reg7=0.25*nodes[3]->pos[1]; T reg8=0.25*nodes[1]->pos[0]; T reg9=0.25*nodes[0]->pos[0];
    T reg10=reg3-reg0; T reg11=0.25*nodes[3]->pos[2]; reg0=reg0+reg3; reg5=reg6+reg5; reg4=reg3+reg4;
    reg3=0.25*nodes[4]->pos[1]; reg0=reg0+reg11; reg1=reg1+reg7; reg6=0.25*nodes[4]->pos[2]; reg4=reg4-reg11;
    reg10=reg11+reg10; reg2=reg7+reg2; reg11=reg8+reg9; reg9=reg8-reg9; reg8=0.25*nodes[2]->pos[0];
    reg7=reg5-reg7; reg4=reg4-reg6; reg7=reg7-reg3; reg5=0.25*nodes[3]->pos[0]; reg9=reg9+reg8;
    reg0=reg6-reg0; T reg12=0.25*nodes[5]->pos[2]; reg2=reg3-reg2; reg6=reg10-reg6; reg10=reg8-reg11;
    T reg13=0.25*nodes[5]->pos[1]; reg3=reg1-reg3; reg11=reg8+reg11; reg1=0.25*nodes[4]->pos[0]; reg9=reg9-reg5;
    reg7=reg13+reg7; reg4=reg12+reg4; reg2=reg13+reg2; reg10=reg5+reg10; reg8=0.25*nodes[6]->pos[1];
    reg13=reg3-reg13; reg0=reg0+reg12; reg3=0.25*nodes[6]->pos[2]; reg12=reg6-reg12; reg6=0.25*nodes[7]->pos[2];
    reg2=reg8+reg2; reg4=reg3+reg4; reg0=reg0+reg3; T reg14=0.25*nodes[5]->pos[0]; reg10=reg10-reg1;
    reg12=reg3+reg12; reg9=reg9-reg1; reg7=reg8+reg7; reg5=reg11+reg5; reg8=reg13+reg8;
    reg3=0.25*nodes[7]->pos[1]; reg7=reg7-reg3; reg10=reg10-reg14; reg4=reg4-reg6; reg8=reg8+reg3;
    reg0=reg0+reg6; reg12=reg6+reg12; reg2=reg3+reg2; reg5=reg1-reg5; reg1=0.25*nodes[6]->pos[0];
    reg9=reg9+reg14; reg9=reg9+reg1; reg3=reg8*reg0; reg6=0.25*nodes[7]->pos[0]; reg11=reg2*reg4;
    reg2=reg12*reg2; reg10=reg1+reg10; reg0=reg0*reg7; reg14=reg5+reg14; reg7=reg12*reg7;
    reg2=reg3-reg2; reg1=reg14+reg1; reg9=reg9-reg6; reg4=reg8*reg4; reg11=reg0-reg11;
    reg10=reg10+reg6; reg6=reg1+reg6; reg4=reg7-reg4; reg9=reg2*reg9; reg11=reg10*reg11;
    reg4=reg6*reg4; reg11=reg9-reg11; T det_jac=reg11+reg4;

    if ( det_jac < 0 ) {
        TNode *tmp[] = {nodes[0],nodes[3],nodes[2],nodes[1],nodes[4],nodes[7],nodes[6],nodes[5]};
        for(unsigned i=0;i<8;++i) nodes[i] = tmp[i];
    }
}
template<class PosNodes,class Pvec,class TVI> void get_var_inter_linear(const Hexa &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=1-var_inter[2]; T reg3=reg2*var_inter[0]; T reg4=reg2*reg0;
    T reg5=reg1*reg0; T reg6=reg1*var_inter[0]; T reg7=pos_nodes[1][1]*reg3; T reg8=pos_nodes[0][1]*reg4; T reg9=reg6*pos_nodes[1][1];
    T reg10=pos_nodes[0][2]*reg4; T reg11=pos_nodes[1][2]*reg3; T reg12=pos_nodes[0][1]*reg5; T reg13=reg6*pos_nodes[1][0]; T reg14=pos_nodes[0][0]*reg5;
    T reg15=pos_nodes[1][0]*reg3; T reg16=pos_nodes[0][0]*reg4; T reg17=reg6*pos_nodes[1][2]; T reg18=pos_nodes[0][2]*reg5; T reg19=var_inter[1]*var_inter[0];
    T reg20=pos_nodes[2][2]*reg19; T reg21=pos_nodes[2][1]*reg19; reg12=reg9+reg12; reg8=reg7+reg8; reg18=reg17+reg18;
    reg7=var_inter[1]*reg0; reg9=pos_nodes[2][0]*reg3; reg15=reg16+reg15; reg11=reg10+reg11; reg10=pos_nodes[2][2]*reg3;
    reg13=reg14+reg13; reg14=pos_nodes[2][0]*reg19; reg16=reg2*reg1; reg17=pos_nodes[2][1]*reg3; reg14=reg13+reg14;
    reg8=reg17-reg8; reg13=pos_nodes[3][1]*reg4; reg17=pos_nodes[3][0]*reg7; T reg22=pos_nodes[3][2]*reg7; reg20=reg18+reg20;
    reg18=pos_nodes[3][0]*reg4; reg15=reg9-reg15; reg9=reg16*pos_nodes[1][1]; T reg23=pos_nodes[0][1]*reg16; T reg24=var_inter[2]*reg0;
    reg21=reg12+reg21; reg12=pos_nodes[3][1]*reg7; T reg25=pos_nodes[0][0]*reg16; T reg26=pos_nodes[3][2]*reg4; T reg27=reg16*pos_nodes[1][0];
    reg11=reg10-reg11; reg10=var_inter[1]*reg2; T reg28=var_inter[2]*var_inter[0]; T reg29=reg16*pos_nodes[1][2]; reg25=reg27-reg25;
    reg27=reg10*pos_nodes[2][0]; reg17=reg14+reg17; reg14=reg16*pos_nodes[0][2]; T reg30=pos_nodes[4][0]*reg5; T reg31=pos_nodes[4][2]*reg24;
    reg26=reg11+reg26; reg11=pos_nodes[4][0]*reg24; reg18=reg15+reg18; reg23=reg9-reg23; reg9=reg10*pos_nodes[2][1];
    reg13=reg8+reg13; reg8=pos_nodes[4][1]*reg24; reg15=pos_nodes[4][1]*reg5; reg12=reg21+reg12; reg22=reg20+reg22;
    reg20=pos_nodes[4][2]*reg5; reg21=pos_nodes[5][2]*reg28; reg31=reg26-reg31; reg26=reg2*reg5; reg11=reg18-reg11;
    reg18=pos_nodes[5][0]*reg28; T reg32=reg10*pos_nodes[2][2]; reg14=reg29-reg14; reg17=reg30-reg17; reg29=reg6*pos_nodes[5][0];
    reg30=reg6*pos_nodes[5][1]; reg9=reg23+reg9; reg23=reg10*pos_nodes[3][1]; reg12=reg15-reg12; reg8=reg13-reg8;
    reg13=pos_nodes[5][1]*reg28; reg15=reg6*pos_nodes[5][2]; reg22=reg20-reg22; reg20=reg6*reg2; reg27=reg25+reg27;
    reg25=reg10*pos_nodes[3][0]; T reg33=var_inter[2]*reg1; reg13=reg8-reg13; reg8=pos_nodes[6][2]*reg19; T reg34=reg10*pos_nodes[3][2];
    reg32=reg14+reg32; reg14=reg2*reg19; T reg35=reg33*pos_nodes[4][1]; reg23=reg9-reg23; reg9=reg20*pos_nodes[1][0];
    T reg36=pos_nodes[0][0]*reg26; T reg37=pos_nodes[6][0]*reg19; reg29=reg17+reg29; reg17=pos_nodes[6][0]*reg28; reg18=reg11-reg18;
    reg11=pos_nodes[0][1]*reg26; T reg38=reg20*pos_nodes[1][1]; T reg39=pos_nodes[6][1]*reg19; reg30=reg12+reg30; reg12=pos_nodes[6][2]*reg28;
    reg21=reg31-reg21; reg25=reg27-reg25; reg27=reg33*pos_nodes[4][0]; reg31=pos_nodes[6][1]*reg28; reg15=reg22+reg15;
    reg31=reg13+reg31; reg17=reg18+reg17; reg13=pos_nodes[7][0]*reg24; reg18=pos_nodes[7][1]*reg7; reg39=reg30+reg39;
    reg37=reg29+reg37; reg22=pos_nodes[7][0]*reg7; reg29=pos_nodes[7][1]*reg24; reg8=reg15+reg8; reg11=reg38+reg11;
    reg15=pos_nodes[7][2]*reg7; reg9=reg36+reg9; reg30=pos_nodes[2][0]*reg14; reg36=reg20*pos_nodes[1][2]; reg38=reg26*pos_nodes[0][2];
    T reg40=reg33*pos_nodes[5][1]; reg35=reg23-reg35; reg23=pos_nodes[2][1]*reg14; T reg41=reg33*pos_nodes[4][2]; T reg42=reg2*reg7;
    T reg43=reg33*pos_nodes[5][0]; reg34=reg32-reg34; reg27=reg25-reg27; reg12=reg21+reg12; reg21=pos_nodes[7][2]*reg24;
    reg25=var_inter[1]*var_inter[2]; reg40=reg35+reg40; reg32=pos_nodes[6][1]*reg25; reg35=pos_nodes[2][2]*reg14; reg36=reg38+reg36;
    reg38=var_inter[2]*reg5; reg15=reg8+reg15; reg41=reg34-reg41; reg8=reg33*pos_nodes[5][2]; reg34=pos_nodes[3][1]*reg42;
    T reg44=pos_nodes[3][0]*reg42; reg30=reg9+reg30; reg29=reg31+reg29; reg22=reg37+reg22; reg18=reg39+reg18;
    reg9=reg25*pos_nodes[6][0]; reg21=reg12+reg21; reg13=reg17+reg13; reg43=reg27+reg43; reg23=reg11+reg23;
    reg35=reg36+reg35; reg11=pos_nodes[3][2]*reg42; reg12=reg25*pos_nodes[7][1]; reg32=reg40+reg32; reg17=reg22*reg21;
    reg27=reg15*reg13; reg31=reg18*reg21; reg36=reg15*reg29; reg34=reg23+reg34; reg23=pos_nodes[4][1]*reg38;
    reg8=reg41+reg8; reg37=pos_nodes[6][2]*reg25; reg9=reg43+reg9; reg39=pos_nodes[7][0]*reg25; reg40=pos_nodes[4][0]*reg38;
    reg44=reg30+reg44; reg30=var_inter[2]*reg6; reg41=reg22*reg29; reg43=reg13*reg18; reg11=reg35+reg11;
    reg12=reg32-reg12; reg32=var_inter[2]*reg19; reg17=reg27-reg17; reg39=reg9-reg39; reg23=reg34+reg23;
    reg9=pos_nodes[5][1]*reg30; reg34=pos_nodes[4][2]*reg38; reg31=reg36-reg31; reg40=reg44+reg40; reg35=pos_nodes[5][0]*reg30;
    reg44=reg25*pos_nodes[7][2]; reg37=reg8+reg37; reg44=reg37-reg44; reg8=reg39*reg31; reg9=reg23+reg9;
    reg23=reg17*reg12; reg37=var_inter[2]*reg7; reg35=reg40+reg35; reg40=pos_nodes[6][0]*reg32; T reg45=pos_nodes[6][1]*reg32;
    reg41=reg43-reg41; T reg46=pos_nodes[5][2]*reg30; reg34=reg11+reg34; reg8=reg23-reg8; reg11=reg22*reg44;
    reg23=reg39*reg21; T reg47=reg13*reg44; reg45=reg9+reg45; reg9=reg15*reg12; T reg48=reg41*reg44;
    T reg49=reg18*reg44; T reg50=reg12*reg21; T reg51=pos_nodes[7][1]*reg37; T reg52=reg29*reg44; reg40=reg35+reg40;
    reg35=pos_nodes[7][0]*reg37; T reg53=pos_nodes[6][2]*reg32; reg46=reg34+reg46; reg34=reg39*reg15; reg51=reg45+reg51;
    reg53=reg46+reg53; reg45=reg13*reg12; reg35=reg40+reg35; reg40=pos_nodes[7][2]*reg37; reg11=reg34-reg11;
    reg47=reg23-reg47; reg48=reg8-reg48; reg49=reg9-reg49; reg8=reg39*reg18; reg46=reg22*reg12;
    T reg54=reg39*reg29; reg52=reg50-reg52; reg45=reg54-reg45; reg46=reg8-reg46; reg47=reg47/reg48;
    reg11=reg11/reg48; reg17=reg17/reg48; reg35=pos[0]-reg35; reg40=reg53+reg40; reg31=reg31/reg48;
    reg49=reg49/reg48; reg51=pos[1]-reg51; reg52=reg52/reg48; reg41=reg41/reg48; reg40=pos[2]-reg40;
    reg46=reg46/reg48; reg48=reg45/reg48; reg47=reg47*reg51; reg31=reg31*reg35; reg17=reg17*reg51;
    reg49=reg49*reg35; reg11=reg11*reg51; reg52=reg52*reg35; reg41=reg40*reg41; reg52=reg47-reg52;
    reg31=reg17-reg31; reg46=reg40*reg46; reg11=reg49-reg11; reg48=reg40*reg48; var_inter[2]=reg52-reg48;
    var_inter[0]=reg31-reg41; var_inter[1]=reg46+reg11;

}
template<class PosNodes,class Pvec,class TVI> void get_var_inter(const Hexa &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=1-var_inter[1]; T reg1=1-var_inter[2]; T reg2=1-var_inter[0]; T reg3=reg0*reg2; T reg4=reg2*reg1;
    T reg5=reg1*var_inter[0]; T reg6=reg0*var_inter[0]; T reg7=reg4*pos_nodes[0][0]; T reg8=reg5*pos_nodes[1][0]; T reg9=reg4*pos_nodes[0][2];
    T reg10=pos_nodes[1][2]*reg5; T reg11=reg6*pos_nodes[1][0]; T reg12=pos_nodes[0][0]*reg3; T reg13=pos_nodes[1][2]*reg6; T reg14=pos_nodes[0][2]*reg3;
    T reg15=var_inter[0]*var_inter[1]; T reg16=reg6*pos_nodes[1][1]; T reg17=reg4*pos_nodes[0][1]; T reg18=reg5*pos_nodes[1][1]; T reg19=pos_nodes[0][1]*reg3;
    reg7=reg8+reg7; reg8=pos_nodes[2][0]*reg5; reg9=reg10+reg9; reg10=reg2*var_inter[1]; T reg20=pos_nodes[2][2]*reg5;
    T reg21=reg0*reg1; reg12=reg11+reg12; reg14=reg13+reg14; reg11=pos_nodes[2][1]*reg5; reg16=reg19+reg16;
    reg13=pos_nodes[2][1]*reg15; reg18=reg17+reg18; reg17=pos_nodes[2][2]*reg15; reg19=pos_nodes[2][0]*reg15; T reg22=pos_nodes[3][1]*reg10;
    T reg23=reg21*pos_nodes[1][1]; T reg24=pos_nodes[3][0]*reg10; reg13=reg16+reg13; reg9=reg20-reg9; reg19=reg12+reg19;
    reg12=pos_nodes[3][1]*reg4; reg16=pos_nodes[3][0]*reg4; reg18=reg11-reg18; reg11=reg21*pos_nodes[0][1]; reg20=reg1*var_inter[1];
    T reg25=pos_nodes[3][2]*reg10; reg17=reg14+reg17; reg14=reg21*pos_nodes[1][0]; T reg26=reg21*pos_nodes[0][0]; T reg27=reg2*var_inter[2];
    reg7=reg8-reg7; reg8=pos_nodes[3][2]*reg4; T reg28=pos_nodes[4][0]*reg27; reg12=reg18+reg12; reg18=pos_nodes[4][1]*reg27;
    reg16=reg7+reg16; reg7=pos_nodes[4][1]*reg3; reg25=reg17+reg25; reg17=var_inter[0]*var_inter[2]; reg8=reg9+reg8;
    reg22=reg13+reg22; reg9=pos_nodes[1][2]*reg21; reg13=reg21*pos_nodes[0][2]; reg24=reg19+reg24; reg19=pos_nodes[4][2]*reg27;
    reg26=reg14-reg26; reg14=pos_nodes[2][0]*reg20; T reg29=pos_nodes[4][2]*reg3; T reg30=pos_nodes[2][1]*reg20; T reg31=pos_nodes[4][0]*reg3;
    reg11=reg23-reg11; reg23=pos_nodes[3][1]*reg20; reg30=reg11+reg30; reg11=reg6*reg1; T reg32=reg1*reg3;
    reg18=reg12-reg18; reg12=pos_nodes[5][1]*reg17; reg25=reg29-reg25; reg22=reg7-reg22; reg7=reg6*pos_nodes[5][2];
    reg29=pos_nodes[5][2]*reg17; reg13=reg9-reg13; reg9=pos_nodes[2][2]*reg20; reg19=reg8-reg19; reg8=pos_nodes[3][0]*reg20;
    reg14=reg26+reg14; reg26=reg6*pos_nodes[5][1]; T reg33=reg6*pos_nodes[5][0]; reg28=reg16-reg28; reg16=pos_nodes[5][0]*reg17;
    reg24=reg31-reg24; reg31=reg0*var_inter[2]; reg22=reg26+reg22; reg26=pos_nodes[6][1]*reg15; T reg34=pos_nodes[6][0]*reg15;
    reg16=reg28-reg16; reg28=pos_nodes[6][0]*reg17; reg29=reg19-reg29; reg19=pos_nodes[1][0]*reg11; T reg35=pos_nodes[6][2]*reg17;
    T reg36=pos_nodes[1][1]*reg11; T reg37=reg32*pos_nodes[0][0]; T reg38=reg32*pos_nodes[0][1]; T reg39=pos_nodes[3][2]*reg20; reg23=reg30-reg23;
    reg30=reg31*pos_nodes[4][1]; reg24=reg33+reg24; reg9=reg13+reg9; reg13=pos_nodes[6][2]*reg15; reg25=reg7+reg25;
    reg7=reg15*reg1; reg12=reg18-reg12; reg18=pos_nodes[6][1]*reg17; reg8=reg14-reg8; reg14=pos_nodes[4][0]*reg31;
    reg33=reg31*pos_nodes[4][2]; T reg40=pos_nodes[7][0]*reg27; reg39=reg9-reg39; reg9=reg1*reg10; reg28=reg16+reg28;
    reg35=reg29+reg35; reg16=pos_nodes[7][2]*reg27; reg14=reg8-reg14; reg13=reg25+reg13; reg8=pos_nodes[7][2]*reg10;
    reg25=pos_nodes[1][2]*reg11; reg29=reg32*pos_nodes[0][2]; T reg41=var_inter[1]*var_inter[2]; T reg42=pos_nodes[2][0]*reg7; reg18=reg12+reg18;
    reg12=pos_nodes[7][1]*reg27; reg37=reg19+reg37; reg19=reg31*pos_nodes[5][1]; T reg43=pos_nodes[7][0]*reg10; reg34=reg24+reg34;
    reg26=reg22+reg26; reg22=pos_nodes[7][1]*reg10; reg36=reg38+reg36; reg24=pos_nodes[2][1]*reg7; reg38=reg31*pos_nodes[5][0];
    reg30=reg23-reg30; reg30=reg19+reg30; reg19=reg41*pos_nodes[6][1]; reg23=pos_nodes[2][2]*reg7; reg29=reg25+reg29;
    reg8=reg13+reg8; reg13=pos_nodes[3][0]*reg9; reg42=reg37+reg42; reg12=reg18+reg12; reg16=reg35+reg16;
    reg18=var_inter[2]*reg3; reg43=reg34+reg43; reg14=reg38+reg14; reg25=reg41*pos_nodes[6][0]; reg24=reg36+reg24;
    reg34=pos_nodes[3][1]*reg9; reg35=reg31*pos_nodes[5][2]; reg40=reg28+reg40; reg22=reg26+reg22; reg33=reg39-reg33;
    reg26=pos_nodes[4][0]*reg18; reg28=reg43*reg16; reg33=reg35+reg33; reg35=reg40*reg8; reg36=pos_nodes[7][1]*reg41;
    reg19=reg30+reg19; reg34=reg24+reg34; reg23=reg29+reg23; reg24=pos_nodes[3][2]*reg9; reg29=reg22*reg16;
    reg30=reg12*reg8; reg37=reg41*pos_nodes[7][0]; reg25=reg14+reg25; reg13=reg42+reg13; reg14=reg41*pos_nodes[6][2];
    reg38=reg6*var_inter[2]; reg39=pos_nodes[4][1]*reg18; reg37=reg25-reg37; reg39=reg34+reg39; reg25=reg15*var_inter[2];
    reg29=reg30-reg29; reg34=reg40*reg22; reg42=pos_nodes[4][2]*reg18; reg24=reg23+reg24; reg23=pos_nodes[5][1]*reg38;
    T reg44=reg43*reg12; T reg45=pos_nodes[7][2]*reg41; reg14=reg33+reg14; reg36=reg19-reg36; reg28=reg35-reg28;
    reg26=reg13+reg26; reg13=pos_nodes[5][0]*reg38; reg44=reg34-reg44; reg19=reg37*reg29; reg33=reg36*reg28;
    T reg46=var_inter[2]*reg10; reg42=reg24+reg42; reg24=pos_nodes[5][2]*reg38; T reg47=reg25*pos_nodes[6][0]; reg26=reg13+reg26;
    reg45=reg14-reg45; reg39=reg23+reg39; reg13=reg25*pos_nodes[6][1]; reg14=reg40*reg45; reg23=reg37*reg16;
    T reg48=reg43*reg45; T reg49=reg37*reg8; T reg50=reg12*reg45; reg13=reg39+reg13; reg39=reg36*reg16;
    T reg51=reg22*reg45; T reg52=reg36*reg8; T reg53=reg46*pos_nodes[7][0]; T reg54=pos_nodes[7][1]*reg46; T reg55=reg45*reg44;
    reg19=reg33-reg19; reg47=reg26+reg47; reg42=reg24+reg42; reg24=reg25*pos_nodes[6][2]; reg26=reg40*reg36;
    reg33=reg37*reg12; T reg56=reg43*reg36; T reg57=reg37*reg22; reg14=reg23-reg14; reg48=reg49-reg48;
    reg51=reg52-reg51; reg55=reg19-reg55; reg50=reg39-reg50; reg53=reg47+reg53; reg19=reg46*pos_nodes[7][2];
    reg54=reg13+reg54; reg24=reg42+reg24; reg51=reg51/reg55; reg29=reg29/reg55; reg19=reg24+reg19;
    reg54=pos[1]-reg54; reg26=reg33-reg26; reg50=reg50/reg55; reg56=reg57-reg56; reg28=reg28/reg55;
    reg48=reg48/reg55; reg14=reg14/reg55; reg53=pos[0]-reg53; reg19=pos[2]-reg19; reg44=reg44/reg55;
    reg56=reg56/reg55; reg55=reg26/reg55; reg29=reg53*reg29; reg28=reg54*reg28; reg51=reg53*reg51;
    reg48=reg54*reg48; reg50=reg53*reg50; reg14=reg54*reg14; reg56=reg19*reg56; reg48=reg51-reg48;
    reg29=reg28-reg29; reg44=reg19*reg44; reg55=reg19*reg55; reg50=reg14-reg50; var_inter[0]+=reg29-reg44;
    var_inter[1]+=reg56+reg48; var_inter[2]+=reg50-reg55;

}
template<> struct ElemVarInterFromPosNonLinear<Hexa> { static const bool res = 3; };
#ifndef STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
#define STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
struct Elementary_mul_nb_nodes_of_each_children_elem {};
#endif // STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary_mul_nb_nodes_of_each_children_elem &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary_mul_nb_nodes
#define STRUCT_Elementary_mul_nb_nodes
struct Elementary_mul_nb_nodes {};
#endif // STRUCT_Elementary_mul_nb_nodes
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary_mul_nb_nodes &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Nodal
#define STRUCT_Nodal
struct Nodal {};
#endif // STRUCT_Nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[1]; T reg1=1-var_inter[0]; T reg2=reg0*reg1; T reg3=1-var_inter[2]; T reg4=var_inter[0]*reg0;
    T reg5=var_inter[0]*var_inter[1]; T reg6=reg2*reg3; T reg7=reg3*reg4; T reg8=var_inter[1]*reg1; T reg9=reg3*reg5;
    reg7=val[1]*reg7; reg6=val[0]*reg6; reg7=reg6+reg7; reg9=val[2]*reg9; reg6=reg3*reg8;
    reg9=reg7+reg9; reg2=var_inter[2]*reg2; reg6=val[3]*reg6; reg4=var_inter[2]*reg4; reg2=val[4]*reg2;
    reg6=reg9+reg6; reg2=reg6+reg2; reg4=val[5]*reg4; reg5=var_inter[2]*reg5; reg4=reg2+reg4;
    reg5=val[6]*reg5; reg8=var_inter[2]*reg8; reg5=reg4+reg5; reg8=val[7]*reg8; res=reg5+reg8;

}
#ifndef STRUCT_Global
#define STRUCT_Global
struct Global {};
#endif // STRUCT_Global
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Global &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss
#define STRUCT_Gauss
struct Gauss {};
#endif // STRUCT_Gauss
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Gauss &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=var_inter[0]-0.21132486540518707896; T reg3=reg0-0.21132486540518707896; T reg4=var_inter[1]-0.21132486540518707896;
    reg4=reg4/0.57735026918962573106; reg3=reg3/0.57735026918962573106; reg2=reg2/0.57735026918962573106; T reg5=var_inter[2]-0.21132486540518707896; T reg6=reg1-0.21132486540518707896;
    reg2=1-reg2; reg4=1-reg4; reg3=1-reg3; reg5=reg5/0.57735026918962573106; reg6=reg6/0.57735026918962573106;
    T reg7=reg2*reg4; reg5=1-reg5; T reg8=1-var_inter[2]; reg4=reg3*reg4; reg6=1-reg6;
    T reg9=reg7*reg5; T reg10=reg8-0.21132486540518707896; reg3=reg3*reg6; T reg11=reg4*reg5; reg9=val[0]*reg9;
    reg11=val[1]*reg11; reg10=reg10/0.57735026918962573106; reg2=reg6*reg2; reg6=reg3*reg5; reg9=reg11+reg9;
    reg10=1-reg10; reg5=reg2*reg5; reg6=val[2]*reg6; reg11=reg7*reg10; reg5=val[3]*reg5;
    reg6=reg9+reg6; reg5=reg6+reg5; reg11=val[4]*reg11; reg6=reg4*reg10; reg9=reg3*reg10;
    reg6=val[5]*reg6; reg11=reg5+reg11; reg6=reg11+reg6; reg9=val[6]*reg9; reg10=reg2*reg10;
    reg9=reg6+reg9; reg10=val[7]*reg10; res=reg9+reg10;

}
#ifndef STRUCT_Flat_interpolation
#define STRUCT_Flat_interpolation
struct Flat_interpolation {};
#endif // STRUCT_Flat_interpolation
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Flat_interpolation &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=var_inter[1]-0.21132486540518707896; T reg2=var_inter[0]-0.21132486540518707896; T reg3=1-var_inter[1]; T reg4=reg0-0.21132486540518707896;
    reg1=reg1/0.57735026918962573106; reg2=reg2/0.57735026918962573106; T reg5=reg3-0.21132486540518707896; reg4=reg4/0.57735026918962573106; reg5=reg5/0.57735026918962573106;
    reg4=1-reg4; reg2=1-reg2; reg1=1-reg1; reg5=1-reg5; T reg6=reg4*reg1;
    reg1=reg2*reg1; T reg7=val[1]*reg6; T reg8=val[0]*reg1; reg4=reg4*reg5; reg7=reg8+reg7;
    reg8=val[2]*reg4; reg2=reg5*reg2; reg8=reg7+reg8; reg5=val[3]*reg2; res=reg8+reg5;

}
#ifndef STRUCT_Der_nodal
#define STRUCT_Der_nodal
struct Der_nodal {};
#endif // STRUCT_Der_nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Der_nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary
#define STRUCT_Elementary
struct Elementary {};
#endif // STRUCT_Elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Skin_elementary
#define STRUCT_Skin_elementary
struct Skin_elementary {};
#endif // STRUCT_Skin_elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Skin_elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
template<class TVI,class TVAL> void get_shape_functions(const Hexa &ne,const TVI &var_inter,TVAL &res) {
    typedef typename TVAL::template SubType<0>::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=var_inter[1]*reg0; T reg3=var_inter[0]*var_inter[1]; T reg4=var_inter[0]*reg1;
    T reg5=1-var_inter[2]; T reg6=reg1*reg0; T reg7=reg5*reg4; res[1]=reg7; T reg8=reg5*reg3;
    res[2]=reg8; T reg9=reg6*reg5; res[0]=reg9; T reg10=reg5*reg2; res[3]=reg10;
    reg6=var_inter[2]*reg6; res[4]=reg6; reg4=var_inter[2]*reg4; res[5]=reg4; reg3=var_inter[2]*reg3;
    res[6]=reg3; reg2=var_inter[2]*reg2; res[7]=reg2;

}
#ifndef AUTORIZEDPERM
#define AUTORIZEDPERM
template<class T> struct AuthorizedPerm;
#endif // AUTORIZEDPERM
template<> struct AuthorizedPerm<Hexa> {
    static const unsigned nb_permutations = 23;
    template<class TE> static void make_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
    template<class TE> static void unmake_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
};

}
#endif // LMT_HEXA
