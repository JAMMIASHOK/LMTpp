#ifndef LMT_HEXA
#define LMT_HEXA
#include "node.h"
namespace LMT {
inline const double *gauss_point_for_order(unsigned order, const Hexa &elem) { /// order -> degre du polynome a integrer exactement
    static const unsigned offset[] = { 0, 5, 10, 43, 180, 317, 454, 591, 728, 865, }; // fonction de lordre du poly
    static const double values[] = {
        1.0,0.5,0.5,0.5,
        0.0,
        1.0,0.5,0.5,0.5,
        0.0,
        0.125,0.211324865405,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.211324865405,0.211324865405,
        0.125,0.788675134595,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.788675134595,0.211324865405,
        0.125,0.211324865405,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.211324865405,0.788675134595,
        0.125,0.788675134595,0.788675134595,0.788675134595,
        0.125,0.211324865405,0.788675134595,0.788675134595,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
        0.036968449931412875,0.962910049886276,0.5,0.5,
        0.036968449931412875,0.037089950113724,0.5,0.5,
        0.036968449931412875,0.5,0.962910049886276,0.5,
        0.036968449931412875,0.5,0.037089950113724,0.5,
        0.036968449931412875,0.5,0.5,0.962910049886276,
        0.036968449931412875,0.5,0.5,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.962910049886276,0.5,
        0.0117626886145405,0.962910049886276,0.037089950113724,0.5,
        0.0117626886145405,0.037089950113724,0.962910049886276,0.5,
        0.0117626886145405,0.037089950113724,0.037089950113724,0.5,
        0.0117626886145405,0.5,0.962910049886276,0.962910049886276,
        0.0117626886145405,0.5,0.962910049886276,0.037089950113724,
        0.0117626886145405,0.5,0.037089950113724,0.962910049886276,
        0.0117626886145405,0.5,0.037089950113724,0.037089950113724,
        0.0117626886145405,0.962910049886276,0.5,0.962910049886276,
        0.0117626886145405,0.037089950113724,0.5,0.962910049886276,
        0.0117626886145405,0.962910049886276,0.5,0.037089950113724,
        0.0117626886145405,0.037089950113724,0.5,0.037089950113724,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.66540748184964399999,0.33459251815035600001,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.66540748184964399999,0.33459251815035600001,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.66540748184964399999,
        0.0515417327839295,0.33459251815035600001,0.33459251815035600001,0.33459251815035600001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.86705626437605750001,0.13294373562394249999,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.86705626437605750001,0.13294373562394249999,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.86705626437605750001,
        0.028087896845700125,0.13294373562394249999,0.13294373562394249999,0.13294373562394249999,
        0.0,
    };
    return values + offset[order];
}
template<class TNode> void permutation_if_jac_neg(const Hexa &elem,TNode **nodes) {
    typedef typename TNode::T T;
    T reg0=0.25*nodes[0]->pos[1]; T reg1=0.25*nodes[1]->pos[1]; T reg2=0.25*nodes[0]->pos[2]; T reg3=0.25*nodes[1]->pos[2]; T reg4=0.25*nodes[2]->pos[1];
    T reg5=reg0+reg1; T reg6=reg2+reg3; T reg7=0.25*nodes[2]->pos[2]; reg0=reg1-reg0; reg2=reg3-reg2;
    reg1=reg7-reg6; reg3=0.25*nodes[3]->pos[2]; reg6=reg6+reg7; T reg8=reg4+reg5; T reg9=0.25*nodes[3]->pos[1];
    reg5=reg4-reg5; reg0=reg4+reg0; reg2=reg7+reg2; reg4=0.25*nodes[1]->pos[0]; reg7=0.25*nodes[0]->pos[0];
    reg2=reg2-reg3; reg1=reg3+reg1; T reg10=0.25*nodes[4]->pos[1]; reg5=reg5+reg9; reg8=reg9+reg8;
    T reg11=0.25*nodes[4]->pos[2]; T reg12=reg4-reg7; T reg13=0.25*nodes[2]->pos[0]; reg3=reg6+reg3; reg7=reg4+reg7;
    reg9=reg0-reg9; reg3=reg11-reg3; reg0=0.25*nodes[5]->pos[2]; reg2=reg2-reg11; reg4=0.25*nodes[3]->pos[0];
    reg11=reg1-reg11; reg8=reg10-reg8; reg1=reg13-reg7; reg9=reg9-reg10; reg12=reg12+reg13;
    reg10=reg5-reg10; reg5=0.25*nodes[5]->pos[1]; reg1=reg4+reg1; reg7=reg13+reg7; reg9=reg5+reg9;
    reg8=reg5+reg8; reg6=0.25*nodes[4]->pos[0]; reg11=reg11-reg0; reg5=reg10-reg5; reg10=0.25*nodes[6]->pos[1];
    reg12=reg12-reg4; reg13=0.25*nodes[6]->pos[2]; reg3=reg3+reg0; reg2=reg0+reg2; reg0=0.25*nodes[5]->pos[0];
    reg7=reg4+reg7; reg1=reg1-reg6; reg9=reg10+reg9; reg2=reg13+reg2; reg8=reg10+reg8;
    reg12=reg12-reg6; reg4=0.25*nodes[7]->pos[1]; reg11=reg13+reg11; reg13=reg3+reg13; reg3=0.25*nodes[7]->pos[2];
    reg10=reg5+reg10; reg9=reg9-reg4; reg2=reg2-reg3; reg7=reg6-reg7; reg5=0.25*nodes[6]->pos[0];
    reg1=reg1-reg0; reg12=reg12+reg0; reg8=reg4+reg8; reg11=reg3+reg11; reg4=reg10+reg4;
    reg3=reg13+reg3; reg12=reg12+reg5; reg6=reg8*reg2; reg10=0.25*nodes[7]->pos[0]; reg7=reg0+reg7;
    reg0=reg4*reg3; reg3=reg3*reg9; reg8=reg11*reg8; reg1=reg5+reg1; reg7=reg5+reg7;
    reg9=reg11*reg9; reg2=reg4*reg2; reg6=reg3-reg6; reg12=reg12-reg10; reg8=reg0-reg8;
    reg1=reg10+reg1; reg6=reg1*reg6; reg7=reg10+reg7; reg8=reg12*reg8; reg2=reg9-reg2;
    reg6=reg8-reg6; reg2=reg7*reg2; T det_jac=reg6+reg2;

    if ( det_jac < 0 ) {
        TNode *tmp[] = {nodes[0],nodes[3],nodes[2],nodes[1],nodes[4],nodes[7],nodes[6],nodes[5]};
        for(unsigned i=0;i<8;++i) nodes[i] = tmp[i];
    }
}
template<class PosNodes,class Pvec,class TVI> void get_var_inter_linear(const Hexa &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=1-var_inter[2]; T reg1=1-var_inter[1]; T reg2=1-var_inter[0]; T reg3=var_inter[0]*reg0; T reg4=reg2*reg0;
    T reg5=reg2*reg1; T reg6=var_inter[0]*reg1; T reg7=pos_nodes[1][0]*reg3; T reg8=reg4*pos_nodes[0][0]; T reg9=pos_nodes[0][2]*reg4;
    T reg10=pos_nodes[1][1]*reg3; T reg11=reg4*pos_nodes[0][1]; T reg12=pos_nodes[0][1]*reg5; T reg13=pos_nodes[1][2]*reg3; T reg14=reg6*pos_nodes[1][0];
    T reg15=pos_nodes[0][0]*reg5; T reg16=reg6*pos_nodes[1][1]; T reg17=var_inter[0]*var_inter[1]; T reg18=reg6*pos_nodes[1][2]; T reg19=pos_nodes[0][2]*reg5;
    reg16=reg12+reg16; reg12=pos_nodes[2][1]*reg17; T reg20=pos_nodes[2][0]*reg3; reg8=reg7+reg8; reg10=reg11+reg10;
    reg7=pos_nodes[2][1]*reg3; reg15=reg14+reg15; reg11=pos_nodes[2][0]*reg17; reg14=reg2*var_inter[1]; reg9=reg13+reg9;
    reg13=reg1*reg0; T reg21=pos_nodes[2][2]*reg3; reg19=reg18+reg19; reg18=pos_nodes[2][2]*reg17; T reg22=pos_nodes[3][0]*reg14;
    reg11=reg15+reg11; reg15=pos_nodes[3][2]*reg14; T reg23=pos_nodes[1][1]*reg13; T reg24=reg13*pos_nodes[0][1]; T reg25=pos_nodes[3][2]*reg4;
    reg9=reg21-reg9; reg18=reg19+reg18; reg12=reg16+reg12; reg16=pos_nodes[3][1]*reg14; reg19=reg2*var_inter[2];
    reg21=pos_nodes[3][1]*reg4; T reg26=reg13*pos_nodes[0][0]; T reg27=pos_nodes[1][0]*reg13; T reg28=var_inter[1]*reg0; reg8=reg20-reg8;
    reg20=pos_nodes[3][0]*reg4; reg10=reg7-reg10; reg24=reg23-reg24; reg7=pos_nodes[2][1]*reg28; reg25=reg9+reg25;
    reg9=pos_nodes[0][2]*reg13; reg21=reg10+reg21; reg10=pos_nodes[4][1]*reg19; reg23=pos_nodes[4][1]*reg5; T reg29=pos_nodes[4][2]*reg19;
    T reg30=pos_nodes[1][2]*reg13; T reg31=pos_nodes[4][2]*reg5; reg16=reg12+reg16; reg15=reg18+reg15; reg12=pos_nodes[4][0]*reg5;
    reg22=reg11+reg22; reg11=pos_nodes[2][0]*reg28; reg26=reg27-reg26; reg18=var_inter[0]*var_inter[2]; reg20=reg8+reg20;
    reg8=pos_nodes[4][0]*reg19; reg27=pos_nodes[3][0]*reg28; T reg32=pos_nodes[3][1]*reg28; T reg33=pos_nodes[5][1]*reg18; reg10=reg21-reg10;
    reg7=reg24+reg7; reg16=reg23-reg16; reg21=reg6*pos_nodes[5][1]; reg11=reg26+reg11; reg23=pos_nodes[5][0]*reg18;
    reg9=reg30-reg9; reg24=pos_nodes[2][2]*reg28; reg8=reg20-reg8; reg20=reg6*reg0; reg26=pos_nodes[5][2]*reg18;
    reg29=reg25-reg29; reg25=var_inter[2]*reg1; reg30=reg6*pos_nodes[5][0]; T reg34=reg5*reg0; reg22=reg12-reg22;
    reg15=reg31-reg15; reg12=reg6*pos_nodes[5][2]; reg31=pos_nodes[3][2]*reg28; T reg35=pos_nodes[6][2]*reg18; reg26=reg29-reg26;
    reg24=reg9+reg24; reg33=reg10-reg33; reg9=pos_nodes[6][1]*reg18; reg10=pos_nodes[0][1]*reg34; reg29=pos_nodes[4][0]*reg25;
    reg27=reg11-reg27; reg21=reg16+reg21; reg11=pos_nodes[6][1]*reg17; reg16=reg20*pos_nodes[1][1]; T reg36=pos_nodes[6][2]*reg17;
    reg12=reg15+reg12; reg15=reg20*pos_nodes[1][0]; T reg37=pos_nodes[0][0]*reg34; T reg38=pos_nodes[6][0]*reg17; reg30=reg22+reg30;
    reg22=reg17*reg0; T reg39=pos_nodes[6][0]*reg18; reg32=reg7-reg32; reg7=pos_nodes[4][1]*reg25; reg23=reg8-reg23;
    reg16=reg10+reg16; reg8=pos_nodes[2][1]*reg22; reg10=pos_nodes[0][2]*reg34; T reg40=reg20*pos_nodes[1][2]; T reg41=pos_nodes[7][2]*reg14;
    reg36=reg12+reg36; reg31=reg24-reg31; reg12=pos_nodes[4][2]*reg25; reg24=reg14*reg0; T reg42=var_inter[1]*var_inter[2];
    reg38=reg30+reg38; reg30=pos_nodes[7][0]*reg14; reg35=reg26+reg35; reg26=pos_nodes[7][2]*reg19; T reg43=pos_nodes[2][0]*reg22;
    reg37=reg15+reg37; reg9=reg33+reg9; reg15=pos_nodes[7][1]*reg19; reg33=pos_nodes[5][1]*reg25; T reg44=pos_nodes[5][0]*reg25;
    reg29=reg27-reg29; reg7=reg32-reg7; reg39=reg23+reg39; reg23=pos_nodes[7][0]*reg19; reg11=reg21+reg11;
    reg21=pos_nodes[7][1]*reg14; reg27=pos_nodes[2][2]*reg22; reg23=reg39+reg23; reg32=var_inter[2]*reg5; reg44=reg29+reg44;
    reg29=pos_nodes[6][0]*reg42; reg30=reg38+reg30; reg38=pos_nodes[5][2]*reg25; reg12=reg31-reg12; reg8=reg16+reg8;
    reg33=reg7+reg33; reg7=pos_nodes[3][0]*reg24; reg43=reg37+reg43; reg26=reg35+reg26; reg15=reg9+reg15;
    reg9=pos_nodes[6][1]*reg42; reg21=reg11+reg21; reg41=reg36+reg41; reg11=pos_nodes[3][1]*reg24; reg10=reg40+reg10;
    reg7=reg43+reg7; reg16=pos_nodes[4][0]*reg32; reg29=reg44+reg29; reg31=pos_nodes[3][2]*reg24; reg27=reg10+reg27;
    reg10=pos_nodes[4][1]*reg32; reg11=reg8+reg11; reg9=reg33+reg9; reg8=reg15*reg41; reg33=reg21*reg26;
    reg35=reg23*reg41; reg36=reg30*reg26; reg38=reg12+reg38; reg12=pos_nodes[6][2]*reg42; reg37=reg6*var_inter[2];
    reg39=pos_nodes[7][1]*reg42; reg40=pos_nodes[7][0]*reg42; reg36=reg35-reg36; reg43=reg30*reg15; reg33=reg8-reg33;
    reg44=pos_nodes[4][2]*reg32; reg31=reg27+reg31; reg27=reg23*reg21; T reg45=var_inter[2]*reg17; T reg46=pos_nodes[7][2]*reg42;
    reg12=reg38+reg12; reg39=reg9-reg39; reg9=pos_nodes[5][0]*reg37; reg16=reg7+reg16; reg40=reg29-reg40;
    reg10=reg11+reg10; reg7=pos_nodes[5][1]*reg37; reg11=pos_nodes[5][2]*reg37; reg44=reg31+reg44; reg29=reg39*reg36;
    reg31=var_inter[2]*reg14; reg7=reg10+reg7; reg10=pos_nodes[6][1]*reg45; reg43=reg27-reg43; reg9=reg16+reg9;
    reg46=reg12-reg46; reg12=reg40*reg33; reg16=pos_nodes[6][0]*reg45; reg16=reg9+reg16; reg12=reg29-reg12;
    reg9=reg46*reg43; reg29=reg15*reg46; reg38=reg39*reg41; T reg47=reg21*reg46; T reg48=reg39*reg26;
    T reg49=reg40*reg41; T reg50=reg30*reg46; T reg51=pos_nodes[6][2]*reg45; reg11=reg44+reg11; reg44=pos_nodes[7][0]*reg31;
    T reg52=reg40*reg26; T reg53=reg23*reg46; reg10=reg7+reg10; reg7=pos_nodes[7][1]*reg31; T reg54=reg23*reg39;
    T reg55=reg40*reg15; T reg56=reg30*reg39; reg47=reg38-reg47; T reg57=reg40*reg21; reg53=reg52-reg53;
    reg50=reg49-reg50; reg29=reg48-reg29; reg7=reg10+reg7; reg44=reg16+reg44; reg51=reg11+reg51;
    reg10=pos_nodes[7][2]*reg31; reg9=reg12-reg9; reg36=reg36/reg9; reg10=reg51+reg10; reg50=reg50/reg9;
    reg29=reg29/reg9; reg44=pos[0]-reg44; reg54=reg55-reg54; reg33=reg33/reg9; reg53=reg53/reg9;
    reg7=pos[1]-reg7; reg47=reg47/reg9; reg56=reg57-reg56; reg36=reg7*reg36; reg47=reg44*reg47;
    reg50=reg7*reg50; reg29=reg44*reg29; reg53=reg7*reg53; reg33=reg44*reg33; reg54=reg54/reg9;
    reg56=reg56/reg9; reg9=reg43/reg9; reg10=pos[2]-reg10; reg9=reg10*reg9; reg33=reg36-reg33;
    reg56=reg10*reg56; reg50=reg47-reg50; reg54=reg10*reg54; reg29=reg53-reg29; var_inter[0]=reg33-reg9;
    var_inter[1]=reg56+reg50; var_inter[2]=reg29-reg54;

}
template<class PosNodes,class Pvec,class TVI> void get_var_inter(const Hexa &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter) {
typedef typename Pvec::template SubType<0>::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[2]; T reg2=1-var_inter[1]; T reg3=reg2*reg0; T reg4=reg2*var_inter[0];
    T reg5=reg1*reg0; T reg6=var_inter[0]*reg1; T reg7=var_inter[0]*var_inter[1]; T reg8=pos_nodes[1][1]*reg4; T reg9=reg3*pos_nodes[0][1];
    T reg10=pos_nodes[1][0]*reg4; T reg11=reg3*pos_nodes[0][0]; T reg12=pos_nodes[1][0]*reg6; T reg13=pos_nodes[0][0]*reg5; T reg14=reg4*pos_nodes[1][2];
    T reg15=reg3*pos_nodes[0][2]; T reg16=pos_nodes[1][2]*reg6; T reg17=pos_nodes[0][2]*reg5; T reg18=pos_nodes[1][1]*reg6; T reg19=pos_nodes[0][1]*reg5;
    T reg20=pos_nodes[2][2]*reg7; reg14=reg15+reg14; reg15=pos_nodes[2][1]*reg7; T reg21=var_inter[1]*reg0; T reg22=pos_nodes[2][0]*reg6;
    reg12=reg13+reg12; reg16=reg17+reg16; reg18=reg19+reg18; reg13=pos_nodes[2][1]*reg6; reg17=reg2*reg1;
    reg8=reg9+reg8; reg10=reg11+reg10; reg9=pos_nodes[2][2]*reg6; reg11=pos_nodes[2][0]*reg7; reg16=reg9-reg16;
    reg9=reg21*pos_nodes[3][2]; reg19=reg5*pos_nodes[3][2]; reg20=reg14+reg20; reg14=reg17*pos_nodes[1][0]; T reg23=reg17*pos_nodes[0][0];
    T reg24=var_inter[2]*reg0; T reg25=pos_nodes[3][0]*reg5; reg12=reg22-reg12; reg22=reg21*pos_nodes[3][0]; T reg26=reg17*pos_nodes[0][1];
    T reg27=reg17*pos_nodes[1][1]; reg11=reg10+reg11; reg10=reg21*pos_nodes[3][1]; reg15=reg8+reg15; reg8=reg5*pos_nodes[3][1];
    reg18=reg13-reg18; reg13=var_inter[1]*reg1; T reg28=reg3*pos_nodes[4][2]; T reg29=reg13*pos_nodes[2][1]; reg10=reg15+reg10;
    reg20=reg9+reg20; reg9=reg24*pos_nodes[4][2]; reg16=reg19+reg16; reg26=reg27-reg26; reg11=reg22+reg11;
    reg15=reg3*pos_nodes[4][0]; reg19=reg24*pos_nodes[4][0]; reg12=reg25+reg12; reg8=reg18+reg8; reg18=reg24*pos_nodes[4][1];
    reg22=var_inter[2]*var_inter[0]; reg25=reg3*pos_nodes[4][1]; reg23=reg14-reg23; reg14=reg17*pos_nodes[0][2]; reg27=reg13*pos_nodes[2][0];
    T reg30=reg17*pos_nodes[1][2]; T reg31=reg4*pos_nodes[5][1]; reg10=reg25-reg10; reg20=reg28-reg20; reg25=reg4*pos_nodes[5][2];
    reg28=reg3*reg1; T reg32=reg4*pos_nodes[5][0]; reg11=reg15-reg11; reg15=reg4*reg1; reg27=reg23+reg27;
    reg23=reg22*pos_nodes[5][0]; reg19=reg12-reg19; reg12=reg13*pos_nodes[3][0]; T reg33=reg22*pos_nodes[5][1]; reg18=reg8-reg18;
    reg8=reg2*var_inter[2]; reg14=reg30-reg14; reg30=reg13*pos_nodes[2][2]; T reg34=reg22*pos_nodes[5][2]; reg9=reg16-reg9;
    reg16=reg13*pos_nodes[3][1]; reg29=reg26+reg29; reg26=reg7*pos_nodes[6][0]; reg32=reg11+reg32; reg11=pos_nodes[1][1]*reg15;
    T reg35=reg7*reg1; reg16=reg29-reg16; reg29=reg8*pos_nodes[4][1]; T reg36=reg22*pos_nodes[6][0]; reg23=reg19-reg23;
    reg19=reg13*pos_nodes[3][2]; reg33=reg18-reg33; reg18=reg22*pos_nodes[6][1]; reg30=reg14+reg30; reg14=reg8*pos_nodes[4][0];
    reg12=reg27-reg12; reg27=reg28*pos_nodes[0][1]; T reg37=reg7*pos_nodes[6][1]; reg31=reg10+reg31; reg10=reg28*pos_nodes[0][0];
    T reg38=pos_nodes[1][0]*reg15; T reg39=reg22*pos_nodes[6][2]; reg34=reg9-reg34; reg25=reg20+reg25; reg9=reg7*pos_nodes[6][2];
    reg19=reg30-reg19; reg20=reg21*pos_nodes[7][1]; reg9=reg25+reg9; reg25=reg24*pos_nodes[7][0]; reg18=reg33+reg18;
    reg30=pos_nodes[7][1]*reg24; reg33=reg8*pos_nodes[5][0]; reg14=reg12-reg14; reg39=reg34+reg39; reg12=reg21*reg1;
    reg34=var_inter[2]*var_inter[1]; T reg40=reg21*pos_nodes[7][2]; reg37=reg31+reg37; reg26=reg32+reg26; reg27=reg11+reg27;
    reg11=pos_nodes[2][1]*reg35; reg38=reg10+reg38; reg10=pos_nodes[7][2]*reg24; reg31=pos_nodes[2][0]*reg35; reg32=reg21*pos_nodes[7][0];
    reg36=reg23+reg36; reg23=pos_nodes[1][2]*reg15; T reg41=pos_nodes[0][2]*reg28; reg29=reg16-reg29; reg16=reg8*pos_nodes[5][1];
    T reg42=reg8*pos_nodes[4][2]; reg30=reg18+reg30; reg18=reg34*pos_nodes[6][0]; reg33=reg14+reg33; reg36=reg25+reg36;
    reg31=reg38+reg31; reg16=reg29+reg16; reg14=reg34*pos_nodes[6][1]; reg25=reg3*var_inter[2]; reg29=reg12*pos_nodes[3][0];
    reg26=reg32+reg26; reg32=reg12*pos_nodes[3][1]; reg23=reg41+reg23; reg38=pos_nodes[2][2]*reg35; reg42=reg19-reg42;
    reg9=reg40+reg9; reg39=reg10+reg39; reg20=reg37+reg20; reg11=reg27+reg11; reg10=reg8*pos_nodes[5][2];
    reg19=reg25*pos_nodes[4][0]; reg27=reg34*pos_nodes[7][0]; reg18=reg33+reg18; reg31=reg29+reg31; reg38=reg23+reg38;
    reg23=reg12*pos_nodes[3][2]; reg29=reg30*reg9; reg33=reg34*pos_nodes[6][2]; reg10=reg42+reg10; reg14=reg16+reg14;
    reg16=reg34*pos_nodes[7][1]; reg37=reg20*reg39; reg40=var_inter[2]*reg4; reg41=reg9*reg36; reg42=reg39*reg26;
    T reg43=reg25*pos_nodes[4][1]; reg32=reg11+reg32; reg11=reg25*pos_nodes[4][2]; reg38=reg23+reg38; reg37=reg29-reg37;
    reg23=reg20*reg36; T reg44=reg30*reg26; reg42=reg41-reg42; reg43=reg32+reg43; reg32=reg40*pos_nodes[5][1];
    T reg45=var_inter[2]*reg7; reg16=reg14-reg16; reg33=reg10+reg33; reg10=reg34*pos_nodes[7][2]; reg14=reg40*pos_nodes[5][0];
    reg19=reg31+reg19; reg27=reg18-reg27; reg10=reg33-reg10; reg11=reg38+reg11; reg18=reg40*pos_nodes[5][2];
    reg31=reg45*pos_nodes[6][0]; reg14=reg19+reg14; reg19=reg37*reg27; reg33=reg21*var_inter[2]; reg38=reg45*pos_nodes[6][1];
    reg32=reg43+reg32; reg43=reg42*reg16; reg44=reg23-reg44; T reg46=reg10*reg36; T reg47=reg39*reg27;
    reg31=reg14+reg31; reg14=reg10*reg26; T reg48=reg9*reg27; T reg49=reg30*reg10; T reg50=reg33*pos_nodes[7][0];
    reg18=reg11+reg18; reg11=reg45*pos_nodes[6][2]; reg19=reg43-reg19; reg43=reg10*reg44; T reg51=reg39*reg16;
    T reg52=reg20*reg10; reg38=reg32+reg38; reg32=reg9*reg16; T reg53=reg33*pos_nodes[7][1]; reg31=reg50+reg31;
    reg46=reg47-reg46; reg50=reg33*pos_nodes[7][2]; T reg54=reg20*reg27; T reg55=reg26*reg16; T reg56=reg30*reg27;
    T reg57=reg36*reg16; reg53=reg38+reg53; reg14=reg48-reg14; reg43=reg19-reg43; reg49=reg51-reg49;
    reg11=reg18+reg11; reg52=reg32-reg52; reg53=pos[1]-reg53; reg11=reg50+reg11; reg57=reg56-reg57;
    reg37=reg37/reg43; reg55=reg54-reg55; reg52=reg52/reg43; reg49=reg49/reg43; reg46=reg46/reg43;
    reg42=reg42/reg43; reg31=pos[0]-reg31; reg14=reg14/reg43; reg42=reg53*reg42; reg52=reg52*reg31;
    reg14=reg53*reg14; reg11=pos[2]-reg11; reg37=reg37*reg31; reg49=reg49*reg31; reg46=reg53*reg46;
    reg57=reg57/reg43; reg55=reg55/reg43; reg43=reg44/reg43; reg55=reg11*reg55; reg14=reg52-reg14;
    reg57=reg11*reg57; reg49=reg46-reg49; reg37=reg42-reg37; reg43=reg11*reg43; var_inter[1]+=reg55+reg14;
    var_inter[0]+=reg37-reg43; var_inter[2]+=reg49-reg57;

}
template<> struct ElemVarInterFromPosNonLinear<Hexa> { static const bool res = 3; };
#ifndef STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
#define STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
struct Elementary_mul_nb_nodes_of_each_children_elem {};
#endif // STRUCT_Elementary_mul_nb_nodes_of_each_children_elem
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary_mul_nb_nodes_of_each_children_elem &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary_mul_nb_nodes
#define STRUCT_Elementary_mul_nb_nodes
struct Elementary_mul_nb_nodes {};
#endif // STRUCT_Elementary_mul_nb_nodes
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary_mul_nb_nodes &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Nodal
#define STRUCT_Nodal
struct Nodal {};
#endif // STRUCT_Nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[1]; T reg1=1-var_inter[0]; T reg2=var_inter[0]*reg0; T reg3=reg1*reg0; T reg4=1-var_inter[2];
    T reg5=reg4*reg2; T reg6=reg3*reg4; T reg7=var_inter[0]*var_inter[1]; reg5=val[1]*reg5; reg6=val[0]*reg6;
    T reg8=var_inter[1]*reg1; T reg9=reg7*reg4; reg9=val[2]*reg9; T reg10=reg8*reg4; reg5=reg6+reg5;
    reg9=reg5+reg9; reg10=val[3]*reg10; reg3=var_inter[2]*reg3; reg2=var_inter[2]*reg2; reg3=val[4]*reg3;
    reg10=reg9+reg10; reg7=var_inter[2]*reg7; reg2=val[5]*reg2; reg3=reg10+reg3; reg2=reg3+reg2;
    reg7=val[6]*reg7; reg8=var_inter[2]*reg8; reg7=reg2+reg7; reg8=val[7]*reg8; res=reg7+reg8;

}
#ifndef STRUCT_Global
#define STRUCT_Global
struct Global {};
#endif // STRUCT_Global
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Global &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss_0
#define STRUCT_Gauss_0
struct Gauss_0 {};
#endif // STRUCT_Gauss_0
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Gauss_0 &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Gauss
#define STRUCT_Gauss
struct Gauss {};
#endif // STRUCT_Gauss
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Gauss &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=reg0-0.21132486540518707896; T reg2=1-var_inter[1]; T reg3=var_inter[0]-0.21132486540518707896; T reg4=var_inter[1]-0.21132486540518707896;
    T reg5=var_inter[2]-0.21132486540518707896; reg1=reg1/0.57735026918962573106; T reg6=reg2-0.21132486540518707896; reg4=reg4/0.57735026918962573106; reg3=reg3/0.57735026918962573106;
    reg5=reg5/0.57735026918962573106; reg4=1-reg4; reg1=1-reg1; reg6=reg6/0.57735026918962573106; reg3=1-reg3;
    T reg7=1-var_inter[2]; T reg8=reg3*reg4; reg6=1-reg6; reg5=1-reg5; reg4=reg4*reg1;
    reg1=reg1*reg6; T reg9=reg5*reg4; T reg10=reg7-0.21132486540518707896; T reg11=reg8*reg5; reg11=val[0]*reg11;
    reg9=val[1]*reg9; reg6=reg3*reg6; reg10=reg10/0.57735026918962573106; reg3=reg5*reg1; reg5=reg5*reg6;
    reg3=val[2]*reg3; reg10=1-reg10; reg9=reg11+reg9; reg3=reg9+reg3; reg5=val[3]*reg5;
    reg9=reg8*reg10; reg5=reg3+reg5; reg9=val[4]*reg9; reg3=reg4*reg10; reg9=reg5+reg9;
    reg3=val[5]*reg3; reg5=reg1*reg10; reg10=reg6*reg10; reg5=val[6]*reg5; reg3=reg9+reg3;
    reg5=reg3+reg5; reg10=val[7]*reg10; res=reg5+reg10;

}
#ifndef STRUCT_Gauss_2
#define STRUCT_Gauss_2
struct Gauss_2 {};
#endif // STRUCT_Gauss_2
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Gauss_2 &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=reg0-0.21132486540518707896; T reg2=1-var_inter[1]; T reg3=var_inter[0]-0.21132486540518707896; T reg4=var_inter[1]-0.21132486540518707896;
    T reg5=var_inter[2]-0.21132486540518707896; reg1=reg1/0.57735026918962573106; T reg6=reg2-0.21132486540518707896; reg4=reg4/0.57735026918962573106; reg3=reg3/0.57735026918962573106;
    reg5=reg5/0.57735026918962573106; reg4=1-reg4; reg1=1-reg1; reg6=reg6/0.57735026918962573106; reg3=1-reg3;
    T reg7=1-var_inter[2]; T reg8=reg3*reg4; reg6=1-reg6; reg5=1-reg5; reg4=reg4*reg1;
    reg1=reg1*reg6; T reg9=reg5*reg4; T reg10=reg7-0.21132486540518707896; T reg11=reg8*reg5; reg11=val[0]*reg11;
    reg9=val[1]*reg9; reg6=reg3*reg6; reg10=reg10/0.57735026918962573106; reg3=reg5*reg1; reg5=reg5*reg6;
    reg3=val[2]*reg3; reg10=1-reg10; reg9=reg11+reg9; reg3=reg9+reg3; reg5=val[3]*reg5;
    reg9=reg8*reg10; reg5=reg3+reg5; reg9=val[4]*reg9; reg3=reg4*reg10; reg9=reg5+reg9;
    reg3=val[5]*reg3; reg5=reg1*reg10; reg10=reg6*reg10; reg5=val[6]*reg5; reg3=reg9+reg3;
    reg5=reg3+reg5; reg10=val[7]*reg10; res=reg5+reg10;

}
#ifndef STRUCT_Flat_interpolation
#define STRUCT_Flat_interpolation
struct Flat_interpolation {};
#endif // STRUCT_Flat_interpolation
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Flat_interpolation &n,const TVI &var_inter,const TVAL &val,T &res) {
    T reg0=1-var_inter[0]; T reg1=reg0-0.21132486540518707896; T reg2=var_inter[1]-0.21132486540518707896; T reg3=var_inter[0]-0.21132486540518707896; T reg4=1-var_inter[1];
    T reg5=reg4-0.21132486540518707896; reg3=reg3/0.57735026918962573106; reg2=reg2/0.57735026918962573106; reg1=reg1/0.57735026918962573106; reg3=1-reg3;
    reg5=reg5/0.57735026918962573106; reg2=1-reg2; reg1=1-reg1; T reg6=reg2*reg1; reg5=1-reg5;
    reg2=reg3*reg2; reg1=reg1*reg5; T reg7=val[0]*reg2; T reg8=val[1]*reg6; reg5=reg3*reg5;
    reg8=reg7+reg8; reg3=val[2]*reg1; reg3=reg8+reg3; reg7=val[3]*reg5; res=reg3+reg7;

}
#ifndef STRUCT_Der_nodal
#define STRUCT_Der_nodal
struct Der_nodal {};
#endif // STRUCT_Der_nodal
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Der_nodal &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Elementary
#define STRUCT_Elementary
struct Elementary {};
#endif // STRUCT_Elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
#ifndef STRUCT_Skin_elementary
#define STRUCT_Skin_elementary
struct Skin_elementary {};
#endif // STRUCT_Skin_elementary
template<class TVI,class TVAL,class T> void get_interp(const Hexa &ne,const Skin_elementary &n,const TVI &var_inter,const TVAL &val,T &res) {
    res=val[0];

}
template<class TVI,class TVAL> void get_shape_functions(const Hexa &ne,const TVI &var_inter,TVAL &res) {
    typedef typename TVAL::template SubType<0>::T T;
    T reg0=1-var_inter[0]; T reg1=1-var_inter[1]; T reg2=var_inter[0]*var_inter[1]; T reg3=var_inter[1]*reg0; T reg4=var_inter[0]*reg1;
    T reg5=1-var_inter[2]; T reg6=reg0*reg1; T reg7=reg5*reg4; res[1]=reg7; T reg8=reg6*reg5;
    res[0]=reg8; T reg9=var_inter[2]*reg3; res[7]=reg9; T reg10=var_inter[2]*reg2; res[6]=reg10;
    reg4=var_inter[2]*reg4; res[5]=reg4; reg6=var_inter[2]*reg6; res[4]=reg6; reg3=reg3*reg5;
    res[3]=reg3; reg2=reg2*reg5; res[2]=reg2;

}
#ifndef AUTORIZEDPERM
#define AUTORIZEDPERM
template<class T> struct AuthorizedPerm;
#endif // AUTORIZEDPERM
template<> struct AuthorizedPerm<Hexa> {
    static const unsigned nb_permutations = 23;
    template<class TE> static void make_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
    template<class TE> static void unmake_permutation( TE &e, unsigned nb_perm ) {
        if ( nb_perm == 0 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[0],e.nodes[3],e.nodes[2],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 1 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[7],e.nodes[6],e.nodes[2],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 2 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[1],e.nodes[2],e.nodes[6],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 3 ) {
            typename TE::TNode *tmp[] = {e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[7],e.nodes[5],e.nodes[1],e.nodes[2],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 4 ) {
            typename TE::TNode *tmp[] = {e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[1],e.nodes[3],e.nodes[7],e.nodes[6],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 5 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[7],e.nodes[4],e.nodes[5],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 6 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[3],e.nodes[2],e.nodes[1],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 7 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[3],e.nodes[6],e.nodes[5],e.nodes[1],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 8 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[0],e.nodes[1],e.nodes[5],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 9 ) {
            typename TE::TNode *tmp[] = {e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[6],e.nodes[4],e.nodes[0],e.nodes[1],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 10 ) {
            typename TE::TNode *tmp[] = {e.nodes[3],e.nodes[7],e.nodes[4],e.nodes[0],e.nodes[2],e.nodes[6],e.nodes[5],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 11 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[1],e.nodes[6],e.nodes[7],e.nodes[4],e.nodes[5]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 12 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[2],e.nodes[1],e.nodes[0],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 13 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[2],e.nodes[5],e.nodes[4],e.nodes[0],e.nodes[1]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 14 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[3],e.nodes[0],e.nodes[4],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 15 ) {
            typename TE::TNode *tmp[] = {e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[5],e.nodes[7],e.nodes[3],e.nodes[0],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 16 ) {
            typename TE::TNode *tmp[] = {e.nodes[2],e.nodes[6],e.nodes[7],e.nodes[3],e.nodes[1],e.nodes[5],e.nodes[4],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 17 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[2],e.nodes[3],e.nodes[0],e.nodes[5],e.nodes[6],e.nodes[7],e.nodes[4]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 18 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[4],e.nodes[7],e.nodes[6],e.nodes[1],e.nodes[0],e.nodes[3],e.nodes[2]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 19 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[1],e.nodes[4],e.nodes[7],e.nodes[3],e.nodes[0]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 20 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[5],e.nodes[2],e.nodes[3],e.nodes[7],e.nodes[6]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 21 ) {
            typename TE::TNode *tmp[] = {e.nodes[5],e.nodes[1],e.nodes[0],e.nodes[4],e.nodes[6],e.nodes[2],e.nodes[3],e.nodes[7]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
        if ( nb_perm == 22 ) {
            typename TE::TNode *tmp[] = {e.nodes[1],e.nodes[5],e.nodes[6],e.nodes[2],e.nodes[0],e.nodes[4],e.nodes[7],e.nodes[3]};
            for(unsigned i=0;i<8;++i) e.nodes[i] = tmp[i];
            return;
        }
    }
};

template<class TN,class TNG,class TD,unsigned NET,class TVI>
typename TNG::T get_det_jac( const Element<Hexa,TN,TNG,TD,NET> &elem, const TVI &var_inter ) {
    typedef typename TNG::T T;
    T reg0=1-var_inter[1]; T reg1=1-var_inter[2]; T reg2=1-var_inter[0]; T reg3=reg2*reg1; T reg4=reg2*reg0;
    T reg5=var_inter[0]*reg0; T reg6=var_inter[0]*reg1; T reg7=reg0*reg1; T reg8=elem.pos(1)[1]*reg7; T reg9=elem.pos(1)[2]*reg7;
    T reg10=elem.pos(1)[2]*reg5; T reg11=elem.pos(0)[2]*reg7; T reg12=elem.pos(0)[1]*reg7; T reg13=elem.pos(1)[2]*reg6; T reg14=elem.pos(0)[1]*reg3;
    T reg15=elem.pos(1)[1]*reg6; T reg16=elem.pos(0)[1]*reg4; T reg17=elem.pos(0)[2]*reg3; T reg18=var_inter[1]*reg1; T reg19=var_inter[0]*var_inter[1];
    T reg20=elem.pos(1)[1]*reg5; T reg21=elem.pos(0)[2]*reg4; T reg22=elem.pos(2)[2]*reg6; T reg23=reg13+reg17; T reg24=reg16+reg20;
    T reg25=reg10+reg21; T reg26=elem.pos(2)[1]*reg6; T reg27=reg14+reg15; reg8=reg8-reg12; T reg28=elem.pos(2)[1]*reg18;
    T reg29=elem.pos(2)[2]*reg19; T reg30=elem.pos(2)[1]*reg19; T reg31=elem.pos(2)[2]*reg18; reg9=reg9-reg11; T reg32=var_inter[1]*reg2;
    T reg33=var_inter[2]*reg0; T reg34=reg32*elem.pos(3)[2]; T reg35=reg3*elem.pos(3)[1]; T reg36=elem.pos(0)[0]*reg7; T reg37=elem.pos(1)[0]*reg7;
    reg26=reg26-reg27; T reg38=reg3*elem.pos(0)[0]; T reg39=reg18*elem.pos(3)[1]; reg28=reg8+reg28; reg9=reg31+reg9;
    reg8=reg18*elem.pos(3)[2]; reg31=var_inter[2]*reg2; T reg40=reg3*elem.pos(3)[2]; reg22=reg22-reg23; T reg41=elem.pos(1)[0]*reg6;
    T reg42=reg32*elem.pos(3)[1]; T reg43=reg30+reg24; T reg44=reg29+reg25; T reg45=elem.pos(2)[0]*reg18; reg40=reg22+reg40;
    reg22=elem.pos(4)[2]*reg4; reg9=reg9-reg8; reg28=reg28-reg39; T reg46=var_inter[0]*var_inter[2]; T reg47=reg41+reg38;
    T reg48=elem.pos(4)[1]*reg33; T reg49=elem.pos(4)[2]*reg31; T reg50=elem.pos(4)[1]*reg31; T reg51=reg44+reg34; reg37=reg37-reg36;
    T reg52=reg4*elem.pos(4)[1]; T reg53=elem.pos(1)[0]*reg5; T reg54=elem.pos(2)[0]*reg6; T reg55=reg43+reg42; T reg56=reg4*elem.pos(0)[0];
    reg35=reg26+reg35; reg26=elem.pos(4)[2]*reg33; T reg57=elem.pos(5)[2]*reg33; reg9=reg9-reg26; T reg58=reg56+reg53;
    T reg59=var_inter[1]*var_inter[2]; T reg60=elem.pos(2)[0]*reg19; reg52=reg52-reg55; reg28=reg28-reg48; reg37=reg45+reg37;
    reg45=reg18*elem.pos(3)[0]; reg40=reg40-reg49; T reg61=elem.pos(5)[2]*reg46; T reg62=elem.pos(5)[2]*reg5; reg22=reg22-reg51;
    T reg63=elem.pos(5)[1]*reg5; reg35=reg35-reg50; T reg64=elem.pos(5)[1]*reg46; T reg65=elem.pos(5)[1]*reg33; T reg66=reg3*elem.pos(3)[0];
    reg54=reg54-reg47; reg40=reg40-reg61; T reg67=elem.pos(4)[0]*reg31; reg35=reg35-reg64; reg66=reg54+reg66;
    reg54=elem.pos(6)[2]*reg46; T reg68=reg32*elem.pos(3)[0]; T reg69=reg58+reg60; T reg70=elem.pos(6)[1]*reg46; T reg71=elem.pos(6)[1]*reg59;
    T reg72=reg19*elem.pos(6)[2]; T reg73=reg19*elem.pos(6)[1]; reg52=reg63+reg52; reg57=reg9+reg57; reg65=reg28+reg65;
    reg9=elem.pos(4)[0]*reg33; reg28=elem.pos(6)[2]*reg59; reg37=reg37-reg45; reg22=reg62+reg22; reg54=reg40+reg54;
    reg40=reg68+reg69; reg62=elem.pos(7)[1]*reg31; reg35=reg70+reg35; reg66=reg66-reg67; reg37=reg37-reg9;
    reg63=elem.pos(4)[0]*reg4; reg71=reg65+reg71; reg65=elem.pos(7)[1]*reg59; reg70=reg32*elem.pos(7)[1]; T reg74=elem.pos(5)[0]*reg33;
    reg73=reg52+reg73; reg52=elem.pos(7)[2]*reg31; reg72=reg22+reg72; reg22=elem.pos(5)[0]*reg46; T reg75=elem.pos(7)[2]*reg59;
    reg57=reg28+reg57; reg28=reg32*elem.pos(7)[2]; reg63=reg63-reg40; reg28=reg72+reg28; reg66=reg66-reg22;
    reg72=elem.pos(6)[0]*reg46; T reg76=elem.pos(5)[0]*reg5; reg71=reg71-reg65; reg70=reg73+reg70; reg57=reg57-reg75;
    reg62=reg35+reg62; reg74=reg37+reg74; reg35=elem.pos(6)[0]*reg59; reg52=reg54+reg52; reg37=elem.pos(7)[0]*reg59;
    reg74=reg35+reg74; reg35=reg57*reg70; reg63=reg76+reg63; reg54=elem.pos(6)[0]*reg19; reg73=reg52*reg70;
    reg76=reg28*reg62; T reg77=elem.pos(7)[0]*reg31; reg72=reg66+reg72; reg66=reg28*reg71; reg35=reg66-reg35;
    reg66=reg32*elem.pos(7)[0]; reg73=reg76-reg73; reg54=reg63+reg54; reg74=reg74-reg37; reg63=reg52*reg71;
    reg76=reg57*reg62; reg77=reg72+reg77; reg76=reg63-reg76; reg54=reg66+reg54; reg63=reg73*reg74;
    reg66=reg35*reg77; reg66=reg63-reg66; reg63=reg54*reg76; reg66=reg63+reg66; return reg66;

}
template<class TN,class T,class TNodalStaticData,class TD,unsigned NET>
Vec<T,3> barycenter( const Element<Hexa,TN,Node<3,T,TNodalStaticData>,TD,NET> &elem ) {
    Vec<T,3> res;
    T reg0=elem.pos(1)[2]-elem.pos(0)[2]; T reg1=elem.pos(1)[1]-elem.pos(0)[1]; T reg2=elem.pos(2)[1]-reg1; T reg3=elem.pos(2)[2]-reg0; T reg4=reg0-elem.pos(2)[2];
    T reg5=reg1-elem.pos(2)[1]; reg3=reg3-elem.pos(3)[2]; reg2=reg2-elem.pos(3)[1]; reg4=reg4+elem.pos(3)[2]; reg5=reg5+elem.pos(3)[1];
    reg4=reg4+elem.pos(4)[2]; reg5=reg5+elem.pos(4)[1]; T reg6=reg3-elem.pos(4)[2]; T reg7=reg2-elem.pos(4)[1]; T reg8=elem.pos(1)[0]-elem.pos(0)[0];
    reg6=elem.pos(5)[2]+reg6; reg7=elem.pos(5)[1]+reg7; reg4=reg4-elem.pos(5)[2]; T reg9=elem.pos(0)[2]-elem.pos(3)[2]; reg5=reg5-elem.pos(5)[1];
    T reg10=elem.pos(0)[1]-elem.pos(3)[1]; T reg11=elem.pos(3)[1]-elem.pos(0)[1]; T reg12=reg8-elem.pos(2)[0]; T reg13=elem.pos(3)[2]-elem.pos(0)[2]; T reg14=elem.pos(0)[1]-elem.pos(1)[1];
    T reg15=elem.pos(0)[2]-elem.pos(1)[2]; T reg16=elem.pos(2)[0]-reg8; T reg17=elem.pos(4)[1]+reg1; T reg18=reg15-elem.pos(4)[2]; T reg19=reg11+elem.pos(4)[1];
    reg6=elem.pos(6)[2]-reg6; reg7=elem.pos(6)[1]-reg7; T reg20=elem.pos(4)[2]+reg0; reg4=elem.pos(6)[2]+reg4; reg9=reg9-elem.pos(4)[2];
    reg5=elem.pos(6)[1]+reg5; T reg21=reg14-elem.pos(4)[1]; reg10=reg10-elem.pos(4)[1]; reg12=reg12+elem.pos(3)[0]; reg14=elem.pos(2)[1]+reg14;
    T reg22=reg13+elem.pos(4)[2]; reg15=elem.pos(2)[2]+reg15; reg4=reg4-elem.pos(7)[2]; reg10=elem.pos(7)[1]+reg10; T reg23=elem.pos(7)[2]-reg22;
    T reg24=elem.pos(5)[2]-reg20; T reg25=elem.pos(4)[2]-elem.pos(0)[2]; T reg26=elem.pos(4)[1]-elem.pos(0)[1]; T reg27=elem.pos(5)[1]-reg17; T reg28=elem.pos(7)[1]-reg19;
    reg16=reg16-elem.pos(3)[0]; reg6=reg6-elem.pos(7)[2]; reg7=reg7-elem.pos(7)[1]; reg9=elem.pos(7)[2]+reg9; reg5=reg5-elem.pos(7)[1];
    reg12=reg12+elem.pos(4)[0]; reg15=reg15-elem.pos(3)[2]; reg14=reg14-elem.pos(3)[1]; reg21=elem.pos(5)[1]+reg21; reg18=elem.pos(5)[2]+reg18;
    T reg29=elem.pos(0)[0]-elem.pos(1)[0]; reg12=reg12-elem.pos(5)[0]; T reg30=elem.pos(0)[0]-elem.pos(3)[0]; T reg31=reg14*reg6; T reg32=reg15*reg7;
    T reg33=reg5*reg6; T reg34=reg4*reg7; T reg35=reg10*reg24; T reg36=reg27*reg9; T reg37=reg11*reg24;
    T reg38=reg25*reg2; T reg39=reg13*reg27; T reg40=reg26*reg3; T reg41=reg23*reg2; T reg42=reg11*reg6;
    T reg43=reg28*reg3; T reg44=reg13*reg7; T reg45=reg10*reg6; T reg46=reg7*reg9; T reg47=reg24*reg2;
    T reg48=reg27*reg3; T reg49=reg2*reg6; T reg50=reg3*reg7; T reg51=reg14*reg25; T reg52=reg23*reg1;
    T reg53=reg15*reg26; T reg54=reg28*reg0; T reg55=reg5*reg25; T reg56=reg23*reg21; T reg57=reg4*reg26;
    T reg58=reg28*reg18; T reg59=reg14*reg23; T reg60=reg15*reg28; T reg61=reg5*reg23; T reg62=reg4*reg28;
    T reg63=reg14*reg24; T reg64=reg6*reg1; T reg65=reg15*reg27; T reg66=reg7*reg0; T reg67=reg16-elem.pos(4)[0];
    T reg68=reg5*reg24; T reg69=reg6*reg21; T reg70=reg4*reg27; T reg71=reg7*reg18; reg36=reg57+reg36;
    reg35=reg55+reg35; reg56=reg55+reg56; reg58=reg57+reg58; reg55=reg14*reg9; reg57=reg5*reg13;
    reg34=2*reg34; T reg72=reg15*reg10; T reg73=reg4*reg11; reg33=2*reg33; reg32=2*reg32;
    reg59=2*reg59; reg60=2*reg60; reg31=2*reg31; T reg74=2*reg61; T reg75=2*reg62;
    T reg76=reg4*reg21; T reg77=reg4*reg2; T reg78=reg5*reg18; T reg79=reg15*reg5; T reg80=reg5*reg3;
    T reg81=reg14*reg4; T reg82=reg4*reg1; T reg83=reg3*reg21; reg71=reg70+reg71; T reg84=reg5*reg0;
    T reg85=reg2*reg18; reg69=reg68+reg69; reg64=reg63+reg64; reg66=reg65+reg66; reg67=reg67+elem.pos(5)[0];
    reg63=elem.pos(2)[0]+reg29; reg29=reg29-elem.pos(4)[0]; reg12=elem.pos(6)[0]+reg12; reg50=2*reg50; reg49=2*reg49;
    reg65=reg10*reg18; T reg86=reg9*reg21; reg48=2*reg48; reg47=2*reg47; reg30=reg30-elem.pos(4)[0];
    reg70=2*reg70; reg68=2*reg68; reg46=reg62+reg46; reg62=elem.pos(3)[0]-elem.pos(0)[0]; reg38=reg37+reg38;
    reg54=reg53+reg54; reg52=reg51+reg52; reg40=reg39+reg40; reg42=reg41+reg42; reg37=reg11*reg18;
    reg39=reg10*reg0; reg44=reg43+reg44; reg41=reg13*reg21; reg43=reg9*reg1; reg45=reg61+reg45;
    reg70=reg68-reg70; reg80=reg81+reg80; reg77=reg79+reg77; reg71=reg69-reg71; reg48=reg47-reg48;
    reg34=reg33-reg34; reg40=reg38-reg40; reg46=reg45-reg46; reg32=reg31-reg32; reg44=reg42-reg44;
    reg50=reg49-reg50; reg36=reg35-reg36; reg67=elem.pos(6)[0]-reg67; reg54=reg52-reg54; reg31=reg13*reg28;
    reg33=reg11*reg23; reg37=reg39+reg37; reg41=reg43+reg41; reg35=reg26*reg0; reg38=reg25*reg1;
    reg39=reg26*reg13; reg42=reg25*reg11; reg43=reg26*reg18; reg45=reg25*reg21; reg30=elem.pos(7)[0]+reg30;
    reg47=reg26*reg9; reg49=reg10*reg25; reg65=2*reg65; reg75=reg74-reg75; reg12=reg12-elem.pos(7)[0];
    reg63=reg63-elem.pos(3)[0]; reg66=reg64-reg66; reg85=reg84+reg85; reg83=reg82+reg83; reg51=reg27*reg0;
    reg52=reg24*reg1; reg53=reg27*reg18; reg61=reg24*reg21; reg78=2*reg78; reg76=2*reg76;
    reg64=elem.pos(4)[0]+reg8; reg60=reg59-reg60; reg59=reg4*reg10; reg68=reg5*reg9; reg73=reg72+reg73;
    reg57=reg55+reg57; reg58=reg56-reg58; reg9=reg28*reg9; reg10=reg10*reg23; reg55=reg62+elem.pos(4)[0];
    reg29=elem.pos(5)[0]+reg29; reg86=2*reg86; reg56=reg3*reg1; reg85=reg83-reg85; reg51=reg52-reg51;
    reg53=reg61-reg53; reg78=reg76-reg78; reg52=elem.pos(5)[0]-reg64; reg61=reg75*reg16; reg69=reg62*reg34;
    reg59=2*reg59; reg68=2*reg68; reg72=reg12*reg60; reg73=reg57-reg73; reg57=reg34*reg8;
    reg74=reg63*reg70; reg76=reg12*reg48; reg79=reg50*reg29; reg81=reg30*reg32; reg82=reg16*reg71;
    reg83=reg12*reg66; reg84=reg12*reg36; T reg87=reg46*reg29; T reg88=reg12*reg58; T reg89=reg30*reg66;
    T reg90=reg12*reg54; T reg91=reg62*reg71; T reg92=reg58*reg16; T reg93=reg30*reg71; T reg94=reg44*reg29;
    T reg95=reg12*reg40; T reg96=reg63*reg36; T reg97=reg46*reg8; T reg98=reg63*reg46; reg77=reg80-reg77;
    reg80=reg12*reg44; reg67=reg67-elem.pos(7)[0]; T reg99=reg15*reg2; T reg100=reg14*reg3; T reg101=reg2*reg0;
    T reg102=reg63*reg34; reg39=reg42-reg39; reg35=reg38-reg35; reg37=reg41-reg37; reg38=reg13*reg1;
    reg41=reg11*reg0; reg31=reg33-reg31; reg33=reg14*reg13; reg42=reg15*reg11; T reg103=elem.pos(7)[0]-reg55;
    reg9=reg10-reg9; reg10=reg12*reg50; reg43=reg45-reg43; reg45=elem.pos(4)[0]-elem.pos(0)[0]; T reg104=reg12*reg70;
    T reg105=reg34*reg29; reg47=reg49-reg47; reg65=reg86-reg65; reg49=reg12*reg32; reg86=reg16*reg34;
    T reg106=reg30*reg51; T reg107=reg12*reg35; T reg108=reg12*reg51; T reg109=reg12*reg75; reg86=2*reg86;
    reg84=reg87+reg84; reg87=reg53*reg16; T reg110=reg37*reg67; T reg111=reg103*reg85; T reg112=reg30*reg53;
    T reg113=reg77*reg45; T reg114=reg12*reg43; T reg115=reg73*reg52; reg89=reg90+reg89; reg90=reg30*reg34;
    T reg116=reg73*reg67; T reg117=reg65*reg67; T reg118=reg103*reg78; reg93=reg88+reg93; reg91=reg92+reg91;
    reg96=reg97+reg96; reg10=2*reg10; reg94=reg95+reg94; reg88=reg12*reg31; reg92=reg12*reg71;
    reg95=reg63*reg9; reg59=reg68-reg59; reg68=reg9*reg8; reg69=reg61+reg69; reg61=reg12*reg47;
    reg97=reg9*reg29; T reg119=reg63*reg47; T reg120=reg103*reg77; T reg121=reg12*reg39; reg74=reg57+reg74;
    reg57=reg85*reg67; T reg122=reg31*reg29; reg79=reg76+reg79; reg76=reg52*reg77; reg82=2*reg82;
    reg81=reg72+reg81; reg83=2*reg83; reg72=reg43*reg16; T reg123=reg62*reg53; reg102=2*reg102;
    reg98=2*reg98; reg104=reg105+reg104; reg99=reg100-reg99; reg101=reg56-reg101; reg41=reg38-reg41;
    reg42=reg33-reg42; reg80=2*reg80; reg49=2*reg49; reg33=reg62*reg32; reg38=reg60*reg16;
    reg116=reg120+reg116; reg117=reg118+reg117; reg80=reg98+reg80; reg56=reg103*reg99; reg84=2*reg84;
    reg98=reg59*reg52; reg81=reg69+reg81; reg93=2*reg93; reg69=reg42*reg67; reg100=reg75*reg62;
    reg105=reg30*reg60; reg119=reg68+reg119; reg122=reg121+reg122; reg68=reg62*reg58; reg118=reg30*reg54;
    reg61=reg97+reg61; reg58=reg30*reg58; reg95=2*reg95; reg88=2*reg88; reg9=reg12*reg9;
    reg75=reg75*reg30; reg97=reg63*reg44; reg120=reg36*reg8; reg121=reg40*reg29; reg72=reg123+reg72;
    reg107=reg106+reg107; reg36=reg36*reg29; reg114=reg112+reg114; reg44=reg44*reg8; reg106=reg63*reg40;
    reg112=reg54*reg16; reg123=reg62*reg66; T reg124=reg42*reg52; T reg125=reg99*reg45; T reg126=reg103*reg101;
    T reg127=reg41*reg67; reg94=reg96+reg94; reg89=reg91+reg89; reg113=reg115+reg113; reg110=reg111+reg110;
    reg91=reg63*reg50; reg90=reg109+reg90; reg108=2*reg108; reg46=reg12*reg46; reg96=reg78*reg67;
    reg109=reg12*reg53; reg111=reg16*reg32; reg50=reg50*reg8; reg115=reg63*reg48; T reg128=4*reg92;
    T reg129=reg16*reg66; reg104=2*reg104; T reg130=reg101*reg67; reg87=2*reg87; T reg131=reg70*reg29;
    reg57=2*reg57; T reg132=reg67*reg77; reg79=reg74+reg79; reg74=reg48*reg29; reg70=reg70*reg8;
    reg83=reg82+reg83; reg10=reg102+reg10; reg82=reg52*reg99; reg76=2*reg76; reg49=reg86+reg49;
    reg86=reg16*reg51; reg57=reg76+reg57; reg122=reg119+reg122; reg96=2*reg96; reg83=reg79-reg83;
    reg107=reg72+reg107; reg128=reg104-reg128; reg72=4*reg109; reg118=reg68+reg118; reg93=reg84-reg93;
    reg114=2*reg114; reg68=reg59*reg67; reg121=reg120+reg121; reg76=reg52*reg78; reg79=reg47*reg29;
    reg106=reg44+reg106; reg44=reg30*reg43; reg123=reg112+reg123; reg125=reg124+reg125; reg47=reg47*reg8;
    reg84=4*reg132; reg127=reg126+reg127; reg102=reg39*reg29; reg43=reg43*reg62; reg104=reg52*reg85;
    reg30=reg30*reg35; reg112=reg99*reg67; reg119=reg35*reg16; reg120=reg62*reg51; reg111=2*reg111;
    reg91=2*reg91; reg124=reg31*reg8; reg89=reg94-reg89; reg131=2*reg131; reg94=reg63*reg39;
    reg108=reg87+reg108; reg110=reg113+reg110; reg87=reg78*reg45; reg113=reg103*reg73; reg97=2*reg97;
    reg90=2*reg90; reg33=reg38+reg33; reg46=4*reg46; reg69=reg56+reg69; reg105=reg100+reg105;
    reg36=2*reg36; reg88=reg95+reg88; reg115=reg50+reg115; reg130=2*reg130; reg61=2*reg61;
    reg82=2*reg82; reg58=2*reg58; reg81=reg80-reg81; reg116=2*reg116; reg129=2*reg129;
    reg38=reg59*reg45; reg50=reg65*reg103; reg31=reg63*reg31; reg56=reg65*reg52; reg49=reg10-reg49;
    reg117=reg98+reg117; reg10=reg85*reg45; reg80=reg37*reg52; reg59=reg103*reg59; reg75=2*reg75;
    reg9=4*reg9; reg74=reg70+reg74; reg70=reg37*reg103; reg73=reg73*reg45; reg56=reg87+reg56;
    reg70=reg73+reg70; reg73=4*reg112; reg84=reg49+reg84; reg102=reg47+reg102; reg58=reg61-reg58;
    reg47=reg101*reg45; reg127=reg125+reg127; reg107=reg121-reg107; reg129=reg115-reg129; reg60=reg62*reg60;
    reg117=reg93+reg117; reg104=2*reg104; reg116=reg81+reg116; reg123=reg106-reg123; reg68=2*reg68;
    reg44=2*reg44; reg48=reg48*reg8; reg90=reg46-reg90; reg50=reg38+reg50; reg76=2*reg76;
    reg38=reg41*reg52; reg79=2*reg79; reg31=2*reg31; reg118=reg122-reg118; reg113=2*reg113;
    reg57=reg83+reg57; reg46=reg42*reg45; reg128=reg96+reg128; reg80=reg10+reg80; reg110=reg89+reg110;
    reg33=reg97-reg33; reg54=reg62*reg54; reg94=reg124+reg94; reg10=reg41*reg103; reg69=2*reg69;
    reg108=reg74-reg108; reg105=reg88-reg105; reg75=reg9-reg75; reg114=reg36-reg114; reg86=2*reg86;
    reg59=2*reg59; reg111=reg91-reg111; reg40=reg40*reg8; reg130=reg82+reg130; reg9=reg52*reg101;
    reg72=reg131-reg72; reg119=reg120+reg119; reg30=reg43+reg30; reg42=reg42*reg103; reg65=reg65*reg45;
    reg104=reg108+reg104; reg80=reg107+reg80; reg50=reg58+reg50; reg60=reg31-reg60; reg42=2*reg42;
    reg70=reg118+reg70; reg113=reg105+reg113; reg130=reg129+reg130; reg31=reg7*reg110; reg36=reg28*reg57;
    reg59=reg75+reg59; reg43=reg27*reg116; reg49=reg26*reg84; reg58=reg2*reg117; reg61=reg11*reg128;
    reg9=2*reg9; reg86=reg48-reg86; reg72=reg76+reg72; reg10=reg46+reg10; reg46=reg62*reg128;
    reg54=reg94-reg54; reg48=reg16*reg117; reg35=reg62*reg35; reg39=reg39*reg8; reg37=reg37*reg45;
    reg30=reg102-reg30; reg74=reg84*reg45; reg73=reg111+reg73; reg44=reg79-reg44; reg75=reg52*reg116;
    reg76=reg103*reg57; reg69=reg33+reg69; reg33=reg24*reg116; reg79=reg23*reg57; reg127=reg123+reg127;
    reg81=reg6*reg110; reg82=reg25*reg84; reg114=reg56+reg114; reg56=reg3*reg117; reg83=reg13*reg128;
    reg119=reg40-reg119; reg38=reg47+reg38; reg40=reg67*reg110; reg68=reg90+reg68; reg47=reg70*reg6;
    reg87=elem.pos(0)[0]*reg68; reg88=reg25*reg73; reg89=reg28*reg130; reg90=reg24*reg69; reg91=reg27*reg69;
    reg79=reg81+reg79; reg93=reg23*reg130; reg94=reg23*reg110; reg95=reg7*reg127; reg96=reg84*elem.pos(0)[1];
    reg41=reg41*reg45; reg82=reg33+reg82; reg97=reg59*reg8; reg35=reg39-reg35; reg37=reg30+reg37;
    reg83=reg56+reg83; reg30=reg68*elem.pos(0)[1]; reg39=reg59*reg1; reg98=reg116*reg1; reg100=reg11*reg117;
    reg102=reg50*reg2; reg105=reg28*reg128; reg106=reg62*reg72; reg107=reg6*reg80; reg108=reg23*reg104;
    reg36=reg31+reg36; reg111=reg103*reg128; reg115=reg67*reg117; reg118=reg117*reg0; reg120=reg128*elem.pos(0)[2];
    reg121=reg52*reg69; reg122=reg3*reg114; reg123=reg13*reg72; reg124=reg25*reg57; reg125=reg68*elem.pos(0)[2];
    reg126=reg59*reg0; reg129=reg24*reg110; reg10=reg54+reg10; reg54=reg13*reg117; reg131=reg50*reg3;
    T reg133=reg16*reg114; T reg134=reg25*reg116; T reg135=reg113*reg24; T reg136=reg3*reg110; T reg137=reg13*reg57;
    T reg138=reg116*reg0; T reg139=reg84*elem.pos(0)[2]; T reg140=reg68*reg8; T reg141=reg28*reg84; T reg142=reg7*reg116;
    T reg143=reg26*reg73; reg46=reg48+reg46; T reg144=reg6*reg127; reg76=reg40+reg76; T reg145=reg70*reg67;
    T reg146=reg103*reg110; T reg147=reg7*reg80; reg38=reg119+reg38; reg119=reg28*reg104; T reg148=reg27*reg84;
    T reg149=reg52*reg110; T reg150=reg7*reg57; T reg151=reg73*reg45; T reg152=reg62*reg57; T reg153=elem.pos(0)[0]*reg128;
    T reg154=reg16*reg110; T reg155=reg117*reg1; T reg156=reg128*elem.pos(0)[1]; T reg157=reg117*reg8; T reg158=reg57*reg45;
    T reg159=reg2*reg114; T reg160=reg11*reg72; T reg161=reg52*reg84; T reg162=reg67*reg116; T reg163=reg67*reg80;
    T reg164=reg103*reg84; T reg165=reg103*reg104; T reg166=reg68*reg1; T reg167=reg67*reg57; reg61=reg58+reg61;
    T reg168=reg24*reg84; reg49=reg43+reg49; T reg169=reg6*reg57; T reg170=reg11*reg57; T reg171=reg6*reg117;
    reg74=reg75+reg74; T reg172=reg28*reg110; T reg173=reg23*reg128; T reg174=reg2*reg110; T reg175=reg62*reg117;
    T reg176=reg67*reg127; T reg177=reg50*reg16; T reg178=reg7*reg117; T reg179=reg70*reg7; T reg180=reg68*reg0;
    reg42=reg60+reg42; reg60=reg113*reg27; T reg181=elem.pos(0)[0]*reg84; T reg182=reg26*reg116; reg9=reg86+reg9;
    reg44=reg65+reg44; reg65=reg23*reg84; reg86=reg103*reg130; T reg183=reg6*reg116; T reg184=reg116*reg45;
    T reg185=reg116*reg8; T reg186=reg113*reg52; T reg187=reg27*reg110; T reg188=reg26*reg57; T reg189=2*reg168;
    reg49=reg43+reg49; reg43=reg57*elem.pos(0)[2]; T reg190=reg110*reg0; T reg191=reg13*reg68; T reg192=reg59*reg3;
    T reg193=reg113*reg6; T reg194=reg25*reg68; T reg195=reg23*reg116; reg36=reg31+reg36; reg31=reg70*reg24;
    T reg196=reg7*reg114; T reg197=reg25*reg110; T reg198=reg23*reg80; T reg199=reg28*reg72; T reg200=reg37*reg6;
    T reg201=reg50*reg0; T reg202=reg117*elem.pos(0)[2]; T reg203=reg44*reg3; T reg204=reg13*reg114; T reg205=reg70*reg3;
    T reg206=reg13*reg110; T reg207=reg113*reg0; T reg208=reg116*elem.pos(0)[2]; T reg209=reg23*reg127; T reg210=reg10*reg6;
    T reg211=reg42*reg24; reg170=reg174+reg170; T reg212=reg25*reg69; reg96=reg98+reg96; reg89=reg95+reg89;
    reg143=reg91+reg143; reg47=reg94+reg47; reg134=reg135+reg134; reg54=reg131+reg54; reg125=reg126+reg125;
    reg94=reg23*reg117; reg126=reg50*reg6; reg131=reg59*reg24; reg135=reg2*reg128; T reg213=reg3*reg72;
    T reg214=reg128*reg0; T reg215=reg16*reg128; reg152=reg154+reg152; T reg216=reg6*reg104; T reg217=reg24*reg57;
    reg65=reg65+reg183; T reg218=reg23*reg73; reg181=reg185+reg181; T reg219=reg6*reg69; T reg220=reg13*reg84;
    T reg221=reg3*reg116; T reg222=reg24*reg68; reg173=reg171+reg173; reg180=2*reg180; reg86=reg176+reg86;
    T reg223=reg103*reg72; reg83=reg56+reg83; reg56=reg24*reg73; T reg224=2*reg169; T reg225=reg3*reg128;
    T reg226=reg2*reg72; T reg227=reg128*reg1; reg164=reg162+reg164; T reg228=reg7*reg104; T reg229=reg27*reg57;
    T reg230=2*reg167; T reg231=2*reg161; T reg232=reg2*reg57; T reg233=reg6*reg130; T reg234=reg84*reg1;
    T reg235=reg84*reg0; T reg236=reg7*reg130; T reg237=reg27*reg73; T reg238=reg3*reg57; T reg239=2*reg150;
    T reg240=2*reg148; T reg241=reg11*reg84; T reg242=reg2*reg116; reg123=reg122+reg123; reg120=reg118+reg120;
    reg108=reg107+reg108; T reg243=reg62*reg84; T reg244=reg16*reg116; reg124=reg129+reg124; T reg245=reg23*reg9;
    T reg246=reg6*reg38; T reg247=reg27*reg68; reg105=reg178+reg105; T reg248=reg25*reg130; reg153=reg157+reg153;
    reg166=2*reg166; T reg249=reg24*reg127; reg61=reg58+reg61; reg58=reg13*reg104; T reg250=reg3*reg80;
    reg82=reg33+reg82; reg41=reg35+reg41; reg33=reg67*reg114; reg35=reg103*reg73; T reg251=reg67*reg69;
    reg79=reg81+reg79; reg88=reg90+reg88; reg81=reg128*reg45; T reg252=reg52*reg117; reg93=reg144+reg93;
    reg141=reg141+reg142; reg139=reg138+reg139; reg137=reg136+reg137; T reg253=reg23*reg72; T reg254=reg28*reg73;
    T reg255=reg6*reg114; T reg256=reg25*reg128; T reg257=reg24*reg117; T reg258=reg7*reg69; reg106=reg133+reg106;
    T reg259=reg28*reg117; reg74=reg75+reg74; reg30=reg39+reg30; reg100=reg102+reg100; reg182=reg60+reg182;
    reg179=reg172+reg179; reg39=reg26*reg69; reg60=reg42*reg27; reg75=reg10*reg7; reg102=reg28*reg127;
    reg172=reg116*elem.pos(0)[1]; T reg260=reg113*reg1; T reg261=reg11*reg110; T reg262=reg70*reg2; reg76=reg40+reg76;
    reg40=reg11*reg114; T reg263=reg44*reg2; T reg264=reg117*elem.pos(0)[1]; T reg265=reg50*reg1; T reg266=reg16*reg72;
    T reg267=reg103*reg9; T reg268=reg67*reg38; T reg269=reg52*reg68; T reg270=reg11*reg68; T reg271=reg59*reg2;
    T reg272=reg130*reg45; T reg273=reg52*reg127; T reg274=reg113*reg7; T reg275=reg28*reg116; reg140=2*reg140;
    reg46=reg48+reg46; reg48=reg62*reg104; T reg276=reg16*reg80; T reg277=elem.pos(0)[0]*reg57; T reg278=reg110*reg8;
    T reg279=reg26*reg68; T reg280=reg59*reg27; T reg281=reg50*reg7; T reg282=reg50*reg8; T reg283=reg59*reg52;
    T reg284=reg103*reg117; T reg285=reg50*reg67; reg87=reg97+reg87; reg97=elem.pos(0)[0]*reg117; T reg286=reg44*reg16;
    T reg287=reg62*reg114; T reg288=reg70*reg16; T reg289=reg62*reg110; T reg290=reg113*reg8; reg175=reg177+reg175;
    reg184=reg186+reg184; reg145=reg146+reg145; reg146=reg69*reg45; reg177=elem.pos(0)[0]*reg116; reg186=reg103*reg127;
    T reg291=reg10*reg67; T reg292=reg42*reg52; T reg293=reg37*reg7; T reg294=reg28*reg80; T reg295=reg26*reg110;
    T reg296=reg70*reg27; T reg297=reg16*reg57; T reg298=reg52*reg73; reg151=reg121+reg151; T reg299=reg67*reg130;
    T reg300=reg84*reg8; T reg301=reg62*reg68; T reg302=reg59*reg16; T reg303=reg113*reg67; T reg304=reg103*reg116;
    T reg305=reg68*reg45; T reg306=reg70*reg52; T reg307=reg110*reg45; T reg308=reg103*reg80; reg111=reg115+reg111;
    T reg309=reg37*reg67; T reg310=reg26*reg130; T reg311=reg110*reg1; T reg312=reg7*reg38; T reg313=reg57*elem.pos(0)[1];
    T reg314=reg27*reg127; reg156=reg155+reg156; T reg315=reg28*reg9; reg160=reg159+reg160; reg119=reg147+reg119;
    reg165=reg163+reg165; T reg316=reg52*reg57; T reg317=reg2*reg80; T reg318=reg11*reg104; T reg319=reg67*reg104;
    T reg320=reg27*reg117; T reg321=reg26*reg128; T reg322=reg128*reg8; reg188=reg187+reg188; reg158=reg149+reg158;
    reg307=reg306+reg307; reg93=reg144+reg93; reg144=reg73*elem.pos(0)[1]; reg305=reg283+reg305; reg88=reg90+reg88;
    reg90=reg113*reg16; reg283=reg62*reg116; reg306=reg103*reg69; T reg323=reg42*reg67; T reg324=reg69*reg1;
    reg120=reg118+reg120; reg82=reg79+reg82; reg303=reg304+reg303; reg118=reg13*reg130; reg304=reg69*reg0;
    T reg325=reg3*reg127; T reg326=reg73*elem.pos(0)[2]; T reg327=reg103*reg38; T reg328=reg127*reg45; reg253=reg255+reg253;
    T reg329=reg41*reg67; reg137=reg136+reg137; reg136=reg10*reg52; reg256=reg257+reg256; reg315=reg312+reg315;
    reg277=reg278+reg277; T reg330=reg37*reg16; reg139=reg138+reg139; reg138=reg62*reg80; reg123=reg122+reg123;
    reg122=elem.pos(0)[0]*reg110; reg318=reg317+reg318; T reg331=2*reg216; reg96=reg98+reg96; reg98=2*reg214;
    T reg332=reg52*reg80; T reg333=2*reg213; T reg334=2*reg135; T reg335=reg104*reg45; T reg336=reg24*reg128;
    reg240=reg148+reg240; reg81=reg252+reg81; reg241=reg242+reg241; reg239=reg150+reg239; reg148=reg70*reg1;
    reg150=reg6*reg72; T reg337=reg110*elem.pos(0)[1]; T reg338=2*reg238; T reg339=2*reg237; T reg340=reg11*reg80;
    reg310=reg314+reg310; reg301=reg302+reg301; reg180=reg83+reg180; reg302=reg103*reg68; T reg341=reg59*reg67;
    reg173=reg171+reg173; reg170=reg174+reg170; reg222=2*reg222; reg171=2*reg297; reg174=reg70*reg8;
    reg218=reg219+reg218; T reg342=2*reg299; reg151=reg121+reg151; reg65=reg183+reg65; reg121=reg3*reg68;
    reg183=reg57*reg0; T reg343=reg3*reg104; T reg344=reg24*reg130; T reg345=reg6*reg9; reg146=reg292+reg146;
    reg206=reg205+reg206; reg199=reg196+reg199; reg208=reg207+reg208; reg184=reg145+reg184; reg210=reg209+reg210;
    reg160=reg159+reg160; reg212=reg211+reg212; reg289=reg288+reg289; reg156=reg155+reg156; reg155=2*reg300;
    reg134=reg47+reg134; reg313=reg311+reg313; reg159=reg103*reg114; reg125=reg54+reg125; reg205=reg44*reg67;
    reg126=reg94+reg126; reg94=reg117*reg45; reg207=reg50*reg52; reg291=reg186+reg291; reg197=reg31+reg197;
    reg31=reg41*reg6; reg186=reg23*reg38; reg209=reg25*reg127; reg211=reg10*reg24; reg321=reg320+reg321;
    reg200=reg198+reg200; reg198=reg37*reg3; reg288=reg13*reg80; reg292=reg110*elem.pos(0)[2]; T reg346=reg70*reg0;
    reg177=reg290+reg177; reg220=reg221+reg220; reg202=reg201+reg202; reg204=reg203+reg204; reg201=reg50*reg24;
    reg203=reg25*reg117; reg290=reg44*reg6; T reg347=reg23*reg114; T reg348=reg25*reg113; T reg349=reg23*reg70;
    T reg350=reg26*reg113; reg58=reg250+reg58; T reg351=reg11*reg50; T reg352=reg59*elem.pos(0)[1]; reg248=reg249+reg248;
    T reg353=reg67*reg9; reg87=reg175+reg87; reg245=reg246+reg245; reg188=reg187+reg188; reg43=reg190+reg43;
    reg187=reg2*reg127; reg124=reg129+reg124; reg284=reg285+reg284; reg129=reg11*reg130; reg108=reg107+reg108;
    reg309=reg308+reg309; reg107=2*reg217; reg194=reg131+reg194; reg131=reg113*reg3; reg285=reg13*reg116;
    reg308=reg23*reg69; T reg354=reg42*reg6; reg287=reg286+reg287; reg193=reg195+reg193; reg119=reg147+reg119;
    reg165=reg163+reg165; reg191=reg192+reg191; reg147=reg23*reg68; reg163=reg59*reg6; reg192=reg24*reg80;
    reg195=reg25*reg104; reg286=reg114*reg0; T reg355=reg72*elem.pos(0)[2]; reg97=reg282+reg97; reg282=reg59*elem.pos(0)[2];
    T reg356=reg13*reg50; T reg357=reg28*reg70; T reg358=reg52*reg128; reg49=reg36+reg49; reg40=reg263+reg40;
    reg230=reg167+reg230; reg158=reg149+reg158; reg149=reg62*reg50; reg141=reg142+reg141; reg182=reg179+reg182;
    reg142=2*reg229; reg86=reg176+reg86; reg264=reg265+reg264; reg167=2*reg228; reg176=reg113*reg2;
    reg89=reg95+reg89; reg95=reg11*reg116; reg263=reg28*reg69; reg106=reg133+reg106; reg133=2*reg227;
    reg164=reg162+reg164; reg293=reg294+reg293; reg162=2*reg226; reg265=reg42*reg7; reg223=reg33+reg223;
    reg48=reg276+reg48; reg294=reg16*reg68; reg281=reg259+reg281; reg254=reg258+reg254; reg259=2*reg316;
    reg75=reg102+reg75; reg181=reg185+reg181; reg243=reg244+reg243; reg172=reg260+reg172; reg102=reg26*reg104;
    reg261=reg262+reg261; reg143=reg91+reg143; reg91=2*reg215; reg185=reg103*reg70; reg152=reg154+reg152;
    reg154=2*reg56; reg260=reg113*reg45; reg262=reg67*reg72; T reg359=reg57*reg1; T reg360=elem.pos(0)[0]*reg72;
    reg39=reg60+reg39; reg60=reg114*reg8; T reg361=reg2*reg104; reg279=reg280+reg279; reg280=reg28*reg114;
    T reg362=reg2*reg68; T reg363=reg44*reg7; T reg364=reg27*reg130; T reg365=reg26*reg117; T reg366=reg50*reg27;
    T reg367=reg7*reg9; reg231=reg161+reg231; reg161=reg27*reg80; T reg368=2*reg225; reg111=reg115+reg111;
    reg168=reg189+reg168; reg153=reg157+reg153; reg295=reg296+reg295; reg224=reg169+reg224; reg115=reg28*reg68;
    reg157=reg59*reg7; reg269=2*reg269; reg169=reg41*reg7; reg189=reg16*reg104; reg296=2*reg233;
    T reg369=reg28*reg38; T reg370=2*reg232; T reg371=reg26*reg127; T reg372=reg10*reg27; T reg373=2*reg234;
    T reg374=2*reg266; T reg375=2*reg235; reg247=2*reg247; T reg376=2*reg322; reg105=reg178+reg105;
    reg178=2*reg298; T reg377=reg37*reg2; T reg378=2*reg236; reg267=reg268+reg267; T reg379=elem.pos(0)[0]*reg73;
    T reg380=reg69*reg8; T reg381=elem.pos(0)[0]*reg59; reg166=reg61+reg166; T reg382=reg72*elem.pos(0)[1]; reg35=reg251+reg35;
    reg30=reg100+reg30; T reg383=reg114*reg1; T reg384=reg27*reg128; T reg385=reg62*reg130; T reg386=reg7*reg72;
    T reg387=reg16*reg127; reg274=reg275+reg274; reg275=reg57*reg8; reg74=reg76+reg74; T reg388=reg52*reg130;
    reg272=reg273+reg272; T reg389=2*reg319; reg140=reg46+reg140; reg270=reg271+reg270; reg271=reg16*reg38;
    T reg390=reg80*reg0; T reg391=reg104*elem.pos(0)[2]; reg252=reg81+reg252; reg163=reg147+reg163; reg81=reg103*reg50;
    reg287=reg97+reg287; reg285=reg131+reg285; reg74=reg76+reg74; reg35=reg251+reg35; reg76=reg59*reg45;
    reg97=reg24*reg38; reg131=2*reg191; reg147=2*reg193; reg381=reg149+reg381; reg354=reg308+reg354;
    reg251=elem.pos(0)[0]*reg130; reg308=reg25*reg9; reg208=reg206+reg208; reg48=reg276+reg48; reg146=reg291+reg146;
    reg276=reg69*elem.pos(0)[2]; T reg392=reg42*reg0; T reg393=reg13*reg127; T reg394=reg10*reg3; reg347=reg290+reg347;
    reg203=reg201+reg203; reg204=reg202+reg204; reg267=reg268+reg267; reg201=reg44*reg62; reg140=reg46+reg140;
    reg177=reg289+reg177; reg200=reg197+reg200; reg272=reg273+reg272; reg269=reg111+reg269; reg46=elem.pos(0)[0]*reg50;
    reg197=reg62*reg9; reg194=reg126+reg194; reg165=reg158+reg165; reg243=reg244+reg243; reg94=reg207+reg94;
    reg106=reg153+reg106; reg125=reg54+reg125; reg278=reg277+reg278; reg159=reg205+reg159; reg54=reg10*reg16;
    reg153=reg62*reg127; reg158=reg42*reg8; reg134=reg47+reg134; reg155=reg300+reg155; reg47=elem.pos(0)[0]*reg69;
    reg202=reg103*reg113; reg205=reg62*reg59; reg212=reg210+reg212; reg184=reg145+reg184; reg145=2*reg65;
    reg207=reg6*reg73; reg244=reg52*reg104; reg385=reg387+reg385; reg218=reg219+reg218; reg221=reg220+reg221;
    reg219=reg67*reg68; reg151=reg86+reg151; reg220=reg13*reg73; reg268=reg3*reg69; reg222=reg173+reg222;
    reg273=4*reg294; reg341=reg302+reg341; reg294=2*reg294; reg180=reg83+reg180; reg83=2*reg164;
    reg277=2*reg301; reg290=2*reg303; reg82=reg79+reg82; reg79=reg44*reg8; reg300=reg62*reg70;
    reg323=reg306+reg323; reg283=reg90+reg283; reg338=reg238+reg338; reg90=reg73*reg0; reg238=reg3*reg130;
    reg302=2*reg150; reg375=reg235+reg375; reg235=elem.pos(0)[0]*reg114; reg333=reg213+reg333; reg296=reg233+reg296;
    reg56=reg154+reg56; reg98=reg214+reg98; reg154=reg37*reg103; reg213=reg70*reg45; reg331=reg216+reg331;
    reg217=reg107+reg217; reg107=2*reg345; reg168=reg224+reg168; reg214=2*reg343; reg368=reg225+reg368;
    reg216=2*reg183; reg225=reg6*reg128; reg233=reg72*reg0; reg306=reg24*reg104; T reg395=2*reg121;
    T reg396=reg3*reg84; T reg397=reg42*reg45; reg181=reg152+reg181; reg87=reg175+reg87; reg245=reg246+reg245;
    reg175=elem.pos(0)[0]*reg104; reg246=reg52*reg38; reg260=reg185+reg260; reg248=reg249+reg248; reg58=reg250+reg58;
    reg223=reg33+reg223; reg33=reg9*reg45; reg190=reg43+reg190; reg43=reg52*reg114; reg249=reg13*reg9;
    reg250=reg3*reg38; T reg398=reg130*elem.pos(0)[2]; T reg399=reg127*reg0; T reg400=reg25*reg72; T reg401=reg24*reg114;
    reg355=reg286+reg355; T reg402=reg72*reg45; T reg403=reg127*reg8; reg195=reg192+reg195; reg379=reg380+reg379;
    reg88=reg93+reg88; T reg404=reg62*reg73; reg305=reg284+reg305; T reg405=reg37*reg52; reg122=reg174+reg122;
    reg174=reg80*reg45; reg139=reg137+reg139; reg330=reg138+reg330; reg328=reg136+reg328; reg326=reg304+reg326;
    reg335=reg332+reg335; reg118=reg325+reg118; reg253=reg255+reg253; reg329=reg327+reg329; reg256=reg257+reg256;
    reg136=reg16*reg69; reg123=reg120+reg123; reg120=elem.pos(0)[0]*reg113; reg360=reg60+reg360; reg138=reg80*reg8;
    reg309=reg307+reg309; reg108=reg124+reg108; reg124=reg103*reg10; reg255=reg27*reg104; reg257=reg7*reg68;
    reg307=4*reg362; reg362=2*reg362; reg327=2*reg141; reg254=reg258+reg254; reg242=reg241+reg242;
    reg241=reg11*reg73; reg258=reg2*reg69; reg247=reg105+reg247; reg166=reg61+reg166; reg49=reg36+reg49;
    reg143=reg89+reg143; reg96=reg170+reg96; reg144=reg324+reg144; reg129=reg187+reg129; reg382=reg383+reg382;
    reg36=reg27*reg114; reg61=reg26*reg72; T reg406=reg127*reg1; T reg407=reg130*elem.pos(0)[1]; T reg408=reg2*reg38;
    T reg409=reg11*reg9; reg311=reg313+reg311; reg318=reg317+reg318; reg313=2*reg344; reg310=reg314+reg310;
    reg315=reg312+reg315; reg119=reg188+reg119; reg160=reg156+reg160; reg156=2*reg336; reg321=reg320+reg321;
    reg199=reg196+reg199; reg240=reg239+reg240; reg334=reg135+reg334; reg135=reg7*reg128; reg188=reg2*reg84;
    reg196=reg7*reg73; reg312=reg25*reg70; reg314=reg37*reg23; reg317=reg50*elem.pos(0)[2]; reg320=reg44*reg13;
    T reg410=reg13*reg70; T reg411=reg113*elem.pos(0)[2]; T reg412=reg23*reg10; T reg413=reg25*reg42; reg348=reg349+reg348;
    reg282=reg356+reg282; T reg414=reg23*reg50; T reg415=reg25*reg59; T reg416=reg72*reg1; T reg417=2*reg359;
    T reg418=2*reg361; T reg419=2*reg364; T reg420=2*reg367; reg142=reg229+reg142; reg167=reg228+reg167;
    reg133=reg227+reg133; reg162=reg226+reg162; reg226=2*reg384; reg227=2*reg386; reg228=reg2*reg130;
    reg229=reg73*reg1; reg370=reg232+reg370; reg373=reg234+reg373; reg378=reg236+reg378; reg339=reg237+reg339;
    reg91=reg215+reg91; reg215=reg28*reg50; reg232=reg26*reg59; reg234=reg67*reg128; reg236=reg16*reg84;
    reg237=reg67*reg73; reg121=4*reg121; T reg421=reg6*reg68; T reg422=reg26*reg70; T reg423=reg37*reg28;
    T reg424=reg50*elem.pos(0)[1]; T reg425=reg44*reg11; T reg426=reg11*reg70; T reg427=reg113*elem.pos(0)[1]; T reg428=reg28*reg10;
    T reg429=reg26*reg42; reg350=reg357+reg350; T reg430=reg72*reg8; T reg431=2*reg275; T reg432=2*reg189;
    T reg433=2*reg388; T reg434=2*reg353; reg259=reg316+reg259; reg389=reg319+reg389; reg376=reg322+reg376;
    reg374=reg266+reg374; reg266=2*reg358; reg316=2*reg262; reg319=reg16*reg130; reg322=reg73*reg8;
    reg171=reg297+reg171; reg342=reg299+reg342; reg178=reg298+reg178; reg231=reg230+reg231; reg297=reg42*reg1;
    reg298=reg69*elem.pos(0)[1]; reg172=reg261+reg172; reg39=reg75+reg39; reg182=reg179+reg182; reg30=reg100+reg30;
    reg279=reg281+reg279; reg95=reg176+reg95; reg265=reg263+reg265; reg100=2*reg274; reg176=2*reg270;
    reg157=reg115+reg157; reg115=reg80*reg1; reg179=reg104*elem.pos(0)[1]; reg263=reg27*reg38; reg299=reg26*reg9;
    reg102=reg161+reg102; reg352=reg351+reg352; T reg435=reg28*reg113; T reg436=reg11*reg59; T reg437=reg26*reg80;
    T reg438=reg37*reg27; T reg439=reg44*reg1; T reg440=reg114*elem.pos(0)[1]; reg337=reg148+reg337; reg377=reg340+reg377;
    reg371=reg372+reg371; reg169=reg369+reg169; reg293=reg295+reg293; reg40=reg264+reg40; reg365=reg366+reg365;
    reg280=reg363+reg280; reg148=reg10*reg2; reg264=reg11*reg127; reg31=reg186+reg31; reg186=reg114*elem.pos(0)[2];
    reg295=reg23*reg113; reg340=reg44*reg0; reg209=reg211+reg209; reg211=reg13*reg59; reg363=reg37*reg24;
    reg366=reg25*reg80; reg198=reg288+reg198; reg292=reg346+reg292; reg177=reg289+reg177; reg216=reg183+reg216;
    reg87=reg184+reg87; reg183=reg24*reg72; reg405=reg174+reg405; reg146=reg291+reg146; reg280=reg365+reg280;
    reg40=reg293+reg40; reg174=reg3*reg9; reg288=reg27*reg9; reg289=reg130*reg0; reg291=reg41*reg3;
    reg346=reg104*reg1; reg363=reg366+reg363; reg423=reg422+reg423; reg365=reg44*reg24; reg333=reg98+reg333;
    reg240=reg239+reg240; reg334=2*reg334; reg98=2*reg416; reg239=reg25*reg114; reg331=reg217+reg331;
    reg217=reg41*reg28; reg366=reg23*reg42; reg369=2*reg135; reg372=2*reg255; reg422=reg13*reg69;
    T reg441=reg26*reg10; reg186=reg340+reg186; reg169=reg371+reg169; reg107=reg345+reg107; reg340=reg11*reg37;
    reg345=reg70*elem.pos(0)[1]; reg344=reg313+reg344; reg214=reg343+reg214; reg313=4*reg257; reg257=2*reg257;
    reg343=reg42*reg3; reg371=2*reg221; T reg442=2*reg196; T reg443=2*reg243; T reg444=reg104*reg0;
    reg279=reg281+reg279; reg220=reg268+reg220; reg281=4*reg421; reg421=2*reg421; reg307=reg362+reg307;
    reg362=reg42*reg2; reg327=reg141+reg327; reg395=reg121+reg395; reg121=reg11*reg69; reg212=reg210+reg212;
    reg222=reg173+reg222; reg141=2*reg254; reg173=2*reg95; reg210=2*reg237; reg305=reg284+reg305;
    reg208=reg206+reg208; reg264=reg148+reg264; reg148=2*reg233; reg206=reg42*reg16; reg298=reg297+reg298;
    reg284=reg62*reg69; reg172=reg261+reg172; reg261=2*reg283; reg297=reg24*reg9; T reg445=2*reg323;
    reg39=reg75+reg39; reg145=reg65+reg145; reg65=reg41*reg24; reg290=reg303+reg290; reg277=reg301+reg277;
    reg147=reg193+reg147; reg75=2*reg188; reg193=reg25*reg38; reg30=reg182+reg30; reg301=2*reg341;
    reg303=2*reg218; reg273=reg294+reg273; reg294=2*reg436; T reg446=2*reg435; reg330=reg122+reg330;
    reg162=reg133+reg162; reg122=2*reg207; reg83=reg164+reg83; reg167=reg142+reg167; reg133=2*reg396;
    reg142=reg28*reg42; reg164=2*reg285; T reg447=2*reg295; T reg448=reg11*reg113; reg329=reg328+reg329;
    reg328=reg114*reg45; T reg449=reg44*reg52; T reg450=reg41*reg52; T reg451=reg38*reg45; T reg452=2*reg225;
    reg232=reg215+reg232; reg438=reg437+reg438; reg393=reg394+reg393; reg226=reg384+reg226; reg276=reg392+reg276;
    reg384=reg41*reg27; reg392=reg26*reg38; reg440=reg439+reg440; reg227=reg386+reg227; reg386=2*reg244;
    reg394=elem.pos(0)[0]*reg127; reg437=reg62*reg38; reg439=reg41*reg16; T reg453=4*reg219; reg219=2*reg219;
    T reg454=reg37*reg1; reg151=reg86+reg151; reg86=reg80*elem.pos(0)[1]; T reg455=reg44*reg27; T reg456=reg26*reg114;
    T reg457=reg10*reg8; T reg458=reg28*reg59; T reg459=reg2*reg9; reg373=reg370+reg373; T reg460=reg130*reg1;
    reg339=reg378+reg339; reg153=reg54+reg153; reg54=reg11*reg38; T reg461=2*reg90; T reg462=2*reg238;
    reg155=reg171+reg155; T reg463=2*reg35; reg235=reg79+reg235; reg28=reg44*reg28; reg79=reg26*reg50;
    reg47=reg158+reg47; reg158=reg41*reg2; reg302=reg150+reg302; reg150=reg27*reg72; reg336=reg156+reg336;
    reg425=reg424+reg425; reg377=reg337+reg377; reg347=reg203+reg347; reg156=reg37*reg8; reg352=reg351+reg352;
    reg350=reg357+reg350; reg368=2*reg368; reg420=reg367+reg420; reg429=reg428+reg429; reg168=reg224+reg168;
    reg287=reg309+reg287; reg419=reg364+reg419; reg203=2*reg354; reg224=2*reg228; reg337=elem.pos(0)[0]*reg80;
    reg418=reg361+reg418; reg427=reg426+reg427; reg417=reg359+reg417; reg56=reg296+reg56; reg351=2*reg229;
    reg357=reg10*reg1; reg159=reg94+reg159; reg94=reg127*elem.pos(0)[1]; reg375=reg338+reg375; reg389=reg259+reg389;
    reg267=reg272+reg267; reg259=2*reg205; reg201=reg46+reg201; reg198=reg292+reg198; reg245=reg248+reg245;
    reg46=2*reg202; reg411=reg410+reg411; reg248=reg103*reg42; reg272=reg50*reg45; reg434=reg353+reg434;
    reg413=reg412+reg413; reg292=reg44*reg103; reg58=reg190+reg58; reg433=reg388+reg433; reg31=reg209+reg31;
    reg348=reg349+reg348; reg432=reg189+reg432; reg282=reg356+reg282; reg96=reg170+reg96; reg253=reg256+reg253;
    reg197=reg271+reg197; reg154=reg213+reg154; reg170=reg13*reg113; reg314=reg312+reg314; reg131=reg191+reg131;
    reg320=reg317+reg320; reg144=reg324+reg144; reg129=reg187+reg129; reg316=reg262+reg316; reg299=reg263+reg299;
    reg123=reg108+reg123; reg266=reg358+reg266; reg48=reg278+reg48; reg187=reg25*reg50; reg189=reg44*reg23;
    reg190=reg103*reg59; reg199=reg321+reg199; reg374=reg376+reg374; reg181=reg152+reg181; reg152=reg52*reg72;
    reg191=reg52*reg9; reg125=reg134+reg125; reg209=reg23*reg59; reg308=reg97+reg308; reg318=reg311+reg318;
    reg391=reg390+reg391; reg260=reg185+reg260; reg185=reg104*reg8; reg409=reg408+reg409; reg61=reg36+reg61;
    reg379=reg380+reg379; reg407=reg406+reg407; reg385=reg387+reg385; reg213=2*reg430; reg397=reg124+reg397;
    reg120=reg300+reg120; reg256=2*reg163; reg262=reg62*reg113; reg249=reg250+reg249; reg431=reg275+reg431;
    reg76=reg81+reg76; reg398=reg399+reg398; reg275=2*reg306; reg106=reg165+reg106; reg278=reg16*reg9;
    reg404=reg136+reg404; reg160=reg119+reg160; reg400=reg401+reg400; reg311=reg130*reg8; reg223=reg252+reg223;
    reg381=reg149+reg381; reg102=reg161+reg102; reg382=reg383+reg382; reg355=reg286+reg355; reg315=reg310+reg315;
    reg415=reg414+reg415; reg195=reg192+reg195; reg149=reg70*elem.pos(0)[2]; reg241=reg258+reg241; reg33=reg246+reg33;
    reg143=reg89+reg143; reg89=2*reg234; reg175=reg138+reg175; reg100=reg274+reg100; reg161=reg13*reg38;
    reg192=2*reg319; reg176=reg270+reg176; reg91=2*reg91; reg139=reg137+reg139; reg269=reg111+reg269;
    reg140=reg74+reg140; reg111=2*reg211; reg194=reg126+reg194; reg360=reg60+reg360; reg166=reg49+reg166;
    reg231=reg230+reg231; reg204=reg200+reg204; reg60=2*reg322; reg126=reg37*reg0; reg335=reg332+reg335;
    reg88=reg93+reg88; reg178=reg342+reg178; reg247=reg105+reg247; reg93=reg10*reg0; reg105=2*reg157;
    reg137=reg127*elem.pos(0)[2]; reg230=2*reg236; reg179=reg115+reg179; reg252=reg80*elem.pos(0)[2]; reg251=reg403+reg251;
    reg103=reg41*reg103; reg402=reg43+reg402; reg270=reg10*reg45; reg274=2*reg265; reg118=reg325+reg118;
    reg286=2*reg242; reg23=reg41*reg23; reg310=reg25*reg10; reg312=reg62*reg37; reg326=reg304+reg326;
    reg304=reg13*reg37; reg180=reg82+reg180; reg317=elem.pos(0)[0]*reg70; reg126=reg252+reg126; reg151=reg181+reg151;
    reg315=reg318+reg315; reg140=reg74+reg140; reg212=reg208+reg212; reg409=reg408+reg409; reg286=reg242+reg286;
    reg443=reg243+reg443; reg450=reg451+reg450; reg173=reg95+reg173; reg120=reg300+reg120; reg381=reg260+reg381;
    reg241=reg258+reg241; reg156=reg337+reg156; reg313=reg257+reg313; reg105=reg157+reg105; reg61=reg36+reg61;
    reg273=reg83+reg273; reg453=reg219+reg453; reg328=reg449+reg328; reg176=reg100+reg176; reg162=reg167+reg162;
    reg141=reg254+reg141; reg382=reg102+reg382; reg440=reg438+reg440; reg125=reg134+reg125; reg407=reg406+reg407;
    reg307=reg327+reg307; reg274=reg265+reg274; reg36=2*reg279; reg121=reg362+reg121; reg164=reg285+reg164;
    reg74=2*reg209; reg95=2*reg183; reg134=elem.pos(0)[0]*reg42; reg397=reg124+reg397; reg143=reg96+reg143;
    reg201=reg154+reg201; reg46=reg202+reg46; reg259=reg205+reg259; reg158=reg54+reg158; reg54=2*reg150;
    reg96=2*reg280; reg276=reg393+reg276; reg124=2*reg199; reg111=reg211+reg111; reg186=reg363+reg186;
    reg157=2*reg190; reg299=reg263+reg299; reg98=reg416+reg98; reg181=2*reg346; reg422=reg343+reg422;
    reg202=2*reg297; reg372=reg255+reg372; reg40=reg293+reg40; reg312=reg317+reg312; reg144=reg129+reg144;
    reg103=reg270+reg103; reg179=reg115+reg179; reg169=reg377+reg169; reg115=2*reg288; reg205=reg37*reg45;
    reg160=reg119+reg160; reg420=reg419+reg420; reg404=reg136+reg404; reg30=reg182+reg30; reg447=reg295+reg447;
    reg119=2*reg247; reg136=reg62*reg10; reg182=2*reg194; reg208=reg38*reg1; reg76=reg81+reg76;
    reg418=reg417+reg418; reg81=2*reg262; reg211=reg9*elem.pos(0)[1]; reg166=reg49+reg166; reg292=reg272+reg292;
    reg456=reg455+reg456; reg39=reg172+reg39; reg49=2*reg459; reg65=reg193+reg65; reg94=reg357+reg94;
    reg172=2*reg460; reg298=reg264+reg298; reg193=2*reg248; reg219=elem.pos(0)[0]*reg44; reg242=2*reg269;
    reg463=reg35+reg463; reg235=reg405+reg235; reg432=reg431+reg432; reg413=reg412+reg413; reg261=reg283+reg261;
    reg35=reg2*reg73; reg445=reg323+reg445; reg434=reg433+reg434; reg411=reg410+reg411; reg277=reg290+reg277;
    reg303=reg218+reg303; reg75=reg188+reg75; reg301=reg341+reg301; reg188=2*reg444; reg131=reg147+reg131;
    reg371=reg221+reg371; reg442=reg196+reg442; reg245=reg58+reg245; reg220=reg268+reg220; reg281=reg421+reg281;
    reg267=reg48+reg267; reg107=reg344+reg107; reg106=reg165+reg106; reg214=reg216+reg214; reg48=2*reg278;
    reg146=reg177+reg146; reg58=2*reg174; reg398=reg399+reg398; reg165=2*reg289; reg177=reg44*elem.pos(0)[1];
    reg196=reg44*elem.pos(0)[2]; reg282=reg348+reg282; reg216=reg26*reg37; reg87=reg184+reg87; reg249=reg250+reg249;
    reg31=reg198+reg31; reg184=2*reg305; reg148=reg233+reg148; reg306=reg275+reg306; reg284=reg206+reg284;
    reg155=reg171+reg155; reg171=2*reg170; reg198=2*reg253; reg316=reg266+reg316; reg60=reg322+reg60;
    reg88=reg139+reg88; reg139=reg25*reg37; reg137=reg93+reg137; reg192=reg319+reg192; reg360=reg335+reg360;
    reg251=reg403+reg251; reg93=reg38*reg8; reg206=elem.pos(0)[0]*reg9; reg175=reg138+reg175; reg33=reg246+reg33;
    reg326=reg118+reg326; reg304=reg149+reg304; reg23=reg310+reg23; reg402=reg43+reg402; reg43=reg42*elem.pos(0)[2];
    reg138=reg13*reg10; reg395=reg395+reg145; reg149=reg67*reg84; reg374=reg389+reg374; reg218=2*reg222;
    reg210=reg237+reg210; reg221=reg7*reg84; reg189=reg187+reg189; reg230=reg236+reg230; reg187=reg16*reg73;
    reg180=reg82+reg180; reg123=reg108+reg123; reg89=reg234+reg89; reg161=reg291+reg161; reg91=reg231+reg91;
    reg204=reg200+reg204; reg320=reg314+reg320; reg197=reg271+reg197; reg178=reg342+reg178; reg379=reg385+reg379;
    reg82=2*reg448; reg329=reg330+reg329; reg391=reg390+reg391; reg232=reg215+reg232; reg452=reg225+reg452;
    reg108=2*reg185; reg352=reg350+reg352; reg368=reg168+reg368; reg429=reg428+reg429; reg287=reg309+reg287;
    reg224=reg228+reg224; reg203=reg354+reg203; reg308=reg97+reg308; reg427=reg426+reg427; reg56=reg296+reg56;
    reg351=reg229+reg351; reg97=2*reg191; reg256=reg163+reg256; reg384=reg392+reg384; reg454=reg86+reg454;
    reg386=reg244+reg386; reg394=reg457+reg394; reg439=reg437+reg439; reg213=reg430+reg213; reg86=reg3*reg73;
    reg163=2*reg458; reg200=reg38*reg0; reg215=reg6*reg84; reg294=reg436+reg294; reg446=reg435+reg446;
    reg122=reg207+reg122; reg227=reg226+reg227; reg207=reg9*elem.pos(0)[2]; reg225=2*reg142; reg133=reg396+reg133;
    reg425=reg423+reg425; reg226=2*reg311; reg400=reg401+reg400; reg228=2*reg347; reg229=2*reg223;
    reg302=reg336+reg302; reg333=reg331+reg333; reg47=reg153+reg47; reg28=reg79+reg28; reg79=2*reg366;
    reg334=reg240+reg334; reg462=reg238+reg462; reg339=reg378+reg339; reg217=reg441+reg217; reg355=reg195+reg355;
    reg340=reg345+reg340; reg233=2*reg159; reg375=reg338+reg375; reg239=reg365+reg239; reg369=reg135+reg369;
    reg415=reg414+reg415; reg373=reg370+reg373; reg135=2*reg152; reg234=reg42*elem.pos(0)[1]; reg236=reg11*reg10;
    reg461=reg90+reg461; reg90=2*reg61; reg397=reg120+reg397; reg120=2*reg316; reg213=reg386+reg213;
    reg226=reg311+reg226; reg48=reg278+reg48; reg237=reg9*reg8; reg106=0.5*reg106; reg31=reg31/2;
    reg381=reg260+reg381; reg242=reg269+reg242; reg238=reg41*reg0; reg243=2*reg402; reg193=reg248+reg193;
    reg97=reg191+reg97; reg382=reg102+reg382; reg434=reg432+reg434; reg267=reg267/2; reg259=reg46+reg259;
    reg108=reg185+reg108; reg374=reg389+reg374; reg81=reg262+reg81; reg135=reg152+reg135; reg102=reg11*reg42;
    reg379=reg385+reg379; reg157=reg190+reg157; reg299=reg179+reg299; reg161=reg137+reg161; reg229=reg223+reg229;
    reg197=reg251+reg197; reg137=reg38*elem.pos(0)[2]; reg152=reg62*reg42; reg179=2*reg76; reg185=2*reg456;
    reg228=reg347+reg228; reg233=reg159+reg233; reg234=reg236+reg234; reg235=reg405+reg235; reg159=2*reg28;
    reg47=reg153+reg47; reg425=reg423+reg425; reg158=reg94+reg158; reg276=reg393+reg276; reg217=reg340+reg217;
    reg11=reg11*reg41; reg169=reg169/2; reg94=reg10*elem.pos(0)[1]; reg153=reg26*reg44; reg177=reg216+reg177;
    reg146=reg146/2; reg40=0.5*reg40; reg26=reg26*reg41; reg186=reg363+reg186; reg384=reg454+reg384;
    reg439=reg394+reg439; reg440=reg438+reg440; reg190=2*reg86; reg151=reg151/2; reg163=reg458+reg163;
    reg191=2*reg328; reg294=reg446+reg294; reg225=reg142+reg225; reg82=reg448+reg82; reg329=reg329/2;
    reg450=reg156+reg450; reg142=2*reg232; reg352=reg350+reg352; reg429=reg427+reg429; reg156=reg41*reg8;
    reg287=0.5*reg287; reg223=elem.pos(0)[0]*reg38; reg244=2*reg230; reg246=2*reg187; reg248=4*reg89;
    reg274=reg173+reg274; reg212=reg212/2; reg89=2*reg89; reg204=0.5*reg204; reg91=reg231+reg91;
    reg178=reg155+reg178; reg140=0.5*reg140; reg176=reg100+reg176; reg100=reg38*elem.pos(0)[1]; reg155=2*reg105;
    reg173=reg41*reg1; reg60=reg192+reg60; reg211=reg208+reg211; reg360=reg335+reg360; reg206=reg93+reg206;
    reg33=reg175+reg33; reg175=reg37*elem.pos(0)[1]; reg96=reg280+reg96; reg87=0.5*reg87; reg298=reg264+reg298;
    reg65=reg126+reg65; reg126=2*reg284; reg39=reg39/2; reg445=reg261+reg445; reg277=reg290+reg277;
    reg231=2*reg301; reg30=0.5*reg30; reg250=reg9*reg0; reg251=2*reg281; reg252=2*reg239;
    reg36=reg279+reg36; reg145=reg395+reg145; reg254=2*reg149; reg255=2*reg121; reg257=2*reg210;
    reg258=reg25*reg44; reg307=reg327+reg307; reg196=reg196+reg139; reg88=reg88/2; reg260=2*reg313;
    reg25=reg25*reg41; reg261=reg37*elem.pos(0)[2]; reg262=reg44*reg45; reg45=reg41*reg45; reg180=0.5*reg180;
    reg263=elem.pos(0)[0]*reg37; reg264=reg9*reg1; reg181=reg346+reg181; reg219=reg219+reg205; reg115=reg288+reg115;
    reg98=reg372+reg98; reg265=2*reg221; reg54=reg150+reg54; reg218=reg222+reg218; reg144=reg129+reg144;
    reg111=reg447+reg111; reg129=2*reg189; reg320=reg314+reg320; reg103=reg312+reg103; reg143=reg143/2;
    reg166=0.5*reg166; reg123=0.5*reg123; reg198=reg253+reg198; reg119=reg247+reg119; reg150=2*reg404;
    reg182=reg194+reg182; reg194=2*reg241; reg23=reg304+reg23; reg326=reg118+reg326; reg62=reg62*reg41;
    reg118=elem.pos(0)[0]*reg10; reg141=reg286+reg141; reg222=reg13*reg41; reg247=reg10*elem.pos(0)[2]; reg58=reg174+reg58;
    reg174=2*reg215; reg253=4*reg369; reg369=2*reg369; reg107=reg214+reg107; reg214=2*reg122;
    reg266=2*reg133; reg268=2*reg227; reg334=reg240+reg334; reg333=reg331+reg333; reg79=reg366+reg79;
    reg240=4*reg452; reg452=2*reg452; reg269=2*reg302; reg339=reg373+reg339; reg461=reg462+reg461;
    reg368=reg168+reg368; reg203=reg164+reg203; reg351=reg224+reg351; reg56=reg375+reg56; reg172=reg460+reg172;
    reg49=reg459+reg49; reg164=2*reg422; reg463=reg443+reg463; reg420=reg418+reg420; reg168=2*reg220;
    reg162=reg167+reg162; reg273=reg83+reg273; reg83=2*reg442; reg171=reg170+reg171; reg167=2*reg75;
    reg303=reg371+reg303; reg170=2*reg453; reg270=2*reg35; reg188=reg444+reg188; reg297=reg202+reg297;
    reg148=reg306+reg148; reg184=reg305+reg184; reg183=reg95+reg183; reg165=reg289+reg165; reg131=reg147+reg131;
    reg124=reg199+reg124; reg207=reg200+reg207; reg134=reg136+reg134; reg201=reg154+reg201; reg355=reg195+reg355;
    reg95=2*reg415; reg413=reg411+reg413; reg409=reg407+reg409; reg245=reg245/2; reg160=0.5*reg160;
    reg147=2*reg292; reg74=reg209+reg74; reg315=reg315/2; reg249=reg398+reg249; reg125=0.5*reg125;
    reg282=reg348+reg282; reg13=reg13*reg42; reg43=reg138+reg43; reg154=2*reg256; reg195=2*reg400;
    reg308=reg391+reg308; reg440=0.5*reg440; reg160=reg160/3; reg167=reg75+reg167; reg97=reg108+reg97;
    reg170=reg453+reg170; reg277=0.5*reg277; reg303=reg303/2; reg186=0.5*reg186; reg384=reg384/2;
    reg445=reg445/2; reg270=reg35+reg270; reg381=0.5*reg381; reg297=reg188+reg297; reg126=reg284+reg126;
    reg125=reg125/3; reg184=0.16666666666666666667*reg184; reg148=reg306+reg148; reg257=reg210+reg257; reg235=0.5*reg235;
    reg218=0.16666666666666666667*reg218; reg254=reg149+reg254; reg355=0.5*reg355; reg49=reg172+reg49; reg252=reg239+reg252;
    reg185=reg456+reg185; reg229=0.16666666666666666667*reg229; reg164=reg422+reg164; reg463=reg463/2; reg156=reg223+reg156;
    reg145=0.5*reg145; reg83=reg442+reg83; reg35=2*reg135; reg251=reg281+reg251; reg450=reg450/2;
    reg168=reg220+reg168; reg420=reg420/2; reg75=2*reg250; reg179=reg76+reg179; reg191=reg328+reg191;
    reg95=reg415+reg95; reg273=0.5*reg273; reg162=0.5*reg162; reg151=reg379+reg151; reg231=reg301+reg231;
    reg333=0.5*reg333; reg76=2*reg102; reg108=2*reg74; reg339=reg339/2; reg142=reg232+reg142;
    reg149=2*reg237; reg268=reg227+reg268; reg269=reg302+reg269; reg425=0.5*reg425; reg159=reg28+reg159;
    reg397=reg397/2; reg352=0.5*reg352; reg213=reg386+reg213; reg461=reg462+reg461; reg368=0.5*reg368;
    reg79=reg171+reg79; reg429=reg429/2; reg233=0.16666666666666666667*reg233; reg203=reg203/2; reg154=reg256+reg154;
    reg351=reg224+reg351; reg234=reg236+reg234; reg90=reg61+reg90; reg228=0.16666666666666666667*reg228; reg287=reg287/3;
    reg56=reg56/2; reg87=reg87/3; reg315=reg409+reg315; reg28=2*reg183; reg26=reg175+reg26;
    reg146=reg47+reg146; reg58=reg165+reg58; reg177=reg216+reg177; reg47=2*reg163; reg61=2*reg153;
    reg174=reg215+reg174; reg253=reg369+reg253; reg11=reg94+reg11; reg294=reg446+reg294; reg134=reg136+reg134;
    reg382=0.5*reg382; reg308=reg308/2; reg107=reg107/2; reg214=reg122+reg214; reg334=0.5*reg334;
    reg225=reg82+reg225; reg266=reg133+reg266; reg207=reg200+reg207; reg217=reg217/2; reg190=reg86+reg190;
    reg240=reg452+reg240; reg329=reg439+reg329; reg36=0.16666666666666666667*reg36; reg150=reg404+reg150; reg131=0.5*reg131;
    reg307=0.5*reg307; reg119=0.16666666666666666667*reg119; reg196=reg139+reg196; reg31=reg161+reg31; reg30=reg30/3;
    reg299=reg299/2; reg155=reg105+reg155; reg48=reg226+reg48; reg260=reg313+reg260; reg88=reg326+reg88;
    reg60=reg192+reg60; reg198=0.16666666666666666667*reg198; reg39=reg298+reg39; reg173=reg100+reg173; reg434=reg434/2;
    reg25=reg261+reg25; reg282=0.5*reg282; reg82=2*reg262; reg178=reg178/2; reg33=reg33/2;
    reg212=reg276+reg212; reg182=0.16666666666666666667*reg182; reg23=reg23/2; reg86=2*reg157; reg274=reg274/2;
    reg194=reg241+reg194; reg124=0.16666666666666666667*reg124; reg62=reg118+reg62; reg413=reg413/2; reg222=reg247+reg222;
    reg255=reg121+reg255; reg243=reg402+reg243; reg141=reg141/2; reg140=reg140/3; reg94=2*reg13;
    reg259=reg46+reg259; reg206=reg93+reg206; reg46=2*reg258; reg176=0.5*reg176; reg120=reg316+reg120;
    reg360=0.5*reg360; reg93=2*reg264; reg180=reg180/3; reg40=reg40/3; reg267=reg197+reg267;
    reg242=0.16666666666666666667*reg242; reg43=reg138+reg43; reg103=reg103/2; reg246=reg187+reg246; reg238=reg137+reg238;
    reg219=reg205+reg219; reg320=0.5*reg320; reg169=reg158+reg169; reg147=reg292+reg147; reg115=reg181+reg115;
    reg374=0.5*reg374; reg129=reg189+reg129; reg265=reg221+reg265; reg195=reg400+reg195; reg98=reg372+reg98;
    reg244=reg230+reg244; reg111=reg447+reg111; reg100=2*reg152; reg105=2*reg54; reg106=reg106/3;
    reg91=0.5*reg91; reg248=reg89+reg248; reg65=reg65/2; reg201=0.5*reg201; reg96=0.16666666666666666667*reg96;
    reg123=reg123/3; reg45=reg263+reg45; reg193=reg81+reg193; reg245=reg249+reg245; reg143=reg144+reg143;
    reg166=reg166/3; reg204=reg204/3; reg211=reg208+reg211; reg269=0.16666666666666666667*reg269; reg129=0.16666666666666666667*reg129;
    reg94=reg13+reg94; reg425=reg425/3; reg123=reg245+reg123; reg149=reg237+reg149; reg228=reg228/4;
    reg33=reg206+reg33; reg159=0.16666666666666666667*reg159; reg434=reg48+reg434; reg217=reg11+reg217; reg23=reg222+reg23;
    reg320=reg320/3; reg213=0.5*reg213; reg243=0.16666666666666666667*reg243; reg120=0.16666666666666666667*reg120; reg198=reg198/4;
    reg333=reg333/3; reg233=reg233/4; reg339=reg351+reg339; reg154=0.16666666666666666667*reg154; reg203=reg164+reg203;
    reg277=reg277/3; reg97=reg97/2; reg178=reg60+reg178; reg231=0.16666666666666666667*reg231; reg195=0.16666666666666666667*reg195;
    reg91=reg91/3; reg204=reg31+reg204; reg75=reg250+reg75; reg248=0.16666666666666666667*reg248; reg251=0.16666666666666666667*reg251;
    reg180=reg88+reg180; reg83=reg167+reg83; reg145=reg145/3; reg35=reg135+reg35; reg106=reg267+reg106;
    reg11=2*reg246; reg229=reg229/4; reg218=reg218/4; reg13=2*reg254; reg31=2*reg265;
    reg355=reg355/3; reg252=0.16666666666666666667*reg252; reg257=reg244+reg257; reg131=reg131/3; reg334=reg334/3;
    reg107=reg58+reg107; reg413=reg43+reg413; reg253=0.16666666666666666667*reg253; reg61=reg153+reg61; reg177=0.5*reg177;
    reg46=reg258+reg46; reg308=reg207+reg308; reg360=reg360/3; reg28=reg183+reg28; reg26=reg26/2;
    reg196=0.5*reg196; reg43=reg41*elem.pos(0)[1]; reg148=0.5*reg148; reg87=reg146+reg87; reg297=reg297/2;
    reg95=0.16666666666666666667*reg95; reg25=reg25/2; reg445=reg126+reg445; reg48=2*reg270; reg303=reg168+reg303;
    reg282=reg282/3; reg58=reg41*elem.pos(0)[2]; reg30=reg39+reg30; reg260=0.16666666666666666667*reg260; reg82=reg262+reg82;
    reg65=reg238+reg65; reg45=reg45/2; reg96=reg96/4; reg39=elem.pos(0)[0]*reg41; reg40=reg169+reg40;
    reg93=reg264+reg93; reg219=0.5*reg219; reg115=reg115/2; reg98=0.5*reg98; reg105=reg54+reg105;
    reg235=reg235/3; reg185=0.16666666666666666667*reg185; reg463=reg150+reg463; reg450=reg156+reg450; reg420=reg49+reg420;
    reg191=0.16666666666666666667*reg191; reg162=reg162/3; reg273=reg273/3; reg440=reg440/3; reg170=0.16666666666666666667*reg170;
    reg173=reg384+reg173; reg79=reg79/2; reg184=reg184/4; reg47=reg163+reg47; reg49=2*reg174;
    reg90=0.16666666666666666667*reg90; reg397=reg134+reg397; reg108=reg74+reg108; reg382=reg382/3; reg381=reg381/3;
    reg179=0.16666666666666666667*reg179; reg100=reg152+reg100; reg147=0.16666666666666666667*reg147; reg201=reg201/3; reg193=reg193/2;
    reg299=reg211+reg299; reg160=reg315+reg160; reg125=reg212+reg125; reg259=0.5*reg259; reg124=reg124/4;
    reg86=reg157+reg86; reg111=0.5*reg111; reg103=reg62+reg103; reg242=reg242/4; reg166=reg143+reg166;
    reg155=0.16666666666666666667*reg155; reg176=reg176/3; reg119=reg119/4; reg140=reg151+reg140; reg274=reg255+reg274;
    reg182=reg182/4; reg141=reg194+reg141; reg36=reg36/4; reg307=reg307/3; reg268=0.16666666666666666667*reg268;
    reg214=reg266+reg214; reg429=reg234+reg429; reg225=reg225/2; reg186=reg186/3; reg56=reg461+reg56;
    reg294=0.5*reg294; reg142=0.16666666666666666667*reg142; reg374=reg374/3; reg54=2*reg190; reg287=reg329+reg287;
    reg240=0.16666666666666666667*reg240; reg368=reg368/3; reg352=reg352/3; reg76=reg102+reg76; reg186=reg65+reg186;
    reg273=reg463+reg273; reg440=reg173+reg440; reg87=reg184+reg87; reg196=reg196/3; reg110=reg110/2;
    reg277=reg445+reg277; reg162=reg420+reg162; reg176=reg274+reg176; reg79=reg94+reg79; reg198=reg123+reg198;
    reg170=reg170/4; reg48=reg270+reg48; reg36=reg30+reg36; reg117=0.5*reg117; reg46=0.16666666666666666667*reg46;
    reg182=reg125+reg182; reg243=reg243/4; reg116=reg116/2; reg159=reg159/4; reg33=reg360+reg33;
    reg214=reg214/2; reg120=reg120/4; reg68=0.5*reg68; reg119=reg166+reg119; reg13=reg254+reg13;
    reg257=reg257/2; reg105=0.16666666666666666667*reg105; reg83=reg83/2; reg98=reg98/3; reg115=reg93+reg115;
    reg333=reg107+reg333; reg31=reg265+reg31; reg185=reg185/4; reg240=reg240/4; reg218=reg180+reg218;
    reg252=reg252/4; reg11=reg246+reg11; reg303=reg145+reg303; reg219=reg219/3; reg142=reg142/4;
    reg54=reg190+reg54; reg251=reg251/4; reg260=reg260/4; reg96=reg40+reg96; reg352=reg429+reg352;
    reg450=reg235+reg450; reg225=reg76+reg225; reg191=reg191/4; reg45=reg39+reg45; reg82=0.16666666666666666667*reg82;
    reg25=reg58+reg25; reg425=reg217+reg425; reg307=reg141+reg307; reg269=reg269/4; reg231=reg231/4;
    reg334=reg339+reg334; reg248=reg248/4; reg193=reg100+reg193; reg148=reg148/3; reg30=0.5*reg128;
    reg195=reg195/4; reg268=reg268/4; reg201=reg103+reg201; reg228=reg204+reg228; reg282=reg413+reg282;
    reg147=reg147/4; reg35=0.16666666666666666667*reg35; reg355=reg308+reg355; reg179=reg179/4; reg97=reg149+reg97;
    reg381=reg397+reg381; reg382=reg299+reg382; reg26=reg43+reg26; reg95=reg95/4; reg28=0.16666666666666666667*reg28;
    reg108=0.16666666666666666667*reg108; reg213=reg213/3; reg91=reg178+reg91; reg154=reg154/4; reg47=0.16666666666666666667*reg47;
    reg294=reg294/3; reg177=reg177/3; reg49=reg174+reg49; reg253=reg253/4; reg229=reg106+reg229;
    reg61=0.16666666666666666667*reg61; reg90=reg90/4; reg320=reg23+reg320; reg242=reg140+reg242; reg374=reg434+reg374;
    reg86=0.16666666666666666667*reg86; reg124=reg160+reg124; reg368=reg56+reg368; reg259=reg259/3; reg131=reg203+reg131;
    reg129=reg129/4; reg111=reg111/3; reg155=reg155/4; reg23=reg57/2; reg233=reg287+reg233;
    reg297=reg75+reg297; reg142=reg352+reg142; reg95=reg282+reg95; reg119=0.5*reg119; reg198=reg198/2;
    reg242=0.5*reg242; reg108=reg108/4; reg154=reg131+reg154; reg120=reg374+reg120; reg243=reg33+reg243;
    reg90=reg382+reg90; reg98=reg115+reg98; reg83=reg48+reg83; reg229=reg229/2; reg159=reg425+reg159;
    reg155=reg176+reg155; reg257=reg11+reg257; reg105=reg105/4; reg185=reg440+reg185; reg196=reg25+reg196;
    reg111=reg79+reg111; reg195=reg355+reg195; reg233=reg233/2; reg269=reg333+reg269; reg268=reg162+reg268;
    reg259=reg193+reg259; reg228=reg228/2; reg82=reg82/4; reg36=0.5*reg36; reg252=reg186+reg252;
    reg45=reg219+reg45; reg35=reg35/4; reg46=reg46/4; reg179=reg381+reg179; reg182=0.5*reg182;
    reg147=reg201+reg147; reg96=reg96/2; reg97=reg213+reg97; reg11=reg31/3; reg86=reg86/4;
    reg124=reg124/2; reg307=reg260+reg307; reg248=reg91+reg248; reg129=reg320+reg129; reg25=reg84/2;
    reg30=reg30/3; reg251=reg303+reg251; reg148=reg297+reg148; reg23=reg23+reg130; reg33=0.5*reg72;
    reg39=reg104/2; reg50=0.5*reg50; reg113=reg113/2; reg59=0.5*reg59; reg191=reg450+reg191;
    reg87=0.5*reg87; reg80=reg80/2; reg68=reg68/3; reg114=0.5*reg114; reg214=reg54+reg214;
    reg69=reg116+reg69; reg231=reg277+reg231; reg170=reg273+reg170; reg127=reg110+reg127; reg117=reg117/3;
    reg47=reg47/4; reg177=reg26+reg177; reg253=reg334+reg253; reg28=reg28/4; reg70=reg70/2;
    reg218=0.5*reg218; reg240=reg368+reg240; reg294=reg225+reg294; reg26=reg49/3; reg61=reg61/4;
    reg40=reg13/3; reg155=0.16666666666666666667*reg155; reg159=reg159/2; reg154=0.16666666666666666667*reg154; reg87=reg87/3;
    reg68=reg69+reg68; reg253=0.5*reg253; reg198=reg195+reg198; reg61=reg177+reg61; reg243=reg229+reg243;
    reg170=0.16666666666666666667*reg170; reg117=reg127+reg117; reg119=reg119/3; reg182=reg182/3; reg26=reg214+reg26;
    reg120=reg120/2; reg46=reg196+reg46; reg268=reg268/2; reg179=0.5*reg179; reg35=reg97+reg35;
    reg25=reg25+reg73; reg147=reg147/2; reg30=reg23+reg30; reg240=0.5*reg240; reg33=reg33/3;
    reg39=reg39+reg9; reg233=reg191+reg233; reg10=reg70+reg10; reg95=0.5*reg95; reg50=reg50/3;
    reg86=reg259+reg86; reg124=reg90+reg124; reg129=reg129/2; reg108=reg111+reg108; reg228=reg252+reg228;
    reg242=reg242/3; reg113=reg42+reg113; reg28=reg148+reg28; reg59=reg59/3; reg47=reg294+reg47;
    reg105=reg98+reg105; reg40=reg257+reg40; reg142=0.5*reg142; reg218=reg218/3; reg44=0.5*reg44;
    reg248=0.5*reg248; reg37=reg37/2; reg307=0.16666666666666666667*reg307; reg251=0.16666666666666666667*reg251; reg11=reg83+reg11;
    reg96=reg185+reg96; reg38=reg80+reg38; reg82=reg45+reg82; reg114=reg114/3; reg231=0.16666666666666666667*reg231;
    reg269=reg269/2; reg36=reg36/3; reg50=reg10+reg50; reg86=0.16666666666666666667*reg86; reg129=reg46+reg129;
    reg251=reg251/4; reg11=0.16666666666666666667*reg11; reg242=reg243+reg242; reg120=reg35+reg120; reg33=reg39+reg33;
    reg41=reg37+reg41; reg269=reg28+reg269; reg30=reg30/2; reg117=reg117/2; reg182=reg228+reg182;
    reg25=0.5*reg25; reg248=reg248/3; reg179=reg179/3; reg44=reg44/3; reg147=reg82+reg147;
    reg218=reg198+reg218; reg240=reg240/3; reg268=reg105+reg268; reg114=reg38+reg114; reg95=reg95/3;
    reg108=0.16666666666666666667*reg108; reg154=reg154/4; reg47=0.16666666666666666667*reg47; reg40=0.16666666666666666667*reg40; reg36=reg96+reg36;
    reg159=reg61+reg159; reg155=reg155/4; reg253=reg253/3; reg233=reg87+reg233; reg59=reg113+reg59;
    reg68=0.5*reg68; reg26=0.16666666666666666667*reg26; reg142=reg142/3; reg119=reg124+reg119; reg231=reg231/4;
    reg170=reg170/4; reg307=reg307/4; reg30=reg33+reg30; reg231=reg233+reg231; reg253=reg268+reg253;
    reg25=reg25/3; reg40=reg40/4; reg179=reg147+reg179; reg248=reg120+reg248; reg95=reg129+reg95;
    reg68=reg68/3; reg47=reg47/4; reg269=reg240+reg269; reg26=reg26/4; reg108=reg108/4;
    reg44=reg41+reg44; reg170=reg242+reg170; reg307=reg119+reg307; reg154=reg182+reg154; reg50=reg50/2;
    reg86=reg86/4; reg117=reg114+reg117; reg11=reg11/4; reg218=reg251+reg218; reg159=reg142+reg159;
    reg59=0.5*reg59; reg155=reg36+reg155; reg170=0.5*reg170; reg108=reg95+reg108; reg11=reg253+reg11;
    reg218=0.5*reg218; reg269=reg26+reg269; reg231=reg231/2; reg68=reg117+reg68; reg86=reg179+reg86;
    reg40=reg248+reg40; reg50=reg44+reg50; reg59=reg59/3; reg154=reg154/2; reg47=reg159+reg47;
    reg155=reg155/2; reg25=reg30+reg25; reg307=0.5*reg307; reg269=0.16666666666666666667*reg269; reg307=reg307/3;
    reg170=reg170/3; reg86=reg231+reg86; reg40=0.16666666666666666667*reg40; reg11=0.16666666666666666667*reg11; reg155=reg47+reg155;
    reg25=0.5*reg25; reg68=reg68/2; reg108=reg154+reg108; reg218=reg218/3; reg50=reg59+reg50;
    reg307=reg155+reg307; reg40=reg40/4; reg11=reg11/4; reg218=reg108+reg218; reg170=reg86+reg170;
    reg269=reg269/4; reg68=reg50+reg68; reg25=reg25/3; reg11=reg307+reg11; reg25=reg68+reg25;
    reg269=reg218+reg269; reg40=reg170+reg40; res[1]=reg11/reg25; res[2]=reg269/reg25; res[0]=reg40/reg25;

    return res;
}
}
#endif // LMT_HEXA
