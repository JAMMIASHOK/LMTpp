#ifndef GET_VAR_INTER__Quad_9_H
#define GET_VAR_INTER__Quad_9_H
 
#include <containers/polynomials.h>
 
 
namespace LMT {
 
template<class PosNodes,class Pvec,class TVI>
bool get_var_inter_experimental(const Quad_9 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter, typename Pvec::template SubType<0>::T tolerance = 1e-7 ) {
    typedef typename Pvec::template SubType<0>::T T;
    T U, V, eval, eval2, U2, V2;
    Vec< T, 9 > coeff_resultant_U;
    Vec< T, 5 > coeff_V;
    Vec< T > sol_U, sol_V;
    Vec< Vec< T >, 2 > coeff_poly;
    Vec< Vec< T, 2 > > sol_poly;
    bool isSolution;

    /// on résout le problème s'il est "quasi-linéaire"
    coeff_poly[0].resize(15);
    coeff_poly[1].resize(15);
    {
    T R_0 = pos_nodes[8][1]; T R_1 = (-16.0)*R_0; R_0 = 16.0*R_0; T R_2 = pos_nodes[2][1];
    T R_3 = 4.0*R_2; R_3 = R_0+R_3; T R_4 = (-2.0)*R_2; R_1 = R_4+R_1;
    R_0 = R_2+R_0; R_2 = pos_nodes[5][1]; R_4 = (-8.0)*R_2; T R_5 = 4.0*R_2;
    T R_6 = 8.0*R_2; R_2 = (-4.0)*R_2; T R_7 = pos_nodes[6][1]; T R_8 = (-8.0)*R_7;
    T R_9 = 8.0*R_7; T R_10 = 4.0*R_7; R_7 = (-4.0)*R_7; T R_11 = pos_nodes[3][1];
    T R_12 = 4.0*R_11; T R_13 = (-6.0)*R_11; T R_14 = (-2.0)*R_11; T R_15 = 2.0*R_11;
    T R_16 = 3.0*R_11; R_11 = (-1.0)*R_11; T R_17 = pos_nodes[7][1]; T R_18 = (-8.0)*R_17;
    T R_19 = 12.0*R_17; T R_20 = 8.0*R_17; T R_21 = (-4.0)*R_17; T R_22 = (-12.0)*R_17;
    R_17 = 4.0*R_17; T R_23 = pos_nodes[1][1]; T R_24 = 4.0*R_23; T R_25 = (-2.0)*R_23;
    T R_26 = (-6.0)*R_23; T R_27 = 3.0*R_23; T R_28 = 2.0*R_23; R_23 = (-1.0)*R_23;
    T R_29 = pos_nodes[4][1]; T R_30 = (-8.0)*R_29; T R_31 = 8.0*R_29; T R_32 = 12.0*R_29;
    T R_33 = (-12.0)*R_29; T R_34 = (-4.0)*R_29; R_29 = 4.0*R_29; T R_35 = pos[1];
    R_35 = (-1.0)*R_35; T R_36 = pos_nodes[0][1]; T R_37 = 4.0*R_36; R_30 = R_37+R_30;
    R_24 = R_30+R_24; R_24 = R_18+R_24; R_4 = R_24+R_4; R_4 = R_12+R_4;
    R_4 = R_8+R_4; R_4 = R_3+R_4; coeff_poly[1][12] = R_4; R_4 = (-6.0)*R_36;
    R_31 = R_4+R_31; R_25 = R_31+R_25; R_25 = R_19+R_25; R_5 = R_25+R_5;
    R_13 = R_5+R_13; R_13 = R_9+R_13; R_13 = R_1+R_13; coeff_poly[1][8] = R_13;
    R_4 = R_32+R_4; R_26 = R_4+R_26; R_26 = R_20+R_26; R_6 = R_26+R_6;
    R_6 = R_14+R_6; R_6 = R_10+R_6; R_6 = R_1+R_6; coeff_poly[1][7] = R_6;
    R_6 = 9.0*R_36; R_6 = R_33+R_6; R_27 = R_6+R_27; R_22 = R_27+R_22;
    R_2 = R_22+R_2; R_2 = R_16+R_2; R_2 = R_7+R_2; R_0 = R_2+R_0;
    coeff_poly[1][4] = R_0; R_0 = 2.0*R_36; R_21 = R_0+R_21; R_15 = R_21+R_15;
    coeff_poly[1][5] = R_15; R_34 = R_0+R_34; R_34 = R_28+R_34; coeff_poly[1][3] = R_34;
    R_34 = (-3.0)*R_36; R_17 = R_17+R_34; R_11 = R_17+R_11; coeff_poly[1][2] = R_11;
    R_29 = R_34+R_29; R_23 = R_29+R_23; coeff_poly[1][1] = R_23; R_35 = R_36+R_35;
    coeff_poly[1][0] = R_35; R_35 = pos_nodes[6][0]; R_36 = (-8.0)*R_35; R_23 = 8.0*R_35;
    R_29 = 4.0*R_35; R_35 = (-4.0)*R_35; R_34 = pos_nodes[5][0]; R_11 = (-8.0)*R_34;
    R_17 = 4.0*R_34; R_28 = 8.0*R_34; R_34 = (-4.0)*R_34; R_0 = pos_nodes[2][0];
    R_15 = 4.0*R_0; R_21 = (-2.0)*R_0; R_2 = pos_nodes[8][0]; R_7 = (-16.0)*R_2;
    R_21 = R_7+R_21; R_2 = 16.0*R_2; R_15 = R_2+R_15; R_0 = R_2+R_0;
    R_2 = pos_nodes[7][0]; R_7 = (-8.0)*R_2; R_16 = 12.0*R_2; R_22 = 8.0*R_2;
    R_27 = (-4.0)*R_2; R_6 = (-12.0)*R_2; R_2 = 4.0*R_2; R_33 = pos_nodes[3][0];
    R_1 = 4.0*R_33; R_10 = (-6.0)*R_33; R_14 = (-2.0)*R_33; R_26 = 2.0*R_33;
    R_20 = 3.0*R_33; R_33 = (-1.0)*R_33; R_4 = pos_nodes[1][0]; R_32 = 4.0*R_4;
    R_13 = (-2.0)*R_4; R_9 = (-6.0)*R_4; R_5 = 3.0*R_4; R_25 = 2.0*R_4;
    R_4 = (-1.0)*R_4; R_19 = pos_nodes[4][0]; R_31 = (-8.0)*R_19; R_3 = 8.0*R_19;
    R_8 = 12.0*R_19; R_12 = (-12.0)*R_19; R_24 = (-4.0)*R_19; R_19 = 4.0*R_19;
    R_18 = pos_nodes[0][0]; R_30 = 4.0*R_18; R_31 = R_30+R_31; R_32 = R_31+R_32;
    R_32 = R_7+R_32; R_11 = R_32+R_11; R_1 = R_11+R_1; R_1 = R_36+R_1;
    R_15 = R_1+R_15; coeff_poly[0][12] = R_15; R_15 = (-6.0)*R_18; R_3 = R_15+R_3;
    R_13 = R_3+R_13; R_16 = R_13+R_16; R_16 = R_17+R_16; R_16 = R_10+R_16;
    R_23 = R_16+R_23; R_23 = R_21+R_23; coeff_poly[0][8] = R_23; R_8 = R_15+R_8;
    R_9 = R_8+R_9; R_9 = R_22+R_9; R_9 = R_28+R_9; R_14 = R_9+R_14;
    R_14 = R_29+R_14; R_21 = R_14+R_21; coeff_poly[0][7] = R_21; R_21 = 9.0*R_18;
    R_12 = R_21+R_12; R_5 = R_12+R_5; R_6 = R_5+R_6; R_6 = R_34+R_6;
    R_6 = R_20+R_6; R_35 = R_6+R_35; R_35 = R_0+R_35; coeff_poly[0][4] = R_35;
    R_35 = 2.0*R_18; R_27 = R_27+R_35; R_27 = R_26+R_27; coeff_poly[0][5] = R_27;
    R_35 = R_24+R_35; R_35 = R_25+R_35; coeff_poly[0][3] = R_35; R_35 = (-3.0)*R_18;
    R_2 = R_2+R_35; R_2 = R_33+R_2; coeff_poly[0][2] = R_2; R_35 = R_19+R_35;
    R_4 = R_35+R_4; coeff_poly[0][1] = R_4; R_4 = pos[0]; R_4 = (-1.0)*R_4;
    R_18 = R_4+R_18; coeff_poly[0][0] = R_18; 
    coeff_poly[0][6] = 0.0; coeff_poly[0][9] = 0.0; coeff_poly[0][10] = 0.0; coeff_poly[0][11] = 0.0;
    coeff_poly[0][13] = 0.0; coeff_poly[0][14] = 0.0; coeff_poly[1][6] = 0.0; coeff_poly[1][9] = 0.0;
    coeff_poly[1][10] = 0.0; coeff_poly[1][11] = 0.0; coeff_poly[1][13] = 0.0; coeff_poly[1][14] = 0.0;
    

    }
    if (solve_quasi_linear_polynomial_system_2X( coeff_poly, sol_poly, tolerance ) )
        for( unsigned i=0; i< sol_poly.size(); ++i) 
            if ( var_inter_is_inside( Quad_9(), sol_poly[i], tolerance ) ) {
                var_inter += sol_poly[i];
                return true;
            }


    
    T R_0 = pos_nodes[6][1]; T R_1 = 4.0*R_0; T R_2 = pos_nodes[4][1]; T R_3 = (-8.0)*R_2;
    T R_4 = (-4.0)*R_2; T R_5 = 12.0*R_2; R_1 = R_5+R_1; R_5 = 4.0*R_2;
    T R_6 = R_2+R_0; R_6 = 8.0*R_6; T R_7 = pos_nodes[8][1]; T R_8 = 16.0*R_7;
    R_7 = (-16.0)*R_7; R_1 = R_7+R_1; T R_9 = pos_nodes[5][1]; T R_10 = R_9+R_0;
    R_10 = (-4.0)*R_10; T R_11 = 4.0*R_9; T R_12 = pos_nodes[1][1]; T R_13 = (-1.0)*R_12;
    T R_14 = pos_nodes[2][1]; T R_15 = R_10+R_14; R_15 = R_8+R_15; T R_16 = R_14+R_12;
    T R_17 = (-2.0)*R_16; T R_18 = pos_nodes[8][0]; T R_19 = 16.0*R_18; R_18 = (-16.0)*R_18;
    T R_20 = pos_nodes[1][0]; T R_21 = (-1.0)*R_20; T R_22 = pos_nodes[2][0]; T R_23 = R_22+R_20;
    R_23 = (-2.0)*R_23; R_23 = R_23+R_18; T R_24 = pos_nodes[5][0]; T R_25 = 4.0*R_24;
    R_23 = R_25+R_23; R_25 = pos_nodes[4][0]; T R_26 = (-8.0)*R_25; T R_27 = (-4.0)*R_25;
    T R_28 = 12.0*R_25; T R_29 = 4.0*R_25; T R_30 = pos_nodes[6][0]; T R_31 = 4.0*R_30;
    R_31 = R_18+R_31; R_31 = R_28+R_31; R_28 = R_30+R_24; R_28 = (-4.0)*R_28;
    R_18 = R_30+R_25; R_18 = 8.0*R_18; T R_32 = pos[0]; R_32 = (-1.0)*R_32;
    T R_33 = pos_nodes[0][0]; T R_34 = R_33+R_22; R_34 = R_34+R_20; T R_35 = R_33+R_20;
    T R_36 = 4.0*R_35; R_36 = R_26+R_36; R_26 = 2.0*R_35; R_26 = R_27+R_26;
    R_27 = pow(R_26,2); R_35 = (-6.0)*R_35; T R_37 = 9.0*R_33; R_37 = R_37+R_19;
    R_37 = R_22+R_37; R_32 = R_32+R_33; T R_38 = pow(R_32,2); T R_39 = (-3.0)*R_33;
    R_29 = R_29+R_39; R_21 = R_29+R_21; R_29 = pow(R_21,2); T R_40 = pos_nodes[7][0];
    T R_41 = (-16.0)*R_40; R_30 = R_40+R_30; R_30 = R_25+R_30; R_30 = R_30+R_24;
    R_30 = (-8.0)*R_30; R_30 = R_19+R_30; R_24 = R_40+R_24; R_24 = 8.0*R_24;
    R_31 = R_24+R_31; R_31 = R_35+R_31; R_35 = (-8.0)*R_40; R_25 = R_40+R_25;
    R_25 = (-12.0)*R_25; R_24 = 12.0*R_40; R_23 = R_24+R_23; R_24 = R_18+R_23;
    R_19 = (-4.0)*R_40; R_40 = 4.0*R_40; R_39 = R_40+R_39; R_40 = pos_nodes[3][0];
    R_34 = R_34+R_40; R_34 = 4.0*R_34; R_30 = R_34+R_30; R_34 = pow(R_30,2);
    R_22 = R_22+R_40; R_22 = (-2.0)*R_22; R_22 = R_31+R_22; R_31 = pow(R_22,2);
    R_20 = R_20+R_40; R_20 = 3.0*R_20; R_20 = R_37+R_20; R_28 = R_20+R_28;
    R_28 = R_25+R_28; R_25 = pow(R_28,2); R_33 = R_33+R_40; R_20 = 8.0*R_33;
    R_20 = R_41+R_20; R_41 = 4.0*R_33; R_41 = R_35+R_41; R_35 = (-6.0)*R_33;
    R_23 = R_35+R_23; R_23 = R_18+R_23; R_18 = pow(R_23,2); R_35 = R_24+R_35;
    R_24 = pow(R_35,2); R_33 = 2.0*R_33; R_33 = R_19+R_33; R_19 = pow(R_33,2);
    R_40 = (-1.0)*R_40; R_39 = R_40+R_39; R_40 = pow(R_39,2); R_37 = pos_nodes[3][1];
    T R_42 = R_14+R_37; R_42 = (-2.0)*R_42; R_1 = R_42+R_1; R_42 = R_12+R_37;
    R_42 = 3.0*R_42; R_15 = R_42+R_15; T R_43 = (-1.0)*R_37; T R_44 = pos_nodes[7][1];
    T R_45 = (-16.0)*R_44; R_9 = R_44+R_9; T R_46 = R_2+R_9; R_0 = R_46+R_0;
    R_0 = (-8.0)*R_0; R_9 = 8.0*R_9; R_1 = R_9+R_1; R_2 = R_44+R_2;
    R_2 = (-12.0)*R_2; R_10 = R_10+R_2; R_14 = R_10+R_14; R_14 = R_14+R_8;
    R_10 = 12.0*R_44; R_9 = R_10+R_7; R_9 = R_11+R_9; R_9 = R_17+R_9;
    R_9 = R_9+R_6; R_46 = (-8.0)*R_44; T R_47 = 4.0*R_44; R_44 = (-4.0)*R_44;
    T R_48 = pos[1]; R_48 = (-1.0)*R_48; T R_49 = pos_nodes[0][1]; R_16 = R_49+R_16;
    R_16 = R_16+R_37; R_16 = 4.0*R_16; R_8 = R_16+R_8; R_8 = R_0+R_8;
    R_0 = pow(R_8,2); R_16 = R_27*R_0; T R_50 = R_21*R_0; R_50 = R_26*R_50;
    R_50 = 2.0*R_50; T R_51 = R_29*R_0; T R_52 = R_32*R_0; T R_53 = R_26*R_52;
    R_53 = 2.0*R_53; R_52 = R_21*R_52; R_52 = 2.0*R_52; R_0 = R_38*R_0;
    R_12 = R_12+R_49; T R_54 = 4.0*R_12; R_54 = R_3+R_54; R_3 = R_28*R_54;
    R_3 = R_22*R_3; T R_55 = R_8*R_3; T R_56 = R_30*R_54; T R_57 = R_26*R_56;
    T R_58 = R_8*R_57; R_58 = (-1.0)*R_58; R_58 = R_16+R_58; R_16 = R_21*R_56;
    T R_59 = R_8*R_16; R_59 = (-1.0)*R_59; T R_60 = R_32*R_56; T R_61 = R_8*R_60;
    R_61 = (-1.0)*R_61; T R_62 = R_39*R_54; T R_63 = R_22*R_62; T R_64 = R_8*R_63;
    R_62 = R_28*R_62; T R_65 = R_8*R_62; T R_66 = R_35*R_54; T R_67 = R_26*R_66;
    T R_68 = R_8*R_67; R_68 = (-1.0)*R_68; T R_69 = R_21*R_66; T R_70 = R_8*R_69;
    R_70 = (-1.0)*R_70; T R_71 = R_32*R_66; T R_72 = R_8*R_71; R_72 = (-1.0)*R_72;
    T R_73 = 2.0*R_12; R_4 = R_73+R_4; R_73 = R_4*R_31; T R_74 = R_8*R_73;
    T R_75 = R_4*R_25; T R_76 = R_8*R_75; T R_77 = R_4*R_22; T R_78 = R_33*R_77;
    T R_79 = pow(R_4,2); T R_80 = R_79*R_34; T R_81 = R_35*R_79; R_81 = R_30*R_81;
    R_81 = 2.0*R_81; T R_82 = R_24*R_79; T R_83 = R_41*R_79; T R_84 = R_30*R_83;
    R_83 = R_35*R_83; R_79 = R_19*R_79; T R_85 = R_28*R_4; T R_86 = R_39*R_4;
    T R_87 = R_4*R_41; T R_88 = R_26*R_87; T R_89 = R_8*R_88; R_89 = (-1.0)*R_89;
    T R_90 = R_21*R_87; T R_91 = R_8*R_90; R_91 = (-1.0)*R_91; R_87 = R_32*R_87;
    T R_92 = R_8*R_87; R_92 = (-1.0)*R_92; T R_93 = R_40*R_4; T R_94 = R_8*R_93;
    T R_95 = R_19*R_4; R_12 = (-6.0)*R_12; R_12 = R_1+R_12; R_1 = R_12*R_77;
    T R_96 = R_30*R_1; R_96 = (-1.0)*R_96; R_80 = R_96+R_80; R_96 = R_35*R_1;
    R_96 = (-1.0)*R_96; R_1 = R_33*R_1; R_1 = (-1.0)*R_1; T R_97 = R_12*R_85;
    T R_98 = R_30*R_97; R_98 = (-1.0)*R_98; T R_99 = R_35*R_97; R_99 = (-1.0)*R_99;
    R_97 = R_33*R_97; R_97 = (-1.0)*R_97; T R_100 = R_26*R_12; T R_101 = R_22*R_100;
    T R_102 = R_8*R_101; R_102 = (-1.0)*R_102; R_102 = R_80+R_102; R_74 = R_102+R_74;
    R_58 = R_74+R_58; R_74 = R_28*R_100; R_102 = R_8*R_74; R_102 = (-1.0)*R_102;
    R_80 = R_39*R_100; T R_103 = R_8*R_80; R_103 = (-1.0)*R_103; T R_104 = R_12*R_86;
    T R_105 = R_30*R_104; R_105 = (-1.0)*R_105; T R_106 = R_35*R_104; R_106 = (-1.0)*R_106;
    R_104 = R_33*R_104; R_104 = (-1.0)*R_104; T R_107 = pow(R_12,2); T R_108 = R_26*R_107;
    T R_109 = R_30*R_108; R_58 = R_109+R_58; coeff_resultant_U[8] = R_58; R_58 = R_35*R_108;
    R_108 = R_33*R_108; R_109 = R_21*R_107; T R_110 = R_30*R_109; T R_111 = R_35*R_109;
    R_109 = R_33*R_109; R_107 = R_32*R_107; T R_112 = R_30*R_107; T R_113 = R_35*R_107;
    R_107 = R_33*R_107; T R_114 = R_21*R_12; T R_115 = R_22*R_114; T R_116 = R_8*R_115;
    R_116 = (-1.0)*R_116; T R_117 = R_28*R_114; T R_118 = R_8*R_117; R_118 = (-1.0)*R_118;
    T R_119 = R_39*R_114; T R_120 = R_8*R_119; R_120 = (-1.0)*R_120; T R_121 = R_32*R_12;
    T R_122 = R_22*R_121; T R_123 = R_8*R_122; R_123 = (-1.0)*R_123; T R_124 = R_28*R_121;
    T R_125 = R_8*R_124; R_125 = (-1.0)*R_125; T R_126 = R_39*R_121; T R_127 = R_8*R_126;
    R_127 = (-1.0)*R_127; T R_128 = 9.0*R_49; R_15 = R_128+R_15; R_15 = R_2+R_15;
    R_2 = R_15*R_77; T R_129 = R_30*R_2; R_129 = (-1.0)*R_129; R_129 = R_55+R_129;
    R_96 = R_129+R_96; R_2 = R_35*R_2; R_2 = (-1.0)*R_2; R_129 = R_15*R_85;
    R_55 = R_30*R_129; R_55 = (-1.0)*R_55; R_129 = R_35*R_129; R_129 = (-1.0)*R_129;
    T R_130 = R_15*R_78; R_130 = (-1.0)*R_130; T R_131 = R_15*R_36; R_131 = R_12*R_131;
    T R_132 = R_30*R_131; R_68 = R_132+R_68; R_59 = R_68+R_59; R_68 = R_35*R_131;
    R_131 = R_33*R_131; R_132 = R_15*R_86; T R_133 = R_30*R_132; R_133 = (-1.0)*R_133;
    R_132 = R_35*R_132; R_132 = (-1.0)*R_132; T R_134 = R_26*R_15; T R_135 = R_22*R_134;
    T R_136 = R_8*R_135; R_136 = (-1.0)*R_136; T R_137 = R_28*R_134; T R_138 = R_8*R_137;
    R_138 = (-1.0)*R_138; R_138 = R_68+R_138; R_89 = R_138+R_89; R_70 = R_89+R_70;
    R_134 = R_39*R_134; R_89 = R_8*R_134; R_89 = (-1.0)*R_89; R_89 = R_131+R_89;
    R_131 = R_21*R_15; R_138 = R_22*R_131; R_68 = R_8*R_138; R_68 = (-1.0)*R_68;
    T R_139 = R_28*R_131; T R_140 = R_8*R_139; R_140 = (-1.0)*R_140; R_140 = R_109+R_140;
    R_109 = R_12*R_131; T R_141 = R_30*R_109; R_141 = 2.0*R_141; R_68 = R_141+R_68;
    R_118 = R_68+R_118; R_68 = R_35*R_109; R_68 = 2.0*R_68; R_109 = R_33*R_109;
    R_109 = 2.0*R_109; R_131 = R_39*R_131; R_141 = R_8*R_131; R_141 = (-1.0)*R_141;
    T R_142 = R_28*R_15; R_142 = R_33*R_142; T R_143 = R_4*R_142; R_143 = (-1.0)*R_143;
    T R_144 = R_39*R_15; R_144 = R_33*R_144; R_144 = R_4*R_144; R_144 = (-1.0)*R_144;
    T R_145 = pow(R_15,2); T R_146 = R_26*R_145; T R_147 = R_30*R_146; R_146 = R_35*R_146;
    T R_148 = R_21*R_145; T R_149 = R_30*R_148; R_148 = R_35*R_148; T R_150 = R_33*R_145;
    T R_151 = R_26*R_150; R_150 = R_21*R_150; R_145 = R_32*R_145; T R_152 = R_30*R_145;
    R_145 = R_35*R_145; T R_153 = R_32*R_15; T R_154 = R_22*R_153; T R_155 = R_8*R_154;
    R_155 = (-1.0)*R_155; T R_156 = R_39*R_153; R_156 = R_8*R_156; R_156 = (-1.0)*R_156;
    T R_157 = R_28*R_153; T R_158 = R_8*R_157; R_158 = (-1.0)*R_158; R_153 = R_12*R_153;
    T R_159 = R_30*R_153; R_159 = 2.0*R_159; R_155 = R_159+R_155; R_159 = R_35*R_153;
    R_159 = 2.0*R_159; R_158 = R_159+R_158; R_153 = R_33*R_153; R_153 = 2.0*R_153;
    R_128 = R_14+R_128; R_42 = R_128+R_42; R_128 = R_32*R_42; R_128 = R_39*R_128;
    R_14 = R_28*R_42; R_14 = R_33*R_14; R_159 = pow(R_42,2); R_159 = R_33*R_159;
    R_159 = R_32*R_159; T R_160 = R_39*R_42; R_160 = R_160*R_33; T R_161 = (-3.0)*R_49;
    R_5 = R_161+R_5; R_13 = R_5+R_13; R_5 = R_13*R_34; R_5 = R_4*R_5;
    R_5 = 2.0*R_5; T R_162 = R_13*R_31; T R_163 = R_8*R_162; T R_164 = R_13*R_24;
    R_164 = R_4*R_164; R_164 = 2.0*R_164; T R_165 = R_13*R_20; R_165 = R_4*R_165;
    T R_166 = R_30*R_165; R_165 = R_35*R_165; T R_167 = R_13*R_25; T R_168 = R_8*R_167;
    T R_169 = R_13*R_22; T R_170 = R_12*R_169; T R_171 = R_30*R_170; R_171 = (-1.0)*R_171;
    R_171 = R_96+R_171; R_136 = R_171+R_136; R_136 = R_102+R_136; R_102 = R_35*R_170;
    R_102 = (-1.0)*R_102; R_170 = R_33*R_170; R_170 = (-1.0)*R_170; R_171 = R_15*R_169;
    R_96 = R_30*R_171; R_96 = (-1.0)*R_96; R_171 = R_35*R_171; R_171 = (-1.0)*R_171;
    R_171 = R_83+R_171; R_170 = R_171+R_170; R_133 = R_170+R_133; R_106 = R_133+R_106;
    R_133 = R_33*R_169; R_170 = R_15*R_133; R_170 = (-1.0)*R_170; R_171 = R_13*R_28;
    R_83 = R_12*R_171; T R_172 = R_30*R_83; R_172 = (-1.0)*R_172; T R_173 = R_35*R_83;
    R_173 = (-1.0)*R_173; R_83 = R_33*R_83; R_83 = (-1.0)*R_83; T R_174 = R_22*R_171;
    T R_175 = R_8*R_174; R_175 = 2.0*R_175; T R_176 = R_15*R_171; T R_177 = R_30*R_176;
    R_177 = (-1.0)*R_177; R_176 = R_35*R_176; R_176 = (-1.0)*R_176; T R_178 = R_13*R_30;
    T R_179 = R_26*R_178; T R_180 = R_8*R_179; R_180 = (-2.0)*R_180; T R_181 = R_21*R_178;
    T R_182 = R_8*R_181; R_182 = (-2.0)*R_182; T R_183 = R_32*R_178; T R_184 = R_8*R_183;
    R_184 = (-2.0)*R_184; R_184 = R_52+R_184; R_142 = R_13*R_142; R_142 = (-1.0)*R_142;
    R_52 = R_13*R_35; T R_185 = R_4*R_52; R_185 = R_30*R_185; R_185 = 4.0*R_185;
    R_96 = R_185+R_96; R_102 = R_96+R_102; R_105 = R_102+R_105; R_102 = R_26*R_52;
    R_96 = R_8*R_102; R_96 = (-2.0)*R_96; R_185 = R_21*R_52; T R_186 = R_8*R_185;
    R_186 = (-2.0)*R_186; T R_187 = R_32*R_52; T R_188 = R_8*R_187; R_188 = (-2.0)*R_188;
    R_188 = R_152+R_188; R_152 = R_13*R_41; T R_189 = R_26*R_152; T R_190 = R_8*R_189;
    R_190 = (-1.0)*R_190; R_190 = R_166+R_190; R_166 = R_21*R_152; T R_191 = R_8*R_166;
    R_191 = (-1.0)*R_191; R_152 = R_32*R_152; T R_192 = R_8*R_152; R_192 = (-1.0)*R_192;
    T R_193 = R_13*R_160; R_193 = (-1.0)*R_193; T R_194 = pow(R_13,2); T R_195 = R_194*R_34;
    T R_196 = R_194*R_35; R_196 = R_30*R_196; R_196 = 2.0*R_196; T R_197 = R_194*R_24;
    T R_198 = R_194*R_41; T R_199 = R_30*R_198; R_198 = R_35*R_198; R_194 = R_19*R_194;
    T R_200 = R_39*R_13; T R_201 = R_200*R_12; T R_202 = R_30*R_201; R_202 = (-1.0)*R_202;
    T R_203 = R_35*R_201; R_203 = (-1.0)*R_203; R_201 = R_33*R_201; R_201 = (-1.0)*R_201;
    T R_204 = R_28*R_200; T R_205 = R_8*R_204; R_205 = 2.0*R_205; T R_206 = R_200*R_15;
    T R_207 = R_30*R_206; R_207 = (-1.0)*R_207; R_206 = R_35*R_206; R_206 = (-1.0)*R_206;
    T R_208 = R_22*R_200; T R_209 = R_8*R_208; R_209 = 2.0*R_209; R_177 = R_209+R_177;
    R_173 = R_177+R_173; R_125 = R_173+R_125; R_173 = R_13*R_40; R_177 = R_8*R_173;
    R_209 = R_13*R_19; T R_210 = R_209*R_4; R_210 = 2.0*R_210; R_161 = R_47+R_161;
    R_43 = R_161+R_43; R_77 = R_43*R_77; R_161 = R_30*R_77; R_161 = (-1.0)*R_161;
    R_77 = R_35*R_77; R_77 = (-1.0)*R_77; R_169 = R_43*R_169; R_47 = R_30*R_169;
    R_47 = (-1.0)*R_47; R_169 = R_35*R_169; R_169 = (-1.0)*R_169; R_78 = R_43*R_78;
    R_78 = (-1.0)*R_78; R_36 = R_43*R_36; T R_211 = R_12*R_36; T R_212 = R_30*R_211;
    R_212 = R_111+R_212; R_111 = R_35*R_211; R_211 = R_33*R_211; R_36 = R_15*R_36;
    T R_213 = R_30*R_36; R_36 = R_35*R_36; R_85 = R_43*R_85; T R_214 = R_30*R_85;
    R_214 = (-1.0)*R_214; R_85 = R_35*R_85; R_85 = (-1.0)*R_85; R_133 = R_43*R_133;
    R_133 = (-1.0)*R_133; R_86 = R_43*R_86; T R_215 = R_30*R_86; R_215 = (-1.0)*R_215;
    R_86 = R_35*R_86; R_86 = (-1.0)*R_86; R_171 = R_43*R_171; T R_216 = R_30*R_171;
    R_216 = (-1.0)*R_216; R_171 = R_35*R_171; R_171 = (-1.0)*R_171; T R_217 = R_43*R_26;
    T R_218 = R_22*R_217; T R_219 = R_8*R_218; R_219 = (-1.0)*R_219; T R_220 = R_28*R_217;
    T R_221 = R_8*R_220; R_221 = (-1.0)*R_221; R_221 = R_111+R_221; R_217 = R_39*R_217;
    R_111 = R_8*R_217; R_111 = (-1.0)*R_111; R_111 = R_211+R_111; R_211 = R_21*R_43;
    T R_222 = R_28*R_211; T R_223 = R_8*R_222; R_223 = (-1.0)*R_223; T R_224 = R_211*R_15;
    T R_225 = R_30*R_224; R_225 = 2.0*R_225; R_224 = R_35*R_224; R_224 = 2.0*R_224;
    T R_226 = R_211*R_22; T R_227 = R_8*R_226; R_227 = (-1.0)*R_227; T R_228 = R_211*R_12;
    T R_229 = R_30*R_228; R_229 = 2.0*R_229; R_227 = R_229+R_227; R_229 = R_35*R_228;
    R_229 = 2.0*R_229; R_223 = R_229+R_223; R_228 = R_33*R_228; R_228 = 2.0*R_228;
    R_211 = R_39*R_211; R_229 = R_8*R_211; R_229 = (-1.0)*R_229; R_229 = R_228+R_229;
    R_228 = R_43*R_41; T R_230 = R_228*R_15; R_230 = R_26*R_230; R_228 = R_228*R_42;
    R_228 = R_21*R_228; R_200 = R_43*R_200; T R_231 = R_30*R_200; R_231 = (-1.0)*R_231;
    R_200 = R_35*R_200; R_200 = (-1.0)*R_200; T R_232 = R_32*R_43; T R_233 = R_232*R_15;
    T R_234 = R_30*R_233; R_234 = 2.0*R_234; R_233 = R_35*R_233; R_233 = 2.0*R_233;
    T R_235 = R_232*R_12; T R_236 = R_30*R_235; R_236 = 2.0*R_236; T R_237 = R_35*R_235;
    R_237 = 2.0*R_237; R_235 = R_33*R_235; R_235 = 2.0*R_235; T R_238 = R_232*R_22;
    T R_239 = R_8*R_238; R_239 = (-1.0)*R_239; R_236 = R_239+R_236; R_239 = R_28*R_232;
    T R_240 = R_8*R_239; R_240 = (-1.0)*R_240; R_240 = R_237+R_240; R_232 = R_39*R_232;
    R_237 = R_8*R_232; R_237 = (-1.0)*R_237; T R_241 = R_28*R_43; R_241 = R_33*R_241;
    T R_242 = R_241*R_4; R_242 = (-1.0)*R_242; T R_243 = R_241*R_13; R_243 = (-1.0)*R_243;
    T R_244 = R_33*R_43; R_244 = R_244*R_42; R_244 = R_32*R_244; R_244 = 2.0*R_244;
    T R_245 = R_39*R_43; R_245 = R_33*R_245; T R_246 = R_4*R_245; R_246 = (-1.0)*R_246;
    T R_247 = R_13*R_245; R_247 = (-1.0)*R_247; T R_248 = pow(R_43,2); T R_249 = R_248*R_26;
    T R_250 = R_30*R_249; R_141 = R_250+R_141; R_249 = R_35*R_249; R_250 = R_21*R_248;
    T R_251 = R_30*R_250; R_250 = R_35*R_250; T R_252 = R_248*R_32; T R_253 = R_30*R_252;
    R_252 = R_35*R_252; R_248 = R_248*R_33; T R_254 = R_248*R_26; R_254 = R_159+R_254;
    R_254 = R_250+R_254; R_250 = R_21*R_248; R_248 = R_32*R_248; R_37 = R_49+R_37;
    R_159 = 8.0*R_37; R_159 = R_45+R_159; R_45 = R_21*R_159; R_45 = R_26*R_45;
    T R_255 = R_8*R_45; R_97 = R_255+R_97; R_159 = R_32*R_159; R_255 = R_26*R_159;
    T R_256 = R_8*R_255; R_159 = R_21*R_159; T R_257 = R_8*R_159; T R_258 = (-6.0)*R_37;
    R_10 = R_258+R_10; R_7 = R_10+R_7; R_11 = R_7+R_11; R_17 = R_11+R_17;
    R_6 = R_17+R_6; R_232 = R_232*R_6; R_232 = (-1.0)*R_232; R_9 = R_258+R_9;
    R_57 = R_9*R_57; R_57 = (-1.0)*R_57; R_57 = R_59+R_57; R_180 = R_57+R_180;
    R_57 = R_9*R_73; R_116 = R_57+R_116; R_57 = R_9*R_101; R_57 = (-1.0)*R_57;
    R_136 = R_57+R_136; R_57 = R_9*R_27; R_57 = R_8*R_57; R_57 = 2.0*R_57;
    R_98 = R_57+R_98; R_98 = R_50+R_98; R_136 = R_98+R_136; R_136 = R_163+R_136;
    R_116 = R_136+R_116; R_180 = R_116+R_180; R_81 = R_180+R_81; R_5 = R_81+R_5;
    R_110 = R_5+R_110; R_110 = R_58+R_110; coeff_resultant_U[7] = R_110; R_67 = R_9*R_67;
    R_67 = (-1.0)*R_67; R_67 = R_53+R_67; R_96 = R_67+R_96; R_67 = R_9*R_3;
    R_161 = R_67+R_161; R_2 = R_161+R_2; R_1 = R_2+R_1; R_16 = R_9*R_16;
    R_16 = (-1.0)*R_16; R_179 = R_9*R_179; R_179 = (-2.0)*R_179; R_2 = R_9*R_115;
    R_2 = (-1.0)*R_2; R_2 = R_118+R_2; R_219 = R_2+R_219; R_2 = R_21*R_9;
    R_2 = R_26*R_2; R_2 = R_8*R_2; R_2 = 4.0*R_2; R_74 = R_9*R_74;
    R_74 = (-1.0)*R_74; R_118 = R_9*R_135; R_118 = (-1.0)*R_118; R_118 = R_64+R_118;
    R_103 = R_118+R_103; R_74 = R_103+R_74; R_103 = R_9*R_162; R_118 = R_9*R_122;
    R_118 = (-1.0)*R_118; R_118 = R_125+R_118; R_125 = R_9*R_174; R_125 = 2.0*R_125;
    R_47 = R_125+R_47; R_181 = R_9*R_181; R_181 = (-2.0)*R_181; R_88 = R_9*R_88;
    R_88 = (-1.0)*R_88; R_69 = R_9*R_69; R_69 = (-1.0)*R_69; R_102 = R_9*R_102;
    R_102 = (-2.0)*R_102; R_102 = R_155+R_102; R_69 = R_102+R_69; R_88 = R_69+R_88;
    R_60 = R_9*R_60; R_60 = (-1.0)*R_60; R_69 = R_9*R_218; R_69 = (-1.0)*R_69;
    R_69 = R_221+R_69; R_117 = R_9*R_117; R_117 = (-1.0)*R_117; R_221 = R_9*R_138;
    R_221 = (-1.0)*R_221; R_221 = R_140+R_221; R_120 = R_221+R_120; R_117 = R_120+R_117;
    R_137 = R_9*R_137; R_137 = (-1.0)*R_137; R_137 = R_106+R_137; R_80 = R_9*R_80;
    R_80 = (-1.0)*R_80; R_106 = R_9*R_63; R_214 = R_106+R_214; R_80 = R_214+R_80;
    R_75 = R_9*R_75; R_214 = R_29*R_9; R_214 = R_8*R_214; R_214 = 2.0*R_214;
    R_106 = R_9*R_226; R_106 = (-1.0)*R_106; R_106 = R_223+R_106; R_124 = R_9*R_124;
    R_124 = (-1.0)*R_124; R_223 = R_9*R_208; R_223 = 2.0*R_223; R_216 = R_223+R_216;
    R_83 = R_216+R_83; R_83 = R_127+R_83; R_124 = R_83+R_124; R_183 = R_9*R_183;
    R_183 = (-2.0)*R_183; R_71 = R_9*R_71; R_71 = (-1.0)*R_71; R_90 = R_9*R_90;
    R_90 = (-1.0)*R_90; R_185 = R_9*R_185; R_185 = (-2.0)*R_185; R_189 = R_9*R_189;
    R_189 = (-1.0)*R_189; R_189 = R_165+R_189; R_185 = R_189+R_185; R_189 = R_9*R_154;
    R_189 = (-1.0)*R_189; R_189 = R_158+R_189; R_119 = R_9*R_119; R_119 = (-1.0)*R_119;
    R_134 = R_9*R_134; R_134 = (-1.0)*R_134; R_220 = R_9*R_220; R_220 = (-1.0)*R_220;
    R_220 = R_36+R_220; R_134 = R_220+R_134; R_139 = R_9*R_139; R_139 = (-1.0)*R_139;
    R_167 = R_9*R_167; R_215 = R_167+R_215; R_104 = R_215+R_104; R_45 = R_9*R_45;
    R_215 = R_32*R_9; R_167 = R_26*R_215; R_167 = R_8*R_167; R_167 = 4.0*R_167;
    R_215 = R_21*R_215; R_215 = R_8*R_215; R_215 = 4.0*R_215; R_62 = R_9*R_62;
    R_85 = R_62+R_85; R_204 = R_9*R_204; R_204 = 2.0*R_204; R_171 = R_204+R_171;
    R_86 = R_171+R_86; R_133 = R_86+R_133; R_86 = R_38*R_9; R_86 = R_8*R_86;
    R_86 = 2.0*R_86; R_171 = R_9*R_238; R_171 = (-1.0)*R_171; R_171 = R_240+R_171;
    R_166 = R_9*R_166; R_166 = (-1.0)*R_166; R_187 = R_9*R_187; R_187 = (-2.0)*R_187;
    R_87 = R_9*R_87; R_87 = (-1.0)*R_87; R_217 = R_9*R_217; R_217 = (-1.0)*R_217;
    R_131 = R_9*R_131; R_131 = (-1.0)*R_131; R_222 = R_9*R_222; R_222 = (-1.0)*R_222;
    R_222 = R_224+R_222; R_131 = R_222+R_131; R_217 = R_131+R_217; R_157 = R_9*R_157;
    R_157 = (-1.0)*R_157; R_157 = R_210+R_157; R_93 = R_9*R_93; R_255 = R_9*R_255;
    R_126 = R_9*R_126; R_126 = (-1.0)*R_126; R_159 = R_9*R_159; R_152 = R_9*R_152;
    R_152 = (-1.0)*R_152; R_210 = pow(R_9,2); R_131 = R_210*R_27; R_222 = R_21*R_210;
    R_222 = R_26*R_222; R_222 = 2.0*R_222; R_129 = R_222+R_129; R_222 = R_29*R_210;
    R_148 = R_222+R_148; R_222 = R_32*R_210; R_224 = R_26*R_222; R_224 = 2.0*R_224;
    R_222 = R_21*R_222; R_222 = 2.0*R_222; R_210 = R_38*R_210; R_211 = R_9*R_211;
    R_211 = (-1.0)*R_211; R_128 = R_9*R_128; R_128 = (-1.0)*R_128; R_239 = R_9*R_239;
    R_239 = (-1.0)*R_239; R_173 = R_9*R_173; R_240 = 4.0*R_37; R_240 = R_46+R_240;
    R_46 = R_240*R_27; R_204 = R_8*R_46; R_46 = R_9*R_46; R_46 = R_146+R_46;
    R_75 = R_46+R_75; R_164 = R_75+R_164; R_75 = R_240*R_33; R_75 = R_13*R_75;
    R_75 = R_26*R_75; R_75 = (-1.0)*R_75; R_75 = R_249+R_75; R_249 = R_240*R_29;
    R_46 = R_8*R_249; R_183 = R_46+R_183; R_249 = R_9*R_249; R_249 = R_145+R_249;
    R_93 = R_249+R_93; R_249 = R_240*R_26; R_249 = R_249*R_33; R_145 = R_249*R_4;
    R_145 = (-1.0)*R_145; R_145 = R_151+R_145; R_151 = R_240*R_38; R_46 = R_8*R_151;
    R_46 = R_200+R_46; R_151 = R_6*R_151; R_200 = R_21*R_240; R_200 = R_33*R_200;
    R_146 = R_4*R_200; R_146 = (-1.0)*R_146; R_146 = R_75+R_146; R_75 = R_13*R_200;
    R_75 = (-1.0)*R_75; R_240 = R_240*R_32; R_240 = R_240*R_33; R_62 = R_240*R_4;
    R_62 = (-1.0)*R_62; R_194 = R_62+R_194; R_75 = R_194+R_75; R_194 = R_13*R_240;
    R_194 = (-1.0)*R_194; R_194 = R_247+R_194; R_37 = 2.0*R_37; R_37 = R_44+R_37;
    R_73 = R_37*R_73; R_61 = R_73+R_61; R_16 = R_61+R_16; R_101 = R_37*R_101;
    R_101 = (-1.0)*R_101; R_101 = R_74+R_101; R_101 = R_212+R_101; R_3 = R_37*R_3;
    R_77 = R_3+R_77; R_130 = R_77+R_130; R_162 = R_37*R_162; R_135 = R_37*R_135;
    R_135 = (-1.0)*R_135; R_135 = R_89+R_135; R_91 = R_135+R_91; R_72 = R_91+R_72;
    R_60 = R_72+R_60; R_115 = R_37*R_115; R_115 = (-1.0)*R_115; R_115 = R_117+R_115;
    R_122 = R_37*R_122; R_122 = (-1.0)*R_122; R_122 = R_124+R_122; R_174 = R_37*R_174;
    R_174 = 2.0*R_174; R_169 = R_174+R_169; R_170 = R_169+R_170; R_100 = R_37*R_100;
    R_169 = R_28*R_100; R_169 = (-1.0)*R_169; R_169 = R_80+R_169; R_169 = R_164+R_169;
    R_100 = R_39*R_100; R_100 = (-1.0)*R_100; R_100 = R_94+R_100; R_56 = R_37*R_56;
    R_94 = R_26*R_56; R_94 = (-1.0)*R_94; R_94 = R_16+R_94; R_55 = R_94+R_55;
    R_55 = R_99+R_55; R_99 = R_21*R_56; R_99 = (-1.0)*R_99; R_99 = R_162+R_99;
    R_186 = R_99+R_186; R_56 = R_32*R_56; R_56 = (-1.0)*R_56; R_218 = R_37*R_218;
    R_218 = (-1.0)*R_218; R_218 = R_111+R_218; R_92 = R_218+R_92; R_56 = R_92+R_56;
    R_138 = R_37*R_138; R_138 = (-1.0)*R_138; R_138 = R_141+R_138; R_119 = R_138+R_119;
    R_63 = R_37*R_63; R_178 = R_37*R_178; R_138 = R_26*R_178; R_138 = (-2.0)*R_138;
    R_141 = R_21*R_178; R_141 = (-2.0)*R_141; R_183 = R_141+R_183; R_176 = R_183+R_176;
    R_132 = R_176+R_132; R_178 = R_32*R_178; R_178 = (-2.0)*R_178; R_178 = R_86+R_178;
    R_206 = R_178+R_206; R_66 = R_37*R_66; R_178 = R_26*R_66; R_178 = (-1.0)*R_178;
    R_88 = R_178+R_88; R_178 = R_21*R_66; R_178 = (-1.0)*R_178; R_66 = R_32*R_66;
    R_66 = (-1.0)*R_66; R_154 = R_37*R_154; R_154 = (-1.0)*R_154; R_114 = R_37*R_114;
    R_86 = R_28*R_114; R_86 = (-1.0)*R_86; R_86 = R_119+R_86; R_114 = R_39*R_114;
    R_114 = (-1.0)*R_114; R_114 = R_251+R_114; R_156 = R_114+R_156; R_154 = R_156+R_154;
    R_156 = R_37*R_15; R_114 = R_28*R_156; R_251 = R_26*R_114; R_251 = (-1.0)*R_251;
    R_251 = R_145+R_251; R_143 = R_251+R_143; R_143 = R_139+R_143; R_114 = R_21*R_114;
    R_114 = (-1.0)*R_114; R_156 = R_39*R_156; R_156 = R_26*R_156; R_156 = (-1.0)*R_156;
    R_156 = R_230+R_156; R_144 = R_156+R_144; R_114 = R_144+R_114; R_142 = R_114+R_142;
    R_54 = R_37*R_54; R_54 = R_39*R_54; R_54 = R_28*R_54; R_208 = R_37*R_208;
    R_208 = 2.0*R_208; R_126 = R_208+R_126; R_226 = R_37*R_226; R_226 = (-1.0)*R_226;
    R_226 = R_229+R_226; R_238 = R_37*R_238; R_238 = (-1.0)*R_238; R_52 = R_37*R_52;
    R_229 = R_26*R_52; R_229 = (-2.0)*R_229; R_185 = R_229+R_185; R_90 = R_185+R_90;
    R_71 = R_90+R_71; R_71 = R_178+R_71; R_178 = R_21*R_52; R_178 = (-2.0)*R_178;
    R_52 = R_32*R_52; R_52 = (-2.0)*R_52; R_90 = R_4*R_37; R_185 = R_90*R_25;
    R_90 = R_40*R_90; R_121 = R_37*R_121; R_229 = R_28*R_121; R_229 = (-1.0)*R_229;
    R_229 = R_126+R_229; R_121 = R_39*R_121; R_121 = (-1.0)*R_121; R_126 = R_13*R_37;
    R_208 = R_25*R_126; R_114 = R_39*R_126; R_114 = R_28*R_114; R_114 = 2.0*R_114;
    R_126 = R_40*R_126; R_144 = R_37*R_42; R_156 = R_144*R_28; R_156 = R_156*R_32;
    R_156 = (-1.0)*R_156; R_144 = R_39*R_144; R_230 = R_21*R_144; R_230 = (-1.0)*R_230;
    R_230 = R_228+R_230; R_193 = R_230+R_193; R_156 = R_193+R_156; R_144 = R_144*R_32;
    R_144 = (-1.0)*R_144; R_144 = R_244+R_144; R_244 = pow(R_37,2); R_27 = R_244*R_27;
    R_27 = R_148+R_27; R_79 = R_27+R_79; R_63 = R_79+R_63; R_79 = R_21*R_244;
    R_79 = R_26*R_79; R_79 = 2.0*R_79; R_29 = R_244*R_29; R_27 = R_244*R_32;
    R_148 = R_27*R_26; R_148 = 2.0*R_148; R_27 = R_21*R_27; R_27 = 2.0*R_27;
    R_194 = R_27+R_194; R_38 = R_244*R_38; R_244 = R_37*R_43; R_27 = R_28*R_244;
    R_193 = R_27*R_26; R_193 = (-1.0)*R_193; R_193 = R_146+R_193; R_242 = R_193+R_242;
    R_193 = R_21*R_27; R_193 = (-1.0)*R_193; R_27 = R_32*R_27; R_27 = (-1.0)*R_27;
    R_244 = R_39*R_244; R_146 = R_244*R_26; R_146 = (-1.0)*R_146; R_230 = R_21*R_244;
    R_230 = (-1.0)*R_230; R_244 = R_244*R_32; R_244 = (-1.0)*R_244; R_48 = R_49+R_48;
    R_49 = R_48*R_34; R_228 = R_4*R_49; R_228 = 2.0*R_228; R_228 = R_182+R_228;
    R_179 = R_228+R_179; R_49 = R_13*R_49; R_49 = 2.0*R_49; R_181 = R_49+R_181;
    R_138 = R_181+R_138; R_31 = R_48*R_31; R_181 = R_8*R_31; R_49 = R_9*R_31;
    R_31 = R_37*R_31; R_24 = R_48*R_24; R_228 = R_4*R_24; R_228 = 2.0*R_228;
    R_24 = R_13*R_24; R_24 = 2.0*R_24; R_182 = R_48*R_25; R_139 = R_8*R_182;
    R_182 = R_9*R_182; R_182 = R_93+R_182; R_222 = R_182+R_222; R_222 = R_198+R_222;
    R_222 = R_208+R_222; R_24 = R_222+R_24; R_150 = R_24+R_150; R_24 = R_48*R_35;
    R_222 = R_4*R_24; R_222 = R_30*R_222; R_222 = 4.0*R_222; R_208 = R_26*R_24;
    R_198 = R_8*R_208; R_198 = (-2.0)*R_198; R_198 = R_222+R_198; R_208 = R_9*R_208;
    R_208 = (-2.0)*R_208; R_208 = R_189+R_208; R_189 = R_13*R_24; R_189 = R_30*R_189;
    R_189 = 4.0*R_189; R_222 = R_21*R_24; R_182 = R_8*R_222; R_182 = (-2.0)*R_182;
    R_182 = R_189+R_182; R_222 = R_9*R_222; R_222 = (-2.0)*R_222; R_189 = R_37*R_24;
    R_93 = R_26*R_189; R_93 = (-2.0)*R_93; R_189 = R_21*R_189; R_189 = (-2.0)*R_189;
    R_24 = R_32*R_24; R_251 = R_8*R_24; R_251 = (-2.0)*R_251; R_24 = R_9*R_24;
    R_24 = (-2.0)*R_24; R_20 = R_48*R_20; R_4 = R_4*R_20; R_145 = R_30*R_4;
    R_4 = R_35*R_4; R_20 = R_13*R_20; R_13 = R_30*R_20; R_20 = R_35*R_20;
    R_119 = R_28*R_48; R_176 = R_119*R_12; R_183 = R_30*R_176; R_183 = (-1.0)*R_183;
    R_183 = R_186+R_183; R_186 = R_35*R_176; R_186 = (-1.0)*R_186; R_176 = R_33*R_176;
    R_176 = (-1.0)*R_176; R_141 = R_119*R_15; R_92 = R_30*R_141; R_92 = (-1.0)*R_92;
    R_141 = R_35*R_141; R_141 = (-1.0)*R_141; R_141 = R_154+R_141; R_154 = R_119*R_22;
    R_218 = R_8*R_154; R_218 = 2.0*R_218; R_111 = R_9*R_154; R_111 = 2.0*R_111;
    R_78 = R_111+R_78; R_154 = R_37*R_154; R_154 = 2.0*R_154; R_119 = R_119*R_43;
    R_111 = R_30*R_119; R_111 = (-1.0)*R_111; R_119 = R_119*R_35; R_119 = (-1.0)*R_119;
    R_14 = R_48*R_14; R_14 = (-1.0)*R_14; R_14 = R_156+R_14; R_249 = R_249*R_48;
    R_249 = (-1.0)*R_249; R_249 = R_75+R_249; R_146 = R_249+R_146; R_146 = R_246+R_146;
    R_146 = R_193+R_146; R_146 = R_243+R_146; R_95 = R_48*R_95; R_95 = 2.0*R_95;
    R_243 = R_30*R_48; R_193 = R_243*R_26; R_246 = R_8*R_193; R_246 = (-2.0)*R_246;
    R_2 = R_246+R_2; R_2 = R_101+R_2; R_105 = R_2+R_105; R_105 = R_112+R_105;
    R_147 = R_105+R_147; R_147 = R_108+R_147; R_219 = R_147+R_219; R_70 = R_219+R_70;
    R_70 = R_204+R_70; R_179 = R_70+R_179; R_179 = R_181+R_179; R_179 = R_103+R_179;
    R_76 = R_179+R_76; R_55 = R_76+R_55; R_1 = R_55+R_1; R_1 = R_84+R_1;
    R_96 = R_1+R_96; R_131 = R_96+R_131; R_131 = R_82+R_131; R_195 = R_131+R_195;
    R_195 = R_51+R_195; R_193 = R_9*R_193; R_193 = (-2.0)*R_193; R_51 = R_21*R_243;
    R_131 = R_8*R_51; R_131 = (-2.0)*R_131; R_198 = R_131+R_198; R_193 = R_198+R_193;
    R_193 = R_169+R_193; R_190 = R_193+R_190; R_190 = R_65+R_190; R_137 = R_190+R_137;
    R_137 = R_113+R_137; R_149 = R_137+R_149; R_115 = R_149+R_115; R_115 = R_213+R_115;
    R_69 = R_115+R_69; R_60 = R_69+R_60; R_88 = R_60+R_88; R_88 = R_214+R_88;
    R_138 = R_88+R_138; R_167 = R_138+R_167; R_49 = R_167+R_49; R_49 = R_168+R_49;
    R_183 = R_49+R_183; R_183 = R_97+R_183; R_130 = R_183+R_130; R_130 = R_184+R_130;
    R_129 = R_130+R_129; R_129 = R_68+R_129; R_47 = R_129+R_47; R_51 = R_9*R_51;
    R_51 = (-2.0)*R_51; R_129 = R_243*R_32; R_68 = R_8*R_129; R_68 = (-2.0)*R_68;
    R_182 = R_68+R_182; R_51 = R_182+R_51; R_129 = R_9*R_129; R_129 = (-2.0)*R_129;
    R_243 = R_243*R_37; R_182 = R_243*R_26; R_182 = (-2.0)*R_182; R_51 = R_182+R_51;
    R_51 = R_191+R_51; R_191 = R_21*R_243; R_191 = (-2.0)*R_191; R_243 = R_243*R_32;
    R_243 = (-2.0)*R_243; R_182 = R_48*R_22; R_68 = R_12*R_182; R_130 = R_30*R_68;
    R_130 = (-1.0)*R_130; R_130 = R_175+R_130; R_172 = R_130+R_172; R_123 = R_172+R_123;
    R_123 = R_195+R_123; coeff_resultant_U[6] = R_123; R_123 = R_35*R_68; R_123 = (-1.0)*R_123;
    R_68 = R_33*R_68; R_68 = (-1.0)*R_68; R_195 = R_182*R_15; R_172 = R_30*R_195;
    R_172 = (-1.0)*R_172; R_172 = R_218+R_172; R_123 = R_172+R_123; R_202 = R_123+R_202;
    R_202 = R_47+R_202; R_118 = R_202+R_118; R_118 = R_227+R_118; R_118 = R_196+R_118;
    coeff_resultant_U[5] = R_118; R_195 = R_35*R_195; R_195 = (-1.0)*R_195; R_118 = R_43*R_182;
    R_196 = R_30*R_118; R_196 = (-1.0)*R_196; R_196 = R_170+R_196; R_195 = R_196+R_195;
    R_68 = R_195+R_68; R_68 = R_207+R_68; R_68 = R_203+R_68; R_118 = R_35*R_118;
    R_118 = (-1.0)*R_118; R_118 = R_133+R_118; R_182 = R_33*R_182; R_133 = R_182*R_15;
    R_133 = (-1.0)*R_133; R_118 = R_133+R_118; R_118 = R_231+R_118; R_201 = R_118+R_201;
    R_182 = R_43*R_182; R_182 = (-1.0)*R_182; R_182 = R_173+R_182; R_182 = R_121+R_182;
    R_121 = R_48*R_41; R_26 = R_121*R_26; R_173 = R_8*R_26; R_173 = (-1.0)*R_173;
    R_173 = R_145+R_173; R_173 = R_63+R_173; R_51 = R_173+R_51; R_197 = R_51+R_197;
    R_197 = R_228+R_197; R_104 = R_197+R_104; R_104 = R_185+R_104; R_143 = R_104+R_143;
    R_134 = R_143+R_134; R_134 = R_107+R_134; R_86 = R_134+R_86; R_56 = R_86+R_56;
    R_56 = R_0+R_56; R_56 = R_224+R_56; R_208 = R_56+R_208; R_71 = R_208+R_71;
    R_71 = R_45+R_71; R_236 = R_71+R_236; R_236 = R_256+R_236; R_236 = R_215+R_236;
    R_199 = R_236+R_199; R_199 = R_139+R_199; R_31 = R_199+R_31; R_100 = R_31+R_100;
    R_26 = R_9*R_26; R_26 = (-1.0)*R_26; R_26 = R_4+R_26; R_222 = R_26+R_222;
    R_222 = R_93+R_222; R_166 = R_222+R_166; R_166 = R_187+R_166; R_166 = R_178+R_166;
    R_166 = R_87+R_166; R_66 = R_166+R_66; R_21 = R_21*R_121; R_166 = R_8*R_21;
    R_166 = (-1.0)*R_166; R_166 = R_13+R_166; R_251 = R_166+R_251; R_129 = R_251+R_129;
    R_129 = R_191+R_129; R_129 = R_192+R_129; R_129 = R_150+R_129; R_242 = R_129+R_242;
    R_142 = R_242+R_142; R_142 = R_54+R_142; R_142 = R_79+R_142; R_157 = R_142+R_157;
    R_217 = R_157+R_217; R_141 = R_217+R_141; R_66 = R_141+R_66; R_66 = R_255+R_66;
    R_21 = R_9*R_21; R_21 = (-1.0)*R_21; R_21 = R_20+R_21; R_24 = R_21+R_24;
    R_189 = R_24+R_189; R_152 = R_189+R_152; R_52 = R_152+R_52; R_121 = R_121*R_32;
    R_152 = R_121*R_8; R_152 = (-1.0)*R_152; R_95 = R_152+R_95; R_95 = R_243+R_95;
    R_254 = R_95+R_254; R_121 = R_121*R_9; R_121 = (-1.0)*R_121; R_95 = R_39*R_48;
    R_15 = R_95*R_15; R_15 = R_30*R_15; R_15 = (-1.0)*R_15; R_15 = R_177+R_15;
    R_177 = R_28*R_95; R_243 = R_8*R_177; R_243 = 2.0*R_243; R_6 = R_177*R_6;
    R_6 = 2.0*R_6; R_119 = R_6+R_119; R_42 = R_42*R_95; R_42 = R_23*R_42;
    R_42 = (-1.0)*R_42; R_42 = R_210+R_42; R_12 = R_95*R_12; R_210 = R_30*R_12;
    R_210 = (-1.0)*R_210; R_210 = R_188+R_210; R_100 = R_210+R_100; R_210 = R_35*R_12;
    R_210 = (-1.0)*R_210; R_210 = R_15+R_210; R_12 = R_33*R_12; R_12 = (-1.0)*R_12;
    R_22 = R_95*R_22; R_33 = R_8*R_22; R_33 = 2.0*R_33; R_92 = R_33+R_92;
    R_186 = R_92+R_186; R_100 = R_186+R_100; R_78 = R_100+R_78; R_132 = R_78+R_132;
    R_132 = R_85+R_132; R_85 = R_9*R_22; R_85 = 2.0*R_85; R_111 = R_85+R_111;
    R_176 = R_111+R_176; R_22 = R_37*R_22; R_22 = 2.0*R_22; R_95 = R_43*R_95;
    R_43 = R_30*R_95; R_43 = (-1.0)*R_43; R_43 = R_253+R_43; R_43 = R_12+R_43;
    R_95 = R_95*R_35; R_95 = (-1.0)*R_95; R_23 = R_48*R_23; R_23 = R_37*R_23;
    R_23 = R_32*R_23; R_23 = (-2.0)*R_23; R_241 = R_241*R_48; R_241 = (-1.0)*R_241;
    R_209 = R_209*R_48; R_209 = 2.0*R_209; R_209 = R_230+R_209; R_209 = R_27+R_209;
    R_241 = R_209+R_241; R_200 = R_48*R_200; R_200 = (-1.0)*R_200; R_126 = R_200+R_126;
    R_194 = R_126+R_194; R_241 = R_194+R_241; R_250 = R_241+R_250; R_160 = R_160*R_48;
    R_160 = (-1.0)*R_160; R_160 = R_144+R_160; R_250 = R_160+R_250; R_160 = R_40*R_48;
    R_8 = R_8*R_160; R_160 = R_9*R_160; R_245 = R_48*R_245; R_245 = (-1.0)*R_245;
    R_245 = R_248+R_245; R_240 = R_48*R_240; R_240 = (-1.0)*R_240; R_38 = R_240+R_38;
    R_38 = R_244+R_38; R_244 = pow(R_48,2); R_34 = R_244*R_34; R_132 = R_34+R_132;
    R_68 = R_132+R_68; R_68 = R_205+R_68; R_122 = R_68+R_122; R_122 = R_225+R_122;
    R_106 = R_122+R_106; R_106 = R_109+R_106; coeff_resultant_U[4] = R_106; R_106 = R_244*R_35;
    R_106 = R_30*R_106; R_106 = 2.0*R_106; R_106 = R_66+R_106; R_171 = R_106+R_171;
    R_171 = R_257+R_171; R_171 = R_153+R_171; R_210 = R_171+R_210; R_210 = R_243+R_210;
    R_176 = R_210+R_176; R_176 = R_154+R_176; R_234 = R_176+R_234; R_206 = R_234+R_206;
    R_201 = R_206+R_201; R_201 = R_229+R_201; R_201 = R_226+R_201; coeff_resultant_U[3] = R_201;
    R_18 = R_18*R_244; R_18 = R_239+R_18; R_18 = R_254+R_18; R_18 = R_29+R_18;
    R_146 = R_18+R_146; R_14 = R_146+R_14; R_14 = R_114+R_14; R_14 = R_148+R_14;
    R_14 = R_90+R_14; R_41 = R_244*R_41; R_30 = R_30*R_41; R_237 = R_30+R_237;
    R_238 = R_237+R_238; R_35 = R_41*R_35; R_95 = R_35+R_95; R_95 = R_232+R_95;
    R_121 = R_95+R_121; R_121 = R_23+R_121; R_244 = R_19*R_244; R_37 = R_48*R_37;
    R_25 = R_37*R_25; R_128 = R_25+R_128; R_211 = R_128+R_211; R_211 = R_14+R_211;
    R_42 = R_211+R_42; R_119 = R_42+R_119; R_52 = R_119+R_52; R_159 = R_52+R_159;
    R_238 = R_159+R_238; R_8 = R_238+R_8; R_8 = R_43+R_8; R_8 = R_22+R_8;
    R_235 = R_8+R_235; R_235 = R_46+R_235; R_233 = R_235+R_233; R_233 = R_182+R_233;
    coeff_resultant_U[2] = R_233; R_39 = R_39*R_37; R_39 = R_28*R_39; R_39 = 2.0*R_39;
    R_39 = R_250+R_39; R_121 = R_39+R_121; R_121 = R_160+R_121; R_121 = R_252+R_121;
    R_151 = R_121+R_151; coeff_resultant_U[1] = R_151; R_40 = R_37*R_40; R_244 = R_40+R_244;
    R_38 = R_244+R_38; R_245 = R_38+R_245; coeff_resultant_U[0] = R_245; 

    //PRINT( coeff_resultant_U );
    //std::cout << setprecision(16) << " coeff_resultant_U  " << std::endl;
    //for( unsigned i=0; i < coeff_resultant_U.size(); ++i ) std::cout << "(" << coeff_resultant_U[i] << ") * U**" << i << " + " ;
    //std::cout << std::endl;
    sol_U = Pol<8,1,T>(coeff_resultant_U).real_roots();
    //PRINT( sol_U );
    for( unsigned i=0; i < sol_U.size(); ++i ) {
        U = sol_U[i];
        //PRINT(U);
        if ((U >= -0.01) and (U <= 1.01)) {
            /// calcul des coefficients du polynôme en V
            T R_0 = pos_nodes[2][0]; T R_1 = pos_nodes[8][0]; T R_2 = pos_nodes[6][0]; T R_3 = pos_nodes[3][0];
            T R_4 = pos_nodes[5][0]; T R_5 = pos_nodes[7][0]; T R_6 = pos_nodes[4][0]; T R_7 = pos_nodes[0][0];
            T R_8 = U; T R_9 = (-8.0)*R_8; R_9 = 12.0+R_9; R_9 = R_8*R_9;
            R_9 = (-4.0)+R_9; R_9 = R_5*R_9; T R_10 = 4.0*R_8; T R_11 = (-6.0)+R_10;
            R_11 = R_8*R_11; R_11 = 2.0+R_11; T R_12 = R_3*R_11; R_11 = R_7*R_11;
            R_10 = (-2.0)+R_10; R_0 = R_0*R_8; T R_13 = R_0*R_10; T R_14 = (-1.0)+R_8;
            R_1 = R_1*R_8; R_14 = R_1*R_14; R_14 = (-16.0)*R_14; R_2 = R_2*R_8;
            T R_15 = (-2.0)*R_8; T R_16 = 1.0+R_15; R_16 = R_0*R_16; R_16 = R_14+R_16;
            R_15 = 3.0+R_15; R_15 = R_8*R_15; R_15 = (-1.0)+R_15; R_15 = R_3*R_15;
            R_4 = R_8*R_4; R_3 = 8.0*R_8; R_14 = (-4.0)+R_3; R_14 = R_4*R_14;
            R_4 = (-1.0)*R_14; R_3 = (-12.0)+R_3; R_3 = R_8*R_3; R_3 = 4.0+R_3;
            R_3 = R_5*R_3; R_5 = (-6.0)*R_8; R_0 = 9.0+R_5; R_0 = R_8*R_0;
            R_0 = (-3.0)+R_0; R_0 = R_7*R_0; R_5 = 3.0+R_5; R_6 = R_6*R_8;
            T R_17 = (-1.0)*R_8; R_17 = 1.0+R_17; R_1 = R_17*R_1; R_1 = (-16.0)*R_1;
            R_13 = R_1+R_13; R_2 = R_17*R_2; R_1 = 8.0*R_2; R_2 = (-4.0)*R_2;
            R_6 = R_17*R_6; R_17 = 8.0*R_6; R_17 = R_11+R_17; R_11 = (-12.0)*R_6;
            R_11 = R_0+R_11; R_6 = 4.0*R_6; R_0 = 2.0*R_8; T R_18 = (-3.0)+R_0;
            R_18 = R_8*R_18; R_18 = 1.0+R_18; R_18 = R_7*R_18; R_6 = R_18+R_6;
            R_0 = (-1.0)+R_0; R_18 = pos_nodes[1][0]; R_8 = R_18*R_8; R_10 = R_10*R_8;
            R_17 = R_10+R_17; R_9 = R_17+R_9; R_4 = R_9+R_4; R_12 = R_4+R_12;
            R_1 = R_12+R_1; R_13 = R_1+R_13; coeff_V[2] = R_13; R_5 = R_8*R_5;
            R_11 = R_5+R_11; R_3 = R_11+R_3; R_14 = R_3+R_14; R_15 = R_14+R_15;
            R_2 = R_15+R_2; R_16 = R_2+R_16; coeff_V[1] = R_16; R_0 = R_8*R_0;
            R_6 = R_0+R_6; R_0 = pos[0]; R_0 = (-1.0)*R_0; R_6 = R_0+R_6;
            coeff_V[0] = R_6; 
            coeff_V[3] = 0.0; coeff_V[4] = 0.0; 

            if ( max( abs( coeff_V ) ) < tolerance ) {
                T R_0 = pos_nodes[2][1]; T R_1 = pos_nodes[8][1]; T R_2 = pos_nodes[6][1]; T R_3 = pos_nodes[3][1];
                T R_4 = pos_nodes[7][1]; T R_5 = pos_nodes[5][1]; T R_6 = pos_nodes[0][1]; T R_7 = pos_nodes[4][1];
                T R_8 = U; T R_9 = 4.0*R_8; T R_10 = (-2.0)+R_9; R_9 = (-6.0)+R_9;
                R_9 = R_8*R_9; R_9 = 2.0+R_9; T R_11 = R_3*R_9; R_9 = R_6*R_9;
                T R_12 = (-8.0)*R_8; R_12 = 12.0+R_12; R_12 = R_8*R_12; R_12 = (-4.0)+R_12;
                R_12 = R_4*R_12; R_0 = R_0*R_8; T R_13 = R_10*R_0; T R_14 = (-1.0)+R_8;
                R_1 = R_1*R_8; R_14 = R_1*R_14; R_14 = (-16.0)*R_14; R_2 = R_8*R_2;
                T R_15 = (-2.0)*R_8; T R_16 = 1.0+R_15; R_16 = R_0*R_16; R_16 = R_14+R_16;
                R_15 = 3.0+R_15; R_15 = R_8*R_15; R_15 = (-1.0)+R_15; R_15 = R_3*R_15;
                R_3 = (-6.0)*R_8; R_14 = 9.0+R_3; R_14 = R_8*R_14; R_14 = (-3.0)+R_14;
                R_14 = R_6*R_14; R_3 = 3.0+R_3; R_0 = 8.0*R_8; T R_17 = (-12.0)+R_0;
                R_17 = R_8*R_17; R_17 = 4.0+R_17; R_17 = R_4*R_17; R_0 = (-4.0)+R_0;
                R_5 = R_5*R_8; R_0 = R_5*R_0; R_5 = (-1.0)*R_0; R_4 = (-1.0)*R_8;
                R_4 = 1.0+R_4; R_1 = R_4*R_1; R_1 = (-16.0)*R_1; R_13 = R_1+R_13;
                R_2 = R_2*R_4; R_1 = 8.0*R_2; R_2 = (-4.0)*R_2; R_7 = R_7*R_8;
                R_4 = R_7*R_4; R_7 = 8.0*R_4; R_9 = R_7+R_9; R_7 = (-12.0)*R_4;
                R_14 = R_7+R_14; R_4 = 4.0*R_4; R_7 = 2.0*R_8; T R_18 = (-3.0)+R_7;
                R_18 = R_8*R_18; R_18 = 1.0+R_18; R_18 = R_6*R_18; R_18 = R_4+R_18;
                R_7 = (-1.0)+R_7; R_4 = pos_nodes[1][1]; R_8 = R_4*R_8; R_10 = R_8*R_10;
                R_10 = R_9+R_10; R_10 = R_12+R_10; R_10 = R_5+R_10; R_11 = R_10+R_11;
                R_1 = R_11+R_1; R_13 = R_1+R_13; coeff_V[2] = R_13; R_3 = R_8*R_3;
                R_14 = R_3+R_14; R_14 = R_17+R_14; R_14 = R_0+R_14; R_15 = R_14+R_15;
                R_2 = R_15+R_2; R_16 = R_2+R_16; coeff_V[1] = R_16; R_7 = R_8*R_7;
                R_18 = R_7+R_18; R_7 = pos[1]; R_7 = (-1.0)*R_7; R_18 = R_7+R_18;
                coeff_V[0] = R_18; 
                coeff_V[3] = 0.0; coeff_V[4] = 0.0; 

            }
            sol_V = Pol<4,1,T>( coeff_V ).real_roots();
            //PRINT( sol_V);
            for( unsigned j=0; j < sol_V.size(); ++j ) {
                U = sol_U[i];
                V = sol_V[j];
                TVI vi( U, V );
                //PRINT( vi );
                if ( var_inter_is_inside( Quad_9(), vi, 0.01 ) ) {
                    //std::cout << "- 0" << std::endl; PRINT( U ); PRINT( V );
                    isSolution = true;
                    for( unsigned t=0; t<6; ++t ) { /// méthode de Newton-Raphson
                        T R_0 = pos[1]; R_0 = (-1.0)*R_0; T R_1 = pos_nodes[5][1]; T R_2 = pos_nodes[7][1];
                        T R_3 = pos_nodes[8][1]; T R_4 = pos_nodes[3][1]; T R_5 = pos_nodes[6][1]; T R_6 = pos_nodes[2][1];
                        T R_7 = pos_nodes[4][1]; T R_8 = pos_nodes[0][1]; T R_9 = pos_nodes[1][1]; T R_10 = pos[0];
                        R_10 = (-1.0)*R_10; T R_11 = pos_nodes[0][0]; T R_12 = pos_nodes[8][0]; T R_13 = pos_nodes[5][0];
                        T R_14 = pos_nodes[2][0]; T R_15 = pos_nodes[6][0]; T R_16 = pos_nodes[4][0]; T R_17 = pos_nodes[1][0];
                        T R_18 = pos_nodes[3][0]; T R_19 = pos_nodes[7][0]; T R_20 = U; T R_21 = 16.0*R_20;
                        R_21 = (-4.0)+R_21; T R_22 = (-8.0)*R_20; R_22 = 12.0+R_22; R_22 = R_20*R_22;
                        R_22 = (-4.0)+R_22; T R_23 = (-2.0)*R_20; R_23 = 1.0+R_23; T R_24 = R_7*R_23;
                        T R_25 = R_16*R_23; T R_26 = 8.0*R_20; T R_27 = (-6.0)+R_26; R_26 = (-4.0)+R_26;
                        T R_28 = R_1*R_26; T R_29 = R_13*R_26; T R_30 = (-1.0)*R_20; T R_31 = 2.0+R_30;
                        R_30 = 1.0+R_30; T R_32 = R_30*R_7; T R_33 = R_30*R_16; T R_34 = 2.0*R_20;
                        T R_35 = (-6.0)*R_20; T R_36 = 4.0*R_20; T R_37 = (-6.0)+R_36; R_37 = R_20*R_37;
                        R_37 = 4.0+R_37; R_36 = (-2.0)+R_36; T R_38 = V; T R_39 = R_30*R_38;
                        R_39 = (-4.0)*R_39; R_31 = R_38*R_31; T R_40 = 16.0*R_38; T R_41 = (-4.0)+R_40;
                        T R_42 = R_5*R_41; R_41 = R_15*R_41; R_40 = (-12.0)+R_40; R_7 = R_7*R_40;
                        R_42 = R_7+R_42; R_42 = R_30*R_42; R_40 = R_16*R_40; R_41 = R_40+R_41;
                        R_41 = R_30*R_41; R_22 = R_38*R_22; R_27 = R_38*R_27; R_37 = R_38*R_37;
                        R_40 = R_38+R_20; R_40 = (-6.0)*R_40; R_27 = R_40+R_27; R_27 = 9.0+R_27;
                        R_27 = R_20*R_27; R_16 = R_38*R_20; R_16 = 4.0*R_16; R_40 = R_16+R_40;
                        R_40 = 9.0+R_40; R_40 = R_38*R_40; R_16 = R_34+R_40; R_16 = (-3.0)+R_16;
                        R_16 = R_20*R_16; R_7 = (-2.0)*R_38; T R_43 = 1.0+R_7; T R_44 = R_28*R_43;
                        R_43 = R_29*R_43; T R_45 = 8.0*R_38; T R_46 = (-4.0)+R_45; R_5 = R_46*R_5;
                        T R_47 = R_30*R_5; R_5 = R_5*R_23; T R_48 = R_46*R_15; R_48 = R_23*R_48;
                        R_46 = R_30*R_46; R_46 = R_15*R_46; R_45 = (-12.0)+R_45; R_45 = R_45*R_38;
                        R_45 = 4.0+R_45; R_32 = R_45*R_32; R_24 = R_45*R_24; R_25 = R_45*R_25;
                        R_33 = R_45*R_33; R_36 = R_36*R_38; R_45 = 2.0*R_36; R_45 = R_35+R_45;
                        R_45 = 3.0+R_45; R_15 = R_9*R_45; R_45 = R_17*R_45; R_43 = R_45+R_43;
                        R_35 = R_36+R_35; R_35 = 3.0+R_35; R_35 = R_35*R_38; R_34 = R_35+R_34;
                        R_34 = (-1.0)+R_34; R_36 = R_34*R_9; R_36 = R_32+R_36; R_36 = R_20*R_36;
                        R_34 = R_34*R_17; R_33 = R_34+R_33; R_34 = (-6.0)*R_38; R_32 = 4.0*R_38;
                        R_27 = R_32+R_27; R_27 = (-3.0)+R_27; R_45 = R_8*R_27; R_27 = R_11*R_27;
                        R_30 = (-6.0)+R_32; R_30 = R_30*R_38; R_30 = 4.0+R_30; R_30 = R_20*R_30;
                        R_40 = R_40+R_30; R_40 = (-3.0)+R_40; R_23 = R_8*R_40; R_24 = R_23+R_24;
                        R_40 = R_11*R_40; R_25 = R_40+R_25; R_30 = R_35+R_30; R_30 = (-1.0)+R_30;
                        R_9 = R_9*R_30; R_30 = R_17*R_30; R_32 = (-2.0)+R_32; R_17 = R_32*R_6;
                        R_35 = R_32*R_14; R_32 = R_32*R_20; R_40 = (-1.0)*R_32; R_40 = R_38+R_40;
                        R_40 = (-2.0)*R_40; R_40 = 1.0+R_40; R_40 = R_6*R_40; R_39 = R_32+R_39;
                        R_39 = 1.0+R_39; R_23 = R_6*R_39; R_39 = R_14*R_39; T R_49 = 2.0*R_32;
                        R_49 = R_34+R_49; R_49 = 3.0+R_49; T R_50 = R_4*R_49; R_49 = R_18*R_49;
                        R_7 = R_32+R_7; R_7 = 1.0+R_7; R_6 = R_7*R_6; R_14 = R_7*R_14;
                        R_48 = R_14+R_48; R_34 = R_32+R_34; R_34 = 3.0+R_34; R_34 = R_34*R_20;
                        R_37 = R_34+R_37; R_37 = (-1.0)+R_37; R_32 = R_4*R_37; R_37 = R_18*R_37;
                        R_7 = 2.0*R_38; T R_51 = (-3.0)+R_7; R_51 = R_51*R_38; R_51 = R_16+R_51;
                        R_51 = 1.0+R_51; R_8 = R_51*R_8; R_0 = R_8+R_0; R_11 = R_51*R_11;
                        R_10 = R_11+R_10; R_34 = R_7+R_34; R_34 = (-1.0)+R_34; R_4 = R_34*R_4;
                        R_18 = R_34*R_18; R_34 = (-1.0)+R_38; R_34 = R_34*R_20; R_7 = (-16.0)*R_34;
                        R_34 = (-8.0)*R_34; R_11 = (-1.0)*R_38; R_11 = 1.0+R_11; R_51 = R_1*R_11;
                        R_51 = 8.0*R_51; R_17 = R_51+R_17; R_17 = R_20*R_17; R_28 = R_11*R_28;
                        R_28 = R_28+R_6; R_21 = R_11*R_21; R_21 = R_1*R_21; R_51 = R_11*R_13;
                        R_51 = 8.0*R_51; R_51 = R_35+R_51; R_51 = R_20*R_51; R_26 = R_11*R_26;
                        R_1 = R_1*R_26; R_26 = R_13*R_26; R_48 = R_26+R_48; R_26 = R_11*R_20;
                        R_31 = R_26+R_31; R_31 = (-1.0)+R_31; R_13 = R_3*R_31; R_13 = (-16.0)*R_13;
                        R_13 = R_44+R_13; R_13 = R_15+R_13; R_13 = R_42+R_13; R_23 = R_13+R_23;
                        R_23 = R_20*R_23; R_31 = R_12*R_31; R_31 = (-16.0)*R_31; R_43 = R_31+R_43;
                        R_43 = R_41+R_43; R_39 = R_43+R_39; R_39 = R_20*R_39; R_43 = 2.0*R_26;
                        R_43 = R_38+R_43; R_43 = (-1.0)+R_43; R_41 = R_3*R_43; R_41 = (-16.0)*R_41;
                        R_6 = R_6+R_41; R_43 = R_12*R_43; R_43 = (-16.0)*R_43; R_26 = R_26+R_38;
                        R_26 = (-1.0)+R_26; R_3 = R_26*R_3; R_3 = (-16.0)*R_3; R_28 = R_3+R_28;
                        R_28 = R_47+R_28; R_28 = R_20*R_28; R_26 = R_12*R_26; R_26 = (-16.0)*R_26;
                        R_29 = R_11*R_29; R_26 = R_29+R_26; R_26 = R_14+R_26; R_26 = R_46+R_26;
                        R_26 = R_38*R_26; R_26 = R_33+R_26; R_26 = R_20*R_26; R_10 = R_26+R_10;
                        R_26 = 4.0*R_11; R_11 = (-12.0)*R_11; R_7 = R_11+R_7; R_33 = R_2*R_7;
                        R_6 = R_6+R_33; R_6 = R_6+R_50; R_1 = R_6+R_1; R_1 = R_1+R_5;
                        R_1 = R_17+R_1; R_1 = R_38*R_1; R_1 = R_24+R_1; R_1 = R_9+R_1;
                        R_1 = R_20*R_1; R_33 = R_41+R_33; R_33 = R_50+R_33; R_33 = R_5+R_33;
                        R_33 = R_40+R_33; R_21 = R_33+R_21; R_21 = R_38*R_21; R_21 = R_24+R_21;
                        R_21 = R_9+R_21; R_7 = R_19*R_7; R_48 = R_7+R_48; R_48 = R_49+R_48;
                        R_48 = R_43+R_48; R_51 = R_48+R_51; R_51 = R_38*R_51; R_51 = R_25+R_51;
                        R_51 = R_30+R_51; R_30 = 1/R_51; R_21 = R_30*R_21; R_51 = R_20*R_51;
                        R_34 = R_11+R_34; R_20 = R_34*R_20; R_26 = R_20+R_26; R_20 = R_26*R_2;
                        R_4 = R_20+R_4; R_28 = R_4+R_28; R_28 = R_38*R_28; R_28 = R_0+R_28;
                        R_36 = R_28+R_36; R_36 = (-1.0)*R_36; R_1 = R_36+R_1; R_22 = R_26+R_22;
                        R_2 = R_2*R_22; R_36 = R_45+R_2; R_36 = R_36+R_23; R_36 = R_36+R_32;
                        R_36 = R_38*R_36; R_36 = R_1+R_36; R_22 = R_19*R_22; R_22 = R_27+R_22;
                        R_39 = R_22+R_39; R_39 = R_37+R_39; R_37 = R_39*R_21; R_37 = (-1.0)*R_37;
                        R_37 = R_45+R_37; R_2 = R_37+R_2; R_23 = R_2+R_23; R_32 = R_23+R_32;
                        R_32 = 1/R_32; R_23 = R_38*R_39; R_19 = R_26*R_19; R_18 = R_19+R_18;
                        R_18 = R_38*R_18; R_10 = R_18+R_10; R_10 = (-1.0)*R_10; R_51 = R_10+R_51;
                        R_23 = R_51+R_23; R_21 = R_23*R_21; R_21 = (-1.0)*R_21; R_36 = R_21+R_36;
                        R_32 = R_36*R_32; V2 = R_32; R_32 = (-1.0)*R_32; R_32 = R_38+R_32;
                        R_39 = R_32*R_39; R_39 = R_51+R_39; R_30 = R_39*R_30; U2 = R_30;

                        T err = 1 + abs(U) + abs(V); err = (abs(U-U2) + abs(V-V2)) / err;
                        U = U2; V = V2;
                        if (err < tolerance ) break;
                        vi = TVI( U, V );
                        if (not( var_inter_is_inside( Quad_9(), vi, tolerance ) ) ) {
                            isSolution = false;
                            break;
                        }
                        //std::cout << "- " << t+1 << std::endl; PRINT( U ); PRINT( V  );
                    }
                    /// on teste notre solution (U, V) en évaluant la position en ce point (U, V).
                    if (isSolution) {
                        T R_0 = pos[1]; R_0 = (-1.0)*R_0; T R_1 = pos_nodes[2][1]; T R_2 = pos_nodes[8][1];
                        T R_3 = pos_nodes[6][1]; T R_4 = pos_nodes[7][1]; T R_5 = pos_nodes[1][1]; T R_6 = pos_nodes[4][1];
                        T R_7 = pos_nodes[0][1]; T R_8 = pos_nodes[5][1]; T R_9 = pos_nodes[3][1]; T R_10 = pos_nodes[2][0];
                        T R_11 = pos_nodes[8][0]; T R_12 = pos_nodes[6][0]; T R_13 = pos_nodes[3][0]; T R_14 = pos_nodes[5][0];
                        T R_15 = pos_nodes[7][0]; T R_16 = pos_nodes[4][0]; T R_17 = pos_nodes[0][0]; T R_18 = pos_nodes[1][0];
                        T R_19 = V; R_4 = R_4*R_19; R_9 = R_19*R_9; T R_20 = (-2.0)*R_19;
                        R_13 = R_19*R_13; T R_21 = (-6.0)*R_19; T R_22 = 4.0*R_19; R_22 = (-2.0)+R_22;
                        T R_23 = (-1.0)+R_19; T R_24 = (-1.0)*R_19; R_24 = 1.0+R_24; T R_25 = 4.0*R_24;
                        T R_26 = (-12.0)*R_24; R_15 = R_15*R_19; T R_27 = 8.0*R_19; T R_28 = (-4.0)+R_27;
                        R_27 = (-12.0)+R_27; R_27 = R_27*R_19; R_27 = 4.0+R_27; T R_29 = 2.0*R_19;
                        T R_30 = (-3.0)+R_29; R_30 = R_30*R_19; T R_31 = U; R_1 = R_1*R_31;
                        R_1 = R_19*R_1; R_2 = R_2*R_31; R_2 = R_2*R_19; R_3 = R_31*R_3;
                        R_3 = R_3*R_19; R_5 = R_5*R_31; R_6 = R_6*R_31; R_8 = R_8*R_31;
                        R_8 = R_8*R_19; R_8 = R_8*R_24; R_10 = R_10*R_31; R_10 = R_10*R_19;
                        R_11 = R_11*R_31; R_11 = R_11*R_19; T R_32 = R_24*R_31; R_32 = R_32+R_19;
                        R_32 = (-1.0)+R_32; R_2 = R_32*R_2; R_2 = (-16.0)*R_2; R_11 = R_32*R_11;
                        R_11 = (-16.0)*R_11; R_12 = R_12*R_31; R_12 = R_12*R_19; R_22 = R_22*R_31;
                        R_20 = R_22+R_20; R_20 = 1.0+R_20; R_1 = R_20*R_1; R_1 = R_2+R_1;
                        R_10 = R_20*R_10; R_10 = R_11+R_10; R_21 = R_22+R_21; R_21 = 3.0+R_21;
                        R_21 = R_21*R_31; R_21 = R_29+R_21; R_21 = (-1.0)+R_21; R_9 = R_9*R_21;
                        R_13 = R_21*R_13; R_21 = 8.0*R_31; R_21 = (-4.0)+R_21; R_8 = R_8*R_21;
                        R_14 = R_31*R_14; R_14 = R_19*R_14; R_14 = R_24*R_14; R_21 = R_14*R_21;
                        R_23 = R_23*R_31; R_23 = (-8.0)*R_23; R_23 = R_26+R_23; R_23 = R_23*R_31;
                        R_25 = R_23+R_25; R_4 = R_25*R_4; R_25 = R_15*R_25; R_16 = R_16*R_31;
                        R_15 = (-1.0)*R_31; R_15 = 1.0+R_15; R_3 = R_3*R_15; R_3 = R_3*R_28;
                        R_6 = R_6*R_15; R_6 = R_6*R_27; R_12 = R_15*R_12; R_28 = R_12*R_28;
                        R_16 = R_15*R_16; R_27 = R_16*R_27; R_16 = R_19+R_31; R_16 = (-6.0)*R_16;
                        R_15 = R_19*R_31; R_15 = 4.0*R_15; R_16 = R_15+R_16; R_16 = 9.0+R_16;
                        R_16 = R_19*R_16; R_18 = R_18*R_31; R_15 = 2.0*R_31; R_16 = R_15+R_16;
                        R_16 = (-3.0)+R_16; R_16 = R_31*R_16; R_30 = R_16+R_30; R_30 = 1.0+R_30;
                        R_7 = R_30*R_7; R_6 = R_7+R_6; R_17 = R_30*R_17; R_27 = R_17+R_27;
                        R_17 = (-6.0)*R_31; R_31 = 4.0*R_31; R_31 = (-2.0)+R_31; R_31 = R_31*R_19;
                        R_17 = R_31+R_17; R_17 = 3.0+R_17; R_19 = R_17*R_19; R_15 = R_19+R_15;
                        R_15 = (-1.0)+R_15; R_5 = R_5*R_15; R_5 = R_6+R_5; R_4 = R_5+R_4;
                        R_4 = R_8+R_4; R_4 = R_9+R_4; R_3 = R_4+R_3; R_1 = R_3+R_1;
                        R_0 = R_1+R_0; eval2 = R_0; R_18 = R_15*R_18; R_27 = R_18+R_27;
                        R_25 = R_27+R_25; R_21 = R_25+R_21; R_13 = R_21+R_13; R_28 = R_13+R_28;
                        R_10 = R_28+R_10; R_28 = pos[0]; R_28 = (-1.0)*R_28; R_10 = R_28+R_10;
                        eval = R_10; 

                        //PRINT( eval ); PRINT( eval2 );
                        if ( (abs(eval) < tolerance) and (abs(eval2) < tolerance) ) {
                           var_inter += TVI( U, V );
                           return true;
                        }
                    } /// if la méthode Newton à converger vers une solution dans l'espace de référence
                } /// if var_inter_is_inside 
            }  /// for sur sol_V
        } /// endif U in [0;1]
    } /// for sur sol_U
    
    //var_inter += std::numeric_limits<T>::max();
    return false;
}
}
#endif  /// GET_VAR_INTER__Quad_9
 
