#ifndef GET_VAR_INTER__Quad_9_H
#define GET_VAR_INTER__Quad_9_H
 
#include <containers/polynomials.h>
 
 
namespace LMT {
 
template<class PosNodes,class Pvec,class TVI>
bool get_var_inter_experimental(const Quad_9 &elem,const PosNodes &pos_nodes,const Pvec &pos,TVI &var_inter, typename Pvec::template SubType<0>::T tolerance = 1e-4 ) {
    typedef typename Pvec::template SubType<0>::T T;
    T U, V, eval, eval2, U2, V2;
    Vec< T, 9 > coeff_resultant_U;
    Vec< T, 5 > coeff_V;
    Vec< T > sol_U, sol_V;
    Vec< Vec< T >, 2 > coeff_poly;
    Vec< Vec< T, 2 > > sol_poly;
    bool isSolution;

    /// on résout le problème s'il est "quasi-linéaire"
    coeff_poly[0].resize(15);
    coeff_poly[1].resize(15);
    {
    T R_0 = pos_nodes[5][1]; T R_1 = (-8.0)*R_0; T R_2 = 4.0*R_0; T R_3 = 8.0*R_0;
    R_0 = (-4.0)*R_0; T R_4 = pos_nodes[6][1]; T R_5 = (-8.0)*R_4; T R_6 = 8.0*R_4;
    T R_7 = 4.0*R_4; R_4 = (-4.0)*R_4; T R_8 = pos_nodes[8][1]; T R_9 = (-16.0)*R_8;
    R_8 = 16.0*R_8; T R_10 = pos_nodes[2][1]; T R_11 = 4.0*R_10; R_11 = R_11+R_8;
    T R_12 = (-2.0)*R_10; R_12 = R_9+R_12; R_8 = R_10+R_8; R_10 = pos_nodes[3][1];
    R_9 = 4.0*R_10; T R_13 = (-6.0)*R_10; T R_14 = (-2.0)*R_10; T R_15 = 2.0*R_10;
    T R_16 = 3.0*R_10; R_10 = (-1.0)*R_10; T R_17 = pos_nodes[7][1]; T R_18 = (-8.0)*R_17;
    T R_19 = 12.0*R_17; T R_20 = 8.0*R_17; T R_21 = (-4.0)*R_17; T R_22 = (-12.0)*R_17;
    R_17 = 4.0*R_17; T R_23 = pos_nodes[4][1]; T R_24 = (-8.0)*R_23; T R_25 = 8.0*R_23;
    T R_26 = 12.0*R_23; T R_27 = (-12.0)*R_23; T R_28 = (-4.0)*R_23; R_23 = 4.0*R_23;
    T R_29 = pos_nodes[1][1]; T R_30 = 4.0*R_29; T R_31 = (-2.0)*R_29; T R_32 = (-6.0)*R_29;
    T R_33 = 3.0*R_29; T R_34 = 2.0*R_29; R_29 = (-1.0)*R_29; T R_35 = pos[1];
    R_35 = (-1.0)*R_35; T R_36 = pos_nodes[0][1]; T R_37 = 4.0*R_36; R_37 = R_24+R_37;
    R_30 = R_37+R_30; R_30 = R_18+R_30; R_1 = R_30+R_1; R_9 = R_1+R_9;
    R_9 = R_5+R_9; R_9 = R_11+R_9; coeff_poly[1][12] = R_9; R_9 = (-6.0)*R_36;
    R_25 = R_25+R_9; R_25 = R_31+R_25; R_25 = R_19+R_25; R_25 = R_2+R_25;
    R_25 = R_13+R_25; R_25 = R_6+R_25; R_25 = R_25+R_12; coeff_poly[1][8] = R_25;
    R_9 = R_26+R_9; R_32 = R_9+R_32; R_20 = R_32+R_20; R_20 = R_3+R_20;
    R_20 = R_14+R_20; R_20 = R_7+R_20; R_12 = R_20+R_12; coeff_poly[1][7] = R_12;
    R_12 = 9.0*R_36; R_12 = R_27+R_12; R_12 = R_33+R_12; R_12 = R_22+R_12;
    R_12 = R_0+R_12; R_12 = R_16+R_12; R_12 = R_4+R_12; R_12 = R_8+R_12;
    coeff_poly[1][4] = R_12; R_12 = 2.0*R_36; R_21 = R_21+R_12; R_15 = R_21+R_15;
    coeff_poly[1][5] = R_15; R_28 = R_12+R_28; R_34 = R_28+R_34; coeff_poly[1][3] = R_34;
    R_34 = (-3.0)*R_36; R_17 = R_34+R_17; R_10 = R_17+R_10; coeff_poly[1][2] = R_10;
    R_23 = R_34+R_23; R_23 = R_29+R_23; coeff_poly[1][1] = R_23; R_35 = R_36+R_35;
    coeff_poly[1][0] = R_35; R_35 = pos_nodes[5][0]; R_36 = (-8.0)*R_35; R_23 = 4.0*R_35;
    R_29 = 8.0*R_35; R_35 = (-4.0)*R_35; R_34 = pos_nodes[6][0]; R_10 = (-8.0)*R_34;
    R_17 = 8.0*R_34; R_28 = 4.0*R_34; R_34 = (-4.0)*R_34; R_12 = pos_nodes[8][0];
    R_15 = (-16.0)*R_12; R_12 = 16.0*R_12; R_21 = pos_nodes[2][0]; R_8 = 4.0*R_21;
    R_8 = R_12+R_8; R_4 = (-2.0)*R_21; R_4 = R_15+R_4; R_12 = R_21+R_12;
    R_21 = pos_nodes[7][0]; R_15 = (-8.0)*R_21; R_16 = 12.0*R_21; R_0 = 8.0*R_21;
    R_22 = (-4.0)*R_21; R_33 = (-12.0)*R_21; R_21 = 4.0*R_21; R_27 = pos_nodes[3][0];
    R_20 = 4.0*R_27; R_7 = (-6.0)*R_27; R_14 = (-2.0)*R_27; R_3 = 2.0*R_27;
    R_32 = 3.0*R_27; R_27 = (-1.0)*R_27; R_9 = pos_nodes[4][0]; R_26 = (-8.0)*R_9;
    R_25 = 8.0*R_9; R_6 = 12.0*R_9; R_13 = (-12.0)*R_9; R_2 = (-4.0)*R_9;
    R_9 = 4.0*R_9; R_19 = pos_nodes[1][0]; R_31 = 4.0*R_19; R_11 = (-2.0)*R_19;
    R_5 = (-6.0)*R_19; R_1 = 3.0*R_19; R_30 = 2.0*R_19; R_19 = (-1.0)*R_19;
    R_18 = pos[0]; R_18 = (-1.0)*R_18; R_37 = pos_nodes[0][0]; R_24 = 4.0*R_37;
    R_24 = R_26+R_24; R_31 = R_24+R_31; R_31 = R_15+R_31; R_31 = R_36+R_31;
    R_31 = R_20+R_31; R_31 = R_10+R_31; R_31 = R_8+R_31; coeff_poly[0][12] = R_31;
    R_31 = (-6.0)*R_37; R_25 = R_25+R_31; R_25 = R_11+R_25; R_25 = R_16+R_25;
    R_25 = R_23+R_25; R_25 = R_7+R_25; R_25 = R_17+R_25; R_25 = R_4+R_25;
    coeff_poly[0][8] = R_25; R_31 = R_6+R_31; R_5 = R_31+R_5; R_0 = R_5+R_0;
    R_0 = R_29+R_0; R_14 = R_0+R_14; R_28 = R_14+R_28; R_4 = R_28+R_4;
    coeff_poly[0][7] = R_4; R_4 = 9.0*R_37; R_4 = R_13+R_4; R_4 = R_1+R_4;
    R_4 = R_33+R_4; R_4 = R_35+R_4; R_4 = R_32+R_4; R_4 = R_34+R_4;
    R_4 = R_12+R_4; coeff_poly[0][4] = R_4; R_4 = 2.0*R_37; R_22 = R_4+R_22;
    R_22 = R_3+R_22; coeff_poly[0][5] = R_22; R_4 = R_2+R_4; R_30 = R_4+R_30;
    coeff_poly[0][3] = R_30; R_30 = (-3.0)*R_37; R_21 = R_30+R_21; R_21 = R_27+R_21;
    coeff_poly[0][2] = R_21; R_30 = R_9+R_30; R_30 = R_19+R_30; coeff_poly[0][1] = R_30;
    R_18 = R_37+R_18; coeff_poly[0][0] = R_18; 
    coeff_poly[0][6] = 0.0; coeff_poly[0][9] = 0.0; coeff_poly[0][10] = 0.0; coeff_poly[0][11] = 0.0;
    coeff_poly[0][13] = 0.0; coeff_poly[0][14] = 0.0; coeff_poly[1][6] = 0.0; coeff_poly[1][9] = 0.0;
    coeff_poly[1][10] = 0.0; coeff_poly[1][11] = 0.0; coeff_poly[1][13] = 0.0; coeff_poly[1][14] = 0.0;
    

    }
    if (solve_quasi_linear_polynomial_system_2X( coeff_poly, sol_poly, tolerance ) )
        for( unsigned i=0; i< sol_poly.size(); ++i) 
            if ( var_inter_is_inside( Quad_9(), sol_poly[i], tolerance ) ) {
                var_inter += sol_poly[i];
                return true;
            }


    
    T R_0 = pos_nodes[4][1]; T R_1 = (-8.0)*R_0; T R_2 = (-4.0)*R_0; T R_3 = 12.0*R_0;
    T R_4 = 4.0*R_0; T R_5 = pos_nodes[6][1]; T R_6 = 4.0*R_5; T R_7 = R_5+R_0;
    R_7 = 8.0*R_7; T R_8 = pos_nodes[1][1]; T R_9 = (-1.0)*R_8; T R_10 = pos_nodes[2][1];
    T R_11 = R_10+R_8; T R_12 = (-2.0)*R_11; T R_13 = pos_nodes[5][1]; T R_14 = R_5+R_13;
    R_14 = (-4.0)*R_14; T R_15 = 4.0*R_13; T R_16 = pos_nodes[8][1]; T R_17 = 16.0*R_16;
    R_16 = (-16.0)*R_16; R_6 = R_6+R_16; R_6 = R_3+R_6; R_3 = pos_nodes[6][0];
    T R_18 = 4.0*R_3; T R_19 = pos_nodes[4][0]; T R_20 = (-8.0)*R_19; T R_21 = (-4.0)*R_19;
    T R_22 = 12.0*R_19; T R_23 = 4.0*R_19; T R_24 = R_19+R_3; R_24 = 8.0*R_24;
    T R_25 = pos_nodes[5][0]; T R_26 = R_25+R_3; R_26 = (-4.0)*R_26; T R_27 = 4.0*R_25;
    T R_28 = pos_nodes[8][0]; T R_29 = 16.0*R_28; R_28 = (-16.0)*R_28; R_22 = R_22+R_28;
    R_22 = R_18+R_22; R_18 = pos_nodes[1][0]; T R_30 = (-1.0)*R_18; T R_31 = pos_nodes[2][0];
    R_26 = R_31+R_26; R_26 = R_26+R_29; T R_32 = R_31+R_18; R_32 = (-2.0)*R_32;
    T R_33 = pos[0]; R_33 = (-1.0)*R_33; T R_34 = pos[1]; R_34 = (-1.0)*R_34;
    T R_35 = pos_nodes[3][1]; T R_36 = R_10+R_35; R_36 = (-2.0)*R_36; T R_37 = R_8+R_35;
    R_37 = 3.0*R_37; T R_38 = (-1.0)*R_35; T R_39 = pos_nodes[7][1]; T R_40 = (-16.0)*R_39;
    T R_41 = R_39+R_13; R_41 = 8.0*R_41; R_5 = R_39+R_5; R_5 = R_0+R_5;
    R_5 = R_13+R_5; R_5 = (-8.0)*R_5; R_0 = R_39+R_0; R_0 = (-12.0)*R_0;
    R_13 = 12.0*R_39; R_13 = R_15+R_13; R_13 = R_16+R_13; R_16 = R_13+R_12;
    R_16 = R_16+R_7; R_15 = (-8.0)*R_39; T R_42 = (-4.0)*R_39; R_39 = 4.0*R_39;
    T R_43 = pos_nodes[0][1]; R_8 = R_8+R_43; T R_44 = 4.0*R_8; R_44 = R_1+R_44;
    R_1 = 2.0*R_8; R_2 = R_1+R_2; R_1 = pow(R_2,2); R_8 = (-6.0)*R_8;
    R_6 = R_8+R_6; R_6 = R_36+R_6; R_6 = R_41+R_6; R_41 = pow(R_6,2);
    R_11 = R_43+R_11; R_11 = R_35+R_11; R_11 = 4.0*R_11; R_11 = R_17+R_11;
    R_11 = R_5+R_11; R_5 = pow(R_11,2); R_36 = 9.0*R_43; R_36 = R_10+R_36;
    R_36 = R_17+R_36; R_36 = R_0+R_36; R_14 = R_36+R_14; R_37 = R_14+R_37;
    R_14 = pow(R_37,2); R_35 = R_43+R_35; R_36 = 8.0*R_35; R_36 = R_40+R_36;
    R_40 = (-6.0)*R_35; R_13 = R_40+R_13; R_13 = R_7+R_13; R_13 = R_12+R_13;
    R_12 = pow(R_13,2); R_16 = R_40+R_16; R_40 = 4.0*R_35; R_40 = R_15+R_40;
    R_35 = 2.0*R_35; R_42 = R_35+R_42; R_35 = R_42*R_44; R_15 = R_42*R_2;
    R_7 = R_42*R_37; R_0 = pow(R_42,2); R_34 = R_43+R_34; R_17 = R_42*R_34;
    R_10 = pow(R_34,2); R_43 = (-3.0)*R_43; R_4 = R_43+R_4; R_4 = R_9+R_4;
    R_9 = pow(R_4,2); R_8 = R_42*R_4; R_39 = R_43+R_39; R_38 = R_39+R_38;
    R_39 = R_42*R_38; R_43 = pow(R_38,2); T R_45 = pos_nodes[7][0]; T R_46 = (-16.0)*R_45;
    T R_47 = R_45+R_25; R_47 = 8.0*R_47; R_22 = R_47+R_22; R_19 = R_19+R_45;
    R_25 = R_25+R_19; R_25 = R_3+R_25; R_25 = (-8.0)*R_25; R_19 = (-12.0)*R_19;
    R_3 = (-8.0)*R_45; R_47 = 12.0*R_45; R_27 = R_47+R_27; R_27 = R_28+R_27;
    R_27 = R_32+R_27; R_32 = (-4.0)*R_45; R_45 = 4.0*R_45; R_28 = pos_nodes[0][0];
    R_47 = R_31+R_28; R_47 = R_18+R_47; T R_48 = R_28+R_18; T R_49 = 4.0*R_48;
    R_49 = R_20+R_49; R_20 = R_37*R_49; R_20 = R_6*R_20; R_49 = R_38*R_49;
    T R_50 = R_6*R_49; R_49 = R_37*R_49; T R_51 = 2.0*R_48; R_51 = R_21+R_51;
    R_21 = R_51*R_41; T R_52 = R_14*R_51; T R_53 = R_37*R_51; T R_54 = pow(R_51,2);
    T R_55 = R_54*R_5; T R_56 = R_13*R_54; R_56 = R_11*R_56; R_56 = 2.0*R_56;
    T R_57 = R_12*R_54; T R_58 = R_40*R_54; T R_59 = R_11*R_58; R_58 = R_13*R_58;
    R_54 = R_0*R_54; T R_60 = R_51*R_6; T R_61 = R_42*R_60; T R_62 = R_38*R_51;
    T R_63 = R_43*R_51; T R_64 = R_40*R_51; R_48 = (-6.0)*R_48; T R_65 = 9.0*R_28;
    R_26 = R_65+R_26; R_33 = R_28+R_33; R_65 = R_33*R_5; T R_66 = R_51*R_65;
    R_66 = 2.0*R_66; T R_67 = R_33*R_41; T R_68 = R_33*R_13; T R_69 = R_51*R_68;
    R_69 = R_11*R_69; R_69 = 4.0*R_69; T R_70 = R_33*R_12; T R_71 = R_51*R_70;
    R_71 = 2.0*R_71; T R_72 = R_33*R_14; T R_73 = R_33*R_6; T R_74 = R_42*R_73;
    T R_75 = R_33*R_36; T R_76 = R_51*R_75; T R_77 = R_11*R_76; R_76 = R_13*R_76;
    T R_78 = R_33*R_37; T R_79 = R_78*R_6; T R_80 = R_33*R_0; T R_81 = R_80*R_51;
    R_81 = 2.0*R_81; T R_82 = R_33*R_38; T R_83 = R_82*R_6; T R_84 = R_37*R_82;
    T R_85 = R_43*R_33; T R_86 = R_33*R_40; T R_87 = pow(R_33,2); T R_88 = R_87*R_5;
    T R_89 = R_87*R_13; R_89 = R_11*R_89; R_89 = 2.0*R_89; T R_90 = R_87*R_12;
    T R_91 = R_87*R_40; T R_92 = R_91*R_11; R_91 = R_16*R_91; R_87 = R_87*R_0;
    T R_93 = (-3.0)*R_28; R_23 = R_23+R_93; R_23 = R_30+R_23; R_30 = R_23*R_5;
    R_30 = R_51*R_30; R_30 = 2.0*R_30; T R_94 = R_23*R_13; R_94 = R_51*R_94;
    R_94 = R_11*R_94; R_94 = 4.0*R_94; T R_95 = R_23*R_12; R_95 = R_51*R_95;
    R_95 = 2.0*R_95; R_65 = R_23*R_65; R_65 = 2.0*R_65; R_41 = R_23*R_41;
    T R_96 = R_23*R_14; R_36 = R_23*R_36; R_36 = R_51*R_36; T R_97 = R_11*R_36;
    R_36 = R_13*R_36; R_68 = R_23*R_68; R_68 = R_11*R_68; R_68 = 4.0*R_68;
    T R_98 = R_23*R_6; T R_99 = R_42*R_98; T R_100 = R_23*R_37; T R_101 = R_6*R_100;
    T R_102 = R_0*R_23; R_102 = R_51*R_102; R_102 = 2.0*R_102; R_70 = R_23*R_70;
    R_70 = 2.0*R_70; R_75 = R_23*R_75; T R_103 = R_11*R_75; R_75 = R_13*R_75;
    T R_104 = R_38*R_23; T R_105 = R_37*R_104; T R_106 = R_104*R_6; T R_107 = R_43*R_23;
    T R_108 = pow(R_23,2); R_5 = R_108*R_5; T R_109 = R_108*R_13; R_109 = R_11*R_109;
    R_109 = 2.0*R_109; R_12 = R_108*R_12; T R_110 = R_40*R_108; T R_111 = R_11*R_110;
    R_110 = R_13*R_110; R_108 = R_0*R_108; R_80 = R_80*R_23; R_80 = 2.0*R_80;
    R_0 = R_40*R_23; R_45 = R_93+R_45; R_93 = pos_nodes[3][0]; R_47 = R_93+R_47;
    R_47 = 4.0*R_47; R_47 = R_29+R_47; R_25 = R_47+R_25; R_47 = R_25*R_21;
    R_29 = R_25*R_41; T R_112 = R_25*R_20; T R_113 = R_25*R_101; R_113 = 2.0*R_113;
    T R_114 = R_25*R_52; T R_115 = R_25*R_50; T R_116 = R_25*R_67; T R_117 = R_25*R_79;
    R_117 = 2.0*R_117; T R_118 = R_25*R_96; T R_119 = R_25*R_49; T R_120 = R_25*R_106;
    R_120 = 2.0*R_120; T R_121 = R_25*R_72; T R_122 = R_25*R_83; R_122 = 2.0*R_122;
    T R_123 = R_25*R_44; T R_124 = R_51*R_123; T R_125 = R_11*R_124; R_125 = (-1.0)*R_125;
    R_125 = R_55+R_125; R_124 = R_13*R_124; R_124 = (-1.0)*R_124; R_55 = R_23*R_123;
    T R_126 = R_11*R_55; R_126 = (-1.0)*R_126; R_55 = R_13*R_55; R_55 = (-1.0)*R_55;
    T R_127 = R_33*R_123; T R_128 = R_11*R_127; R_128 = (-1.0)*R_128; R_127 = R_13*R_127;
    R_127 = (-1.0)*R_127; R_123 = R_42*R_123; T R_129 = R_51*R_123; R_129 = (-1.0)*R_129;
    T R_130 = R_23*R_123; R_130 = (-1.0)*R_130; R_123 = R_33*R_123; R_123 = (-1.0)*R_123;
    T R_131 = R_25*R_63; T R_132 = pow(R_25,2); T R_133 = R_1*R_132; T R_134 = R_4*R_132;
    R_134 = R_2*R_134; R_134 = 2.0*R_134; T R_135 = R_9*R_132; T R_136 = R_34*R_132;
    T R_137 = R_2*R_136; R_137 = 2.0*R_137; R_136 = R_4*R_136; R_136 = 2.0*R_136;
    R_132 = R_10*R_132; T R_138 = R_25*R_105; R_138 = 2.0*R_138; T R_139 = R_4*R_25;
    T R_140 = R_51*R_139; T R_141 = R_11*R_140; R_141 = (-2.0)*R_141; R_140 = R_13*R_140;
    R_140 = (-2.0)*R_140; T R_142 = R_23*R_139; T R_143 = R_11*R_142; R_143 = (-2.0)*R_143;
    R_137 = R_143+R_137; R_140 = R_137+R_140; R_142 = R_13*R_142; R_142 = (-2.0)*R_142;
    R_142 = R_136+R_142; R_136 = R_33*R_139; R_137 = R_11*R_136; R_137 = (-2.0)*R_137;
    R_137 = R_65+R_137; R_136 = R_13*R_136; R_136 = (-2.0)*R_136; R_136 = R_111+R_136;
    R_139 = R_42*R_139; R_111 = R_51*R_139; R_111 = (-2.0)*R_111; R_142 = R_111+R_142;
    R_111 = R_23*R_139; R_111 = (-2.0)*R_111; R_136 = R_111+R_136; R_139 = R_33*R_139;
    R_139 = (-2.0)*R_139; R_139 = R_89+R_139; R_89 = R_25*R_84; R_89 = 2.0*R_89;
    R_111 = R_107*R_25; R_65 = R_34*R_25; R_143 = R_65*R_51; T R_144 = R_11*R_143;
    R_144 = (-2.0)*R_144; R_94 = R_144+R_94; R_143 = R_13*R_143; R_143 = (-2.0)*R_143;
    R_144 = R_23*R_65; T R_145 = R_11*R_144; R_145 = (-2.0)*R_145; R_144 = R_13*R_144;
    R_144 = (-2.0)*R_144; T R_146 = R_33*R_65; T R_147 = R_11*R_146; R_147 = (-2.0)*R_147;
    R_146 = R_13*R_146; R_146 = (-2.0)*R_146; R_65 = R_42*R_65; T R_148 = R_65*R_51;
    R_148 = (-2.0)*R_148; T R_149 = R_23*R_65; R_149 = (-2.0)*R_149; R_65 = R_33*R_65;
    R_65 = (-2.0)*R_65; T R_150 = R_85*R_25; R_31 = R_31+R_93; R_31 = (-2.0)*R_31;
    R_22 = R_31+R_22; R_48 = R_22+R_48; R_22 = R_48*R_60; R_31 = R_11*R_22;
    R_31 = (-1.0)*R_31; T R_151 = R_13*R_22; R_151 = (-1.0)*R_151; R_22 = R_42*R_22;
    R_22 = (-1.0)*R_22; T R_152 = R_48*R_53; T R_153 = R_11*R_152; R_153 = (-1.0)*R_153;
    T R_154 = R_13*R_152; R_154 = (-1.0)*R_154; R_152 = R_42*R_152; R_152 = (-1.0)*R_152;
    T R_155 = R_48*R_98; T R_156 = R_11*R_155; R_156 = (-1.0)*R_156; T R_157 = R_13*R_155;
    R_157 = (-1.0)*R_157; R_155 = R_42*R_155; R_155 = (-1.0)*R_155; T R_158 = R_48*R_73;
    T R_159 = R_11*R_158; R_159 = (-1.0)*R_159; T R_160 = R_13*R_158; R_160 = (-1.0)*R_160;
    R_158 = R_42*R_158; R_158 = (-1.0)*R_158; T R_161 = R_2*R_48; T R_162 = R_37*R_161;
    T R_163 = R_25*R_162; R_163 = (-1.0)*R_163; T R_164 = R_6*R_161; T R_165 = R_25*R_164;
    R_165 = (-1.0)*R_165; R_133 = R_165+R_133; R_31 = R_133+R_31; R_133 = R_38*R_161;
    R_165 = R_25*R_133; R_165 = (-1.0)*R_165; T R_166 = pow(R_48,2); T R_167 = R_2*R_166;
    T R_168 = R_11*R_167; R_168 = R_31+R_168; R_125 = R_168+R_125; R_125 = R_47+R_125;
    coeff_resultant_U[8] = R_125; R_125 = R_13*R_167; R_156 = R_125+R_156; R_167 = R_42*R_167;
    R_128 = R_167+R_128; R_55 = R_128+R_55; R_129 = R_55+R_129; R_55 = R_4*R_166;
    R_128 = R_11*R_55; R_167 = R_13*R_55; R_55 = R_42*R_55; R_130 = R_55+R_130;
    R_166 = R_34*R_166; R_55 = R_11*R_166; R_125 = R_13*R_166; R_166 = R_42*R_166;
    R_47 = R_48*R_62; R_168 = R_11*R_47; R_168 = (-1.0)*R_168; R_31 = R_13*R_47;
    R_31 = (-1.0)*R_31; R_47 = R_42*R_47; R_47 = (-1.0)*R_47; T R_169 = R_48*R_100;
    T R_170 = R_11*R_169; R_170 = (-1.0)*R_170; R_170 = R_113+R_170; R_113 = R_13*R_169;
    R_113 = (-1.0)*R_113; R_169 = R_42*R_169; R_169 = (-1.0)*R_169; T R_171 = R_4*R_48;
    T R_172 = R_6*R_171; T R_173 = R_25*R_172; R_173 = (-1.0)*R_173; T R_174 = R_37*R_171;
    T R_175 = R_25*R_174; R_175 = (-1.0)*R_175; T R_176 = R_38*R_171; T R_177 = R_25*R_176;
    R_177 = (-1.0)*R_177; T R_178 = R_78*R_48; T R_179 = R_11*R_178; R_179 = (-1.0)*R_179;
    R_179 = R_117+R_179; R_117 = R_13*R_178; R_117 = (-1.0)*R_117; R_178 = R_42*R_178;
    R_178 = (-1.0)*R_178; T R_180 = R_104*R_48; T R_181 = R_11*R_180; R_181 = (-1.0)*R_181;
    R_181 = R_120+R_181; R_120 = R_13*R_180; R_120 = (-1.0)*R_120; R_180 = R_42*R_180;
    R_180 = (-1.0)*R_180; T R_182 = R_34*R_48; T R_183 = R_182*R_6; T R_184 = R_25*R_183;
    R_184 = (-1.0)*R_184; T R_185 = R_37*R_182; T R_186 = R_25*R_185; R_186 = (-1.0)*R_186;
    T R_187 = R_38*R_182; T R_188 = R_25*R_187; R_188 = (-1.0)*R_188; T R_189 = R_82*R_48;
    T R_190 = R_11*R_189; R_190 = (-1.0)*R_190; R_190 = R_122+R_190; R_122 = R_13*R_189;
    R_122 = (-1.0)*R_122; R_189 = R_42*R_189; R_189 = (-1.0)*R_189; R_18 = R_18+R_93;
    R_18 = 3.0*R_18; R_26 = R_18+R_26; R_26 = R_19+R_26; R_19 = R_26*R_60;
    R_18 = R_11*R_19; R_18 = (-1.0)*R_18; R_19 = R_13*R_19; R_19 = (-1.0)*R_19;
    T R_191 = R_26*R_98; T R_192 = R_11*R_191; R_192 = (-1.0)*R_192; R_192 = R_170+R_192;
    R_157 = R_192+R_157; R_168 = R_157+R_168; R_191 = R_13*R_191; R_191 = (-1.0)*R_191;
    R_157 = R_26*R_53; R_192 = R_11*R_157; R_192 = (-1.0)*R_192; R_157 = R_13*R_157;
    R_157 = (-1.0)*R_157; R_170 = R_26*R_61; R_170 = (-1.0)*R_170; T R_193 = R_26*R_44;
    R_193 = R_48*R_193; T R_194 = R_11*R_193; R_163 = R_194+R_163; R_194 = R_13*R_193;
    R_165 = R_194+R_165; R_193 = R_42*R_193; R_194 = R_26*R_73; T R_195 = R_11*R_194;
    R_195 = (-1.0)*R_195; R_194 = R_13*R_194; R_194 = (-1.0)*R_194; T R_196 = R_26*R_99;
    R_196 = (-1.0)*R_196; T R_197 = R_26*R_62; T R_198 = R_11*R_197; R_198 = (-1.0)*R_198;
    R_197 = R_13*R_197; R_197 = (-1.0)*R_197; T R_199 = R_26*R_100; T R_200 = R_11*R_199;
    R_200 = (-1.0)*R_200; R_199 = R_13*R_199; R_199 = (-1.0)*R_199; T R_201 = R_26*R_2;
    T R_202 = R_37*R_201; T R_203 = R_25*R_202; R_203 = (-1.0)*R_203; R_203 = R_129+R_203;
    R_129 = R_6*R_201; T R_204 = R_25*R_129; R_204 = (-1.0)*R_204; R_204 = R_56+R_204;
    R_204 = R_30+R_204; R_201 = R_38*R_201; R_30 = R_25*R_201; R_30 = (-1.0)*R_30;
    R_56 = R_26*R_4; T R_205 = R_6*R_56; T R_206 = R_25*R_205; R_206 = (-1.0)*R_206;
    T R_207 = R_48*R_56; T R_208 = R_11*R_207; R_208 = 2.0*R_208; R_184 = R_208+R_184;
    R_206 = R_184+R_206; R_159 = R_206+R_159; R_206 = R_13*R_207; R_206 = 2.0*R_206;
    R_177 = R_206+R_177; R_207 = R_42*R_207; R_207 = 2.0*R_207; R_206 = R_37*R_56;
    R_184 = R_25*R_206; R_184 = (-1.0)*R_184; R_56 = R_38*R_56; R_208 = R_25*R_56;
    R_208 = (-1.0)*R_208; T R_209 = R_26*R_104; T R_210 = R_11*R_209; R_210 = (-1.0)*R_210;
    R_209 = R_13*R_209; R_209 = (-1.0)*R_209; T R_211 = R_26*R_78; T R_212 = R_11*R_211;
    R_212 = (-1.0)*R_212; R_211 = R_13*R_211; R_211 = (-1.0)*R_211; T R_213 = R_26*R_74;
    R_213 = (-1.0)*R_213; T R_214 = R_26*R_34; T R_215 = R_214*R_6; T R_216 = R_25*R_215;
    R_216 = (-1.0)*R_216; T R_217 = R_37*R_214; T R_218 = R_25*R_217; R_218 = (-1.0)*R_218;
    T R_219 = R_214*R_48; T R_220 = R_11*R_219; R_220 = 2.0*R_220; R_186 = R_220+R_186;
    R_220 = R_13*R_219; R_220 = 2.0*R_220; R_219 = R_42*R_219; R_219 = 2.0*R_219;
    R_214 = R_38*R_214; T R_221 = R_25*R_214; R_221 = (-1.0)*R_221; T R_222 = pow(R_26,2);
    T R_223 = R_2*R_222; T R_224 = R_11*R_223; R_223 = R_13*R_223; T R_225 = R_4*R_222;
    T R_226 = R_11*R_225; R_225 = R_13*R_225; T R_227 = R_15*R_222; T R_228 = R_34*R_222;
    T R_229 = R_11*R_228; R_228 = R_13*R_228; T R_230 = R_8*R_222; R_222 = R_17*R_222;
    T R_231 = R_26*R_37; T R_232 = R_26*R_7; T R_233 = R_51*R_232; R_233 = (-1.0)*R_233;
    T R_234 = R_23*R_232; R_234 = (-1.0)*R_234; R_232 = R_33*R_232; R_232 = (-1.0)*R_232;
    T R_235 = R_26*R_82; T R_236 = R_235*R_11; R_236 = (-1.0)*R_236; R_235 = R_235*R_13;
    R_235 = (-1.0)*R_235; T R_237 = R_26*R_38; T R_238 = R_26*R_39; T R_239 = R_238*R_51;
    R_239 = (-1.0)*R_239; T R_240 = R_238*R_23; R_240 = (-1.0)*R_240; R_238 = R_238*R_33;
    R_238 = (-1.0)*R_238; R_28 = R_28+R_93; T R_241 = 8.0*R_28; R_46 = R_241+R_46;
    R_241 = R_4*R_46; R_241 = R_2*R_241; T R_242 = R_25*R_241; R_46 = R_34*R_46;
    T R_243 = R_2*R_46; T R_244 = R_25*R_243; R_46 = R_4*R_46; T R_245 = R_25*R_46;
    T R_246 = 4.0*R_28; R_246 = R_3+R_246; R_3 = R_246*R_1; T R_247 = R_25*R_3;
    T R_248 = R_2*R_246; T R_249 = R_51*R_248; T R_250 = R_11*R_249; R_250 = (-1.0)*R_250;
    R_249 = R_13*R_249; R_249 = (-1.0)*R_249; T R_251 = R_23*R_248; T R_252 = R_11*R_251;
    R_252 = (-1.0)*R_252; R_251 = R_13*R_251; R_251 = (-1.0)*R_251; R_248 = R_33*R_248;
    T R_253 = R_11*R_248; R_253 = (-1.0)*R_253; R_248 = R_13*R_248; R_248 = (-1.0)*R_248;
    T R_254 = R_246*R_9; T R_255 = R_25*R_254; T R_256 = R_246*R_4; T R_257 = R_51*R_256;
    T R_258 = R_11*R_257; R_258 = (-1.0)*R_258; R_258 = R_242+R_258; R_257 = R_13*R_257;
    R_257 = (-1.0)*R_257; R_242 = R_23*R_256; T R_259 = R_11*R_242; R_259 = (-1.0)*R_259;
    R_242 = R_13*R_242; R_242 = (-1.0)*R_242; R_256 = R_33*R_256; T R_260 = R_11*R_256;
    R_260 = (-1.0)*R_260; R_256 = R_13*R_256; R_256 = (-1.0)*R_256; T R_261 = R_38*R_246;
    R_261 = R_37*R_261; T R_262 = R_51*R_261; R_261 = R_23*R_261; T R_263 = R_10*R_246;
    T R_264 = R_263*R_25; R_246 = R_246*R_34; T R_265 = R_246*R_51; T R_266 = R_11*R_265;
    R_266 = (-1.0)*R_266; R_266 = R_244+R_266; R_265 = R_13*R_265; R_265 = (-1.0)*R_265;
    R_244 = R_23*R_246; T R_267 = R_11*R_244; R_267 = (-1.0)*R_267; R_267 = R_245+R_267;
    R_244 = R_13*R_244; R_244 = (-1.0)*R_244; R_246 = R_33*R_246; R_245 = R_246*R_11;
    R_245 = (-1.0)*R_245; R_246 = R_16*R_246; R_246 = (-1.0)*R_246; T R_268 = (-6.0)*R_28;
    R_27 = R_268+R_27; R_24 = R_27+R_24; R_27 = R_24*R_1; R_27 = R_25*R_27;
    R_27 = 2.0*R_27; R_268 = R_24*R_164; R_268 = (-1.0)*R_268; R_268 = R_163+R_268;
    R_173 = R_268+R_173; R_153 = R_173+R_153; R_153 = R_18+R_153; R_153 = R_151+R_153;
    R_153 = R_204+R_153; R_153 = R_128+R_153; R_156 = R_153+R_156; R_153 = R_24*R_21;
    R_162 = R_24*R_162; R_162 = (-1.0)*R_162; R_162 = R_165+R_162; R_165 = R_24*R_129;
    R_165 = (-1.0)*R_165; R_203 = R_165+R_203; R_165 = R_24*R_20; R_192 = R_165+R_192;
    R_250 = R_192+R_250; R_192 = R_24*R_172; R_192 = (-1.0)*R_192; R_165 = R_24*R_41;
    R_115 = R_165+R_115; R_165 = R_24*R_205; R_165 = (-1.0)*R_165; R_128 = R_24*R_183;
    R_128 = (-1.0)*R_128; R_128 = R_186+R_128; R_202 = R_24*R_202; R_202 = (-1.0)*R_202;
    R_202 = R_95+R_202; R_95 = R_24*R_50; R_198 = R_95+R_198; R_31 = R_198+R_31;
    R_174 = R_24*R_174; R_174 = (-1.0)*R_174; R_3 = R_24*R_3; R_174 = R_3+R_174;
    R_52 = R_24*R_52; R_58 = R_52+R_58; R_223 = R_58+R_223; R_58 = R_24*R_67;
    R_133 = R_24*R_133; R_133 = (-1.0)*R_133; R_193 = R_133+R_193; R_133 = R_24*R_101;
    R_133 = 2.0*R_133; R_52 = R_24*R_9; R_52 = R_25*R_52; R_52 = 2.0*R_52;
    R_3 = R_24*R_106; R_3 = 2.0*R_3; R_210 = R_3+R_210; R_120 = R_210+R_120;
    R_185 = R_24*R_185; R_185 = (-1.0)*R_185; R_176 = R_24*R_176; R_176 = (-1.0)*R_176;
    R_176 = R_207+R_176; R_206 = R_24*R_206; R_206 = (-1.0)*R_206; R_206 = R_136+R_206;
    R_241 = R_24*R_241; R_257 = R_241+R_257; R_241 = R_24*R_79; R_241 = 2.0*R_241;
    R_212 = R_241+R_212; R_117 = R_212+R_117; R_49 = R_24*R_49; R_49 = R_197+R_49;
    R_96 = R_24*R_96; R_96 = R_12+R_96; R_54 = R_96+R_54; R_96 = R_24*R_215;
    R_96 = (-1.0)*R_96; R_201 = R_24*R_201; R_201 = (-1.0)*R_201; R_187 = R_24*R_187;
    R_187 = (-1.0)*R_187; R_56 = R_24*R_56; R_56 = (-1.0)*R_56; R_12 = R_24*R_83;
    R_12 = 2.0*R_12; R_236 = R_12+R_236; R_122 = R_236+R_122; R_236 = R_10*R_24;
    R_236 = R_25*R_236; R_236 = 2.0*R_236; R_12 = R_24*R_44; R_197 = R_51*R_12;
    R_212 = R_11*R_197; R_212 = (-1.0)*R_212; R_212 = R_112+R_212; R_126 = R_212+R_126;
    R_124 = R_126+R_124; R_141 = R_124+R_141; R_141 = R_156+R_141; R_27 = R_141+R_27;
    R_134 = R_27+R_134; R_29 = R_134+R_29; R_29 = R_153+R_29; coeff_resultant_U[7] = R_29;
    R_197 = R_13*R_197; R_197 = (-1.0)*R_197; R_197 = R_66+R_197; R_66 = R_23*R_12;
    R_29 = R_11*R_66; R_29 = (-1.0)*R_29; R_29 = R_250+R_29; R_66 = R_13*R_66;
    R_66 = (-1.0)*R_66; R_250 = R_33*R_12; R_153 = R_11*R_250; R_153 = (-1.0)*R_153;
    R_250 = R_13*R_250; R_250 = (-1.0)*R_250; R_12 = R_42*R_12; R_134 = R_51*R_12;
    R_134 = (-1.0)*R_134; R_27 = R_23*R_12; R_27 = (-1.0)*R_27; R_12 = R_33*R_12;
    R_12 = (-1.0)*R_12; R_243 = R_24*R_243; R_265 = R_243+R_265; R_217 = R_24*R_217;
    R_217 = (-1.0)*R_217; R_105 = R_24*R_105; R_105 = 2.0*R_105; R_209 = R_105+R_209;
    R_63 = R_24*R_63; R_254 = R_24*R_254; R_72 = R_24*R_72; R_72 = R_110+R_72;
    R_110 = R_24*R_4; R_105 = R_2*R_110; R_105 = R_25*R_105; R_105 = 4.0*R_105;
    R_175 = R_105+R_175; R_192 = R_175+R_192; R_175 = R_51*R_110; R_105 = R_11*R_175;
    R_105 = (-2.0)*R_105; R_105 = R_197+R_105; R_175 = R_13*R_175; R_175 = (-2.0)*R_175;
    R_175 = R_179+R_175; R_66 = R_175+R_66; R_249 = R_66+R_249; R_249 = R_134+R_249;
    R_134 = R_23*R_110; R_66 = R_11*R_134; R_66 = (-2.0)*R_66; R_66 = R_130+R_66;
    R_66 = R_216+R_66; R_134 = R_13*R_134; R_134 = (-2.0)*R_134; R_134 = R_257+R_134;
    R_257 = R_33*R_110; R_216 = R_11*R_257; R_216 = (-2.0)*R_216; R_216 = R_121+R_216;
    R_257 = R_13*R_257; R_257 = (-2.0)*R_257; R_110 = R_42*R_110; R_121 = R_51*R_110;
    R_121 = (-2.0)*R_121; R_134 = R_121+R_134; R_251 = R_134+R_251; R_250 = R_251+R_250;
    R_250 = R_27+R_250; R_27 = R_23*R_110; R_27 = (-2.0)*R_27; R_110 = R_33*R_110;
    R_110 = (-2.0)*R_110; R_46 = R_24*R_46; R_46 = R_244+R_46; R_214 = R_24*R_214;
    R_214 = (-1.0)*R_214; R_244 = pow(R_24,2); R_251 = R_244*R_1; R_134 = R_4*R_244;
    R_134 = R_2*R_134; R_134 = 2.0*R_134; R_134 = R_223+R_134; R_223 = R_244*R_9;
    R_121 = R_34*R_244; R_130 = R_2*R_121; R_130 = 2.0*R_130; R_121 = R_4*R_121;
    R_121 = 2.0*R_121; R_244 = R_10*R_244; R_235 = R_244+R_235; R_107 = R_24*R_107;
    R_84 = R_24*R_84; R_84 = 2.0*R_84; R_244 = R_24*R_34; R_175 = R_2*R_244;
    R_175 = R_25*R_175; R_175 = 4.0*R_175; R_179 = R_244*R_51; R_197 = R_11*R_179;
    R_197 = (-2.0)*R_197; R_197 = R_175+R_197; R_197 = R_145+R_197; R_143 = R_197+R_143;
    R_179 = R_13*R_179; R_179 = (-2.0)*R_179; R_179 = R_117+R_179; R_117 = R_244*R_4;
    R_117 = R_25*R_117; R_117 = 4.0*R_117; R_197 = R_23*R_244; R_145 = R_11*R_197;
    R_145 = (-2.0)*R_145; R_145 = R_117+R_145; R_145 = R_147+R_145; R_144 = R_145+R_144;
    R_144 = R_148+R_144; R_144 = R_259+R_144; R_197 = R_13*R_197; R_197 = (-2.0)*R_197;
    R_197 = R_265+R_197; R_265 = R_33*R_244; R_259 = R_11*R_265; R_259 = (-2.0)*R_259;
    R_259 = R_267+R_259; R_146 = R_259+R_146; R_146 = R_149+R_146; R_146 = R_260+R_146;
    R_265 = R_13*R_265; R_265 = (-2.0)*R_265; R_265 = R_46+R_265; R_244 = R_42*R_244;
    R_46 = R_244*R_51; R_46 = (-2.0)*R_46; R_46 = R_197+R_46; R_242 = R_46+R_242;
    R_242 = R_257+R_242; R_242 = R_27+R_242; R_242 = R_248+R_242; R_12 = R_242+R_12;
    R_242 = R_23*R_244; R_242 = (-2.0)*R_242; R_265 = R_242+R_265; R_256 = R_265+R_256;
    R_110 = R_256+R_110; R_244 = R_33*R_244; R_244 = (-2.0)*R_244; R_263 = R_24*R_263;
    R_85 = R_85*R_24; R_28 = 2.0*R_28; R_32 = R_28+R_32; R_164 = R_32*R_164;
    R_164 = (-1.0)*R_164; R_162 = R_164+R_162; R_21 = R_32*R_21; R_20 = R_32*R_20;
    R_41 = R_32*R_41; R_200 = R_41+R_200; R_113 = R_200+R_113; R_172 = R_32*R_172;
    R_172 = (-1.0)*R_172; R_172 = R_174+R_172; R_129 = R_32*R_129; R_129 = (-1.0)*R_129;
    R_129 = R_97+R_129; R_205 = R_32*R_205; R_205 = (-1.0)*R_205; R_183 = R_32*R_183;
    R_183 = (-1.0)*R_183; R_161 = R_32*R_161; R_97 = R_37*R_161; R_97 = (-1.0)*R_97;
    R_97 = R_193+R_97; R_161 = R_38*R_161; R_161 = (-1.0)*R_161; R_161 = R_220+R_161;
    R_50 = R_32*R_50; R_67 = R_32*R_67; R_101 = R_32*R_101; R_101 = 2.0*R_101;
    R_171 = R_32*R_171; R_220 = R_37*R_171; R_220 = (-1.0)*R_220; R_220 = R_176+R_220;
    R_188 = R_220+R_188; R_185 = R_188+R_185; R_183 = R_185+R_183; R_171 = R_38*R_171;
    R_171 = (-1.0)*R_171; R_215 = R_32*R_215; R_215 = (-1.0)*R_215; R_40 = R_40*R_32;
    R_40 = R_4*R_40; R_40 = R_51*R_40; R_40 = (-1.0)*R_40; R_40 = R_63+R_40;
    R_79 = R_32*R_79; R_79 = 2.0*R_79; R_106 = R_32*R_106; R_106 = 2.0*R_106;
    R_182 = R_32*R_182; R_63 = R_37*R_182; R_63 = (-1.0)*R_63; R_182 = R_38*R_182;
    R_182 = (-1.0)*R_182; R_231 = R_32*R_231; R_185 = R_2*R_231; R_185 = (-1.0)*R_185;
    R_188 = R_4*R_231; R_188 = (-1.0)*R_188; R_231 = R_34*R_231; R_231 = (-1.0)*R_231;
    R_64 = R_32*R_64; R_220 = R_2*R_64; R_220 = (-1.0)*R_220; R_64 = R_34*R_64;
    R_64 = (-1.0)*R_64; R_14 = R_32*R_14; R_176 = R_14*R_51; R_220 = R_176+R_220;
    R_233 = R_220+R_233; R_185 = R_233+R_185; R_199 = R_185+R_199; R_185 = R_23*R_14;
    R_14 = R_33*R_14; R_83 = R_32*R_83; R_83 = 2.0*R_83; R_233 = R_38*R_32;
    R_233 = R_37*R_233; R_233 = R_33*R_233; R_233 = 2.0*R_233; R_237 = R_237*R_32;
    R_220 = R_2*R_237; R_220 = (-1.0)*R_220; R_176 = R_237*R_4; R_176 = (-1.0)*R_176;
    R_237 = R_237*R_34; R_237 = (-1.0)*R_237; R_0 = R_32*R_0; R_193 = R_2*R_0;
    R_193 = (-1.0)*R_193; R_193 = R_40+R_193; R_239 = R_193+R_239; R_220 = R_239+R_220;
    R_239 = R_0*R_4; R_239 = (-1.0)*R_239; R_0 = R_0*R_34; R_0 = (-1.0)*R_0;
    R_86 = R_86*R_32; R_193 = R_86*R_2; R_193 = (-1.0)*R_193; R_40 = R_86*R_4;
    R_40 = (-1.0)*R_40; R_86 = R_86*R_34; R_86 = (-1.0)*R_86; R_86 = R_87+R_86;
    R_87 = pow(R_32,2); R_1 = R_87*R_1; R_1 = R_54+R_1; R_9 = R_87*R_9;
    R_9 = R_193+R_9; R_239 = R_9+R_239; R_64 = R_239+R_64; R_239 = R_87*R_2;
    R_239 = R_239*R_34; R_239 = 2.0*R_239; R_245 = R_239+R_245; R_65 = R_245+R_65;
    R_245 = R_87*R_4; R_239 = R_245*R_2; R_239 = 2.0*R_239; R_211 = R_239+R_211;
    R_245 = R_245*R_34; R_245 = 2.0*R_245; R_87 = R_10*R_87; R_43 = R_43*R_32;
    R_10 = R_43*R_51; R_10 = R_14+R_10; R_107 = R_10+R_107; R_65 = R_107+R_65;
    R_235 = R_65+R_235; R_235 = R_108+R_235; R_108 = R_43*R_23; R_43 = R_43*R_33;
    R_93 = (-1.0)*R_93; R_45 = R_93+R_45; R_60 = R_45*R_60; R_93 = R_11*R_60;
    R_93 = (-1.0)*R_93; R_60 = R_13*R_60; R_60 = (-1.0)*R_60; R_98 = R_45*R_98;
    R_65 = R_11*R_98; R_65 = (-1.0)*R_65; R_65 = R_113+R_65; R_191 = R_65+R_191;
    R_155 = R_191+R_155; R_98 = R_13*R_98; R_98 = (-1.0)*R_98; R_53 = R_45*R_53;
    R_191 = R_11*R_53; R_191 = (-1.0)*R_191; R_191 = R_20+R_191; R_152 = R_191+R_152;
    R_252 = R_152+R_252; R_153 = R_252+R_153; R_127 = R_153+R_127; R_53 = R_13*R_53;
    R_53 = (-1.0)*R_53; R_53 = R_49+R_53; R_61 = R_45*R_61; R_61 = (-1.0)*R_61;
    R_44 = R_45*R_44; R_49 = R_48*R_44; R_153 = R_11*R_49; R_154 = R_153+R_154;
    R_93 = R_154+R_93; R_19 = R_93+R_19; R_19 = R_22+R_19; R_19 = R_115+R_19;
    R_94 = R_19+R_94; R_19 = R_13*R_49; R_30 = R_19+R_30; R_60 = R_30+R_60;
    R_170 = R_60+R_170; R_170 = R_134+R_170; R_143 = R_170+R_143; R_258 = R_143+R_258;
    R_49 = R_42*R_49; R_49 = R_1+R_49; R_266 = R_49+R_266; R_144 = R_266+R_144;
    R_223 = R_144+R_223; R_223 = R_130+R_223; R_44 = R_26*R_44; R_130 = R_11*R_44;
    R_258 = R_130+R_258; R_44 = R_13*R_44; R_201 = R_44+R_201; R_44 = R_45*R_2;
    R_130 = R_37*R_44; R_144 = R_25*R_130; R_144 = (-1.0)*R_144; R_144 = R_172+R_144;
    R_130 = R_24*R_130; R_130 = (-1.0)*R_130; R_206 = R_130+R_206; R_130 = R_6*R_44;
    R_172 = R_25*R_130; R_172 = (-1.0)*R_172; R_172 = R_192+R_172; R_172 = R_94+R_172;
    R_172 = R_116+R_172; R_114 = R_172+R_114; R_114 = R_21+R_114; R_168 = R_114+R_168;
    R_29 = R_168+R_29; R_29 = R_59+R_29; R_140 = R_29+R_140; R_140 = R_55+R_140;
    R_140 = R_167+R_140; R_224 = R_140+R_224; R_203 = R_224+R_203; R_162 = R_203+R_162;
    R_162 = R_247+R_162; R_105 = R_162+R_105; R_57 = R_105+R_57; R_57 = R_251+R_57;
    R_135 = R_57+R_135; R_135 = R_5+R_135; R_159 = R_135+R_159; coeff_resultant_U[6] = R_159;
    R_159 = R_24*R_130; R_159 = (-1.0)*R_159; R_159 = R_144+R_159; R_157 = R_159+R_157;
    R_157 = R_258+R_157; R_157 = R_58+R_157; R_118 = R_157+R_118; R_155 = R_118+R_155;
    R_155 = R_119+R_155; R_31 = R_155+R_31; R_127 = R_31+R_127; R_249 = R_127+R_249;
    R_249 = R_109+R_249; R_142 = R_249+R_142; R_69 = R_142+R_69; R_125 = R_69+R_125;
    R_226 = R_125+R_226; R_66 = R_226+R_66; R_66 = R_129+R_66; R_66 = R_97+R_66;
    R_137 = R_66+R_137; R_202 = R_137+R_202; R_202 = R_133+R_202; R_177 = R_202+R_177;
    R_130 = R_32*R_130; R_130 = (-1.0)*R_130; R_44 = R_38*R_44; R_202 = R_25*R_44;
    R_202 = (-1.0)*R_202; R_202 = R_225+R_202; R_130 = R_202+R_130; R_130 = R_223+R_130;
    R_130 = R_227+R_130; R_199 = R_130+R_199; R_53 = R_199+R_53; R_53 = R_67+R_53;
    R_44 = R_24*R_44; R_44 = (-1.0)*R_44; R_99 = R_45*R_99; R_99 = (-1.0)*R_99;
    R_99 = R_111+R_99; R_62 = R_45*R_62; R_111 = R_11*R_62; R_111 = (-1.0)*R_111;
    R_111 = R_50+R_111; R_47 = R_111+R_47; R_253 = R_47+R_253; R_123 = R_253+R_123;
    R_62 = R_13*R_62; R_62 = (-1.0)*R_62; R_100 = R_45*R_100; R_253 = R_11*R_100;
    R_253 = (-1.0)*R_253; R_253 = R_131+R_253; R_169 = R_253+R_169; R_98 = R_169+R_98;
    R_196 = R_98+R_196; R_196 = R_53+R_196; R_123 = R_196+R_123; R_123 = R_88+R_123;
    R_123 = R_71+R_123; R_179 = R_123+R_179; R_250 = R_179+R_250; R_250 = R_36+R_250;
    R_190 = R_250+R_190; R_77 = R_190+R_77; R_77 = R_68+R_77; R_255 = R_77+R_255;
    R_255 = R_229+R_255; R_166 = R_255+R_166; R_100 = R_13*R_100; R_100 = (-1.0)*R_100;
    R_100 = R_209+R_100; R_62 = R_100+R_62; R_35 = R_45*R_35; R_35 = R_26*R_35;
    R_73 = R_45*R_73; R_100 = R_11*R_73; R_100 = (-1.0)*R_100; R_73 = R_13*R_73;
    R_73 = (-1.0)*R_73; R_74 = R_45*R_74; R_74 = (-1.0)*R_74; R_104 = R_45*R_104;
    R_209 = R_11*R_104; R_209 = (-1.0)*R_209; R_209 = R_106+R_209; R_180 = R_209+R_180;
    R_104 = R_13*R_104; R_104 = (-1.0)*R_104; R_78 = R_45*R_78; R_209 = R_11*R_78;
    R_209 = (-1.0)*R_209; R_209 = R_99+R_209; R_178 = R_209+R_178; R_217 = R_178+R_217;
    R_78 = R_13*R_78; R_78 = (-1.0)*R_78; R_78 = R_222+R_78; R_104 = R_78+R_104;
    R_78 = R_45*R_8; R_78 = R_26*R_78; R_78 = 2.0*R_78; R_222 = R_45*R_4;
    R_178 = R_222*R_6; R_209 = R_25*R_178; R_209 = (-1.0)*R_209; R_209 = R_128+R_209;
    R_209 = R_177+R_209; R_177 = R_24*R_178; R_177 = (-1.0)*R_177; R_178 = R_32*R_178;
    R_178 = (-1.0)*R_178; R_128 = R_26*R_222; R_99 = R_11*R_128; R_99 = 2.0*R_99;
    R_128 = R_13*R_128; R_128 = 2.0*R_128; R_56 = R_128+R_56; R_44 = R_56+R_44;
    R_171 = R_44+R_171; R_187 = R_171+R_187; R_187 = R_63+R_187; R_63 = R_37*R_222;
    R_171 = R_25*R_63; R_171 = (-1.0)*R_171; R_183 = R_171+R_183; R_183 = R_177+R_183;
    R_63 = R_24*R_63; R_63 = (-1.0)*R_63; R_63 = R_139+R_63; R_139 = R_48*R_222;
    R_177 = R_11*R_139; R_177 = 2.0*R_177; R_184 = R_177+R_184; R_165 = R_184+R_165;
    R_195 = R_165+R_195; R_160 = R_195+R_160; R_160 = R_209+R_160; R_160 = R_181+R_160;
    R_160 = R_52+R_160; coeff_resultant_U[5] = R_160; R_160 = R_13*R_139; R_160 = 2.0*R_160;
    R_208 = R_160+R_208; R_205 = R_208+R_205; R_205 = R_100+R_205; R_194 = R_205+R_194;
    R_158 = R_194+R_158; R_139 = R_42*R_139; R_139 = 2.0*R_139; R_73 = R_139+R_73;
    R_213 = R_73+R_213; R_222 = R_38*R_222; R_73 = R_25*R_222; R_73 = (-1.0)*R_73;
    R_187 = R_73+R_187; R_178 = R_187+R_178; R_222 = R_24*R_222; R_222 = (-1.0)*R_222;
    R_222 = R_92+R_222; R_92 = R_45*R_17; R_92 = R_26*R_92; R_92 = 2.0*R_92;
    R_7 = R_45*R_7; R_187 = R_51*R_7; R_187 = (-1.0)*R_187; R_262 = R_187+R_262;
    R_187 = R_23*R_7; R_187 = (-1.0)*R_187; R_187 = R_261+R_187; R_7 = R_33*R_7;
    R_7 = (-1.0)*R_7; R_233 = R_7+R_233; R_7 = R_45*R_37; R_7 = R_32*R_7;
    R_261 = R_2*R_7; R_261 = (-1.0)*R_261; R_261 = R_262+R_261; R_234 = R_261+R_234;
    R_188 = R_234+R_188; R_234 = R_7*R_4; R_234 = (-1.0)*R_234; R_234 = R_187+R_234;
    R_232 = R_234+R_232; R_231 = R_232+R_231; R_7 = R_7*R_34; R_7 = (-1.0)*R_7;
    R_233 = R_7+R_233; R_82 = R_45*R_82; R_7 = R_82*R_11; R_7 = (-1.0)*R_7;
    R_7 = R_264+R_7; R_189 = R_7+R_189; R_82 = R_16*R_82; R_82 = (-1.0)*R_82;
    R_7 = R_45*R_34; R_26 = R_26*R_7; R_264 = R_11*R_26; R_264 = 2.0*R_264;
    R_26 = R_13*R_26; R_26 = 2.0*R_26; R_214 = R_26+R_214; R_37 = R_7*R_37;
    R_26 = R_25*R_37; R_26 = (-1.0)*R_26; R_37 = R_24*R_37; R_37 = (-1.0)*R_37;
    R_37 = R_90+R_37; R_6 = R_7*R_6; R_90 = R_25*R_6; R_90 = (-1.0)*R_90;
    R_90 = R_216+R_90; R_216 = R_24*R_6; R_216 = (-1.0)*R_216; R_6 = R_32*R_6;
    R_6 = (-1.0)*R_6; R_48 = R_7*R_48; R_232 = R_11*R_48; R_232 = 2.0*R_232;
    R_218 = R_232+R_218; R_96 = R_218+R_96; R_218 = R_13*R_48; R_218 = 2.0*R_218;
    R_221 = R_218+R_221; R_215 = R_221+R_215; R_48 = R_42*R_48; R_48 = 2.0*R_48;
    R_7 = R_38*R_7; R_25 = R_7*R_25; R_25 = (-1.0)*R_25; R_150 = R_25+R_150;
    R_150 = R_6+R_150; R_7 = R_24*R_7; R_7 = (-1.0)*R_7; R_263 = R_7+R_263;
    R_82 = R_263+R_82; R_82 = R_246+R_82; R_244 = R_82+R_244; R_39 = R_45*R_39;
    R_51 = R_39*R_51; R_51 = (-1.0)*R_51; R_51 = R_64+R_51; R_23 = R_39*R_23;
    R_23 = (-1.0)*R_23; R_245 = R_23+R_245; R_245 = R_238+R_245; R_237 = R_245+R_237;
    R_33 = R_39*R_33; R_33 = (-1.0)*R_33; R_86 = R_33+R_86; R_33 = pow(R_45,2);
    R_39 = R_33*R_2; R_245 = R_11*R_39; R_61 = R_245+R_61; R_166 = R_61+R_166;
    R_90 = R_166+R_90; R_90 = R_96+R_90; R_161 = R_90+R_161; R_206 = R_161+R_206;
    R_206 = R_201+R_206; R_206 = R_132+R_206; R_183 = R_206+R_183; R_183 = R_99+R_183;
    R_158 = R_183+R_158; R_158 = R_138+R_158; R_120 = R_158+R_120; R_120 = R_101+R_120;
    coeff_resultant_U[4] = R_120; R_39 = R_13*R_39; R_39 = R_72+R_39; R_228 = R_39+R_228;
    R_70 = R_228+R_70; R_254 = R_70+R_254; R_254 = R_230+R_254; R_121 = R_254+R_121;
    R_185 = R_121+R_185; R_146 = R_185+R_146; R_220 = R_146+R_220; R_188 = R_220+R_188;
    R_188 = R_35+R_188; R_102 = R_188+R_102; R_211 = R_102+R_211; R_62 = R_211+R_62;
    R_217 = R_62+R_217; R_12 = R_217+R_12; R_12 = R_76+R_12; R_236 = R_12+R_236;
    R_122 = R_236+R_122; R_122 = R_103+R_122; R_122 = R_79+R_122; R_79 = R_33*R_4;
    R_103 = R_11*R_79; R_26 = R_103+R_26; R_216 = R_26+R_216; R_216 = R_122+R_216;
    R_216 = R_264+R_216; R_215 = R_216+R_215; R_215 = R_219+R_215; R_89 = R_215+R_89;
    R_63 = R_89+R_63; R_178 = R_63+R_178; R_178 = R_213+R_178; R_178 = R_180+R_178;
    coeff_resultant_U[3] = R_178; R_79 = R_13*R_79; R_182 = R_79+R_182; R_74 = R_182+R_74;
    R_15 = R_33*R_15; R_182 = R_33*R_34; R_11 = R_182*R_11; R_182 = R_16*R_182;
    R_8 = R_33*R_8; R_8 = R_0+R_8; R_33 = R_17*R_33; R_33 = R_87+R_33;
    R_86 = R_33+R_86; R_38 = R_45*R_38; R_32 = R_38*R_32; R_2 = R_32*R_2;
    R_2 = (-1.0)*R_2; R_51 = R_2+R_51; R_51 = R_240+R_51; R_51 = R_176+R_51;
    R_51 = R_235+R_51; R_231 = R_51+R_231; R_231 = R_78+R_231; R_231 = R_81+R_231;
    R_15 = R_231+R_15; R_104 = R_15+R_104; R_37 = R_104+R_37; R_214 = R_37+R_214;
    R_110 = R_214+R_110; R_75 = R_110+R_75; R_189 = R_75+R_189; R_189 = R_11+R_189;
    R_189 = R_150+R_189; R_189 = R_48+R_189; R_189 = R_83+R_189; R_189 = R_222+R_189;
    R_189 = R_84+R_189; R_74 = R_189+R_74; coeff_resultant_U[2] = R_74; R_4 = R_32*R_4;
    R_4 = (-1.0)*R_4; R_40 = R_4+R_40; R_40 = R_80+R_40; R_40 = R_8+R_40;
    R_237 = R_40+R_237; R_237 = R_108+R_237; R_233 = R_237+R_233; R_92 = R_233+R_92;
    R_92 = R_244+R_92; R_182 = R_92+R_182; R_182 = R_85+R_182; R_91 = R_182+R_91;
    coeff_resultant_U[1] = R_91; R_34 = R_32*R_34; R_34 = (-1.0)*R_34; R_43 = R_34+R_43;
    R_86 = R_43+R_86; coeff_resultant_U[0] = R_86; 

    //PRINT( coeff_resultant_U );
    //std::cout << setprecision(16) << " coeff_resultant_U  " << std::endl;
    //for( unsigned i=0; i < coeff_resultant_U.size(); ++i ) std::cout << "(" << coeff_resultant_U[i] << ") * U**" << i << " + " ;
    //std::cout << std::endl;
    sol_U = Pol<8,1,T>(coeff_resultant_U).real_roots( /*1e-2*/ );
    //PRINT( sol_U );
    for( unsigned i=0; i < sol_U.size(); ++i ) {
        U = sol_U[i];
        //PRINT(U);
        if ((U >= -0.01) and (U <= 1.01)) {
            /// calcul des coefficients du polynôme en V
            T R_0 = pos_nodes[7][0]; T R_1 = pos_nodes[5][0]; T R_2 = pos_nodes[3][0]; T R_3 = pos_nodes[6][0];
            T R_4 = pos_nodes[2][0]; T R_5 = pos_nodes[8][0]; T R_6 = pos_nodes[0][0]; T R_7 = pos_nodes[4][0];
            T R_8 = pos_nodes[1][0]; T R_9 = U; T R_10 = (-8.0)*R_9; R_10 = 12.0+R_10;
            R_10 = R_9*R_10; R_10 = (-4.0)+R_10; R_10 = R_0*R_10; T R_11 = 4.0*R_9;
            T R_12 = (-6.0)+R_11; R_12 = R_9*R_12; R_12 = 2.0+R_12; T R_13 = R_6*R_12;
            R_12 = R_2*R_12; R_11 = (-2.0)+R_11; T R_14 = (-6.0)*R_9; T R_15 = 9.0+R_14;
            R_15 = R_9*R_15; R_15 = (-3.0)+R_15; R_15 = R_6*R_15; R_14 = 3.0+R_14;
            R_1 = R_9*R_1; T R_16 = 8.0*R_9; T R_17 = (-12.0)+R_16; R_17 = R_9*R_17;
            R_17 = 4.0+R_17; R_17 = R_0*R_17; R_16 = (-4.0)+R_16; R_1 = R_16*R_1;
            R_16 = (-1.0)*R_1; R_3 = R_9*R_3; R_0 = (-2.0)*R_9; T R_18 = 3.0+R_0;
            R_18 = R_9*R_18; R_18 = (-1.0)+R_18; R_18 = R_2*R_18; R_0 = 1.0+R_0;
            R_4 = R_9*R_4; R_2 = R_4*R_11; R_0 = R_4*R_0; R_4 = (-1.0)+R_9;
            R_5 = R_9*R_5; R_4 = R_5*R_4; R_4 = (-16.0)*R_4; R_0 = R_4+R_0;
            R_4 = (-1.0)*R_9; R_4 = 1.0+R_4; R_5 = R_5*R_4; R_5 = (-16.0)*R_5;
            R_2 = R_5+R_2; R_3 = R_4*R_3; R_5 = 8.0*R_3; R_3 = (-4.0)*R_3;
            R_7 = R_9*R_7; R_4 = R_7*R_4; R_7 = 8.0*R_4; R_13 = R_7+R_13;
            R_7 = (-12.0)*R_4; R_15 = R_7+R_15; R_4 = 4.0*R_4; R_7 = 2.0*R_9;
            T R_19 = (-3.0)+R_7; R_19 = R_9*R_19; R_19 = 1.0+R_19; R_19 = R_6*R_19;
            R_19 = R_4+R_19; R_7 = (-1.0)+R_7; R_8 = R_9*R_8; R_11 = R_11*R_8;
            R_13 = R_11+R_13; R_13 = R_10+R_13; R_13 = R_16+R_13; R_13 = R_12+R_13;
            R_13 = R_5+R_13; R_13 = R_2+R_13; coeff_V[2] = R_13; R_14 = R_8*R_14;
            R_15 = R_14+R_15; R_15 = R_17+R_15; R_15 = R_1+R_15; R_15 = R_18+R_15;
            R_15 = R_3+R_15; R_15 = R_0+R_15; coeff_V[1] = R_15; R_7 = R_8*R_7;
            R_19 = R_7+R_19; R_7 = pos[0]; R_7 = (-1.0)*R_7; R_19 = R_7+R_19;
            coeff_V[0] = R_19; 
            coeff_V[3] = 0.0; coeff_V[4] = 0.0; 

            if ( max( abs( coeff_V ) ) < tolerance ) {
                T R_0 = pos_nodes[6][1]; T R_1 = pos_nodes[7][1]; T R_2 = pos_nodes[5][1]; T R_3 = pos_nodes[3][1];
                T R_4 = pos_nodes[8][1]; T R_5 = pos_nodes[2][1]; T R_6 = pos_nodes[0][1]; T R_7 = pos_nodes[4][1];
                T R_8 = pos_nodes[1][1]; T R_9 = U; T R_10 = (-8.0)*R_9; R_10 = 12.0+R_10;
                R_10 = R_9*R_10; R_10 = (-4.0)+R_10; R_10 = R_1*R_10; T R_11 = 4.0*R_9;
                T R_12 = (-6.0)+R_11; R_12 = R_9*R_12; R_12 = 2.0+R_12; T R_13 = R_6*R_12;
                R_12 = R_3*R_12; R_11 = (-2.0)+R_11; R_0 = R_9*R_0; T R_14 = (-6.0)*R_9;
                T R_15 = 9.0+R_14; R_15 = R_9*R_15; R_15 = (-3.0)+R_15; R_15 = R_6*R_15;
                R_14 = 3.0+R_14; R_2 = R_9*R_2; T R_16 = 8.0*R_9; T R_17 = (-12.0)+R_16;
                R_17 = R_9*R_17; R_17 = 4.0+R_17; R_17 = R_1*R_17; R_16 = (-4.0)+R_16;
                R_2 = R_16*R_2; R_16 = (-1.0)*R_2; R_1 = (-1.0)+R_9; R_4 = R_9*R_4;
                R_1 = R_4*R_1; R_1 = (-16.0)*R_1; T R_18 = (-2.0)*R_9; T R_19 = 3.0+R_18;
                R_19 = R_9*R_19; R_19 = (-1.0)+R_19; R_19 = R_3*R_19; R_18 = 1.0+R_18;
                R_5 = R_9*R_5; R_3 = R_11*R_5; R_18 = R_5*R_18; R_1 = R_18+R_1;
                R_7 = R_9*R_7; R_18 = (-1.0)*R_9; R_18 = 1.0+R_18; R_4 = R_18*R_4;
                R_4 = (-16.0)*R_4; R_4 = R_3+R_4; R_0 = R_18*R_0; R_3 = 8.0*R_0;
                R_0 = (-4.0)*R_0; R_7 = R_18*R_7; R_18 = 8.0*R_7; R_13 = R_18+R_13;
                R_18 = (-12.0)*R_7; R_15 = R_18+R_15; R_7 = 4.0*R_7; R_18 = 2.0*R_9;
                R_5 = (-3.0)+R_18; R_5 = R_9*R_5; R_5 = 1.0+R_5; R_5 = R_6*R_5;
                R_5 = R_7+R_5; R_18 = (-1.0)+R_18; R_8 = R_9*R_8; R_11 = R_11*R_8;
                R_13 = R_11+R_13; R_13 = R_10+R_13; R_13 = R_16+R_13; R_13 = R_12+R_13;
                R_3 = R_13+R_3; R_3 = R_4+R_3; coeff_V[2] = R_3; R_14 = R_8*R_14;
                R_15 = R_14+R_15; R_15 = R_17+R_15; R_15 = R_2+R_15; R_15 = R_19+R_15;
                R_0 = R_15+R_0; R_0 = R_1+R_0; coeff_V[1] = R_0; R_18 = R_8*R_18;
                R_5 = R_18+R_5; R_18 = pos[1]; R_18 = (-1.0)*R_18; R_5 = R_18+R_5;
                coeff_V[0] = R_5; 
                coeff_V[3] = 0.0; coeff_V[4] = 0.0; 

            }
            sol_V = Pol<4,1,T>( coeff_V ).real_roots(  );
            //PRINT( sol_V);
            for( unsigned j=0; j < sol_V.size(); ++j ) {
                U = sol_U[i];
                V = sol_V[j];
                TVI vi( U, V );
                //PRINT( vi );
                if ( var_inter_is_inside( Quad_9(), vi, 0.01 ) ) {
                    //std::cout << "- 0" << std::endl; PRINT( U ); PRINT( V );
                    isSolution = true;
                    for( unsigned t=0; t<6; ++t ) { /// méthode de Newton-Raphson
                        T R_0 = pos[1]; R_0 = (-1.0)*R_0; T R_1 = pos_nodes[1][1]; T R_2 = pos_nodes[6][1];
                        T R_3 = pos_nodes[7][1]; T R_4 = pos_nodes[5][1]; T R_5 = pos_nodes[3][1]; T R_6 = pos_nodes[8][1];
                        T R_7 = pos_nodes[2][1]; T R_8 = pos_nodes[0][1]; T R_9 = pos_nodes[4][1]; T R_10 = pos_nodes[8][0];
                        T R_11 = pos_nodes[5][0]; T R_12 = pos_nodes[2][0]; T R_13 = pos_nodes[6][0]; T R_14 = pos_nodes[7][0];
                        T R_15 = pos_nodes[3][0]; T R_16 = pos_nodes[0][0]; T R_17 = pos[0]; R_17 = (-1.0)*R_17;
                        T R_18 = pos_nodes[4][0]; T R_19 = V; T R_20 = 16.0*R_19; T R_21 = (-4.0)+R_20;
                        T R_22 = R_2*R_21; R_21 = R_13*R_21; R_20 = (-12.0)+R_20; T R_23 = R_9*R_20;
                        R_22 = R_23+R_22; R_20 = R_18*R_20; R_21 = R_20+R_21; R_20 = (-2.0)*R_19;
                        R_23 = 1.0+R_20; T R_24 = (-1.0)+R_19; T R_25 = (-1.0)*R_19; R_25 = 1.0+R_25;
                        T R_26 = R_11*R_25; R_26 = 8.0*R_26; T R_27 = 4.0*R_25; T R_28 = (-12.0)*R_25;
                        T R_29 = 4.0*R_19; T R_30 = (-6.0)+R_29; R_30 = R_19*R_30; R_30 = 4.0+R_30;
                        T R_31 = (-2.0)+R_29; T R_32 = R_12*R_31; R_26 = R_32+R_26; R_32 = (-6.0)*R_19;
                        T R_33 = 2.0*R_19; T R_34 = (-3.0)+R_33; R_34 = R_19*R_34; T R_35 = 8.0*R_19;
                        T R_36 = (-4.0)+R_35; R_2 = R_2*R_36; R_36 = R_13*R_36; R_35 = (-12.0)+R_35;
                        R_35 = R_19*R_35; R_35 = 4.0+R_35; R_13 = R_18*R_35; T R_37 = pos_nodes[1][0];
                        T R_38 = U; T R_39 = 16.0*R_38; R_39 = (-4.0)+R_39; R_39 = R_25*R_39;
                        T R_40 = R_11*R_39; R_39 = R_4*R_39; T R_41 = (-8.0)*R_38; R_41 = 12.0+R_41;
                        R_41 = R_38*R_41; R_41 = (-4.0)+R_41; T R_42 = R_3*R_41; R_41 = R_19*R_41;
                        R_26 = R_38*R_26; R_30 = R_38*R_30; T R_43 = (-2.0)*R_38; R_43 = 1.0+R_43;
                        T R_44 = R_43*R_2; T R_45 = R_9*R_43; R_45 = R_35*R_45; T R_46 = R_43*R_36;
                        R_43 = R_18*R_43; R_43 = R_35*R_43; R_18 = R_38*R_25; T R_47 = 2.0*R_18;
                        R_47 = R_19+R_47; R_47 = (-1.0)+R_47; T R_48 = R_6*R_47; R_48 = (-16.0)*R_48;
                        R_47 = R_10*R_47; R_47 = (-16.0)*R_47; T R_49 = R_19+R_18; R_49 = (-1.0)+R_49;
                        T R_50 = R_6*R_49; R_50 = (-16.0)*R_50; R_49 = R_10*R_49; R_49 = (-16.0)*R_49;
                        T R_51 = 8.0*R_38; T R_52 = (-6.0)+R_51; R_52 = R_19*R_52; R_51 = (-4.0)+R_51;
                        R_4 = R_4*R_51; T R_53 = R_23*R_4; R_4 = R_25*R_4; T R_54 = R_51*R_25;
                        R_54 = R_11*R_54; R_51 = R_11*R_51; R_23 = R_23*R_51; R_51 = R_25*R_51;
                        R_24 = R_38*R_24; R_25 = (-16.0)*R_24; R_25 = R_28+R_25; R_11 = R_3*R_25;
                        R_44 = R_11+R_44; R_44 = R_39+R_44; R_25 = R_14*R_25; R_24 = (-8.0)*R_24;
                        R_24 = R_28+R_24; R_24 = R_38*R_24; R_27 = R_24+R_27; R_3 = R_3*R_27;
                        R_41 = R_27+R_41; R_41 = R_14*R_41; R_27 = R_14*R_27; R_31 = R_38*R_31;
                        R_14 = (-1.0)*R_31; R_14 = R_19+R_14; R_14 = (-2.0)*R_14; R_14 = 1.0+R_14;
                        R_24 = R_12*R_14; R_14 = R_7*R_14; R_28 = 2.0*R_31; R_28 = R_32+R_28;
                        R_28 = 3.0+R_28; R_39 = R_5*R_28; R_44 = R_39+R_44; R_44 = R_48+R_44;
                        R_44 = R_14+R_44; R_44 = R_19*R_44; R_28 = R_15*R_28; R_14 = R_28+R_25;
                        R_14 = R_46+R_14; R_14 = R_47+R_14; R_14 = R_40+R_14; R_14 = R_24+R_14;
                        R_14 = R_19*R_14; R_20 = R_31+R_20; R_20 = 1.0+R_20; R_24 = R_7*R_20;
                        R_24 = R_50+R_24; R_20 = R_12*R_20; R_28 = R_20+R_28; R_28 = R_25+R_28;
                        R_28 = R_54+R_28; R_28 = R_46+R_28; R_28 = R_47+R_28; R_26 = R_28+R_26;
                        R_26 = R_19*R_26; R_32 = R_32+R_31; R_32 = 3.0+R_32; R_32 = R_38*R_32;
                        R_33 = R_32+R_33; R_33 = (-1.0)+R_33; R_28 = R_5*R_33; R_28 = R_3+R_28;
                        R_33 = R_15*R_33; R_27 = R_33+R_27; R_33 = R_19+R_38; R_33 = (-6.0)*R_33;
                        R_52 = R_33+R_52; R_52 = 9.0+R_52; R_52 = R_38*R_52; R_52 = R_29+R_52;
                        R_52 = (-3.0)+R_52; R_29 = R_8*R_52; R_29 = R_28+R_29; R_52 = R_16*R_52;
                        R_41 = R_52+R_41; R_52 = R_19*R_38; R_52 = 4.0*R_52; R_33 = R_52+R_33;
                        R_33 = 9.0+R_33; R_33 = R_19*R_33; R_52 = R_33+R_30; R_52 = (-3.0)+R_52;
                        R_3 = R_8*R_52; R_3 = R_45+R_3; R_44 = R_3+R_44; R_52 = R_16*R_52;
                        R_52 = R_43+R_52; R_14 = R_52+R_14; R_26 = R_52+R_26; R_52 = (-1.0)*R_38;
                        R_43 = 2.0+R_52; R_43 = R_19*R_43; R_43 = R_18+R_43; R_43 = (-1.0)+R_43;
                        R_6 = R_6*R_43; R_6 = (-16.0)*R_6; R_6 = R_53+R_6; R_43 = R_10*R_43;
                        R_43 = (-16.0)*R_43; R_52 = 1.0+R_52; R_22 = R_52*R_22; R_2 = R_52*R_2;
                        R_2 = R_24+R_2; R_4 = R_2+R_4; R_4 = R_38*R_4; R_28 = R_4+R_28;
                        R_28 = R_19*R_28; R_35 = R_35*R_52; R_35 = R_9*R_35; R_9 = R_19*R_52;
                        R_9 = (-4.0)*R_9; R_9 = R_31+R_9; R_9 = 1.0+R_9; R_7 = R_7*R_9;
                        R_9 = R_12*R_9; R_21 = R_52*R_21; R_36 = R_52*R_36; R_20 = R_36+R_20;
                        R_51 = R_20+R_51; R_49 = R_51+R_49; R_49 = R_38*R_49; R_49 = R_27+R_49;
                        R_49 = R_19*R_49; R_13 = R_52*R_13; R_52 = (-6.0)*R_38; R_27 = 4.0*R_38;
                        R_51 = (-6.0)+R_27; R_51 = R_38*R_51; R_20 = 2.0+R_51; R_20 = R_5*R_20;
                        R_42 = R_20+R_42; R_42 = R_19*R_42; R_51 = 4.0+R_51; R_51 = R_19*R_51;
                        R_51 = R_32+R_51; R_51 = (-1.0)+R_51; R_51 = R_15*R_51; R_27 = (-2.0)+R_27;
                        R_27 = R_19*R_27; R_15 = 2.0*R_27; R_15 = R_52+R_15; R_15 = 3.0+R_15;
                        R_32 = R_1*R_15; R_6 = R_32+R_6; R_22 = R_6+R_22; R_7 = R_22+R_7;
                        R_7 = R_38*R_7; R_22 = R_29+R_7; R_22 = R_42+R_22; R_22 = R_19*R_22;
                        R_15 = R_37*R_15; R_23 = R_15+R_23; R_23 = R_43+R_23; R_23 = R_21+R_23;
                        R_9 = R_23+R_9; R_9 = R_38*R_9; R_9 = R_41+R_9; R_51 = R_9+R_51;
                        R_9 = R_19*R_51; R_52 = R_27+R_52; R_52 = 3.0+R_52; R_52 = R_19*R_52;
                        R_30 = R_52+R_30; R_30 = (-1.0)+R_30; R_27 = R_1*R_30; R_27 = R_44+R_27;
                        R_30 = R_37*R_30; R_14 = R_30+R_14; R_14 = 1/R_14; R_30 = R_26+R_30;
                        R_26 = 1/R_30; R_44 = R_26*R_27; R_44 = R_51*R_44; R_44 = (-1.0)*R_44;
                        R_29 = R_44+R_29; R_7 = R_29+R_7; R_7 = R_42+R_7; R_7 = 1/R_7;
                        R_30 = R_38*R_30; R_42 = 2.0*R_38; R_33 = R_42+R_33; R_33 = (-3.0)+R_33;
                        R_33 = R_38*R_33; R_33 = R_34+R_33; R_33 = 1.0+R_33; R_8 = R_8*R_33;
                        R_8 = R_0+R_8; R_8 = R_28+R_8; R_33 = R_16*R_33; R_33 = R_17+R_33;
                        R_49 = R_33+R_49; R_52 = R_42+R_52; R_52 = (-1.0)+R_52; R_1 = R_1*R_52;
                        R_1 = R_35+R_1; R_1 = R_38*R_1; R_8 = R_1+R_8; R_8 = (-1.0)*R_8;
                        R_22 = R_8+R_22; R_52 = R_37*R_52; R_13 = R_52+R_13; R_13 = R_38*R_13;
                        R_49 = R_13+R_49; R_49 = (-1.0)*R_49; R_30 = R_49+R_30; R_9 = R_30+R_9;
                        R_9 = R_26*R_9; R_9 = (-1.0)*R_9; R_9 = R_38+R_9; R_9 = R_27*R_9;
                        R_22 = R_9+R_22; R_7 = R_22*R_7; V2 = R_7; R_7 = (-1.0)*R_7;
                        R_7 = R_19+R_7; R_7 = R_51*R_7; R_7 = R_30+R_7; R_14 = R_7*R_14;
                        U2 = R_14; 

                        T err = 1 + abs(U) + abs(V); err = (abs(U-U2) + abs(V-V2)) / err;
                        U = U2; V = V2;
                        if (err < tolerance ) break;
                        vi = TVI( U, V );
                        if (not( var_inter_is_inside( Quad_9(), vi, tolerance ) ) ) {
                            isSolution = false;
                            break;
                        }
                        //std::cout << "- " << t+1 << std::endl; PRINT( U ); PRINT( V  );
                    }
                    /// on teste notre solution (U, V) en évaluant la position en ce point (U, V).
                    if (isSolution) {
                        T R_0 = pos_nodes[6][1]; T R_1 = pos_nodes[0][1]; T R_2 = pos_nodes[4][1]; T R_3 = pos_nodes[1][1];
                        T R_4 = pos_nodes[7][1]; T R_5 = pos_nodes[5][1]; T R_6 = pos_nodes[3][1]; T R_7 = pos_nodes[8][1];
                        T R_8 = pos_nodes[2][1]; T R_9 = pos[1]; R_9 = (-1.0)*R_9; T R_10 = pos_nodes[0][0];
                        T R_11 = pos_nodes[4][0]; T R_12 = pos_nodes[1][0]; T R_13 = pos_nodes[7][0]; T R_14 = pos_nodes[5][0];
                        T R_15 = pos_nodes[3][0]; T R_16 = pos_nodes[6][0]; T R_17 = pos_nodes[2][0]; T R_18 = pos_nodes[8][0];
                        T R_19 = U; R_0 = R_19*R_0; R_2 = R_19*R_2; R_3 = R_19*R_3;
                        R_5 = R_19*R_5; R_7 = R_19*R_7; R_8 = R_19*R_8; R_11 = R_19*R_11;
                        R_12 = R_19*R_12; T R_20 = (-6.0)*R_19; T R_21 = 4.0*R_19; R_21 = (-2.0)+R_21;
                        T R_22 = 2.0*R_19; R_14 = R_19*R_14; T R_23 = 8.0*R_19; R_23 = (-4.0)+R_23;
                        R_16 = R_19*R_16; T R_24 = (-1.0)*R_19; R_24 = 1.0+R_24; R_2 = R_24*R_2;
                        R_11 = R_11*R_24; R_17 = R_19*R_17; R_18 = R_19*R_18; T R_25 = V;
                        R_0 = R_25*R_0; R_0 = R_24*R_0; R_4 = R_25*R_4; R_5 = R_25*R_5;
                        R_6 = R_25*R_6; R_7 = R_25*R_7; R_8 = R_25*R_8; T R_26 = R_25+R_19;
                        R_26 = (-6.0)*R_26; T R_27 = R_25*R_19; R_27 = 4.0*R_27; R_26 = R_27+R_26;
                        R_26 = 9.0+R_26; R_26 = R_25*R_26; R_26 = R_22+R_26; R_26 = (-3.0)+R_26;
                        R_26 = R_19*R_26; R_21 = R_25*R_21; R_20 = R_21+R_20; R_20 = 3.0+R_20;
                        R_20 = R_25*R_20; R_20 = R_22+R_20; R_20 = (-1.0)+R_20; R_3 = R_20*R_3;
                        R_12 = R_20*R_12; R_13 = R_25*R_13; R_20 = (-1.0)+R_25; R_20 = R_19*R_20;
                        R_20 = (-8.0)*R_20; R_14 = R_25*R_14; R_15 = R_25*R_15; R_22 = 2.0*R_25;
                        R_21 = (-3.0)+R_22; R_21 = R_25*R_21; R_26 = R_21+R_26; R_26 = 1.0+R_26;
                        R_1 = R_1*R_26; R_26 = R_10*R_26; R_10 = (-6.0)*R_25; R_16 = R_25*R_16;
                        R_16 = R_24*R_16; R_24 = 8.0*R_25; R_21 = (-12.0)+R_24; R_21 = R_25*R_21;
                        R_21 = 4.0+R_21; R_2 = R_21*R_2; R_1 = R_2+R_1; R_1 = R_3+R_1;
                        R_11 = R_21*R_11; R_26 = R_11+R_26; R_26 = R_12+R_26; R_24 = (-4.0)+R_24;
                        R_0 = R_24*R_0; R_16 = R_24*R_16; R_17 = R_25*R_17; R_24 = (-2.0)*R_25;
                        R_12 = 4.0*R_25; R_12 = (-2.0)+R_12; R_12 = R_19*R_12; R_10 = R_10+R_12;
                        R_10 = 3.0+R_10; R_10 = R_19*R_10; R_22 = R_10+R_22; R_22 = (-1.0)+R_22;
                        R_6 = R_22*R_6; R_15 = R_22*R_15; R_24 = R_12+R_24; R_24 = 1.0+R_24;
                        R_8 = R_24*R_8; R_17 = R_24*R_17; R_24 = (-1.0)*R_25; R_24 = 1.0+R_24;
                        R_5 = R_24*R_5; R_5 = R_23*R_5; R_12 = 4.0*R_24; R_22 = (-12.0)*R_24;
                        R_20 = R_22+R_20; R_20 = R_19*R_20; R_12 = R_20+R_12; R_4 = R_12*R_4;
                        R_1 = R_4+R_1; R_1 = R_5+R_1; R_1 = R_6+R_1; R_0 = R_1+R_0;
                        R_13 = R_12*R_13; R_26 = R_13+R_26; R_14 = R_24*R_14; R_14 = R_23*R_14;
                        R_26 = R_14+R_26; R_26 = R_15+R_26; R_26 = R_16+R_26; R_24 = R_19*R_24;
                        R_24 = R_25+R_24; R_24 = (-1.0)+R_24; R_7 = R_24*R_7; R_7 = (-16.0)*R_7;
                        R_7 = R_8+R_7; R_0 = R_7+R_0; R_0 = R_9+R_0; eval2 = R_0;
                        R_18 = R_25*R_18; R_24 = R_18*R_24; R_24 = (-16.0)*R_24; R_17 = R_24+R_17;
                        R_26 = R_17+R_26; R_17 = pos[0]; R_17 = (-1.0)*R_17; R_26 = R_17+R_26;
                        eval = R_26; 

                        //PRINT( eval ); PRINT( eval2 );
                        if ( (abs(eval) < tolerance) and (abs(eval2) < tolerance) ) {
                           var_inter += TVI( U, V );
                           return true;
                        }
                    } /// if la méthode Newton à converger vers une solution dans l'espace de référence
                } /// if var_inter_is_inside 
            }  /// for sur sol_V
        } /// endif U in [0;1]
    } /// for sur sol_U
    
    //var_inter += std::numeric_limits<T>::max();
    return false;
}
}
#endif  /// GET_VAR_INTER__Quad_9
 
