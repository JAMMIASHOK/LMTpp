/*!
\webpage Signification des noms de paramètre template

    La bibbliothèque LMT++ est basée sur la technique de la programmation paramétrique en C++, i.e. les fameux <strong> template <strong> .
    Cette souplesse dans le choix des types peut se faire pour les classes ainsi que pour les fonctions et les méthodes. 
    Exemples très classique pour une fonction :
    \code C/C++
        template <class T >
        T min( T a, T b ) {
            if ( a < b )
                return a;
            else
                return b;
        }

    et pour une classe
    \code C/C++
        template<class T>
        struct MonVecteur {
            T* data;
        };
        
    Dans les deux cas, la lettre <strong> T </strong> représente un type ( une classe ) quelconque. Avec tout de même une condition dans le cas de la fonction min : il faut bien entendu que a < b ait un sens : i.e.  l'opérateur < doit être défini par défaut comme pour le type double, ou bien défini dans la classe.

    Pour faciliter la compréhension et l'utilisation des types et des fonctions de la libriairie LMT++, des conventions ont été prises pour le nom des types et elles sont presque toujours respectées.
    
    Les voici :
        * <strong> T  </strong> représente un type scalaire ( e.g. float ou double )
        * <strong> TE </strong> représente un type de la forme \a Element <NameElem_, NameBehavior, TNode_, TData, num_in_elem_list_ >.
        * <strong> TM </strong> représente un maillage ou une matrice ( voir \a Mesh  et \a Mat ).
        * <strong> Op </strong> représente un foncteur.
        * <strong> TV </strong> représente un vecteur ( voir \a Vec ).
        * <strong> TF </strong> représente une formulation du genre \a Formulation < ... > .

    \keyword Remarque/Signification des noms de paramètre template
*/